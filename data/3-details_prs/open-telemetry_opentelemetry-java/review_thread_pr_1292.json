{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDQ3OTY2", "number": 1292, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOToxMDo0NFrOEBIfFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjoyNjowMlrOECOxAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjIzMDYwOnYy", "diffSide": "RIGHT", "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOToxMDo0NFrOGc04AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowODo1OFrOGc3uBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTYxNg==", "bodyText": "Consider using withCopyFileToContainer and withCmd on GenericContainer instead.\nThere is no ned to build an image here and it will only add an overhead to the startup :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432879616", "createdAt": "2020-05-30T19:10:44Z", "author": {"login": "bsideup"}, "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjIxNQ==", "bodyText": "thats a good spot! thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432926215", "createdAt": "2020-05-31T09:08:58Z", "author": {"login": "jarebudev"}, "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTYxNg=="}, "originalCommit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjIzMTU1OnYy", "diffSide": "RIGHT", "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOToxMjo1MFrOGc04hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTowMjoxOVrOGdaBXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA==", "bodyText": "any reason you did not annotate jaegerExampleAppContainer with @Rule or @ClassRule?\nThe container will get removed, eventually (thanks to Testcontainers' two phase cleanup: JVM shutdown hook and Ryuk - a sidecar container), but here you only start it from this test and then never call stop, so it will last until JVM's termination", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432879748", "createdAt": "2020-05-30T19:12:50Z", "author": {"login": "bsideup"}, "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {\n+    return new ImageFromDockerfile()\n+        .withFileFromFile(ARCHIVE_NAME, Paths.get(ARCHIVE_NAME).toFile())\n+        .withDockerfileFromBuilder(\n+            builder ->\n+                builder\n+                    .from(\"openjdk:7u111-jre-alpine\")\n+                    .copy(ARCHIVE_NAME, \"/app/\" + APP_NAME)\n+                    .entryPoint(\n+                        \"java\",\n+                        \"-cp\",\n+                        \"/app/\" + APP_NAME,\n+                        \"io.opentelemetry.example.JaegerExample\",\n+                        JAEGER_HOSTNAME,\n+                        Integer.toString(COLLECTOR_PORT))\n+                    .build());\n+  }\n+\n+  @Test\n+  public void testJaegerExampleAppIntegration() {\n+    jaegerExampleAppContainer.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjc5NA==", "bodyText": "Ah I was going to change that :)\nAs its only doing one test, I've changed it to a @Rule so that its started before the test, the Jaeger container is still started as a @ClassRule so to guarantee starting in the correct order.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432926794", "createdAt": "2020-05-31T09:17:04Z", "author": {"login": "jarebudev"}, "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {\n+    return new ImageFromDockerfile()\n+        .withFileFromFile(ARCHIVE_NAME, Paths.get(ARCHIVE_NAME).toFile())\n+        .withDockerfileFromBuilder(\n+            builder ->\n+                builder\n+                    .from(\"openjdk:7u111-jre-alpine\")\n+                    .copy(ARCHIVE_NAME, \"/app/\" + APP_NAME)\n+                    .entryPoint(\n+                        \"java\",\n+                        \"-cp\",\n+                        \"/app/\" + APP_NAME,\n+                        \"io.opentelemetry.example.JaegerExample\",\n+                        JAEGER_HOSTNAME,\n+                        Integer.toString(COLLECTOR_PORT))\n+                    .build());\n+  }\n+\n+  @Test\n+  public void testJaegerExampleAppIntegration() {\n+    jaegerExampleAppContainer.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA=="}, "originalCommit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1NzQ2MQ==", "bodyText": "to guarantee starting in the correct order\n\nIn case you need to enforce the order, there is also GenericContainer#dependsOn for that :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r433057461", "createdAt": "2020-06-01T06:08:52Z", "author": {"login": "bsideup"}, "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {\n+    return new ImageFromDockerfile()\n+        .withFileFromFile(ARCHIVE_NAME, Paths.get(ARCHIVE_NAME).toFile())\n+        .withDockerfileFromBuilder(\n+            builder ->\n+                builder\n+                    .from(\"openjdk:7u111-jre-alpine\")\n+                    .copy(ARCHIVE_NAME, \"/app/\" + APP_NAME)\n+                    .entryPoint(\n+                        \"java\",\n+                        \"-cp\",\n+                        \"/app/\" + APP_NAME,\n+                        \"io.opentelemetry.example.JaegerExample\",\n+                        JAEGER_HOSTNAME,\n+                        Integer.toString(COLLECTOR_PORT))\n+                    .build());\n+  }\n+\n+  @Test\n+  public void testJaegerExampleAppIntegration() {\n+    jaegerExampleAppContainer.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA=="}, "originalCommit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4ODIyMw==", "bodyText": "thanks that does the job!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r433488223", "createdAt": "2020-06-01T21:02:19Z", "author": {"login": "jarebudev"}, "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {\n+    return new ImageFromDockerfile()\n+        .withFileFromFile(ARCHIVE_NAME, Paths.get(ARCHIVE_NAME).toFile())\n+        .withDockerfileFromBuilder(\n+            builder ->\n+                builder\n+                    .from(\"openjdk:7u111-jre-alpine\")\n+                    .copy(ARCHIVE_NAME, \"/app/\" + APP_NAME)\n+                    .entryPoint(\n+                        \"java\",\n+                        \"-cp\",\n+                        \"/app/\" + APP_NAME,\n+                        \"io.opentelemetry.example.JaegerExample\",\n+                        JAEGER_HOSTNAME,\n+                        Integer.toString(COLLECTOR_PORT))\n+                    .build());\n+  }\n+\n+  @Test\n+  public void testJaegerExampleAppIntegration() {\n+    jaegerExampleAppContainer.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA=="}, "originalCommit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTI3Mzk3OnYy", "diffSide": "RIGHT", "path": "examples/jaeger/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjowMzoxMVrOGdQm-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo0ODo1NlrOGdbSSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNDAwOQ==", "bodyText": "My understanding of \"platform\" and boms is weak. This doesn't make the jaeger exporter depend on testcontainers, does it? Should this be testImplementation ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r433334009", "createdAt": "2020-06-01T16:03:11Z", "author": {"login": "jkwatson"}, "path": "examples/jaeger/build.gradle", "diffHunk": "@@ -3,12 +3,33 @@ plugins {\n }\n \n description = 'OpenTelemetry Examples for Jaeger Exporter'\n-ext.moduleName = \"io.opentelemetry.examples.jaeger\"\n+ext {\n+    moduleName = \"io.opentelemetry.examples.jaeger\"\n+    testcontainersVersion = \"1.14.2\"\n+}\n+\n+sourceCompatibility = 1.7\n+targetCompatibility = 1.7\n+\n+compileTestJava {\n+    sourceCompatibility = 1.8\n+    targetCompatibility = 1.8\n+}\n \n dependencies {\n     compile(\"io.opentelemetry:opentelemetry-api:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-sdk:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-exporters-jaeger:${opentelemetryVersion}\")\n     compile(\"io.grpc:grpc-protobuf:1.28.0\")\n     compile(\"io.grpc:grpc-netty-shaded:1.28.0\")\n+\n+    implementation platform(\"org.testcontainers:testcontainers-bom:${testcontainersVersion}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe38cc8f3b9196af2359f5156028651c5ac71d9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NjI1MA==", "bodyText": "That's a good catch - it should be testImplementation only.  I've changed it :)\nI assume you meant jaeger example not jaeger exporter?\nIf we had left it as implementation then the bom would be imported and available in compile and runtime scopes as well as test, so you could import into these as well e.g. compile(\"org.testcontainers:testcontainers\")", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r433496250", "createdAt": "2020-06-01T21:19:04Z", "author": {"login": "jarebudev"}, "path": "examples/jaeger/build.gradle", "diffHunk": "@@ -3,12 +3,33 @@ plugins {\n }\n \n description = 'OpenTelemetry Examples for Jaeger Exporter'\n-ext.moduleName = \"io.opentelemetry.examples.jaeger\"\n+ext {\n+    moduleName = \"io.opentelemetry.examples.jaeger\"\n+    testcontainersVersion = \"1.14.2\"\n+}\n+\n+sourceCompatibility = 1.7\n+targetCompatibility = 1.7\n+\n+compileTestJava {\n+    sourceCompatibility = 1.8\n+    targetCompatibility = 1.8\n+}\n \n dependencies {\n     compile(\"io.opentelemetry:opentelemetry-api:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-sdk:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-exporters-jaeger:${opentelemetryVersion}\")\n     compile(\"io.grpc:grpc-protobuf:1.28.0\")\n     compile(\"io.grpc:grpc-netty-shaded:1.28.0\")\n+\n+    implementation platform(\"org.testcontainers:testcontainers-bom:${testcontainersVersion}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNDAwOQ=="}, "originalCommit": {"oid": "6fe38cc8f3b9196af2359f5156028651c5ac71d9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwODkzNg==", "bodyText": "cool.  \u2795", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r433508936", "createdAt": "2020-06-01T21:48:56Z", "author": {"login": "jkwatson"}, "path": "examples/jaeger/build.gradle", "diffHunk": "@@ -3,12 +3,33 @@ plugins {\n }\n \n description = 'OpenTelemetry Examples for Jaeger Exporter'\n-ext.moduleName = \"io.opentelemetry.examples.jaeger\"\n+ext {\n+    moduleName = \"io.opentelemetry.examples.jaeger\"\n+    testcontainersVersion = \"1.14.2\"\n+}\n+\n+sourceCompatibility = 1.7\n+targetCompatibility = 1.7\n+\n+compileTestJava {\n+    sourceCompatibility = 1.8\n+    targetCompatibility = 1.8\n+}\n \n dependencies {\n     compile(\"io.opentelemetry:opentelemetry-api:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-sdk:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-exporters-jaeger:${opentelemetryVersion}\")\n     compile(\"io.grpc:grpc-protobuf:1.28.0\")\n     compile(\"io.grpc:grpc-netty-shaded:1.28.0\")\n+\n+    implementation platform(\"org.testcontainers:testcontainers-bom:${testcontainersVersion}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNDAwOQ=="}, "originalCommit": {"oid": "6fe38cc8f3b9196af2359f5156028651c5ac71d9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzc0NTI4OnYy", "diffSide": "RIGHT", "path": "examples/jaeger/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjoyNjowMlrOGej1-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo0Nzo0NVrOGkCLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5NzcyMQ==", "bodyText": "new line?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r434697721", "createdAt": "2020-06-03T16:26:02Z", "author": {"login": "bogdandrutu"}, "path": "examples/jaeger/build.gradle", "diffHunk": "@@ -3,12 +3,33 @@ plugins {\n }\n \n description = 'OpenTelemetry Examples for Jaeger Exporter'\n-ext.moduleName = \"io.opentelemetry.examples.jaeger\"\n+ext {\n+    moduleName = \"io.opentelemetry.examples.jaeger\"\n+    testcontainersVersion = \"1.14.2\"\n+}\n+\n+sourceCompatibility = 1.7\n+targetCompatibility = 1.7\n+\n+compileTestJava {\n+    sourceCompatibility = 1.8\n+    targetCompatibility = 1.8\n+}\n \n dependencies {\n     compile(\"io.opentelemetry:opentelemetry-api:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-sdk:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-exporters-jaeger:${opentelemetryVersion}\")\n     compile(\"io.grpc:grpc-protobuf:1.28.0\")\n     compile(\"io.grpc:grpc-netty-shaded:1.28.0\")\n+\n+    testImplementation platform(\"org.testcontainers:testcontainers-bom:${testcontainersVersion}\")\n+    testCompile(\"org.testcontainers:testcontainers\")\n+    testCompile(\"org.awaitility:awaitility:3.0.0\")\n+    testCompile(\"io.rest-assured:rest-assured:4.2.0\")\n }\n+\n+tasks.withType(Test) {\n+    dependsOn fatJar\n+    systemProperty 'archive.name', fatJar.outputs.files[0].path\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c95fec61b708183de4af438eda4399dae46ace6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNzYxNQ==", "bodyText": "new line?\n\nsorted", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r440437615", "createdAt": "2020-06-15T20:47:45Z", "author": {"login": "jarebudev"}, "path": "examples/jaeger/build.gradle", "diffHunk": "@@ -3,12 +3,33 @@ plugins {\n }\n \n description = 'OpenTelemetry Examples for Jaeger Exporter'\n-ext.moduleName = \"io.opentelemetry.examples.jaeger\"\n+ext {\n+    moduleName = \"io.opentelemetry.examples.jaeger\"\n+    testcontainersVersion = \"1.14.2\"\n+}\n+\n+sourceCompatibility = 1.7\n+targetCompatibility = 1.7\n+\n+compileTestJava {\n+    sourceCompatibility = 1.8\n+    targetCompatibility = 1.8\n+}\n \n dependencies {\n     compile(\"io.opentelemetry:opentelemetry-api:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-sdk:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-exporters-jaeger:${opentelemetryVersion}\")\n     compile(\"io.grpc:grpc-protobuf:1.28.0\")\n     compile(\"io.grpc:grpc-netty-shaded:1.28.0\")\n+\n+    testImplementation platform(\"org.testcontainers:testcontainers-bom:${testcontainersVersion}\")\n+    testCompile(\"org.testcontainers:testcontainers\")\n+    testCompile(\"org.awaitility:awaitility:3.0.0\")\n+    testCompile(\"io.rest-assured:rest-assured:4.2.0\")\n }\n+\n+tasks.withType(Test) {\n+    dependsOn fatJar\n+    systemProperty 'archive.name', fatJar.outputs.files[0].path\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5NzcyMQ=="}, "originalCommit": {"oid": "5c95fec61b708183de4af438eda4399dae46ace6"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 757, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}