{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1Mjk5MjIw", "number": 1120, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0MTozOVrODzBf1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDozOTo0MVrODzOmZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODI4NTAzOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0MTozOVrOGHa1hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0MTozOVrOGHa1hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMjkwMA==", "bodyText": "discussion on the very very similar #1094 says this needs to go inside the try block because security managers can make this illegal.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410432900", "createdAt": "2020-04-17T19:41:39Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -237,6 +237,7 @@ public BatchSpansProcessor build() {\n \n   private static Thread newThread(Runnable runnable) {\n     Thread thread = MoreExecutors.platformThreadFactory().newThread(runnable);\n+    thread.setDaemon(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce52baf7a48dd7058c73b3eb9020adcef1145c15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODI4NTcwOnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0MTo1NlrOGHa19A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1MDo1M1rOGHbGfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMzAxMg==", "bodyText": "same. move into the try block", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410433012", "createdAt": "2020-04-17T19:41:56Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -249,6 +249,7 @@ private ThreadFactoryWithName(String threadName) {\n     @Override\n     public Thread newThread(Runnable runnable) {\n       Thread thread = MoreExecutors.platformThreadFactory().newThread(runnable);\n+      thread.setDaemon(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce52baf7a48dd7058c73b3eb9020adcef1145c15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzNzI0NQ==", "bodyText": "Will do (to both).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410437245", "createdAt": "2020-04-17T19:50:53Z", "author": {"login": "johnbley"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -249,6 +249,7 @@ private ThreadFactoryWithName(String threadName) {\n     @Override\n     public Thread newThread(Runnable runnable) {\n       Thread thread = MoreExecutors.platformThreadFactory().newThread(runnable);\n+      thread.setDaemon(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMzAxMg=="}, "originalCommit": {"oid": "ce52baf7a48dd7058c73b3eb9020adcef1145c15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMzNTE3OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1OToyNlrOGHbVsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMTowOFrOGHe7oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg==", "bodyText": "since there is a (admittedly rare) security manager-induced failure mode here, can we add a comment to the javadoc for this class about it?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410441136", "createdAt": "2020-04-17T19:59:26Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -135,7 +136,13 @@ public IntervalMetricReader build() {\n   @SuppressWarnings(\"FutureReturnValueIgnored\")\n   private IntervalMetricReader(InternalState internalState) {\n     this.exporter = new Exporter(internalState);\n-    this.scheduler = Executors.newScheduledThreadPool(1, MoreExecutors.platformThreadFactory());\n+    this.scheduler =\n+        Executors.newScheduledThreadPool(\n+            1,\n+            new ThreadFactoryBuilder()\n+                .setDaemon(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e18c712315a118509a98889c90efed73dfb0f2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0NzIzMw==", "bodyText": "Note that if we do this here, then newThread will throw if setDaemon fails.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410447233", "createdAt": "2020-04-17T20:13:23Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -135,7 +136,13 @@ public IntervalMetricReader build() {\n   @SuppressWarnings(\"FutureReturnValueIgnored\")\n   private IntervalMetricReader(InternalState internalState) {\n     this.exporter = new Exporter(internalState);\n-    this.scheduler = Executors.newScheduledThreadPool(1, MoreExecutors.platformThreadFactory());\n+    this.scheduler =\n+        Executors.newScheduledThreadPool(\n+            1,\n+            new ThreadFactoryBuilder()\n+                .setDaemon(true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg=="}, "originalCommit": {"oid": "95e18c712315a118509a98889c90efed73dfb0f2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1ODA5OA==", "bodyText": "do we know how fast this fails? I think the javadoc addition should be good to document this fact. Might be good to have a custom threadfactory which will allow non-daemon access if it's forbidden. @johnbley any idea how difficult that would be?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410458098", "createdAt": "2020-04-17T20:38:34Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -135,7 +136,13 @@ public IntervalMetricReader build() {\n   @SuppressWarnings(\"FutureReturnValueIgnored\")\n   private IntervalMetricReader(InternalState internalState) {\n     this.exporter = new Exporter(internalState);\n-    this.scheduler = Executors.newScheduledThreadPool(1, MoreExecutors.platformThreadFactory());\n+    this.scheduler =\n+        Executors.newScheduledThreadPool(\n+            1,\n+            new ThreadFactoryBuilder()\n+                .setDaemon(true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg=="}, "originalCommit": {"oid": "95e18c712315a118509a98889c90efed73dfb0f2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5ODY4Ng==", "bodyText": "Probably a better solution:\nImplement our own ThreadFactory see what we did in OpenCensus https://github.com/census-instrumentation/opencensus-java/blob/master/impl_core/src/main/java/io/opencensus/implcore/internal/DaemonThreadFactory.java\nAnd always use that to produce threads :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410498686", "createdAt": "2020-04-17T22:26:25Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -135,7 +136,13 @@ public IntervalMetricReader build() {\n   @SuppressWarnings(\"FutureReturnValueIgnored\")\n   private IntervalMetricReader(InternalState internalState) {\n     this.exporter = new Exporter(internalState);\n-    this.scheduler = Executors.newScheduledThreadPool(1, MoreExecutors.platformThreadFactory());\n+    this.scheduler =\n+        Executors.newScheduledThreadPool(\n+            1,\n+            new ThreadFactoryBuilder()\n+                .setDaemon(true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg=="}, "originalCommit": {"oid": "95e18c712315a118509a98889c90efed73dfb0f2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDAwMQ==", "bodyText": "Definitely strong agree on this one!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410500001", "createdAt": "2020-04-17T22:31:08Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -135,7 +136,13 @@ public IntervalMetricReader build() {\n   @SuppressWarnings(\"FutureReturnValueIgnored\")\n   private IntervalMetricReader(InternalState internalState) {\n     this.exporter = new Exporter(internalState);\n-    this.scheduler = Executors.newScheduledThreadPool(1, MoreExecutors.platformThreadFactory());\n+    this.scheduler =\n+        Executors.newScheduledThreadPool(\n+            1,\n+            new ThreadFactoryBuilder()\n+                .setDaemon(true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTEzNg=="}, "originalCommit": {"oid": "95e18c712315a118509a98889c90efed73dfb0f2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDQzMTcyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/DaemonThreadFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDozOTo0MlrOGHrhKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzozMToxNlrOGIUkKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjIxNw==", "bodyText": "Can we enhance this a bit and accept a thread name prefix + a local atomic integer and name the thread prefix + \"_\" + atomicval++?\nThat way we encapsulate everything in this class. What do you think?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r410706217", "createdAt": "2020-04-18T14:39:42Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/DaemonThreadFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import java.util.concurrent.ThreadFactory;\n+\n+/**\n+ * A {@link ThreadFactory} that delegates to {@code MoreExecutors.platformThreadFactory()} and marks\n+ * all threads as daemon.\n+ */\n+public class DaemonThreadFactory implements ThreadFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd4c91dc3abc4d82aefe7ce9b338f0f596586b55"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3ODcyOQ==", "bodyText": "It removed a fair amount of extraneous code elsewhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1120#discussion_r411378729", "createdAt": "2020-04-20T13:31:16Z", "author": {"login": "johnbley"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/DaemonThreadFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import java.util.concurrent.ThreadFactory;\n+\n+/**\n+ * A {@link ThreadFactory} that delegates to {@code MoreExecutors.platformThreadFactory()} and marks\n+ * all threads as daemon.\n+ */\n+public class DaemonThreadFactory implements ThreadFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjIxNw=="}, "originalCommit": {"oid": "cd4c91dc3abc4d82aefe7ce9b338f0f596586b55"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 860, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}