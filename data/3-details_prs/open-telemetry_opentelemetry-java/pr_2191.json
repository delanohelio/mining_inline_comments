{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNjQ5NTQ5", "number": 2191, "title": "Add array implementation of Context.", "bodyText": "Benchmarks: https://gist.github.com/anuraaga/db897e6121f9e01b4c5ec5f3de60a60f\nLike before, we see the write performance of array-based to be better at all sizes (writeAll is what matters), and read for the worst case of readLast does about the same even with 10 elements, and gets a little worse at 20. Given write has to copy the whole array, this seems to show that arrays in Java are pretty well optimized.\nI think removing the complex class is worth it, but open to any thoughts. For the future, we could go further by defining OneElementContext, TwoElementContext, etc to optimize the vastly common cases of ~5 elements, and could probably also consider just using a simple HashMap if it gets big if there are concerns about the Array's asymptotes (though even with 40 elements, it seems not that bad).", "createdAt": "2020-12-03T09:51:17Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191", "merged": true, "mergeCommit": {"oid": "2770d461910c16b2f7bf6e1f64ea11096eb59762"}, "closed": true, "closedAt": "2020-12-07T03:39:36Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdif9yEAH2gAyNTMxNjQ5NTQ5OjRjMGU1NWM1YzUyMjRlYTQyZWFhZGU4YjVlNTY1MWZlMDc2NzNiMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjsPmlgH2gAyNTMxNjQ5NTQ5OmE4NjEwYTZjODUyN2MwMmM4NGM1ZDMzOWFjY2U2ZmNkMTI3ZDIwMmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4c0e55c5c5224ea42eaade8b5e5651fe07673b26", "committedDate": "2020-12-03T09:45:12Z", "message": "Add array implementation of Context."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTY1MzIy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#pullrequestreview-544165322", "createdAt": "2020-12-03T16:46:12Z", "commit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo0NjoxM1rOH-mPqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1MTo1NVrOH-mlSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMDM2MA==", "bodyText": "Are we sure we want reference equality on this check?  It's probably an edge case, but you could avoid the .clone() in the .equals() case (at the expense of .equals()).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535400360", "createdAt": "2020-12-03T16:46:13Z", "author": {"login": "breedx-splk"}, "path": "context/src/main/java/io/opentelemetry/context/ArrayBasedContext.java", "diffHunk": "@@ -42,5 +45,40 @@ static Context root() {\n     return ROOT;\n   }\n \n-  private DefaultContext() {}\n+  private final Object[] entries;\n+\n+  private ArrayBasedContext(Object[] entries) {\n+    this.entries = entries;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public <V> V get(ContextKey<V> key) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        @SuppressWarnings(\"unchecked\")\n+        V result = (V) entries[i + 1];\n+        return result;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public <V> Context with(ContextKey<V> key, V value) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        if (entries[i + 1] == value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMjYxMA==", "bodyText": "I haven't looked recently, but I heard a while ago that ArrayList does a size doubling thing to avoid extra allocations/copying.  Would that make sense here too?  Would probably also want to account for this in the get() by maintaining an additional size field or stopping on first null key.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535402610", "createdAt": "2020-12-03T16:48:38Z", "author": {"login": "breedx-splk"}, "path": "context/src/main/java/io/opentelemetry/context/ArrayBasedContext.java", "diffHunk": "@@ -42,5 +45,40 @@ static Context root() {\n     return ROOT;\n   }\n \n-  private DefaultContext() {}\n+  private final Object[] entries;\n+\n+  private ArrayBasedContext(Object[] entries) {\n+    this.entries = entries;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public <V> V get(ContextKey<V> key) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        @SuppressWarnings(\"unchecked\")\n+        V result = (V) entries[i + 1];\n+        return result;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public <V> Context with(ContextKey<V> key, V value) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        if (entries[i + 1] == value) {\n+          return this;\n+        }\n+        Object[] newEntries = entries.clone();\n+        newEntries[i + 1] = value;\n+        return new ArrayBasedContext(newEntries);\n+      }\n+    }\n+    Object[] newEntries = Arrays.copyOf(entries, entries.length + 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwNTg5Ng==", "bodyText": "Depending on whether or not you stick with == vs. .equals(), might be nice either way to have coverage that demonstrates the subtle difference (you get a new context instance when .equals() but not ==.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535405896", "createdAt": "2020-12-03T16:51:55Z", "author": {"login": "breedx-splk"}, "path": "context/src/test/java/io/opentelemetry/context/ContextTest.java", "diffHunk": "@@ -174,6 +174,10 @@ void withValues() {\n \n     assertThat(context4.get(ANIMAL)).isEqualTo(\"dog\");\n     assertThat(context4.get(BAG)).isNull();\n+\n+    Context context5 = context4.with(ANIMAL, \"dog\");\n+    assertThat(context5.get(ANIMAL)).isEqualTo(\"dog\");\n+    assertThat(context5).isSameAs(context4);\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c86a63cb37bd7ddacc99488ec3dda3717c88956", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1c86a63cb37bd7ddacc99488ec3dda3717c88956", "committedDate": "2020-12-04T03:52:52Z", "message": "More test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTY1NzUz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#pullrequestreview-544565753", "createdAt": "2020-12-04T00:15:23Z", "commit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoxNToyNFrOH-7C9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoyOTozMFrOH-7Yjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MTE3NA==", "bodyText": "Hmm - I think reference check is a no-brainer since there's no chance of any corner case. We haven't ever define whether values are treated by equals or not in the Context, the previous implementation just replaced the node without any sort of value check anyways. I'd like to stick to the safer approach at least for now.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535741174", "createdAt": "2020-12-04T00:15:24Z", "author": {"login": "anuraaga"}, "path": "context/src/main/java/io/opentelemetry/context/ArrayBasedContext.java", "diffHunk": "@@ -42,5 +45,40 @@ static Context root() {\n     return ROOT;\n   }\n \n-  private DefaultContext() {}\n+  private final Object[] entries;\n+\n+  private ArrayBasedContext(Object[] entries) {\n+    this.entries = entries;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public <V> V get(ContextKey<V> key) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        @SuppressWarnings(\"unchecked\")\n+        V result = (V) entries[i + 1];\n+        return result;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public <V> Context with(ContextKey<V> key, V value) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        if (entries[i + 1] == value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMDM2MA=="}, "originalCommit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NjQ5OQ==", "bodyText": "I don't think so since context is immutable - we need to copy to a new array anytime a new context is created, so we wouldn't be able to take advantage of preallocated space I believe.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535746499", "createdAt": "2020-12-04T00:29:01Z", "author": {"login": "anuraaga"}, "path": "context/src/main/java/io/opentelemetry/context/ArrayBasedContext.java", "diffHunk": "@@ -42,5 +45,40 @@ static Context root() {\n     return ROOT;\n   }\n \n-  private DefaultContext() {}\n+  private final Object[] entries;\n+\n+  private ArrayBasedContext(Object[] entries) {\n+    this.entries = entries;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public <V> V get(ContextKey<V> key) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        @SuppressWarnings(\"unchecked\")\n+        V result = (V) entries[i + 1];\n+        return result;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public <V> Context with(ContextKey<V> key, V value) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        if (entries[i + 1] == value) {\n+          return this;\n+        }\n+        Object[] newEntries = entries.clone();\n+        newEntries[i + 1] = value;\n+        return new ArrayBasedContext(newEntries);\n+      }\n+    }\n+    Object[] newEntries = Arrays.copyOf(entries, entries.length + 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMjYxMA=="}, "originalCommit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NjcwMw==", "bodyText": "Thanks this is a nice point, added a test.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535746703", "createdAt": "2020-12-04T00:29:30Z", "author": {"login": "anuraaga"}, "path": "context/src/test/java/io/opentelemetry/context/ContextTest.java", "diffHunk": "@@ -174,6 +174,10 @@ void withValues() {\n \n     assertThat(context4.get(ANIMAL)).isEqualTo(\"dog\");\n     assertThat(context4.get(BAG)).isNull();\n+\n+    Context context5 = context4.with(ANIMAL, \"dog\");\n+    assertThat(context5.get(ANIMAL)).isEqualTo(\"dog\");\n+    assertThat(context5).isSameAs(context4);\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwNTg5Ng=="}, "originalCommit": {"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTE5MTAw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#pullrequestreview-545119100", "createdAt": "2020-12-04T16:39:09Z", "commit": {"oid": "1c86a63cb37bd7ddacc99488ec3dda3717c88956"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8610a6c8527c02c84c5d339acce6fcd127d202b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a8610a6c8527c02c84c5d339acce6fcd127d202b", "committedDate": "2020-12-07T02:37:27Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into context-array"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3853, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}