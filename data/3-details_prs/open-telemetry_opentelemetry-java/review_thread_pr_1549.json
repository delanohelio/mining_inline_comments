{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NDgzMjkx", "number": 1549, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNDo1OFrOEyCCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo0Njo0NVrOEyehRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODk3NjkzOnYy", "diffSide": "RIGHT", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNDo1OFrOHoc1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNDo1OFrOHoc1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NzQ5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param carrier carrier of propagation fields, such as an http request.\n          \n          \n            \n                 * @param carrier The carrier of propagation fields, such as an http request.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512177492", "createdAt": "2020-10-26T18:24:58Z", "author": {"login": "jkwatson"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier carrier of propagation fields, such as an http request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODk3OTIzOnYy", "diffSide": "RIGHT", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNTozM1rOHoc2vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMToxMDowNlrOHon0eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3Nzg1Mg==", "bodyText": "I think we've gotten rid of all the @since tags for now; we'll set them all to 1.0 when we're ready to release.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512177852", "createdAt": "2020-10-26T18:25:33Z", "author": {"login": "jkwatson"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier carrier of propagation fields, such as an http request.\n+     * @since 0.10.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NzQ5Ng==", "bodyText": "Oh, I totally forgot about it. Will do.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512357496", "createdAt": "2020-10-27T01:10:06Z", "author": {"login": "carlosalberto"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier carrier of propagation fields, such as an http request.\n+     * @since 0.10.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3Nzg1Mg=="}, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODk5Nzk5OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMDoyOVrOHodCUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMTowOTo1MlrOHon0Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MDgxOA==", "bodyText": "not relevant for this PR in particular, but I think we should turn off this warning globally, since it's telling us to use guava, which we don't to do for the API, and won't, ever.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512180818", "createdAt": "2020-10-26T18:30:29Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);\n+      }\n+    }\n+    return builder == null ? null : builder.build();\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NzQ0Mg==", "bodyText": "+1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512357442", "createdAt": "2020-10-27T01:09:52Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);\n+      }\n+    }\n+    return builder == null ? null : builder.build();\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MDgxOA=="}, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTAwOTY2OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMzoyM1rOHodJLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMToxMDoxOVrOHon0ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MjU3Mw==", "bodyText": "might be a little safer/cleaner to just use Context.root() here, so we know that we don't have a pre-polluted context.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512182573", "createdAt": "2020-10-26T18:33:23Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "diffHunk": "@@ -133,12 +145,49 @@ void inject_NotSampledContext() {\n                 TRACE_ID_BASE16, SPAN_ID_BASE16, DEPRECATED_PARENT_SPAN, \"0\"));\n   }\n \n+  @Test\n+  void inject_SampledContext_withBaggage() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    Context context =\n+        Context.current()\n+            .with(\n+                Span.wrap(\n+                    SpanContext.create(\n+                        TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT)))\n+            .with(Baggage.builder().put(\"foo\", \"bar\").build());\n+\n+    jaegerPropagator.inject(context, carrier, setter);\n+    assertThat(carrier)\n+        .containsEntry(\n+            PROPAGATION_HEADER,\n+            generateTraceIdHeaderValue(\n+                TRACE_ID_BASE16, SPAN_ID_BASE16, DEPRECATED_PARENT_SPAN, \"1\"));\n+    assertThat(carrier).containsEntry(BAGGAGE_PREFIX + \"foo\", \"bar\");\n+  }\n+\n+  @Test\n+  void inject_baggageOnly() {\n+    // Metadata won't be propagated, but it MUST NOT cause ay problem.\n+    Baggage baggage =\n+        Baggage.builder()\n+            .put(\"nometa\", \"nometa-value\")\n+            .put(\"meta\", \"meta-value\", EntryMetadata.create(\"somemetadata; someother=foo\"))\n+            .build();\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    jaegerPropagator.inject(Context.root().with(baggage), carrier, Map::put);\n+    assertThat(carrier)\n+        .containsExactlyInAnyOrderEntriesOf(\n+            ImmutableMap.of(\n+                BAGGAGE_PREFIX + \"nometa\", \"nometa-value\",\n+                BAGGAGE_PREFIX + \"meta\", \"meta-value\"));\n+  }\n+\n   @Test\n   void extract_Nothing() {\n     // Context remains untouched.\n     assertThat(\n             jaegerPropagator.extract(\n-                Context.current(), Collections.<String, String>emptyMap(), Map::get))\n+                Context.current(), Collections.<String, String>emptyMap(), getter))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NzU3MQ==", "bodyText": "Fair enough, will update.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512357571", "createdAt": "2020-10-27T01:10:19Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "diffHunk": "@@ -133,12 +145,49 @@ void inject_NotSampledContext() {\n                 TRACE_ID_BASE16, SPAN_ID_BASE16, DEPRECATED_PARENT_SPAN, \"0\"));\n   }\n \n+  @Test\n+  void inject_SampledContext_withBaggage() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    Context context =\n+        Context.current()\n+            .with(\n+                Span.wrap(\n+                    SpanContext.create(\n+                        TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT)))\n+            .with(Baggage.builder().put(\"foo\", \"bar\").build());\n+\n+    jaegerPropagator.inject(context, carrier, setter);\n+    assertThat(carrier)\n+        .containsEntry(\n+            PROPAGATION_HEADER,\n+            generateTraceIdHeaderValue(\n+                TRACE_ID_BASE16, SPAN_ID_BASE16, DEPRECATED_PARENT_SPAN, \"1\"));\n+    assertThat(carrier).containsEntry(BAGGAGE_PREFIX + \"foo\", \"bar\");\n+  }\n+\n+  @Test\n+  void inject_baggageOnly() {\n+    // Metadata won't be propagated, but it MUST NOT cause ay problem.\n+    Baggage baggage =\n+        Baggage.builder()\n+            .put(\"nometa\", \"nometa-value\")\n+            .put(\"meta\", \"meta-value\", EntryMetadata.create(\"somemetadata; someother=foo\"))\n+            .build();\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    jaegerPropagator.inject(Context.root().with(baggage), carrier, Map::put);\n+    assertThat(carrier)\n+        .containsExactlyInAnyOrderEntriesOf(\n+            ImmutableMap.of(\n+                BAGGAGE_PREFIX + \"nometa\", \"nometa-value\",\n+                BAGGAGE_PREFIX + \"meta\", \"meta-value\"));\n+  }\n+\n   @Test\n   void extract_Nothing() {\n     // Context remains untouched.\n     assertThat(\n             jaegerPropagator.extract(\n-                Context.current(), Collections.<String, String>emptyMap(), Map::get))\n+                Context.current(), Collections.<String, String>emptyMap(), getter))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MjU3Mw=="}, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTUzMzE0OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxOTowNFrOHo0qUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzowOToyOVrOHpHR5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2Nzg4OA==", "bodyText": "Does it make sense to add empty baggage similar to how we add invalid span?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512567888", "createdAt": "2020-10-27T10:19:04Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -108,16 +118,27 @@ public static JaegerPropagator getInstance() {\n     setter.set(carrier, PROPAGATION_HEADER, new String(chars));\n   }\n \n+  private static <C> void injectBaggage(Baggage baggage, C carrier, Setter<C> setter) {\n+    for (Entry entry : baggage.getEntries()) {\n+      setter.set(carrier, BAGGAGE_PREFIX + entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n   @Override\n   public <C> Context extract(Context context, @Nullable C carrier, Getter<C> getter) {\n     Objects.requireNonNull(getter, \"getter\");\n \n     SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return context;\n+    if (spanContext.isValid()) {\n+      context = context.with(Span.wrap(spanContext));\n+    }\n+\n+    Baggage baggage = getBaggageFromHeader(carrier, getter);\n+    if (baggage != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3MjkzMw==", "bodyText": "That's a tricky one (I will let @pavolloffay @jpkrohling @yurishkuro  comment), but I'd imagine we wanting to keep whatever Baggage we had before, in case there was no baggage at all.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512872933", "createdAt": "2020-10-27T17:09:29Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -108,16 +118,27 @@ public static JaegerPropagator getInstance() {\n     setter.set(carrier, PROPAGATION_HEADER, new String(chars));\n   }\n \n+  private static <C> void injectBaggage(Baggage baggage, C carrier, Setter<C> setter) {\n+    for (Entry entry : baggage.getEntries()) {\n+      setter.set(carrier, BAGGAGE_PREFIX + entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n   @Override\n   public <C> Context extract(Context context, @Nullable C carrier, Getter<C> getter) {\n     Objects.requireNonNull(getter, \"getter\");\n \n     SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return context;\n+    if (spanContext.isValid()) {\n+      context = context.with(Span.wrap(spanContext));\n+    }\n+\n+    Baggage baggage = getBaggageFromHeader(carrier, getter);\n+    if (baggage != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2Nzg4OA=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTUzNzA4OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxOTo1OFrOHo0snA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjozNTozMlrOHtsKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng==", "bodyText": "Since we already checked startsWith I think this can be equals check", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512568476", "createdAt": "2020-10-27T10:19:58Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MTk2Nw==", "bodyText": "I'd rather stick to check the length, as it only depends on a numerical comparison.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r513071967", "createdAt": "2020-10-27T22:31:35Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2Njg1Mw==", "bodyText": "Ah I meant an equal check on the length - if it starts with it, then the length is guarateed to be at least that length and the < here looks redundant", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r517066853", "createdAt": "2020-11-04T02:41:02Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MTQzOQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r517671439", "createdAt": "2020-11-04T22:35:32Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTU1NDkxOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoyNDoyNVrOHo03hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoxMDo0NVrOHpHVfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTI3MQ==", "bodyText": "Regex split looks like it could be very slow. Best could be to use indexOf to avoid split array allocation but if too tedious can we at least just split on the single chars?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512571271", "createdAt": "2020-10-27T10:24:25Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);\n+      }\n+    }\n+    return builder == null ? null : builder.build();\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")\n+  private static Baggage.Builder parseBaggageHeader(String header, Baggage.Builder builder) {\n+    for (String part : header.split(\"\\\\s*,\\\\s*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3Mzg1Mw==", "bodyText": "Let's do that in a follow-up. This code is ported directly from the Jaeger Propagator, but yes, we could try to optimize things in follow ups (we did the same for OC's TraceContext propagator, for example).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512873853", "createdAt": "2020-10-27T17:10:45Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);\n+      }\n+    }\n+    return builder == null ? null : builder.build();\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")\n+  private static Baggage.Builder parseBaggageHeader(String header, Baggage.Builder builder) {\n+    for (String part : header.split(\"\\\\s*,\\\\s*\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTI3MQ=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTU1OTcxOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoyNToyN1rOHo06PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoxMTowMVrOHpHWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTk2NA==", "bodyText": "Can you add some test cases with invalid, and with whitespace?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512571964", "createdAt": "2020-10-27T10:25:27Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "diffHunk": "@@ -313,6 +362,78 @@ void extract_UrlEncodedContext() throws UnsupportedEncodingException {\n                 TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n   }\n \n+  @Test\n+  void extract_SampledContext_withBaggage() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    JaegerSpanContext context =\n+        new JaegerSpanContext(\n+            TRACE_ID_HI, TRACE_ID_LOW, SPAN_ID_LONG, DEPRECATED_PARENT_SPAN_LONG, (byte) 5);\n+    carrier.put(PROPAGATION_HEADER, TextMapCodec.contextAsString(context));\n+    carrier.put(BAGGAGE_PREFIX + \"foo\", \"bar\");\n+\n+    assertThat(getSpanContext(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.builder().put(\"foo\", \"bar\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withPrefix() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_PREFIX + \"nometa\", \"nometa-value\");\n+    carrier.put(BAGGAGE_PREFIX + \"meta\", \"meta-value\");\n+    carrier.put(\"another\", \"value\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            Baggage.builder().put(\"nometa\", \"nometa-value\").put(\"meta\", \"meta-value\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withPrefix_emptyKey() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_PREFIX, \"value\"); // Not really a valid key.\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.empty());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa=nometa-value,meta=meta-value\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            Baggage.builder().put(\"nometa\", \"nometa-value\").put(\"meta\", \"meta-value\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader_invalid() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa+novalue\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.empty());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader_andPrefix() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa=nometa-value,meta=meta-value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NDA0OA==", "bodyText": "Oh, yes, totally missed that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512874048", "createdAt": "2020-10-27T17:11:01Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "diffHunk": "@@ -313,6 +362,78 @@ void extract_UrlEncodedContext() throws UnsupportedEncodingException {\n                 TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n   }\n \n+  @Test\n+  void extract_SampledContext_withBaggage() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    JaegerSpanContext context =\n+        new JaegerSpanContext(\n+            TRACE_ID_HI, TRACE_ID_LOW, SPAN_ID_LONG, DEPRECATED_PARENT_SPAN_LONG, (byte) 5);\n+    carrier.put(PROPAGATION_HEADER, TextMapCodec.contextAsString(context));\n+    carrier.put(BAGGAGE_PREFIX + \"foo\", \"bar\");\n+\n+    assertThat(getSpanContext(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.builder().put(\"foo\", \"bar\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withPrefix() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_PREFIX + \"nometa\", \"nometa-value\");\n+    carrier.put(BAGGAGE_PREFIX + \"meta\", \"meta-value\");\n+    carrier.put(\"another\", \"value\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            Baggage.builder().put(\"nometa\", \"nometa-value\").put(\"meta\", \"meta-value\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withPrefix_emptyKey() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_PREFIX, \"value\"); // Not really a valid key.\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.empty());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa=nometa-value,meta=meta-value\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            Baggage.builder().put(\"nometa\", \"nometa-value\").put(\"meta\", \"meta-value\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader_invalid() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa+novalue\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.empty());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader_andPrefix() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa=nometa-value,meta=meta-value\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTk2NA=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjQ4MzkyOnYy", "diffSide": "RIGHT", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo1OToyM1rOHo9qXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDo1Mzo1NVrOHtFkCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNTM1OQ==", "bodyText": "A lighter interface like Iterable or Iterator would also work. Collection must support size().", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512715359", "createdAt": "2020-10-27T13:59:23Z", "author": {"login": "yurishkuro"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier The carrier of propagation fields, such as an http request.\n+     * @since 0.10.0\n+     */\n+    Collection<String> keys(C carrier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NDM2Mw==", "bodyText": "Fair enough. Will update to go the iterable way.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512874363", "createdAt": "2020-10-27T17:11:29Z", "author": {"login": "carlosalberto"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier The carrier of propagation fields, such as an http request.\n+     * @since 0.10.0\n+     */\n+    Collection<String> keys(C carrier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNTM1OQ=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzOTExNQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r517039115", "createdAt": "2020-11-04T00:53:55Z", "author": {"login": "carlosalberto"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier The carrier of propagation fields, such as an http request.\n+     * @since 0.10.0\n+     */\n+    Collection<String> keys(C carrier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNTM1OQ=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzY0MjkzOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo0Njo0NVrOHpJDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDo1Mzo0NVrOHtFj6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ==", "bodyText": "Jaeger SDKs would combine baggage from uberctx-{key} and jaeger-baggage headers, you're overriding it instead.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512901935", "createdAt": "2020-10-27T17:46:45Z", "author": {"login": "yurishkuro"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MTIxOA==", "bodyText": "Actually they are getting merged, i.e. see this test - let me know otherwise :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r513071218", "createdAt": "2020-10-27T22:29:45Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NjUwMQ==", "bodyText": "L225 replaces the builder, so they are only merged if jaeger-baggage header is first in the list, as it is in the unit test, moving this header to the end of the list will ignore uberctx entries, as far as I can tell.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r513076501", "createdAt": "2020-10-27T22:44:13Z", "author": {"login": "yurishkuro"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzOTA4MQ==", "bodyText": "Verified that it works correctly by putting HEADER at the end (of the Map), i.e. L225 takes any existing builder and uses it if already exists.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r517039081", "createdAt": "2020-11-04T00:53:45Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ=="}, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1350, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}