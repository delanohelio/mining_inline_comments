{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MTkxNzg5", "number": 805, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMToxNzowOVrODbYBZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMToxNzowOVrODbYBZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDMxNzE5OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/internal/ComponentRegistry.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMToxNzoxMFrOFi04pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTozNjoxMlrOFi1bmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3NQ==", "bodyText": "Should we add a test for this? (Since the previous line returned the wrong value, etc) ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/805#discussion_r372062375", "createdAt": "2020-01-28T21:17:10Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/internal/ComponentRegistry.java", "diffHunk": "@@ -53,22 +53,14 @@ public V get(String instrumentationName) {\n   public V get(String instrumentationName, @Nullable String instrumentationVersion) {\n     InstrumentationLibraryInfo instrumentationLibraryInfo =\n         InstrumentationLibraryInfo.create(instrumentationName, instrumentationVersion);\n-    V tracer = registry.get(instrumentationLibraryInfo);\n-    if (tracer == null) {\n-      synchronized (lock) {\n-        // Re-check if the value was added since the previous check, this can happen if multiple\n-        // threads try to access the same named tracer during the same time. This way we ensure that\n-        // we create only one TracerSdk per name.\n-        tracer = registry.get(instrumentationLibraryInfo);\n-        if (tracer != null) {\n-          // A different thread already added the named Tracer, just reuse.\n-          return tracer;\n-        }\n-        tracer = newComponent(instrumentationLibraryInfo);\n-        registry.put(instrumentationLibraryInfo, tracer);\n-      }\n+\n+    V component = registry.get(instrumentationLibraryInfo);\n+    if (component != null) {\n+      return component;\n     }\n-    return tracer;\n+\n+    registry.putIfAbsent(instrumentationLibraryInfo, newComponent(instrumentationLibraryInfo));\n+    return registry.get(instrumentationLibraryInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573890ad12dd2e1679ced3569465cd1ef842e32c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NTEwMA==", "bodyText": "Not sure what you want, the correct return value is tested, if you want to test that putIfAbsent is called twice we need a newComponent implementation that blocks first time then second time is ok, then check that returns the same instance in the end. We still create 2 instances but one we drop immediately which may be something worth documented.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/805#discussion_r372065100", "createdAt": "2020-01-28T21:22:59Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/internal/ComponentRegistry.java", "diffHunk": "@@ -53,22 +53,14 @@ public V get(String instrumentationName) {\n   public V get(String instrumentationName, @Nullable String instrumentationVersion) {\n     InstrumentationLibraryInfo instrumentationLibraryInfo =\n         InstrumentationLibraryInfo.create(instrumentationName, instrumentationVersion);\n-    V tracer = registry.get(instrumentationLibraryInfo);\n-    if (tracer == null) {\n-      synchronized (lock) {\n-        // Re-check if the value was added since the previous check, this can happen if multiple\n-        // threads try to access the same named tracer during the same time. This way we ensure that\n-        // we create only one TracerSdk per name.\n-        tracer = registry.get(instrumentationLibraryInfo);\n-        if (tracer != null) {\n-          // A different thread already added the named Tracer, just reuse.\n-          return tracer;\n-        }\n-        tracer = newComponent(instrumentationLibraryInfo);\n-        registry.put(instrumentationLibraryInfo, tracer);\n-      }\n+\n+    V component = registry.get(instrumentationLibraryInfo);\n+    if (component != null) {\n+      return component;\n     }\n-    return tracer;\n+\n+    registry.putIfAbsent(instrumentationLibraryInfo, newComponent(instrumentationLibraryInfo));\n+    return registry.get(instrumentationLibraryInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3NQ=="}, "originalCommit": {"oid": "573890ad12dd2e1679ced3569465cd1ef842e32c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2ODUyOA==", "bodyText": "Oh, never mind, I thought the return registry.put(instrumentationLibraryInfo, tracer); line had been kept.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/805#discussion_r372068528", "createdAt": "2020-01-28T21:30:17Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/internal/ComponentRegistry.java", "diffHunk": "@@ -53,22 +53,14 @@ public V get(String instrumentationName) {\n   public V get(String instrumentationName, @Nullable String instrumentationVersion) {\n     InstrumentationLibraryInfo instrumentationLibraryInfo =\n         InstrumentationLibraryInfo.create(instrumentationName, instrumentationVersion);\n-    V tracer = registry.get(instrumentationLibraryInfo);\n-    if (tracer == null) {\n-      synchronized (lock) {\n-        // Re-check if the value was added since the previous check, this can happen if multiple\n-        // threads try to access the same named tracer during the same time. This way we ensure that\n-        // we create only one TracerSdk per name.\n-        tracer = registry.get(instrumentationLibraryInfo);\n-        if (tracer != null) {\n-          // A different thread already added the named Tracer, just reuse.\n-          return tracer;\n-        }\n-        tracer = newComponent(instrumentationLibraryInfo);\n-        registry.put(instrumentationLibraryInfo, tracer);\n-      }\n+\n+    V component = registry.get(instrumentationLibraryInfo);\n+    if (component != null) {\n+      return component;\n     }\n-    return tracer;\n+\n+    registry.putIfAbsent(instrumentationLibraryInfo, newComponent(instrumentationLibraryInfo));\n+    return registry.get(instrumentationLibraryInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3NQ=="}, "originalCommit": {"oid": "573890ad12dd2e1679ced3569465cd1ef842e32c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MTMyMg==", "bodyText": "yeah, testing this would be extraordinarily tricky, since it would depend on very finicky timing, and I'm not even sure how you would assert anything useful out of it. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/805#discussion_r372071322", "createdAt": "2020-01-28T21:36:12Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/internal/ComponentRegistry.java", "diffHunk": "@@ -53,22 +53,14 @@ public V get(String instrumentationName) {\n   public V get(String instrumentationName, @Nullable String instrumentationVersion) {\n     InstrumentationLibraryInfo instrumentationLibraryInfo =\n         InstrumentationLibraryInfo.create(instrumentationName, instrumentationVersion);\n-    V tracer = registry.get(instrumentationLibraryInfo);\n-    if (tracer == null) {\n-      synchronized (lock) {\n-        // Re-check if the value was added since the previous check, this can happen if multiple\n-        // threads try to access the same named tracer during the same time. This way we ensure that\n-        // we create only one TracerSdk per name.\n-        tracer = registry.get(instrumentationLibraryInfo);\n-        if (tracer != null) {\n-          // A different thread already added the named Tracer, just reuse.\n-          return tracer;\n-        }\n-        tracer = newComponent(instrumentationLibraryInfo);\n-        registry.put(instrumentationLibraryInfo, tracer);\n-      }\n+\n+    V component = registry.get(instrumentationLibraryInfo);\n+    if (component != null) {\n+      return component;\n     }\n-    return tracer;\n+\n+    registry.putIfAbsent(instrumentationLibraryInfo, newComponent(instrumentationLibraryInfo));\n+    return registry.get(instrumentationLibraryInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3NQ=="}, "originalCommit": {"oid": "573890ad12dd2e1679ced3569465cd1ef842e32c"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1049, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}