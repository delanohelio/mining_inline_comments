{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzE4OTA5", "number": 990, "title": "Add benchmarks for metrics API", "bodyText": "Here's a first shot at adding benchmarks for the API with no SDK installed (#789). If this looks good I can also tackle the tracing APIs.", "createdAt": "2020-03-10T19:20:27Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990", "merged": true, "mergeCommit": {"oid": "465664cddc7f2effd3857504b2a56a24bf50c1d5"}, "closed": true, "closedAt": "2020-03-24T14:41:51Z", "author": {"login": "zenmoto"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMXjJngH2gAyMzg2MzE4OTA5OjVjZDU2YzE5MGUwYjZmNTY3ZWFiYThhMGIwMzM4MDI1MDNkNDdmMGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQz98IgFqTM4MDM3NzE5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5cd56c190e0b6f567eaba8a0b033802503d47f0d", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5cd56c190e0b6f567eaba8a0b033802503d47f0d", "committedDate": "2020-03-10T19:19:23Z", "message": "Add benchmarks for metrics API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94df20d7b736cac02840c4e9f5bc972c6d317fc6", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/94df20d7b736cac02840c4e9f5bc972c6d317fc6", "committedDate": "2020-03-10T19:39:22Z", "message": "update to meet Google Java style guidelines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "491864ded74d22cfcaa189ec0f8abb1609b9ee4e", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/491864ded74d22cfcaa189ec0f8abb1609b9ee4e", "committedDate": "2020-03-16T23:55:39Z", "message": "reduce code duplication in measurements\n\nSplit measurements and SDKs into two enums that can\nbe pulled together into a matrix, which has an\nadditional benefit that comparable metrics are\npulled onto the same scale in the JMH visualizer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6c8b1097db18b49c7ed4aaef5754acadeb79ac52", "committedDate": "2020-03-17T00:57:56Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into metrics_api_benchmarks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTAyMjk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#pullrequestreview-379102294", "createdAt": "2020-03-23T02:39:30Z", "commit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjozOTozMVrOF51Y7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NTozNFrOF51dTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4Nzg4NQ==", "bodyText": "API_ONLY? I don't know maybe you can think of a better name :), kind of don't like NO_SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396187885", "createdAt": "2020-03-23T02:39:31Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/TestSdk.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DefaultMeter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.resources.Resource;\n+\n+public enum TestSdk {\n+  NO_SDK(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODYzMA==", "bodyText": "Don't see a clear advantage to use generics here. Can we get rid of them?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396188630", "createdAt": "2020-03-23T02:43:32Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleMeasureRecord(\n+      new OperationBuilder<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+        @Override\n+        public Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> build(Meter meter) {\n+          Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> op =\n+              new Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleMeasureBuilder(\"double_measure\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleMeasureBuilder(\"bound_double_measure\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  LongMeasureRecord(\n+      new OperationBuilder<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+        @Override\n+        public Operation<LongMeasure, LongMeasure.BoundLongMeasure> build(Meter meter) {\n+          Operation<LongMeasure, LongMeasure.BoundLongMeasure> op =\n+              new Operation<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longMeasureBuilder(\"long_measure\").build();\n+                  boundMetric =\n+                      meter.longMeasureBuilder(\"bound_long_measure\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      });\n+\n+  private final OperationBuilder<?, ?> builder;\n+\n+  MetricsTestOperationBuilder(final OperationBuilder<?, ?> builder) {\n+    this.builder = builder;\n+  }\n+\n+  public Operation<?, ?> build(Meter meter) {\n+    return this.builder.build(meter);\n+  }\n+\n+  @Immutable\n+  private interface OperationBuilder<T, U> {\n+    Operation<T, U> build(Meter meter);\n+  }\n+\n+  abstract static class Operation<T, U> {\n+    T metric;\n+    U boundMetric;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4OTAwNg==", "bodyText": "It seems that this is a common pattern to call initialize as the fist thing after the ctor is called. Do we really need an initialize method or we can just move the code and get rid of that method?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396189006", "createdAt": "2020-03-23T02:45:34Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3f5deb90f59f596edcd3b1fedc9859ccc3bb7a", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3c3f5deb90f59f596edcd3b1fedc9859ccc3bb7a", "committedDate": "2020-03-23T20:02:50Z", "message": "remove generics from tested operation, clean up construction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4962258870f7b12fcd118da4e0077e0859cc8fb7", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4962258870f7b12fcd118da4e0077e0859cc8fb7", "committedDate": "2020-03-23T20:03:26Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into metrics_api_benchmarks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzc3MTkx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#pullrequestreview-380377191", "createdAt": "2020-03-24T14:41:41Z", "commit": {"oid": "4962258870f7b12fcd118da4e0077e0859cc8fb7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3185, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}