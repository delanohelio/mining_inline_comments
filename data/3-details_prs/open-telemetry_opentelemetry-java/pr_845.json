{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzkwNzcz", "number": 845, "title": "Move Aggregator and implementation to aggregators package", "bodyText": "In this PR:\n\nMove Aggregators to an aggregator package for better structure of the code.\nChange Merge to MergeAndReset and remove templates (hard to use composition with this class otherwise).\n\nSplit from #831", "createdAt": "2020-02-11T17:35:54Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845", "merged": true, "mergeCommit": {"oid": "547ea7575621d1907e634498319dd80c00103696"}, "closed": true, "closedAt": "2020-02-12T17:01:19Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDVcDPAFqTM1Njg2MzI3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDpIC4gBqjMwMzE1Nzc5MzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODYzMjcy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#pullrequestreview-356863272", "createdAt": "2020-02-11T17:46:30Z", "commit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0NjozMFrOFoSxvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0NjozMFrOFoSxvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NTAwNg==", "bodyText": "we had added this to avoid the instanceOf checks in the merge methods. Why remove it now?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377795006", "createdAt": "2020-02-11T17:46:30Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/Aggregator.java", "diffHunk": "@@ -14,20 +14,21 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n /** Aggregator represents the interface for all the available aggregations. */\n @ThreadSafe\n-interface Aggregator<T extends Aggregator<?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODY0NTU5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#pullrequestreview-356864559", "createdAt": "2020-02-11T17:48:10Z", "commit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODoxMFrOFoS18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODoxMFrOFoS18w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjA4Mw==", "bodyText": "hmm. this smells like we might not have the right class/interface structure. Can we make the recordable type a parameter of the aggregator type?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377796083", "createdAt": "2020-02-11T17:48:10Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregator.java", "diffHunk": "@@ -14,26 +14,31 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import com.google.common.util.concurrent.AtomicDouble;\n \n-final class DoubleSumAggregator implements Aggregator<DoubleSumAggregator> {\n+public final class DoubleSumAggregator implements Aggregator {\n   // TODO: Change to use DoubleAdder when changed to java8.\n   private final AtomicDouble current;\n \n-  DoubleSumAggregator() {\n+  public DoubleSumAggregator() {\n     current = new AtomicDouble(0.0);\n   }\n \n   @Override\n-  public void merge(DoubleSumAggregator other) {\n-    this.current.getAndAdd(other.current.get());\n+  public void mergeAndReset(Aggregator aggregator) {\n+    if (!(aggregator instanceof DoubleSumAggregator)) {\n+      return;\n+    }\n+\n+    DoubleSumAggregator other = (DoubleSumAggregator) aggregator;\n+    other.current.getAndAdd(this.current.getAndSet(0));\n   }\n \n   @Override\n   public void recordLong(long value) {\n-    throw new UnsupportedOperationException(\"This Aggregator does not support long values\");\n+    throw new UnsupportedOperationException(\"This is a DoubleSumAggregator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODY0ODUw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#pullrequestreview-356864850", "createdAt": "2020-02-11T17:48:37Z", "commit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODozOFrOFoS22w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODozOFrOFoS22w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjMxNQ==", "bodyText": "please import", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377796315", "createdAt": "2020-02-11T17:48:38Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregatorTest.java", "diffHunk": "@@ -14,13 +14,13 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link DoubleSumAggregator}. */\n+/** Unit tests for {@link io.opentelemetry.sdk.metrics.aggregators.DoubleSumAggregator}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODY1MDk3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#pullrequestreview-356865097", "createdAt": "2020-02-11T17:48:59Z", "commit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODo1OVrOFoS3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODo1OVrOFoS3mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjUwNw==", "bodyText": "import or leave out the package, since we're in the same package.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377796507", "createdAt": "2020-02-11T17:48:59Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/aggregators/LongSumAggregatorTest.java", "diffHunk": "@@ -14,13 +14,13 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link LongSumAggregator}. */\n+/** Unit tests for {@link io.opentelemetry.sdk.metrics.aggregators.LongSumAggregator}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDIzNjc2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#pullrequestreview-357023676", "createdAt": "2020-02-11T21:52:17Z", "commit": {"oid": "9de6723390da4029835515ff25591ed21aa3d549"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e71a16e296d57dbda8cced1c3d79ee406a319705", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e71a16e296d57dbda8cced1c3d79ee406a319705", "committedDate": "2020-02-12T16:41:29Z", "message": "Move Aggregator and implementation to aggregators package\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "840e764b5b8a992a5a610fe6d3f431772bb9ff1d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/840e764b5b8a992a5a610fe6d3f431772bb9ff1d", "committedDate": "2020-02-12T16:41:29Z", "message": "Fix comment imports\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5317f9287be25fd23d1034768ebd495771bed5", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fe5317f9287be25fd23d1034768ebd495771bed5", "committedDate": "2020-02-12T16:42:29Z", "message": "aggregators -> aggregator\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9de6723390da4029835515ff25591ed21aa3d549", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9de6723390da4029835515ff25591ed21aa3d549", "committedDate": "2020-02-11T18:22:49Z", "message": "Fix comment imports\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "fe5317f9287be25fd23d1034768ebd495771bed5", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fe5317f9287be25fd23d1034768ebd495771bed5", "committedDate": "2020-02-12T16:42:29Z", "message": "aggregators -> aggregator\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3336, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}