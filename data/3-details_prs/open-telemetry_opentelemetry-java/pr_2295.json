{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5Mjg0Njcy", "number": 2295, "title": "Add a OTLP JSON span exporter to logs.", "bodyText": "This uses a protobuf-json library I wrote a while ago, and we use it in Armeria for production. It's based on Jackson vs gson, which I think has a higher chance of being on an app's classpath which is nice. The use of Jackson also made it quite easy to switch the binary marshalling to hex from base64. But it's designed for speed (for use in production) so uses bytebuddy for runtime code generation as opposed to runtime reflection like the official json-format does. That does unfortunately make it more heavyweight than it could be, but at least it's fast \ud83d\ude05.\nWondering where to put this, probably not in -otlp, new -otlp-logging, or replace the current -logging? Leaning towards -otlp-logging.", "createdAt": "2020-12-14T09:08:34Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295", "merged": true, "mergeCommit": {"oid": "6d1bcd9c02c9c6a4190df41d313ca2fd679e92dd"}, "closed": true, "closedAt": "2020-12-23T21:33:39Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmB8F9AH2gAyNTM5Mjg0NjcyOjQxNGEwMGIzMjAyNjdkODUxYTZhYTBkZjBmNjViOTllYmU3YTE3MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdou4GfgFqTU1NzI4MzU3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "414a00b320267d851a6aa0df0f65b99ebe7a1731", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/414a00b320267d851a6aa0df0f65b99ebe7a1731", "committedDate": "2020-12-14T09:01:54Z", "message": "Add a OTLP logging span exporter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89149cea09d31ba851bb78e0cc5a6894b809ad19", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89149cea09d31ba851bb78e0cc5a6894b809ad19", "committedDate": "2020-12-14T09:11:25Z", "message": "Add file to git"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb5742e3decd8d7b5009229c75c17d251d034052", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bb5742e3decd8d7b5009229c75c17d251d034052", "committedDate": "2020-12-16T04:56:32Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into otlp-logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34d0ede913dd689e85e350b17d538458db14aff", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a34d0ede913dd689e85e350b17d538458db14aff", "committedDate": "2020-12-18T06:00:07Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into otlp-logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b701e00a23099362af1b3daa853e74a54a504238", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b701e00a23099362af1b3daa853e74a54a504238", "committedDate": "2020-12-18T06:10:06Z", "message": "Move"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/973f5411d823e9f2471a0fde35c70319f6be5d28", "committedDate": "2020-12-21T04:35:16Z", "message": "OTLPJSON"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTI1MTUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#pullrequestreview-556125152", "createdAt": "2020-12-21T04:38:52Z", "commit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDozODo1M1rOIJMCOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDozODo1M1rOIJMCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwNTI3Mg==", "bodyText": "@jkwatson So I tried a different approach to splitting all exporters for trace vs metrics here since it seemed like it could be a bit too much. If going with this, I'd revert the change to split out the otlp exporters in favor of compileOnly dependencies.\nOne of the reasons it felt like much is we would need to split otproto up as well - they all end up having a common, trace, metrics split. Lots of artifacts.\nBut it means that previously, a user could only depend on exporter-otlp to have the SDK as well, but with such a scheme, they'd have to additionally add the SDK as a dependency. I wonder if this is too annoying or reasonable.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r546505272", "createdAt": "2020-12-21T04:38:53Z", "author": {"login": "anuraaga"}, "path": "exporters/otlpjson/build.gradle", "diffHunk": "@@ -0,0 +1,22 @@\n+plugins {\n+    id \"java-library\"\n+    id \"maven-publish\"\n+\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry Protocol JSON Exporters'\n+ext.moduleName = \"io.opentelemetry.exporter.otlpjson\"\n+\n+dependencies {\n+    compileOnly project(':sdk:trace')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDg4NTgx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#pullrequestreview-556488581", "createdAt": "2020-12-21T16:05:11Z", "commit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowNToxMVrOIJdb4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjoxMzoxMVrOIJds6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MDM2OQ==", "bodyText": "If this is purely a logging exporter, this module should be named logging-otlp I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r546790369", "createdAt": "2020-12-21T16:05:11Z", "author": {"login": "jkwatson"}, "path": "exporters/otlpjson/README.md", "diffHunk": "@@ -0,0 +1,9 @@\n+# OpenTelemetry - OTLP JSON Exporters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MzEzMg==", "bodyText": "If I read this right...the log message will be split across multiple lines? Don't we want to make sure that every log message is only a single line, so it can work with normal logging systems?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r546793132", "createdAt": "2020-12-21T16:10:09Z", "author": {"login": "jkwatson"}, "path": "exporters/otlpjson/src/test/java/io/opentelemetry/exporter/otlpjson/OtlpJsonLoggingMetricExporterTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.otlpjson;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.Labels;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+class OtlpJsonLoggingMetricExporterTest {\n+\n+  private static final Resource RESOURCE =\n+      Resource.create(Attributes.builder().put(\"key\", \"value\").build());\n+\n+  private static final MetricData METRIC1 =\n+      MetricData.createDoubleSum(\n+          RESOURCE,\n+          InstrumentationLibraryInfo.create(\"instrumentation\", \"1\"),\n+          \"metric1\",\n+          \"metric1 description\",\n+          \"m\",\n+          MetricData.DoubleSumData.create(\n+              true,\n+              MetricData.AggregationTemporality.CUMULATIVE,\n+              Arrays.asList(MetricData.DoublePoint.create(1, 2, Labels.of(\"cat\", \"meow\"), 4))));\n+\n+  private static final MetricData METRIC2 =\n+      MetricData.createDoubleSum(\n+          RESOURCE,\n+          InstrumentationLibraryInfo.create(\"instrumentation2\", \"2\"),\n+          \"metric2\",\n+          \"metric2 description\",\n+          \"s\",\n+          MetricData.DoubleSumData.create(\n+              true,\n+              MetricData.AggregationTemporality.CUMULATIVE,\n+              Arrays.asList(MetricData.DoublePoint.create(1, 2, Labels.of(\"cat\", \"meow\"), 4))));\n+\n+  private MetricExporter exporter;\n+\n+  @BeforeEach\n+  void setUp() {\n+    exporter = OtlpJsonLoggingMetricExporter.create();\n+  }\n+\n+  @Test\n+  void log() throws Exception {\n+    Logger logger = OtlpJsonLoggingMetricExporter.logger;\n+    List<LogRecord> logged = new ArrayList<>();\n+    Handler handler =\n+        new Handler() {\n+          @Override\n+          public void publish(LogRecord record) {\n+            logged.add(record);\n+          }\n+\n+          @Override\n+          public void flush() {}\n+\n+          @Override\n+          public void close() {}\n+        };\n+    logger.addHandler(handler);\n+    logger.setUseParentHandlers(false);\n+    try {\n+      exporter.export(Arrays.asList(METRIC1, METRIC2));\n+\n+      assertThat(logged)\n+          .hasSize(1)\n+          .allSatisfy(log -> assertThat(log.getLevel()).isEqualTo(Level.INFO));\n+      JSONAssert.assertEquals(\n+          \"{\\n\"\n+              + \"  \\\"resource\\\": {\\n\"\n+              + \"    \\\"attributes\\\": [{\\n\"\n+              + \"      \\\"key\\\": \\\"key\\\",\\n\"\n+              + \"      \\\"value\\\": {\\n\"\n+              + \"        \\\"stringValue\\\": \\\"value\\\"\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  },\\n\"\n+              + \"  \\\"instrumentationLibraryMetrics\\\": [{\\n\"\n+              + \"    \\\"instrumentationLibrary\\\": {\\n\"\n+              + \"      \\\"name\\\": \\\"instrumentation2\\\",\\n\"\n+              + \"      \\\"version\\\": \\\"2\\\"\\n\"\n+              + \"    },\\n\"\n+              + \"    \\\"metrics\\\": [{\\n\"\n+              + \"      \\\"name\\\": \\\"metric2\\\",\\n\"\n+              + \"      \\\"description\\\": \\\"metric2 description\\\",\\n\"\n+              + \"      \\\"unit\\\": \\\"s\\\",\\n\"\n+              + \"      \\\"doubleSum\\\": {\\n\"\n+              + \"        \\\"dataPoints\\\": [{\\n\"\n+              + \"          \\\"labels\\\": [{\\n\"\n+              + \"            \\\"key\\\": \\\"cat\\\",\\n\"\n+              + \"            \\\"value\\\": \\\"meow\\\"\\n\"\n+              + \"          }],\\n\"\n+              + \"          \\\"startTimeUnixNano\\\": \\\"1\\\",\\n\"\n+              + \"          \\\"timeUnixNano\\\": \\\"2\\\",\\n\"\n+              + \"          \\\"value\\\": 4.0\\n\"\n+              + \"        }],\\n\"\n+              + \"        \\\"aggregationTemporality\\\": \\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\\",\\n\"\n+              + \"        \\\"isMonotonic\\\": true\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  }, {\\n\"\n+              + \"    \\\"instrumentationLibrary\\\": {\\n\"\n+              + \"      \\\"name\\\": \\\"instrumentation\\\",\\n\"\n+              + \"      \\\"version\\\": \\\"1\\\"\\n\"\n+              + \"    },\\n\"\n+              + \"    \\\"metrics\\\": [{\\n\"\n+              + \"      \\\"name\\\": \\\"metric1\\\",\\n\"\n+              + \"      \\\"description\\\": \\\"metric1 description\\\",\\n\"\n+              + \"      \\\"unit\\\": \\\"m\\\",\\n\"\n+              + \"      \\\"doubleSum\\\": {\\n\"\n+              + \"        \\\"dataPoints\\\": [{\\n\"\n+              + \"          \\\"labels\\\": [{\\n\"\n+              + \"            \\\"key\\\": \\\"cat\\\",\\n\"\n+              + \"            \\\"value\\\": \\\"meow\\\"\\n\"\n+              + \"          }],\\n\"\n+              + \"          \\\"startTimeUnixNano\\\": \\\"1\\\",\\n\"\n+              + \"          \\\"timeUnixNano\\\": \\\"2\\\",\\n\"\n+              + \"          \\\"value\\\": 4.0\\n\"\n+              + \"        }],\\n\"\n+              + \"        \\\"aggregationTemporality\\\": \\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\\",\\n\"\n+              + \"        \\\"isMonotonic\\\": true\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  }]\\n\"\n+              + \"}\",\n+          logged.get(0).getMessage(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MzM3Ng==", "bodyText": "same question about multi-line log message", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r546793376", "createdAt": "2020-12-21T16:10:36Z", "author": {"login": "jkwatson"}, "path": "exporters/otlpjson/src/test/java/io/opentelemetry/exporter/otlpjson/OtlpJsonLoggingSpanExporterTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.otlpjson;\n+\n+import static io.opentelemetry.api.common.AttributeKey.booleanKey;\n+import static io.opentelemetry.api.common.AttributeKey.longKey;\n+import static io.opentelemetry.api.common.AttributeKey.stringKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.testing.trace.TestSpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+class OtlpJsonLoggingSpanExporterTest {\n+\n+  private static final Resource RESOURCE =\n+      Resource.create(Attributes.builder().put(\"key\", \"value\").build());\n+\n+  private static final SpanData SPAN1 =\n+      TestSpanData.builder()\n+          .setHasEnded(true)\n+          .setTraceId(TraceId.fromLongs(1234L, 6789L))\n+          .setSpanId(SpanId.fromLong(9876L))\n+          .setStartEpochNanos(100)\n+          .setEndEpochNanos(100 + 1000)\n+          .setStatus(SpanData.Status.ok())\n+          .setName(\"testSpan1\")\n+          .setKind(Span.Kind.INTERNAL)\n+          .setAttributes(Attributes.of(stringKey(\"animal\"), \"cat\", longKey(\"lives\"), 9L))\n+          .setEvents(\n+              Collections.singletonList(\n+                  SpanData.Event.create(\n+                      100 + 500,\n+                      \"somethingHappenedHere\",\n+                      Attributes.of(booleanKey(\"important\"), true))))\n+          .setTotalAttributeCount(2)\n+          .setTotalRecordedEvents(1)\n+          .setTotalRecordedLinks(0)\n+          .setInstrumentationLibraryInfo(InstrumentationLibraryInfo.create(\"instrumentation\", \"1\"))\n+          .setResource(RESOURCE)\n+          .build();\n+\n+  private static final SpanData SPAN2 =\n+      TestSpanData.builder()\n+          .setHasEnded(false)\n+          .setTraceId(TraceId.fromLongs(20L, 30L))\n+          .setSpanId(SpanId.fromLong(15L))\n+          .setStartEpochNanos(500)\n+          .setEndEpochNanos(500 + 1001)\n+          .setStatus(SpanData.Status.error())\n+          .setName(\"testSpan2\")\n+          .setKind(Span.Kind.CLIENT)\n+          .setResource(RESOURCE)\n+          .setInstrumentationLibraryInfo(InstrumentationLibraryInfo.create(\"instrumentation2\", \"2\"))\n+          .build();\n+\n+  SpanExporter exporter;\n+\n+  @BeforeEach\n+  void setUp() {\n+    exporter = OtlpJsonLoggingSpanExporter.create();\n+  }\n+\n+  @Test\n+  void log() throws Exception {\n+    Logger logger = OtlpJsonLoggingSpanExporter.logger;\n+    List<LogRecord> logged = new ArrayList<>();\n+    Handler handler =\n+        new Handler() {\n+          @Override\n+          public void publish(LogRecord record) {\n+            logged.add(record);\n+          }\n+\n+          @Override\n+          public void flush() {}\n+\n+          @Override\n+          public void close() {}\n+        };\n+    logger.addHandler(handler);\n+    logger.setUseParentHandlers(false);\n+    try {\n+      exporter.export(Arrays.asList(SPAN1, SPAN2));\n+\n+      assertThat(logged)\n+          .hasSize(1)\n+          .allSatisfy(log -> assertThat(log.getLevel()).isEqualTo(Level.INFO));\n+      JSONAssert.assertEquals(\n+          \"{\\n\"\n+              + \"  \\\"resource\\\": {\\n\"\n+              + \"    \\\"attributes\\\": [{\\n\"\n+              + \"      \\\"key\\\": \\\"key\\\",\\n\"\n+              + \"      \\\"value\\\": {\\n\"\n+              + \"        \\\"stringValue\\\": \\\"value\\\"\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  },\\n\"\n+              + \"  \\\"instrumentationLibrarySpans\\\": [{\\n\"\n+              + \"    \\\"instrumentationLibrary\\\": {\\n\"\n+              + \"      \\\"name\\\": \\\"instrumentation2\\\",\\n\"\n+              + \"      \\\"version\\\": \\\"2\\\"\\n\"\n+              + \"    },\\n\"\n+              + \"    \\\"spans\\\": [{\\n\"\n+              + \"      \\\"traceId\\\": \\\"0000000000000014000000000000001e\\\",\\n\"\n+              + \"      \\\"spanId\\\": \\\"000000000000000f\\\",\\n\"\n+              + \"      \\\"name\\\": \\\"testSpan2\\\",\\n\"\n+              + \"      \\\"kind\\\": \\\"SPAN_KIND_CLIENT\\\",\\n\"\n+              + \"      \\\"startTimeUnixNano\\\": \\\"500\\\",\\n\"\n+              + \"      \\\"endTimeUnixNano\\\": \\\"1501\\\",\\n\"\n+              + \"      \\\"status\\\": {\\n\"\n+              + \"        \\\"deprecatedCode\\\": \\\"DEPRECATED_STATUS_CODE_UNKNOWN_ERROR\\\",\\n\"\n+              + \"        \\\"code\\\": \\\"STATUS_CODE_ERROR\\\"\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  }, {\\n\"\n+              + \"    \\\"instrumentationLibrary\\\": {\\n\"\n+              + \"      \\\"name\\\": \\\"instrumentation\\\",\\n\"\n+              + \"      \\\"version\\\": \\\"1\\\"\\n\"\n+              + \"    },\\n\"\n+              + \"    \\\"spans\\\": [{\\n\"\n+              + \"      \\\"traceId\\\": \\\"00000000000004d20000000000001a85\\\",\\n\"\n+              + \"      \\\"spanId\\\": \\\"0000000000002694\\\",\\n\"\n+              + \"      \\\"name\\\": \\\"testSpan1\\\",\\n\"\n+              + \"      \\\"kind\\\": \\\"SPAN_KIND_INTERNAL\\\",\\n\"\n+              + \"      \\\"startTimeUnixNano\\\": \\\"100\\\",\\n\"\n+              + \"      \\\"endTimeUnixNano\\\": \\\"1100\\\",\\n\"\n+              + \"      \\\"attributes\\\": [{\\n\"\n+              + \"        \\\"key\\\": \\\"animal\\\",\\n\"\n+              + \"        \\\"value\\\": {\\n\"\n+              + \"          \\\"stringValue\\\": \\\"cat\\\"\\n\"\n+              + \"        }\\n\"\n+              + \"      }, {\\n\"\n+              + \"        \\\"key\\\": \\\"lives\\\",\\n\"\n+              + \"        \\\"value\\\": {\\n\"\n+              + \"          \\\"intValue\\\": \\\"9\\\"\\n\"\n+              + \"        }\\n\"\n+              + \"      }],\\n\"\n+              + \"      \\\"events\\\": [{\\n\"\n+              + \"        \\\"timeUnixNano\\\": \\\"600\\\",\\n\"\n+              + \"        \\\"name\\\": \\\"somethingHappenedHere\\\",\\n\"\n+              + \"        \\\"attributes\\\": [{\\n\"\n+              + \"          \\\"key\\\": \\\"important\\\",\\n\"\n+              + \"          \\\"value\\\": {\\n\"\n+              + \"            \\\"boolValue\\\": true\\n\"\n+              + \"          }\\n\"\n+              + \"        }]\\n\"\n+              + \"      }],\\n\"\n+              + \"      \\\"status\\\": {\\n\"\n+              + \"        \\\"code\\\": \\\"STATUS_CODE_OK\\\"\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  }]\\n\"\n+              + \"}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MzgzMA==", "bodyText": "Would \"provided\" be a semantically more correct dependency declaration?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r546793830", "createdAt": "2020-12-21T16:11:27Z", "author": {"login": "jkwatson"}, "path": "exporters/otlpjson/build.gradle", "diffHunk": "@@ -0,0 +1,22 @@\n+plugins {\n+    id \"java-library\"\n+    id \"maven-publish\"\n+\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry Protocol JSON Exporters'\n+ext.moduleName = \"io.opentelemetry.exporter.otlpjson\"\n+\n+dependencies {\n+    compileOnly project(':sdk:trace')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NDczMA==", "bodyText": "So, since the trace SDK is supposed to be stable, I think it would ok to declare this as an api dependency and get that for free, like people would probably expect. Keeping the metrics dependency as provided might be ok, though, since someone has to explicitly opt-in to depending on it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r546794730", "createdAt": "2020-12-21T16:13:11Z", "author": {"login": "jkwatson"}, "path": "exporters/otlpjson/build.gradle", "diffHunk": "@@ -0,0 +1,22 @@\n+plugins {\n+    id \"java-library\"\n+    id \"maven-publish\"\n+\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry Protocol JSON Exporters'\n+ext.moduleName = \"io.opentelemetry.exporter.otlpjson\"\n+\n+dependencies {\n+    compileOnly project(':sdk:trace')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwNTI3Mg=="}, "originalCommit": {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec65fe4d038c57dd76f0793aabc89d244d0cc6a8", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec65fe4d038c57dd76f0793aabc89d244d0cc6a8", "committedDate": "2020-12-22T05:21:07Z", "message": "Cleanups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjgyOTc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#pullrequestreview-557282977", "createdAt": "2020-12-22T18:29:58Z", "commit": {"oid": "ec65fe4d038c57dd76f0793aabc89d244d0cc6a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODoyOTo1OFrOIKE7ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODoyOTo1OFrOIKE7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzNzUwNw==", "bodyText": "my only possible quibble is that maybe this should be \"io.opentelemetry.exporter.logging-otlp\" but I'm not quite sure which is going to be more discoverable by end-users. Maybe the description could be more .. descriptive about exactly what's going on here.  Maybe description = 'OpenTelemetry logging exporters with OTLP JSON formatting. Currently supports span exports.' ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r547437507", "createdAt": "2020-12-22T18:29:58Z", "author": {"login": "jkwatson"}, "path": "exporters/logging-otlp/build.gradle", "diffHunk": "@@ -0,0 +1,22 @@\n+plugins {\n+    id \"java-library\"\n+    id \"maven-publish\"\n+\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry Protocol JSON Logging Exporters'\n+ext.moduleName = \"io.opentelemetry.exporter.logging.otlp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec65fe4d038c57dd76f0793aabc89d244d0cc6a8"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjgzNTc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#pullrequestreview-557283577", "createdAt": "2020-12-22T18:31:07Z", "commit": {"oid": "ec65fe4d038c57dd76f0793aabc89d244d0cc6a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3664, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}