{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyODYyODIx", "number": 1106, "title": "First cut at a Zipkin Span Exporter", "bodyText": "Resolves #534\nNote: this code is heavily copied from the OpenCensus zipkin implementation.", "createdAt": "2020-04-13T22:02:04Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106", "merged": true, "mergeCommit": {"oid": "0ce1a3882445b990e06bab8b02de4f2b9b5dfc4c"}, "closed": true, "closedAt": "2020-05-01T15:42:41Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXXmJAgFqTM5MjUwNzkzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdDnQogFqTQwNDIzMDgxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTA3OTMx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-392507931", "createdAt": "2020-04-13T23:35:09Z", "commit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzozNTowOVrOGE43Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzozNTowOVrOGE43Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3OTE1OA==", "bodyText": "I think we don't have this in any other build.gradle. Maybe a separate PR to add to all of them?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407779158", "createdAt": "2020-04-13T23:35:09Z", "author": {"login": "bogdandrutu"}, "path": "build.gradle", "diffHunk": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTI2OTE0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-392526914", "createdAt": "2020-04-14T00:32:13Z", "commit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDozMjoxM1rOGE57qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDozMjoxM1rOGE57qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjY1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    zipkinReporterVersion = '2.7.14'\n          \n          \n            \n                    zipkinReporterVersion = '2.12.2'", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407796650", "createdAt": "2020-04-14T00:32:13Z", "author": {"login": "codefromthecrypt"}, "path": "build.gradle", "diffHunk": "@@ -96,6 +112,7 @@ subprojects {\n         prometheusVersion = '0.8.1'\n         protobufVersion = '3.11.4'\n         protocVersion = '3.11.4'\n+        zipkinReporterVersion = '2.7.14'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTI3NjM3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-392527637", "createdAt": "2020-04-14T00:34:31Z", "commit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDozNDozMVrOGE5-Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0OToxMlrOGE6OmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NzMzOQ==", "bodyText": "UI and dependency linking checks for errors. This is a simplified change, but check first of there's already a tag named \"error\"?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    spanBuilder.putTag(STATUS_ERROR, status.getCanonicalCode().toString());\n          \n          \n            \n                    spanBuilder.putTag(\"error\", status.getCanonicalCode().toString());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407797339", "createdAt": "2020-04-14T00:34:31Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/apache/incubator-zipkin-brave/blob/643b7245c462dc14d47afcdb076b2603fd421497/instrumentation/grpc/src/main/java/brave/grpc/GrpcParser.java#L67-L73\n+  @VisibleForTesting static final String STATUS_CODE = \"otel.status_code\";\n+  @VisibleForTesting static final String STATUS_DESCRIPTION = \"otel.status_description\";\n+  @VisibleForTesting static final String STATUS_ERROR = \"error\";\n+\n+  private final SpanBytesEncoder encoder;\n+  private final Sender sender;\n+  private final Endpoint localEndpoint;\n+\n+  ZipkinSpanExporter(SpanBytesEncoder encoder, Sender sender, String serviceName) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+    this.localEndpoint = produceLocalEndpoint(serviceName);\n+  }\n+\n+  /** Logic borrowed from brave.internal.Platform.produceLocalEndpoint */\n+  static Endpoint produceLocalEndpoint(String serviceName) {\n+    Endpoint.Builder builder = Endpoint.newBuilder().serviceName(serviceName);\n+    try {\n+      Enumeration<NetworkInterface> nics = NetworkInterface.getNetworkInterfaces();\n+      if (nics == null) {\n+        return builder.build();\n+      }\n+      while (nics.hasMoreElements()) {\n+        NetworkInterface nic = nics.nextElement();\n+        Enumeration<InetAddress> addresses = nic.getInetAddresses();\n+        while (addresses.hasMoreElements()) {\n+          InetAddress address = addresses.nextElement();\n+          if (address.isSiteLocalAddress()) {\n+            builder.ip(address);\n+            break;\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      // don't crash the caller if there was a problem reading nics.\n+      if (logger.isLoggable(Level.FINE)) {\n+        logger.log(Level.FINE, \"error reading nics\", e);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  static Span generateSpan(SpanData spanData, Endpoint localEndpoint) {\n+    long startTimestamp = toEpochMicros(spanData.getStartEpochNanos());\n+\n+    long endTimestamp = toEpochMicros(spanData.getEndEpochNanos());\n+\n+    Span.Builder spanBuilder =\n+        Span.newBuilder()\n+            .traceId(spanData.getTraceId().toLowerBase16())\n+            .id(spanData.getSpanId().toLowerBase16())\n+            .kind(toSpanKind(spanData))\n+            .name(spanData.getName())\n+            .timestamp(toEpochMicros(spanData.getStartEpochNanos()))\n+            .duration(endTimestamp - startTimestamp)\n+            .localEndpoint(localEndpoint);\n+\n+    if (spanData.getParentSpanId().isValid()) {\n+      spanBuilder.parentId(spanData.getParentSpanId().toLowerBase16());\n+    }\n+\n+    for (Map.Entry<String, AttributeValue> label : spanData.getAttributes().entrySet()) {\n+      spanBuilder.putTag(label.getKey(), attributeValueToString(label.getValue()));\n+    }\n+    Status status = spanData.getStatus();\n+    if (status != null) {\n+      spanBuilder.putTag(STATUS_CODE, status.getCanonicalCode().toString());\n+      if (status.getDescription() != null) {\n+        spanBuilder.putTag(STATUS_DESCRIPTION, status.getDescription());\n+      }\n+      if (!status.isOk()) {\n+        spanBuilder.putTag(STATUS_ERROR, status.getCanonicalCode().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NzUyMQ==", "bodyText": "Is there a chance this can be an HTTP code? or is this RPC only?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407797521", "createdAt": "2020-04-14T00:35:10Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/apache/incubator-zipkin-brave/blob/643b7245c462dc14d47afcdb076b2603fd421497/instrumentation/grpc/src/main/java/brave/grpc/GrpcParser.java#L67-L73\n+  @VisibleForTesting static final String STATUS_CODE = \"otel.status_code\";\n+  @VisibleForTesting static final String STATUS_DESCRIPTION = \"otel.status_description\";\n+  @VisibleForTesting static final String STATUS_ERROR = \"error\";\n+\n+  private final SpanBytesEncoder encoder;\n+  private final Sender sender;\n+  private final Endpoint localEndpoint;\n+\n+  ZipkinSpanExporter(SpanBytesEncoder encoder, Sender sender, String serviceName) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+    this.localEndpoint = produceLocalEndpoint(serviceName);\n+  }\n+\n+  /** Logic borrowed from brave.internal.Platform.produceLocalEndpoint */\n+  static Endpoint produceLocalEndpoint(String serviceName) {\n+    Endpoint.Builder builder = Endpoint.newBuilder().serviceName(serviceName);\n+    try {\n+      Enumeration<NetworkInterface> nics = NetworkInterface.getNetworkInterfaces();\n+      if (nics == null) {\n+        return builder.build();\n+      }\n+      while (nics.hasMoreElements()) {\n+        NetworkInterface nic = nics.nextElement();\n+        Enumeration<InetAddress> addresses = nic.getInetAddresses();\n+        while (addresses.hasMoreElements()) {\n+          InetAddress address = addresses.nextElement();\n+          if (address.isSiteLocalAddress()) {\n+            builder.ip(address);\n+            break;\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      // don't crash the caller if there was a problem reading nics.\n+      if (logger.isLoggable(Level.FINE)) {\n+        logger.log(Level.FINE, \"error reading nics\", e);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  static Span generateSpan(SpanData spanData, Endpoint localEndpoint) {\n+    long startTimestamp = toEpochMicros(spanData.getStartEpochNanos());\n+\n+    long endTimestamp = toEpochMicros(spanData.getEndEpochNanos());\n+\n+    Span.Builder spanBuilder =\n+        Span.newBuilder()\n+            .traceId(spanData.getTraceId().toLowerBase16())\n+            .id(spanData.getSpanId().toLowerBase16())\n+            .kind(toSpanKind(spanData))\n+            .name(spanData.getName())\n+            .timestamp(toEpochMicros(spanData.getStartEpochNanos()))\n+            .duration(endTimestamp - startTimestamp)\n+            .localEndpoint(localEndpoint);\n+\n+    if (spanData.getParentSpanId().isValid()) {\n+      spanBuilder.parentId(spanData.getParentSpanId().toLowerBase16());\n+    }\n+\n+    for (Map.Entry<String, AttributeValue> label : spanData.getAttributes().entrySet()) {\n+      spanBuilder.putTag(label.getKey(), attributeValueToString(label.getValue()));\n+    }\n+    Status status = spanData.getStatus();\n+    if (status != null) {\n+      spanBuilder.putTag(STATUS_CODE, status.getCanonicalCode().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Nzg5NQ==", "bodyText": "producer/consumer also? https://github.com/open-telemetry/opentelemetry-python/blob/master/ext/opentelemetry-ext-zipkin/src/opentelemetry/ext/zipkin/__init__.py#L80", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407797895", "createdAt": "2020-04-14T00:36:37Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/apache/incubator-zipkin-brave/blob/643b7245c462dc14d47afcdb076b2603fd421497/instrumentation/grpc/src/main/java/brave/grpc/GrpcParser.java#L67-L73\n+  @VisibleForTesting static final String STATUS_CODE = \"otel.status_code\";\n+  @VisibleForTesting static final String STATUS_DESCRIPTION = \"otel.status_description\";\n+  @VisibleForTesting static final String STATUS_ERROR = \"error\";\n+\n+  private final SpanBytesEncoder encoder;\n+  private final Sender sender;\n+  private final Endpoint localEndpoint;\n+\n+  ZipkinSpanExporter(SpanBytesEncoder encoder, Sender sender, String serviceName) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+    this.localEndpoint = produceLocalEndpoint(serviceName);\n+  }\n+\n+  /** Logic borrowed from brave.internal.Platform.produceLocalEndpoint */\n+  static Endpoint produceLocalEndpoint(String serviceName) {\n+    Endpoint.Builder builder = Endpoint.newBuilder().serviceName(serviceName);\n+    try {\n+      Enumeration<NetworkInterface> nics = NetworkInterface.getNetworkInterfaces();\n+      if (nics == null) {\n+        return builder.build();\n+      }\n+      while (nics.hasMoreElements()) {\n+        NetworkInterface nic = nics.nextElement();\n+        Enumeration<InetAddress> addresses = nic.getInetAddresses();\n+        while (addresses.hasMoreElements()) {\n+          InetAddress address = addresses.nextElement();\n+          if (address.isSiteLocalAddress()) {\n+            builder.ip(address);\n+            break;\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      // don't crash the caller if there was a problem reading nics.\n+      if (logger.isLoggable(Level.FINE)) {\n+        logger.log(Level.FINE, \"error reading nics\", e);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  static Span generateSpan(SpanData spanData, Endpoint localEndpoint) {\n+    long startTimestamp = toEpochMicros(spanData.getStartEpochNanos());\n+\n+    long endTimestamp = toEpochMicros(spanData.getEndEpochNanos());\n+\n+    Span.Builder spanBuilder =\n+        Span.newBuilder()\n+            .traceId(spanData.getTraceId().toLowerBase16())\n+            .id(spanData.getSpanId().toLowerBase16())\n+            .kind(toSpanKind(spanData))\n+            .name(spanData.getName())\n+            .timestamp(toEpochMicros(spanData.getStartEpochNanos()))\n+            .duration(endTimestamp - startTimestamp)\n+            .localEndpoint(localEndpoint);\n+\n+    if (spanData.getParentSpanId().isValid()) {\n+      spanBuilder.parentId(spanData.getParentSpanId().toLowerBase16());\n+    }\n+\n+    for (Map.Entry<String, AttributeValue> label : spanData.getAttributes().entrySet()) {\n+      spanBuilder.putTag(label.getKey(), attributeValueToString(label.getValue()));\n+    }\n+    Status status = spanData.getStatus();\n+    if (status != null) {\n+      spanBuilder.putTag(STATUS_CODE, status.getCanonicalCode().toString());\n+      if (status.getDescription() != null) {\n+        spanBuilder.putTag(STATUS_DESCRIPTION, status.getDescription());\n+      }\n+      if (!status.isOk()) {\n+        spanBuilder.putTag(STATUS_ERROR, status.getCanonicalCode().toString());\n+      }\n+    }\n+\n+    for (SpanData.TimedEvent annotation : spanData.getTimedEvents()) {\n+      spanBuilder.addAnnotation(toEpochMicros(annotation.getEpochNanos()), annotation.getName());\n+    }\n+\n+    return spanBuilder.build();\n+  }\n+\n+  @javax.annotation.Nullable\n+  private static Span.Kind toSpanKind(SpanData spanData) {\n+    // This is a hack because the Span API did not have SpanKind.\n+    if (spanData.getKind() == Kind.SERVER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5ODE5OA==", "bodyText": "is there any chance endTimestamp doesn't exist?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407798198", "createdAt": "2020-04-14T00:37:36Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/apache/incubator-zipkin-brave/blob/643b7245c462dc14d47afcdb076b2603fd421497/instrumentation/grpc/src/main/java/brave/grpc/GrpcParser.java#L67-L73\n+  @VisibleForTesting static final String STATUS_CODE = \"otel.status_code\";\n+  @VisibleForTesting static final String STATUS_DESCRIPTION = \"otel.status_description\";\n+  @VisibleForTesting static final String STATUS_ERROR = \"error\";\n+\n+  private final SpanBytesEncoder encoder;\n+  private final Sender sender;\n+  private final Endpoint localEndpoint;\n+\n+  ZipkinSpanExporter(SpanBytesEncoder encoder, Sender sender, String serviceName) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+    this.localEndpoint = produceLocalEndpoint(serviceName);\n+  }\n+\n+  /** Logic borrowed from brave.internal.Platform.produceLocalEndpoint */\n+  static Endpoint produceLocalEndpoint(String serviceName) {\n+    Endpoint.Builder builder = Endpoint.newBuilder().serviceName(serviceName);\n+    try {\n+      Enumeration<NetworkInterface> nics = NetworkInterface.getNetworkInterfaces();\n+      if (nics == null) {\n+        return builder.build();\n+      }\n+      while (nics.hasMoreElements()) {\n+        NetworkInterface nic = nics.nextElement();\n+        Enumeration<InetAddress> addresses = nic.getInetAddresses();\n+        while (addresses.hasMoreElements()) {\n+          InetAddress address = addresses.nextElement();\n+          if (address.isSiteLocalAddress()) {\n+            builder.ip(address);\n+            break;\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      // don't crash the caller if there was a problem reading nics.\n+      if (logger.isLoggable(Level.FINE)) {\n+        logger.log(Level.FINE, \"error reading nics\", e);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  static Span generateSpan(SpanData spanData, Endpoint localEndpoint) {\n+    long startTimestamp = toEpochMicros(spanData.getStartEpochNanos());\n+\n+    long endTimestamp = toEpochMicros(spanData.getEndEpochNanos());\n+\n+    Span.Builder spanBuilder =\n+        Span.newBuilder()\n+            .traceId(spanData.getTraceId().toLowerBase16())\n+            .id(spanData.getSpanId().toLowerBase16())\n+            .kind(toSpanKind(spanData))\n+            .name(spanData.getName())\n+            .timestamp(toEpochMicros(spanData.getStartEpochNanos()))\n+            .duration(endTimestamp - startTimestamp)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5OTQ3MA==", "bodyText": "Not quite sure yet if the below revision is useful or not.. We will have a RPC tag shortly, but I'm not sure this usage here is RPC only. Anyway here's a better link for HTTP\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // https://github.com/apache/incubator-zipkin-brave/blob/643b7245c462dc14d47afcdb076b2603fd421497/instrumentation/grpc/src/main/java/brave/grpc/GrpcParser.java#L67-L73\n          \n          \n            \n              // https://github.com/openzipkin/brave/blob/eee993f998ae57b08644cc357a6d478827428710/instrumentation/http/src/main/java/brave/http/HttpTags.java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407799470", "createdAt": "2020-04-14T00:42:12Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/apache/incubator-zipkin-brave/blob/643b7245c462dc14d47afcdb076b2603fd421497/instrumentation/grpc/src/main/java/brave/grpc/GrpcParser.java#L67-L73", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDE2OA==", "bodyText": "one of these should test the whole thing works I think, ex using https://github.com/openzipkin/zipkin/tree/master/zipkin-junit", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407800168", "createdAt": "2020-04-14T00:44:36Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfigurationTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/** Unit tests for {@link ZipkinExporterConfiguration}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class ZipkinExporterConfigurationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDQ5Nw==", "bodyText": "you can switch to the bom https://github.com/openzipkin/zipkin-reporter-java#version-alignments\ngradle supports it now, then you also get zipkin-junit's version number for free.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407800497", "createdAt": "2020-04-14T00:45:44Z", "author": {"login": "codefromthecrypt"}, "path": "build.gradle", "diffHunk": "@@ -117,6 +134,8 @@ subprojects {\n                 prometheus_client_common: \"io.prometheus:simpleclient_common:${prometheusVersion}\",\n                 protobuf                : \"com.google.protobuf:protobuf-java:${protobufVersion}\",\n                 protobuf_util           : \"com.google.protobuf:protobuf-java-util:${protobufVersion}\",\n+                zipkin_reporter         : \"io.zipkin.reporter2:zipkin-reporter:${zipkinReporterVersion}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDg0Mg==", "bodyText": "I'd take out guava. unless it is used somehow underneath, the types used in the code below aren't pulling weight to pin this. I know you're surprised that I, of all people, am making this comment", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407800842", "createdAt": "2020-04-14T00:46:55Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/build.gradle", "diffHunk": "@@ -0,0 +1,56 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry - Zipkin Exporter'\n+ext.moduleName = \"io.opentelemetry.exporters.zipkin\"\n+\n+dependencies {\n+    compileOnly libraries.auto_value\n+\n+    api project(':opentelemetry-sdk')\n+\n+    annotationProcessor libraries.auto_value\n+\n+    implementation libraries.guava", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMTQ5Ng==", "bodyText": "add a test where there is no kind? I didn't see one..", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407801496", "createdAt": "2020-04-14T00:49:12Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/apache/incubator-zipkin-brave/blob/643b7245c462dc14d47afcdb076b2603fd421497/instrumentation/grpc/src/main/java/brave/grpc/GrpcParser.java#L67-L73\n+  @VisibleForTesting static final String STATUS_CODE = \"otel.status_code\";\n+  @VisibleForTesting static final String STATUS_DESCRIPTION = \"otel.status_description\";\n+  @VisibleForTesting static final String STATUS_ERROR = \"error\";\n+\n+  private final SpanBytesEncoder encoder;\n+  private final Sender sender;\n+  private final Endpoint localEndpoint;\n+\n+  ZipkinSpanExporter(SpanBytesEncoder encoder, Sender sender, String serviceName) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+    this.localEndpoint = produceLocalEndpoint(serviceName);\n+  }\n+\n+  /** Logic borrowed from brave.internal.Platform.produceLocalEndpoint */\n+  static Endpoint produceLocalEndpoint(String serviceName) {\n+    Endpoint.Builder builder = Endpoint.newBuilder().serviceName(serviceName);\n+    try {\n+      Enumeration<NetworkInterface> nics = NetworkInterface.getNetworkInterfaces();\n+      if (nics == null) {\n+        return builder.build();\n+      }\n+      while (nics.hasMoreElements()) {\n+        NetworkInterface nic = nics.nextElement();\n+        Enumeration<InetAddress> addresses = nic.getInetAddresses();\n+        while (addresses.hasMoreElements()) {\n+          InetAddress address = addresses.nextElement();\n+          if (address.isSiteLocalAddress()) {\n+            builder.ip(address);\n+            break;\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      // don't crash the caller if there was a problem reading nics.\n+      if (logger.isLoggable(Level.FINE)) {\n+        logger.log(Level.FINE, \"error reading nics\", e);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  static Span generateSpan(SpanData spanData, Endpoint localEndpoint) {\n+    long startTimestamp = toEpochMicros(spanData.getStartEpochNanos());\n+\n+    long endTimestamp = toEpochMicros(spanData.getEndEpochNanos());\n+\n+    Span.Builder spanBuilder =\n+        Span.newBuilder()\n+            .traceId(spanData.getTraceId().toLowerBase16())\n+            .id(spanData.getSpanId().toLowerBase16())\n+            .kind(toSpanKind(spanData))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTM2MjM4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-392536238", "createdAt": "2020-04-14T01:03:36Z", "commit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowMzozN1rOGE6dyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowNDoxOFrOGE6eow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTM4Ng==", "bodyText": "Some polish as I've been redoing a lot of docs like these lately, to intro things. Hope it helps.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is the OpenTelemetry exporter, which sends span data to Zipkin.\n          \n          \n            \n            This is an OpenTelemetry exporter that sends span data using the [io.zipkin.reporter2:zipkin-reporter](https://github.com/openzipkin/zipkin-reporter-java\") library.\n          \n          \n            \n            \n          \n          \n            \n            By default, this POSTs json in [Zipkin format](https://zipkin.io/zipkin-api/#/default/post_spans) to\n          \n          \n            \n            a specified HTTP URL. This could be to a [Zipkin](https://zipkin.io) service, or anything that\n          \n          \n            \n            consumes the same format.\n          \n          \n            \n            \n          \n          \n            \n            You can alternatively use other formats, such as protobuf, or override the `Sender` to use a non-HTTP transport, such as Kafka.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407805386", "createdAt": "2020-04-14T01:03:37Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/README.md", "diffHunk": "@@ -0,0 +1,30 @@\n+# OpenTelemetry - Zipkin Span Exporter\n+\n+[![Javadocs][javadoc-image]][javadoc-url]\n+\n+This is the OpenTelemetry exporter, which sends span data to Zipkin.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTYwMw==", "bodyText": "probably a wildcard s/http/https/ here. Fixing to avoid first timers getting confused why things don't work.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .setV2Url(\"https://localhost/api/v2/spans\")\n          \n          \n            \n                        .setV2Url(\"http://localhost/api/v2/spans\")", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r407805603", "createdAt": "2020-04-14T01:04:18Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/README.md", "diffHunk": "@@ -0,0 +1,30 @@\n+# OpenTelemetry - Zipkin Span Exporter\n+\n+[![Javadocs][javadoc-image]][javadoc-url]\n+\n+This is the OpenTelemetry exporter, which sends span data to Zipkin.\n+\n+## Configuration\n+\n+The Zipkin span exporter can be configured programmatically.\n+\n+An example of simple Zipkin exporter initialization. In this case\n+spans will be sent to a Zipkin endpoint running on `localhost`:\n+\n+```java\n+    ZipkinExporterConfiguration configuration =\n+        ZipkinExporterConfiguration.builder()\n+            .setV2Url(\"https://localhost/api/v2/spans\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb30bf1cd33f245022a04bb8cdfc5d7986a25d"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzY5NTE1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-393369515", "createdAt": "2020-04-14T23:50:07Z", "commit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzo1MDowN1rOGFk5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDoyMTo0M1rOGFle2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMDU2MQ==", "bodyText": "maybe a comment that says this is the minimum api level of otel? whatever the minimum is, this should be", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408500561", "createdAt": "2020-04-14T23:50:07Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/build.gradle", "diffHunk": "@@ -0,0 +1,57 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry - Zipkin Exporter'\n+ext.moduleName = \"io.opentelemetry.exporters.zipkin\"\n+\n+dependencies {\n+    compileOnly libraries.auto_value\n+\n+    api project(':opentelemetry-sdk')\n+\n+    annotationProcessor libraries.auto_value\n+\n+    implementation libraries.zipkin_reporter\n+    implementation libraries.zipkin_urlconnection\n+\n+    testImplementation libraries.guava\n+\n+    signature \"org.codehaus.mojo.signature:java17:1.0@signature\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMDcxMA==", "bodyText": "is it normal for the license header to be in the middle of the file?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408500710", "createdAt": "2020-04-14T23:50:34Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/build.gradle", "diffHunk": "@@ -0,0 +1,57 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry - Zipkin Exporter'\n+ext.moduleName = \"io.opentelemetry.exporters.zipkin\"\n+\n+dependencies {\n+    compileOnly libraries.auto_value\n+\n+    api project(':opentelemetry-sdk')\n+\n+    annotationProcessor libraries.auto_value\n+\n+    implementation libraries.zipkin_reporter\n+    implementation libraries.zipkin_urlconnection\n+\n+    testImplementation libraries.guava\n+\n+    signature \"org.codehaus.mojo.signature:java17:1.0@signature\"\n+    signature \"net.sf.androidscents.signature:android-api-level-24:7.0_r2@signature\"\n+}\n+\n+animalsniffer {\n+    // Don't check sourceSets.jmh and sourceSets.test\n+    sourceSets = [\n+            sourceSets.main\n+    ]\n+}\n+\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMDkzMA==", "bodyText": "probably not correct? either 0.3 (if adding in a patch) or the next releasable version?\nsame everywhere", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408500930", "createdAt": "2020-04-14T23:51:21Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.3.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMTMyNA==", "bodyText": "I'm guessing the project has rules that require filler javadoc statements? These don't seem to add value otherwise, except for maybe the version once it is correct. If you want better descriptions let me know.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408501324", "createdAt": "2020-04-14T23:52:40Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.3.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMjA3OQ==", "bodyText": "description is good here.. @return this. is silly and I'm guessing slave to javadoc or checkstyle?\nI would add @see for the actual methods on the type being built and do most of the describing there.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408502079", "createdAt": "2020-04-14T23:54:59Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.3.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.3.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.3.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.3.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.3.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.3.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.3.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this.\n+     * @since 0.3.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * @param v2Url the Zipkin V2 URL.\n+     * @return this.\n+     * @since 0.3.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwMjQyMQ==", "bodyText": "maybe just grep since before you finish this PR", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408502421", "createdAt": "2020-04-14T23:56:00Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.3.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.3.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.3.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.3.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.3.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.3.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.3.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this.\n+     * @since 0.3.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * @param v2Url the Zipkin V2 URL.\n+     * @return this.\n+     * @since 0.3.0\n+     */\n+    public abstract Builder setV2Url(String v2Url);\n+\n+    /**\n+     * Sets the Zipkin sender.\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * @param sender the Zipkin sender.\n+     * @return this.\n+     * @since 0.3.0\n+     */\n+    public abstract Builder setSender(Sender sender);\n+\n+    /**\n+     * Sets the {@link SpanBytesEncoder}.\n+     *\n+     * @param encoder the {@code SpanBytesEncoder}.\n+     * @return this\n+     * @since 0.3.0\n+     */\n+    public abstract Builder setEncoder(SpanBytesEncoder encoder);\n+\n+    abstract String getV2Url();\n+\n+    @Nullable\n+    abstract Sender getSender();\n+\n+    abstract ZipkinExporterConfiguration autoBuild();\n+\n+    /**\n+     * Builds a {@link ZipkinExporterConfiguration}.\n+     *\n+     * @return a {@code ZipkinExporterConfiguration}.\n+     * @since 0.22", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwODIyNQ==", "bodyText": "I'm almost certain we wouldn't add 'otel' as a tag as that would just require re-mapping it back later.\nAs far as I can tell, this is an RPC code, and more specifically gRPC.\nI don't think we would waste indexing on the one called code either. so we should pick one.\nLet's drop \"otel.status_code\" and rename \"otel.status_description\" to \"grpc.status_code\",\nas it seems to be the same value as what we tag today.\nEx. today grpc only tags \"error\" \"grpc.status_code\", ex \"grpc.status_code\" -> \"UNIMPLEMENTED\" (not a numerical tag)\nThis trades short term conflation with portability with existing search and indexing especially as I doubt\nmany RPC frameworks except grpc are integrated with otel at the moment.\nYou can add a better comment which is that we are tentatively re-using grpc until a final decision is made on rpc tags openzipkin/brave#999\nIt may also be worth mentioning in the README that while the \"error\" tag is a zipkin tag, \"grpc.status_code\" is tentative. Adding the best tentative choice is better than blocking this work or introducing a non-existent tag that will add burden to existing sites as many don't have means to re-map tags (never needed to).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408508225", "createdAt": "2020-04-15T00:14:54Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/openzipkin/brave/blob/eee993f998ae57b08644cc357a6d478827428710/instrumentation/http/src/main/java/brave/http/HttpTags.java\n+  // Note: these 3 fields are non-private for testing\n+  static final String STATUS_CODE = \"otel.status_code\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwODcxMQ==", "bodyText": "usually I add an assert false or similar as this is a bug I think. especially in the same repo there should never be an escape from enum switch (to degree it happens outside is avoidable version skew)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408508711", "createdAt": "2020-04-15T00:16:51Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/openzipkin/brave/blob/eee993f998ae57b08644cc357a6d478827428710/instrumentation/http/src/main/java/brave/http/HttpTags.java\n+  // Note: these 3 fields are non-private for testing\n+  static final String STATUS_CODE = \"otel.status_code\";\n+  static final String STATUS_DESCRIPTION = \"otel.status_description\";\n+  static final String STATUS_ERROR = \"error\";\n+\n+  private final SpanBytesEncoder encoder;\n+  private final Sender sender;\n+  private final Endpoint localEndpoint;\n+\n+  ZipkinSpanExporter(SpanBytesEncoder encoder, Sender sender, String serviceName) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+    this.localEndpoint = produceLocalEndpoint(serviceName);\n+  }\n+\n+  /** Logic borrowed from brave.internal.Platform.produceLocalEndpoint */\n+  static Endpoint produceLocalEndpoint(String serviceName) {\n+    Endpoint.Builder builder = Endpoint.newBuilder().serviceName(serviceName);\n+    try {\n+      Enumeration<NetworkInterface> nics = NetworkInterface.getNetworkInterfaces();\n+      if (nics == null) {\n+        return builder.build();\n+      }\n+      while (nics.hasMoreElements()) {\n+        NetworkInterface nic = nics.nextElement();\n+        Enumeration<InetAddress> addresses = nic.getInetAddresses();\n+        while (addresses.hasMoreElements()) {\n+          InetAddress address = addresses.nextElement();\n+          if (address.isSiteLocalAddress()) {\n+            builder.ip(address);\n+            break;\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      // don't crash the caller if there was a problem reading nics.\n+      if (logger.isLoggable(Level.FINE)) {\n+        logger.log(Level.FINE, \"error reading nics\", e);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  static Span generateSpan(SpanData spanData, Endpoint localEndpoint) {\n+    long startTimestamp = toEpochMicros(spanData.getStartEpochNanos());\n+\n+    long endTimestamp = toEpochMicros(spanData.getEndEpochNanos());\n+\n+    Span.Builder spanBuilder =\n+        Span.newBuilder()\n+            .traceId(spanData.getTraceId().toLowerBase16())\n+            .id(spanData.getSpanId().toLowerBase16())\n+            .kind(toSpanKind(spanData))\n+            .name(spanData.getName())\n+            .timestamp(toEpochMicros(spanData.getStartEpochNanos()))\n+            .duration(endTimestamp - startTimestamp)\n+            .localEndpoint(localEndpoint);\n+\n+    if (spanData.getParentSpanId().isValid()) {\n+      spanBuilder.parentId(spanData.getParentSpanId().toLowerBase16());\n+    }\n+\n+    for (Map.Entry<String, AttributeValue> label : spanData.getAttributes().entrySet()) {\n+      spanBuilder.putTag(label.getKey(), attributeValueToString(label.getValue()));\n+    }\n+    Status status = spanData.getStatus();\n+    if (status != null) {\n+      spanBuilder.putTag(STATUS_CODE, status.getCanonicalCode().toString());\n+      if (status.getDescription() != null) {\n+        spanBuilder.putTag(STATUS_DESCRIPTION, status.getDescription());\n+      }\n+      if (!status.isOk()) {\n+        spanBuilder.putTag(STATUS_ERROR, status.getCanonicalCode().toString());\n+      }\n+    }\n+\n+    for (SpanData.TimedEvent annotation : spanData.getTimedEvents()) {\n+      spanBuilder.addAnnotation(toEpochMicros(annotation.getEpochNanos()), annotation.getName());\n+    }\n+\n+    return spanBuilder.build();\n+  }\n+\n+  @Nullable\n+  private static Span.Kind toSpanKind(SpanData spanData) {\n+    // This is a hack because the Span API did not have SpanKind.\n+    if (spanData.getKind() == Kind.SERVER\n+        || (spanData.getKind() == null && Boolean.TRUE.equals(spanData.getHasRemoteParent()))) {\n+      return Span.Kind.SERVER;\n+    }\n+\n+    // This is a hack because the Span API did not have SpanKind.\n+    if (spanData.getKind() == Kind.CLIENT || spanData.getName().startsWith(\"Sent.\")) {\n+      return Span.Kind.CLIENT;\n+    }\n+\n+    if (spanData.getKind() == Kind.PRODUCER) {\n+      return Span.Kind.PRODUCER;\n+    }\n+    if (spanData.getKind() == Kind.CONSUMER) {\n+      return Span.Kind.CONSUMER;\n+    }\n+\n+    return null;\n+  }\n+\n+  private static long toEpochMicros(long epochNanos) {\n+    return MICROSECONDS.convert(epochNanos, NANOSECONDS);\n+  }\n+\n+  private static String attributeValueToString(AttributeValue attributeValue) {\n+    Type type = attributeValue.getType();\n+    switch (type) {\n+      case STRING:\n+        return attributeValue.getStringValue();\n+      case BOOLEAN:\n+        return String.valueOf(attributeValue.getBooleanValue());\n+      case LONG:\n+        return String.valueOf(attributeValue.getLongValue());\n+      case DOUBLE:\n+        return String.valueOf(attributeValue.getDoubleValue());\n+    }\n+    return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwOTA3Mg==", "bodyText": "URLConnection doesn't need to close on shutdown. However, the builder method that sets sender could warn the caller (in javadoc) that they are responsible to close the sender (a better choice than us closing it randomly)\nEventhough the calls here are synchronous, most senders will have resources open like kafka connections.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408509072", "createdAt": "2020-04-15T00:18:02Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/openzipkin/brave/blob/eee993f998ae57b08644cc357a6d478827428710/instrumentation/http/src/main/java/brave/http/HttpTags.java\n+  // Note: these 3 fields are non-private for testing\n+  static final String STATUS_CODE = \"otel.status_code\";\n+  static final String STATUS_DESCRIPTION = \"otel.status_description\";\n+  static final String STATUS_ERROR = \"error\";\n+\n+  private final SpanBytesEncoder encoder;\n+  private final Sender sender;\n+  private final Endpoint localEndpoint;\n+\n+  ZipkinSpanExporter(SpanBytesEncoder encoder, Sender sender, String serviceName) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+    this.localEndpoint = produceLocalEndpoint(serviceName);\n+  }\n+\n+  /** Logic borrowed from brave.internal.Platform.produceLocalEndpoint */\n+  static Endpoint produceLocalEndpoint(String serviceName) {\n+    Endpoint.Builder builder = Endpoint.newBuilder().serviceName(serviceName);\n+    try {\n+      Enumeration<NetworkInterface> nics = NetworkInterface.getNetworkInterfaces();\n+      if (nics == null) {\n+        return builder.build();\n+      }\n+      while (nics.hasMoreElements()) {\n+        NetworkInterface nic = nics.nextElement();\n+        Enumeration<InetAddress> addresses = nic.getInetAddresses();\n+        while (addresses.hasMoreElements()) {\n+          InetAddress address = addresses.nextElement();\n+          if (address.isSiteLocalAddress()) {\n+            builder.ip(address);\n+            break;\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      // don't crash the caller if there was a problem reading nics.\n+      if (logger.isLoggable(Level.FINE)) {\n+        logger.log(Level.FINE, \"error reading nics\", e);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  static Span generateSpan(SpanData spanData, Endpoint localEndpoint) {\n+    long startTimestamp = toEpochMicros(spanData.getStartEpochNanos());\n+\n+    long endTimestamp = toEpochMicros(spanData.getEndEpochNanos());\n+\n+    Span.Builder spanBuilder =\n+        Span.newBuilder()\n+            .traceId(spanData.getTraceId().toLowerBase16())\n+            .id(spanData.getSpanId().toLowerBase16())\n+            .kind(toSpanKind(spanData))\n+            .name(spanData.getName())\n+            .timestamp(toEpochMicros(spanData.getStartEpochNanos()))\n+            .duration(endTimestamp - startTimestamp)\n+            .localEndpoint(localEndpoint);\n+\n+    if (spanData.getParentSpanId().isValid()) {\n+      spanBuilder.parentId(spanData.getParentSpanId().toLowerBase16());\n+    }\n+\n+    for (Map.Entry<String, AttributeValue> label : spanData.getAttributes().entrySet()) {\n+      spanBuilder.putTag(label.getKey(), attributeValueToString(label.getValue()));\n+    }\n+    Status status = spanData.getStatus();\n+    if (status != null) {\n+      spanBuilder.putTag(STATUS_CODE, status.getCanonicalCode().toString());\n+      if (status.getDescription() != null) {\n+        spanBuilder.putTag(STATUS_DESCRIPTION, status.getDescription());\n+      }\n+      if (!status.isOk()) {\n+        spanBuilder.putTag(STATUS_ERROR, status.getCanonicalCode().toString());\n+      }\n+    }\n+\n+    for (SpanData.TimedEvent annotation : spanData.getTimedEvents()) {\n+      spanBuilder.addAnnotation(toEpochMicros(annotation.getEpochNanos()), annotation.getName());\n+    }\n+\n+    return spanBuilder.build();\n+  }\n+\n+  @Nullable\n+  private static Span.Kind toSpanKind(SpanData spanData) {\n+    // This is a hack because the Span API did not have SpanKind.\n+    if (spanData.getKind() == Kind.SERVER\n+        || (spanData.getKind() == null && Boolean.TRUE.equals(spanData.getHasRemoteParent()))) {\n+      return Span.Kind.SERVER;\n+    }\n+\n+    // This is a hack because the Span API did not have SpanKind.\n+    if (spanData.getKind() == Kind.CLIENT || spanData.getName().startsWith(\"Sent.\")) {\n+      return Span.Kind.CLIENT;\n+    }\n+\n+    if (spanData.getKind() == Kind.PRODUCER) {\n+      return Span.Kind.PRODUCER;\n+    }\n+    if (spanData.getKind() == Kind.CONSUMER) {\n+      return Span.Kind.CONSUMER;\n+    }\n+\n+    return null;\n+  }\n+\n+  private static long toEpochMicros(long epochNanos) {\n+    return MICROSECONDS.convert(epochNanos, NANOSECONDS);\n+  }\n+\n+  private static String attributeValueToString(AttributeValue attributeValue) {\n+    Type type = attributeValue.getType();\n+    switch (type) {\n+      case STRING:\n+        return attributeValue.getStringValue();\n+      case BOOLEAN:\n+        return String.valueOf(attributeValue.getBooleanValue());\n+      case LONG:\n+        return String.valueOf(attributeValue.getLongValue());\n+      case DOUBLE:\n+        return String.valueOf(attributeValue.getDoubleValue());\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public ResultCode export(final Collection<SpanData> spanDataList) {\n+    List<byte[]> encodedSpans = new ArrayList<>(spanDataList.size());\n+    for (SpanData spanData : spanDataList) {\n+      encodedSpans.add(encoder.encode(generateSpan(spanData, localEndpoint)));\n+    }\n+    try {\n+      sender.sendSpans(encodedSpans).execute();\n+    } catch (IOException e) {\n+      return ResultCode.FAILED_NOT_RETRYABLE;\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+\n+  @Override\n+  public void shutdown() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMDE2OA==", "bodyText": "sorry if I am blind, but definitely add something for the Kind that coerces to null?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r408510168", "createdAt": "2020-04-15T00:21:43Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData.Link;\n+import io.opentelemetry.sdk.trace.export.SpanExporter.ResultCode;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import zipkin2.Call;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/** Unit tests for {@link ZipkinSpanExporterTest}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class ZipkinSpanExporterTest {\n+\n+  @Mock private Sender mockSender;\n+  @Mock private SpanBytesEncoder mockEncoder;\n+  @Mock private Call<Void> mockZipkinCall;\n+\n+  private static final Endpoint localEndpoint =\n+      ZipkinSpanExporter.produceLocalEndpoint(\"tweetiebird\");\n+  private static final String TRACE_ID = \"d239036e7d5cec116b562147388b35bf\";\n+  private static final String SPAN_ID = \"9cc1e3049173be09\";\n+  private static final String PARENT_SPAN_ID = \"8b03ab423da481c5\";\n+  private static final Map<String, AttributeValue> attributes = Collections.emptyMap();\n+  private static final List<SpanData.TimedEvent> annotations =\n+      ImmutableList.of(\n+          SpanData.TimedEvent.create(\n+              1505855799_433901068L, \"RECEIVED\", Collections.<String, AttributeValue>emptyMap()),\n+          SpanData.TimedEvent.create(\n+              1505855799_459486280L, \"SENT\", Collections.<String, AttributeValue>emptyMap()));\n+\n+  @Test\n+  public void generateSpan_remoteParent() {\n+    SpanData data = buildStandardSpan().build();\n+\n+    assertThat(ZipkinSpanExporter.generateSpan(data, localEndpoint))\n+        .isEqualTo(buildZipkinSpan(Span.Kind.SERVER, \"OK\"));\n+  }\n+\n+  @Test\n+  public void generateSpan_ServerKind() {\n+    SpanData data = buildStandardSpan().setKind(Kind.SERVER).build();\n+\n+    assertThat(ZipkinSpanExporter.generateSpan(data, localEndpoint))\n+        .isEqualTo(buildZipkinSpan(Span.Kind.SERVER, \"OK\"));\n+  }\n+\n+  @Test\n+  public void generateSpan_ClientKind() {\n+    SpanData data = buildStandardSpan().setKind(Kind.CLIENT).build();\n+\n+    assertThat(ZipkinSpanExporter.generateSpan(data, localEndpoint))\n+        .isEqualTo(buildZipkinSpan(Span.Kind.CLIENT, \"OK\"));\n+  }\n+\n+  @Test\n+  public void generateSpan_ConsumeKind() {\n+    SpanData data = buildStandardSpan().setKind(Kind.CONSUMER).build();\n+\n+    assertThat(ZipkinSpanExporter.generateSpan(data, localEndpoint))\n+        .isEqualTo(buildZipkinSpan(Span.Kind.CONSUMER, \"OK\"));\n+  }\n+\n+  @Test\n+  public void generateSpan_ProducerKind() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83424a74e17dc5e440f20ad1bed804298166ac77"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTA4MTUw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-395108150", "createdAt": "2020-04-17T01:42:53Z", "commit": {"oid": "adf694a04807b55b64c55b98f214c9b32a238dd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTo0Mjo1NFrOGG9Bog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTo0Mjo1NFrOGG9Bog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NDQ4Mg==", "bodyText": "@jkwatson PS I was assuming grpc \"only\" sets status vs adding a different tag also like \"rpc.status\" or \"grpc.status\" attribute per https://github.com/open-telemetry/opentelemetry-specification/blob/bfb060b23113ba9af492f8c63dd89ecfc500810b/specification/trace/semantic_conventions/rpc.md#status\nIn this case, I think the logic below can be simplified.. only when the mandatory \"rpc.service\" attribute exists, set \"grpc.status_code\" as we aren't likely to use the status values for any other reason.\nThe follow-up comment can refer to openzipkin/brave#999 which is likely to have the outcome of setting a tag like \"rpc.status\" (not yet decided) when the status is not OK. That is assuming there's no heuristic way to identify if the service in otel is grpc or not.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r409944482", "createdAt": "2020-04-17T01:42:54Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. As an example see:\n+  // https://github.com/openzipkin/brave/blob/eee993f998ae57b08644cc357a6d478827428710/instrumentation/http/src/main/java/brave/http/HttpTags.java\n+  // Note: these 3 fields are non-private for testing\n+  static final String STATUS_CODE = \"grpc.status_code\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf694a04807b55b64c55b98f214c9b32a238dd4"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODMzMDU4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-395833058", "createdAt": "2020-04-18T00:12:09Z", "commit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDoxMjowOVrOGHgQWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozMjozMlrOGHgcyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMTY4OA==", "bodyText": "delete need to expose this as it is conditional anyway by marking package private (delete javadoc)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410521688", "createdAt": "2020-04-18T00:12:09Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjE5NQ==", "bodyText": "delete need to expose this as it is conditional anyway by marking package private (delete javadoc)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410522195", "createdAt": "2020-04-18T00:14:55Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjMyOA==", "bodyText": "is this actually nullable? or would this just be UrlSender by default?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410522328", "createdAt": "2020-04-18T00:15:40Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjUzNg==", "bodyText": "From brave. (PS you will very likely end up needing localIP override. implicit lookups are a nice default, but users set this to the well-known-address sometimes.\nhttps://github.com/openzipkin/brave/blob/master/brave/src/main/java/brave/Tracing.java#L163\n    /**\n     * Label of the remote node in the service graph, such as \"favstar\". Avoid names with variables\n     * or unique identifiers embedded. Defaults to \"unknown\".\n     *\n     * <p>This is a primary label for trace lookup and aggregation, so it should be intuitive and\n     * consistent. Many use a name from service discovery.\n     */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410522536", "createdAt": "2020-04-18T00:17:30Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.4.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjkyNA==", "bodyText": "consider adding a static factory method to simplify this.\nex\n  /**\n   * Builds a HTTP exporter for <a href=\"https://zipkin.io/zipkin-api/#/\">Zipkin V2</a> format.\n   * \n   * @param endpoint See {@link Builder#setEndpoint(String)}, ex. \"http://zipkinhost:9411/api/v2/spans\".\n   */\n  public static ZipkinExporterConfiguration create(String endpoint) {\n... newbuilder.endpoint().build()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410522924", "createdAt": "2020-04-18T00:19:47Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMzAzNA==", "bodyText": "you can delete the javadoc by making this package private..", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410523034", "createdAt": "2020-04-18T00:20:24Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjMyOA=="}, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMzA3NQ==", "bodyText": "same delete the javadoc by package private", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410523075", "createdAt": "2020-04-18T00:20:42Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMzI5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .setV2Url(\"\")\n          \n          \n            \n                    .setV2Url(\"\") // trick auto-value so that we can check if either this or the sender are set at build time", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410523292", "createdAt": "2020-04-18T00:22:07Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMzU0Nw==", "bodyText": "you should probably rename this as v2 url has more to do with the encoding (v1 can be passed!)\nalmost everything in the wild says \"endpoint\" rename to endpoint?\nfrom zipkin-reporter-java\n    /**\n     * No default. The POST URL for zipkin's <a href=\"https://zipkin.io/zipkin-api/#/\">v2 api</a>,\n     * usually \"http://zipkinhost:9411/api/v2/spans\"\n     */\n    // customizable so that users can re-map /api/v2/spans ex for browser-originated traces\n\nhttps://github.com/openzipkin/zipkin-reporter-java/blob/master/urlconnection/src/main/java/zipkin2/reporter/urlconnection/URLConnectionSender.java#L68", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410523547", "createdAt": "2020-04-18T00:23:33Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.4.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMzY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n          \n          \n            \n                 * <p>At least one of {@code V2Url} or {@code Sender} needs to be specified. If both {@code", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410523673", "createdAt": "2020-04-18T00:24:03Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.4.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNDAyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n          \n          \n            \n                 * <p>At least one of {@code V2Url} or {@code Sender} needs to be specified. If both {@code", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410524021", "createdAt": "2020-04-18T00:26:37Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.4.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * @param v2Url the Zipkin V2 URL.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setV2Url(String v2Url);\n+\n+    /**\n+     * Sets the Zipkin sender.\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNDM4NQ==", "bodyText": "Implements the client side of the span transport. Defaults to {@link UrlConnectionSender}.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410524385", "createdAt": "2020-04-18T00:29:08Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.4.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * @param v2Url the Zipkin V2 URL.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setV2Url(String v2Url);\n+\n+    /**\n+     * Sets the Zipkin sender.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNDY3OA==", "bodyText": "change to BytesEncoder<Span> as otherwise you'll break non-zipkin formats like https://github.com/openzipkin/zipkin-gcp/blob/master/sender-stackdriver/src/main/java/zipkin2/reporter/stackdriver/StackdriverEncoder.java\n(ack that they would make their own exporter, but anyway no need to narrow the type)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410524678", "createdAt": "2020-04-18T00:31:12Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.4.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * @param v2Url the Zipkin V2 URL.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setV2Url(String v2Url);\n+\n+    /**\n+     * Sets the Zipkin sender.\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * <p>Note: if you provide a {@link Sender} instance via this method, the {@link Sender#close()}\n+     * method will be called when the exporter is shut down.\n+     *\n+     * @param sender the Zipkin sender.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setSender(Sender sender);\n+\n+    /**\n+     * Sets the {@link SpanBytesEncoder}.\n+     *\n+     * @param encoder the {@code SpanBytesEncoder}.\n+     * @return this Builder instance\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setEncoder(SpanBytesEncoder encoder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNDcxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return this Builder instance\n          \n          \n            \n                 * @return this Builder instance\n          \n          \n            \n                 * @see SpanBytesEncoder", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410524711", "createdAt": "2020-04-18T00:31:29Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.4.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * @param v2Url the Zipkin V2 URL.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setV2Url(String v2Url);\n+\n+    /**\n+     * Sets the Zipkin sender.\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * <p>Note: if you provide a {@link Sender} instance via this method, the {@link Sender#close()}\n+     * method will be called when the exporter is shut down.\n+     *\n+     * @param sender the Zipkin sender.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setSender(Sender sender);\n+\n+    /**\n+     * Sets the {@link SpanBytesEncoder}.\n+     *\n+     * @param encoder the {@code SpanBytesEncoder}.\n+     * @return this Builder instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNDg3Mw==", "bodyText": "Controls the format used by the {@link Sender}. Defaults to  {@link SpanBytesEncoder#JSON_V2}", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r410524873", "createdAt": "2020-04-18T00:32:32Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.internal.Utils;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  /**\n+   * Returns the service name.\n+   *\n+   * @return the service name.\n+   * @since 0.4.0\n+   */\n+  public abstract String getServiceName();\n+\n+  /**\n+   * Returns the Zipkin V2 URL.\n+   *\n+   * @return the Zipkin V2 URL.\n+   * @since 0.4.0\n+   */\n+  public abstract String getV2Url();\n+\n+  /**\n+   * Returns the Zipkin sender.\n+   *\n+   * @return the Zipkin sender.\n+   * @since 0.4.0\n+   */\n+  @Nullable\n+  public abstract Sender getSender();\n+\n+  /**\n+   * Returns the {@link SpanBytesEncoder}.\n+   *\n+   * <p>Default is {@link SpanBytesEncoder#JSON_V2}.\n+   *\n+   * @return the {@code SpanBytesEncoder}\n+   * @since 0.4.0\n+   */\n+  public abstract SpanBytesEncoder getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setV2Url(\"\")\n+        .setEncoder(SpanBytesEncoder.JSON_V2);\n+  }\n+\n+  /**\n+   * Builder for {@link ZipkinExporterConfiguration}.\n+   *\n+   * @since 0.4.0\n+   */\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the service name.\n+     *\n+     * @param serviceName the service name.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setServiceName(String serviceName);\n+\n+    /**\n+     * Sets the Zipkin V2 URL, e.g.: \"http://127.0.0.1:9411/api/v2/spans\".\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * @param v2Url the Zipkin V2 URL.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setV2Url(String v2Url);\n+\n+    /**\n+     * Sets the Zipkin sender.\n+     *\n+     * <p>At least one of {@code V2Url} and {@code Sender} needs to be specified. If both {@code\n+     * V2Url} and {@code Sender} are set, {@code Sender} takes precedence.\n+     *\n+     * <p>Note: if you provide a {@link Sender} instance via this method, the {@link Sender#close()}\n+     * method will be called when the exporter is shut down.\n+     *\n+     * @param sender the Zipkin sender.\n+     * @return this Builder instance.\n+     * @since 0.4.0\n+     */\n+    public abstract Builder setSender(Sender sender);\n+\n+    /**\n+     * Sets the {@link SpanBytesEncoder}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4d315f47740d5a71e4ff49ad1184ca20f569e89"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NzY1NzM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-397765736", "createdAt": "2020-04-22T00:34:09Z", "commit": {"oid": "e03b0ed0740fa6b09309533c54e6ab760fd8cf7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDozNDowOVrOGJeKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDozNDowOVrOGJeKKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NDQ4OA==", "bodyText": "please don't add an empty endpoint", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r412584488", "createdAt": "2020-04-22T00:34:09Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.BytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. For http see here:\n+  // https://github.com/openzipkin/brave/blob/eee993f998ae57b08644cc357a6d478827428710/instrumentation/http/src/main/java/brave/http/HttpTags.java\n+  // For discussion about GRPC errors/tags, see here:  https://github.com/openzipkin/brave/pull/999\n+  // Note: these 3 fields are non-private for testing\n+  static final String GRPC_STATUS_CODE = \"grpc.status_code\";\n+  static final String GRPC_STATUS_DESCRIPTION = \"grpc.status_description\";\n+  static final String STATUS_ERROR = \"error\";\n+\n+  private static final Endpoint EMPTY_ENDPOINT = Endpoint.newBuilder().build();\n+\n+  private final BytesEncoder<Span> encoder;\n+  private final Sender sender;\n+\n+  ZipkinSpanExporter(BytesEncoder<Span> encoder, Sender sender) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+  }\n+\n+  static Span generateSpan(SpanData spanData) {\n+    Endpoint endpoint = EMPTY_ENDPOINT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03b0ed0740fa6b09309533c54e6ab760fd8cf7b"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NzY2MzI2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-397766326", "createdAt": "2020-04-22T00:36:24Z", "commit": {"oid": "e03b0ed0740fa6b09309533c54e6ab760fd8cf7b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDozNjoyNFrOGJeMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDo0NDo0MlrOGJeXoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NTE2Mg==", "bodyText": "use \n  \n    \n      opentelemetry-java/sdk/src/main/java/io/opentelemetry/sdk/resources/ResourceConstants.java\n    \n    \n         Line 32\n      in\n      6330901\n    \n    \n    \n    \n\n        \n          \n           public static final String SERVICE_NAME = \"service.name\"; \n        \n    \n  \n\n?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r412585162", "createdAt": "2020-04-22T00:36:24Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.BytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. For http see here:\n+  // https://github.com/openzipkin/brave/blob/eee993f998ae57b08644cc357a6d478827428710/instrumentation/http/src/main/java/brave/http/HttpTags.java\n+  // For discussion about GRPC errors/tags, see here:  https://github.com/openzipkin/brave/pull/999\n+  // Note: these 3 fields are non-private for testing\n+  static final String GRPC_STATUS_CODE = \"grpc.status_code\";\n+  static final String GRPC_STATUS_DESCRIPTION = \"grpc.status_description\";\n+  static final String STATUS_ERROR = \"error\";\n+\n+  private static final Endpoint EMPTY_ENDPOINT = Endpoint.newBuilder().build();\n+\n+  private final BytesEncoder<Span> encoder;\n+  private final Sender sender;\n+\n+  ZipkinSpanExporter(BytesEncoder<Span> encoder, Sender sender) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+  }\n+\n+  static Span generateSpan(SpanData spanData) {\n+    Endpoint endpoint = EMPTY_ENDPOINT;\n+    Map<String, AttributeValue> resourceAttributes = spanData.getResource().getAttributes();\n+    AttributeValue serviceNameValue = resourceAttributes.get(\"service.name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03b0ed0740fa6b09309533c54e6ab760fd8cf7b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NzkzNw==", "bodyText": "I understand where this is coming from and the discussions around it, but I still haven't heard any reason to believe \"service.name\" would be set by default. I suspect that's why the jaeger export was written to have a gear for this. \n  \n    \n      opentelemetry-java/exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java\n    \n    \n         Line 85\n      in\n      c32c776\n    \n    \n    \n    \n\n        \n          \n           .setServiceName(SERVICE_NAME) \n        \n    \n  \n\n\nRecall the main thing we've done recently is dodge a 2 arg factory method. To make data unqueryable is a more bitter pill than just deleting that discussion and having no factory methods. Basically if this is all about the single arg factory method, it really isn't worth it to cause damage.\nA different point.. the whole thing started about the choice between endpoint and a different sender. This is not a complex enough problem to make us want to damage the data model by removing something more important for. If it is, simply remove the endpoint arg to \"buy us\" a service name one.\nIf it isn't a problem to have three methods (one for service, one for endpoint shortcut and one for the sender that uses) do an overload? Ex we do similarly in our okhttp sender (also autovalue)\n    /**\n     * No default. The POST URL for zipkin's <a href=\"https://zipkin.io/zipkin-api/#/\">v2 api</a>,\n     * usually \"http://zipkinhost:9411/api/v2/spans\"\n     */\n    // customizable so that users can re-map /api/v2/spans ex for browser-originated traces\n    public Builder endpoint(String endpoint) {\n      if (endpoint == null) throw new NullPointerException(\"endpoint == null\");\n      HttpUrl parsed = HttpUrl.parse(endpoint);\n      if (parsed == null) throw new IllegalArgumentException(\"invalid post url: \" + endpoint);\n      return endpoint(parsed);\n    }\nThe reason I'm so concerned basically is I cannot see anything in this repo that sets this and we know lack thereof results in unqueryable and unaggregatable data. Using a dummy name which cannot be set at a level people are likely to control will result in an unfairly bad experience vs jaeger who have a setting. This is not worth waiting for complaints about (which likely would dump into zipkin's channel)\nRegardless, if we want to suggest to prioritize the \"service.name\", knowing we have a fallback, both should be in the README. When there's a normalized way to set the \"service.name\" in the span resource above this tier, both jaeger and zipkin exporters can get a README update.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r412587937", "createdAt": "2020-04-22T00:44:42Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.AttributeValue.Type;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import zipkin2.Endpoint;\n+import zipkin2.Span;\n+import zipkin2.codec.BytesEncoder;\n+import zipkin2.reporter.Sender;\n+\n+/**\n+ * This class was based on the OpenCensus zipkin exporter code at\n+ * https://github.com/census-instrumentation/opencensus-java/tree/c960b19889de5e4a7b25f90919d28b066590d4f0/exporters/trace/zipkin\n+ */\n+final class ZipkinSpanExporter implements SpanExporter {\n+\n+  private static final Logger logger = Logger.getLogger(ZipkinSpanExporter.class.getName());\n+\n+  // The naming follows Zipkin convention. For http see here:\n+  // https://github.com/openzipkin/brave/blob/eee993f998ae57b08644cc357a6d478827428710/instrumentation/http/src/main/java/brave/http/HttpTags.java\n+  // For discussion about GRPC errors/tags, see here:  https://github.com/openzipkin/brave/pull/999\n+  // Note: these 3 fields are non-private for testing\n+  static final String GRPC_STATUS_CODE = \"grpc.status_code\";\n+  static final String GRPC_STATUS_DESCRIPTION = \"grpc.status_description\";\n+  static final String STATUS_ERROR = \"error\";\n+\n+  private static final Endpoint EMPTY_ENDPOINT = Endpoint.newBuilder().build();\n+\n+  private final BytesEncoder<Span> encoder;\n+  private final Sender sender;\n+\n+  ZipkinSpanExporter(BytesEncoder<Span> encoder, Sender sender) {\n+    this.encoder = encoder;\n+    this.sender = sender;\n+  }\n+\n+  static Span generateSpan(SpanData spanData) {\n+    Endpoint endpoint = EMPTY_ENDPOINT;\n+    Map<String, AttributeValue> resourceAttributes = spanData.getResource().getAttributes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03b0ed0740fa6b09309533c54e6ab760fd8cf7b"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a72b688691d5fb6f60d7f913a1c4c528c92ea41", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5a72b688691d5fb6f60d7f913a1c4c528c92ea41", "committedDate": "2020-04-22T21:39:06Z", "message": "basic zipkin span exporter with some unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3dc967c89f7b636cacc4414a0a479df345833d", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3b3dc967c89f7b636cacc4414a0a479df345833d", "committedDate": "2020-04-22T21:39:06Z", "message": "add tests for the configuration class, hook up a create method and clean up other unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4cf5806032f65476340e2c31bce66e7cab19cb", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cb4cf5806032f65476340e2c31bce66e7cab19cb", "committedDate": "2020-04-22T21:39:06Z", "message": "add a README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c827f4bd6dd769c3b663547a06d0a40345a416b1", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c827f4bd6dd769c3b663547a06d0a40345a416b1", "committedDate": "2020-04-22T21:39:07Z", "message": "Update exporters/zipkin/README.md\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6524712cd40d39bbe34bdedcbce76c7ad3b6c2b", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e6524712cd40d39bbe34bdedcbce76c7ad3b6c2b", "committedDate": "2020-04-22T21:39:07Z", "message": "Update exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd891b4ed2e48751795d1ec3bd7c3dc51d863885", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dd891b4ed2e48751795d1ec3bd7c3dc51d863885", "committedDate": "2020-04-22T21:39:07Z", "message": "Update exporters/zipkin/README.md\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "935a0b6fcf41cdd6d0acd79474a073ed341f9b17", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/935a0b6fcf41cdd6d0acd79474a073ed341f9b17", "committedDate": "2020-04-22T21:39:07Z", "message": "apply PR review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fdc6ef4b7c5dda67a902a8f7ad814b69bbe13ac", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0fdc6ef4b7c5dda67a902a8f7ad814b69bbe13ac", "committedDate": "2020-04-22T21:39:07Z", "message": "Update build.gradle\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61131bbaaabb31ef131f986037decddf58b33599", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/61131bbaaabb31ef131f986037decddf58b33599", "committedDate": "2020-04-22T21:39:07Z", "message": "a little bit of cleanup from PR review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a72b234229f000552a696c9bb5f2de6a1c6b43f", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1a72b234229f000552a696c9bb5f2de6a1c6b43f", "committedDate": "2020-04-22T21:39:07Z", "message": "implement shutdown and provide javadoc about the closing of the Sender"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a3c6f1faf862dd582986e370dcb856b94c5c50", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b6a3c6f1faf862dd582986e370dcb856b94c5c50", "committedDate": "2020-04-22T21:39:07Z", "message": "don't set attributes if they're already set."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baee0086a8c405156da81e6eff21565157ff25f5", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/baee0086a8c405156da81e6eff21565157ff25f5", "committedDate": "2020-04-22T21:39:07Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a45183543da0a8b0d5ccfc3ff8957ed35f249d5", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a45183543da0a8b0d5ccfc3ff8957ed35f249d5", "committedDate": "2020-04-22T21:39:07Z", "message": "grpc tweaks, and an exception thrown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab0f7aa9c912e36293ed89f76d082e6d6f46d7ce", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab0f7aa9c912e36293ed89f76d082e6d6f46d7ce", "committedDate": "2020-04-22T21:39:07Z", "message": "Update the comment to be a little more accurate."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16f09076a26687872ce98fd323af12ae50afad0f", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/16f09076a26687872ce98fd323af12ae50afad0f", "committedDate": "2020-04-22T21:39:07Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5ede7975c3dd74e87f8181f3a9c618973be8e79", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b5ede7975c3dd74e87f8181f3a9c618973be8e79", "committedDate": "2020-04-22T21:39:07Z", "message": "Update exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86a4f464971d302834fec250de8fe9e177e38e62", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/86a4f464971d302834fec250de8fe9e177e38e62", "committedDate": "2020-04-22T21:39:07Z", "message": "Update exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4416c573c10c4e76f7c4c0795408411285582f", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5e4416c573c10c4e76f7c4c0795408411285582f", "committedDate": "2020-04-22T21:39:07Z", "message": "doc/naming cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b7d2a26ea937bfe8f4535c26ae897915a93e18", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24b7d2a26ea937bfe8f4535c26ae897915a93e18", "committedDate": "2020-04-22T21:39:07Z", "message": "simplify the builder, provide two simple factory methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c04e5c43e247d343ead9ed559376b1744c1b1f3", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0c04e5c43e247d343ead9ed559376b1744c1b1f3", "committedDate": "2020-04-22T21:39:07Z", "message": "strip out the endpoint logic and instead get it from the Resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca8d565b07593e71758b9dd75407d21b50dff35c", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ca8d565b07593e71758b9dd75407d21b50dff35c", "committedDate": "2020-04-22T21:39:07Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1a7c3799ac0a17a14098e5e87531ec549292ab9", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b1a7c3799ac0a17a14098e5e87531ec549292ab9", "committedDate": "2020-04-22T21:39:07Z", "message": "restore the serviceName option, but keep the Resource-based override."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8112b7a6dbe4cdb634c917da13facae524b7f207", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8112b7a6dbe4cdb634c917da13facae524b7f207", "committedDate": "2020-04-22T21:57:12Z", "message": "update for changes from master."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "528e204e5677045349ecb7615e4f4a6049f20f5b", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/528e204e5677045349ecb7615e4f4a6049f20f5b", "committedDate": "2020-04-22T15:42:02Z", "message": "restore the serviceName option, but keep the Resource-based override."}, "afterCommit": {"oid": "8112b7a6dbe4cdb634c917da13facae524b7f207", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8112b7a6dbe4cdb634c917da13facae524b7f207", "committedDate": "2020-04-22T21:57:12Z", "message": "update for changes from master."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjY4NjQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-398668646", "createdAt": "2020-04-22T23:52:37Z", "commit": {"oid": "8112b7a6dbe4cdb634c917da13facae524b7f207"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzo1MjozN1rOGKQjzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzo1MjozN1rOGKQjzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxMDI1NQ==", "bodyText": "fix the drift?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r413410255", "createdAt": "2020-04-22T23:52:37Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+# OpenTelemetry - Zipkin Span Exporter\n+\n+[![Javadocs][javadoc-image]][javadoc-url]\n+\n+This is an OpenTelemetry exporter that sends span data using the [io.zipkin.reporter2:zipkin-reporter](https://github.com/openzipkin/zipkin-reporter-java\") library.\n+\n+By default, this POSTs json in [Zipkin format](https://zipkin.io/zipkin-api/#/default/post_spans) to\n+a specified HTTP URL. This could be to a [Zipkin](https://zipkin.io) service, or anything that\n+consumes the same format.\n+\n+You can alternatively use other formats, such as protobuf, or override the `Sender` to use a non-HTTP transport, such as Kafka.\n+\n+## Configuration\n+\n+The Zipkin span exporter can be configured programmatically.\n+\n+An example of simple Zipkin exporter initialization. In this case\n+spans will be sent to a Zipkin endpoint running on `localhost`:\n+\n+```java\n+    ZipkinExporterConfiguration configuration =\n+        ZipkinExporterConfiguration.builder()\n+            .setV2Url(\"http://localhost/api/v2/spans\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8112b7a6dbe4cdb634c917da13facae524b7f207"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjY5MTYz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-398669163", "createdAt": "2020-04-22T23:54:10Z", "commit": {"oid": "8112b7a6dbe4cdb634c917da13facae524b7f207"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzo1NDoxMVrOGKQmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzo1NjowM1rOGKQo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxMDgyMQ==", "bodyText": "I really don't like factory methods like this personally as two string args can be easily permuted, but I don't feel like holding you up on another round as it isn't important enough and people can figure it out.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r413410821", "createdAt": "2020-04-22T23:54:11Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.Span;\n+import zipkin2.codec.BytesEncoder;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+import zipkin2.reporter.urlconnection.URLConnectionSender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  abstract String getServiceName();\n+\n+  abstract Sender getSender();\n+\n+  abstract BytesEncoder<Span> getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder} with defaults set to an \"unknown\" serviceName and using the\n+   * {@link SpanBytesEncoder#JSON_V2} encoder.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setEncoder(SpanBytesEncoder.JSON_V2)\n+        .setServiceName(\"unknown\");\n+  }\n+\n+  /**\n+   * Builds a HTTP exporter for <a href=\"https://zipkin.io/zipkin-api/#/\">Zipkin V2</a> format.\n+   *\n+   * @param endpoint The Zipkin endpoint URL, ex. \"http://zipkinhost:9411/api/v2/spans\".\n+   * @param serviceName The serviceName with which to identify Spans. See {@link\n+   *     Builder#setServiceName(String)} for details.\n+   */\n+  public static ZipkinExporterConfiguration create(String endpoint, String serviceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8112b7a6dbe4cdb634c917da13facae524b7f207"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxMTU0OA==", "bodyText": "I feel it is better to have someone forced to be add their own \"unknown\" vs do it for them. Similar to previous comments I'm not sure the value in creating a new way to make \"unknown\" and I think these factory methods will do just that. personally I would delete them and just have usage similar to jaeger in README asking them to indicate a fallback (default) service name.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#discussion_r413411548", "createdAt": "2020-04-22T23:56:03Z", "author": {"login": "codefromthecrypt"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.zipkin;\n+\n+import com.google.auto.value.AutoValue;\n+import javax.annotation.concurrent.Immutable;\n+import zipkin2.Span;\n+import zipkin2.codec.BytesEncoder;\n+import zipkin2.codec.SpanBytesEncoder;\n+import zipkin2.reporter.Sender;\n+import zipkin2.reporter.urlconnection.URLConnectionSender;\n+\n+/**\n+ * Configurations for {@link ZipkinSpanExporter}.\n+ *\n+ * @since 0.4.0\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ZipkinExporterConfiguration {\n+\n+  ZipkinExporterConfiguration() {}\n+\n+  abstract String getServiceName();\n+\n+  abstract Sender getSender();\n+\n+  abstract BytesEncoder<Span> getEncoder();\n+\n+  /**\n+   * Returns a new {@link Builder} with defaults set to an \"unknown\" serviceName and using the\n+   * {@link SpanBytesEncoder#JSON_V2} encoder.\n+   *\n+   * @return a {@code Builder}.\n+   * @since 0.4.0\n+   */\n+  public static Builder builder() {\n+    return new AutoValue_ZipkinExporterConfiguration.Builder()\n+        .setEncoder(SpanBytesEncoder.JSON_V2)\n+        .setServiceName(\"unknown\");\n+  }\n+\n+  /**\n+   * Builds a HTTP exporter for <a href=\"https://zipkin.io/zipkin-api/#/\">Zipkin V2</a> format.\n+   *\n+   * @param endpoint The Zipkin endpoint URL, ex. \"http://zipkinhost:9411/api/v2/spans\".\n+   * @param serviceName The serviceName with which to identify Spans. See {@link\n+   *     Builder#setServiceName(String)} for details.\n+   */\n+  public static ZipkinExporterConfiguration create(String endpoint, String serviceName) {\n+    return ZipkinExporterConfiguration.builder()\n+        .setEndpoint(endpoint)\n+        .setServiceName(serviceName)\n+        .build();\n+  }\n+\n+  /**\n+   * Builds a HTTP exporter for <a href=\"https://zipkin.io/zipkin-api/#/\">Zipkin V2</a> format.\n+   *\n+   * @param endpoint The Zipkin endpoint URL, ex. \"http://zipkinhost:9411/api/v2/spans\".\n+   */\n+  public static ZipkinExporterConfiguration create(String endpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8112b7a6dbe4cdb634c917da13facae524b7f207"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca4bf95496ce70046a0a53ccd283f58f79a0de0", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7ca4bf95496ce70046a0a53ccd283f58f79a0de0", "committedDate": "2020-04-23T15:27:29Z", "message": "remove factory methods on the configuration, and update the README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fee364ee4d14c5e740b817bd3d1ba91f6f4539c", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5fee364ee4d14c5e740b817bd3d1ba91f6f4539c", "committedDate": "2020-04-23T15:31:41Z", "message": "update the docs to match the requirements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c660d99d6b4dd1dba81192f4c87061d49f39a7af", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c660d99d6b4dd1dba81192f4c87061d49f39a7af", "committedDate": "2020-04-23T15:32:39Z", "message": "fix a typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "813fb95bd0ca69eb28c22e58012fde6a63c08463", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/813fb95bd0ca69eb28c22e58012fde6a63c08463", "committedDate": "2020-04-23T22:23:23Z", "message": "tiny re-arrange of javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTQ5ODky", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-399549892", "createdAt": "2020-04-23T23:40:49Z", "commit": {"oid": "813fb95bd0ca69eb28c22e58012fde6a63c08463"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "574542e777234743e5ad2a456b94258a41d05ef2", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/574542e777234743e5ad2a456b94258a41d05ef2", "committedDate": "2020-04-24T17:51:29Z", "message": "Add zipkin to the top-level docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDE4Mjgw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-401418280", "createdAt": "2020-04-28T00:29:02Z", "commit": {"oid": "574542e777234743e5ad2a456b94258a41d05ef2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjMwODEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1106#pullrequestreview-404230811", "createdAt": "2020-05-01T15:42:29Z", "commit": {"oid": "574542e777234743e5ad2a456b94258a41d05ef2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2962, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}