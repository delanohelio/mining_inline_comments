{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzQ1NjE2", "number": 1284, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMjo1M1rOEAspuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozNDozN1rOECniUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTY3MDMzOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMjo1M1rOGcI_Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODoxMTozNFrOGcnJUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw==", "bodyText": "this is probably a bad example of how to use a counter. Counters are intended to be used as a part of a \"synchronous\" measurement, associated with a span context. Measuring jvm memory usage is a better use-case for an Observer instrument.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432160543", "createdAt": "2020-05-28T22:32:53Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    DoubleCounter jvmUsageCounter = sampleMeter.doubleCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwOTYzNg==", "bodyText": "@jkwatson maybe u have smth on mind to count wia double counter?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432609636", "createdAt": "2020-05-29T16:48:29Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    DoubleCounter jvmUsageCounter = sampleMeter.doubleCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNjc1NA==", "bodyText": "I don't. I'm not sure what a use-case is for counting things that are non-integer valued. Maybe total number of kilobytes processed in some kind of web request?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432616754", "createdAt": "2020-05-29T16:58:47Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    DoubleCounter jvmUsageCounter = sampleMeter.doubleCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNzUxOQ==", "bodyText": "but they are also int", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432627519", "createdAt": "2020-05-29T17:18:11Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    DoubleCounter jvmUsageCounter = sampleMeter.doubleCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyODcxOQ==", "bodyText": "you can have fractional kb, though, right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432628719", "createdAt": "2020-05-29T17:20:35Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    DoubleCounter jvmUsageCounter = sampleMeter.doubleCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NDY3Mw==", "bodyText": "ok i got smth on my mind", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432654673", "createdAt": "2020-05-29T18:11:34Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    DoubleCounter jvmUsageCounter = sampleMeter.doubleCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTY3MTc1OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMzozM1rOGcJAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMzozM1rOGcJAAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDc3MQ==", "bodyText": "Please add Javadoc explaining the purpose of the example.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432160771", "createdAt": "2020-05-28T22:33:33Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTcyNzA0OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1OTo0MFrOGcJhuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1OTo0MFrOGcJhuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2OTQwMA==", "bodyText": "I think it would be helpful to have the meter name reflect reommended meter naming standards, which would mean this should probably be something like \"io.opentelemetry.example.metrics\" with a version of 0.5, maybe", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432169400", "createdAt": "2020-05-28T22:59:40Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjMwNjA0OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNToxNzozMFrOGcPDzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNToxNzozMFrOGcPDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MDA0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"free\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432260046", "createdAt": "2020-05-29T05:17:30Z", "author": {"login": "thisthat"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")\n+        .setUnit(\"byte\")\n+        .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+          @Override\n+          public void update(ResultLongValueObserver result) {\n+            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"free\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDUxMjcyOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowMDoyOFrOGck5Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowMDoyOFrOGck5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzc1OA==", "bodyText": "Same comment about using a synchronous instrument for doing what should be an asynchronous measurement. We should make sure our examples are using the APIs idiomatically. In general, synchronous instruments should be used to instrument code executing within a span context.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432617758", "createdAt": "2020-05-29T17:00:28Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class LongMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    LongCounter jvmUsageCounter = sampleMeter.longCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY1Mzc2OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1OTo1OVrOGcwBVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMjozMzoxNlrOGcyVOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDA4NA==", "bodyText": "This should be renamed to LongCounterExample, and it still needs to have a span context surrounding the usage of the counter, to be idiomatically correct.\nThe javadoc should definitely be more descriptive, and probably include a reference to the relevant section of the metric specifications. It should explain under what circumstances it is appropriate to use a LongCounter, and explain what \"bound\" means. My expectation is that a newbie who is looking at this code will see an idiomatic example of how to use the instrument being demonstrated and understand why and when they would use such an instrument.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432800084", "createdAt": "2020-05-30T01:59:59Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import java.util.Random;\n+\n+/**\n+ * Long meter example with bound counter\n+ */\n+public class LongMeterExample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e3754e990cfe750a10b9df3b7102d9f9399746a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzNzk0NQ==", "bodyText": "@jkwatson gotch you", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432837945", "createdAt": "2020-05-30T12:33:16Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import java.util.Random;\n+\n+/**\n+ * Long meter example with bound counter\n+ */\n+public class LongMeterExample {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDA4NA=="}, "originalCommit": {"oid": "8e3754e990cfe750a10b9df3b7102d9f9399746a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTAxODEyOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMjowOFrOGdOJ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDo0NDozOFrOGdZeUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ==", "bodyText": "I think you missed my point here. The javadoc should explain what the example is trying to teach. We aren't trying to teach people how to traverse directory structures. We're trying to teach people how to use a Counter, a LongCounter in particular.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433293791", "createdAt": "2020-06-01T15:12:08Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NjA1Mw==", "bodyText": "That example trying to show usage of LongCounter, so as i understand u JD will look like\nExample of using LongCounter and BoundCounters to count searched directories.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433356053", "createdAt": "2020-06-01T16:43:33Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ=="}, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MDIwMQ==", "bodyText": "I would also include a link to the relevant specification, and a link to the javadoc for LongCounter class itself, if possible.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433360201", "createdAt": "2020-06-01T16:51:19Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ=="}, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ3OTI0OA==", "bodyText": "Applied suggestions, also added span status and catch block", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433479248", "createdAt": "2020-06-01T20:44:38Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ=="}, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTAyMDEyOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMjozNlrOGdOLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo1MjozMFrOGdSPlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA==", "bodyText": "this is a strange label. Why would this be a useful label for this process?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433294100", "createdAt": "2020-06-01T15:12:36Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"directory\", \"searched\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0MDkzNA==", "bodyText": "i was thinking to count number of directories that was searched", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433340934", "createdAt": "2020-06-01T16:16:16Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"directory\", \"searched\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA=="}, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0MTI1OQ==", "bodyText": "Shouldn't it be like Directories searched 5 with this label?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433341259", "createdAt": "2020-06-01T16:16:53Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"directory\", \"searched\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA=="}, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MDc5MA==", "bodyText": "but, the name of the instrument already has this same information in it, so why would you add a redundant label? You might add a bound label for the disk volume, or the host name, or something that would not just repeat the information that is in the instrument name.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433360790", "createdAt": "2020-06-01T16:52:30Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"directory\", \"searched\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA=="}, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTAyMjg4OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMzoxOVrOGdOMwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMzoxOVrOGdOMwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDUyOA==", "bodyText": "As above, the javadoc should explain what we're trying to teach people with the example.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433294528", "createdAt": "2020-06-01T15:13:19Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * In this example we are setting callback to get asynchronously jvm memory usage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDM5Mjg1OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjoxNFrOGdbsQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjoxNFrOGdbsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTU4Ng==", "bodyText": "rename to DoubleCounterExample", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433515586", "createdAt": "2020-06-01T22:06:14Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleMeterExample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0f327f6549ff3c1274bacd526a90010cc75403"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDM5Mzc5OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjo0MFrOGdbs2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjo0MFrOGdbs2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTczNg==", "bodyText": "this usage should also be in a Span scope, like in the LongCounterExample.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433515736", "createdAt": "2020-06-01T22:06:40Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")\n+        .build();\n+    Long timeStart = System.currentTimeMillis();\n+    superLongMethod();\n+    Long timeEnd = System.currentTimeMillis();\n+    Double seconds = (timeEnd.doubleValue() - timeStart.doubleValue()) / 1000;\n+    timeCounter.add(seconds, \"someWork\", \"execution time\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0f327f6549ff3c1274bacd526a90010cc75403"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzgwODA2OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1NToyMlrOGd9PIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1NToyMlrOGd9PIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NTE4Ng==", "bodyText": "Move the creation of the counter up out of the try block. We only need to use the counter inside a span context, not create it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434065186", "createdAt": "2020-06-02T17:55:22Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+          .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+      DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+          .setDescription(\"should measure some method execution time\")\n+          .setUnit(\"second\")\n+          .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e931fcca20006fadcbb07c4346feb0643616e3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzY3MTg4OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjowODowOVrOGejHAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoxMTozNVrOGe6o6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng==", "bodyText": "Is a counter really the right instrument type to use here?\nI thought this was only used for things that you actually count, like, the number of requests, errors or total bytes written or something like this. In particular, things where one would be interested in the total sum only and not distinct values or their min/max. Of course one could argue that measuring time entails counting seconds but I thought the ValueRecorder would be the correct instrument to record such distinct measurements.\nThe spec even mentions:\n\nExample uses for ValueRecorder that are non-additive:\n\ncapture any kind of timing information\n\n\nAlso the example in the Javadoc even demonstrates how it's used to report timings:\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434685696", "createdAt": "2020-06-03T16:08:09Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMDY2Mw==", "bodyText": "@arminru you are correct, also I think our examples should try to follow these recommendations.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434700663", "createdAt": "2020-06-03T16:30:40Z", "author": {"login": "bogdandrutu"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODI1OQ==", "bodyText": "Do we know what a DoubleCounter would be used to count? Seems like an odd thing to count fractional stuff.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434718259", "createdAt": "2020-06-03T16:58:08Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNDAyNA==", "bodyText": "@jkwatson Good question. If one would use MB as a unit of bytes written to disk, for example, fractions would make sense -- but it would probably make even more sense to use KB or B if one is interested in such a precision.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434724024", "createdAt": "2020-06-03T17:08:05Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0MjcwNA==", "bodyText": "I wonder, if we don't have a good use-case for it, if we should consider removing it from the API.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434742704", "createdAt": "2020-06-03T17:40:25Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3MTIxMA==", "bodyText": "@jkwatson Fair point. I think it makes sense to consider it but it might only be us not being able to come up with a good example. The example in DoubleCounter's Javadoc is slightly contrived but I could imagine that there are reasonable use cases for it out in the wild. Apart from that, removing it might be surprising to users for the lack of symmetry in the API then.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435071210", "createdAt": "2020-06-04T08:11:35Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzY3Mzg5OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjowODozOVrOGejITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjowODozOVrOGejITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NjAzMQ==", "bodyText": "Leftover, this example is not about finding any files.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434686031", "createdAt": "2020-06-03T16:08:39Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")\n+        .build();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      Long timeStart = System.currentTimeMillis();\n+      superLongMethod();\n+      Long timeEnd = System.currentTimeMillis();\n+      Double seconds = (timeEnd.doubleValue() - timeStart.doubleValue()) / 1000;\n+      //we can add values to counter without addition label key-values pairs\n+      timeCounter.add(seconds);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while finding file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTkyMDY4OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoyNzo0MFrOGe5KGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoyNzo0MFrOGe5KGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0NjkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n          \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extension.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435046936", "createdAt": "2020-06-04T07:27:40Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDAzNjk3OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODowMTo0NVrOGe6S_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTowMjozOFrOGfKWtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NTU5Ng==", "bodyText": "Actually you don't use the BoundDoubleCounter or labels here at all, or am I missing something? \ud83d\ude05\nThe file extension would actually make a great metric dimension/label in your example.\ndisk_space_used[file_extension=dll]:   5 MB\ndisk_space_used[file_extension=pdf]:   1 MB\ndisk_space_used[file_extension=png]: 710 MB\n\nand so on.\nWhat do you think? \ud83d\ude42", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435065596", "createdAt": "2020-06-04T08:01:45Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0MTg4NQ==", "bodyText": "Sounds good, when i will be at home i'll try to implement it", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435141885", "createdAt": "2020-06-04T10:09:10Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NTU5Ng=="}, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyODY5NA==", "bodyText": "@arminru when u have a time, pls take a look", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435328694", "createdAt": "2020-06-04T15:02:38Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NTU5Ng=="}, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDA0MjYwOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODowMzoyM1rOGe6Whw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODowMzoyM1rOGe6Whw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NjUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .setDescription(\"should count space used by file extension\")\n          \n          \n            \n                  .setDescription(\"Counts disk space used by file extension.\")\n          \n      \n    \n    \n  \n\nIt actually does so no need for the subjunctive \ud83d\ude09", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435066503", "createdAt": "2020-06-04T08:03:23Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView().getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"should count space used by file extension\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDA0NDQ5OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODowNDowM1rOGe6X2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowNjowN1rOGe-2XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2Njg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      methodCallCounter.add((double) file.length() / 1024);\n          \n          \n            \n                      methodCallCounter.add((double) file.length() / 1_000_000);\n          \n      \n    \n    \n  \n\nFile.length() returns the size in Bytes but you specified .setUnit(\"MB\") above.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435066840", "createdAt": "2020-06-04T08:04:03Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView().getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"should count space used by file extension\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      example.calculateSpaceUsedByFilesWithExtension(\"dll\", directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(String extension, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        if (file.getName().endsWith(\".\" + extension)) {\n+          //we can add values to counter without addition label key-values pairs\n+          methodCallCounter.add((double) file.length() / 1024);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0MDE4OA==", "bodyText": "True :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435140188", "createdAt": "2020-06-04T10:06:07Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView().getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"should count space used by file extension\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      example.calculateSpaceUsedByFilesWithExtension(\"dll\", directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(String extension, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        if (file.getName().endsWith(\".\" + extension)) {\n+          //we can add values to counter without addition label key-values pairs\n+          methodCallCounter.add((double) file.length() / 1024);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2Njg0MA=="}, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTczMzEyOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToxOToyNFrOGfLGpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToxOToyNFrOGfLGpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MDk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final DoubleCounter methodCallCounter = sampleMeter\n          \n          \n            \n              private static final DoubleCounter diskSpaceCounter = sampleMeter\n          \n      \n    \n    \n  \n\nyou're no longer counting method calls ;-)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435340966", "createdAt": "2020-06-04T15:19:24Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTczNDM2OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToxOTo0MFrOGfLHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToxOTo0MFrOGfLHYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTE1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        methodCallCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);\n          \n          \n            \n                        diskSpaceCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435341153", "createdAt": "2020-06-04T15:19:40Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"Counts disk space used by file extension.\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      List<String> extensionsToFind = new ArrayList<>();\n+      extensionsToFind.add(\"dll\");\n+      extensionsToFind.add(\"png\");\n+      extensionsToFind.add(\"exe\");\n+      example.calculateSpaceUsedByFilesWithExtension(extensionsToFind, directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(List<String> extensions, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        for (String extension : extensions) {\n+          if (file.getName().endsWith(\".\" + extension)) {\n+            //we can add values to counter without addition label key-values pairs\n+            methodCallCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTczODYzOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMDozN1rOGfLKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMDozN1rOGfLKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTg2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n          \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");\n          \n      \n    \n    \n  \n\nYou would usually supply the same library version as for the meter below.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435341860", "createdAt": "2020-06-04T15:20:37Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc0Njc0OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMjoyN1rOGfLPYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMjoyN1rOGfLPYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MzIwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //we can add values to counter without addition label key-values pairs\n          \n          \n            \n                        // we can add values to the counter for specific labels\n          \n          \n            \n                        // the label key is \"file_extension\", its value is the name of the extension", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343201", "createdAt": "2020-06-04T15:22:27Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"Counts disk space used by file extension.\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      List<String> extensionsToFind = new ArrayList<>();\n+      extensionsToFind.add(\"dll\");\n+      extensionsToFind.add(\"png\");\n+      extensionsToFind.add(\"exe\");\n+      example.calculateSpaceUsedByFilesWithExtension(extensionsToFind, directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(List<String> extensions, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        for (String extension : extensions) {\n+          if (file.getName().endsWith(\".\" + extension)) {\n+            //we can add values to counter without addition label key-values pairs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc0ODA2OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMjo0NVrOGfLQNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMjo0NVrOGfLQNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MzQxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n          \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343415", "createdAt": "2020-06-04T15:22:45Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc1MDIzOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMzoxMFrOGfLRhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMzoxMFrOGfLRhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0Mzc1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n          \n          \n            \n             * Example of using {@link DoubleCounter} to count disk space used by files with specific extensions.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343750", "createdAt": "2020-06-04T15:23:10Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc1NzUwOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNDo0MFrOGfLWAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNDo0MFrOGfLWAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final LongCounter methodCallCounter = sampleMeter\n          \n          \n            \n              private static final LongCounter directoryCounter = sampleMeter", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435344898", "createdAt": "2020-06-04T15:24:40Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc1ODg5OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNTowNVrOGfLXFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNTowNVrOGfLXFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NTE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final BoundLongCounter directoryCounter = methodCallCounter\n          \n          \n            \n              private static final BoundLongCounter homeDirectoryCounter = directoryCounter", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435345175", "createdAt": "2020-06-04T15:25:05Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc2NDI3OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjoxMFrOGfLadQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjoxMFrOGfLadQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjAzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      directoryCounter.add(1);\n          \n          \n            \n                      // we don't have to specify the value for the \"root directory\" label again\n          \n          \n            \n                      // since this is a BoundLongCounter with pre-set labels\n          \n          \n            \n                      homeDirectoryCounter.add(1);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435346037", "createdAt": "2020-06-04T15:26:10Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"root directory\", homeDirectory.getName());\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"workflow\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    LongCounterExample example = new LongCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      directoryCounter.add(1);// count root directory\n+      example.findFile(\"file_to_find.txt\", homeDirectory);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while finding file\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void findFile(String name, File directory) {\n+    File[] files = directory.listFiles();\n+    System.out.println(\"Currently looking at \" + directory.getAbsolutePath());\n+    if (files != null) {\n+      for (File file : files) {\n+        if (file.isDirectory()) {\n+          directoryCounter.add(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc2Njc5OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjo0MFrOGfLcAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjo0MFrOGfLcAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  directoryCounter.add(1);// count root directory\n          \n          \n            \n                  homeDirectoryCounter.add(1); // count root directory", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435346433", "createdAt": "2020-06-04T15:26:40Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"root directory\", homeDirectory.getName());\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"workflow\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    LongCounterExample example = new LongCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      directoryCounter.add(1);// count root directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc3MTg2OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNzo0NFrOGfLfIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNzo0NFrOGfLfIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NzIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .setDescription(\"should count directories searched\")\n          \n          \n            \n                  .setDescription(\"Counts directories accessed while searching for files.\")", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435347235", "createdAt": "2020-06-04T15:27:44Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc4NDQzOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozMDo0M1rOGfLnKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozMDo0M1rOGfLnKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0OTI4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .setDescription(\"should meter jvm memory usage\")\n          \n          \n            \n                    .setDescription(\"Reports JVM memory usage.\")", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435349289", "createdAt": "2020-06-04T15:30:43Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * Example of using {@link LongValueObserver} to measure execution time of method.\n+ * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n+ * Useful for expensive measurements that would be wastefully to calculate each request.\n+ */\n+public class LongValueObserverExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTgwMzcxOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozNDozN1rOGfLzMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTo1MTozMFrOGfMn8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MjM3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"kind\", \"total\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().freeMemory(), \"kind\", \"free\");\n          \n      \n    \n    \n  \n\nTo demonstrate the advantage of using labels. Otherwise it doesn't really show why you would use them at all here.\nOne might prefer to report these as two separate metrics rather than metric dimensions, however.\n@bogdandrutu, you're more experienced with metrics. WDYT?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435352371", "createdAt": "2020-06-04T15:34:37Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * Example of using {@link LongValueObserver} to measure execution time of method.\n+ * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n+ * Useful for expensive measurements that would be wastefully to calculate each request.\n+ */\n+public class LongValueObserverExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")\n+        .setUnit(\"byte\")\n+        .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+          @Override\n+          public void update(ResultLongValueObserver result) {\n+            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2MzM3Mw==", "bodyText": "we can throw away labels from this example if it misleading", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435363373", "createdAt": "2020-06-04T15:47:41Z", "author": {"login": "DotSpy"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * Example of using {@link LongValueObserver} to measure execution time of method.\n+ * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n+ * Useful for expensive measurements that would be wastefully to calculate each request.\n+ */\n+public class LongValueObserverExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")\n+        .setUnit(\"byte\")\n+        .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+          @Override\n+          public void update(ResultLongValueObserver result) {\n+            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MjM3MQ=="}, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NTg3NQ==", "bodyText": "You already demonstrate how to use them with the file extensions, so dropping them here and reporting only total or free would be fine, I guess. In this case I'd name the metric jvm.memory.total or jvm.memory.free to specify which kind memory is being reported.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435365875", "createdAt": "2020-06-04T15:51:30Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * Example of using {@link LongValueObserver} to measure execution time of method.\n+ * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n+ * Useful for expensive measurements that would be wastefully to calculate each request.\n+ */\n+public class LongValueObserverExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")\n+        .setUnit(\"byte\")\n+        .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+          @Override\n+          public void update(ResultLongValueObserver result) {\n+            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MjM3MQ=="}, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 740, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}