{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNDExMzc4", "number": 1792, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo0NTo0NFrOEtE4uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo0NTo0NFrOEtE4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzAxNDMzOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/async_processor/src/main/java/io/opentelemetry/sdk/extensions/trace/export/DisruptorEventQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo0NTo0NFrOHgqf9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxNTowMlrOHgut3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxMjc4OQ==", "bodyText": "This seems a bit dirty, so if someone can suggest a better solution that would be good.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1792#discussion_r504012789", "createdAt": "2020-10-13T14:45:44Z", "author": {"login": "Oberon00"}, "path": "sdk_extensions/async_processor/src/main/java/io/opentelemetry/sdk/extensions/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -84,14 +87,14 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  void enqueueStartEvent(ReadWriteSpan span) {\n+  void enqueueStartEvent(ReadWriteSpan span, Context parentContext) {\n     if (isShutdown) {\n       if (!loggedShutdownMessage.getAndSet(true)) {\n         logger.info(\"Attempted to enqueue start event after Disruptor shutdown.\");\n       }\n       return;\n     }\n-    enqueue(EventType.ON_START, span, null);\n+    enqueue(EventType.ON_START, new AbstractMap.SimpleImmutableEntry<>(span, parentContext), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670f567fca1d61453001357aa7c313cabab73a97"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MTg4Ng==", "bodyText": "I think it's fine for now, although agree it's ugly. I would like to revisit the way the disruptor messages are built at some point, since I ran into difficulties when trying to work with it a few months ago, as well. I think the best answer might be to create a Tuple to hold the message data, or maybe split the message types so they can be more easily customized.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1792#discussion_r504081886", "createdAt": "2020-10-13T16:15:02Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/async_processor/src/main/java/io/opentelemetry/sdk/extensions/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -84,14 +87,14 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  void enqueueStartEvent(ReadWriteSpan span) {\n+  void enqueueStartEvent(ReadWriteSpan span, Context parentContext) {\n     if (isShutdown) {\n       if (!loggedShutdownMessage.getAndSet(true)) {\n         logger.info(\"Attempted to enqueue start event after Disruptor shutdown.\");\n       }\n       return;\n     }\n-    enqueue(EventType.ON_START, span, null);\n+    enqueue(EventType.ON_START, new AbstractMap.SimpleImmutableEntry<>(span, parentContext), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxMjc4OQ=="}, "originalCommit": {"oid": "670f567fca1d61453001357aa7c313cabab73a97"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2081, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}