{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMzY2NDQy", "number": 1432, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo0MzoyN1rOEP-SMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNzowOVrOEQR1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTg0NTYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo0MzoyN1rOGz5aOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1Njo1MlrOG0Rbhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MTE2MQ==", "bodyText": "This seems to not be thread safe. if the framework consumes the string set in the setter on a different thread it looks like we may have a problem", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1432#discussion_r457071161", "createdAt": "2020-07-20T05:43:27Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -98,7 +99,7 @@\n     spanContext.getSpanId().copyLowerBase16To(chars, SPAN_ID_OFFSET);\n     chars[TRACE_OPTION_OFFSET - 1] = TRACEPARENT_DELIMITER;\n     spanContext.getTraceFlags().copyLowerBase16To(chars, TRACE_OPTION_OFFSET);\n-    setter.set(carrier, TRACE_PARENT, new String(chars));\n+    setter.set(carrier, TRACE_PARENT, new String(chars, 0, TRACEPARENT_HEADER_SIZE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3781498d153724d38712a1b24cffe5e06faddb7c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNjkwNg==", "bodyText": "String constructor always copies input arrays so it should be ok. The extra copy is why recyclable buffers is a popular pattern.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1432#discussion_r457416906", "createdAt": "2020-07-20T14:05:49Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -98,7 +99,7 @@\n     spanContext.getSpanId().copyLowerBase16To(chars, SPAN_ID_OFFSET);\n     chars[TRACE_OPTION_OFFSET - 1] = TRACEPARENT_DELIMITER;\n     spanContext.getTraceFlags().copyLowerBase16To(chars, TRACE_OPTION_OFFSET);\n-    setter.set(carrier, TRACE_PARENT, new String(chars));\n+    setter.set(carrier, TRACE_PARENT, new String(chars, 0, TRACEPARENT_HEADER_SIZE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MTE2MQ=="}, "originalCommit": {"oid": "3781498d153724d38712a1b24cffe5e06faddb7c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDcxMA==", "bodyText": "Makes sense, didn't see the extra copy but makes sense.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1432#discussion_r457464710", "createdAt": "2020-07-20T14:56:52Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -98,7 +99,7 @@\n     spanContext.getSpanId().copyLowerBase16To(chars, SPAN_ID_OFFSET);\n     chars[TRACE_OPTION_OFFSET - 1] = TRACEPARENT_DELIMITER;\n     spanContext.getTraceFlags().copyLowerBase16To(chars, TRACE_OPTION_OFFSET);\n-    setter.set(carrier, TRACE_PARENT, new String(chars));\n+    setter.set(carrier, TRACE_PARENT, new String(chars, 0, TRACEPARENT_HEADER_SIZE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MTE2MQ=="}, "originalCommit": {"oid": "3781498d153724d38712a1b24cffe5e06faddb7c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTA0NzUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/TemporaryBuffers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNjozN1rOG0V7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNjozN1rOG0V7Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODMzNA==", "bodyText": "I'm not in love with this name, but it's fine for now. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1432#discussion_r457538334", "createdAt": "2020-07-20T16:26:37Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/TemporaryBuffers.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+/**\n+ * {@link ThreadLocal} buffers for use when creating new derived objects such as {@link String}s.\n+ * These buffers are reused within a single thread - it is _not safe_ to use the buffer to generate\n+ * multiple derived objects at the same time because the same memory will be used. In general, you\n+ * should get a temporary buffer, fill it with data, and finish by converting into the derived\n+ * object within the same method to avoid multiple usages of the same buffer.\n+ */\n+public final class TemporaryBuffers {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3781498d153724d38712a1b24cffe5e06faddb7c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTA0OTYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/TemporaryBuffers.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNzowOVrOG0V8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMzowNzozOVrOG0iUJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODY5Mw==", "bodyText": "Any thoughts to an optional boolean to zero-out the buffer before handing it out?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1432#discussion_r457538693", "createdAt": "2020-07-20T16:27:09Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/TemporaryBuffers.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+/**\n+ * {@link ThreadLocal} buffers for use when creating new derived objects such as {@link String}s.\n+ * These buffers are reused within a single thread - it is _not safe_ to use the buffer to generate\n+ * multiple derived objects at the same time because the same memory will be used. In general, you\n+ * should get a temporary buffer, fill it with data, and finish by converting into the derived\n+ * object within the same method to avoid multiple usages of the same buffer.\n+ */\n+public final class TemporaryBuffers {\n+\n+  private static final ThreadLocal<char[]> CHAR_ARRAY = new ThreadLocal<>();\n+\n+  /**\n+   * A {@link ThreadLocal} {@code char[]} of size {@code len}. Take care when using a large value of\n+   * {@code len} as this buffer will remain for the lifetime of the thread. The returned buffer will\n+   * not be zeroed and may be larger than the requested size, you must make sure to fill the entire\n+   * content to the desired value and set the length explicitly when converting to a {@link String}.\n+   */\n+  public static char[] chars(int len) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3781498d153724d38712a1b24cffe5e06faddb7c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTYwMQ==", "bodyText": "I think in general that will remove the majority of the performance benefit. The intention of the temporary buffers is to only use in cases where the filling is complete or controlled. If we come up with a use case for the Boolean though let's add later", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1432#discussion_r457735601", "createdAt": "2020-07-20T22:50:55Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/TemporaryBuffers.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+/**\n+ * {@link ThreadLocal} buffers for use when creating new derived objects such as {@link String}s.\n+ * These buffers are reused within a single thread - it is _not safe_ to use the buffer to generate\n+ * multiple derived objects at the same time because the same memory will be used. In general, you\n+ * should get a temporary buffer, fill it with data, and finish by converting into the derived\n+ * object within the same method to avoid multiple usages of the same buffer.\n+ */\n+public final class TemporaryBuffers {\n+\n+  private static final ThreadLocal<char[]> CHAR_ARRAY = new ThreadLocal<>();\n+\n+  /**\n+   * A {@link ThreadLocal} {@code char[]} of size {@code len}. Take care when using a large value of\n+   * {@code len} as this buffer will remain for the lifetime of the thread. The returned buffer will\n+   * not be zeroed and may be larger than the requested size, you must make sure to fill the entire\n+   * content to the desired value and set the length explicitly when converting to a {@link String}.\n+   */\n+  public static char[] chars(int len) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODY5Mw=="}, "originalCommit": {"oid": "3781498d153724d38712a1b24cffe5e06faddb7c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MTM0OQ==", "bodyText": "fair enough. I was just thinking that in cases where the zeroing out was required, this class could do it more optimally in the initial request, since it knows it's a new char[] being created. No need for it now, though!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1432#discussion_r457741349", "createdAt": "2020-07-20T23:07:39Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/TemporaryBuffers.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+/**\n+ * {@link ThreadLocal} buffers for use when creating new derived objects such as {@link String}s.\n+ * These buffers are reused within a single thread - it is _not safe_ to use the buffer to generate\n+ * multiple derived objects at the same time because the same memory will be used. In general, you\n+ * should get a temporary buffer, fill it with data, and finish by converting into the derived\n+ * object within the same method to avoid multiple usages of the same buffer.\n+ */\n+public final class TemporaryBuffers {\n+\n+  private static final ThreadLocal<char[]> CHAR_ARRAY = new ThreadLocal<>();\n+\n+  /**\n+   * A {@link ThreadLocal} {@code char[]} of size {@code len}. Take care when using a large value of\n+   * {@code len} as this buffer will remain for the lifetime of the thread. The returned buffer will\n+   * not be zeroed and may be larger than the requested size, you must make sure to fill the entire\n+   * content to the desired value and set the length explicitly when converting to a {@link String}.\n+   */\n+  public static char[] chars(int len) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODY5Mw=="}, "originalCommit": {"oid": "3781498d153724d38712a1b24cffe5e06faddb7c"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1499, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}