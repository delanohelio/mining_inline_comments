{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDM5MDE0", "number": 856, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToxODo0MlrODfqtvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToxODo0MlrODfqtvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTMyMjg3OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToxODo0MlrOFpgX4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTowMTowN1rOFpjZqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NjMzOQ==", "bodyText": "add a comment before this like //fill up the buffer with metrics", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/856#discussion_r379066339", "createdAt": "2020-02-13T19:18:42Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -0,0 +1,98 @@\n+# OpenTelemetry metrics export framework\n+\n+The metrics world split between \"pushed based\" and \"pull based\" libraries and backends, and because\n+of this, the OpenTelemetry export framework needs to address all the possible combinations.\n+\n+To achieve the support for \"pushed based\" and \"pull based\" libraries the OpenTelemetry defines two\n+interfaces that helps with this:\n+* MetricProducer - is the interface that a \"pull based\" library should implement in order to make\n+data available to OpenTelemetry exporters.\n+* MetricExporter - is an interface that every OpenTelemetry exporter should implement in order to\n+allow \"push based\" libraries to push metrics to the backend.\n+\n+Here are some examples on how different libraries will interact with pull/push backends.\n+\n+**Push backend:**\n+\n+```java\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * Simple implementation of the MetricExporter that pushes data to the backend.\n+ */\n+public final class PushMetricExporter implements MetricExporter {  \n+  @Override\n+  ResultCode export(Collection<MetricData> metrics) {\n+    // A \"push based\" library calls to export metrics\n+    return pushToBackend(metrics);\n+  }\n+}\n+\n+/**\n+ * Class that periodically reads from all MetricProducers and pushes metrics using the\n+ * PushMetricExporter.\n+ */\n+public final class PushExporter {\n+  private final PushMetricExporter metricExporter;\n+  // IntervalMetricReader reads metrics from all producers periodically.\n+  private final IntervalMetricReader intervalMetricReader;\n+\n+  public PushExporter(Collection<MetricProducer> producers) {\n+    metricExporter = new PushMetricExporter();\n+    intervalMetricReader =\n+        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+  }\n+  \n+  // Can be accessed by any \"push based\" library to export metrics.\n+  public MetricExporter getMetricExporter() {\n+    return metricExporter;\n+  }\n+}\n+```\n+\n+**Pull backend:**\n+\n+```java\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;import java.util.ArrayList;import java.util.Collections;\n+\n+/**\n+ * Simple implementation of the MetricExporter that stores data in memory and makes them available\n+ * via MetricProducer interface.\n+ */\n+public final class PullMetricExporter implements MetricExporter, MetricProducer {\n+  private final List<MetricData> metricsBuffer = new ArrayList<>();\n+\n+  @Override\n+  synchronized ResultCode export(Collection<MetricData> metrics) {\n+    metricsBuffer.addAll(metrics);\n+    return ResultCode.SUCCESS;\n+  }\n+  \n+  synchronized Collection<MetricData> getAllMetrics() {\n+    List<MetricData> ret = metricsBuffer;\n+    metricsBuffer = new ArrayList<>();\n+    return ret;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f60e270655e7d7f8dcd4c78d7dd65ff0ee318fa9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExNDA4NQ==", "bodyText": "I think it is filled by the line 76, am I missing something?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/856#discussion_r379114085", "createdAt": "2020-02-13T20:57:00Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -0,0 +1,98 @@\n+# OpenTelemetry metrics export framework\n+\n+The metrics world split between \"pushed based\" and \"pull based\" libraries and backends, and because\n+of this, the OpenTelemetry export framework needs to address all the possible combinations.\n+\n+To achieve the support for \"pushed based\" and \"pull based\" libraries the OpenTelemetry defines two\n+interfaces that helps with this:\n+* MetricProducer - is the interface that a \"pull based\" library should implement in order to make\n+data available to OpenTelemetry exporters.\n+* MetricExporter - is an interface that every OpenTelemetry exporter should implement in order to\n+allow \"push based\" libraries to push metrics to the backend.\n+\n+Here are some examples on how different libraries will interact with pull/push backends.\n+\n+**Push backend:**\n+\n+```java\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * Simple implementation of the MetricExporter that pushes data to the backend.\n+ */\n+public final class PushMetricExporter implements MetricExporter {  \n+  @Override\n+  ResultCode export(Collection<MetricData> metrics) {\n+    // A \"push based\" library calls to export metrics\n+    return pushToBackend(metrics);\n+  }\n+}\n+\n+/**\n+ * Class that periodically reads from all MetricProducers and pushes metrics using the\n+ * PushMetricExporter.\n+ */\n+public final class PushExporter {\n+  private final PushMetricExporter metricExporter;\n+  // IntervalMetricReader reads metrics from all producers periodically.\n+  private final IntervalMetricReader intervalMetricReader;\n+\n+  public PushExporter(Collection<MetricProducer> producers) {\n+    metricExporter = new PushMetricExporter();\n+    intervalMetricReader =\n+        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+  }\n+  \n+  // Can be accessed by any \"push based\" library to export metrics.\n+  public MetricExporter getMetricExporter() {\n+    return metricExporter;\n+  }\n+}\n+```\n+\n+**Pull backend:**\n+\n+```java\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;import java.util.ArrayList;import java.util.Collections;\n+\n+/**\n+ * Simple implementation of the MetricExporter that stores data in memory and makes them available\n+ * via MetricProducer interface.\n+ */\n+public final class PullMetricExporter implements MetricExporter, MetricProducer {\n+  private final List<MetricData> metricsBuffer = new ArrayList<>();\n+\n+  @Override\n+  synchronized ResultCode export(Collection<MetricData> metrics) {\n+    metricsBuffer.addAll(metrics);\n+    return ResultCode.SUCCESS;\n+  }\n+  \n+  synchronized Collection<MetricData> getAllMetrics() {\n+    List<MetricData> ret = metricsBuffer;\n+    metricsBuffer = new ArrayList<>();\n+    return ret;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NjMzOQ=="}, "originalCommit": {"oid": "f60e270655e7d7f8dcd4c78d7dd65ff0ee318fa9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExNTk0NQ==", "bodyText": "oh, I totally misread this. You're right, carry on.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/856#discussion_r379115945", "createdAt": "2020-02-13T21:01:07Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -0,0 +1,98 @@\n+# OpenTelemetry metrics export framework\n+\n+The metrics world split between \"pushed based\" and \"pull based\" libraries and backends, and because\n+of this, the OpenTelemetry export framework needs to address all the possible combinations.\n+\n+To achieve the support for \"pushed based\" and \"pull based\" libraries the OpenTelemetry defines two\n+interfaces that helps with this:\n+* MetricProducer - is the interface that a \"pull based\" library should implement in order to make\n+data available to OpenTelemetry exporters.\n+* MetricExporter - is an interface that every OpenTelemetry exporter should implement in order to\n+allow \"push based\" libraries to push metrics to the backend.\n+\n+Here are some examples on how different libraries will interact with pull/push backends.\n+\n+**Push backend:**\n+\n+```java\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * Simple implementation of the MetricExporter that pushes data to the backend.\n+ */\n+public final class PushMetricExporter implements MetricExporter {  \n+  @Override\n+  ResultCode export(Collection<MetricData> metrics) {\n+    // A \"push based\" library calls to export metrics\n+    return pushToBackend(metrics);\n+  }\n+}\n+\n+/**\n+ * Class that periodically reads from all MetricProducers and pushes metrics using the\n+ * PushMetricExporter.\n+ */\n+public final class PushExporter {\n+  private final PushMetricExporter metricExporter;\n+  // IntervalMetricReader reads metrics from all producers periodically.\n+  private final IntervalMetricReader intervalMetricReader;\n+\n+  public PushExporter(Collection<MetricProducer> producers) {\n+    metricExporter = new PushMetricExporter();\n+    intervalMetricReader =\n+        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+  }\n+  \n+  // Can be accessed by any \"push based\" library to export metrics.\n+  public MetricExporter getMetricExporter() {\n+    return metricExporter;\n+  }\n+}\n+```\n+\n+**Pull backend:**\n+\n+```java\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;import java.util.ArrayList;import java.util.Collections;\n+\n+/**\n+ * Simple implementation of the MetricExporter that stores data in memory and makes them available\n+ * via MetricProducer interface.\n+ */\n+public final class PullMetricExporter implements MetricExporter, MetricProducer {\n+  private final List<MetricData> metricsBuffer = new ArrayList<>();\n+\n+  @Override\n+  synchronized ResultCode export(Collection<MetricData> metrics) {\n+    metricsBuffer.addAll(metrics);\n+    return ResultCode.SUCCESS;\n+  }\n+  \n+  synchronized Collection<MetricData> getAllMetrics() {\n+    List<MetricData> ret = metricsBuffer;\n+    metricsBuffer = new ArrayList<>();\n+    return ret;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NjMzOQ=="}, "originalCommit": {"oid": "f60e270655e7d7f8dcd4c78d7dd65ff0ee318fa9"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1094, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}