{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NzE3ODQw", "number": 1521, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTowMDowOFrOEWUobw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo0MTowNlrOEXK_4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODQyMTU5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandlerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTowMDowOFrOG9kq_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTowNTo1OFrOG9k22A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNzE0OQ==", "bodyText": "Is this saying that using the GET request still works?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467217149", "createdAt": "2020-08-07T19:00:08Z", "author": {"login": "v-y-l"}, "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandlerTest.java", "diffHunk": "@@ -29,14 +29,19 @@\n   @Test\n   void parseEmptyQuery() throws URISyntaxException, UnsupportedEncodingException {\n     URI uri = new URI(\"http://localhost:8000/tracez\");\n+    String queryString = \"\";\n     assertThat(ZPageHttpHandler.parseQueryMap(uri)).isEmpty();\n+    assertThat(ZPageHttpHandler.parseQueryMap(queryString)).isEmpty();\n   }\n \n   @Test\n   void parseNormalQuery() throws URISyntaxException, UnsupportedEncodingException {\n     URI uri =\n         new URI(\"http://localhost:8000/tracez/tracez?zspanname=Test&ztype=1&zsubtype=5&noval\");\n+    String queryString = \"zspanname=Test&ztype=1&zsubtype=5&noval\";\n     assertThat(ZPageHttpHandler.parseQueryMap(uri))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48138f77a0be0663033400a516c58c7f755e2531"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNzk1OQ==", "bodyText": "TraceZ still uses GET request for displaying information", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467217959", "createdAt": "2020-08-07T19:01:59Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandlerTest.java", "diffHunk": "@@ -29,14 +29,19 @@\n   @Test\n   void parseEmptyQuery() throws URISyntaxException, UnsupportedEncodingException {\n     URI uri = new URI(\"http://localhost:8000/tracez\");\n+    String queryString = \"\";\n     assertThat(ZPageHttpHandler.parseQueryMap(uri)).isEmpty();\n+    assertThat(ZPageHttpHandler.parseQueryMap(queryString)).isEmpty();\n   }\n \n   @Test\n   void parseNormalQuery() throws URISyntaxException, UnsupportedEncodingException {\n     URI uri =\n         new URI(\"http://localhost:8000/tracez/tracez?zspanname=Test&ztype=1&zsubtype=5&noval\");\n+    String queryString = \"zspanname=Test&ztype=1&zsubtype=5&noval\";\n     assertThat(ZPageHttpHandler.parseQueryMap(uri))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNzE0OQ=="}, "originalCommit": {"oid": "48138f77a0be0663033400a516c58c7f755e2531"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyMDE4NA==", "bodyText": "Thinking of this now, GET request can still work on TraceConfigZ page, I should try to limit to POST request only", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467220184", "createdAt": "2020-08-07T19:05:58Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandlerTest.java", "diffHunk": "@@ -29,14 +29,19 @@\n   @Test\n   void parseEmptyQuery() throws URISyntaxException, UnsupportedEncodingException {\n     URI uri = new URI(\"http://localhost:8000/tracez\");\n+    String queryString = \"\";\n     assertThat(ZPageHttpHandler.parseQueryMap(uri)).isEmpty();\n+    assertThat(ZPageHttpHandler.parseQueryMap(queryString)).isEmpty();\n   }\n \n   @Test\n   void parseNormalQuery() throws URISyntaxException, UnsupportedEncodingException {\n     URI uri =\n         new URI(\"http://localhost:8000/tracez/tracez?zspanname=Test&ztype=1&zsubtype=5&noval\");\n+    String queryString = \"zspanname=Test&ztype=1&zsubtype=5&noval\";\n     assertThat(ZPageHttpHandler.parseQueryMap(uri))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNzE0OQ=="}, "originalCommit": {"oid": "48138f77a0be0663033400a516c58c7f755e2531"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTI5MzE0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoyMjoyM1rOG9sxgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo0Mjo1N1rOG-UhjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0OTg4OQ==", "bodyText": "Does it work to just use CharStreams.toString(httpExchange.getRequestBody())?\nAlso don't forget to close it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467349889", "createdAt": "2020-08-08T02:22:23Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +103,20 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"get\")) {\n+        zpageHandler.emitHtml(\n+            requestMethod,\n+            parseQueryMap(httpExchange.getRequestURI()),\n+            httpExchange.getResponseBody());\n+      } else if (requestMethod.equalsIgnoreCase(\"post\")) {\n+        BufferedReader requestBodyReader =\n+            new BufferedReader(new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\n+        String queryString = requestBodyReader.readLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwMTE2NQ==", "bodyText": "I've changed to\nInputStreamReader requestBodyReader = new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\nString queryString = CharStreams.toString(requestBodyReader);\nrequestBodyReader.close()\n\nhttpExchange.getRequestBody() is a inputStream and toString requries Readable", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468001165", "createdAt": "2020-08-10T15:42:57Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +103,20 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"get\")) {\n+        zpageHandler.emitHtml(\n+            requestMethod,\n+            parseQueryMap(httpExchange.getRequestURI()),\n+            httpExchange.getResponseBody());\n+      } else if (requestMethod.equalsIgnoreCase(\"post\")) {\n+        BufferedReader requestBodyReader =\n+            new BufferedReader(new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\n+        String queryString = requestBodyReader.readLine();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0OTg4OQ=="}, "originalCommit": {"oid": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTI5Mzg5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoyMzozNFrOG9sx3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoyMzozNFrOG9sx3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0OTk4MQ==", "bodyText": "parseQueryString", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467349981", "createdAt": "2020-08-08T02:23:34Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -49,17 +51,43 @@\n   /**\n    * Build a query map from the {@code uri}.\n    *\n-   * @param uri the {@link URI} for buiding the query map\n-   * @return the query map built based on the @{code uri}\n+   * @param uri the {@link URI} for buiding the query map.\n+   * @return the query map built based on the @{code uri}.\n    */\n   @VisibleForTesting\n   static ImmutableMap<String, String> parseQueryMap(URI uri) throws UnsupportedEncodingException {\n-    String queryStrings = uri.getRawQuery();\n-    if (queryStrings == null) {\n+    String queryString = uri.getRawQuery();\n+    if (queryString == null) {\n       return ImmutableMap.of();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryStrings)) {\n+    for (String param : QUERY_SPLITTER.split(queryString)) {\n+      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n+      if (keyValuePair.size() > 1) {\n+        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n+        } else {\n+          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n+        }\n+      }\n+    }\n+    return ImmutableMap.copyOf(queryMap);\n+  }\n+\n+  /**\n+   * Build a query map from the query string.\n+   *\n+   * @param queryString the query string for buiding the query map.\n+   * @return the query map built based on the query string.\n+   */\n+  @VisibleForTesting\n+  static ImmutableMap<String, String> parseQueryMap(String queryString)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTI5NTczOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoyNjoxMFrOG9syww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoyNjoxMFrOG9syww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MDIxMQ==", "bodyText": "You should be able to just pass this instead of copying the logic as is.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467350211", "createdAt": "2020-08-08T02:26:10Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -49,17 +51,43 @@\n   /**\n    * Build a query map from the {@code uri}.\n    *\n-   * @param uri the {@link URI} for buiding the query map\n-   * @return the query map built based on the @{code uri}\n+   * @param uri the {@link URI} for buiding the query map.\n+   * @return the query map built based on the @{code uri}.\n    */\n   @VisibleForTesting\n   static ImmutableMap<String, String> parseQueryMap(URI uri) throws UnsupportedEncodingException {\n-    String queryStrings = uri.getRawQuery();\n-    if (queryStrings == null) {\n+    String queryString = uri.getRawQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTI5ODkzOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjozMDo0MVrOG9s0UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjozMDo0MVrOG9s0UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MDYwOA==", "bodyText": "Can you add a test that makes sure get doesn't update the config?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467350608", "createdAt": "2020-08-08T02:30:41Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "diffHunk": "@@ -45,7 +45,7 @@ void changeTable_emitRowsCorrectly() {\n \n     TraceConfigzZPageHandler traceConfigzZPageHandler =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDMzNTMyOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxNzo0MFrOG-X-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozNzo0M1rOG-aqRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzY0MQ==", "bodyText": "if the requestMethod isn't used in this method, why pass it in?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468057641", "createdAt": "2020-08-10T17:17:40Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -522,7 +522,8 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out) {\n   }\n \n   @Override\n-  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+  public void emitHtml(\n+      String requestMethod, Map<String, String> queryMap, OutputStream outputStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0928883388f313fc38b481c8c32398aaa90d82"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1ODE0NQ==", "bodyText": "hmm. I see...it's added to the interface. This make me think the interface isn't quite right, since only the one page needs to know that it's a post vs. get.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468058145", "createdAt": "2020-08-10T17:18:36Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -522,7 +522,8 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out) {\n   }\n \n   @Override\n-  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+  public void emitHtml(\n+      String requestMethod, Map<String, String> queryMap, OutputStream outputStream) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzY0MQ=="}, "originalCommit": {"oid": "0f0928883388f313fc38b481c8c32398aaa90d82"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MDYxNw==", "bodyText": "I'm not sure if any future zPages will require requestMethod, but this will also allow any potential new zPage to have access to the requestMethod as well", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468060617", "createdAt": "2020-08-10T17:23:06Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -522,7 +522,8 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out) {\n   }\n \n   @Override\n-  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+  public void emitHtml(\n+      String requestMethod, Map<String, String> queryMap, OutputStream outputStream) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzY0MQ=="}, "originalCommit": {"oid": "0f0928883388f313fc38b481c8c32398aaa90d82"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMTcwMg==", "bodyText": "all the more reason to not pollute all the other page implementations with the request method.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468101702", "createdAt": "2020-08-10T18:37:43Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -522,7 +522,8 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out) {\n   }\n \n   @Override\n-  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+  public void emitHtml(\n+      String requestMethod, Map<String, String> queryMap, OutputStream outputStream) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzY0MQ=="}, "originalCommit": {"oid": "0f0928883388f313fc38b481c8c32398aaa90d82"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDM2MTQ5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoyNToxM1rOG-YOhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozNDozMVrOG-ajaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MTgzMA==", "bodyText": "rather than just having a single emitHtml method, it would be better to have 2 methods, I think.  One to process the POST changes, and one to then emit the resulting HTML page. What do you think about splitting the interface in 2, and then the things that don't support any updates can just no-op the implementation on the processUpdate method (or whatever you call it)?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468061830", "createdAt": "2020-08-10T17:25:13Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +76,24 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+        zpageHandler.emitHtml(\n+            requestMethod,\n+            parseQueryString(httpExchange.getRequestURI().getRawQuery()),\n+            httpExchange.getResponseBody());\n+      } else if (requestMethod.equalsIgnoreCase(\"POST\")) {\n+        // BufferedReader requestBodyReader =\n+        // new BufferedReader(new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\n+        // String queryString = requestBodyReader.readLine();\n+        InputStreamReader requestBodyReader =\n+            new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\");\n+        String queryString = CharStreams.toString(requestBodyReader);\n+        requestBodyReader.close();\n+        zpageHandler.emitHtml(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0928883388f313fc38b481c8c32398aaa90d82"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MzcxNA==", "bodyText": "So one for normally emitting HTML on GET, and another one for processing updates on POST (or any other request methods) then?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468063714", "createdAt": "2020-08-10T17:28:30Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +76,24 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+        zpageHandler.emitHtml(\n+            requestMethod,\n+            parseQueryString(httpExchange.getRequestURI().getRawQuery()),\n+            httpExchange.getResponseBody());\n+      } else if (requestMethod.equalsIgnoreCase(\"POST\")) {\n+        // BufferedReader requestBodyReader =\n+        // new BufferedReader(new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\n+        // String queryString = requestBodyReader.readLine();\n+        InputStreamReader requestBodyReader =\n+            new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\");\n+        String queryString = CharStreams.toString(requestBodyReader);\n+        requestBodyReader.close();\n+        zpageHandler.emitHtml(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MTgzMA=="}, "originalCommit": {"oid": "0f0928883388f313fc38b481c8c32398aaa90d82"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5OTk0Nw==", "bodyText": "right, and if a POST is received, first you call \"processUpdate\", then you call \"emitHtml\". If a GET is received, you just call \"emitHtml\" and you're done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468099947", "createdAt": "2020-08-10T18:34:31Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +76,24 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+        zpageHandler.emitHtml(\n+            requestMethod,\n+            parseQueryString(httpExchange.getRequestURI().getRawQuery()),\n+            httpExchange.getResponseBody());\n+      } else if (requestMethod.equalsIgnoreCase(\"POST\")) {\n+        // BufferedReader requestBodyReader =\n+        // new BufferedReader(new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\n+        // String queryString = requestBodyReader.readLine();\n+        InputStreamReader requestBodyReader =\n+            new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\");\n+        String queryString = CharStreams.toString(requestBodyReader);\n+        requestBodyReader.close();\n+        zpageHandler.emitHtml(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MTgzMA=="}, "originalCommit": {"oid": "0f0928883388f313fc38b481c8c32398aaa90d82"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzMyMzg0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTozOTo0MFrOG-z74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDozMToyOVrOG-6wEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNTgxMQ==", "bodyText": "This section seems like an error applying the config, not an error generating HTML right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468515811", "createdAt": "2020-08-11T11:39:40Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -327,6 +325,44 @@ public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n     }\n   }\n \n+  @Override\n+  public boolean processRequest(\n+      String requestMethod, Map<String, String> queryMap, OutputStream outputStream) {\n+    if (requestMethod.equalsIgnoreCase(\"POST\")) {\n+      try {\n+        applyTraceConfig(queryMap);\n+      } catch (Throwable t) {\n+        try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8044ba183ca7bb7c1fcea61814437f825aab06fa"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNzQ3Mg==", "bodyText": "Yea it's error applying config, I will adjust the error message", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468627472", "createdAt": "2020-08-11T14:31:29Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -327,6 +325,44 @@ public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n     }\n   }\n \n+  @Override\n+  public boolean processRequest(\n+      String requestMethod, Map<String, String> queryMap, OutputStream outputStream) {\n+    if (requestMethod.equalsIgnoreCase(\"POST\")) {\n+      try {\n+        applyTraceConfig(queryMap);\n+      } catch (Throwable t) {\n+        try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNTgxMQ=="}, "originalCommit": {"oid": "8044ba183ca7bb7c1fcea61814437f825aab06fa"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzMyNzc3OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo0MDo0NFrOG-z-Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo0MDo0NFrOG-z-Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNjQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    InputStreamReader requestBodyReader =\n          \n          \n            \n                        new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\");\n          \n          \n            \n                    String queryString = CharStreams.toString(requestBodyReader);\n          \n          \n            \n                    requestBodyReader.close();\n          \n          \n            \n                    final String queryString;\n          \n          \n            \n                    try (InputStreamReader requestBodyReader =\n          \n          \n            \n                        new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\")) {\n          \n          \n            \n                      queryString = CharStreams.toString(requestBodyReader);\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nMay as well use try/resources", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468516403", "createdAt": "2020-08-11T11:40:44Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +76,24 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+        zpageHandler.emitHtml(\n+            parseQueryString(httpExchange.getRequestURI().getRawQuery()),\n+            httpExchange.getResponseBody());\n+      } else {\n+        InputStreamReader requestBodyReader =\n+            new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\");\n+        String queryString = CharStreams.toString(requestBodyReader);\n+        requestBodyReader.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8044ba183ca7bb7c1fcea61814437f825aab06fa"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzMyODk5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo0MTowNlrOG-z-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDozMDo0NVrOG-6uFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNjU4MQ==", "bodyText": "Do we need to check this in all the tests? Aren't they non-error tests?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468516581", "createdAt": "2020-08-11T11:41:06Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "diffHunk": "@@ -154,7 +182,10 @@ void appliesChangesCorrectly_formSubmit() {\n \n     TraceConfigzZPageHandler traceConfigzZPageHandler =\n         new TraceConfigzZPageHandler(tracerProvider);\n-    traceConfigzZPageHandler.emitHtml(queryMap, output);\n+    boolean error = traceConfigzZPageHandler.processRequest(\"POST\", queryMap, output);\n+    if (!error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8044ba183ca7bb7c1fcea61814437f825aab06fa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNjk2NA==", "bodyText": "Yea they're non-error tests, I replaced all with search, I'll removed the checks", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468626964", "createdAt": "2020-08-11T14:30:45Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "diffHunk": "@@ -154,7 +182,10 @@ void appliesChangesCorrectly_formSubmit() {\n \n     TraceConfigzZPageHandler traceConfigzZPageHandler =\n         new TraceConfigzZPageHandler(tracerProvider);\n-    traceConfigzZPageHandler.emitHtml(queryMap, output);\n+    boolean error = traceConfigzZPageHandler.processRequest(\"POST\", queryMap, output);\n+    if (!error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNjU4MQ=="}, "originalCommit": {"oid": "8044ba183ca7bb7c1fcea61814437f825aab06fa"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1322, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}