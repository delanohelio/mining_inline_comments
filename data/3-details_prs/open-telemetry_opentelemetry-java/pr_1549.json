{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NDgzMjkx", "number": 1549, "title": "Add Getter.Keys() with Jaeger Baggage support.", "bodyText": "Fixes #967\nImplements the open-telemetry/opentelemetry-specification#825 update, and implements Jaeger Baggage support to verify that the API is correct/useful (based on their own propagator)\n\nUsed Iterable for keys().\nHad to remove the usage of anonymous classes in the integration test's trace-context section, as it broke some versions of Java 11 (see this).\nWe can play with removing the (most likely) slow regex in a follow-up.\nDon't put an empty Baggage in Context in case there was not Baggage to be extracted at all.\n\nFor Jaeger reviewers:\n\nDidn't encode the Baggage values. In Jaeger there's two TextMap propagators registered by default (encoded and non-encoded propagation). We need to define the encoding case in a follow-up (somehow).\n\n@open-telemetry/java-approvers\ncc @pavolloffay @jpkrohling", "createdAt": "2020-08-18T13:01:14Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549", "merged": true, "mergeCommit": {"oid": "5195622181e8d55d385469d4587a7bfff1175c4f"}, "closed": true, "closedAt": "2020-11-05T11:51:08Z", "author": {"login": "carlosalberto"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAGeB8AH2gAyNDY5NDgzMjkxOjgyM2MwYWRjNjM5NDQyOGQ4MDVjOTgzYWMwNDM4N2NmODkwZGJiMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZVmXLgH2gAyNDY5NDgzMjkxOjE5OTljNzIyNjE2NjY5ZGRmMDdkOTMxYjM5YmUzMGUzZTk0NzY0ZjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "823c0adc6394428d805c983ac04387cf890dbb06", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/823c0adc6394428d805c983ac04387cf890dbb06", "committedDate": "2020-08-18T12:49:28Z", "message": "Initial addition of Getter.keys()."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38246f75c1848cbb36ae46179c8938e3379679e4", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/38246f75c1848cbb36ae46179c8938e3379679e4", "committedDate": "2020-10-18T22:45:58Z", "message": "Merge branch 'master' into getter_keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1146897e8424d8b597bd43dcb5e9e48b920eb006", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1146897e8424d8b597bd43dcb5e9e48b920eb006", "committedDate": "2020-10-21T21:58:36Z", "message": "WIP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ef667a2f7c537f3e7dfd72d478fb1e3a7f628d", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28ef667a2f7c537f3e7dfd72d478fb1e3a7f628d", "committedDate": "2020-10-21T22:43:17Z", "message": "Merge branch 'master' into getter_keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f38e3753489bd66b794b66c0e52ac4a4c1ddbeff", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f38e3753489bd66b794b66c0e52ac4a4c1ddbeff", "committedDate": "2020-10-22T12:18:22Z", "message": "More updates to the Jaeger propagator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d5f54a4c8685d5c8cc90fb69d03a9c03807595", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95d5f54a4c8685d5c8cc90fb69d03a9c03807595", "committedDate": "2020-10-23T00:26:46Z", "message": "Merge branch 'master' into getter_keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14b41342700bfaf436f20f082272f2f583b69583", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/14b41342700bfaf436f20f082272f2f583b69583", "committedDate": "2020-10-23T00:50:51Z", "message": "Fix the build.\n\nEw, Java and your improper type inference..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd21377d32b9b7526f190a8384d7c979e949b040", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dd21377d32b9b7526f190a8384d7c979e949b040", "committedDate": "2020-10-26T12:57:34Z", "message": "Add jaeger propagation tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91dda850ad6b3577cc8fcb11108241ee8eaa616a", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/91dda850ad6b3577cc8fcb11108241ee8eaa616a", "committedDate": "2020-10-26T13:38:40Z", "message": "Merge branch 'master' into getter_keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/62f506dae043539083a88acbed2683e0c8f764ef", "committedDate": "2020-10-26T13:39:14Z", "message": "Getter.keys() exists since 0.10.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDYxMjUz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-517061253", "createdAt": "2020-10-26T18:24:57Z", "commit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNDo1OFrOHoc1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNDo1OFrOHoc1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NzQ5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param carrier carrier of propagation fields, such as an http request.\n          \n          \n            \n                 * @param carrier The carrier of propagation fields, such as an http request.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512177492", "createdAt": "2020-10-26T18:24:58Z", "author": {"login": "jkwatson"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier carrier of propagation fields, such as an http request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDYxNjgy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-517061682", "createdAt": "2020-10-26T18:25:33Z", "commit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNTozM1rOHoc2vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNTozM1rOHoc2vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3Nzg1Mg==", "bodyText": "I think we've gotten rid of all the @since tags for now; we'll set them all to 1.0 when we're ready to release.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512177852", "createdAt": "2020-10-26T18:25:33Z", "author": {"login": "jkwatson"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier carrier of propagation fields, such as an http request.\n+     * @since 0.10.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDY1NDE5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-517065419", "createdAt": "2020-10-26T18:30:29Z", "commit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMDoyOVrOHodCUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMDoyOVrOHodCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MDgxOA==", "bodyText": "not relevant for this PR in particular, but I think we should turn off this warning globally, since it's telling us to use guava, which we don't to do for the API, and won't, ever.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512180818", "createdAt": "2020-10-26T18:30:29Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);\n+      }\n+    }\n+    return builder == null ? null : builder.build();\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDY3NjE0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-517067614", "createdAt": "2020-10-26T18:33:22Z", "commit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMzoyM1rOHodJLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMzoyM1rOHodJLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MjU3Mw==", "bodyText": "might be a little safer/cleaner to just use Context.root() here, so we know that we don't have a pre-polluted context.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512182573", "createdAt": "2020-10-26T18:33:23Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "diffHunk": "@@ -133,12 +145,49 @@ void inject_NotSampledContext() {\n                 TRACE_ID_BASE16, SPAN_ID_BASE16, DEPRECATED_PARENT_SPAN, \"0\"));\n   }\n \n+  @Test\n+  void inject_SampledContext_withBaggage() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    Context context =\n+        Context.current()\n+            .with(\n+                Span.wrap(\n+                    SpanContext.create(\n+                        TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT)))\n+            .with(Baggage.builder().put(\"foo\", \"bar\").build());\n+\n+    jaegerPropagator.inject(context, carrier, setter);\n+    assertThat(carrier)\n+        .containsEntry(\n+            PROPAGATION_HEADER,\n+            generateTraceIdHeaderValue(\n+                TRACE_ID_BASE16, SPAN_ID_BASE16, DEPRECATED_PARENT_SPAN, \"1\"));\n+    assertThat(carrier).containsEntry(BAGGAGE_PREFIX + \"foo\", \"bar\");\n+  }\n+\n+  @Test\n+  void inject_baggageOnly() {\n+    // Metadata won't be propagated, but it MUST NOT cause ay problem.\n+    Baggage baggage =\n+        Baggage.builder()\n+            .put(\"nometa\", \"nometa-value\")\n+            .put(\"meta\", \"meta-value\", EntryMetadata.create(\"somemetadata; someother=foo\"))\n+            .build();\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    jaegerPropagator.inject(Context.root().with(baggage), carrier, Map::put);\n+    assertThat(carrier)\n+        .containsExactlyInAnyOrderEntriesOf(\n+            ImmutableMap.of(\n+                BAGGAGE_PREFIX + \"nometa\", \"nometa-value\",\n+                BAGGAGE_PREFIX + \"meta\", \"meta-value\"));\n+  }\n+\n   @Test\n   void extract_Nothing() {\n     // Context remains untouched.\n     assertThat(\n             jaegerPropagator.extract(\n-                Context.current(), Collections.<String, String>emptyMap(), Map::get))\n+                Context.current(), Collections.<String, String>emptyMap(), getter))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f506dae043539083a88acbed2683e0c8f764ef"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTA2MzYz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-517506363", "createdAt": "2020-10-27T09:37:50Z", "commit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTQyMzA0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-517542304", "createdAt": "2020-10-27T10:19:04Z", "commit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxOTowNFrOHo0qUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoyNToyN1rOHo06PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2Nzg4OA==", "bodyText": "Does it make sense to add empty baggage similar to how we add invalid span?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512567888", "createdAt": "2020-10-27T10:19:04Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -108,16 +118,27 @@ public static JaegerPropagator getInstance() {\n     setter.set(carrier, PROPAGATION_HEADER, new String(chars));\n   }\n \n+  private static <C> void injectBaggage(Baggage baggage, C carrier, Setter<C> setter) {\n+    for (Entry entry : baggage.getEntries()) {\n+      setter.set(carrier, BAGGAGE_PREFIX + entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n   @Override\n   public <C> Context extract(Context context, @Nullable C carrier, Getter<C> getter) {\n     Objects.requireNonNull(getter, \"getter\");\n \n     SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return context;\n+    if (spanContext.isValid()) {\n+      context = context.with(Span.wrap(spanContext));\n+    }\n+\n+    Baggage baggage = getBaggageFromHeader(carrier, getter);\n+    if (baggage != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODQ3Ng==", "bodyText": "Since we already checked startsWith I think this can be equals check", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512568476", "createdAt": "2020-10-27T10:19:58Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTI3MQ==", "bodyText": "Regex split looks like it could be very slow. Best could be to use indexOf to avoid split array allocation but if too tedious can we at least just split on the single chars?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512571271", "createdAt": "2020-10-27T10:24:25Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);\n+      }\n+    }\n+    return builder == null ? null : builder.build();\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")\n+  private static Baggage.Builder parseBaggageHeader(String header, Baggage.Builder builder) {\n+    for (String part : header.split(\"\\\\s*,\\\\s*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTk2NA==", "bodyText": "Can you add some test cases with invalid, and with whitespace?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512571964", "createdAt": "2020-10-27T10:25:27Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagatorTest.java", "diffHunk": "@@ -313,6 +362,78 @@ void extract_UrlEncodedContext() throws UnsupportedEncodingException {\n                 TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n   }\n \n+  @Test\n+  void extract_SampledContext_withBaggage() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    JaegerSpanContext context =\n+        new JaegerSpanContext(\n+            TRACE_ID_HI, TRACE_ID_LOW, SPAN_ID_LONG, DEPRECATED_PARENT_SPAN_LONG, (byte) 5);\n+    carrier.put(PROPAGATION_HEADER, TextMapCodec.contextAsString(context));\n+    carrier.put(BAGGAGE_PREFIX + \"foo\", \"bar\");\n+\n+    assertThat(getSpanContext(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.builder().put(\"foo\", \"bar\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withPrefix() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_PREFIX + \"nometa\", \"nometa-value\");\n+    carrier.put(BAGGAGE_PREFIX + \"meta\", \"meta-value\");\n+    carrier.put(\"another\", \"value\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            Baggage.builder().put(\"nometa\", \"nometa-value\").put(\"meta\", \"meta-value\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withPrefix_emptyKey() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_PREFIX, \"value\"); // Not really a valid key.\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.empty());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa=nometa-value,meta=meta-value\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            Baggage.builder().put(\"nometa\", \"nometa-value\").put(\"meta\", \"meta-value\").build());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader_invalid() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa+novalue\");\n+\n+    assertThat(getBaggage(jaegerPropagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(Baggage.empty());\n+  }\n+\n+  @Test\n+  void extract_baggageOnly_withHeader_andPrefix() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(BAGGAGE_HEADER, \"nometa=nometa-value,meta=meta-value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NzM0MzIz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-517734323", "createdAt": "2020-10-27T13:59:23Z", "commit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo1OToyM1rOHo9qXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo1OToyM1rOHo9qXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNTM1OQ==", "bodyText": "A lighter interface like Iterable or Iterator would also work. Collection must support size().", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512715359", "createdAt": "2020-10-27T13:59:23Z", "author": {"login": "yurishkuro"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java", "diffHunk": "@@ -115,6 +116,14 @@\n    */\n   interface Getter<C> {\n \n+    /**\n+     * Returns all the keys in the given carrier.\n+     *\n+     * @param carrier The carrier of propagation fields, such as an http request.\n+     * @since 0.10.0\n+     */\n+    Collection<String> keys(C carrier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTg0NzQw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-517984740", "createdAt": "2020-10-27T17:46:44Z", "commit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo0Njo0NVrOHpJDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo0Njo0NVrOHpJDLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMTkzNQ==", "bodyText": "Jaeger SDKs would combine baggage from uberctx-{key} and jaeger-baggage headers, you're overriding it instead.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#discussion_r512901935", "createdAt": "2020-10-27T17:46:45Z", "author": {"login": "yurishkuro"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -187,6 +208,42 @@ public static JaegerPropagator getInstance() {\n     return buildSpanContext(traceId, spanId, flags);\n   }\n \n+  private static <C> Baggage getBaggageFromHeader(C carrier, Getter<C> getter) {\n+    Baggage.Builder builder = null;\n+\n+    for (String key : getter.keys(carrier)) {\n+      if (key.startsWith(BAGGAGE_PREFIX)) {\n+        if (key.length() <= BAGGAGE_PREFIX.length()) {\n+          continue;\n+        }\n+\n+        if (builder == null) {\n+          builder = Baggage.builder();\n+        }\n+        builder.put(key.substring(BAGGAGE_PREFIX.length()), getter.get(carrier, key));\n+      } else if (key.equals(BAGGAGE_HEADER)) {\n+        builder = parseBaggageHeader(getter.get(carrier, key), builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a171e0e563f5472975035bb694dbb9dfcb313405", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a171e0e563f5472975035bb694dbb9dfcb313405", "committedDate": "2020-11-03T22:11:46Z", "message": "Merge branch 'master' into getter_keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01e23415e76a0e5c5f7622e7db00b2f708ea806c", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/01e23415e76a0e5c5f7622e7db00b2f708ea806c", "committedDate": "2020-11-03T22:23:09Z", "message": "Use Iterable instead of Collection."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6582c360ac7c54dbe1128a19bc018982346de9ae", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6582c360ac7c54dbe1128a19bc018982346de9ae", "committedDate": "2020-10-27T01:09:37Z", "message": "Update context_prop/src/main/java/io/opentelemetry/context/propagation/TextMapPropagator.java\n\nCo-authored-by: John Watson <jkwatson@gmail.com>"}, "afterCommit": {"oid": "01e23415e76a0e5c5f7622e7db00b2f708ea806c", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/01e23415e76a0e5c5f7622e7db00b2f708ea806c", "committedDate": "2020-11-03T22:23:09Z", "message": "Use Iterable instead of Collection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6ef0cbd64b04aeeae89bda0582773605b770f6c", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b6ef0cbd64b04aeeae89bda0582773605b770f6c", "committedDate": "2020-11-04T00:48:00Z", "message": "Add a test case for input with spaces."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTc3MzAx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-522977301", "createdAt": "2020-11-04T01:00:58Z", "commit": {"oid": "b6ef0cbd64b04aeeae89bda0582773605b770f6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDM0OTg0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-523034984", "createdAt": "2020-11-04T04:24:07Z", "commit": {"oid": "b6ef0cbd64b04aeeae89bda0582773605b770f6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDM2NTE4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1549#pullrequestreview-523036518", "createdAt": "2020-11-04T04:29:59Z", "commit": {"oid": "b6ef0cbd64b04aeeae89bda0582773605b770f6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fdd61064c726750766a9ec193acbdaae241b371", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1fdd61064c726750766a9ec193acbdaae241b371", "committedDate": "2020-11-04T22:32:42Z", "message": "Merge branch 'master' into getter_keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1999c722616669ddf07d931b39be30e3e94764f1", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1999c722616669ddf07d931b39be30e3e94764f1", "committedDate": "2020-11-04T22:35:15Z", "message": "Tune comparison against BAGGAGE_HEADER."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2352, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}