{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNzYxMDMw", "number": 1934, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyMjozNFrOEz1xmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowNzowNFrOE08V3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzkzODgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/EndSpanOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyMjozNFrOHrT7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwOTowMToyN1rOHrtHHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NzIyOQ==", "bodyText": "maybe just create(long endTimestamp) ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r515177229", "createdAt": "2020-10-30T15:22:34Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/EndSpanOptions.java", "diffHunk": "@@ -15,22 +15,21 @@\n @Immutable\n @AutoValue\n public abstract class EndSpanOptions {\n-  private static final EndSpanOptions DEFAULT = builder().build();\n+  private static final EndSpanOptions DEFAULT = createWithEndTimestamp(0L);\n+\n+  /**\n+   * Returns a {@link EndSpanOptions} indicating the span ended at the given {@code endTimestamp},\n+   * in nanoseconds.\n+   */\n+  public static EndSpanOptions createWithEndTimestamp(long endTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1023526b87e557ccd44cbd4651a8bb92be0ea2cc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4OTkxOA==", "bodyText": "Renamed - I think either this or removing the class and inlining into Span are both good options.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r515589918", "createdAt": "2020-11-01T09:01:27Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/EndSpanOptions.java", "diffHunk": "@@ -15,22 +15,21 @@\n @Immutable\n @AutoValue\n public abstract class EndSpanOptions {\n-  private static final EndSpanOptions DEFAULT = builder().build();\n+  private static final EndSpanOptions DEFAULT = createWithEndTimestamp(0L);\n+\n+  /**\n+   * Returns a {@link EndSpanOptions} indicating the span ended at the given {@code endTimestamp},\n+   * in nanoseconds.\n+   */\n+  public static EndSpanOptions createWithEndTimestamp(long endTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NzIyOQ=="}, "originalCommit": {"oid": "1023526b87e557ccd44cbd4651a8bb92be0ea2cc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUwMDQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/Span.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowNzowNFrOHs8s3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0MDoxM1rOHtEUVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ==", "bodyText": "As usual, I'm not a fan of using 0 as a magic number here. Would prefer something that was obviously not a valid timestamp, Long.MIN_VALUE or something.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r516893919", "createdAt": "2020-11-03T19:07:04Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/Span.java", "diffHunk": "@@ -304,17 +304,18 @@ default Span setAttribute(AttributeKey<Long> key, int value) {\n   void end();\n \n   /**\n-   * Marks the end of {@code Span} execution with the specified {@link EndSpanOptions}.\n+   * Marks the end of {@code Span} execution with the specified timestamp.\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n    *\n    * <p>Use this method for specifying explicit end options, such as end {@code Timestamp}. When no\n    * explicit values are required, use {@link #end()}.\n    *\n-   * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n+   * @param timestamp the explicit timestamp, as nanos from the epoch, for this {@code Span}. {@code\n+   *     0} indicates current time should be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d4b696d00d52bf8d937b3c25ca35316ae89837"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2MjczMw==", "bodyText": "does this method need any magic for current time, since end() supports that?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r516962733", "createdAt": "2020-11-03T21:21:58Z", "author": {"login": "trask"}, "path": "api/src/main/java/io/opentelemetry/api/trace/Span.java", "diffHunk": "@@ -304,17 +304,18 @@ default Span setAttribute(AttributeKey<Long> key, int value) {\n   void end();\n \n   /**\n-   * Marks the end of {@code Span} execution with the specified {@link EndSpanOptions}.\n+   * Marks the end of {@code Span} execution with the specified timestamp.\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n    *\n    * <p>Use this method for specifying explicit end options, such as end {@code Timestamp}. When no\n    * explicit values are required, use {@link #end()}.\n    *\n-   * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n+   * @param timestamp the explicit timestamp, as nanos from the epoch, for this {@code Span}. {@code\n+   *     0} indicates current time should be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, "originalCommit": {"oid": "d8d4b696d00d52bf8d937b3c25ca35316ae89837"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMTI4OA==", "bodyText": "I don't think so either but that's the same logic as we have right now - can we update the semantics separately? Want to get the API locked in", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r517011288", "createdAt": "2020-11-03T23:17:04Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/Span.java", "diffHunk": "@@ -304,17 +304,18 @@ default Span setAttribute(AttributeKey<Long> key, int value) {\n   void end();\n \n   /**\n-   * Marks the end of {@code Span} execution with the specified {@link EndSpanOptions}.\n+   * Marks the end of {@code Span} execution with the specified timestamp.\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n    *\n    * <p>Use this method for specifying explicit end options, such as end {@code Timestamp}. When no\n    * explicit values are required, use {@link #end()}.\n    *\n-   * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n+   * @param timestamp the explicit timestamp, as nanos from the epoch, for this {@code Span}. {@code\n+   *     0} indicates current time should be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, "originalCommit": {"oid": "d8d4b696d00d52bf8d937b3c25ca35316ae89837"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMTQ2OA==", "bodyText": "I wonder if no one noticed if I hadn't updated javadoc :-)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r517011468", "createdAt": "2020-11-03T23:17:39Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/Span.java", "diffHunk": "@@ -304,17 +304,18 @@ default Span setAttribute(AttributeKey<Long> key, int value) {\n   void end();\n \n   /**\n-   * Marks the end of {@code Span} execution with the specified {@link EndSpanOptions}.\n+   * Marks the end of {@code Span} execution with the specified timestamp.\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n    *\n    * <p>Use this method for specifying explicit end options, such as end {@code Timestamp}. When no\n    * explicit values are required, use {@link #end()}.\n    *\n-   * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n+   * @param timestamp the explicit timestamp, as nanos from the epoch, for this {@code Span}. {@code\n+   *     0} indicates current time should be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, "originalCommit": {"oid": "d8d4b696d00d52bf8d937b3c25ca35316ae89837"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODAzMQ==", "bodyText": "I did see the zeros floating around in tests and such and it was starting to make me grumpy, even before I saw the javadoc. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r517018031", "createdAt": "2020-11-03T23:38:08Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/Span.java", "diffHunk": "@@ -304,17 +304,18 @@ default Span setAttribute(AttributeKey<Long> key, int value) {\n   void end();\n \n   /**\n-   * Marks the end of {@code Span} execution with the specified {@link EndSpanOptions}.\n+   * Marks the end of {@code Span} execution with the specified timestamp.\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n    *\n    * <p>Use this method for specifying explicit end options, such as end {@code Timestamp}. When no\n    * explicit values are required, use {@link #end()}.\n    *\n-   * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n+   * @param timestamp the explicit timestamp, as nanos from the epoch, for this {@code Span}. {@code\n+   *     0} indicates current time should be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, "originalCommit": {"oid": "d8d4b696d00d52bf8d937b3c25ca35316ae89837"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODcxMA==", "bodyText": "Before this PR, zero was an undocumented magic number. I guess it's better to have it documented, if we're going to use it! But, I'd rather not have the magic '0' at all, personally. I mean, maybe you want a span to end at unix epoch! (ok, not really)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1934#discussion_r517018710", "createdAt": "2020-11-03T23:40:13Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/Span.java", "diffHunk": "@@ -304,17 +304,18 @@ default Span setAttribute(AttributeKey<Long> key, int value) {\n   void end();\n \n   /**\n-   * Marks the end of {@code Span} execution with the specified {@link EndSpanOptions}.\n+   * Marks the end of {@code Span} execution with the specified timestamp.\n    *\n    * <p>Only the timing of the first end call for a given {@code Span} will be recorded, and\n    * implementations are free to ignore all further calls.\n    *\n    * <p>Use this method for specifying explicit end options, such as end {@code Timestamp}. When no\n    * explicit values are required, use {@link #end()}.\n    *\n-   * @param endOptions the explicit {@link EndSpanOptions} for this {@code Span}.\n+   * @param timestamp the explicit timestamp, as nanos from the epoch, for this {@code Span}. {@code\n+   *     0} indicates current time should be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MzkxOQ=="}, "originalCommit": {"oid": "d8d4b696d00d52bf8d937b3c25ca35316ae89837"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2058, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}