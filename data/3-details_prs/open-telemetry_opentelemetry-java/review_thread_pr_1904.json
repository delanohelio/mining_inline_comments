{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzg0MDM3", "number": 1904, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDozNjo0OVrOEy1-tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0NToyNFrOEzEYJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzQ4NjYwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/metrics/Meter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDozNjo0OVrOHptSgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzo0NjowMVrOHqBgtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5NTY4MQ==", "bodyText": "The name of the method is misleading, for metrics it is right now a noop but we may add small functionality. Not sure about a better name but wanted to raise this issue", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513495681", "createdAt": "2020-10-28T14:36:49Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/api/metrics/Meter.java", "diffHunk": "@@ -25,6 +25,14 @@\n @ThreadSafe\n public interface Meter {\n \n+  /**\n+   * Returns a {@link Meter} that only creates no-op {@link Instrument}s that neither record nor are\n+   * emitted.\n+   */\n+  static Meter noop() {\n+    return DefaultMeter.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae2172de283c335cbae7f13c7ce35fc0d26b6e8f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNDc4OA==", "bodyText": "Hmm - how about just getDefault then? An unfortunately generic name but it does give us flexibility to change so it seems like a better name.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513814788", "createdAt": "2020-10-28T23:09:39Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/metrics/Meter.java", "diffHunk": "@@ -25,6 +25,14 @@\n @ThreadSafe\n public interface Meter {\n \n+  /**\n+   * Returns a {@link Meter} that only creates no-op {@link Instrument}s that neither record nor are\n+   * emitted.\n+   */\n+  static Meter noop() {\n+    return DefaultMeter.getInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5NTY4MQ=="}, "originalCommit": {"oid": "ae2172de283c335cbae7f13c7ce35fc0d26b6e8f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNjk5OA==", "bodyText": "yeah, I think getDefault might be better, even though I much prefer saying \"NOOP\" loudly whenever I read the code. ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513826998", "createdAt": "2020-10-28T23:46:01Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/metrics/Meter.java", "diffHunk": "@@ -25,6 +25,14 @@\n @ThreadSafe\n public interface Meter {\n \n+  /**\n+   * Returns a {@link Meter} that only creates no-op {@link Instrument}s that neither record nor are\n+   * emitted.\n+   */\n+  static Meter noop() {\n+    return DefaultMeter.getInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5NTY4MQ=="}, "originalCommit": {"oid": "ae2172de283c335cbae7f13c7ce35fc0d26b6e8f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzg5NzkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/metrics/DefaultMeter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTo1Nzo0N1rOHpxXMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzowOToxM1rOHqAwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2MjQxNw==", "bodyText": "why lowercase? Isn't the DefaultMeter immutable?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513562417", "createdAt": "2020-10-28T15:57:47Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/metrics/DefaultMeter.java", "diffHunk": "@@ -14,23 +14,18 @@\n \n /** No-op implementations of {@link Meter}. */\n @ThreadSafe\n-public final class DefaultMeter implements Meter {\n+final class DefaultMeter implements Meter {\n \n-  private static final DefaultMeter INSTANCE = new DefaultMeter();\n+  private static final DefaultMeter instance = new DefaultMeter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae2172de283c335cbae7f13c7ce35fc0d26b6e8f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNDYzMA==", "bodyText": "It seemed slightly more cool than a boring constant but that's true :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513814630", "createdAt": "2020-10-28T23:09:13Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/metrics/DefaultMeter.java", "diffHunk": "@@ -14,23 +14,18 @@\n \n /** No-op implementations of {@link Meter}. */\n @ThreadSafe\n-public final class DefaultMeter implements Meter {\n+final class DefaultMeter implements Meter {\n \n-  private static final DefaultMeter INSTANCE = new DefaultMeter();\n+  private static final DefaultMeter instance = new DefaultMeter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2MjQxNw=="}, "originalCommit": {"oid": "ae2172de283c335cbae7f13c7ce35fc0d26b6e8f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg0NTUwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/api/OpenTelemetryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0NToyNFrOHqEDTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDo1NDo0M1rOHqKKVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODYyMg==", "bodyText": "I wonder how much value these tests are really providing.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513868622", "createdAt": "2020-10-29T01:45:24Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/api/OpenTelemetryTest.java", "diffHunk": "@@ -59,10 +57,12 @@ void after() {\n \n   @Test\n   void testDefault() {\n-    assertThat(OpenTelemetry.getGlobalTracerProvider()).isInstanceOf(DefaultTracerProvider.class);\n+    assertThat(OpenTelemetry.getGlobalTracerProvider().getClass().getSimpleName())\n+        .isEqualTo(\"DefaultTracerProvider\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fd1551d0438802ad69c2572322340ab753e965"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk2ODcyNw==", "bodyText": "I think they make sure we don't actually add a dependency on the SDK from the API and don't know if any of our other tests do. So that's probably good value.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1904#discussion_r513968727", "createdAt": "2020-10-29T04:54:43Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/OpenTelemetryTest.java", "diffHunk": "@@ -59,10 +57,12 @@ void after() {\n \n   @Test\n   void testDefault() {\n-    assertThat(OpenTelemetry.getGlobalTracerProvider()).isInstanceOf(DefaultTracerProvider.class);\n+    assertThat(OpenTelemetry.getGlobalTracerProvider().getClass().getSimpleName())\n+        .isEqualTo(\"DefaultTracerProvider\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODYyMg=="}, "originalCommit": {"oid": "73fd1551d0438802ad69c2572322340ab753e965"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2033, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}