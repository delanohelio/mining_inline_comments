{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDI0NDcy", "number": 1369, "title": "support aws plugins EC2/ECS/Beanstalk", "bodyText": "Description: Add AWS EC2/ECS/Beanstack resources support\nThe previous PR #1365 is canceled.\nTesting: Verified in https://github.com/aws-samples/aws-xray-sdk-with-opentelemetry-sample/tree/both-otel-and-xray\nCan get AWS service resources in Span.\nDocumentation: https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-configuration.html#xray-sdk-java-configuration-plugins", "createdAt": "2020-06-23T08:58:52Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369", "merged": true, "mergeCommit": {"oid": "4008f7d5153e466b432da378e083620655ad99c8"}, "closed": true, "closedAt": "2020-06-25T23:17:27Z", "author": {"login": "wangzlei"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuBhK2AH2gAyNDM4NDI0NDcyOjY1MTc1ZDc4ZjNhYmE5Mzc4MmJkZWE4ZjJhODkzMDBmMmU5YzNhM2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu2Sr-gFqTQzNzg5OTQxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "65175d78f3aba93782bdea8f2a89300f2e9c3a3d", "author": {"user": {"login": "wangzlei", "name": "Lei Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/65175d78f3aba93782bdea8f2a89300f2e9c3a3d", "committedDate": "2020-06-23T08:52:44Z", "message": "support aws plugins EC2/ECS/Beanstalk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "author": {"user": {"login": "wangzlei", "name": "Lei Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/708e0a6ee073d775afaff5ffb23b7e701e05ecbc", "committedDate": "2020-06-23T08:56:09Z", "message": "support aws plugins EC2/ECS/Beanstalk"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTg0NTU1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#pullrequestreview-435584555", "createdAt": "2020-06-23T09:02:11Z", "commit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowMjoxMVrOGngF3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMDozM1rOGngZfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3MzQzOA==", "bodyText": "This is ok but I would just pass System.getEnv() map. Gives a bit more test coverage", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444073438", "createdAt": "2020-06-23T09:02:11Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class EcsResource extends AwsResource {\n+\n+  private static final Logger logger = Logger.getLogger(EcsResource.class.getName());\n+\n+  private static final String ECS_METADATA_KEY_V4 = \"ECS_CONTAINER_METADATA_URI_V4\";\n+  private static final String ECS_METADATA_KEY_V3 = \"ECS_CONTAINER_METADATA_URI\";\n+  private static final String CONTAINER_ID = \"container.id\";\n+\n+  private final DockerHelper dockerHelper;\n+  private final String uriV3;\n+  private final String uriV4;\n+\n+  EcsResource() {\n+    this(\n+        new DockerHelper(), System.getenv(ECS_METADATA_KEY_V3), System.getenv(ECS_METADATA_KEY_V4));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NTc2Ng==", "bodyText": "Prefer guava (I think this is leaked into our test classpath but in general we don't use Apache commons)\nhttps://guava.dev/releases/21.0/api/docs/com/google/common/io/Files.html#write-java.lang.CharSequence-java.io.File-java.nio.charset.Charset-", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444075766", "createdAt": "2020-06-23T09:06:00Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NjY5MQ==", "bodyText": "I realized we can use Guava's Files readalllines if we want.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444076691", "createdAt": "2020-06-23T09:07:38Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class DockerHelper {\n+\n+  private static final Logger logger = Logger.getLogger(DockerHelper.class.getName());\n+  private static final int CONTAINER_ID_LENGTH = 64;\n+  private static final String DEFAULT_CGROUP_PATH = \"/proc/self/cgroup\";\n+\n+  private final String cgroupPath;\n+\n+  DockerHelper() {\n+    this(DEFAULT_CGROUP_PATH);\n+  }\n+\n+  @VisibleForTesting\n+  DockerHelper(String cgroupPath) {\n+    this.cgroupPath = cgroupPath;\n+  }\n+\n+  /**\n+   * Get docker container id from local cgroup file.\n+   *\n+   * @return docker container ID\n+   */\n+  @SuppressWarnings(\"DefaultCharset\")\n+  public String getContainerId() {\n+    try (BufferedReader br = new BufferedReader(new FileReader(cgroupPath))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NzY4MQ==", "bodyText": "There should be assertThat(metadata).isEmpty", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444077681", "createdAt": "2020-06-23T09:09:18Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class BeanstalkResourceTest {\n+\n+  @Rule public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCreateAttributes() throws IOException {\n+    File file = tempFolder.newFile(\"beanstalk.config\");\n+    FileUtils.writeStringToFile(\n+        file,\n+        \"{\\\"noise\\\": \\\"noise\\\", \\\"deployment_id\\\":4,\\\"\"\n+            + \"version_label\\\":\\\"2\\\",\\\"environment_name\\\":\\\"HttpSubscriber-env\\\"}\");\n+    BeanstalkResource populator = new BeanstalkResource(file.getPath());\n+    Map<String, AttributeValue> metadata = populator.createAttributes();\n+\n+    assertThat(metadata.size()).isEqualTo(3);\n+    assertThat(metadata.get(ResourceConstants.SERVICE_INSTANCE).getStringValue()).isEqualTo(\"4\");\n+    assertThat(metadata.get(ResourceConstants.SERVICE_VERSION).getStringValue()).isEqualTo(\"2\");\n+    assertThat(metadata.get(ResourceConstants.SERVICE_NAMESPACE).getStringValue())\n+        .isEqualTo(\"HttpSubscriber-env\");\n+  }\n+\n+  @Test\n+  public void testConfigFileMissing() throws IOException {\n+    BeanstalkResource populator = new BeanstalkResource(\"a_file_never_existing\");\n+    Map<String, AttributeValue> metadata = populator.createAttributes();\n+    assertThat(metadata.size()).isEqualTo(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3ODQ2MQ==", "bodyText": "Just do assertThat(metadata).containsExactly for all the map assertions in the PR", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444078461", "createdAt": "2020-06-23T09:10:33Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/BeanstalkResourceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class BeanstalkResourceTest {\n+\n+  @Rule public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCreateAttributes() throws IOException {\n+    File file = tempFolder.newFile(\"beanstalk.config\");\n+    FileUtils.writeStringToFile(\n+        file,\n+        \"{\\\"noise\\\": \\\"noise\\\", \\\"deployment_id\\\":4,\\\"\"\n+            + \"version_label\\\":\\\"2\\\",\\\"environment_name\\\":\\\"HttpSubscriber-env\\\"}\");\n+    BeanstalkResource populator = new BeanstalkResource(file.getPath());\n+    Map<String, AttributeValue> metadata = populator.createAttributes();\n+\n+    assertThat(metadata.size()).isEqualTo(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTkzMzA3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#pullrequestreview-435593307", "createdAt": "2020-06-23T09:13:15Z", "commit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMzoxNVrOGngf3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMzoxNVrOGngf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MDA5Mw==", "bodyText": "According to the specifications there is not container.id field. Do you have a use case for this field?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r444080093", "createdAt": "2020-06-23T09:13:15Z", "author": {"login": "thisthat"}, "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class EcsResource extends AwsResource {\n+\n+  private static final Logger logger = Logger.getLogger(EcsResource.class.getName());\n+\n+  private static final String ECS_METADATA_KEY_V4 = \"ECS_CONTAINER_METADATA_URI_V4\";\n+  private static final String ECS_METADATA_KEY_V3 = \"ECS_CONTAINER_METADATA_URI\";\n+  private static final String CONTAINER_ID = \"container.id\";\n+\n+  private final DockerHelper dockerHelper;\n+  private final String uriV3;\n+  private final String uriV4;\n+\n+  EcsResource() {\n+    this(\n+        new DockerHelper(), System.getenv(ECS_METADATA_KEY_V3), System.getenv(ECS_METADATA_KEY_V4));\n+  }\n+\n+  @VisibleForTesting\n+  EcsResource(DockerHelper dockerHelper, String uriV3, String uriV4) {\n+    this.dockerHelper = dockerHelper;\n+    this.uriV3 = uriV3;\n+    this.uriV4 = uriV4;\n+  }\n+\n+  @Override\n+  Map<String, AttributeValue> createAttributes() {\n+    // Check whether we are actually on ECS\n+    if ((Strings.isNullOrEmpty(uriV3) && Strings.isNullOrEmpty(uriV4))) {\n+      return ImmutableMap.of();\n+    }\n+\n+    ImmutableMap.Builder<String, AttributeValue> resourceAttributes = ImmutableMap.builder();\n+    try {\n+      String hostName = InetAddress.getLocalHost().getHostName();\n+      resourceAttributes.put(ResourceConstants.CONTAINER_NAME, stringAttributeValue(hostName));\n+    } catch (UnknownHostException e) {\n+      logger.log(Level.WARNING, \"Could not get docker container name from hostname.\", e);\n+    }\n+\n+    String containerId = dockerHelper.getContainerId();\n+    if (!Strings.isNullOrEmpty(containerId)) {\n+      resourceAttributes.put(CONTAINER_ID, stringAttributeValue(containerId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708e0a6ee073d775afaff5ffb23b7e701e05ecbc"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "author": {"user": {"login": "wangzlei", "name": "Lei Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d34260c14b5085dbf187c0f7c6843b6f0fb5cbab", "committedDate": "2020-06-24T19:54:15Z", "message": "change to Guava Files, change Map to Attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MjM2ODI3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#pullrequestreview-437236827", "createdAt": "2020-06-25T07:32:23Z", "commit": {"oid": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNzozMjoyNFrOGouugA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNzozMjoyNFrOGouugA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2MTc5Mg==", "bodyText": "Avoid unnecessary null checks, sysEnv can't be null (unless a unit test passes it randomly which is something we don't need to worry about in business logic)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445361792", "createdAt": "2020-06-25T07:32:24Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/EcsResource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class EcsResource extends AwsResource {\n+\n+  private static final Logger logger = Logger.getLogger(EcsResource.class.getName());\n+\n+  private static final String ECS_METADATA_KEY_V4 = \"ECS_CONTAINER_METADATA_URI_V4\";\n+  private static final String ECS_METADATA_KEY_V3 = \"ECS_CONTAINER_METADATA_URI\";\n+\n+  private final Map<String, String> sysEnv;\n+\n+  EcsResource() {\n+    this(System.getenv());\n+  }\n+\n+  @VisibleForTesting\n+  EcsResource(Map<String, String> sysEnv) {\n+    this.sysEnv = sysEnv;\n+  }\n+\n+  @Override\n+  Attributes createAttributes() {\n+    if (!isOnEcs()) {\n+      return Attributes.empty();\n+    }\n+\n+    Attributes.Builder attrBuilders = Attributes.newBuilder();\n+    try {\n+      String hostName = InetAddress.getLocalHost().getHostName();\n+      attrBuilders.setAttribute(ResourceConstants.CONTAINER_NAME, hostName);\n+\n+    } catch (UnknownHostException e) {\n+      logger.log(Level.WARNING, \"Could not get docker container name from hostname.\", e);\n+    }\n+\n+    return attrBuilders.build();\n+  }\n+\n+  private boolean isOnEcs() {\n+    if (sysEnv == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MjUxOTAy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#pullrequestreview-437251902", "createdAt": "2020-06-25T07:54:35Z", "commit": {"oid": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNzo1NDozNlrOGovdYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNzo1NDozNlrOGovdYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM3Mzc5NQ==", "bodyText": "This class is not used after the removal of container.id. I would remove it and reintroduce it when your suggested spec changes are accepted :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445373795", "createdAt": "2020-06-25T07:54:36Z", "author": {"login": "thisthat"}, "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODg1OTA3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#pullrequestreview-437885907", "createdAt": "2020-06-25T21:53:48Z", "commit": {"oid": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo1Mzo0OFrOGpNIqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo1Mzo0OFrOGpNIqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2MDAwOA==", "bodyText": "This makes me think that a \"merge\" function might be useful on the Attributes, like we have on the Resource itself.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#discussion_r445860008", "createdAt": "2020-06-25T21:53:48Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/AwsResource.java", "diffHunk": "@@ -31,25 +30,26 @@\n    * environment, e.g., metadata for the instance if the app is running on EC2.\n    */\n   public static Resource create() {\n-    return create(new Ec2Resource());\n+    return create(new Ec2Resource(), new EcsResource(), new BeanstalkResource());\n   }\n \n   @VisibleForTesting\n   static Resource create(AwsResource... populators) {\n-    Map<String, AttributeValue> attrMap = new LinkedHashMap<>();\n-\n+    final Attributes.Builder attrBuilder = Attributes.newBuilder();\n     for (AwsResource populator : populators) {\n-      attrMap.putAll(populator.createAttributes());\n-    }\n-\n-    Attributes.Builder attrBuilder = Attributes.newBuilder();\n-    for (Map.Entry<String, AttributeValue> attr : attrMap.entrySet()) {\n-      attrBuilder.setAttribute(attr.getKey(), attr.getValue());\n+      Attributes attrs = populator.createAttributes();\n+      attrs.forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d34260c14b5085dbf187c0f7c6843b6f0fb5cbab"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15901eceaf4282cfd6a7e09c5d618553d1e7cb9e", "author": {"user": {"login": "wangzlei", "name": "Lei Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15901eceaf4282cfd6a7e09c5d618553d1e7cb9e", "committedDate": "2020-06-25T22:13:38Z", "message": "Remove DockerHelper until has container.id in sematic conventions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODk5NDE2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1369#pullrequestreview-437899416", "createdAt": "2020-06-25T22:21:53Z", "commit": {"oid": "15901eceaf4282cfd6a7e09c5d618553d1e7cb9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2492, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}