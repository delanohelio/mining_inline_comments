{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMjA5NTc1", "number": 743, "title": "Add AWS support to SDK", "bodyText": "Provides Resource label population using the EC2 metadata endpoint. Provides IDs generator compatible with AWS X-Ray.", "createdAt": "2020-01-09T23:35:20Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743", "merged": true, "mergeCommit": {"oid": "6859896f31bc3db74d3f4375a02a1555585fc62f"}, "closed": true, "closedAt": "2020-01-13T19:21:28Z", "author": {"login": "kbrockhoff"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4I71YgH2gAyMzYxMjA5NTc1OmI1ZjJiNjU1NDcwZmQ4YTYwMjYxNDk4MmQzM2M5NWUyODM5ZmIyZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6BT83AH2gAyMzYxMjA5NTc1OmEwMjVjNzAxMjFlY2Y2MzM4MTYxMWM2OGE1MWFlM2ZjOGJkMGQ4YmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b5f2b655470fd8a602614982d33c95e2839fb2dc", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b5f2b655470fd8a602614982d33c95e2839fb2dc", "committedDate": "2020-01-07T22:59:17Z", "message": "Initial dev of XRay ids generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e39200179b33c3deca0c4bae2fbee089dfceccf5", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e39200179b33c3deca0c4bae2fbee089dfceccf5", "committedDate": "2020-01-08T15:52:29Z", "message": "Initial dev of EC2 resource labels retrieval and population"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161c11712f94d1eadf28a774bfddd8e58aae3922", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/161c11712f94d1eadf28a774bfddd8e58aae3922", "committedDate": "2020-01-09T23:30:33Z", "message": "Merge branch 'master' into add-aws-support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODgzNTg3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#pullrequestreview-340883587", "createdAt": "2020-01-09T23:42:52Z", "commit": {"oid": "161c11712f94d1eadf28a774bfddd8e58aae3922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzo0Mjo1MlrOFcGqxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzo0Mjo1MlrOFcGqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxMzcwMA==", "bodyText": "will any of this need to change for the AWS 2.x SDK? If so, we might want to label this as a 1.x version in the module and description.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365013700", "createdAt": "2020-01-09T23:42:52Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/aws_support/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = 'OpenTelemetry SDK AWS Support'\n+\n+sourceCompatibility = 1.8\n+targetCompatibility = 1.8\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk')\n+\n+    implementation libraries.guava,\n+            libraries.disruptor\n+\n+    implementation 'com.amazonaws:aws-xray-recorder-sdk-core:2.4.0'\n+    implementation 'com.amazonaws:aws-java-sdk-core:1.11.701'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161c11712f94d1eadf28a774bfddd8e58aae3922"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/00f1b4609ca9d7161b808eef94276e1ca547764b", "committedDate": "2020-01-10T14:12:35Z", "message": "renamed module to emphasize it uses v1 of AWS SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQ3MzY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#pullrequestreview-341247369", "createdAt": "2020-01-10T15:44:12Z", "commit": {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0NDoxMlrOFcX8ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1MjoyNFrOFcYN0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Njc0MQ==", "bodyText": "Why this dependency?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365296741", "createdAt": "2020-01-10T15:44:12Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/aws_v1_support/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = 'OpenTelemetry SDK AWS SDK v1.x Support'\n+\n+sourceCompatibility = 1.8\n+targetCompatibility = 1.8\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk')\n+\n+    implementation libraries.guava,\n+            libraries.disruptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODE0OA==", "bodyText": "This seems to me that you always generate the same traceid, please comment and explain if I understand wrong.\nMaybe consider a different PR for id generator and ec2 resource.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365298148", "createdAt": "2020-01-10T15:46:50Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/AwsXRayIdsGenerator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import com.amazonaws.xray.ThreadLocalStorage;\n+import com.amazonaws.xray.entities.TraceID;\n+import io.opentelemetry.sdk.trace.IdsGenerator;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+/**\n+ * Generates tracing ids compatible with the AWS X-Ray tracing service. In the X-Ray system the\n+ * first 32 bits of the trace id are the Unix epoch time in secords. Spans (AWS calls them segments)\n+ * submit with trace id timestamps outside of the last 30 days are rejected.\n+ *\n+ * @see <a\n+ *     href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\">Generating\n+ *     Trace IDs</a>\n+ */\n+public class AwsXRayIdsGenerator implements IdsGenerator {\n+\n+  @Override\n+  public SpanId generateSpanId() {\n+    String awsIdStr = generateId();\n+    return SpanId.fromLowerBase16(awsIdStr, 0);\n+  }\n+\n+  @Override\n+  public TraceId generateTraceId() {\n+    String traceIdStr = new TraceID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5OTI2NQ==", "bodyText": "why public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365299265", "createdAt": "2020-01-10T15:48:55Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+\n+import com.amazonaws.util.EC2MetadataUtils;\n+import com.amazonaws.util.EC2MetadataUtils.InstanceInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/** Provides for lookup and population of {@link Resource} labels when running on AWS EC2. */\n+public class Ec2Resource {\n+\n+  /** OpenTelemetry semantic convention identifier for AWS cloud. */\n+  public static final String CLOUD_PROVIDER_AWS = \"aws\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMTIwMg==", "bodyText": "split refactor this class:\npublic static Resource getResource() {\n  return getResourceFromInfoAndHost(EC2MetadataUtils.getInstanceInfo(),  EC2MetadataUtils.getLocalHostName());\n}\n\n// This can be tested now with a fake info and host.\nstatic Resource getResourceFromInfoAndHost(@Nullable InstanceInfo info, @Nullable String hostname) {\n    Map<String, String> labels = new HashMap<>();\n    labels.put(ResourceConstants.CLOUD_PROVIDER, CLOUD_PROVIDER_AWS);\n    if (info != null) {\n      labels.put(ResourceConstants.CLOUD_ACCOUNT, info.getAccountId());\n      labels.put(ResourceConstants.CLOUD_REGION, info.getRegion());\n      labels.put(ResourceConstants.CLOUD_ZONE, info.getAvailabilityZone());\n      labels.put(ResourceConstants.HOST_ID, info.getInstanceId());\n      labels.put(ResourceConstants.HOST_NAME, info.getPrivateIp());\n      labels.put(ResourceConstants.HOST_TYPE, info.getInstanceType());\n    }\n    if (!isNullOrEmpty(hostname)) {\n      labels.put(ResourceConstants.HOST_HOSTNAME, hostname);\n    }\n    return Resource.create(labels);\n}", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365301202", "createdAt": "2020-01-10T15:52:24Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+\n+import com.amazonaws.util.EC2MetadataUtils;\n+import com.amazonaws.util.EC2MetadataUtils.InstanceInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/** Provides for lookup and population of {@link Resource} labels when running on AWS EC2. */\n+public class Ec2Resource {\n+\n+  /** OpenTelemetry semantic convention identifier for AWS cloud. */\n+  public static final String CLOUD_PROVIDER_AWS = \"aws\";\n+\n+  /**\n+   * Returns a resource with all host and cloud labels populated with the information obtained from\n+   * the EC2 metadata endpoint.\n+   *\n+   * @return the resource\n+   */\n+  public static Resource getResource() {\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(ResourceConstants.CLOUD_PROVIDER, CLOUD_PROVIDER_AWS);\n+    addEc2InstanceData(labels);\n+    return Resource.create(labels);\n+  }\n+\n+  private static void addEc2InstanceData(Map<String, String> labels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMzE1NTMy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#pullrequestreview-341315532", "createdAt": "2020-01-10T17:34:11Z", "commit": {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzozNDoxMVrOFcbGhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzozNDoxMVrOFcbGhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0ODQ4NQ==", "bodyText": "can we add an assertion about the label key that was supplied?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365348485", "createdAt": "2020-01-10T17:34:11Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/aws_v1_support/src/test/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2ResourceTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.opentelemetry.sdk.resources.Resource;\n+import org.junit.Test;\n+\n+public class Ec2ResourceTest {\n+\n+  @Test\n+  public void shouldReturnResourceWithOnlyCloudProviderLabelIfNotRunningOnEc2() {\n+    Resource resource = Ec2Resource.getResource();\n+    assertEquals(1, resource.getLabels().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "badf99a033c5296ee0542ee30312471a83ce93e3", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/badf99a033c5296ee0542ee30312471a83ce93e3", "committedDate": "2020-01-10T20:51:38Z", "message": "fix code review issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDc2Mjcz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#pullrequestreview-341476273", "createdAt": "2020-01-10T23:40:48Z", "commit": {"oid": "badf99a033c5296ee0542ee30312471a83ce93e3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo0MDo0OVrOFciqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo0MTowNlrOFciqdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjMxNQ==", "bodyText": "use truth for asserts to be compatible with the rest of the code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365472315", "createdAt": "2020-01-10T23:40:49Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/aws_v1_support/src/test/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2ResourceTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.amazonaws.util.EC2MetadataUtils.InstanceInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import org.junit.Test;\n+\n+public class Ec2ResourceTest {\n+\n+  @Test\n+  public void shouldReturnResourceWithOnlyCloudProviderLabelIfNotRunningOnEc2() {\n+    Resource resource = Ec2Resource.getResource();\n+    assertEquals(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "badf99a033c5296ee0542ee30312471a83ce93e3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjM3Mw==", "bodyText": "This class may deserve some tests :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365472373", "createdAt": "2020-01-10T23:41:06Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/AwsXRayIdsGenerator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import com.amazonaws.xray.ThreadLocalStorage;\n+import io.opentelemetry.sdk.trace.IdsGenerator;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+/**\n+ * Generates tracing ids compatible with the AWS X-Ray tracing service. In the X-Ray system the\n+ * first 32 bits of the trace id are the Unix epoch time in secords. Spans (AWS calls them segments)\n+ * submit with trace id timestamps outside of the last 30 days are rejected.\n+ *\n+ * @see <a\n+ *     href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\">Generating\n+ *     Trace IDs</a>\n+ */\n+public class AwsXRayIdsGenerator implements IdsGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "badf99a033c5296ee0542ee30312471a83ce93e3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b97cfc48e7bb2bb9359bb69714d047fe2ceb76d", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2b97cfc48e7bb2bb9359bb69714d047fe2ceb76d", "committedDate": "2020-01-11T14:51:58Z", "message": "fix test code review issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDExMzEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#pullrequestreview-342011313", "createdAt": "2020-01-13T17:28:04Z", "commit": {"oid": "2b97cfc48e7bb2bb9359bb69714d047fe2ceb76d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzoyODowNVrOFc-lvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzoyODowNVrOFc-lvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyOTkxNg==", "bodyText": "/** Unit tests for {@link AwsXRayIdsGenerator}. */\n@RunWith(JUnit4.class)\nFor the other test class as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365929916", "createdAt": "2020-01-13T17:28:05Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/aws_v1_support/src/test/java/io/opentelemetry/sdk/contrib/trace/aws/AwsXRayIdsGeneratorTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.sdk.trace.IdsGenerator;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Set;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link AwsXRayIdsGenerator}. */\n+public class AwsXRayIdsGeneratorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b97cfc48e7bb2bb9359bb69714d047fe2ceb76d"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a025c70121ecf63381611c68a51ae3fc8bd0d8be", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a025c70121ecf63381611c68a51ae3fc8bd0d8be", "committedDate": "2020-01-13T19:14:14Z", "message": "Add RunWith annotation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3431, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}