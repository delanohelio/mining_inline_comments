{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDQyOTM4", "number": 1044, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0Mzo0NVrODr37Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0ODo1MFrODr3_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMxNjc0OnYy", "diffSide": "RIGHT", "path": "RELEASING.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0Mzo0NlrOF8eXpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDoxODozMFrOF8fBSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NjQ1NA==", "bodyText": "This sounds great to me, and it sounds we might use the same pattern on other languages, btw (as a recommendation, and if it applies, of course).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398956454", "createdAt": "2020-03-26T23:43:46Z", "author": {"login": "carlosalberto"}, "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f6e9f9d117211415115f93245893b4b3335d75"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NzExNA==", "bodyText": "yes, already applied this to proto :). Please push this to python :))", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398967114", "createdAt": "2020-03-27T00:18:30Z", "author": {"login": "bogdandrutu"}, "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NjQ1NA=="}, "originalCommit": {"oid": "c1f6e9f9d117211415115f93245893b4b3335d75"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMyNTE5OnYy", "diffSide": "RIGHT", "path": "RELEASING.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0ODowM1rOF8ec4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDoxNjowNlrOF8e-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Nzc5Mw==", "bodyText": "I still think we should have the version change more automated (without the deployment part). In Maven there's a plugin to update all artifact versions, which doesn't seem to be the case for Gradle (that I know). Should we create an issue for this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398957793", "createdAt": "2020-03-26T23:48:03Z", "author": {"login": "carlosalberto"}, "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).\n+\n+In this section upstream repository refers to the main opentelemetry-java github repository.\n+\n+Before any push to the upstream repository you need to create a\n+[personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line).\n+\n+1.  Create the release branch and push it to GitHub:\n+\n+    ```bash\n+    $ MAJOR=0 MINOR=4 PATCH=0 # Set appropriately for new release\n+    $ VERSION_FILES=(\n+      build.gradle\n+      )\n+    $ git checkout -b v$MAJOR.$MINOR.x master\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+    The branch will be automatically protected by the GitHub branch protection rule for release\n+    branches.\n+\n+2.  For `master` branch:\n+\n+    -   Change root build files to the next minor snapshot (e.g.\n+        `0.4.0-SNAPSHOT`).\n+\n+    ```bash\n+    $ git checkout -b bump-version master\n+    # Change version to next minor (and keep -SNAPSHOT)\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$((MINOR+1)).0'\\1/' \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f6e9f9d117211415115f93245893b4b3335d75"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NjQ1OQ==", "bodyText": "Sure, for the moment I put the instructions to do this manually (automated :)) )", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398966459", "createdAt": "2020-03-27T00:16:06Z", "author": {"login": "bogdandrutu"}, "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).\n+\n+In this section upstream repository refers to the main opentelemetry-java github repository.\n+\n+Before any push to the upstream repository you need to create a\n+[personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line).\n+\n+1.  Create the release branch and push it to GitHub:\n+\n+    ```bash\n+    $ MAJOR=0 MINOR=4 PATCH=0 # Set appropriately for new release\n+    $ VERSION_FILES=(\n+      build.gradle\n+      )\n+    $ git checkout -b v$MAJOR.$MINOR.x master\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+    The branch will be automatically protected by the GitHub branch protection rule for release\n+    branches.\n+\n+2.  For `master` branch:\n+\n+    -   Change root build files to the next minor snapshot (e.g.\n+        `0.4.0-SNAPSHOT`).\n+\n+    ```bash\n+    $ git checkout -b bump-version master\n+    # Change version to next minor (and keep -SNAPSHOT)\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$((MINOR+1)).0'\\1/' \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Nzc5Mw=="}, "originalCommit": {"oid": "c1f6e9f9d117211415115f93245893b4b3335d75"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMyNjM5OnYy", "diffSide": "RIGHT", "path": "RELEASING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0ODozM1rOF8ediw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0ODozM1rOF8ediw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Nzk2Mw==", "bodyText": "+1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398957963", "createdAt": "2020-03-26T23:48:33Z", "author": {"login": "carlosalberto"}, "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).\n+\n+In this section upstream repository refers to the main opentelemetry-java github repository.\n+\n+Before any push to the upstream repository you need to create a\n+[personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line).\n+\n+1.  Create the release branch and push it to GitHub:\n+\n+    ```bash\n+    $ MAJOR=0 MINOR=4 PATCH=0 # Set appropriately for new release\n+    $ VERSION_FILES=(\n+      build.gradle\n+      )\n+    $ git checkout -b v$MAJOR.$MINOR.x master\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+    The branch will be automatically protected by the GitHub branch protection rule for release\n+    branches.\n+\n+2.  For `master` branch:\n+\n+    -   Change root build files to the next minor snapshot (e.g.\n+        `0.4.0-SNAPSHOT`).\n+\n+    ```bash\n+    $ git checkout -b bump-version master\n+    # Change version to next minor (and keep -SNAPSHOT)\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$((MINOR+1)).0'\\1/' \\\n+      \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Start $MAJOR.$((MINOR+1)).0 development cycle\"\n+    ```\n+\n+    -   Go through PR review and push the master branch to GitHub.\n+       \n+3.  For `vMajor.Minor.x` branch:\n+\n+    -   Change root build files to remove \"-SNAPSHOT\" for the next release\n+        version (e.g. `0.3.0`). Commit the result and make a tag:\n+\n+    ```bash\n+    $ git checkout -b release v$MAJOR.$MINOR.x\n+    # Change version to remove -SNAPSHOT\n+    $ sed -i 's/-SNAPSHOT\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/\\1/' \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Bump version to $MAJOR.$MINOR.$PATCH\"\n+    $ git tag -a v$MAJOR.$MINOR.$PATCH -m \"Version $MAJOR.$MINOR.$PATCH\"\n+    ```\n+\n+    -   Change root build files to the next snapshot version (e.g.\n+        `0.3.1-SNAPSHOT`). Commit the result:\n+\n+    ```bash\n+    # Change version to next patch and add -SNAPSHOT\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT'\\1/' \\\n+     \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Bump version to $MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT\"\n+    ```\n+\n+    -   Go through PR review and push the release tag and updated release branch\n+        to GitHub (note: do not squash the commits when you merge otherwise you\n+        will lose the release tag):\n+\n+    ```bash\n+    $ git checkout v$MAJOR.$MINOR.x\n+    $ git merge --ff-only release", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f6e9f9d117211415115f93245893b4b3335d75"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMyNjc5OnYy", "diffSide": "RIGHT", "path": "RELEASING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0ODo1MFrOF8ed0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo0ODo1MFrOF8ed0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1ODAzMw==", "bodyText": "+1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398958033", "createdAt": "2020-03-26T23:48:50Z", "author": {"login": "carlosalberto"}, "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).\n+\n+In this section upstream repository refers to the main opentelemetry-java github repository.\n+\n+Before any push to the upstream repository you need to create a\n+[personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line).\n+\n+1.  Create the release branch and push it to GitHub:\n+\n+    ```bash\n+    $ MAJOR=0 MINOR=4 PATCH=0 # Set appropriately for new release\n+    $ VERSION_FILES=(\n+      build.gradle\n+      )\n+    $ git checkout -b v$MAJOR.$MINOR.x master\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+    The branch will be automatically protected by the GitHub branch protection rule for release\n+    branches.\n+\n+2.  For `master` branch:\n+\n+    -   Change root build files to the next minor snapshot (e.g.\n+        `0.4.0-SNAPSHOT`).\n+\n+    ```bash\n+    $ git checkout -b bump-version master\n+    # Change version to next minor (and keep -SNAPSHOT)\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$((MINOR+1)).0'\\1/' \\\n+      \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Start $MAJOR.$((MINOR+1)).0 development cycle\"\n+    ```\n+\n+    -   Go through PR review and push the master branch to GitHub.\n+       \n+3.  For `vMajor.Minor.x` branch:\n+\n+    -   Change root build files to remove \"-SNAPSHOT\" for the next release\n+        version (e.g. `0.3.0`). Commit the result and make a tag:\n+\n+    ```bash\n+    $ git checkout -b release v$MAJOR.$MINOR.x\n+    # Change version to remove -SNAPSHOT\n+    $ sed -i 's/-SNAPSHOT\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/\\1/' \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Bump version to $MAJOR.$MINOR.$PATCH\"\n+    $ git tag -a v$MAJOR.$MINOR.$PATCH -m \"Version $MAJOR.$MINOR.$PATCH\"\n+    ```\n+\n+    -   Change root build files to the next snapshot version (e.g.\n+        `0.3.1-SNAPSHOT`). Commit the result:\n+\n+    ```bash\n+    # Change version to next patch and add -SNAPSHOT\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT'\\1/' \\\n+     \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Bump version to $MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT\"\n+    ```\n+\n+    -   Go through PR review and push the release tag and updated release branch\n+        to GitHub (note: do not squash the commits when you merge otherwise you\n+        will lose the release tag):\n+\n+    ```bash\n+    $ git checkout v$MAJOR.$MINOR.x\n+    $ git merge --ff-only release\n+    $ git push upstream v$MAJOR.$MINOR.$PATCH\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+\n+## Announcement\n+   \n+Once deployment is done by Circle CI (controlled by the Bintray plugin) , go to Github [release\n+page](https://github.com/open-telemetry/opentelemetry-java/releases), press\n+`Draft a new release` to write release notes about the new release.\n+\n+You can use `git log upstream/v$MAJOR.$((MINOR-1)).x..upstream/v$MAJOR.$MINOR.x --graph --first-parent`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f6e9f9d117211415115f93245893b4b3335d75"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 793, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}