{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDE4NjQ4", "number": 2324, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDo1ODozOFrOFGpfqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjo0MDozNVrOFGzI2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE1NjI3OnYy", "diffSide": "RIGHT", "path": "api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDo1ODozOFrOIHwE2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTowMToyOVrOIIEXTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg==", "bodyText": "Maybe add an @see for DefaultOpenTelemetry.builder()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r544998616", "createdAt": "2020-12-17T10:58:38Z", "author": {"login": "Oberon00"}, "path": "api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java", "diffHunk": "@@ -15,12 +15,14 @@\n \n /** Builder class for {@link DefaultOpenTelemetry}. */\n @SuppressWarnings(\"deprecation\")\n-public class DefaultOpenTelemetryBuilder\n+public final class DefaultOpenTelemetryBuilder\n     implements OpenTelemetryBuilder<DefaultOpenTelemetryBuilder> {\n-  protected ContextPropagators propagators = ContextPropagators.noop();\n+  private ContextPropagators propagators = ContextPropagators.noop();\n+  private TracerProvider tracerProvider;\n+  private MeterProvider meterProvider;\n \n-  protected TracerProvider tracerProvider;\n-  protected MeterProvider meterProvider;\n+  // Disallow direct initialization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE5NDgyMg==", "bodyText": "Is not public, see does not work with c-style comments", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545194822", "createdAt": "2020-12-17T15:49:12Z", "author": {"login": "bogdandrutu"}, "path": "api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java", "diffHunk": "@@ -15,12 +15,14 @@\n \n /** Builder class for {@link DefaultOpenTelemetry}. */\n @SuppressWarnings(\"deprecation\")\n-public class DefaultOpenTelemetryBuilder\n+public final class DefaultOpenTelemetryBuilder\n     implements OpenTelemetryBuilder<DefaultOpenTelemetryBuilder> {\n-  protected ContextPropagators propagators = ContextPropagators.noop();\n+  private ContextPropagators propagators = ContextPropagators.noop();\n+  private TracerProvider tracerProvider;\n+  private MeterProvider meterProvider;\n \n-  protected TracerProvider tracerProvider;\n-  protected MeterProvider meterProvider;\n+  // Disallow direct initialization.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg=="}, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE5OTU5Nw==", "bodyText": "You may as well add javadoc to a non-public method. It is clickable in IntelliJ at least \ud83d\ude03", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545199597", "createdAt": "2020-12-17T15:55:01Z", "author": {"login": "Oberon00"}, "path": "api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java", "diffHunk": "@@ -15,12 +15,14 @@\n \n /** Builder class for {@link DefaultOpenTelemetry}. */\n @SuppressWarnings(\"deprecation\")\n-public class DefaultOpenTelemetryBuilder\n+public final class DefaultOpenTelemetryBuilder\n     implements OpenTelemetryBuilder<DefaultOpenTelemetryBuilder> {\n-  protected ContextPropagators propagators = ContextPropagators.noop();\n+  private ContextPropagators propagators = ContextPropagators.noop();\n+  private TracerProvider tracerProvider;\n+  private MeterProvider meterProvider;\n \n-  protected TracerProvider tracerProvider;\n-  protected MeterProvider meterProvider;\n+  // Disallow direct initialization.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg=="}, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyODQyNw==", "bodyText": "I may, but also this is the new common pattern used everywhere, and we don't do the same thing everywhere :))", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545328427", "createdAt": "2020-12-17T18:57:17Z", "author": {"login": "bogdandrutu"}, "path": "api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java", "diffHunk": "@@ -15,12 +15,14 @@\n \n /** Builder class for {@link DefaultOpenTelemetry}. */\n @SuppressWarnings(\"deprecation\")\n-public class DefaultOpenTelemetryBuilder\n+public final class DefaultOpenTelemetryBuilder\n     implements OpenTelemetryBuilder<DefaultOpenTelemetryBuilder> {\n-  protected ContextPropagators propagators = ContextPropagators.noop();\n+  private ContextPropagators propagators = ContextPropagators.noop();\n+  private TracerProvider tracerProvider;\n+  private MeterProvider meterProvider;\n \n-  protected TracerProvider tracerProvider;\n-  protected MeterProvider meterProvider;\n+  // Disallow direct initialization.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg=="}, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMTAyMg==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545331022", "createdAt": "2020-12-17T19:01:29Z", "author": {"login": "bogdandrutu"}, "path": "api/all/src/main/java/io/opentelemetry/api/DefaultOpenTelemetryBuilder.java", "diffHunk": "@@ -15,12 +15,14 @@\n \n /** Builder class for {@link DefaultOpenTelemetry}. */\n @SuppressWarnings(\"deprecation\")\n-public class DefaultOpenTelemetryBuilder\n+public final class DefaultOpenTelemetryBuilder\n     implements OpenTelemetryBuilder<DefaultOpenTelemetryBuilder> {\n-  protected ContextPropagators propagators = ContextPropagators.noop();\n+  private ContextPropagators propagators = ContextPropagators.noop();\n+  private TracerProvider tracerProvider;\n+  private MeterProvider meterProvider;\n \n-  protected TracerProvider tracerProvider;\n-  protected MeterProvider meterProvider;\n+  // Disallow direct initialization.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5ODYxNg=="}, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE2Mjg5OnYy", "diffSide": "RIGHT", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDo1OTo1NlrOIHwIZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTowMTozOFrOIIEXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5OTUyNA==", "bodyText": "I think this change is unrelated and should not be in this PR.\nAlso, the ClassCastException may actually be more informative (although not necessarily more clear to the user).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r544999524", "createdAt": "2020-12-17T10:59:56Z", "author": {"login": "Oberon00"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -32,18 +42,24 @@ public static OpenTelemetrySdkBuilder builder() {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n+    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMTEyNQ==", "bodyText": "Removed for the moment.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545331125", "createdAt": "2020-12-17T19:01:38Z", "author": {"login": "bogdandrutu"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -32,18 +42,24 @@ public static OpenTelemetrySdkBuilder builder() {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n+    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5OTUyNA=="}, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE2Njg4OnYy", "diffSide": "RIGHT", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowMDo1NFrOIHwKtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozMDoxOFrOIIDGjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDExOA==", "bodyText": "I'm surprised. Why is it possible to remove this cast here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545000118", "createdAt": "2020-12-17T11:00:54Z", "author": {"login": "Oberon00"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -32,18 +42,24 @@ public static OpenTelemetrySdkBuilder builder() {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n+    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();\n+    if (!(openTelemetry instanceof OpenTelemetrySdk)) {\n+      throw new IllegalStateException(\n+          \"Trying to access global OpenTelemetrySdk but global OpenTelemetry is not an \"\n+              + \"instance created by this SDK.\");\n+    }\n+    return (OpenTelemetrySdk) openTelemetry;\n   }\n \n   /** Returns the global {@link SdkTracerManagement}. */\n   public static SdkTracerManagement getGlobalTracerManagement() {\n     TracerProvider tracerProvider = GlobalOpenTelemetry.get().getTracerProvider();\n     if (!(tracerProvider instanceof ObfuscatedTracerProvider)) {\n       throw new IllegalStateException(\n-          \"Trying to access global TracerSdkManagement but global TracerProvider is not an \"\n+          \"Trying to access global SdkTracerManagement but global TracerProvider is not an \"\n               + \"instance created by this SDK.\");\n     }\n-    return (SdkTracerProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMzcyNw==", "bodyText": "This PR changes the unobfuscate() method to return an SdkTracerProvider, rather than just TracerProvider", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545233727", "createdAt": "2020-12-17T16:39:57Z", "author": {"login": "jkwatson"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -32,18 +42,24 @@ public static OpenTelemetrySdkBuilder builder() {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n+    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();\n+    if (!(openTelemetry instanceof OpenTelemetrySdk)) {\n+      throw new IllegalStateException(\n+          \"Trying to access global OpenTelemetrySdk but global OpenTelemetry is not an \"\n+              + \"instance created by this SDK.\");\n+    }\n+    return (OpenTelemetrySdk) openTelemetry;\n   }\n \n   /** Returns the global {@link SdkTracerManagement}. */\n   public static SdkTracerManagement getGlobalTracerManagement() {\n     TracerProvider tracerProvider = GlobalOpenTelemetry.get().getTracerProvider();\n     if (!(tracerProvider instanceof ObfuscatedTracerProvider)) {\n       throw new IllegalStateException(\n-          \"Trying to access global TracerSdkManagement but global TracerProvider is not an \"\n+          \"Trying to access global SdkTracerManagement but global TracerProvider is not an \"\n               + \"instance created by this SDK.\");\n     }\n-    return (SdkTracerProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDExOA=="}, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDM1MA==", "bodyText": "yes :) because now I can enforce that Builder only accepts SDK instances :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545310350", "createdAt": "2020-12-17T18:30:18Z", "author": {"login": "bogdandrutu"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -32,18 +42,24 @@ public static OpenTelemetrySdkBuilder builder() {\n \n   /** Returns the global {@link OpenTelemetrySdk}. */\n   public static OpenTelemetrySdk get() {\n-    return (OpenTelemetrySdk) GlobalOpenTelemetry.get();\n+    OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();\n+    if (!(openTelemetry instanceof OpenTelemetrySdk)) {\n+      throw new IllegalStateException(\n+          \"Trying to access global OpenTelemetrySdk but global OpenTelemetry is not an \"\n+              + \"instance created by this SDK.\");\n+    }\n+    return (OpenTelemetrySdk) openTelemetry;\n   }\n \n   /** Returns the global {@link SdkTracerManagement}. */\n   public static SdkTracerManagement getGlobalTracerManagement() {\n     TracerProvider tracerProvider = GlobalOpenTelemetry.get().getTracerProvider();\n     if (!(tracerProvider instanceof ObfuscatedTracerProvider)) {\n       throw new IllegalStateException(\n-          \"Trying to access global TracerSdkManagement but global TracerProvider is not an \"\n+          \"Trying to access global SdkTracerManagement but global TracerProvider is not an \"\n               + \"instance created by this SDK.\");\n     }\n-    return (SdkTracerProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDExOA=="}, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE3NDU3OnYy", "diffSide": "RIGHT", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowMjozNlrOIHwPGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowMjozNlrOIHwPGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTI0Mw==", "bodyText": "\ud83d\udc4d Nice type safety improvement!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545001243", "createdAt": "2020-12-17T11:02:36Z", "author": {"login": "Oberon00"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdkBuilder.java", "diffHunk": "@@ -5,18 +5,26 @@\n \n package io.opentelemetry.sdk;\n \n-import io.opentelemetry.api.DefaultOpenTelemetryBuilder;\n import io.opentelemetry.api.GlobalOpenTelemetry;\n import io.opentelemetry.api.metrics.MeterProvider;\n-import io.opentelemetry.api.trace.TracerProvider;\n import io.opentelemetry.context.propagation.ContextPropagators;\n import io.opentelemetry.sdk.OpenTelemetrySdk.ObfuscatedTracerProvider;\n import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n import io.opentelemetry.sdk.trace.SdkTracerProvider;\n import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-public final class OpenTelemetrySdkBuilder extends DefaultOpenTelemetryBuilder {\n+public final class OpenTelemetrySdkBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjczNjI2OnYy", "diffSide": "RIGHT", "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjo0MDozNVrOIH-dQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMTo1MVrOIIOMGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNDI0MA==", "bodyText": "@trask @anuraaga does this have any implications for the agent's usage of the obfuscated pattern?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545234240", "createdAt": "2020-12-17T16:40:35Z", "author": {"login": "jkwatson"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -97,7 +126,7 @@ public Tracer get(String instrumentationName, String instrumentationVersion) {\n       return delegate.get(instrumentationName, instrumentationVersion);\n     }\n \n-    public TracerProvider unobfuscate() {\n+    public SdkTracerProvider unobfuscate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MTk5NQ==", "bodyText": "Agent doesn't use this anymore :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2324#discussion_r545491995", "createdAt": "2020-12-18T00:21:51Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -97,7 +126,7 @@ public Tracer get(String instrumentationName, String instrumentationVersion) {\n       return delegate.get(instrumentationName, instrumentationVersion);\n     }\n \n-    public TracerProvider unobfuscate() {\n+    public SdkTracerProvider unobfuscate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNDI0MA=="}, "originalCommit": {"oid": "5696dce854a70cea316fe833c63991857b2681fc"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1740, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}