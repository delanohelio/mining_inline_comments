{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDU1OTE0", "number": 1484, "title": "Add new configuration option to limit the size of string attribute values", "bodyText": "Closes #1478\nI have implemented a simpler version for now, allowing to specify limits in characters, not bytes. I think it is not ideal, but probably an acceptable compromise between precision and complexity.", "createdAt": "2020-07-30T10:30:01Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484", "merged": true, "mergeCommit": {"oid": "70e84334c0cf24baec868ac59a19bb1ff72beafd"}, "closed": true, "closedAt": "2020-08-03T15:12:00Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc59DHvgH2gAyNDU5MDU1OTE0Ojk5ZGU4ZWE5NmIxZTRjYzY0ZGZiMmIwMDBiMTZhYzRiZjhjMWFkYmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7LzDaAFqTQ1OTc2OTE0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb", "committedDate": "2020-07-30T10:27:23Z", "message": "Add new configuration option to limit the size of string attribute values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjgzMTky", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-458283192", "createdAt": "2020-07-30T10:36:43Z", "commit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNjo0M1rOG5dmLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0MToyMVrOG5du4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjkyNw==", "bodyText": "Add comment about 0 here too or SDK may handle it incorrectly", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462906927", "createdAt": "2020-07-30T10:36:43Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -144,6 +149,13 @@ public static TraceConfig getDefault() {\n    */\n   public abstract int getMaxNumberOfAttributesPerLink();\n \n+  /**\n+   * Returns the global default max length of string attribute value in characters.\n+   *\n+   * @return the global default max length of string attribute value in characters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzk4MQ==", "bodyText": "Looks like null check is duplicated with private method", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462907981", "createdAt": "2020-07-30T10:38:59Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwODEwMw==", "bodyText": "Can we add @Nullable?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462908103", "createdAt": "2020-07-30T10:39:13Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+      }\n+\n+      return AttributeValue.arrayAttributeValue(newStrings);\n+    }\n+\n+    String string = value.getStringValue();\n+    return string.length() <= limit\n+        ? value\n+        : AttributeValue.stringAttributeValue(string.substring(0, limit));\n+  }\n+\n+  private static String cutIfNeeded(String s, int limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTE1Mg==", "bodyText": "Believe it's possible for string to be null. Guess you can just use cutIfNeeded here too.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462909152", "createdAt": "2020-07-30T10:41:21Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+      }\n+\n+      return AttributeValue.arrayAttributeValue(newStrings);\n+    }\n+\n+    String string = value.getStringValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzIxMzMy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-458321332", "createdAt": "2020-07-30T11:41:22Z", "commit": {"oid": "c99697044d158ca1440b860aa9f13066c6425e0d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo0MToyMlrOG5fdEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo0MTo1N1rOG5feJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNzM2Mg==", "bodyText": "Thanks, yeah didn't notice the reallocation of AttributeValue aspect. As far as null goes, I only thought of it from seeing the null check in this PR\nhttps://github.com/open-telemetry/opentelemetry-java/pull/1437/files", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462937362", "createdAt": "2020-07-30T11:41:22Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+      }\n+\n+      return AttributeValue.arrayAttributeValue(newStrings);\n+    }\n+\n+    String string = value.getStringValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTE1Mg=="}, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNzYzNg==", "bodyText": "Ah sorry should have mentioned both return value and parameter are @Nullable", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462937636", "createdAt": "2020-07-30T11:41:57Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -88,18 +89,20 @@ public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n       String[] newStrings = new String[strings.size()];\n       for (int i = 0; i < strings.size(); i++) {\n         String string = strings.get(i);\n-        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+        newStrings[i] = cutIfNeeded(string, limit);\n       }\n \n       return AttributeValue.arrayAttributeValue(newStrings);\n     }\n \n     String string = value.getStringValue();\n-    return string.length() <= limit\n+    // Don't allocate new AttributeValue if not needed\n+    return (string == null || string.length() <= limit)\n         ? value\n         : AttributeValue.stringAttributeValue(string.substring(0, limit));\n   }\n \n+  @Nullable\n   private static String cutIfNeeded(String s, int limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99697044d158ca1440b860aa9f13066c6425e0d"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/606600aeb4a8ae90fef457cec4d71ab037910fcf", "committedDate": "2020-07-30T11:47:22Z", "message": "Polish"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c99697044d158ca1440b860aa9f13066c6425e0d", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c99697044d158ca1440b860aa9f13066c6425e0d", "committedDate": "2020-07-30T11:05:26Z", "message": "Polish"}, "afterCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/606600aeb4a8ae90fef457cec4d71ab037910fcf", "committedDate": "2020-07-30T11:47:22Z", "message": "Polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjYxNzkx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-458661791", "createdAt": "2020-07-30T18:41:03Z", "commit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTowM1rOG5vTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTowM1rOG5vTxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzEyNw==", "bodyText": "how about truncateToSize ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463197127", "createdAt": "2020-07-30T18:41:03Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +60,55 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjYyMTY1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-458662165", "createdAt": "2020-07-30T18:41:37Z", "commit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTozN1rOG5vU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTozN1rOG5vU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzQwOA==", "bodyText": "recommend including why it failed, not just that the value is invalid. maybe \"attribute value limit must be positive\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463197408", "createdAt": "2020-07-30T18:41:37Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +60,55 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjY0MDM5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-458664039", "createdAt": "2020-07-30T18:44:09Z", "commit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NDowOVrOG5vaqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NDowOVrOG5vaqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5ODg5MA==", "bodyText": "would probably pluralize this getMaxLengthOfAttributeValues()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463198890", "createdAt": "2020-07-30T18:44:09Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -144,6 +149,14 @@ public static TraceConfig getDefault() {\n    */\n   public abstract int getMaxNumberOfAttributesPerLink();\n \n+  /**\n+   * Returns the global default max length of string attribute value in characters. Zero means\n+   * unlimited.\n+   *\n+   * @return the global default max length of string attribute value in characters.\n+   */\n+  public abstract int getMaxLengthOfAttributeValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjY0NzU3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-458664757", "createdAt": "2020-07-30T18:45:11Z", "commit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NToxMVrOG5vc7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NToxMVrOG5vc7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA==", "bodyText": "Is zero a good default? shouldn't it be MAX_INT?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463199468", "createdAt": "2020-07-30T18:45:11Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b39ce8c97bac684d6cfd4019db066883b91d21d", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9b39ce8c97bac684d6cfd4019db066883b91d21d", "committedDate": "2020-07-31T08:56:28Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "007868ae9721582c641856688cb0366e2e71f5b3", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/007868ae9721582c641856688cb0366e2e71f5b3", "committedDate": "2020-07-31T17:47:08Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a1391d4c6bf703054c3fc624c8936b2188dd56", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/88a1391d4c6bf703054c3fc624c8936b2188dd56", "committedDate": "2020-07-31T18:01:46Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a917bdd39af9d2c82b043bfce765eb2f702fe8c", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a917bdd39af9d2c82b043bfce765eb2f702fe8c", "committedDate": "2020-07-31T18:53:49Z", "message": "Merge remote-tracking branch 'upstream/master' into cut-attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDAxNDUx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-459401451", "createdAt": "2020-07-31T19:12:18Z", "commit": {"oid": "3a917bdd39af9d2c82b043bfce765eb2f702fe8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f8f4740efa7ad48feabd3d96e4f057439911ac3", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9f8f4740efa7ad48feabd3d96e4f057439911ac3", "committedDate": "2020-08-02T14:31:30Z", "message": "Add benchmark."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1b8dcaae626d6d7a25ec6f3e8ebc8376b103021", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e1b8dcaae626d6d7a25ec6f3e8ebc8376b103021", "committedDate": "2020-08-02T14:50:57Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjYxNjMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-459661630", "createdAt": "2020-08-02T16:27:44Z", "commit": {"oid": "e1b8dcaae626d6d7a25ec6f3e8ebc8376b103021"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bb2ee55c245ea960d4aa6e2867f2ecbc65b4b5c", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2bb2ee55c245ea960d4aa6e2867f2ecbc65b4b5c", "committedDate": "2020-08-02T17:09:12Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzY5MTQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#pullrequestreview-459769146", "createdAt": "2020-08-03T06:12:20Z", "commit": {"oid": "2bb2ee55c245ea960d4aa6e2867f2ecbc65b4b5c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2666, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}