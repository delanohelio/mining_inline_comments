{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjA0Mjk1", "number": 1045, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1OTozOFrODr9XNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxNDo0NFrODsxbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDIwNzI2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1OTozOFrOF8mgqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyMTowOFrOF8nEag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4OTgzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n          \n          \n            \n            Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n          \n      \n    \n    \n  \n\nI'd use the same as in the examples above.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399089832", "createdAt": "2020-03-27T07:59:38Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5ODk4Ng==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399098986", "createdAt": "2020-03-27T08:21:08Z", "author": {"login": "malafeev"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4OTgzMg=="}, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDIzODI1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoxMToxN1rOF8mzEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNzoyMVrOF8nQQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n          \n          \n            \n            \n          \n          \n            \n            // Record data\n          \n          \n            \n            someWorkBound.add(123);\n          \n          \n            \n            BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");\n          \n          \n            \n            \n          \n          \n            \n            // Record data\n          \n          \n            \n            someWorkCounter .add(123);\n          \n      \n    \n    \n  \n\nbind needs to be supplied with a list of key/value pairs, not just the values.\nAlso the use of \"Bound\" as a subject name was dropped a while ago.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399094545", "createdAt": "2020-03-27T08:11:17Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n+\n+// Record data\n+someWorkBound.add(123);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5OTA5OQ==", "bodyText": "updated", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399099099", "createdAt": "2020-03-27T08:21:24Z", "author": {"login": "malafeev"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n+\n+// Record data\n+someWorkBound.add(123);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5OTIyNQ==", "bodyText": "The proper code would be:\nBoundLongCounter someWorkCounter = counter.bind(meter.createLabelSet(\"Key\", \"SomeWork\"));", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399099225", "createdAt": "2020-03-27T08:21:40Z", "author": {"login": "thisthat"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n+\n+// Record data\n+someWorkBound.add(123);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDY5NA==", "bodyText": "method meter.createLabelSet(...) doesn't exist", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399100694", "createdAt": "2020-03-27T08:24:39Z", "author": {"login": "malafeev"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n+\n+// Record data\n+someWorkBound.add(123);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMTAxNA==", "bodyText": "@thisthat not anymore since LabelSet was removed in #992", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399101014", "createdAt": "2020-03-27T08:25:21Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n+\n+// Record data\n+someWorkBound.add(123);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMjAxNg==", "bodyText": "Ops! I have to get up2date with the Metric API then! \ud83d\ude05", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399102016", "createdAt": "2020-03-27T08:27:21Z", "author": {"login": "thisthat"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n+\n+// Record data\n+someWorkBound.add(123);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTU0NDYyOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMjo1NlrOF8zWtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzo1MjowNVrOF9Yyhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDI3OA==", "bodyText": "Consider to remove for the moment the set label key. For the moment we don't do anything with that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399300278", "createdAt": "2020-03-27T14:22:56Z", "author": {"login": "bogdandrutu"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dde8dd883786a53b9c57a4d2e7e3460e351f663"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxMzYwNw==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399913607", "createdAt": "2020-03-30T03:52:05Z", "author": {"login": "malafeev"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDI3OA=="}, "originalCommit": {"oid": "4dde8dd883786a53b9c57a4d2e7e3460e351f663"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjUyMTI0OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyMjoxOVrOF9xzOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyODo1NVrOF9yFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzM4Nw==", "bodyText": "We should specify that we expect this to stay alive for the entire time or call unbind when no-longer needed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400323387", "createdAt": "2020-03-30T16:22:19Z", "author": {"login": "bogdandrutu"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,35 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5d6f92ca173b957630428c13b0ff9bf2dd79de6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNzk0MQ==", "bodyText": "updated", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400327941", "createdAt": "2020-03-30T16:28:55Z", "author": {"login": "malafeev"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,35 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzM4Nw=="}, "originalCommit": {"oid": "a5d6f92ca173b957630428c13b0ff9bf2dd79de6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjczNzI4OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxNDo0NFrOF9z6Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDozNjo1MFrOF97PIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1Nzk3OQ==", "bodyText": "I'd remove the \"semver:\" from the beginning of the version.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400357979", "createdAt": "2020-03-30T17:14:44Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1511a7f7c9475f29b4d3d92eb69441ff087db9ee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3Nzk4NA==", "bodyText": "That is in the version semantic convention", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400477984", "createdAt": "2020-03-30T20:36:50Z", "author": {"login": "bogdandrutu"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1Nzk3OQ=="}, "originalCommit": {"oid": "1511a7f7c9475f29b4d3d92eb69441ff087db9ee"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 797, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}