{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTE1MDcz", "number": 2211, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1ODoyNFrOFCEMrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMDowNFrOFCEOaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEwMjUyOnYy", "diffSide": "RIGHT", "path": "exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1ODoyNFrOIBB4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1ODoyNFrOIBB4sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class LabelNameSanitizer implements Function<String, String> {\n          \n          \n            \n            class LabelNameSanitizer implements Function<String, String> {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r537950384", "createdAt": "2020-12-08T00:58:24Z", "author": {"login": "anuraaga"}, "path": "exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.prometheus;\n+\n+import io.prometheus.client.Collector;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+/** Used to convert a label keys to a label names. Sanitizes the label keys. Not thread safe. */\n+public class LabelNameSanitizer implements Function<String, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8800dc07c2ada61727d685284bc9ef90da7781da"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEwNTAwOnYy", "diffSide": "RIGHT", "path": "exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1OToyNFrOIBB6GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzowNToyMFrOIBqHIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDc0NQ==", "bodyText": "Is prometheus exporter always guaranteed to be scraped by the same thread? I think I'd just stick with ConcurrentHashMap to let this be safe.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r537950745", "createdAt": "2020-12-08T00:59:24Z", "author": {"login": "anuraaga"}, "path": "exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.prometheus;\n+\n+import io.prometheus.client.Collector;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+/** Used to convert a label keys to a label names. Sanitizes the label keys. Not thread safe. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8800dc07c2ada61727d685284bc9ef90da7781da"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwOTQ0Mw==", "bodyText": "I don't know the answer, but I'm cool with using ConcurrentHashMap here as a safety precaution.  Thanks for the suggestion.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r538609443", "createdAt": "2020-12-08T17:05:20Z", "author": {"login": "breedx-splk"}, "path": "exporters/prometheus/src/main/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.prometheus;\n+\n+import io.prometheus.client.Collector;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+/** Used to convert a label keys to a label names. Sanitizes the label keys. Not thread safe. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDc0NQ=="}, "originalCommit": {"oid": "8800dc07c2ada61727d685284bc9ef90da7781da"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEwNjk3OnYy", "diffSide": "RIGHT", "path": "exporters/prometheus/src/test/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMDowNFrOIBB7NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzowNjoxNlrOIBqLLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MTAyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LabelNameSanitizer testClass = new LabelNameSanitizer(delegate);\n          \n          \n            \n                LabelNameSanitizer sanitizer = new LabelNameSanitizer(delegate);\n          \n      \n    \n    \n  \n\nmakes the test easier to read", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r537951029", "createdAt": "2020-12-08T01:00:04Z", "author": {"login": "anuraaga"}, "path": "exporters/prometheus/src/test/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizerTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.prometheus;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import org.junit.jupiter.api.Test;\n+\n+class LabelNameSanitizerTest {\n+\n+  @Test\n+  void testSanitizerCaching() {\n+    AtomicInteger count = new AtomicInteger();\n+    Function<String, String> delegate = labelName -> labelName + count.incrementAndGet();\n+    LabelNameSanitizer testClass = new LabelNameSanitizer(delegate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8800dc07c2ada61727d685284bc9ef90da7781da"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMDQ3Ng==", "bodyText": "Sure thing.  We can talk about the pros/cons of each approach sometime, but I'm happy to change it here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2211#discussion_r538610476", "createdAt": "2020-12-08T17:06:16Z", "author": {"login": "breedx-splk"}, "path": "exporters/prometheus/src/test/java/io/opentelemetry/exporter/prometheus/LabelNameSanitizerTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.prometheus;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import org.junit.jupiter.api.Test;\n+\n+class LabelNameSanitizerTest {\n+\n+  @Test\n+  void testSanitizerCaching() {\n+    AtomicInteger count = new AtomicInteger();\n+    Function<String, String> delegate = labelName -> labelName + count.incrementAndGet();\n+    LabelNameSanitizer testClass = new LabelNameSanitizer(delegate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MTAyOQ=="}, "originalCommit": {"oid": "8800dc07c2ada61727d685284bc9ef90da7781da"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1838, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}