{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MzkzNDg2", "number": 1450, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1MzoxOVrOERSUtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1NTowMFrOERSV7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTYxNDYwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1MzoxOVrOG16sDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1MzoxOVrOG16sDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTI2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     sampling decision {@link #getDecision()} is {@code RECORD} or {@code RECORD_AND_SAMPLED}.\n          \n          \n            \n                 *     {@linkplain #getDecision() the sampling decision} is {@link SamplingDecision#RECORD} or {@link SamplingDecision#RECORD_AND_SAMPLED}.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1450#discussion_r459189261", "createdAt": "2020-07-23T02:53:19Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java", "diffHunk": "@@ -91,13 +91,11 @@ SamplingResult shouldSample(\n      */\n     Decision getDecision();\n \n-    boolean isSampled();\n-\n     /**\n      * Return tags which will be attached to the span.\n      *\n-     * @return attributes added to span. These attributes should be added to the span only for root\n-     *     span or when sampling result {@link #isSampled()} changes from false to true.\n+     * @return attributes added to span. These attributes should be added to the span only when\n+     *     sampling decision {@link #getDecision()} is {@code RECORD} or {@code RECORD_AND_SAMPLED}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e7c3d906124ffeb98c4b5b75a3872af3f5bb5d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTYxNjUzOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1NDozNlrOG16tEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1NDozNlrOG16tEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * SamplingResult#getDecision()} ()} returning {@code decision}.\n          \n          \n            \n               * SamplingResult#getDecision()} returning {@code decision}.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1450#discussion_r459189520", "createdAt": "2020-07-23T02:54:36Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -65,13 +65,17 @@\n   // No instance of this class.\n   private Samplers() {}\n \n-  private static boolean isSampled(Decision decision) {\n-    return decision.equals(Decision.RECORD_AND_SAMPLED);\n+  static boolean isRecording(Decision decision) {\n+    return Decision.RECORD.equals(decision) || Decision.RECORD_AND_SAMPLED.equals(decision);\n+  }\n+\n+  static boolean isSampled(Decision decision) {\n+    return Decision.RECORD_AND_SAMPLED.equals(decision);\n   }\n \n   /**\n    * Returns a {@link SamplingResult} with the given {@code attributes} and {@link\n-   * SamplingResult#isSampled()} returning {@code isSampled}.\n+   * SamplingResult#getDecision()} ()} returning {@code decision}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e7c3d906124ffeb98c4b5b75a3872af3f5bb5d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTYxNzc0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1NTowMFrOG16tng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDo1OTo1M1rOG2On7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTY2Mg==", "bodyText": "Also tend to find it more readable to use something like the provided {@link Decision}.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1450#discussion_r459189662", "createdAt": "2020-07-23T02:55:00Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -65,13 +65,17 @@\n   // No instance of this class.\n   private Samplers() {}\n \n-  private static boolean isSampled(Decision decision) {\n-    return decision.equals(Decision.RECORD_AND_SAMPLED);\n+  static boolean isRecording(Decision decision) {\n+    return Decision.RECORD.equals(decision) || Decision.RECORD_AND_SAMPLED.equals(decision);\n+  }\n+\n+  static boolean isSampled(Decision decision) {\n+    return Decision.RECORD_AND_SAMPLED.equals(decision);\n   }\n \n   /**\n    * Returns a {@link SamplingResult} with the given {@code attributes} and {@link\n-   * SamplingResult#isSampled()} returning {@code isSampled}.\n+   * SamplingResult#getDecision()} ()} returning {@code decision}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e7c3d906124ffeb98c4b5b75a3872af3f5bb5d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxNTg4Ng==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1450#discussion_r459515886", "createdAt": "2020-07-23T14:59:53Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -65,13 +65,17 @@\n   // No instance of this class.\n   private Samplers() {}\n \n-  private static boolean isSampled(Decision decision) {\n-    return decision.equals(Decision.RECORD_AND_SAMPLED);\n+  static boolean isRecording(Decision decision) {\n+    return Decision.RECORD.equals(decision) || Decision.RECORD_AND_SAMPLED.equals(decision);\n+  }\n+\n+  static boolean isSampled(Decision decision) {\n+    return Decision.RECORD_AND_SAMPLED.equals(decision);\n   }\n \n   /**\n    * Returns a {@link SamplingResult} with the given {@code attributes} and {@link\n-   * SamplingResult#isSampled()} returning {@code isSampled}.\n+   * SamplingResult#getDecision()} ()} returning {@code decision}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTY2Mg=="}, "originalCommit": {"oid": "05e7c3d906124ffeb98c4b5b75a3872af3f5bb5d"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1521, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}