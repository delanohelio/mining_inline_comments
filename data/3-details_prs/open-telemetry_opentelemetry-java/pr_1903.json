{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzY2NDg5", "number": 1903, "title": "Move samplers into samplers package instead of outer class.", "bodyText": "I noticed Samplers is a huge bag of classes - discussed with @jkwatson and it seems easier to organize as a package. Though making Samplers package private, moving up SamplingResult and just moving the factories to Sampler / SamplingResult would be a good enough win too, I'm happy to change to that if it seems better. Even in that case, I would probably still leave the tests split to keep them better contained.", "createdAt": "2020-10-28T08:21:36Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903", "merged": true, "mergeCommit": {"oid": "1b0a25a24bc9bbd5d237092d0a568dd1637996e0"}, "closed": true, "closedAt": "2020-10-28T23:13:40Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW5JYIAH2gAyNTExMzY2NDg5OjE2NTE1NTVkZjljZWNhNWRiMmFiMmM5NjRhYjUwZGQxZjdiZTIxN2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXC9qFgFqTUxOTAyNTA2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1651555df9ceca5db2ab2c964ab50dd1f7be217e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1651555df9ceca5db2ab2c964ab50dd1f7be217e", "committedDate": "2020-10-28T08:18:24Z", "message": "Move samplers into samplers package instead of outer class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1535b4476c38299eb8db91484de8cdbc984e7cd3", "committedDate": "2020-10-28T08:23:46Z", "message": "Sampler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDE0ODQz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#pullrequestreview-518414843", "createdAt": "2020-10-28T08:22:02Z", "commit": {"oid": "1651555df9ceca5db2ab2c964ab50dd1f7be217e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyMjowMlrOHpejrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNjo0M1rOHpeuMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NDMxOA==", "bodyText": "These were only used in this class so moved them here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513254318", "createdAt": "2020-10-28T08:22:02Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -258,4 +258,15 @@ private static Clock getClock(Span parent, Clock clock) {\n       return MonotonicClock.create(clock);\n     }\n   }\n+\n+  @VisibleForTesting\n+  static boolean isRecording(SamplingResult.Decision decision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1651555df9ceca5db2ab2c964ab50dd1f7be217e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NDc1MA==", "bodyText": "I think we have a pattern of naming an AutoValue class ImmutableBlah so used that but not sure how cosistent are on it currently. It's a private class anyways", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513254750", "createdAt": "2020-10-28T08:22:48Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/ImmutableSamplingResult.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import static io.opentelemetry.api.common.AttributeKey.doubleKey;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+@AutoValue\n+abstract class ImmutableSamplingResult implements SamplingResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1651555df9ceca5db2ab2c964ab50dd1f7be217e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NTczMA==", "bodyText": "This is top level now instead of class Samplers.ParentBased.\nActually if ParentBasedSamplerBuilder is made top-level, this class could be made private.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513255730", "createdAt": "2020-10-28T08:24:28Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/ParentBasedSampler.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A Sampler that uses the sampled flag of the parent Span, if present. If the span has no parent,\n+ * this Sampler will use the \"root\" sampler that it is built with. See documentation on the {@link\n+ * Builder} methods for the details on the various configurable options.\n+ */\n+@Immutable\n+public class ParentBasedSampler implements Sampler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NjY3OQ==", "bodyText": "This is top level now, Samplers.SamplingResult had some stuttering of \"sampl\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513256679", "createdAt": "2020-10-28T08:26:08Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/SamplingResult.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.context.Context;\n+import java.util.List;\n+\n+/**\n+ * Sampling result returned by {@link Sampler#shouldSample(Context, String, String, Span.Kind,\n+ * ReadableAttributes, List)}.\n+ */\n+public interface SamplingResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NjgxMw==", "bodyText": "Factories for SamplingResult moved to the SamplingResult", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513256813", "createdAt": "2020-10-28T08:26:20Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/SamplingResult.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.context.Context;\n+import java.util.List;\n+\n+/**\n+ * Sampling result returned by {@link Sampler#shouldSample(Context, String, String, Span.Kind,\n+ * ReadableAttributes, List)}.\n+ */\n+public interface SamplingResult {\n+\n+  /**\n+   * Returns a {@link SamplingResult} with no attributes and {@link SamplingResult#getDecision()}\n+   * returning {@code decision}.\n+   *\n+   * <p>This is meant for use by custom {@link Sampler} implementations.\n+   *\n+   * <p>Use {@link #create(Decision, Attributes)} if you need attributes.\n+   *\n+   * @param decision The decision made on the span.\n+   * @return A {@link SamplingResult} with empty attributes and the provided {@code decision}.\n+   */\n+  static SamplingResult create(Decision decision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NzAwOQ==", "bodyText": "Also I think using a method overload (same name) seems consistent with our normal style instead of the previous name empty", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513257009", "createdAt": "2020-10-28T08:26:43Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/SamplingResult.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.context.Context;\n+import java.util.List;\n+\n+/**\n+ * Sampling result returned by {@link Sampler#shouldSample(Context, String, String, Span.Kind,\n+ * ReadableAttributes, List)}.\n+ */\n+public interface SamplingResult {\n+\n+  /**\n+   * Returns a {@link SamplingResult} with no attributes and {@link SamplingResult#getDecision()}\n+   * returning {@code decision}.\n+   *\n+   * <p>This is meant for use by custom {@link Sampler} implementations.\n+   *\n+   * <p>Use {@link #create(Decision, Attributes)} if you need attributes.\n+   *\n+   * @param decision The decision made on the span.\n+   * @return A {@link SamplingResult} with empty attributes and the provided {@code decision}.\n+   */\n+  static SamplingResult create(Decision decision) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NjgxMw=="}, "originalCommit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36fe48c43550b8ab33a46cc7af4cdbd708fde20b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/36fe48c43550b8ab33a46cc7af4cdbd708fde20b", "committedDate": "2020-10-28T08:31:33Z", "message": "Sampler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79f71b1d96d5f40a44da32d168019ab61221f6a4", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/79f71b1d96d5f40a44da32d168019ab61221f6a4", "committedDate": "2020-10-28T08:38:20Z", "message": "Drift"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5cbf3089192b59befa42f9d8702a4e620246324", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b5cbf3089192b59befa42f9d8702a4e620246324", "committedDate": "2020-10-28T08:52:22Z", "message": "Hide Default* implementations behind interface factory methods."}, "afterCommit": {"oid": "79f71b1d96d5f40a44da32d168019ab61221f6a4", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/79f71b1d96d5f40a44da32d168019ab61221f6a4", "committedDate": "2020-10-28T08:38:20Z", "message": "Drift"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDE3ODYx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#pullrequestreview-519017861", "createdAt": "2020-10-28T19:34:12Z", "commit": {"oid": "79f71b1d96d5f40a44da32d168019ab61221f6a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDI1MDY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#pullrequestreview-519025067", "createdAt": "2020-10-28T19:44:39Z", "commit": {"oid": "79f71b1d96d5f40a44da32d168019ab61221f6a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4169, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}