{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTA4MzE3", "number": 898, "title": "Introduce an abstract super class for aggregators.", "bodyText": "This is to hold the boilerplate logic and get it out of the specific implementations.", "createdAt": "2020-02-20T18:27:08Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898", "merged": true, "mergeCommit": {"oid": "e9200e6aa853cabc9628e9e4b9e73c3f26700a68"}, "closed": true, "closedAt": "2020-02-21T01:14:32Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGPaDwAH2gAyMzc3OTA4MzE3OmRlMThhNWNjNzMyMTY0YTM4OTZhMDQ2ODBlODBmMWMzYjMyM2QxNDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGVPB3gFqTM2MjM0NDk5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/de18a5cc732164a3896a04680e80f1c3b323d145", "committedDate": "2020-02-20T18:26:40Z", "message": "Introduce an abstract super class for aggregators.\nThis is to hold the boilerplate logic and get it out of the specific implementations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMTMzNTE5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#pullrequestreview-362133519", "createdAt": "2020-02-20T18:29:36Z", "commit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyOTozNlrOFseZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODozMjozM1rOFsefUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg==", "bodyText": "I heard once that getClass is expensive, maybe we do cache that in a constant for this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382179712", "createdAt": "2020-02-20T18:29:36Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTExNg==", "bodyText": "Does this need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382181116", "createdAt": "2020-02-20T18:32:22Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {\n+      return;\n+    }\n+    doMergeAndReset(other);\n+  }\n+\n+  /**\n+   * Merges the current value into the given {@code aggregator} and resets the current value in this\n+   * {@code Aggregator}.\n+   *\n+   * <p>If this method is called, you can assume that the passed in aggregator can be cast to your\n+   * self-type.\n+   *\n+   * @param aggregator The aggregator to merge with.\n+   */\n+  public abstract void doMergeAndReset(Aggregator aggregator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTIwMQ==", "bodyText": "Does this need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382181201", "createdAt": "2020-02-20T18:32:33Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1d4a04bf492d49e9e1779321863d5ec364862e1", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1d4a04bf492d49e9e1779321863d5ec364862e1", "committedDate": "2020-02-20T19:04:33Z", "message": "tighten up the access modifiers and flip the assignable logic to be correct"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzQ0OTk3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#pullrequestreview-362344997", "createdAt": "2020-02-21T01:14:03Z", "commit": {"oid": "a1d4a04bf492d49e9e1779321863d5ec364862e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3047, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}