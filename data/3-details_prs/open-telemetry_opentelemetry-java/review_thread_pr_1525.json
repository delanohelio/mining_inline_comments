{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzE4NjAx", "number": 1525, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0NToxNlrOEXAFlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzowMTo1MlrOEXaS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU0MTMzOnYy", "diffSide": "RIGHT", "path": "sdk/all/build.gradle", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0NToxNlrOG-jcIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNToyNzo1NVrOG-9UBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTUzNw==", "bodyText": "I am not a gradle expert, by any means, but I think we might want to actually have this module have multiple source sets, so downloading it from maven central, or wherever, is a single artifact, rather than multiple artifacts, which is what having dependent modules will result in.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468245537", "createdAt": "2020-08-10T23:45:16Z", "author": {"login": "jkwatson"}, "path": "sdk/all/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"me.champeau.gradle.jmh\"\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry SDK'\n+ext.moduleName = \"io.opentelemetry.sdk\"\n+ext.propertiesDir = \"build/generated/properties/io/opentelemetry/sdk\"\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk-common'),\n+            project(':opentelemetry-sdk-correlation-context'),\n+            project(':opentelemetry-sdk-metrics'),\n+            project(':opentelemetry-sdk-tracing')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262171d330d489c64256a3ea45f38cd3b2194d28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3NzQyNA==", "bodyText": "That's just for \"all\" which is the new \"sdk\" right?\nI'm ok with doing that if someone can explain/show how.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468277424", "createdAt": "2020-08-11T01:38:49Z", "author": {"login": "kenfinnigan"}, "path": "sdk/all/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"me.champeau.gradle.jmh\"\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry SDK'\n+ext.moduleName = \"io.opentelemetry.sdk\"\n+ext.propertiesDir = \"build/generated/properties/io/opentelemetry/sdk\"\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk-common'),\n+            project(':opentelemetry-sdk-correlation-context'),\n+            project(':opentelemetry-sdk-metrics'),\n+            project(':opentelemetry-sdk-tracing')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTUzNw=="}, "originalCommit": {"oid": "262171d330d489c64256a3ea45f38cd3b2194d28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4MTY3NA==", "bodyText": "Here's an example of this being done: https://github.com/newrelic/newrelic-telemetry-sdk-java/pull/214/files", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468281674", "createdAt": "2020-08-11T01:56:02Z", "author": {"login": "jkwatson"}, "path": "sdk/all/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"me.champeau.gradle.jmh\"\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry SDK'\n+ext.moduleName = \"io.opentelemetry.sdk\"\n+ext.propertiesDir = \"build/generated/properties/io/opentelemetry/sdk\"\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk-common'),\n+            project(':opentelemetry-sdk-correlation-context'),\n+            project(':opentelemetry-sdk-metrics'),\n+            project(':opentelemetry-sdk-tracing')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTUzNw=="}, "originalCommit": {"oid": "262171d330d489c64256a3ea45f38cd3b2194d28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4MTc3Mg==", "bodyText": "and, yes, just for the 'all' artifact.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468281772", "createdAt": "2020-08-11T01:56:22Z", "author": {"login": "jkwatson"}, "path": "sdk/all/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"me.champeau.gradle.jmh\"\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry SDK'\n+ext.moduleName = \"io.opentelemetry.sdk\"\n+ext.propertiesDir = \"build/generated/properties/io/opentelemetry/sdk\"\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk-common'),\n+            project(':opentelemetry-sdk-correlation-context'),\n+            project(':opentelemetry-sdk-metrics'),\n+            project(':opentelemetry-sdk-tracing')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTUzNw=="}, "originalCommit": {"oid": "262171d330d489c64256a3ea45f38cd3b2194d28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NTA5OQ==", "bodyText": "I generally find multiple sources to have a higher chance of biting later (if both source files end up in the final app which is reasonably likely). Is there an advantage to the fat jar for an SDK? Don't feel that strongly one way or another but would lean towards letting Maven do it's thing, it's pretty good at it", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468355099", "createdAt": "2020-08-11T06:31:03Z", "author": {"login": "anuraaga"}, "path": "sdk/all/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"me.champeau.gradle.jmh\"\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry SDK'\n+ext.moduleName = \"io.opentelemetry.sdk\"\n+ext.propertiesDir = \"build/generated/properties/io/opentelemetry/sdk\"\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk-common'),\n+            project(':opentelemetry-sdk-correlation-context'),\n+            project(':opentelemetry-sdk-metrics'),\n+            project(':opentelemetry-sdk-tracing')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTUzNw=="}, "originalCommit": {"oid": "262171d330d489c64256a3ea45f38cd3b2194d28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNDc4Ng==", "bodyText": "Can someone confirm whether or not I should make this change?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468604786", "createdAt": "2020-08-11T14:04:15Z", "author": {"login": "kenfinnigan"}, "path": "sdk/all/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"me.champeau.gradle.jmh\"\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry SDK'\n+ext.moduleName = \"io.opentelemetry.sdk\"\n+ext.propertiesDir = \"build/generated/properties/io/opentelemetry/sdk\"\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk-common'),\n+            project(':opentelemetry-sdk-correlation-context'),\n+            project(':opentelemetry-sdk-metrics'),\n+            project(':opentelemetry-sdk-tracing')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTUzNw=="}, "originalCommit": {"oid": "262171d330d489c64256a3ea45f38cd3b2194d28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY2OTQ0NA==", "bodyText": "I don't feel super strongly about it, so if someone cares a lot, we can have it as a follow-up issue/PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468669444", "createdAt": "2020-08-11T15:27:55Z", "author": {"login": "jkwatson"}, "path": "sdk/all/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"me.champeau.gradle.jmh\"\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry SDK'\n+ext.moduleName = \"io.opentelemetry.sdk\"\n+ext.propertiesDir = \"build/generated/properties/io/opentelemetry/sdk\"\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk-common'),\n+            project(':opentelemetry-sdk-correlation-context'),\n+            project(':opentelemetry-sdk-metrics'),\n+            project(':opentelemetry-sdk-tracing')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTUzNw=="}, "originalCommit": {"oid": "262171d330d489c64256a3ea45f38cd3b2194d28"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODgwNzQ5OnYy", "diffSide": "RIGHT", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzozNTo1MFrOG_CPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODozNDowOVrOG_EQaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDI2NQ==", "bodyText": "for some unknown reason this line no longer uses the imported class, but the fully-qualified one. I think it'll make the diff slightly cleaner if that change got reverted.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468750265", "createdAt": "2020-08-11T17:35:50Z", "author": {"login": "jkwatson"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java", "diffHunk": "@@ -1,72 +1,71 @@\n-/*\r\n- * Copyright 2019, OpenTelemetry Authors\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package io.opentelemetry.sdk.common;\r\n-\r\n-import com.google.auto.value.AutoValue;\r\n-import io.opentelemetry.sdk.trace.TracerSdkProvider;\r\n-import io.opentelemetry.trace.Tracer;\r\n-import javax.annotation.Nullable;\r\n-import javax.annotation.concurrent.Immutable;\r\n-\r\n-/**\r\n- * Holds information about the instrumentation library specified when creating an instance of {@link\r\n- * Tracer} using {@link TracerSdkProvider}.\r\n- */\r\n-@AutoValue\r\n-@Immutable\r\n-public abstract class InstrumentationLibraryInfo {\r\n-  private static final InstrumentationLibraryInfo EMPTY = create(\"\", null);\r\n-\r\n-  /**\r\n-   * Creates a new instance of {@link InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @param name name of the instrumentation library (e.g., \"io.opentelemetry.contrib.mongodb\"),\r\n-   *     must not be null\r\n-   * @param version version of the instrumentation library (e.g., \"semver:1.0.0\"), might be null\r\n-   * @return the new instance\r\n-   */\r\n-  public static InstrumentationLibraryInfo create(String name, @Nullable String version) {\r\n-    return new AutoValue_InstrumentationLibraryInfo(name, version);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @return an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   */\r\n-  public static InstrumentationLibraryInfo getEmpty() {\r\n-    return EMPTY;\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the name of the instrumentation library.\r\n-   *\r\n-   * @return the name of the instrumentation library.\r\n-   */\r\n-  public abstract String getName();\r\n-\r\n-  /**\r\n-   * Returns the version of the instrumentation library, or {@code null} if not available.\r\n-   *\r\n-   * @return the version of the instrumentation library, or {@code null} if not available.\r\n-   */\r\n-  @Nullable\r\n-  public abstract String getVersion();\r\n-\r\n-  // Package protected ctor to avoid others to extend this class.\r\n-  InstrumentationLibraryInfo() {}\r\n-}\r\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Holds information about the instrumentation library specified when creating an instance of {@link\n+ * Tracer} using io.opentelemetry.sdk.trace.TracerSdkProvider.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9eb17ff566e36c7d330085f16b565298d885dca"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1Mjc0Ng==", "bodyText": "I had to do that because the class is in the \"tracing\" module, which isn't a dependency of \"common\".\nAs it was for Javadoc purposes, I thought it would be ok.\nAre there alternatives? I couldn't find an easy way to reference a class in another module without adding a bunch of things to the javadoc command line", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468752746", "createdAt": "2020-08-11T17:40:15Z", "author": {"login": "kenfinnigan"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java", "diffHunk": "@@ -1,72 +1,71 @@\n-/*\r\n- * Copyright 2019, OpenTelemetry Authors\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package io.opentelemetry.sdk.common;\r\n-\r\n-import com.google.auto.value.AutoValue;\r\n-import io.opentelemetry.sdk.trace.TracerSdkProvider;\r\n-import io.opentelemetry.trace.Tracer;\r\n-import javax.annotation.Nullable;\r\n-import javax.annotation.concurrent.Immutable;\r\n-\r\n-/**\r\n- * Holds information about the instrumentation library specified when creating an instance of {@link\r\n- * Tracer} using {@link TracerSdkProvider}.\r\n- */\r\n-@AutoValue\r\n-@Immutable\r\n-public abstract class InstrumentationLibraryInfo {\r\n-  private static final InstrumentationLibraryInfo EMPTY = create(\"\", null);\r\n-\r\n-  /**\r\n-   * Creates a new instance of {@link InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @param name name of the instrumentation library (e.g., \"io.opentelemetry.contrib.mongodb\"),\r\n-   *     must not be null\r\n-   * @param version version of the instrumentation library (e.g., \"semver:1.0.0\"), might be null\r\n-   * @return the new instance\r\n-   */\r\n-  public static InstrumentationLibraryInfo create(String name, @Nullable String version) {\r\n-    return new AutoValue_InstrumentationLibraryInfo(name, version);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @return an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   */\r\n-  public static InstrumentationLibraryInfo getEmpty() {\r\n-    return EMPTY;\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the name of the instrumentation library.\r\n-   *\r\n-   * @return the name of the instrumentation library.\r\n-   */\r\n-  public abstract String getName();\r\n-\r\n-  /**\r\n-   * Returns the version of the instrumentation library, or {@code null} if not available.\r\n-   *\r\n-   * @return the version of the instrumentation library, or {@code null} if not available.\r\n-   */\r\n-  @Nullable\r\n-  public abstract String getVersion();\r\n-\r\n-  // Package protected ctor to avoid others to extend this class.\r\n-  InstrumentationLibraryInfo() {}\r\n-}\r\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Holds information about the instrumentation library specified when creating an instance of {@link\n+ * Tracer} using io.opentelemetry.sdk.trace.TracerSdkProvider.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDI2NQ=="}, "originalCommit": {"oid": "b9eb17ff566e36c7d330085f16b565298d885dca"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1NDI5Nw==", "bodyText": "hmm. good point. I might get rid of the reference altogether to the concrete class, and just reference something like \"Tracer or Meter Provider\".", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468754297", "createdAt": "2020-08-11T17:42:46Z", "author": {"login": "jkwatson"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java", "diffHunk": "@@ -1,72 +1,71 @@\n-/*\r\n- * Copyright 2019, OpenTelemetry Authors\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package io.opentelemetry.sdk.common;\r\n-\r\n-import com.google.auto.value.AutoValue;\r\n-import io.opentelemetry.sdk.trace.TracerSdkProvider;\r\n-import io.opentelemetry.trace.Tracer;\r\n-import javax.annotation.Nullable;\r\n-import javax.annotation.concurrent.Immutable;\r\n-\r\n-/**\r\n- * Holds information about the instrumentation library specified when creating an instance of {@link\r\n- * Tracer} using {@link TracerSdkProvider}.\r\n- */\r\n-@AutoValue\r\n-@Immutable\r\n-public abstract class InstrumentationLibraryInfo {\r\n-  private static final InstrumentationLibraryInfo EMPTY = create(\"\", null);\r\n-\r\n-  /**\r\n-   * Creates a new instance of {@link InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @param name name of the instrumentation library (e.g., \"io.opentelemetry.contrib.mongodb\"),\r\n-   *     must not be null\r\n-   * @param version version of the instrumentation library (e.g., \"semver:1.0.0\"), might be null\r\n-   * @return the new instance\r\n-   */\r\n-  public static InstrumentationLibraryInfo create(String name, @Nullable String version) {\r\n-    return new AutoValue_InstrumentationLibraryInfo(name, version);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @return an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   */\r\n-  public static InstrumentationLibraryInfo getEmpty() {\r\n-    return EMPTY;\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the name of the instrumentation library.\r\n-   *\r\n-   * @return the name of the instrumentation library.\r\n-   */\r\n-  public abstract String getName();\r\n-\r\n-  /**\r\n-   * Returns the version of the instrumentation library, or {@code null} if not available.\r\n-   *\r\n-   * @return the version of the instrumentation library, or {@code null} if not available.\r\n-   */\r\n-  @Nullable\r\n-  public abstract String getVersion();\r\n-\r\n-  // Package protected ctor to avoid others to extend this class.\r\n-  InstrumentationLibraryInfo() {}\r\n-}\r\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Holds information about the instrumentation library specified when creating an instance of {@link\n+ * Tracer} using io.opentelemetry.sdk.trace.TracerSdkProvider.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDI2NQ=="}, "originalCommit": {"oid": "b9eb17ff566e36c7d330085f16b565298d885dca"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc4MzIxMQ==", "bodyText": "Will do", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468783211", "createdAt": "2020-08-11T18:34:09Z", "author": {"login": "kenfinnigan"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/InstrumentationLibraryInfo.java", "diffHunk": "@@ -1,72 +1,71 @@\n-/*\r\n- * Copyright 2019, OpenTelemetry Authors\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package io.opentelemetry.sdk.common;\r\n-\r\n-import com.google.auto.value.AutoValue;\r\n-import io.opentelemetry.sdk.trace.TracerSdkProvider;\r\n-import io.opentelemetry.trace.Tracer;\r\n-import javax.annotation.Nullable;\r\n-import javax.annotation.concurrent.Immutable;\r\n-\r\n-/**\r\n- * Holds information about the instrumentation library specified when creating an instance of {@link\r\n- * Tracer} using {@link TracerSdkProvider}.\r\n- */\r\n-@AutoValue\r\n-@Immutable\r\n-public abstract class InstrumentationLibraryInfo {\r\n-  private static final InstrumentationLibraryInfo EMPTY = create(\"\", null);\r\n-\r\n-  /**\r\n-   * Creates a new instance of {@link InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @param name name of the instrumentation library (e.g., \"io.opentelemetry.contrib.mongodb\"),\r\n-   *     must not be null\r\n-   * @param version version of the instrumentation library (e.g., \"semver:1.0.0\"), might be null\r\n-   * @return the new instance\r\n-   */\r\n-  public static InstrumentationLibraryInfo create(String name, @Nullable String version) {\r\n-    return new AutoValue_InstrumentationLibraryInfo(name, version);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   *\r\n-   * @return an \"empty\" {@code InstrumentationLibraryInfo}.\r\n-   */\r\n-  public static InstrumentationLibraryInfo getEmpty() {\r\n-    return EMPTY;\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the name of the instrumentation library.\r\n-   *\r\n-   * @return the name of the instrumentation library.\r\n-   */\r\n-  public abstract String getName();\r\n-\r\n-  /**\r\n-   * Returns the version of the instrumentation library, or {@code null} if not available.\r\n-   *\r\n-   * @return the version of the instrumentation library, or {@code null} if not available.\r\n-   */\r\n-  @Nullable\r\n-  public abstract String getVersion();\r\n-\r\n-  // Package protected ctor to avoid others to extend this class.\r\n-  InstrumentationLibraryInfo() {}\r\n-}\r\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Holds information about the instrumentation library specified when creating an instance of {@link\n+ * Tracer} using io.opentelemetry.sdk.trace.TracerSdkProvider.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDI2NQ=="}, "originalCommit": {"oid": "b9eb17ff566e36c7d330085f16b565298d885dca"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTgzNTM2OnYy", "diffSide": "RIGHT", "path": "sdk/bom/build.gradle", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzowMTo1MlrOG_MGOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjoyMTo1OFrOG_esqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTY3NQ==", "bodyText": "We have the opentelemetry bom, is there a benefit in having another bom @jkwatson ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468911675", "createdAt": "2020-08-11T23:01:52Z", "author": {"login": "anuraaga"}, "path": "sdk/bom/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec3a4cd7b2a3a0b5f108272f6ec9040c55eb5675"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNjE0Nw==", "bodyText": "I actually have no idea. The last I heard, the bom wasn't being properly published. Not a bom expert here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468926147", "createdAt": "2020-08-11T23:47:48Z", "author": {"login": "jkwatson"}, "path": "sdk/bom/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTY3NQ=="}, "originalCommit": {"oid": "ec3a4cd7b2a3a0b5f108272f6ec9040c55eb5675"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNjI5NQ==", "bodyText": "#1413 for reference", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468926295", "createdAt": "2020-08-11T23:48:22Z", "author": {"login": "jkwatson"}, "path": "sdk/bom/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTY3NQ=="}, "originalCommit": {"oid": "ec3a4cd7b2a3a0b5f108272f6ec9040c55eb5675"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNzE0NQ==", "bodyText": "Yeah - I use the bom from the snapshots repo right now and it's fine, we'll need to figure out what's up with maven central, but I wouldn't add another bom which is just a subset of it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468927145", "createdAt": "2020-08-11T23:51:15Z", "author": {"login": "anuraaga"}, "path": "sdk/bom/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTY3NQ=="}, "originalCommit": {"oid": "ec3a4cd7b2a3a0b5f108272f6ec9040c55eb5675"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODg3Mw==", "bodyText": "On #1460 @bogdandrutu had requested a bom for the SDK pieces.\nIf there's agreement it's not needed, I can take it out. I'm fine with whatever the majority want", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468948873", "createdAt": "2020-08-12T01:11:04Z", "author": {"login": "kenfinnigan"}, "path": "sdk/bom/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTY3NQ=="}, "originalCommit": {"oid": "ec3a4cd7b2a3a0b5f108272f6ec9040c55eb5675"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2OTU4OA==", "bodyText": "cool. if the existing bom encompasses this already, then I think we don't need another. \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r468969588", "createdAt": "2020-08-12T02:31:32Z", "author": {"login": "jkwatson"}, "path": "sdk/bom/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTY3NQ=="}, "originalCommit": {"oid": "ec3a4cd7b2a3a0b5f108272f6ec9040c55eb5675"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxNjQyNg==", "bodyText": "I removed the SDK BOM", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1525#discussion_r469216426", "createdAt": "2020-08-12T12:21:58Z", "author": {"login": "kenfinnigan"}, "path": "sdk/bom/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTY3NQ=="}, "originalCommit": {"oid": "ec3a4cd7b2a3a0b5f108272f6ec9040c55eb5675"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1332, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}