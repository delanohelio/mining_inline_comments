{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDU3NDE4", "number": 1916, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1MjoyMFrOEzVddA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyNDowNFrOEzWbEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY0NDM2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/baggage/BaggageUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1MjoyMFrOHqfqbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1MjoyMFrOHqfqbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTAwNA==", "bodyText": "oh, good catch! good thing it's just a name. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r514321004", "createdAt": "2020-10-29T14:52:20Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/BaggageUtils.java", "diffHunk": "@@ -5,18 +5,16 @@\n \n package io.opentelemetry.api.baggage;\n \n-import com.google.errorprone.annotations.MustBeClosed;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.ContextKey;\n-import io.opentelemetry.context.Scope;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /** Utility methods for accessing the {@link Baggage} contained in the {@link Context}. */\n @Immutable\n public final class BaggageUtils {\n-  private static final ContextKey<Baggage> CORR_CONTEXT_KEY =\n-      ContextKey.named(\"opentelemetry-corr-context-key\");\n+  private static final ContextKey<Baggage> BAGGAGE_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY0NjM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/baggage/BaggageUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1Mjo0NlrOHqfrxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTowNjoyNVrOHrTQsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTM1MQ==", "bodyText": "do we still need the class to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r514321351", "createdAt": "2020-10-29T14:52:46Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/BaggageUtils.java", "diffHunk": "@@ -5,18 +5,16 @@\n \n package io.opentelemetry.api.baggage;\n \n-import com.google.errorprone.annotations.MustBeClosed;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.ContextKey;\n-import io.opentelemetry.context.Scope;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /** Utility methods for accessing the {@link Baggage} contained in the {@link Context}. */\n @Immutable\n public final class BaggageUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NTkzMg==", "bodyText": "As long as TracingContextUtils, yes, I suggest we keep it public (and TracingContextUtils should probably stay public to be Specification compliant).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r514365932", "createdAt": "2020-10-29T15:48:07Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/BaggageUtils.java", "diffHunk": "@@ -5,18 +5,16 @@\n \n package io.opentelemetry.api.baggage;\n \n-import com.google.errorprone.annotations.MustBeClosed;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.ContextKey;\n-import io.opentelemetry.context.Scope;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /** Utility methods for accessing the {@link Baggage} contained in the {@link Context}. */\n @Immutable\n public final class BaggageUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTM1MQ=="}, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3NzQ1OA==", "bodyText": "even if none of the methods are public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r514377458", "createdAt": "2020-10-29T16:02:37Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/BaggageUtils.java", "diffHunk": "@@ -5,18 +5,16 @@\n \n package io.opentelemetry.api.baggage;\n \n-import com.google.errorprone.annotations.MustBeClosed;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.ContextKey;\n-import io.opentelemetry.context.Scope;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /** Utility methods for accessing the {@link Baggage} contained in the {@link Context}. */\n @Immutable\n public final class BaggageUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTM1MQ=="}, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyNDExNg==", "bodyText": "It does not need to be public, the specification says that the context interaction functionality can be added in few places, and avoid duplicate. So that needs to not be public.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r514524116", "createdAt": "2020-10-29T19:51:23Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/BaggageUtils.java", "diffHunk": "@@ -5,18 +5,16 @@\n \n package io.opentelemetry.api.baggage;\n \n-import com.google.errorprone.annotations.MustBeClosed;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.ContextKey;\n-import io.opentelemetry.context.Scope;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /** Utility methods for accessing the {@link Baggage} contained in the {@link Context}. */\n @Immutable\n public final class BaggageUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTM1MQ=="}, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2NjM4NQ==", "bodyText": "You guys can do whatever you want \ud83d\ude09  But if I may give my opinion, it looks really weird to be we have TracingContextUtils and no equivalent for BaggageUtils (why didn't we have public methods there, btw?)\nAlso, the specification says:\n\nthey MAY be exposed as static methods on the trace module, as static methods on a class inside the trace module (it MAY be named TracingContextUtilities), or on the Tracer class.\n\nSure, it only mentions the trace portion, but I would have hoped it would be similar for Baggage ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r515166385", "createdAt": "2020-10-30T15:06:25Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/BaggageUtils.java", "diffHunk": "@@ -5,18 +5,16 @@\n \n package io.opentelemetry.api.baggage;\n \n-import com.google.errorprone.annotations.MustBeClosed;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.ContextKey;\n-import io.opentelemetry.context.Scope;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /** Utility methods for accessing the {@link Baggage} contained in the {@link Context}. */\n @Immutable\n public final class BaggageUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTM1MQ=="}, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjgwMjExOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/baggage/Baggage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyNDowNFrOHqhNVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo0ODoyM1rOHqiaow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjMyNg==", "bodyText": "Do we need this? People can compare with empty or can check for size of entries.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r514346326", "createdAt": "2020-10-29T15:24:04Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/Baggage.java", "diffHunk": "@@ -39,6 +39,23 @@ static Baggage current() {\n     return BaggageUtils.getCurrentBaggage();\n   }\n \n+  /**\n+   * Returns the {@link Baggage} from the specified {@link Context}, falling back to a empty {@link\n+   * Baggage} if there is no baggage in the context.\n+   */\n+  static Baggage fromContext(Context context) {\n+    return BaggageUtils.getBaggage(context);\n+  }\n+\n+  /**\n+   * Returns the {@link Baggage} from the specified {@link Context}, or {@code null} if there is no\n+   * baggage in the context.\n+   */\n+  @Nullable\n+  static Baggage fromContextOrNull(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjY0MQ==", "bodyText": "May be in a separate PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r514346641", "createdAt": "2020-10-29T15:24:26Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/Baggage.java", "diffHunk": "@@ -39,6 +39,23 @@ static Baggage current() {\n     return BaggageUtils.getCurrentBaggage();\n   }\n \n+  /**\n+   * Returns the {@link Baggage} from the specified {@link Context}, falling back to a empty {@link\n+   * Baggage} if there is no baggage in the context.\n+   */\n+  static Baggage fromContext(Context context) {\n+    return BaggageUtils.getBaggage(context);\n+  }\n+\n+  /**\n+   * Returns the {@link Baggage} from the specified {@link Context}, or {@code null} if there is no\n+   * baggage in the context.\n+   */\n+  @Nullable\n+  static Baggage fromContextOrNull(Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjMyNg=="}, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjExNQ==", "bodyText": "+1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1916#discussion_r514366115", "createdAt": "2020-10-29T15:48:23Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/Baggage.java", "diffHunk": "@@ -39,6 +39,23 @@ static Baggage current() {\n     return BaggageUtils.getCurrentBaggage();\n   }\n \n+  /**\n+   * Returns the {@link Baggage} from the specified {@link Context}, falling back to a empty {@link\n+   * Baggage} if there is no baggage in the context.\n+   */\n+  static Baggage fromContext(Context context) {\n+    return BaggageUtils.getBaggage(context);\n+  }\n+\n+  /**\n+   * Returns the {@link Baggage} from the specified {@link Context}, or {@code null} if there is no\n+   * baggage in the context.\n+   */\n+  @Nullable\n+  static Baggage fromContextOrNull(Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjMyNg=="}, "originalCommit": {"oid": "cba055c6b7221610ff7faf8b163f8811f75e8b19"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2038, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}