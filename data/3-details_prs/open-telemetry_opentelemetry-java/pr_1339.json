{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTY0OTg5", "number": 1339, "title": "MultiTracePropagator implementation", "bodyText": "Prototype for supporting multiple Trace formats properly, which is specially handy when the user wants to support a few formats upon extraction (W3C, Jaeger, B3, etc). Intended to solve open-telemetry/opentelemetry-specification#496\nPart of the change is having Propagator instances NOT set anything when extraction failed (currently we set DefaultSpan.getInvalid()). This may 'leak' lingering, old active Spans, but this is an error in itself - on the other hand, it means we will be creating less Context objects (upon failed extraction, that is).\nAlso, there's the consideration of whether we need this as a general-purpose propagator, or specific for tracing ;)\nThe interesting piece of code is this:\n  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n    for (int i = 0; i < propagators.length; i++) {\n      context = propagators[i].extract(context, carrier, getter);\n      if (TracingContextUtils.getSpanWithoutDefault(context) != null) {\n        break;\n      }\n    }\n\n    return context;\n  }\nRelated to #1273\nPS - Ignore the code style, lack of builder, etc. Will update that once we find agreement ;)", "createdAt": "2020-06-17T16:30:49Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339", "merged": true, "mergeCommit": {"oid": "890ba28fbc38ac1b1430d7b2d0d91cefc3553e3e"}, "closed": true, "closedAt": "2020-07-01T17:14:22Z", "author": {"login": "carlosalberto"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsMRmVAH2gAyNDM1OTY0OTg5Ojk2MDA2M2VhNjMzMDFmNWJiMmVjNmU4NGM4ODkyN2JiZmRlZjY1YjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwrtgOAFqTQ0MDk2MDcxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "960063ea63301f5bb2ec6e84c88927bbfdef65b1", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/960063ea63301f5bb2ec6e84c88927bbfdef65b1", "committedDate": "2020-06-17T16:16:50Z", "message": "Initial prototype of StackPropagator for multiple formats support."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84a61f79f421c2c094f31dda994b3b29012053a8", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/84a61f79f421c2c094f31dda994b3b29012053a8", "committedDate": "2020-06-17T16:19:26Z", "message": "Merge branch 'master' into stackpropagator_prototype"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjY5MDM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#pullrequestreview-432669035", "createdAt": "2020-06-17T18:33:36Z", "commit": {"oid": "84a61f79f421c2c094f31dda994b3b29012053a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozMzozNlrOGlSIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozMzozNlrOGlSIWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzU0Ng==", "bodyText": "This call is a bit opaque. Is there a more readable way to do this work? Even just a method in this class called something like \"isContextUsable\" would help a lot.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r441747546", "createdAt": "2020-06-17T18:33:36Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackPropagator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of a composite propagator for trace.\n+ */\n+@Immutable\n+public class StackPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  public StackPropagator(HttpTextFormat... propagators) {\n+    this.propagators = propagators;\n+\n+    List<String> fields = new ArrayList<>();\n+    for (HttpTextFormat propagator : propagators) {\n+      fields.addAll(propagator.fields());\n+    }\n+    this.propagatorsFields = Collections.unmodifiableList(fields);\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return propagatorsFields;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      propagators[i].inject(context, carrier, setter);\n+    }\n+  }\n+\n+  @Override\n+  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      context = propagators[i].extract(context, carrier, getter);\n+      if (TracingContextUtils.getSpanWithoutDefault(context) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84a61f79f421c2c094f31dda994b3b29012053a8"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5d159b606bfca0318dc228f9de5c7189676dde", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6c5d159b606bfca0318dc228f9de5c7189676dde", "committedDate": "2020-06-24T15:34:26Z", "message": "Merge branch 'master' into stackpropagator_prototype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "385f44e419508823dbc1fbc7538916e92f50f95d", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/385f44e419508823dbc1fbc7538916e92f50f95d", "committedDate": "2020-06-24T16:14:54Z", "message": "Add a builder."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a76efd5b2049e3019943df8d8268e6f79a3e789b", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a76efd5b2049e3019943df8d8268e6f79a3e789b", "committedDate": "2020-06-25T13:24:54Z", "message": "Polish the implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d8e197e82e0e5170ae303ce786480aead28664f", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8d8e197e82e0e5170ae303ce786480aead28664f", "committedDate": "2020-06-25T13:29:10Z", "message": "Rename."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f98f8800e6768e85b2a7652f5496e0682bdb30ca", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f98f8800e6768e85b2a7652f5496e0682bdb30ca", "committedDate": "2020-06-25T13:39:04Z", "message": "Add a method to signal the Context's state."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f", "committedDate": "2020-06-25T13:46:42Z", "message": "Remove the multiple-extractions sample."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTgxODc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#pullrequestreview-437581877", "createdAt": "2020-06-25T14:59:06Z", "commit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1OTowNlrOGo-vzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1OTowNlrOGo-vzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDI3MQ==", "bodyText": "I think calling this stack trace will confuse many people. How about StackedTracePropagator, or TraceMultiPropagator or CompoundPropagator?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445624271", "createdAt": "2020-06-25T14:59:06Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = StackTracePropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class StackTracePropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTY3NTYw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#pullrequestreview-437567560", "createdAt": "2020-06-25T14:44:42Z", "commit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo0NjowM1rOGo-Jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowMDo0N1rOGo-1Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNDQ0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * intendended for backwards compatibility with existing services using different formats. It works\n          \n          \n            \n             * intended for compatibility with existing services using different formats. It works\n          \n      \n    \n    \n  \n\nDon't see any reason for a propagator to pick sides in what's backwards or forwards compatibility.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445614443", "createdAt": "2020-06-25T14:46:03Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ==", "bodyText": "Why start from the last instead of the first? Seems more intuitive to just go in order.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445616231", "createdAt": "2020-06-25T14:48:24Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNzI4Nw==", "bodyText": "In particular, I think it's a huge problem that this class is called \"StackTrace Propagator\" :P I'd take the easiest way out of removing this conflict with a common programming term and just go in order.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445617287", "createdAt": "2020-06-25T14:49:52Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNTYwNw==", "bodyText": "Can we change it so propagator work on SpanContext? Is there a reason we use Context and copy all this logic into every propagator?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445625607", "createdAt": "2020-06-25T15:00:47Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -125,6 +125,10 @@\n     checkNotNull(getter, \"getter\");\n \n     SpanContext spanContext = extractImpl(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/00bfcacc82e9670185cecd107d8729fb5e2bc952", "committedDate": "2020-06-30T18:15:49Z", "message": "Rename to TraceMultiPropagator."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9dadbbcfc29b9760303e39a615b519d62f3a1e71", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9dadbbcfc29b9760303e39a615b519d62f3a1e71", "committedDate": "2020-06-25T15:51:34Z", "message": "Update extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}, "afterCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/00bfcacc82e9670185cecd107d8729fb5e2bc952", "committedDate": "2020-06-30T18:15:49Z", "message": "Rename to TraceMultiPropagator."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzM5MzQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#pullrequestreview-440339346", "createdAt": "2020-06-30T19:55:53Z", "commit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NTo1M1rOGrMObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NTo1M1rOGrMObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MjI1Mw==", "bodyText": "can you add unit test cases for this new behavior, for each of the propagators that's changed?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r447942253", "createdAt": "2020-06-30T19:55:53Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -110,6 +110,9 @@\n     Objects.requireNonNull(getter, \"getter\");\n \n     SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDYxNjc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#pullrequestreview-440461675", "createdAt": "2020-06-30T23:56:35Z", "commit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo1NjozNlrOGrSViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo1NjozNlrOGrSViw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MjM3OQ==", "bodyText": "Should we validate if fields are duped? Or does it not matter? Mainly wondering whether it's ok for this list to have dupes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r448042379", "createdAt": "2020-06-30T23:56:36Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/TraceMultiPropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = TraceMultiPropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class TraceMultiPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  private TraceMultiPropagator(List<HttpTextFormat> propagatorList) {\n+    this.propagators = new HttpTextFormat[propagatorList.size()];\n+    propagatorList.toArray(this.propagators);\n+\n+    List<String> fields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dbc0070243db3c58963449acd43a2ccaec1bf35", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8dbc0070243db3c58963449acd43a2ccaec1bf35", "committedDate": "2020-07-01T13:46:44Z", "message": "Add tests for extracting nothing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTU0Mjcw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#pullrequestreview-440954270", "createdAt": "2020-07-01T15:02:20Z", "commit": {"oid": "8dbc0070243db3c58963449acd43a2ccaec1bf35"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTYwNzE1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#pullrequestreview-440960715", "createdAt": "2020-07-01T15:09:44Z", "commit": {"oid": "8dbc0070243db3c58963449acd43a2ccaec1bf35"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTowOTo0NFrOGrqE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTowOTo0NFrOGrqE1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzMTMxNg==", "bodyText": "If you can add a TODO to the issue here would be nice", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r448431316", "createdAt": "2020-07-01T15:09:44Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/TraceMultiPropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = TraceMultiPropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class TraceMultiPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  private TraceMultiPropagator(List<HttpTextFormat> propagatorList) {\n+    this.propagators = new HttpTextFormat[propagatorList.size()];\n+    propagatorList.toArray(this.propagators);\n+\n+    List<String> fields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MjM3OQ=="}, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2468, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}