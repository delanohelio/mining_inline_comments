{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTU4ODIy", "number": 937, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozMjoxMFrODjR_Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyNzozNFrODjSsrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzIxNTEwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozMjoxMFrOFvANgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyNToxN1rOFvBO9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMDg1MA==", "bodyText": "Are we willing to accept that we might be overwriting something that was recorded later than what we're currently holding onto? I'm thinking of the dimensionality reduction use-case for this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384830850", "createdAt": "2020-02-26T23:32:10Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+public final class DoubleLastValueAggregator extends AbstractAggregator {\n+\n+  private static final double DEFAULT_VALUE = 0.0;\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new DoubleLastValueAggregator();\n+        }\n+      };\n+\n+  private final AtomicDouble current = new AtomicDouble(DEFAULT_VALUE);\n+\n+  public static AggregatorFactory getFactory() {\n+    return AGGREGATOR_FACTORY;\n+  }\n+\n+  @Override\n+  void doMergeAndReset(Aggregator aggregator) {\n+    DoubleLastValueAggregator other = (DoubleLastValueAggregator) aggregator;\n+    other.current.set(this.current.getAndSet(DEFAULT_VALUE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTQyNw==", "bodyText": "This is use only for observer so all the events are recorded once in the callback execution, if we want to support this for CounterInstruments or MeasureInstruments then we need a time as well and preserver the ordering.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384831427", "createdAt": "2020-02-26T23:34:03Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+public final class DoubleLastValueAggregator extends AbstractAggregator {\n+\n+  private static final double DEFAULT_VALUE = 0.0;\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new DoubleLastValueAggregator();\n+        }\n+      };\n+\n+  private final AtomicDouble current = new AtomicDouble(DEFAULT_VALUE);\n+\n+  public static AggregatorFactory getFactory() {\n+    return AGGREGATOR_FACTORY;\n+  }\n+\n+  @Override\n+  void doMergeAndReset(Aggregator aggregator) {\n+    DoubleLastValueAggregator other = (DoubleLastValueAggregator) aggregator;\n+    other.current.set(this.current.getAndSet(DEFAULT_VALUE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMDg1MA=="}, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMzE4Ng==", "bodyText": "We should make that very clear in the documentation of this class, then, and perhaps in the class name. Can we just call the class ObserverLastValue ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384833186", "createdAt": "2020-02-26T23:39:23Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+public final class DoubleLastValueAggregator extends AbstractAggregator {\n+\n+  private static final double DEFAULT_VALUE = 0.0;\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new DoubleLastValueAggregator();\n+        }\n+      };\n+\n+  private final AtomicDouble current = new AtomicDouble(DEFAULT_VALUE);\n+\n+  public static AggregatorFactory getFactory() {\n+    return AGGREGATOR_FACTORY;\n+  }\n+\n+  @Override\n+  void doMergeAndReset(Aggregator aggregator) {\n+    DoubleLastValueAggregator other = (DoubleLastValueAggregator) aggregator;\n+    other.current.set(this.current.getAndSet(DEFAULT_VALUE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMDg1MA=="}, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0NzYwNQ==", "bodyText": "Documented in the description this limitation. For the moment I would not rename it since we most likely are going to fix this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384847605", "createdAt": "2020-02-27T00:25:17Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+public final class DoubleLastValueAggregator extends AbstractAggregator {\n+\n+  private static final double DEFAULT_VALUE = 0.0;\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new DoubleLastValueAggregator();\n+        }\n+      };\n+\n+  private final AtomicDouble current = new AtomicDouble(DEFAULT_VALUE);\n+\n+  public static AggregatorFactory getFactory() {\n+    return AGGREGATOR_FACTORY;\n+  }\n+\n+  @Override\n+  void doMergeAndReset(Aggregator aggregator) {\n+    DoubleLastValueAggregator other = (DoubleLastValueAggregator) aggregator;\n+    other.current.set(this.current.getAndSet(DEFAULT_VALUE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMDg1MA=="}, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzIxNjUxOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozMjo1MlrOFvAOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo1NTo1NFrOFvArfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTA2NQ==", "bodyText": "I don't think we want an adder for the last-value impl, do we?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384831065", "createdAt": "2020-02-26T23:32:52Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public final class LongLastValueAggregator extends AbstractAggregator {\n+\n+  private static final long DEFAULT_VALUE = 0L;\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new LongLastValueAggregator();\n+        }\n+      };\n+\n+  // TODO: Change to use LongAdder when changed to java8.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODUyNw==", "bodyText": "correct, fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384838527", "createdAt": "2020-02-26T23:55:54Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public final class LongLastValueAggregator extends AbstractAggregator {\n+\n+  private static final long DEFAULT_VALUE = 0L;\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new LongLastValueAggregator();\n+        }\n+      };\n+\n+  // TODO: Change to use LongAdder when changed to java8.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTA2NQ=="}, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzIxODk1OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozNDowNlrOFvAP2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzowMzo1MFrOFvD0_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTQ0OA==", "bodyText": "I don't think this is a good default. I actually think we should return a null Point if nothing has been recorded, rather than returning a possibly misleading 0.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384831448", "createdAt": "2020-02-26T23:34:06Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public final class LongLastValueAggregator extends AbstractAggregator {\n+\n+  private static final long DEFAULT_VALUE = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0NzY3Ng==", "bodyText": "Documented in the description this limitation.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384847676", "createdAt": "2020-02-27T00:25:30Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public final class LongLastValueAggregator extends AbstractAggregator {\n+\n+  private static final long DEFAULT_VALUE = 0L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTQ0OA=="}, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDExMQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384890111", "createdAt": "2020-02-27T03:03:50Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public final class LongLastValueAggregator extends AbstractAggregator {\n+\n+  private static final long DEFAULT_VALUE = 0L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTQ0OA=="}, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzMzMTAxOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyNzozNFrOFvBRvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoyNzoyM1rOFvYCKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMxNg==", "bodyText": "Is it possible that an aggregator is asked to report data before the observer has had a chance to report, hence leading to a zero value recorded? The lifecycle in this is unclear to me. I'm also ok addressing this in a follow-up PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384848316", "createdAt": "2020-02-27T00:27:34Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+/**\n+ * Aggregator that aggregates recorded values by storing the last recorded value.\n+ *\n+ * <p>Limitations:\n+ *\n+ * <ul>\n+ *   <li>The current implementation does not store a time when the value was recorded, so merging\n+ *       multiple LastValueAggregators will not preserve the ordering of records. This is not a\n+ *       problem because LastValueAggregator is currently only available for Observers which record\n+ *       all values once.\n+ *   <li>The current implementation does not properly reset the current value, it should use a\n+ *       {@code null} value instead of 0. This is not a problem because LastValueAggregator is\n+ *       currently only available for Observers which do not reuse reset instances.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODcyNQ==", "bodyText": "That behavior is not possible.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384848725", "createdAt": "2020-02-27T00:28:54Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+/**\n+ * Aggregator that aggregates recorded values by storing the last recorded value.\n+ *\n+ * <p>Limitations:\n+ *\n+ * <ul>\n+ *   <li>The current implementation does not store a time when the value was recorded, so merging\n+ *       multiple LastValueAggregators will not preserve the ordering of records. This is not a\n+ *       problem because LastValueAggregator is currently only available for Observers which record\n+ *       all values once.\n+ *   <li>The current implementation does not properly reset the current value, it should use a\n+ *       {@code null} value instead of 0. This is not a problem because LastValueAggregator is\n+ *       currently only available for Observers which do not reuse reset instances.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMxNg=="}, "originalCommit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTExOQ==", "bodyText": "A design doc that explains why this is true would be super helpful.  :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384849119", "createdAt": "2020-02-27T00:30:08Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+/**\n+ * Aggregator that aggregates recorded values by storing the last recorded value.\n+ *\n+ * <p>Limitations:\n+ *\n+ * <ul>\n+ *   <li>The current implementation does not store a time when the value was recorded, so merging\n+ *       multiple LastValueAggregators will not preserve the ordering of records. This is not a\n+ *       problem because LastValueAggregator is currently only available for Observers which record\n+ *       all values once.\n+ *   <li>The current implementation does not properly reset the current value, it should use a\n+ *       {@code null} value instead of 0. This is not a problem because LastValueAggregator is\n+ *       currently only available for Observers which do not reuse reset instances.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMxNg=="}, "originalCommit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTE3Mw==", "bodyText": "Not sure what to do now :) do you mind clarify what you want to see?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384861173", "createdAt": "2020-02-27T01:11:00Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+/**\n+ * Aggregator that aggregates recorded values by storing the last recorded value.\n+ *\n+ * <p>Limitations:\n+ *\n+ * <ul>\n+ *   <li>The current implementation does not store a time when the value was recorded, so merging\n+ *       multiple LastValueAggregators will not preserve the ordering of records. This is not a\n+ *       problem because LastValueAggregator is currently only available for Observers which record\n+ *       all values once.\n+ *   <li>The current implementation does not properly reset the current value, it should use a\n+ *       {@code null} value instead of 0. This is not a problem because LastValueAggregator is\n+ *       currently only available for Observers which do not reuse reset instances.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMxNg=="}, "originalCommit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDA4OQ==", "bodyText": "Done. No more chances :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384890089", "createdAt": "2020-02-27T03:03:42Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+/**\n+ * Aggregator that aggregates recorded values by storing the last recorded value.\n+ *\n+ * <p>Limitations:\n+ *\n+ * <ul>\n+ *   <li>The current implementation does not store a time when the value was recorded, so merging\n+ *       multiple LastValueAggregators will not preserve the ordering of records. This is not a\n+ *       problem because LastValueAggregator is currently only available for Observers which record\n+ *       all values once.\n+ *   <li>The current implementation does not properly reset the current value, it should use a\n+ *       {@code null} value instead of 0. This is not a problem because LastValueAggregator is\n+ *       currently only available for Observers which do not reuse reset instances.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMxNg=="}, "originalCommit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyMTE2Mw==", "bodyText": "cool. thanks. Still would love to see an overall design documentation about how this metrics system works, for future us. The code is pretty complex, and documentation will pay dividends in the long run.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r385221163", "createdAt": "2020-02-27T16:27:23Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+/**\n+ * Aggregator that aggregates recorded values by storing the last recorded value.\n+ *\n+ * <p>Limitations:\n+ *\n+ * <ul>\n+ *   <li>The current implementation does not store a time when the value was recorded, so merging\n+ *       multiple LastValueAggregators will not preserve the ordering of records. This is not a\n+ *       problem because LastValueAggregator is currently only available for Observers which record\n+ *       all values once.\n+ *   <li>The current implementation does not properly reset the current value, it should use a\n+ *       {@code null} value instead of 0. This is not a problem because LastValueAggregator is\n+ *       currently only available for Observers which do not reuse reset instances.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMxNg=="}, "originalCommit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 929, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}