{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTg3Njk4", "number": 1257, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDo0NzowOVrOD-YsIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDo0NzowOVrOD-YsIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzQyODE4OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDo0NzowOVrOGYdOJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTozNDozOVrOGYeniQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng==", "bodyText": "Let's be consistent and do the wrapping in one place.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428297766", "createdAt": "2020-05-20T20:47:09Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -59,7 +59,7 @@ static SpanWrapper create(\n       Status status) {\n     return new AutoValue_SpanWrapper(\n         delegate,\n-        Collections.unmodifiableList(links),\n+        links, // note: the caller has already made this unmodifiable\n         Collections.unmodifiableList(events),\n         Collections.unmodifiableMap(attributes),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19545cca939145624cd94e5974319d4fc01708ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMwNTQzMg==", "bodyText": "How do you feel about using guava's ImmutableList and ImmutableMap here? That way, the immutable nature can be enforced by parameter type.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428305432", "createdAt": "2020-05-20T21:02:13Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -59,7 +59,7 @@ static SpanWrapper create(\n       Status status) {\n     return new AutoValue_SpanWrapper(\n         delegate,\n-        Collections.unmodifiableList(links),\n+        links, // note: the caller has already made this unmodifiable\n         Collections.unmodifiableList(events),\n         Collections.unmodifiableMap(attributes),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, "originalCommit": {"oid": "19545cca939145624cd94e5974319d4fc01708ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMwOTgwNw==", "bodyText": "Hm. It's also true that, currently, if the span hasn't ended, the attributes will still be modified by the running span, making the unmodifiable wrapper not really immutable. The only way I know to solve this is to copy the Map's contents, rather than just wrapping.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428309807", "createdAt": "2020-05-20T21:11:39Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -59,7 +59,7 @@ static SpanWrapper create(\n       Status status) {\n     return new AutoValue_SpanWrapper(\n         delegate,\n-        Collections.unmodifiableList(links),\n+        links, // note: the caller has already made this unmodifiable\n         Collections.unmodifiableList(events),\n         Collections.unmodifiableMap(attributes),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, "originalCommit": {"oid": "19545cca939145624cd94e5974319d4fc01708ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMzExMA==", "bodyText": "That was the bug that I mentioned in the previous PR. You need to have a\nprivate HashMap<> getImmutableAttributes() {\n  if (hasEnded) {\n    return Collections.unmodifiableMap(attributes)\n  }\n  return Collections.unmodifiableMap(new HashMap<>(attributes))\n}", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428313110", "createdAt": "2020-05-20T21:18:58Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -59,7 +59,7 @@ static SpanWrapper create(\n       Status status) {\n     return new AutoValue_SpanWrapper(\n         delegate,\n-        Collections.unmodifiableList(links),\n+        links, // note: the caller has already made this unmodifiable\n         Collections.unmodifiableList(events),\n         Collections.unmodifiableMap(attributes),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, "originalCommit": {"oid": "19545cca939145624cd94e5974319d4fc01708ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyMDEzNA==", "bodyText": "ok. I added a test for this particular case, and made it pass.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428320134", "createdAt": "2020-05-20T21:33:19Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -59,7 +59,7 @@ static SpanWrapper create(\n       Status status) {\n     return new AutoValue_SpanWrapper(\n         delegate,\n-        Collections.unmodifiableList(links),\n+        links, // note: the caller has already made this unmodifiable\n         Collections.unmodifiableList(events),\n         Collections.unmodifiableMap(attributes),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, "originalCommit": {"oid": "19545cca939145624cd94e5974319d4fc01708ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyMDY0OQ==", "bodyText": "(and moved the unmodifiable wrapping to all be in the RERS)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1257#discussion_r428320649", "createdAt": "2020-05-20T21:34:39Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -59,7 +59,7 @@ static SpanWrapper create(\n       Status status) {\n     return new AutoValue_SpanWrapper(\n         delegate,\n-        Collections.unmodifiableList(links),\n+        links, // note: the caller has already made this unmodifiable\n         Collections.unmodifiableList(events),\n         Collections.unmodifiableMap(attributes),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5Nzc2Ng=="}, "originalCommit": {"oid": "19545cca939145624cd94e5974319d4fc01708ad"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 711, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}