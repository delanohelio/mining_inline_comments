{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODQzOTU4", "number": 1152, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDozODo1OFrOD3OkMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0NDoxOFrOD3VP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjM2OTE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDozODo1OFrOGNXZZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDozODo1OFrOGNXZZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2ODAwNg==", "bodyText": "Not sure I understand the purpose of this interface. Can we remove it?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416668006", "createdAt": "2020-04-28T14:38:58Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzIyMzk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0MzoxMFrOGNfrEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTozODowM1rOGOR-lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA==", "bodyText": "Rather than Object, can we have this interface be parameterized with a type?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416803600", "createdAt": "2020-04-28T17:43:10Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {\n+\n+  /**\n+   * Returns the unobfuscated provider.\n+   *\n+   * @return the unobfuscated provider.\n+   * @since 0.4.0\n+   */\n+  Object unobfuscate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxMjI1Mw==", "bodyText": "I like that idea. Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416812253", "createdAt": "2020-04-28T17:56:43Z", "author": {"login": "trask"}, "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {\n+\n+  /**\n+   * Returns the unobfuscated provider.\n+   *\n+   * @return the unobfuscated provider.\n+   * @since 0.4.0\n+   */\n+  Object unobfuscate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA=="}, "originalCommit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNjQ4OQ==", "bodyText": "@trask before doing this change, can we clarify why having this interface at all is necessary? Not saying to not obfuscate, I refer to the Obfuscated interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416836489", "createdAt": "2020-04-28T18:35:39Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {\n+\n+  /**\n+   * Returns the unobfuscated provider.\n+   *\n+   * @return the unobfuscated provider.\n+   * @since 0.4.0\n+   */\n+  Object unobfuscate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA=="}, "originalCommit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNzc5OQ==", "bodyText": "@bogdandrutu just wanted to make sure that you saw my response #1152 (comment) (I should have replied here also)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r417627799", "createdAt": "2020-04-29T21:38:03Z", "author": {"login": "trask"}, "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {\n+\n+  /**\n+   * Returns the unobfuscated provider.\n+   *\n+   * @return the unobfuscated provider.\n+   * @since 0.4.0\n+   */\n+  Object unobfuscate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA=="}, "originalCommit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzQ2Mzg2OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0NDoxOFrOGNh_7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0NDoxOFrOGNh_7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MTcxMQ==", "bodyText": "@bogdandrutu this is where the Obfuscated interface is used. OpenTelemetrySdk.getTracerProvider() needs some way to unwrap and retrieve the TracerSdkProvider. Did you have other idea how to unwrap?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416841711", "createdAt": "2020-04-28T18:44:18Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -40,7 +41,7 @@\n    * @since 0.1.0\n    */\n   public static TracerSdkProvider getTracerProvider() {\n-    return (TracerSdkProvider) OpenTelemetry.getTracerProvider();\n+    return (TracerSdkProvider) ((Obfuscated<?>) OpenTelemetry.getTracerProvider()).unobfuscate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 884, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}