{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDEzNTk2", "number": 1399, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowMTowN1rOEMtFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDoyNDozN1rOEMvG_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzU3MDUzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/common/LabelsTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowMTowN1rOGu-Gjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMzo1Nzo0NFrOGvA1LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTE2Nw==", "bodyText": "Looks like we don't really need the size assertions", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451905167", "createdAt": "2020-07-09T01:01:07Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/common/LabelsTest.java", "diffHunk": "@@ -124,4 +124,14 @@ public void builder() {\n                 \"key1\", \"value1\",\n                 \"key2\", \"value2\"));\n   }\n+\n+  @Test\n+  public void toBuilder() {\n+    Labels initial = Labels.of(\"one\", \"a\");\n+    Labels second = initial.toBuilder().setLabel(\"two\", \"b\").build();\n+    assertThat(initial.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d9a40eace360b6c4b143abc1bc7d2e5e76b66e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTUxMg==", "bodyText": "Well maybe they help - don't think I can find a toString for the key value pair classes which would be important for the equals assertions when they fail.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451905512", "createdAt": "2020-07-09T01:02:31Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/common/LabelsTest.java", "diffHunk": "@@ -124,4 +124,14 @@ public void builder() {\n                 \"key1\", \"value1\",\n                 \"key2\", \"value2\"));\n   }\n+\n+  @Test\n+  public void toBuilder() {\n+    Labels initial = Labels.of(\"one\", \"a\");\n+    Labels second = initial.toBuilder().setLabel(\"two\", \"b\").build();\n+    assertThat(initial.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTE2Nw=="}, "originalCommit": {"oid": "04d9a40eace360b6c4b143abc1bc7d2e5e76b66e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwODA0OA==", "bodyText": "My thinking was that, with such a non-trivial implementation internally, that a few extra assertions wouldn't hurt. The size isn't the size of the arraylist, for example.\nAlso, a toString is a really good idea! Not sure why I didn't put that in originally.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451908048", "createdAt": "2020-07-09T01:12:31Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/common/LabelsTest.java", "diffHunk": "@@ -124,4 +124,14 @@ public void builder() {\n                 \"key1\", \"value1\",\n                 \"key2\", \"value2\"));\n   }\n+\n+  @Test\n+  public void toBuilder() {\n+    Labels initial = Labels.of(\"one\", \"a\");\n+    Labels second = initial.toBuilder().setLabel(\"two\", \"b\").build();\n+    assertThat(initial.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTE2Nw=="}, "originalCommit": {"oid": "04d9a40eace360b6c4b143abc1bc7d2e5e76b66e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0OTg2OQ==", "bodyText": "I added a toString, just for good measure.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451949869", "createdAt": "2020-07-09T03:57:44Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/common/LabelsTest.java", "diffHunk": "@@ -124,4 +124,14 @@ public void builder() {\n                 \"key1\", \"value1\",\n                 \"key2\", \"value2\"));\n   }\n+\n+  @Test\n+  public void toBuilder() {\n+    Labels initial = Labels.of(\"one\", \"a\");\n+    Labels second = initial.toBuilder().setLabel(\"two\", \"b\").build();\n+    assertThat(initial.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTE2Nw=="}, "originalCommit": {"oid": "04d9a40eace360b6c4b143abc1bc7d2e5e76b66e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzkwMDQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDoyMzoxOVrOGvBLsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxMDo1N1rOGvVrPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTYzNQ==", "bodyText": "Usually see sb.setLength(sb.length() - 1) for dealing with pesky commas. Checked deleteCharAt and it doesn't seem to avoid System.arrayCopy even for this simple case", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451955635", "createdAt": "2020-07-09T04:23:19Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -128,4 +128,22 @@ private static void swap(Object[] data, int a, int b) {\n     data[b] = keyA;\n     data[b + 1] = valueA;\n   }\n+\n+  @Override\n+  public String toString() {\n+    final StringBuilder sb = new StringBuilder(\"{\");\n+    forEach(\n+        new KeyValueConsumer<V>() {\n+          @Override\n+          public void consume(String key, V value) {\n+            sb.append(key).append(\":\").append(value).append(\",\");\n+          }\n+        });\n+    // get rid of that last pesky comma\n+    if (sb.length() > 1) {\n+      sb.deleteCharAt(sb.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MTM4OQ==", "bodyText": "oh! good tip. I hadn't looked that deeply into the implementation of deleteCharAt. Probably not a big deal for a debugging toString method, but no reason not to change it, now that I know!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r452291389", "createdAt": "2020-07-09T15:10:57Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -128,4 +128,22 @@ private static void swap(Object[] data, int a, int b) {\n     data[b] = keyA;\n     data[b + 1] = valueA;\n   }\n+\n+  @Override\n+  public String toString() {\n+    final StringBuilder sb = new StringBuilder(\"{\");\n+    forEach(\n+        new KeyValueConsumer<V>() {\n+          @Override\n+          public void consume(String key, V value) {\n+            sb.append(key).append(\":\").append(value).append(\",\");\n+          }\n+        });\n+    // get rid of that last pesky comma\n+    if (sb.length() > 1) {\n+      sb.deleteCharAt(sb.length() - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTYzNQ=="}, "originalCommit": {"oid": "c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzkwMjA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDoyNDozN1rOGvBMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxNDo1MVrOGvV1oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTg3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sb.append(key).append(\":\").append(value).append(\",\");\n          \n          \n            \n                        sb.append(key).append(\"=\").append(value).append(\", \");\n          \n      \n    \n    \n  \n\nNit but maybe we should go ahead and match Map? https://github.com/openjdk/jdk/blob/master/test/jdk/java/util/AbstractMap/ToString.java#L46", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r451955876", "createdAt": "2020-07-09T04:24:37Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -128,4 +128,22 @@ private static void swap(Object[] data, int a, int b) {\n     data[b] = keyA;\n     data[b + 1] = valueA;\n   }\n+\n+  @Override\n+  public String toString() {\n+    final StringBuilder sb = new StringBuilder(\"{\");\n+    forEach(\n+        new KeyValueConsumer<V>() {\n+          @Override\n+          public void consume(String key, V value) {\n+            sb.append(key).append(\":\").append(value).append(\",\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MTY3OQ==", "bodyText": "Sure. Updated, and added a test to make sure it matches.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r452291679", "createdAt": "2020-07-09T15:11:17Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -128,4 +128,22 @@ private static void swap(Object[] data, int a, int b) {\n     data[b] = keyA;\n     data[b + 1] = valueA;\n   }\n+\n+  @Override\n+  public String toString() {\n+    final StringBuilder sb = new StringBuilder(\"{\");\n+    forEach(\n+        new KeyValueConsumer<V>() {\n+          @Override\n+          public void consume(String key, V value) {\n+            sb.append(key).append(\":\").append(value).append(\",\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTg3Ng=="}, "originalCommit": {"oid": "c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NDA0OQ==", "bodyText": "Of course, one downside to having this match exactly is that if you had a test that was comparing Labels and a Map, the toString would match, but of course, they will never be equal!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1399#discussion_r452294049", "createdAt": "2020-07-09T15:14:51Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -128,4 +128,22 @@ private static void swap(Object[] data, int a, int b) {\n     data[b] = keyA;\n     data[b + 1] = valueA;\n   }\n+\n+  @Override\n+  public String toString() {\n+    final StringBuilder sb = new StringBuilder(\"{\");\n+    forEach(\n+        new KeyValueConsumer<V>() {\n+          @Override\n+          public void consume(String key, V value) {\n+            sb.append(key).append(\":\").append(value).append(\",\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NTg3Ng=="}, "originalCommit": {"oid": "c608ce4517eb4b43cb4ef2cb63e8c16a75940aa8"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1471, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}