{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNTg4MjY1", "number": 1254, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowOTozNFrOD-Q8_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowODowN1rOD_vpnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjE2MDYxOnYy", "diffSide": "RIGHT", "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowOTozNFrOGYQlbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowOTozNFrOGYQlbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MDczNQ==", "bodyText": "note: both of these are valid spellings. I'm ok with either.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428090735", "createdAt": "2020-05-20T15:09:34Z", "author": {"login": "jkwatson"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -68,7 +92,7 @@ public static Builder builder() {\n      * <p>This is a primary label for trace lookup and aggregation, so it should be intuitive and\n      * consistent. Many use a name from service discovery.\n      *\n-     * <p>Note: this value, will be superceded by the value of {@link\n+     * <p>Note: this value, will be superseded by the value of {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f198257738a6acad0a230826e428a40c601004e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjE2NTMxOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNToxMDo0MlrOGYQoig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyMTo1MlrOGZ3J-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MTUzMA==", "bodyText": "do we have a unit test for this new method?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428091530", "createdAt": "2020-05-20T15:10:42Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -139,4 +139,19 @@ protected static Long getLongProperty(String name, Map<String, String> map) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * Get a {@link String} property from the map, {@code null} if it cannot be found.\n+   *\n+   * @param name The property name\n+   * @param map The map where to look for the property\n+   * @return the {@link String} value of the property, {@code null} if the property cannot be found.\n+   */\n+  @Nullable\n+  protected static String getStringProperty(String name, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f198257738a6acad0a230826e428a40c601004e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE1NTMzOA==", "bodyText": "I think we should add tests for this.\nAlso this should just be map.get(). I am confused. https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#get-java.lang.Object-", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428155338", "createdAt": "2020-05-20T16:39:13Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -139,4 +139,19 @@ protected static Long getLongProperty(String name, Map<String, String> map) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * Get a {@link String} property from the map, {@code null} if it cannot be found.\n+   *\n+   * @param name The property name\n+   * @param map The map where to look for the property\n+   * @return the {@link String} value of the property, {@code null} if the property cannot be found.\n+   */\n+  @Nullable\n+  protected static String getStringProperty(String name, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MTUzMA=="}, "originalCommit": {"oid": "0f198257738a6acad0a230826e428a40c601004e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MTI1OA==", "bodyText": "I'll provide tests for this in a separate PR with further cleanups :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r429771258", "createdAt": "2020-05-25T07:21:52Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -139,4 +139,19 @@ protected static Long getLongProperty(String name, Map<String, String> map) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * Get a {@link String} property from the map, {@code null} if it cannot be found.\n+   *\n+   * @param name The property name\n+   * @param map The map where to look for the property\n+   * @return the {@link String} value of the property, {@code null} if the property cannot be found.\n+   */\n+  @Nullable\n+  protected static String getStringProperty(String name, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MTUzMA=="}, "originalCommit": {"oid": "0f198257738a6acad0a230826e428a40c601004e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njk1Mjk2OnYy", "diffSide": "RIGHT", "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMDo0NVrOGYYmIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMDo0NVrOGYYmIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMTk4NQ==", "bodyText": "Can we write unit tests for this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428221985", "createdAt": "2020-05-20T18:30:45Z", "author": {"login": "jkwatson"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinExporterConfiguration.java", "diffHunk": "@@ -122,5 +146,26 @@ public Builder setEndpoint(String endpoint) {\n      * @since 0.4.0\n      */\n     public abstract ZipkinExporterConfiguration build();\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    protected Builder fromConfigMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f198257738a6acad0a230826e428a40c601004e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njk1NDIzOnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorAsyncSpanProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMDo1N1rOGYYmyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMDo1N1rOGYYmyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjE1Mw==", "bodyText": "Can you write unit tests for this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r428222153", "createdAt": "2020-05-20T18:30:57Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorAsyncSpanProcessor.java", "diffHunk": "@@ -149,6 +183,29 @@ public DisruptorAsyncSpanProcessor build() {\n           spanProcessor.isStartRequired(),\n           spanProcessor.isEndRequired());\n     }\n+\n+    @Override\n+    protected Builder fromConfigMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f198257738a6acad0a230826e428a40c601004e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTY3NTgwOnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/test/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorAsyncSpanProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowODowN1rOGalnLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNTozM1rOGa8okw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMjM5OA==", "bodyText": "We need a test like this for the zipkin config, as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r430532398", "createdAt": "2020-05-26T16:08:07Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/async_processor/src/test/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorAsyncSpanProcessorTest.java", "diffHunk": "@@ -268,4 +272,26 @@ public void multipleForceFlush() {\n     assertThat(incrementSpanProcessor.getCounterOnExportedForceFlushSpans()).isEqualTo(tenK);\n     assertThat(incrementSpanProcessor.getCounterOnShutdown()).isEqualTo(1);\n   }\n+\n+  abstract static class ConfigBuilderTest extends ConfigBuilder<ConfigBuilderTest> {\n+    public static NamingConvention getNaming() {\n+      return NamingConvention.DOT;\n+    }\n+  }\n+\n+  @Test\n+  public void configTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81dfe7c5a30119a6c42f34932c635c7063b1dba"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwOTU4Nw==", "bodyText": "Thank you! I totally miss it! \ud83e\udd26", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1254#discussion_r430909587", "createdAt": "2020-05-27T07:25:33Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/async_processor/src/test/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorAsyncSpanProcessorTest.java", "diffHunk": "@@ -268,4 +272,26 @@ public void multipleForceFlush() {\n     assertThat(incrementSpanProcessor.getCounterOnExportedForceFlushSpans()).isEqualTo(tenK);\n     assertThat(incrementSpanProcessor.getCounterOnShutdown()).isEqualTo(1);\n   }\n+\n+  abstract static class ConfigBuilderTest extends ConfigBuilder<ConfigBuilderTest> {\n+    public static NamingConvention getNaming() {\n+      return NamingConvention.DOT;\n+    }\n+  }\n+\n+  @Test\n+  public void configTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMjM5OA=="}, "originalCommit": {"oid": "c81dfe7c5a30119a6c42f34932c635c7063b1dba"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 698, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}