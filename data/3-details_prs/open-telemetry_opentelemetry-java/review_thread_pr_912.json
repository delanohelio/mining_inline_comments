{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjI2NjYx", "number": 912, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODo1NjoxOFrODiPzPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowMjoyMVrODiP54A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjM3MDU0OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODo1NjoxOFrOFtY-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzoxMzozNlrOFtgI4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzOTU0NA==", "bodyText": "Nit: 2020", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/912#discussion_r383139544", "createdAt": "2020-02-24T08:56:18Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/Config.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8017e0d6de9da621ca72ce87194e284f1c2c5cf2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1NjgwMw==", "bodyText": "Ooops! :) Fixing that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/912#discussion_r383256803", "createdAt": "2020-02-24T13:13:36Z", "author": {"login": "prydin"}, "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/Config.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzOTU0NA=="}, "originalCommit": {"oid": "8017e0d6de9da621ca72ce87194e284f1c2c5cf2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjM3MzU1OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODo1NzoxMVrOFtZAgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzoxMzo1NVrOFtgJpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzOTk2OA==", "bodyText": "nit: I only saw {@code ...} style in Javadoc sections", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/912#discussion_r383139968", "createdAt": "2020-02-24T08:57:11Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/Config.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.auto.config;\n+\n+/**\n+ * An interface used to provide configuration information to {@link SpanExporterFactory}\n+ * implementations. Callers (such as the Java Auto Instrumenter) typically provide an implementation\n+ * mapping directly to their native configuration framework.\n+ *\n+ * <p>This interface is intentionally kept very simple since the underlying implementations may only\n+ * have access to very basic configuration mechanisms such as system properties and environment\n+ * variables.\n+ */\n+public interface Config {\n+  /**\n+   * Returns the string configuration property corresponding to a key. If the underlying\n+   * implementation cannot find a property for the key, <code>defaultValue</code> is returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8017e0d6de9da621ca72ce87194e284f1c2c5cf2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1Njk5OQ==", "bodyText": "OK. No problem.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/912#discussion_r383256999", "createdAt": "2020-02-24T13:13:55Z", "author": {"login": "prydin"}, "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/Config.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.auto.config;\n+\n+/**\n+ * An interface used to provide configuration information to {@link SpanExporterFactory}\n+ * implementations. Callers (such as the Java Auto Instrumenter) typically provide an implementation\n+ * mapping directly to their native configuration framework.\n+ *\n+ * <p>This interface is intentionally kept very simple since the underlying implementations may only\n+ * have access to very basic configuration mechanisms such as system properties and environment\n+ * variables.\n+ */\n+public interface Config {\n+  /**\n+   * Returns the string configuration property corresponding to a key. If the underlying\n+   * implementation cannot find a property for the key, <code>defaultValue</code> is returned.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzOTk2OA=="}, "originalCommit": {"oid": "8017e0d6de9da621ca72ce87194e284f1c2c5cf2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjM4NzUyOnYy", "diffSide": "RIGHT", "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/SpanExporterFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowMjoyMVrOFtZI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzoyMjowNlrOFtgX5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MjEwOA==", "bodyText": "I am not sure about the SPI framework. In my understanding, the implementation should register the exporter via the API offered by the SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/912#discussion_r383142108", "createdAt": "2020-02-24T09:02:21Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/SpanExporterFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.auto.config;\n+\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+/**\n+ * A {@link SpanExporterFactory} acts as the bootstrap for a {@link SpanExporter} implementation. An\n+ * exporter must register its implementation of a {@link SpanExporterFactory} through the Java SPI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8017e0d6de9da621ca72ce87194e284f1c2c5cf2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1ODA0OA==", "bodyText": "Well, this is for the auto instrumentation. The exporter and the auto instrumenter implementations don't know about each other, so we use SPI to load the exporter dynamically based on a JAR file name that's passed.\nHave a look here: https://github.com/open-telemetry/opentelemetry-auto-instr-java/blob/239eb53a44000f9f77e251a79e7189883451f5fc/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java#L41", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/912#discussion_r383258048", "createdAt": "2020-02-24T13:16:13Z", "author": {"login": "prydin"}, "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/SpanExporterFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.auto.config;\n+\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+/**\n+ * A {@link SpanExporterFactory} acts as the bootstrap for a {@link SpanExporter} implementation. An\n+ * exporter must register its implementation of a {@link SpanExporterFactory} through the Java SPI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MjEwOA=="}, "originalCommit": {"oid": "8017e0d6de9da621ca72ce87194e284f1c2c5cf2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MDY0NQ==", "bodyText": "Thanks for the clarification \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/912#discussion_r383260645", "createdAt": "2020-02-24T13:22:06Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/auto_config/src/main/java/io/opentelemetry/sdk/contrib/auto/config/SpanExporterFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.auto.config;\n+\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+/**\n+ * A {@link SpanExporterFactory} acts as the bootstrap for a {@link SpanExporter} implementation. An\n+ * exporter must register its implementation of a {@link SpanExporterFactory} through the Java SPI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MjEwOA=="}, "originalCommit": {"oid": "8017e0d6de9da621ca72ce87194e284f1c2c5cf2"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 919, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}