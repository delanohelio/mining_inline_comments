{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0ODIyODUy", "number": 1634, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTozMzo0NFrOEidudA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTozMzo0NFrOEidudA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTc0MDY4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTozMzo0NFrOHQWyAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTozNjozOVrOHQW8zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxMjUxMw==", "bodyText": "Should this comment be added to the Javadoc of the respective attributes somehow?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1634#discussion_r486912513", "createdAt": "2020-09-11T09:33:44Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -291,5 +291,47 @@\n   public static final StringAttributeSetter THREAD_NAME =\n       StringAttributeSetter.create(\"thread.name\");\n \n+  /** Type of the trigger on which the function is executed. */\n+  public static final StringAttributeSetter FAAS_TRIGGER =\n+      StringAttributeSetter.create(\"faas.trigger\");\n+  /** String containing the execution id of the function. */\n+  public static final StringAttributeSetter FAAS_EXECUTION =\n+      StringAttributeSetter.create(\"faas.execution\");\n+  /** Indicates that the serverless function is executed for the first time (aka cold start). */\n+  public static final BooleanAttributeSetter FAAS_COLDSTART =\n+      BooleanAttributeSetter.create(\"faas.coldstart\");\n+  /** The name of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_NAME =\n+      StringAttributeSetter.create(\"faas.invoked_name\");\n+  /** The cloud provider of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_PROVIDER =\n+      StringAttributeSetter.create(\"faas.invoked_provider\");\n+  /** The cloud region of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_REGION =\n+      StringAttributeSetter.create(\"faas.invoked_region\");\n+\n+  // faas.trigger == datasource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3da729c608ee48932e636aa36cf2364057e9e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxNTI3Ng==", "bodyText": "Good idea, thanks", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1634#discussion_r486915276", "createdAt": "2020-09-11T09:36:39Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -291,5 +291,47 @@\n   public static final StringAttributeSetter THREAD_NAME =\n       StringAttributeSetter.create(\"thread.name\");\n \n+  /** Type of the trigger on which the function is executed. */\n+  public static final StringAttributeSetter FAAS_TRIGGER =\n+      StringAttributeSetter.create(\"faas.trigger\");\n+  /** String containing the execution id of the function. */\n+  public static final StringAttributeSetter FAAS_EXECUTION =\n+      StringAttributeSetter.create(\"faas.execution\");\n+  /** Indicates that the serverless function is executed for the first time (aka cold start). */\n+  public static final BooleanAttributeSetter FAAS_COLDSTART =\n+      BooleanAttributeSetter.create(\"faas.coldstart\");\n+  /** The name of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_NAME =\n+      StringAttributeSetter.create(\"faas.invoked_name\");\n+  /** The cloud provider of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_PROVIDER =\n+      StringAttributeSetter.create(\"faas.invoked_provider\");\n+  /** The cloud region of the invoked function. */\n+  public static final StringAttributeSetter FAAS_INVOKED_REGION =\n+      StringAttributeSetter.create(\"faas.invoked_region\");\n+\n+  // faas.trigger == datasource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxMjUxMw=="}, "originalCommit": {"oid": "2b3da729c608ee48932e636aa36cf2364057e9e6"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1170, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}