{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MTgwOTQ4", "number": 2293, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNjo1MlrOFFImTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNjo1MlrOFFImTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTI4MDc5OnYy", "diffSide": "RIGHT", "path": "exporters/logging/src/main/java/io/opentelemetry/exporter/logging/LoggingSpanExporter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNjo1MlrOIFfHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDoxNzoyN1rOIGl2Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMzY2Mw==", "bodyText": "any thoughts to prefixing \"t\" before the trace id and \"s\" before the span id?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2293#discussion_r542623663", "createdAt": "2020-12-14T18:36:52Z", "author": {"login": "jkwatson"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporter/logging/LoggingSpanExporter.java", "diffHunk": "@@ -15,12 +15,23 @@\n \n /** A Span Exporter that logs every span at INFO level using java.util.logging. */\n public class LoggingSpanExporter implements SpanExporter {\n-  private static final Logger logger = Logger.getLogger(LoggingSpanExporter.class.getName());\n+  // Visible for testing\n+  static final Logger logger = Logger.getLogger(LoggingSpanExporter.class.getName());\n \n   @Override\n   public CompletableResultCode export(Collection<SpanData> spans) {\n+    // We always have 32 + 16 + name + several whitespace, 60 seems like an OK initial guess.\n+    StringBuilder sb = new StringBuilder(60);\n     for (SpanData span : spans) {\n-      logger.log(Level.INFO, \"span: {0}\", span);\n+      sb.setLength(0);\n+      sb.append(span.getName())\n+          .append(\" \")\n+          .append(span.getTraceId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed45fd09dd023b9c0b8fe50b2e273c11541d34b4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3MzY1NA==", "bodyText": "The drastically different length of the values makes me ok without the prefix.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2293#discussion_r543073654", "createdAt": "2020-12-15T06:12:34Z", "author": {"login": "anuraaga"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporter/logging/LoggingSpanExporter.java", "diffHunk": "@@ -15,12 +15,23 @@\n \n /** A Span Exporter that logs every span at INFO level using java.util.logging. */\n public class LoggingSpanExporter implements SpanExporter {\n-  private static final Logger logger = Logger.getLogger(LoggingSpanExporter.class.getName());\n+  // Visible for testing\n+  static final Logger logger = Logger.getLogger(LoggingSpanExporter.class.getName());\n \n   @Override\n   public CompletableResultCode export(Collection<SpanData> spans) {\n+    // We always have 32 + 16 + name + several whitespace, 60 seems like an OK initial guess.\n+    StringBuilder sb = new StringBuilder(60);\n     for (SpanData span : spans) {\n-      logger.log(Level.INFO, \"span: {0}\", span);\n+      sb.setLength(0);\n+      sb.append(span.getName())\n+          .append(\" \")\n+          .append(span.getTraceId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMzY2Mw=="}, "originalCommit": {"oid": "ed45fd09dd023b9c0b8fe50b2e273c11541d34b4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4MjQ3NQ==", "bodyText": "yeah, I guess at the moment, we can't get shorter traceIds into here, since we'll always zero-pad if we get on. \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2293#discussion_r543782475", "createdAt": "2020-12-16T00:17:27Z", "author": {"login": "jkwatson"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporter/logging/LoggingSpanExporter.java", "diffHunk": "@@ -15,12 +15,23 @@\n \n /** A Span Exporter that logs every span at INFO level using java.util.logging. */\n public class LoggingSpanExporter implements SpanExporter {\n-  private static final Logger logger = Logger.getLogger(LoggingSpanExporter.class.getName());\n+  // Visible for testing\n+  static final Logger logger = Logger.getLogger(LoggingSpanExporter.class.getName());\n \n   @Override\n   public CompletableResultCode export(Collection<SpanData> spans) {\n+    // We always have 32 + 16 + name + several whitespace, 60 seems like an OK initial guess.\n+    StringBuilder sb = new StringBuilder(60);\n     for (SpanData span : spans) {\n-      logger.log(Level.INFO, \"span: {0}\", span);\n+      sb.setLength(0);\n+      sb.append(span.getName())\n+          .append(\" \")\n+          .append(span.getTraceId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMzY2Mw=="}, "originalCommit": {"oid": "ed45fd09dd023b9c0b8fe50b2e273c11541d34b4"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1710, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}