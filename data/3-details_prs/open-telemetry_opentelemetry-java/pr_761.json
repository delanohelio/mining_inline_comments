{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzcxODc2", "number": 761, "title": "More progress on MetricData definition", "bodyText": "This PR:\n\nAdds the notion of a Point as in the data model.\nMoves timestamps to the newly created Point as in the data model.\n\nStill work left:\n\nAdd label values to the base point.\nAdd support for all types defined here https://github.com/open-telemetry/opentelemetry-proto/blob/master/opentelemetry/proto/metrics/v1/metrics.proto", "createdAt": "2020-01-15T22:42:22Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761", "merged": true, "mergeCommit": {"oid": "09bb395cbf4f0f85273d37263242425390d6256f"}, "closed": true, "closedAt": "2020-01-22T21:18:11Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6tf9DAH2gAyMzYzMzcxODc2OmY2ZDEyYTFjYWE2Y2I2OGUwNDgyZWY4MjgzYjU0ZWI3MmE0OTc4ZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb88I3DAFqTM0Njg5NDk0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f6d12a1caa6cb68e0482ef8283b54eb72a4978d0", "committedDate": "2020-01-15T22:43:10Z", "message": "Finalize MetricData definition\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bde231a0dd7a927f746b4117d2115f1da3b0efb", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9bde231a0dd7a927f746b4117d2115f1da3b0efb", "committedDate": "2020-01-15T22:40:50Z", "message": "Finalize MetricData definition\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f6d12a1caa6cb68e0482ef8283b54eb72a4978d0", "committedDate": "2020-01-15T22:43:10Z", "message": "Finalize MetricData definition\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njc2MzQw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761#pullrequestreview-344676340", "createdAt": "2020-01-17T15:59:53Z", "commit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1OTo1M1rOFe9i3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1OTo1M1rOFe9i3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTk0OQ==", "bodyText": "How about we call this LongPoint, as that will be much more clear to most java developers.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761#discussion_r368009949", "createdAt": "2020-01-17T15:59:53Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/MetricData.java", "diffHunk": "@@ -34,33 +37,120 @@\n   /**\n    * Returns the {@link Descriptor} of this metric.\n    *\n-   * @return the {@code MetricDescriptor} of this metric.\n+   * @return the {@code Descriptor} of this metric.\n    * @since 0.1.0\n    */\n   public abstract Descriptor getDescriptor();\n \n   /**\n-   * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n-   * the metric was created or an aggregation was enabled.\n+   * Returns the data {@link Int64Point}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the start epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n    */\n-  public abstract long getStartEpochNanos();\n+  @Nullable\n+  public abstract Collection<Int64Point> getInt64Points();\n \n   /**\n-   * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n-   * moment when {@code Instrument.getData()} was called.\n+   * Returns the data {@link DoublePoint}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n+   */\n+  @Nullable\n+  public abstract Collection<DoublePoint> getDoublePoints();\n+\n+  static MetricData createWithInt64Points(\n+      Descriptor descriptor, Collection<Int64Point> int64Points) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_INT64 || type == Descriptor.Type.MONOTONIC_INT64,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, Utils.checkNotNull(int64Points, \"longPoints\"), null);\n+  }\n+\n+  static MetricData createWithDoublePoints(\n+      Descriptor descriptor, Collection<DoublePoint> doublePoints) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_DOUBLE || type == Descriptor.Type.MONOTONIC_DOUBLE,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, null, Utils.checkNotNull(doublePoints, \"doublePoints\"));\n+  }\n+\n+  @Immutable\n+  abstract static class Point {\n+    Point() {}\n+\n+    /**\n+     * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n+     * the metric was created or an aggregation was enabled.\n+     *\n+     * @return the start epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getStartEpochNanos();\n+\n+    /**\n+     * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n+     * moment when {@code Instrument.getData()} was called.\n+     *\n+     * @return the epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getEpochNanos();\n+  }\n+\n+  /**\n+   * Int64Point is a single data point in a timeseries that describes the time-varying values of a\n+   * int64 metric.\n+   */\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Int64Point extends Point {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODk0OTQ0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761#pullrequestreview-346894944", "createdAt": "2020-01-22T20:54:22Z", "commit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3245, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}