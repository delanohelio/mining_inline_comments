{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODU4MTY0", "number": 1789, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDo1ODoyNVrOEs0_MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDo1ODoyNVrOEs0_MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDQwOTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDo1ODoyNVrOHgR5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMToxOTozNVrOHgSMLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwOTYyNg==", "bodyText": "What do you think about switching this to volatile? Sort of nice that something seemingly trivial like checking recording state doesn't have to lock.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1789#discussion_r503609626", "createdAt": "2020-10-13T00:58:25Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -461,7 +461,9 @@ public SpanContext getContext() {\n \n   @Override\n   public boolean isRecording() {\n-    return true;\n+    synchronized (lock) {\n+      return !hasEnded;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "020f02a298f593fd9891486341e06c62eadbac3b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYxNDUxMA==", "bodyText": "I'm easy either way. I think it's worth looking into the entire thread-safety management of this class, but let's save that for another PR?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1789#discussion_r503614510", "createdAt": "2020-10-13T01:19:35Z", "author": {"login": "jkwatson"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -461,7 +461,9 @@ public SpanContext getContext() {\n \n   @Override\n   public boolean isRecording() {\n-    return true;\n+    synchronized (lock) {\n+      return !hasEnded;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwOTYyNg=="}, "originalCommit": {"oid": "020f02a298f593fd9891486341e06c62eadbac3b"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2074, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}