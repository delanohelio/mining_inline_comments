{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNjk2MzMw", "number": 2379, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozNToxMFrOFH7NjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozNzozM1rOFH7QWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODU0NDc3OnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/Aggregations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozNToxMFrOIJlLeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo0ODo0OFrOIJlf2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxNzI0MQ==", "bodyText": "Do we need a spec issue for this, or just a Java issue?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#discussion_r546917241", "createdAt": "2020-12-21T20:35:10Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/Aggregations.java", "diffHunk": "@@ -186,15 +215,21 @@ public AggregatorFactory getAggregatorFactory(InstrumentValueType instrumentValu\n           : DoubleLastValueAggregator.getFactory();\n     }\n \n+    @Override\n+    public Accumulation merge(Accumulation a1, Accumulation a2) {\n+      // TODO: Define the order between accumulation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyMjQ1OA==", "bodyText": "I think right now go uses a timestamp as well associated with the entry. I left a TODO because I intend to look into this soon.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#discussion_r546922458", "createdAt": "2020-12-21T20:48:48Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/Aggregations.java", "diffHunk": "@@ -186,15 +215,21 @@ public AggregatorFactory getAggregatorFactory(InstrumentValueType instrumentValu\n           : DoubleLastValueAggregator.getFactory();\n     }\n \n+    @Override\n+    public Accumulation merge(Accumulation a1, Accumulation a2) {\n+      // TODO: Define the order between accumulation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxNzI0MQ=="}, "originalCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODU1MDE3OnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozNjo1M1rOIJlOdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozNjo1M1rOIJlOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxODAwNg==", "bodyText": "urgh. this method name is getting ugly. we should think up a better name at some point.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#discussion_r546918006", "createdAt": "2020-12-21T20:36:53Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -13,24 +16,17 @@\n   private volatile boolean hasRecordings = false;\n \n   @Override\n-  public void mergeToAndReset(Aggregator other) {\n-    if (!this.getClass().isInstance(other)) {\n-      return;\n+  @Nullable\n+  public Accumulation toAccumulationThenReset() {\n+    if (!hasRecordings) {\n+      return null;\n     }\n-    doMergeAndReset(other);\n     hasRecordings = false;\n+    return doToAccumulationThenReset();\n   }\n \n-  /**\n-   * Merges the current value into the given {@code aggregator} and resets the current value in this\n-   * {@code Aggregator}.\n-   *\n-   * <p>If this method is called, you can assume that the passed in aggregator can be cast to your\n-   * self-type.\n-   *\n-   * @param aggregator The aggregator to merge with.\n-   */\n-  abstract void doMergeAndReset(Aggregator aggregator);\n+  /** Implementation of the {@code toAccumulationThenReset}. */\n+  abstract Accumulation doToAccumulationThenReset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODU1MTk1OnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregator/Aggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozNzozM1rOIJlPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1MDowNlrOIJlh8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxODI2NA==", "bodyText": "maybe accumulateAndReset() ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#discussion_r546918264", "createdAt": "2020-12-21T20:37:33Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregator/Aggregator.java", "diffHunk": "@@ -15,23 +14,11 @@\n public interface Aggregator {\n \n   /**\n-   * Merges the current value into the given {@code aggregator} and resets the current value in this\n+   * Returns the current value into as {@link Accumulation} and resets the current value in this\n    * {@code Aggregator}.\n-   *\n-   * @param aggregator value to merge into.\n-   */\n-  void mergeToAndReset(Aggregator aggregator);\n-\n-  /**\n-   * Returns the {@code Point} with the given properties and the value from this Aggregation.\n-   *\n-   * @param startEpochNanos the startEpochNanos for the {@code Point}.\n-   * @param epochNanos the epochNanos for the {@code Point}.\n-   * @param labels the labels for the {@code Point}.\n-   * @return the {@code Point} with the value from this Aggregation.\n    */\n   @Nullable\n-  Point toPoint(long startEpochNanos, long epochNanos, Labels labels);\n+  Accumulation toAccumulationThenReset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyMjk5NA==", "bodyText": "I like accumulate, but I would use ThenReset because it is consistent with java stream APIs.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#discussion_r546922994", "createdAt": "2020-12-21T20:50:06Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregator/Aggregator.java", "diffHunk": "@@ -15,23 +14,11 @@\n public interface Aggregator {\n \n   /**\n-   * Merges the current value into the given {@code aggregator} and resets the current value in this\n+   * Returns the current value into as {@link Accumulation} and resets the current value in this\n    * {@code Aggregator}.\n-   *\n-   * @param aggregator value to merge into.\n-   */\n-  void mergeToAndReset(Aggregator aggregator);\n-\n-  /**\n-   * Returns the {@code Point} with the given properties and the value from this Aggregation.\n-   *\n-   * @param startEpochNanos the startEpochNanos for the {@code Point}.\n-   * @param epochNanos the epochNanos for the {@code Point}.\n-   * @param labels the labels for the {@code Point}.\n-   * @return the {@code Point} with the value from this Aggregation.\n    */\n   @Nullable\n-  Point toPoint(long startEpochNanos, long epochNanos, Labels labels);\n+  Accumulation toAccumulationThenReset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxODI2NA=="}, "originalCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1603, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}