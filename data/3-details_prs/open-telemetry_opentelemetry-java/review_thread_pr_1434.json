{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyOTgyNDQ4", "number": 1434, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzowMjowM1rOEQSp_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMToyM1rOEQ3ZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTE4MzMyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzowMjowM1rOG0XPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjoxNTowOVrOG0lmMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1OTg4MQ==", "bodyText": "Should we have a semantic \"attribute\" constant for this event name, as well? Seems like this event name is special, and canonical, so we should probably put it in the API somewhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r457559881", "createdAt": "2020-07-20T17:02:03Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -395,6 +396,29 @@ public void setStatus(Status status) {\n     }\n   }\n \n+  @Override\n+  public void recordException(Throwable exception) {\n+    Preconditions.checkNotNull(exception, \"exception\");\n+    recordException(exception, clock.now());\n+  }\n+\n+  @Override\n+  public void recordException(Throwable exception, long timestamp) {\n+    Preconditions.checkNotNull(exception, \"exception\");\n+    Preconditions.checkArgument(timestamp >= 0, \"Negative timestamp\");\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+    SemanticAttributes.EXCEPTION_TYPE.set(attributes, exception.getClass().getCanonicalName());\n+    if (exception.getMessage() != null) {\n+      SemanticAttributes.EXCEPTION_MESSAGE.set(attributes, exception.getMessage());\n+    }\n+    StringBuilder buffer = new StringBuilder();\n+    StringBuilderPrintWriter writer = new StringBuilderPrintWriter(buffer);\n+    exception.printStackTrace(writer);\n+    SemanticAttributes.EXCEPTION_STACKTRACE.set(attributes, buffer.toString());\n+\n+    addEvent(\"exception\", attributes.build(), timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3c4ab4af525ffed5f202ecbf8e19c6586779ad"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5NTEyMg==", "bodyText": "Added a constant", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r457795122", "createdAt": "2020-07-21T02:15:09Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -395,6 +396,29 @@ public void setStatus(Status status) {\n     }\n   }\n \n+  @Override\n+  public void recordException(Throwable exception) {\n+    Preconditions.checkNotNull(exception, \"exception\");\n+    recordException(exception, clock.now());\n+  }\n+\n+  @Override\n+  public void recordException(Throwable exception, long timestamp) {\n+    Preconditions.checkNotNull(exception, \"exception\");\n+    Preconditions.checkArgument(timestamp >= 0, \"Negative timestamp\");\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+    SemanticAttributes.EXCEPTION_TYPE.set(attributes, exception.getClass().getCanonicalName());\n+    if (exception.getMessage() != null) {\n+      SemanticAttributes.EXCEPTION_MESSAGE.set(attributes, exception.getMessage());\n+    }\n+    StringBuilder buffer = new StringBuilder();\n+    StringBuilderPrintWriter writer = new StringBuilderPrintWriter(buffer);\n+    exception.printStackTrace(writer);\n+    SemanticAttributes.EXCEPTION_STACKTRACE.set(attributes, buffer.toString());\n+\n+    addEvent(\"exception\", attributes.build(), timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1OTg4MQ=="}, "originalCommit": {"oid": "7e3c4ab4af525ffed5f202ecbf8e19c6586779ad"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Njc1ODU4OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo0Mzo0MlrOG0mEsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo0Mzo0MlrOG0mEsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwMjkzMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r457802931", "createdAt": "2020-07-21T02:43:42Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -416,6 +419,31 @@ public void setStatus(Status status) {\n     }\n   }\n \n+  @Override\n+  public void recordException(Throwable exception) {\n+    if (exception == null) {\n+      return;\n+    }\n+    recordException(exception, clock.now());\n+  }\n+\n+  @Override\n+  public void recordException(Throwable exception, long timestamp) {\n+    if (exception == null) {\n+      return;\n+    }\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+    SemanticAttributes.EXCEPTION_TYPE.set(attributes, exception.getClass().getCanonicalName());\n+    if (exception.getMessage() != null) {\n+      SemanticAttributes.EXCEPTION_MESSAGE.set(attributes, exception.getMessage());\n+    }\n+    StringWriter writer = new StringWriter();\n+    exception.printStackTrace(new PrintWriter(writer));\n+    SemanticAttributes.EXCEPTION_STACKTRACE.set(attributes, writer.toString());\n+\n+    addEvent(SemanticAttributes.EXCEPTION_EVENT_NAME, attributes.build(), timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTIwMDg3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMDozNlrOG1QdjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo1MTozM1rOG1Snrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA==", "bodyText": "Would not add this method unless is necessary. Removing methods is harder than adding. I don't see a scenario when an exception happens and somehow later want to record it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458497420", "createdAt": "2020-07-22T02:30:36Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5OTk3Mg==", "bodyText": "I would argue anything with a timestamp needs to have a way to manually set it, because users may have their own clocks, or some similar reason where timing is kept track in their framework and they want to use it. I can remove this method but then I'd argue it's a pre-GA task to reconsider modeling exceptions as events since it means we don't consider the timestamp to be meaningful. @iNikem any thoughts?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458499972", "createdAt": "2020-07-22T02:40:35Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA=="}, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwNTgwOQ==", "bodyText": "Actually user using their own clock is the main reason I am against this :). Reason is we do a good job using nanoTime to ensure ordering of the events, but user does not have access to our internal clock so any time recorded by external user will not be order with the other events.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458505809", "createdAt": "2020-07-22T03:02:45Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA=="}, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwNzUyNA==", "bodyText": "I don't think this is correct in a general sense, many frameworks record timings at a level too deep for us to capture as accurately, at least without bytecode instrumentation. For example a \"wire send\" event, if it's recorded just before passing a buffer to netty will probably be many nanoseconds (even probably many microseconds) more accurate than what our instrumentation could pull off. Note that in this case, user is interchangable with instrumentation, the latter also needs to be able to pass on the accurate timings from the framework being instrumented. There is some concern about ordering issues with non-framework generated events, but I'd take the more accurate timings for things like DNS resolution, etc any day.\nBut I agree this seems far less useful for exceptions. So it makes me wonder whether we really need a timestamp for exceptions in the first place if, similar to a DNS query, we may miss out on a better timing provided by the framework if we choose not to allow that here.\nIn the meantime, I've removed the method though as it seems like a bigger discussion about why exception is modeled as Event instead of something without a timestamp.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458507524", "createdAt": "2020-07-22T03:09:45Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA=="}, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyOTA4Mw==", "bodyText": "I took a look at API defined by spec.\nAn Event is defined by the following properties:\n\n(Required) Name of the event.\n(Optional) One or more Attributes with the same restrictions as defined for Span Attributes.\n(Optional) Timestamp for the event.\n\nSeveral other API methods accept timestamp as well. Thus this method is totally within spec. Although I too have doubts if anyone will use it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458529083", "createdAt": "2020-07-22T04:36:31Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA=="}, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMDAyOA==", "bodyText": "Thanks for the link to the spec! I didn't check it, just looked at our Java API. I feel our current API doesn't reflect the optional aspect of the Timestamp (at least the javadoc needs to be more explicit about using current time when not provided and pointing at a way to create an event without timestamps). In that case, I'm good with this API I'll investigate this optional-timestamp event case more generally in a separate PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458530028", "createdAt": "2020-07-22T04:40:28Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA=="}, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMTEwMg==", "bodyText": "Filed #1447 to track that", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458531102", "createdAt": "2020-07-22T04:44:57Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA=="}, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMjc4Mw==", "bodyText": "Ah realized my comment was ambiguous - I meant I'm good with not including the method version that includes a timestamp. As part of #1447 I'll probably switch this to add an event without any timestamp.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458532783", "createdAt": "2020-07-22T04:51:33Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA=="}, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTIwMTgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMTowOVrOG1QeHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMTowOVrOG1QeHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzU2Ng==", "bodyText": "Is this change unrelated?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458497566", "createdAt": "2020-07-22T02:31:09Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -70,4 +71,14 @@ public void set(Span span, boolean value) {\n   public void set(Span.Builder spanBuilder, boolean value) {\n     spanBuilder.setAttribute(key(), value);\n   }\n+\n+  /**\n+   * Sets the attribute on the provided {@link Attributes.Builder}.\n+   *\n+   * @param attributesBuilder the attributes builder to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Attributes.Builder attributesBuilder, boolean value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTIwMjAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/DoubleAttributeSetter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMToyM1rOG1QeQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMToyM1rOG1QeQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzYwMQ==", "bodyText": "Unrelated change?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458497601", "createdAt": "2020-07-22T02:31:23Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/DoubleAttributeSetter.java", "diffHunk": "@@ -70,4 +71,14 @@ public void set(Span span, double value) {\n   public void set(Span.Builder spanBuilder, double value) {\n     spanBuilder.setAttribute(key(), value);\n   }\n+\n+  /**\n+   * Sets the attribute on the provided {@link Attributes.Builder}.\n+   *\n+   * @param attributesBuilder the attributes builder to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Attributes.Builder attributesBuilder, double value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1505, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}