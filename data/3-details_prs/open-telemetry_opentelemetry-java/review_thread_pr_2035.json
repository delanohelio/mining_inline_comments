{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NjE3NjA0", "number": 2035, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTozNjowMlrOE2AyHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo0MzozMVrOE2A9JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDcxMzg4OnYy", "diffSide": "RIGHT", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTozNjowMlrOHumrQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMTo1ODo0MlrOHvHoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDIwOQ==", "bodyText": "Should this have a private constructor?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r518630209", "createdAt": "2020-11-06T09:36:02Z", "author": {"login": "Oberon00"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import org.assertj.core.api.Assertions;\n+\n+/**\n+ * Entry point for assertion methods for OpenTelemetry types. To use type-specific assertions,\n+ * static import any {@code assertThat} method in this class instead of {@code\n+ * Assertions.assertThat}.\n+ */\n+public class OpenTelemetryAssertions extends Assertions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ee3ee4bb197cdd17aa08321c9d5bfde5b87325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MDE5Mg==", "bodyText": "Made it protector - a user might extend this into their own custom assertions class, doesn't hurt since just a bag of statics.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r519150192", "createdAt": "2020-11-07T07:59:41Z", "author": {"login": "anuraaga"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import org.assertj.core.api.Assertions;\n+\n+/**\n+ * Entry point for assertion methods for OpenTelemetry types. To use type-specific assertions,\n+ * static import any {@code assertThat} method in this class instead of {@code\n+ * Assertions.assertThat}.\n+ */\n+public class OpenTelemetryAssertions extends Assertions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDIwOQ=="}, "originalCommit": {"oid": "f8ee3ee4bb197cdd17aa08321c9d5bfde5b87325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MTEzNA==", "bodyText": "Extending would also work with a private ctor I think. You just can't instantiate the derived class. But protected is OK for me here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r519151134", "createdAt": "2020-11-07T08:10:35Z", "author": {"login": "Oberon00"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import org.assertj.core.api.Assertions;\n+\n+/**\n+ * Entry point for assertion methods for OpenTelemetry types. To use type-specific assertions,\n+ * static import any {@code assertThat} method in this class instead of {@code\n+ * Assertions.assertThat}.\n+ */\n+public class OpenTelemetryAssertions extends Assertions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDIwOQ=="}, "originalCommit": {"oid": "f8ee3ee4bb197cdd17aa08321c9d5bfde5b87325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MDEzNw==", "bodyText": "Yeah thought it might work but when I tried it, it didn't compile :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r519170137", "createdAt": "2020-11-07T11:58:42Z", "author": {"login": "anuraaga"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/OpenTelemetryAssertions.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import org.assertj.core.api.Assertions;\n+\n+/**\n+ * Entry point for assertion methods for OpenTelemetry types. To use type-specific assertions,\n+ * static import any {@code assertThat} method in this class instead of {@code\n+ * Assertions.assertThat}.\n+ */\n+public class OpenTelemetryAssertions extends Assertions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDIwOQ=="}, "originalCommit": {"oid": "f8ee3ee4bb197cdd17aa08321c9d5bfde5b87325"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDc0MDkyOnYy", "diffSide": "RIGHT", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo0MzoxNVrOHum7oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo0MzoxNVrOHum7oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzNDQwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  failWithMessage(\"Expected span to have ended but did has not\");\n          \n          \n            \n                  failWithMessage(\"Expected span to have ended but did not\");", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r518634401", "createdAt": "2020-11-06T09:43:15Z", "author": {"login": "Oberon00"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import org.assertj.core.api.AbstractAssert;\n+\n+/** Assertions for an exported {@link SpanData}. */\n+public class SpanDataAssert extends AbstractAssert<SpanDataAssert, SpanData> {\n+\n+  SpanDataAssert(SpanData actual) {\n+    super(actual, SpanDataAssert.class);\n+  }\n+\n+  /** Asserts the span has the given trace ID. */\n+  public SpanDataAssert hasTraceId(String traceId) {\n+    isNotNull();\n+    if (!actual.getTraceId().equals(traceId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getTraceId(),\n+          traceId,\n+          \"Expected span to have trace ID <%s> but was <%s>\",\n+          traceId,\n+          actual.getTraceId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given span ID. */\n+  public SpanDataAssert hasSpanId(String spanId) {\n+    isNotNull();\n+    if (!actual.getSpanId().equals(spanId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getSpanId(),\n+          spanId,\n+          \"Expected span to have span ID <%s> but was <%s>\",\n+          spanId,\n+          actual.getSpanId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span is sampled. */\n+  public SpanDataAssert isSampled() {\n+    isNotNull();\n+    if (!actual.isSampled()) {\n+      failWithMessage(\"Expected span to be sampled but was not.\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span is not sampled. */\n+  public SpanDataAssert isNotSampled() {\n+    isNotNull();\n+    if (actual.isSampled()) {\n+      failWithMessage(\"Expected span to not be sampled but it was.\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link TraceState}. */\n+  public SpanDataAssert hasTraceState(TraceState traceState) {\n+    isNotNull();\n+    if (!actual.getTraceState().equals(traceState)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getTraceState(),\n+          traceState,\n+          \"Expected span to have trace state <%s> but was <%s>\",\n+          traceState,\n+          actual.getTraceState());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given parent span ID. */\n+  public SpanDataAssert hasParentSpanId(String parentSpanId) {\n+    isNotNull();\n+    if (!actual.getParentSpanId().equals(parentSpanId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getParentSpanId(),\n+          parentSpanId,\n+          \"Expected span to have parent span ID <%s> but was <%s>\",\n+          parentSpanId,\n+          actual.getParentSpanId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link Resource}. */\n+  public SpanDataAssert hasResource(Resource resource) {\n+    isNotNull();\n+    if (!actual.getResource().equals(resource)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getResource(),\n+          resource,\n+          \"Expected span to have resource <%s> but was <%s>\",\n+          resource,\n+          actual.getResource());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link InstrumentationLibraryInfo}. */\n+  public SpanDataAssert hasInstrumentationLibraryInfo(\n+      InstrumentationLibraryInfo instrumentationLibraryInfo) {\n+    isNotNull();\n+    if (!actual.getInstrumentationLibraryInfo().equals(instrumentationLibraryInfo)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getInstrumentationLibraryInfo(),\n+          instrumentationLibraryInfo,\n+          \"Expected span to have instrumentation library info <%s> but was <%s>\",\n+          instrumentationLibraryInfo,\n+          actual.getInstrumentationLibraryInfo());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given name. */\n+  public SpanDataAssert hasName(String name) {\n+    isNotNull();\n+    if (!actual.getName().equals(name)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getName(),\n+          name,\n+          \"Expected span to have name <%s> but was <%s>\",\n+          name,\n+          actual.getName());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given kind. */\n+  public SpanDataAssert hasKind(Span.Kind kind) {\n+    isNotNull();\n+    if (!actual.getKind().equals(kind)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getKind(),\n+          kind,\n+          \"Expected span to have kind <%s> but was <%s>\",\n+          kind,\n+          actual.getKind());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp, in nanos. */\n+  public SpanDataAssert startsAt(long startEpochNanos) {\n+    isNotNull();\n+    if (actual.getStartEpochNanos() != startEpochNanos) {\n+      failWithActualExpectedAndMessage(\n+          actual.getStartEpochNanos(),\n+          startEpochNanos,\n+          \"Expected span to have start epoch <%s> nanos but was <%s>\",\n+          startEpochNanos,\n+          actual.getStartEpochNanos());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp. */\n+  @SuppressWarnings(\"PreferJavaTimeOverload\")\n+  public SpanDataAssert startsAt(long startEpoch, TimeUnit unit) {\n+    return startsAt(unit.toNanos(startEpoch));\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp. */\n+  public SpanDataAssert startsAt(Instant timestamp) {\n+    return startsAt(toNanos(timestamp));\n+  }\n+\n+  /** Asserts the span has the given attributes. */\n+  public SpanDataAssert hasAttributes(ReadableAttributes attributes) {\n+    isNotNull();\n+    if (!actual.getAttributes().equals(attributes)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getAttributes(),\n+          attributes,\n+          \"Expected span to have attributes <%s> but was <%s>\",\n+          attributes,\n+          actual.getAttributes());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has attributes satisfying the given condition. */\n+  public SpanDataAssert hasAttributesSatisfying(Consumer<ReadableAttributes> attributes) {\n+    isNotNull();\n+    assertThat(actual.getAttributes()).as(\"attributes\").satisfies(attributes);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given events. */\n+  public SpanDataAssert hasEvents(Iterable<SpanData.Event> events) {\n+    isNotNull();\n+    assertThat(actual.getEvents())\n+        .withFailMessage(\n+            \"Expected span to have events <%s> but was <%s>\", events, actual.getEvents())\n+        .containsExactlyInAnyOrderElementsOf(events);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given events. */\n+  public SpanDataAssert hasEvents(SpanData.Event... events) {\n+    return hasEvents(Arrays.asList(events));\n+  }\n+\n+  /** Asserts the span has events satisfying the given condition. */\n+  public SpanDataAssert hasEventsSatisfying(Consumer<List<? extends SpanData.Event>> condition) {\n+    isNotNull();\n+    assertThat(actual.getEvents()).satisfies(condition);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given links. */\n+  public SpanDataAssert hasLinks(Iterable<SpanData.Link> links) {\n+    isNotNull();\n+    assertThat(actual.getLinks())\n+        .withFailMessage(\"Expected span to have links <%s> but was <%s>\", links, actual.getLinks())\n+        .containsExactlyInAnyOrderElementsOf(links);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given links. */\n+  public SpanDataAssert hasLinks(SpanData.Link... links) {\n+    return hasLinks(Arrays.asList(links));\n+  }\n+\n+  /** Asserts the span has events satisfying the given condition. */\n+  public SpanDataAssert hasLinksSatisfying(Consumer<List<? extends SpanData.Link>> condition) {\n+    isNotNull();\n+    assertThat(actual.getLinks()).satisfies(condition);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link SpanData.Status}. */\n+  public SpanDataAssert hasStatus(SpanData.Status status) {\n+    isNotNull();\n+    if (!actual.getStatus().equals(status)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getStatus(),\n+          status,\n+          \"Expected span to have status <%s> but was <%s>\",\n+          status,\n+          actual.getStatus());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp, in nanos. */\n+  public SpanDataAssert endsAt(long endEpochNanos) {\n+    isNotNull();\n+    if (actual.getEndEpochNanos() != endEpochNanos) {\n+      failWithActualExpectedAndMessage(\n+          actual.getEndEpochNanos(),\n+          endEpochNanos,\n+          \"Expected span to have end epoch <%s> nanos but was <%s>\",\n+          endEpochNanos,\n+          actual.getEndEpochNanos());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp. */\n+  @SuppressWarnings(\"PreferJavaTimeOverload\")\n+  public SpanDataAssert endsAt(long startEpoch, TimeUnit unit) {\n+    return endsAt(unit.toNanos(startEpoch));\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp. */\n+  public SpanDataAssert endsAt(Instant timestamp) {\n+    return endsAt(toNanos(timestamp));\n+  }\n+\n+  /** Asserts the span has a remote parent. */\n+  public SpanDataAssert hasRemoteParent() {\n+    isNotNull();\n+    if (!actual.hasRemoteParent()) {\n+      failWithMessage(\"Expected span to have remote parent but did not\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span does not have a remote parent. */\n+  public SpanDataAssert doesNotHaveRemoteParent() {\n+    isNotNull();\n+    if (actual.hasRemoteParent()) {\n+      failWithMessage(\"Expected span to have remote parent but did not\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has ended. */\n+  public SpanDataAssert hasEnded() {\n+    isNotNull();\n+    if (!actual.hasEnded()) {\n+      failWithMessage(\"Expected span to have ended but did has not\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd785c10b344458115c2ef0c0d17d28c2f8c62a"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDc0MjEyOnYy", "diffSide": "RIGHT", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo0MzozMVrOHum8Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo0MzozMVrOHum8Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzNDU4Ng==", "bodyText": "Maybe add the span name to the message (this would apply to most/all assertions)?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2035#discussion_r518634586", "createdAt": "2020-11-06T09:43:31Z", "author": {"login": "Oberon00"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/SpanDataAssert.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import org.assertj.core.api.AbstractAssert;\n+\n+/** Assertions for an exported {@link SpanData}. */\n+public class SpanDataAssert extends AbstractAssert<SpanDataAssert, SpanData> {\n+\n+  SpanDataAssert(SpanData actual) {\n+    super(actual, SpanDataAssert.class);\n+  }\n+\n+  /** Asserts the span has the given trace ID. */\n+  public SpanDataAssert hasTraceId(String traceId) {\n+    isNotNull();\n+    if (!actual.getTraceId().equals(traceId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getTraceId(),\n+          traceId,\n+          \"Expected span to have trace ID <%s> but was <%s>\",\n+          traceId,\n+          actual.getTraceId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given span ID. */\n+  public SpanDataAssert hasSpanId(String spanId) {\n+    isNotNull();\n+    if (!actual.getSpanId().equals(spanId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getSpanId(),\n+          spanId,\n+          \"Expected span to have span ID <%s> but was <%s>\",\n+          spanId,\n+          actual.getSpanId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span is sampled. */\n+  public SpanDataAssert isSampled() {\n+    isNotNull();\n+    if (!actual.isSampled()) {\n+      failWithMessage(\"Expected span to be sampled but was not.\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span is not sampled. */\n+  public SpanDataAssert isNotSampled() {\n+    isNotNull();\n+    if (actual.isSampled()) {\n+      failWithMessage(\"Expected span to not be sampled but it was.\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link TraceState}. */\n+  public SpanDataAssert hasTraceState(TraceState traceState) {\n+    isNotNull();\n+    if (!actual.getTraceState().equals(traceState)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getTraceState(),\n+          traceState,\n+          \"Expected span to have trace state <%s> but was <%s>\",\n+          traceState,\n+          actual.getTraceState());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given parent span ID. */\n+  public SpanDataAssert hasParentSpanId(String parentSpanId) {\n+    isNotNull();\n+    if (!actual.getParentSpanId().equals(parentSpanId)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getParentSpanId(),\n+          parentSpanId,\n+          \"Expected span to have parent span ID <%s> but was <%s>\",\n+          parentSpanId,\n+          actual.getParentSpanId());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link Resource}. */\n+  public SpanDataAssert hasResource(Resource resource) {\n+    isNotNull();\n+    if (!actual.getResource().equals(resource)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getResource(),\n+          resource,\n+          \"Expected span to have resource <%s> but was <%s>\",\n+          resource,\n+          actual.getResource());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link InstrumentationLibraryInfo}. */\n+  public SpanDataAssert hasInstrumentationLibraryInfo(\n+      InstrumentationLibraryInfo instrumentationLibraryInfo) {\n+    isNotNull();\n+    if (!actual.getInstrumentationLibraryInfo().equals(instrumentationLibraryInfo)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getInstrumentationLibraryInfo(),\n+          instrumentationLibraryInfo,\n+          \"Expected span to have instrumentation library info <%s> but was <%s>\",\n+          instrumentationLibraryInfo,\n+          actual.getInstrumentationLibraryInfo());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given name. */\n+  public SpanDataAssert hasName(String name) {\n+    isNotNull();\n+    if (!actual.getName().equals(name)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getName(),\n+          name,\n+          \"Expected span to have name <%s> but was <%s>\",\n+          name,\n+          actual.getName());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given kind. */\n+  public SpanDataAssert hasKind(Span.Kind kind) {\n+    isNotNull();\n+    if (!actual.getKind().equals(kind)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getKind(),\n+          kind,\n+          \"Expected span to have kind <%s> but was <%s>\",\n+          kind,\n+          actual.getKind());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp, in nanos. */\n+  public SpanDataAssert startsAt(long startEpochNanos) {\n+    isNotNull();\n+    if (actual.getStartEpochNanos() != startEpochNanos) {\n+      failWithActualExpectedAndMessage(\n+          actual.getStartEpochNanos(),\n+          startEpochNanos,\n+          \"Expected span to have start epoch <%s> nanos but was <%s>\",\n+          startEpochNanos,\n+          actual.getStartEpochNanos());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp. */\n+  @SuppressWarnings(\"PreferJavaTimeOverload\")\n+  public SpanDataAssert startsAt(long startEpoch, TimeUnit unit) {\n+    return startsAt(unit.toNanos(startEpoch));\n+  }\n+\n+  /** Asserts the span starts at the given epoch timestamp. */\n+  public SpanDataAssert startsAt(Instant timestamp) {\n+    return startsAt(toNanos(timestamp));\n+  }\n+\n+  /** Asserts the span has the given attributes. */\n+  public SpanDataAssert hasAttributes(ReadableAttributes attributes) {\n+    isNotNull();\n+    if (!actual.getAttributes().equals(attributes)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getAttributes(),\n+          attributes,\n+          \"Expected span to have attributes <%s> but was <%s>\",\n+          attributes,\n+          actual.getAttributes());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has attributes satisfying the given condition. */\n+  public SpanDataAssert hasAttributesSatisfying(Consumer<ReadableAttributes> attributes) {\n+    isNotNull();\n+    assertThat(actual.getAttributes()).as(\"attributes\").satisfies(attributes);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given events. */\n+  public SpanDataAssert hasEvents(Iterable<SpanData.Event> events) {\n+    isNotNull();\n+    assertThat(actual.getEvents())\n+        .withFailMessage(\n+            \"Expected span to have events <%s> but was <%s>\", events, actual.getEvents())\n+        .containsExactlyInAnyOrderElementsOf(events);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given events. */\n+  public SpanDataAssert hasEvents(SpanData.Event... events) {\n+    return hasEvents(Arrays.asList(events));\n+  }\n+\n+  /** Asserts the span has events satisfying the given condition. */\n+  public SpanDataAssert hasEventsSatisfying(Consumer<List<? extends SpanData.Event>> condition) {\n+    isNotNull();\n+    assertThat(actual.getEvents()).satisfies(condition);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given links. */\n+  public SpanDataAssert hasLinks(Iterable<SpanData.Link> links) {\n+    isNotNull();\n+    assertThat(actual.getLinks())\n+        .withFailMessage(\"Expected span to have links <%s> but was <%s>\", links, actual.getLinks())\n+        .containsExactlyInAnyOrderElementsOf(links);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given links. */\n+  public SpanDataAssert hasLinks(SpanData.Link... links) {\n+    return hasLinks(Arrays.asList(links));\n+  }\n+\n+  /** Asserts the span has events satisfying the given condition. */\n+  public SpanDataAssert hasLinksSatisfying(Consumer<List<? extends SpanData.Link>> condition) {\n+    isNotNull();\n+    assertThat(actual.getLinks()).satisfies(condition);\n+    return this;\n+  }\n+\n+  /** Asserts the span has the given {@link SpanData.Status}. */\n+  public SpanDataAssert hasStatus(SpanData.Status status) {\n+    isNotNull();\n+    if (!actual.getStatus().equals(status)) {\n+      failWithActualExpectedAndMessage(\n+          actual.getStatus(),\n+          status,\n+          \"Expected span to have status <%s> but was <%s>\",\n+          status,\n+          actual.getStatus());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp, in nanos. */\n+  public SpanDataAssert endsAt(long endEpochNanos) {\n+    isNotNull();\n+    if (actual.getEndEpochNanos() != endEpochNanos) {\n+      failWithActualExpectedAndMessage(\n+          actual.getEndEpochNanos(),\n+          endEpochNanos,\n+          \"Expected span to have end epoch <%s> nanos but was <%s>\",\n+          endEpochNanos,\n+          actual.getEndEpochNanos());\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp. */\n+  @SuppressWarnings(\"PreferJavaTimeOverload\")\n+  public SpanDataAssert endsAt(long startEpoch, TimeUnit unit) {\n+    return endsAt(unit.toNanos(startEpoch));\n+  }\n+\n+  /** Asserts the span ends at the given epoch timestamp. */\n+  public SpanDataAssert endsAt(Instant timestamp) {\n+    return endsAt(toNanos(timestamp));\n+  }\n+\n+  /** Asserts the span has a remote parent. */\n+  public SpanDataAssert hasRemoteParent() {\n+    isNotNull();\n+    if (!actual.hasRemoteParent()) {\n+      failWithMessage(\"Expected span to have remote parent but did not\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span does not have a remote parent. */\n+  public SpanDataAssert doesNotHaveRemoteParent() {\n+    isNotNull();\n+    if (actual.hasRemoteParent()) {\n+      failWithMessage(\"Expected span to have remote parent but did not\");\n+    }\n+    return this;\n+  }\n+\n+  /** Asserts the span has ended. */\n+  public SpanDataAssert hasEnded() {\n+    isNotNull();\n+    if (!actual.hasEnded()) {\n+      failWithMessage(\"Expected span to have ended but did has not\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd785c10b344458115c2ef0c0d17d28c2f8c62a"}, "originalPosition": 311}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1907, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}