{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MTQ1MjAz", "number": 1822, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo0Njo0NlrOEwD3dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1MToxN1rOEwD6bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODMwNDUzOnYy", "diffSide": "LEFT", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo0Njo0NlrOHlZMPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo0Njo0NlrOHlZMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3MjA5Mw==", "bodyText": "\ud83c\udf89", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1822#discussion_r508972093", "createdAt": "2020-10-21T03:46:46Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -126,17 +125,6 @@ public static Meter getMeter(String instrumentationName, String instrumentationV\n     return getMeterProvider().get(instrumentationName, instrumentationVersion);\n   }\n \n-  /**\n-   * Returns a singleton {@link BaggageManager}.\n-   *\n-   * @return registered manager or default via {@link DefaultBaggageManager#getInstance()}.\n-   * @throws IllegalStateException if a specified manager (via system properties) could not be\n-   *     found.\n-   */\n-  public static BaggageManager getBaggageManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75c84f4b1fd8a53dbb218da9eade8c1d93dca5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODMxMjE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/baggage/ImmutableBaggage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1MToxN1rOHlZQfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1OTozNlrOHlZYYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3MzE4MA==", "bodyText": "Does this need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1822#discussion_r508973180", "createdAt": "2020-10-21T03:51:17Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/ImmutableBaggage.java", "diffHunk": "@@ -22,24 +17,29 @@\n @Immutable\n // TODO: Migrate to AutoValue\n // @AutoValue\n-class BaggageSdk implements Baggage {\n+public class ImmutableBaggage implements Baggage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75c84f4b1fd8a53dbb218da9eade8c1d93dca5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NDI0MA==", "bodyText": "hmm. good point. I have to adjust a silly test, but that's easy enough to do.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1822#discussion_r508974240", "createdAt": "2020-10-21T03:55:44Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/baggage/ImmutableBaggage.java", "diffHunk": "@@ -22,24 +17,29 @@\n @Immutable\n // TODO: Migrate to AutoValue\n // @AutoValue\n-class BaggageSdk implements Baggage {\n+public class ImmutableBaggage implements Baggage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3MzE4MA=="}, "originalCommit": {"oid": "7a75c84f4b1fd8a53dbb218da9eade8c1d93dca5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NTIwMw==", "bodyText": "fixed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1822#discussion_r508975203", "createdAt": "2020-10-21T03:59:36Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/baggage/ImmutableBaggage.java", "diffHunk": "@@ -22,24 +17,29 @@\n @Immutable\n // TODO: Migrate to AutoValue\n // @AutoValue\n-class BaggageSdk implements Baggage {\n+public class ImmutableBaggage implements Baggage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3MzE4MA=="}, "originalCommit": {"oid": "7a75c84f4b1fd8a53dbb218da9eade8c1d93dca5"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1960, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}