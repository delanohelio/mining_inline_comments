{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMjUyNjc0", "number": 2374, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyMzozN1rOFHuISw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzowODo1OFrOFIXx5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjQwMTM5OnYy", "diffSide": "RIGHT", "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyMzozN1rOIJRklg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyMzozN1rOIJRklg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NTk5MA==", "bodyText": "Maybe the PR title should be \"Add SimpleSpanProcessor.create()\"?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r546595990", "createdAt": "2020-12-21T09:23:37Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -48,19 +49,30 @@\n   private final boolean sampled;\n   private final AtomicBoolean isShutdown = new AtomicBoolean(false);\n \n+  /**\n+   * Returns a new {@link SimpleSpanProcessor} which exports spans to the {@link SpanExporter}\n+   * synchronously.\n+   */\n+  public static SpanProcessor create(SpanExporter exporter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjQwNzU5OnYy", "diffSide": "RIGHT", "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyNTozNFrOIJRoVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoxNTo1NVrOIJTHXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Njk1MQ==", "bodyText": "I have no opinion on this point, but often we hid such classes in the past and instead used a static method in the interface. So what about making this class deprecated and later package-private and instead adding a SpanProcessor.simple(Exporter) method? (or call it wrap)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r546596951", "createdAt": "2020-12-21T09:25:34Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -48,19 +49,30 @@\n   private final boolean sampled;\n   private final AtomicBoolean isShutdown = new AtomicBoolean(false);\n \n+  /**\n+   * Returns a new {@link SimpleSpanProcessor} which exports spans to the {@link SpanExporter}\n+   * synchronously.\n+   */\n+  public static SpanProcessor create(SpanExporter exporter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxNDMwNg==", "bodyText": "I tend to prefer the pattern but I don't know if we want the export package to leak into the top level. It feels a bit weird to me though maybe it's not such a big deal.\nA different option with better grouping would be for SpanExporter to expose the factory. But also weird. Default methods asSimpleSpanProcessor etc seems better.\nAnother idea in my head is to make this private completely and only have SdkTracerProvider.addSpanExporter(exporter, BatchSettings.noBatching()).\nNot sure if it works but is also a reason I wanted to simplify this builder away :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r546614306", "createdAt": "2020-12-21T10:01:26Z", "author": {"login": "anuraaga"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -48,19 +49,30 @@\n   private final boolean sampled;\n   private final AtomicBoolean isShutdown = new AtomicBoolean(false);\n \n+  /**\n+   * Returns a new {@link SimpleSpanProcessor} which exports spans to the {@link SpanExporter}\n+   * synchronously.\n+   */\n+  public static SpanProcessor create(SpanExporter exporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Njk1MQ=="}, "originalCommit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxOTkyMQ==", "bodyText": "I think we should come to a (potentially) final decision here before removing/deprecating any public stuff. The builder is not that big a burden to maintain in the meantime. If we decide to leave the SimpleSpanProcessor public for the foreseeable future then this PR is fine, otherwise I'd prefer we leave the builder as-is for now.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r546619921", "createdAt": "2020-12-21T10:13:19Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -48,19 +49,30 @@\n   private final boolean sampled;\n   private final AtomicBoolean isShutdown = new AtomicBoolean(false);\n \n+  /**\n+   * Returns a new {@link SimpleSpanProcessor} which exports spans to the {@link SpanExporter}\n+   * synchronously.\n+   */\n+  public static SpanProcessor create(SpanExporter exporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Njk1MQ=="}, "originalCommit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyMTI3OA==", "bodyText": "I think Exporter.asSimpleSpanProcessor would be fine. Otherwise, if we somehow want to keep SpanProcessor/Exporter statically decoupled (so far the interfaces don't know about each other), we could add an utility class like ExportingSpanProcessor with a static method simple (and batchingBuilder maybe).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r546621278", "createdAt": "2020-12-21T10:15:55Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -48,19 +49,30 @@\n   private final boolean sampled;\n   private final AtomicBoolean isShutdown = new AtomicBoolean(false);\n \n+  /**\n+   * Returns a new {@link SimpleSpanProcessor} which exports spans to the {@link SpanExporter}\n+   * synchronously.\n+   */\n+  public static SpanProcessor create(SpanExporter exporter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Njk1MQ=="}, "originalCommit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzIyNTM1OnYy", "diffSide": "RIGHT", "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/TraceInteroperabilityTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzowODo1OFrOIKPxdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzoyODo0OVrOIKQDcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNTA5Mg==", "bodyText": "this might be a very rare case where I would use the full Mockito.reset since I had no idea where this method was coming from without looking at imports.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r547615092", "createdAt": "2020-12-23T03:08:58Z", "author": {"login": "jkwatson"}, "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/TraceInteroperabilityTest.java", "diffHunk": "@@ -66,8 +66,20 @@\n   static {\n     spanExporter = spy(SpanExporter.class);\n     when(spanExporter.export(anyList())).thenReturn(CompletableResultCode.ofSuccess());\n+\n     SpanProcessor spanProcessor = SimpleSpanProcessor.create(spanExporter);\n-    OpenTelemetrySdk.getGlobalTracerManagement().addSpanProcessor(spanProcessor);\n+    openTelemetry =\n+        OpenTelemetrySdk.builder()\n+            .setTracerProvider(SdkTracerProvider.builder().addSpanProcessor(spanProcessor).build())\n+            .build();\n+    GlobalOpenTelemetry.set(openTelemetry);\n+  }\n+\n+  @Captor private ArgumentCaptor<Collection<SpanData>> spanDataCaptor;\n+\n+  @BeforeEach\n+  void resetMocks() {\n+    reset(spanExporter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c1910fe0e4150b103e9a751746cef97849f997"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxOTY5OQ==", "bodyText": "Commenting on the merge commit :)\nNot going to send a PR to rename it but if it feels any better, hopefully the method name resetMocks helps.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r547619699", "createdAt": "2020-12-23T03:28:49Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/TraceInteroperabilityTest.java", "diffHunk": "@@ -66,8 +66,20 @@\n   static {\n     spanExporter = spy(SpanExporter.class);\n     when(spanExporter.export(anyList())).thenReturn(CompletableResultCode.ofSuccess());\n+\n     SpanProcessor spanProcessor = SimpleSpanProcessor.create(spanExporter);\n-    OpenTelemetrySdk.getGlobalTracerManagement().addSpanProcessor(spanProcessor);\n+    openTelemetry =\n+        OpenTelemetrySdk.builder()\n+            .setTracerProvider(SdkTracerProvider.builder().addSpanProcessor(spanProcessor).build())\n+            .build();\n+    GlobalOpenTelemetry.set(openTelemetry);\n+  }\n+\n+  @Captor private ArgumentCaptor<Collection<SpanData>> spanDataCaptor;\n+\n+  @BeforeEach\n+  void resetMocks() {\n+    reset(spanExporter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNTA5Mg=="}, "originalCommit": {"oid": "a2c1910fe0e4150b103e9a751746cef97849f997"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1599, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}