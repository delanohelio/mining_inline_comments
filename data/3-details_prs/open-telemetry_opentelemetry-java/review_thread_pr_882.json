{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MDkwODE2", "number": 882, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1MDoxNFrODhI5pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoxOToxOVrODh-AKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDc1NDMwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1MDoxNFrOFrvFEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1MDoxNFrOFrvFEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNDQzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>This method is called synchronously on the execution thread, should not throw or block the\n          \n          \n            \n               * <p>This method is called synchronously on the execution thread, and should not throw exceptions \n          \n          \n            \n                         or block the execution thread.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381404432", "createdAt": "2020-02-19T16:50:14Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, should not throw or block the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d183f26f595845b668988d337ef2380bc357f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDc1NTMwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1MDoyNlrOFrvFow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTowOToxNVrOFsLVog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNDU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * execution thread.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381404579", "createdAt": "2020-02-19T16:50:26Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, should not throw or block the\n+   * execution thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d183f26f595845b668988d337ef2380bc357f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2NzQyNg==", "bodyText": "@thisthat you missed that one :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381867426", "createdAt": "2020-02-20T09:09:15Z", "author": {"login": "arminru"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, should not throw or block the\n+   * execution thread.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNDU3OQ=="}, "originalCommit": {"oid": "ec5d183f26f595845b668988d337ef2380bc357f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDg1NzI1OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoxNTowN1rOFrwEkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToyMzowMVrOFsLy0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMDY4OQ==", "bodyText": "Rename this shutdown?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381420689", "createdAt": "2020-02-19T17:15:07Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -315,14 +320,18 @@ public void run() {\n     }\n \n     private void flush() {\n+      forceFlush();\n+      executorService.shutdown();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5d183f26f595845b668988d337ef2380bc357f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3NDg5OA==", "bodyText": "Done in 26bb8ae", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r381874898", "createdAt": "2020-02-20T09:23:01Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -315,14 +320,18 @@ public void run() {\n     }\n \n     private void flush() {\n+      forceFlush();\n+      executorService.shutdown();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMDY4OQ=="}, "originalCommit": {"oid": "ec5d183f26f595845b668988d337ef2380bc357f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTQ5NDE3OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyMzo1OVrOFsaHxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzoxOToyNFrOFstoZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwOTYzOQ==", "bodyText": "I am confused about this. I think the whole purpose is to ensure flush so it will block, maybe add an issue to clarify this behavior on the specs", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382109639", "createdAt": "2020-02-20T16:23:59Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, and should not throw exceptions\n+   * or block the execution thread. execution thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26bb8ae481765bf02a106d8b6acbdad6b206428d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMTIxOA==", "bodyText": "If it is not blocking maybe a name like initiateFlush or tryFlush would be better.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382111218", "createdAt": "2020-02-20T16:26:29Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, and should not throw exceptions\n+   * or block the execution thread. execution thread.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwOTYzOQ=="}, "originalCommit": {"oid": "26bb8ae481765bf02a106d8b6acbdad6b206428d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMTY5OA==", "bodyText": "Typo: doubled the last 2 words", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382111698", "createdAt": "2020-02-20T16:27:13Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, and should not throw exceptions\n+   * or block the execution thread. execution thread.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwOTYzOQ=="}, "originalCommit": {"oid": "26bb8ae481765bf02a106d8b6acbdad6b206428d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyOTI4NQ==", "bodyText": "The current implementation is blocking. But when I wrote the Javadoc I had the version with timeout in mind. I will rewrite this to clarify the intention of the method!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382429285", "createdAt": "2020-02-21T07:19:24Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -48,4 +48,12 @@\n \n   /** Called when {@link TracerSdkRegistry#shutdown()} is called. */\n   void shutdown();\n+\n+  /**\n+   * Exports all ended spans that have not yet been exported.\n+   *\n+   * <p>This method is called synchronously on the execution thread, and should not throw exceptions\n+   * or block the execution thread. execution thread.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwOTYzOQ=="}, "originalCommit": {"oid": "26bb8ae481765bf02a106d8b6acbdad6b206428d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ1NDUxOnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoxOToxOVrOFtAJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOToyNzoxMFrOFtCDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMjczNw==", "bodyText": "This is not waiting for the processor thread to actually call the flush maybe just document it for the moment and add a TODO to wait for flush to be called. Or simply create an issue.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382732737", "createdAt": "2020-02-21T18:19:19Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -129,6 +130,18 @@ void shutdown() {\n     }\n   }\n \n+  void forceFlush() {\n+    if (isShutdown) {\n+      return;\n+    }\n+    synchronized (this) {\n+      if (isShutdown) {\n+        return;\n+      }\n+      enqueue(null, EventType.ON_FORCE_FLUSH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61e5810a78d3c9d259aeb832d7627186a69eee8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2Mzg4Ng==", "bodyText": "#906", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/882#discussion_r382763886", "createdAt": "2020-02-21T19:27:10Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -129,6 +130,18 @@ void shutdown() {\n     }\n   }\n \n+  void forceFlush() {\n+    if (isShutdown) {\n+      return;\n+    }\n+    synchronized (this) {\n+      if (isShutdown) {\n+        return;\n+      }\n+      enqueue(null, EventType.ON_FORCE_FLUSH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMjczNw=="}, "originalCommit": {"oid": "a61e5810a78d3c9d259aeb832d7627186a69eee8"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1135, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}