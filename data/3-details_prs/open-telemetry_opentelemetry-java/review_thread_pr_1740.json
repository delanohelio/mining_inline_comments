{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTU3ODky", "number": 1740, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjowNDowMlrOEqK92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoyNjozN1rOErbrbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjU1MzIzOnYy", "diffSide": "RIGHT", "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjowNDowMlrOHcOk-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDo1Mzo0MlrOHcg1DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MTAxOA==", "bodyText": "Maybe start using setup described in open-telemetry/opentelemetry-specification#748 ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r499361018", "createdAt": "2020-10-05T06:04:02Z", "author": {"login": "iNikem"}, "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.perf;\n+\n+import eu.rekawek.toxiproxy.Proxy;\n+import eu.rekawek.toxiproxy.ToxiproxyClient;\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+import eu.rekawek.toxiproxy.model.ToxicList;\n+import eu.rekawek.toxiproxy.model.toxic.Latency;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+class OtlpPipelineDriver {\n+\n+  public static final String COLLECTOR_PROXY_PORT = \"44444\";\n+\n+  public static void main(String[] args) throws InterruptedException, IOException {\n+    ToxiproxyClient toxiproxyClient = new ToxiproxyClient();\n+    toxiproxyClient.reset();\n+    Proxy collectorProxy = toxiproxyClient.getProxyOrNull(\"collector\");\n+\n+    if (collectorProxy == null) {\n+      collectorProxy =\n+          toxiproxyClient.createProxy(\n+              \"collector\", \"0.0.0.0:\" + COLLECTOR_PROXY_PORT, \"otel-collector:55680\");\n+    }\n+    collectorProxy.enable();\n+\n+    ToxicList toxics = collectorProxy.toxics();\n+    Latency latency = toxics.latency(\"jittery_latency\", ToxicDirection.DOWNSTREAM, 800);\n+    latency.setJitter(10);\n+\n+    for (Toxic toxic : toxiproxyClient.getProxy(\"collector\").toxics().getAll()) {\n+      System.out.println(\"toxic = \" + toxic.getName() + \" : \" + toxic.getToxicity());\n+    }\n+\n+    IntervalMetricReader intervalMetricReader = setupSdk();\n+\n+    Tracer tracer = OpenTelemetry.getTracer(\"io.opentelemetry.perf\");\n+\n+    for (int i = 0; i < 10000; i++) {\n+      Span exampleSpan = tracer.spanBuilder(\"exampleSpan\").startSpan();\n+      try (Scope scope = tracer.withSpan(exampleSpan)) {\n+        exampleSpan.setAttribute(\"good\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee6596442335fdf91bbc90c7efa8488b5af4929"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2MDA0NA==", "bodyText": "Yeah, I hadn't even begun to think about the shape of the data being pushed through here. My main goal with this PR was just to get something up and running, with toxiproxy in between the collector and the SDK, so we can start making it more interesting and realistic over time.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r499660044", "createdAt": "2020-10-05T14:53:42Z", "author": {"login": "jkwatson"}, "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.perf;\n+\n+import eu.rekawek.toxiproxy.Proxy;\n+import eu.rekawek.toxiproxy.ToxiproxyClient;\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+import eu.rekawek.toxiproxy.model.ToxicList;\n+import eu.rekawek.toxiproxy.model.toxic.Latency;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+class OtlpPipelineDriver {\n+\n+  public static final String COLLECTOR_PROXY_PORT = \"44444\";\n+\n+  public static void main(String[] args) throws InterruptedException, IOException {\n+    ToxiproxyClient toxiproxyClient = new ToxiproxyClient();\n+    toxiproxyClient.reset();\n+    Proxy collectorProxy = toxiproxyClient.getProxyOrNull(\"collector\");\n+\n+    if (collectorProxy == null) {\n+      collectorProxy =\n+          toxiproxyClient.createProxy(\n+              \"collector\", \"0.0.0.0:\" + COLLECTOR_PROXY_PORT, \"otel-collector:55680\");\n+    }\n+    collectorProxy.enable();\n+\n+    ToxicList toxics = collectorProxy.toxics();\n+    Latency latency = toxics.latency(\"jittery_latency\", ToxicDirection.DOWNSTREAM, 800);\n+    latency.setJitter(10);\n+\n+    for (Toxic toxic : toxiproxyClient.getProxy(\"collector\").toxics().getAll()) {\n+      System.out.println(\"toxic = \" + toxic.getName() + \" : \" + toxic.getToxicity());\n+    }\n+\n+    IntervalMetricReader intervalMetricReader = setupSdk();\n+\n+    Tracer tracer = OpenTelemetry.getTracer(\"io.opentelemetry.perf\");\n+\n+    for (int i = 0; i < 10000; i++) {\n+      Span exampleSpan = tracer.spanBuilder(\"exampleSpan\").startSpan();\n+      try (Scope scope = tracer.withSpan(exampleSpan)) {\n+        exampleSpan.setAttribute(\"good\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MTAxOA=="}, "originalCommit": {"oid": "fee6596442335fdf91bbc90c7efa8488b5af4929"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTc2OTE3OnYy", "diffSide": "RIGHT", "path": "perf_harness/docker/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoyMTo0N1rOHeMmBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTowNzozOVrOHejRIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNTY2OA==", "bodyText": "Should we delete this file? It seems copied for a demo that doesn't relate to our config at all", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501425668", "createdAt": "2020-10-08T03:21:47Z", "author": {"login": "anuraaga"}, "path": "perf_harness/docker/README.md", "diffHunk": "@@ -0,0 +1,25 @@\n+# OpenTelemetry Collector Demo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NDkwNg==", "bodyText": "heh. yes. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501794906", "createdAt": "2020-10-08T15:04:28Z", "author": {"login": "jkwatson"}, "path": "perf_harness/docker/README.md", "diffHunk": "@@ -0,0 +1,25 @@\n+# OpenTelemetry Collector Demo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNTY2OA=="}, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NzE1Mg==", "bodyText": "done, along with the prometheus config", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501797152", "createdAt": "2020-10-08T15:07:39Z", "author": {"login": "jkwatson"}, "path": "perf_harness/docker/README.md", "diffHunk": "@@ -0,0 +1,25 @@\n+# OpenTelemetry Collector Demo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNTY2OA=="}, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTc2OTUyOnYy", "diffSide": "RIGHT", "path": "perf_harness/docker/otel-collector-config-perf.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoyMjowMlrOHeMmPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoyMjowMlrOHeMmPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNTcyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            # Alternatively, use jaeger_thrift_http with the settings below. In this case\n          \n          \n            \n            # update the list of exporters on the traces pipeline.\n          \n          \n            \n            #\n          \n          \n            \n            #  jaeger_thrift_http:\n          \n          \n            \n            #    url: http://jaeger-all-in-one:14268/api/traces", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501425725", "createdAt": "2020-10-08T03:22:02Z", "author": {"login": "anuraaga"}, "path": "perf_harness/docker/otel-collector-config-perf.yaml", "diffHunk": "@@ -0,0 +1,36 @@\n+receivers:\n+  otlp:\n+    protocols:\n+        grpc:\n+\n+exporters:\n+  logging:\n+\n+# Alternatively, use jaeger_thrift_http with the settings below. In this case\n+# update the list of exporters on the traces pipeline.\n+#\n+#  jaeger_thrift_http:\n+#    url: http://jaeger-all-in-one:14268/api/traces", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTc3NzA5OnYy", "diffSide": "RIGHT", "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoyNjozN1rOHeMqgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTowNTowNFrOHejKBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNjgxOQ==", "bodyText": "As a followup, testcontainers would make it easier to run the benchmark than docker-compose", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501426819", "createdAt": "2020-10-08T03:26:37Z", "author": {"login": "anuraaga"}, "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.perf;\n+\n+import eu.rekawek.toxiproxy.Proxy;\n+import eu.rekawek.toxiproxy.ToxiproxyClient;\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+import eu.rekawek.toxiproxy.model.ToxicList;\n+import eu.rekawek.toxiproxy.model.toxic.Latency;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/** A testing tool. */\n+public class OtlpPipelineDriver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NTMzNA==", "bodyText": "yeah, i was thinking about that as well. it would definitely be a good follow-up.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501795334", "createdAt": "2020-10-08T15:05:04Z", "author": {"login": "jkwatson"}, "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.perf;\n+\n+import eu.rekawek.toxiproxy.Proxy;\n+import eu.rekawek.toxiproxy.ToxiproxyClient;\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+import eu.rekawek.toxiproxy.model.ToxicList;\n+import eu.rekawek.toxiproxy.model.toxic.Latency;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/** A testing tool. */\n+public class OtlpPipelineDriver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNjgxOQ=="}, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1260, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}