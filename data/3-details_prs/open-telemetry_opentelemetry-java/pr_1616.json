{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzE0MzI3", "number": 1616, "title": "Create a simple example of using the OTLP exporters", "bodyText": "This also includes a docker-compose setup for the collector and friends, so the entire thing is quasi-self-contained.", "createdAt": "2020-09-01T20:25:12Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616", "merged": true, "mergeCommit": {"oid": "721a7cdf2e3e8137c6637b903f19d5d5ed041dbb"}, "closed": true, "closedAt": "2020-09-03T03:17:25Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEtWIZAH2gAyNDc3MzE0MzI3OjkzYWNkY2FhMjg4MWU0ZTc4MWMxNjg0M2YwNjE0YWE5OWNjYTRmODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFHSwqgH2gAyNDc3MzE0MzI3OjE4YzNiZDMzM2U3NzFiNmQ1NDNmNTJkOGZlZjJmMWJhNGEzMGJjNjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "93acdcaa2881e4e781c16843f0614aa99cca4f86", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/93acdcaa2881e4e781c16843f0614aa99cca4f86", "committedDate": "2020-09-01T20:22:50Z", "message": "Create a simple otlp example, with a docker-compose collector setup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ce6ea8235e29215d8fe3a3be692c3d458910e9b", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1ce6ea8235e29215d8fe3a3be692c3d458910e9b", "committedDate": "2020-09-01T20:22:50Z", "message": "Add metrics into the example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e972445c74e2bd89ec612b2eda3ff24d331c3bb", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e972445c74e2bd89ec612b2eda3ff24d331c3bb", "committedDate": "2020-09-01T20:24:00Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTE1NDQ3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#pullrequestreview-480115447", "createdAt": "2020-09-01T21:06:16Z", "commit": {"oid": "9e972445c74e2bd89ec612b2eda3ff24d331c3bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTowNjoxNlrOHLIPOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTowNjoxNlrOHLIPOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTM1Mg==", "bodyText": "I am a bit lost on why the demo app from collector is copied here :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481431352", "createdAt": "2020-09-01T21:06:16Z", "author": {"login": "bogdandrutu"}, "path": "examples/otlp/docker/app/main.go", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright The OpenTelemetry Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//       http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Sample contains a program that exports to the OpenCensus service.\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"math/rand\"\n+\t\"os\"\n+\t\"time\"\n+\n+\t\"contrib.go.opencensus.io/exporter/ocagent\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e972445c74e2bd89ec612b2eda3ff24d331c3bb"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/849112a1c4d9112faf95cbeaf4a1496baf68f72e", "committedDate": "2020-09-01T22:46:35Z", "message": "remove the go metrics load generator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNDgxMTEw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#pullrequestreview-480481110", "createdAt": "2020-09-02T04:49:38Z", "commit": {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo0OTozOFrOHLXtXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo1MToyN1rOHLX0Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4NDgyOQ==", "bodyText": "Since this is the java repo and the example is named otlp, should we just use otlp between the two? Or do we even need to run two collectors for this demo?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481684829", "createdAt": "2020-09-02T04:49:38Z", "author": {"login": "anuraaga"}, "path": "examples/otlp/docker/otel-agent-config.yaml", "diffHunk": "@@ -0,0 +1,38 @@\n+receivers:\n+  opencensus:\n+  zipkin:\n+    endpoint: :9411\n+  jaeger:\n+    protocols:\n+      thrift_http:\n+\n+\n+exporters:\n+  opencensus:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4NTQwMA==", "bodyText": "Unused I think, if it's just for documentation can you add a comment describing it?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481685400", "createdAt": "2020-09-02T04:50:14Z", "author": {"login": "anuraaga"}, "path": "examples/otlp/docker/otel-collector-config-demo.yaml", "diffHunk": "@@ -0,0 +1,54 @@\n+receivers:\n+  opencensus:\n+  otlp:\n+    protocols:\n+        grpc:\n+  otlp/withendpoint:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4NjYyMg==", "bodyText": "If I'm not mistaken, it's a must for this to be called before anything under io.observability since resource is immutable. Let's add a comment with that warning.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481686622", "createdAt": "2020-09-02T04:51:27Z", "author": {"login": "anuraaga"}, "path": "examples/otlp/src/main/java/io/opentelemetry/example/OtlpExporterExample.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.example;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.Collections;\n+\n+/**\n+ * Example code for setting up the OTLP exporters.\n+ *\n+ * <p>If you wish to use this code, you'll need to run a copy of the collector locally, on the\n+ * default port. There is a docker-compose configuration for doing this in the docker subdirectory\n+ * of this module.\n+ */\n+public class OtlpExporterExample {\n+  public static void main(String[] args) throws InterruptedException {\n+    // this will make sure that a proper service.name attribute is set on all the spans/metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNjA1NDk3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#pullrequestreview-480605497", "createdAt": "2020-09-02T08:39:30Z", "commit": {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODozOTozMFrOHLkbgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODo0MDoxN1rOHLkeOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5MzI0OA==", "bodyText": "Are you afraid that people will copy-paste this into their production code? May be use BSP?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481893248", "createdAt": "2020-09-02T08:39:30Z", "author": {"login": "iNikem"}, "path": "examples/otlp/src/main/java/io/opentelemetry/example/OtlpExporterExample.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.example;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.Collections;\n+\n+/**\n+ * Example code for setting up the OTLP exporters.\n+ *\n+ * <p>If you wish to use this code, you'll need to run a copy of the collector locally, on the\n+ * default port. There is a docker-compose configuration for doing this in the docker subdirectory\n+ * of this module.\n+ */\n+public class OtlpExporterExample {\n+  public static void main(String[] args) throws InterruptedException {\n+    // this will make sure that a proper service.name attribute is set on all the spans/metrics.\n+    System.setProperty(\"otel.resource.attributes\", \"service.name=OtlpExporterExample\");\n+\n+    // set up the span exporter and wire it into the SDK\n+    OtlpGrpcSpanExporter spanExporter = OtlpGrpcSpanExporter.getDefault();\n+    SimpleSpanProcessor spanProcessor = SimpleSpanProcessor.newBuilder(spanExporter).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5Mzk0NA==", "bodyText": "It may be confusing for new users, what is Collector and what is Agent and why do they need both. Some documentation may be of help.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481893944", "createdAt": "2020-09-02T08:40:17Z", "author": {"login": "iNikem"}, "path": "examples/otlp/docker/docker-compose.yaml", "diffHunk": "@@ -0,0 +1,58 @@\n+version: \"2\"\n+services:\n+\n+  # Jaeger\n+  jaeger-all-in-one:\n+    image: jaegertracing/all-in-one:latest\n+    ports:\n+      - \"16686:16686\"\n+      - \"14268\"\n+      - \"14250\"\n+\n+  # Zipkin\n+  zipkin-all-in-one:\n+    image: openzipkin/zipkin:latest\n+    ports:\n+      - \"9411:9411\"\n+\n+  # Collector\n+  otel-collector:\n+    image: ${OTELCOL_IMG}\n+    command: [\"--config=/etc/otel-collector-config-demo.yaml\", \"${OTELCOL_ARGS}\"]\n+    volumes:\n+      - ./otel-collector-config-demo.yaml:/etc/otel-collector-config-demo.yaml\n+    ports:\n+      - \"1888:1888\"   # pprof extension\n+      - \"8888:8888\"   # Prometheus metrics exposed by the collector\n+      - \"8889:8889\"   # Prometheus exporter metrics\n+      - \"13133:13133\" # health_check extension\n+      - \"55678\"       # OpenCensus receiver\n+      - \"55681:55679\" # zpages extension\n+      - \"55680:55680\" # otlp receiver\n+    depends_on:\n+      - jaeger-all-in-one\n+      - zipkin-all-in-one\n+\n+  # Agent\n+  otel-agent:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36c1699d4590eb60e86eff4ef2f00502d19f4d9a", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/36c1699d4590eb60e86eff4ef2f00502d19f4d9a", "committedDate": "2020-09-02T17:24:26Z", "message": "remove unneeded pieces of the docker config; switch to using the BSP in the example code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMTE3NjUx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#pullrequestreview-481117651", "createdAt": "2020-09-02T18:03:14Z", "commit": {"oid": "36c1699d4590eb60e86eff4ef2f00502d19f4d9a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDMyMDUw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#pullrequestreview-481432050", "createdAt": "2020-09-03T02:03:04Z", "commit": {"oid": "36c1699d4590eb60e86eff4ef2f00502d19f4d9a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjowMzowNFrOHMShJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjowMzowNFrOHMShJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0ODM1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              opencensus:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r482648358", "createdAt": "2020-09-03T02:03:04Z", "author": {"login": "anuraaga"}, "path": "examples/otlp/docker/otel-collector-config-demo.yaml", "diffHunk": "@@ -0,0 +1,50 @@\n+receivers:\n+  opencensus:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c1699d4590eb60e86eff4ef2f00502d19f4d9a"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18c3bd333e771b6d543f52d8fef2f1ba4a30bc61", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/18c3bd333e771b6d543f52d8fef2f1ba4a30bc61", "committedDate": "2020-09-03T02:36:41Z", "message": "Update examples/otlp/docker/otel-collector-config-demo.yaml\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2426, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}