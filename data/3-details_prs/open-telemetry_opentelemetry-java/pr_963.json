{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODgxOTc1", "number": 963, "title": "Prototype for JFR events using Context interceptor", "bodyText": "", "createdAt": "2020-03-04T21:12:27Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963", "merged": true, "mergeCommit": {"oid": "82cac7a7ecb259c94bda7fc89fb52e9e3b64c7bc"}, "closed": true, "closedAt": "2020-11-24T22:49:03Z", "author": {"login": "sfriberg"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTbTiMgFqTM4NTgwNzE5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfr5mNgFqTUzNzY1OTEwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODA3MTk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-385807194", "createdAt": "2020-04-01T17:39:25Z", "commit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozOToyNVrOF_Lg-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozOToyNVrOF_Lg-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MzI3NA==", "bodyText": "javadoc, please", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401793274", "createdAt": "2020-04-01T17:39:25Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/grpc/override/AbstractSimpleContextStorageListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.override;\n+\n+import io.grpc.Context;\n+\n+public abstract class AbstractSimpleContextStorageListener implements ContextStorageListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODEyNDU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-385812454", "createdAt": "2020-04-01T17:46:37Z", "commit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NjozOFrOF_LxWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NjozOFrOF_LxWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NzQ2NQ==", "bodyText": "javadoc, please", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401797465", "createdAt": "2020-04-01T17:46:38Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListener.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.grpc.Context;\n+import io.grpc.override.AbstractSimpleContextStorageListener;\n+import io.grpc.override.ContextStorageListener;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.unsafe.ContextUtils;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+public class JfrContextStorageListener implements ContextStorageListener.Provider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODE0ODU3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-385814857", "createdAt": "2020-04-01T17:49:53Z", "commit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0OTo1M1rOF_L5Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0OTo1M1rOF_L5Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5OTQ5NA==", "bodyText": "would prefer not abbreviating here. Change to threadLocalEventStack", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401799494", "createdAt": "2020-04-01T17:49:53Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListener.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.grpc.Context;\n+import io.grpc.override.AbstractSimpleContextStorageListener;\n+import io.grpc.override.ContextStorageListener;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.unsafe.ContextUtils;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+public class JfrContextStorageListener implements ContextStorageListener.Provider {\n+\n+  private final ThreadLocal<Deque<ScopeEvent>> tlEventStack =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODE1NzQz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-385815743", "createdAt": "2020-04-01T17:51:07Z", "commit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MTowN1rOF_L8BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MTowN1rOF_L8BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDE5Nw==", "bodyText": "javadoc, and what's with this name? What makes it \"new\"?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401800197", "createdAt": "2020-04-01T17:51:07Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListenerNew.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import io.grpc.Context;\n+import io.grpc.override.ContextStorageListener;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.unsafe.ContextUtils;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+public class JfrContextStorageListenerNew implements ContextStorageListener.Provider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODE1ODc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-385815875", "createdAt": "2020-04-01T17:51:18Z", "commit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MToxOVrOF_L8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MToxOVrOF_L8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDI5OQ==", "bodyText": "javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401800299", "createdAt": "2020-04-01T17:51:19Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class JfrSpanProcessor implements SpanProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODE2ODc5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-385816879", "createdAt": "2020-04-01T17:52:36Z", "commit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MjozN1rOF_L_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MjozN1rOF_L_jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMTEwMw==", "bodyText": "should this be public? With the JFR streaming APIs is this going to be handed directly to the stream listeners?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401801103", "createdAt": "2020-04-01T17:52:37Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/ScopeEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import io.opentelemetry.trace.SpanContext;\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+@Name(\"io.opentelemetry.context.Scope\")\n+@Label(\"Scope\")\n+@Category(\"Open Telemetry Tracing\")\n+@Description(\n+    \"Open Telemetry trace event corresponding to the span currently \"\n+        + \"in scope/active on this thread.\")\n+class ScopeEvent extends Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7713df40715a577d0b6179799963c14f84ea1a44", "committedDate": "2020-03-06T18:02:53Z", "message": "Don't include project unless Java 11+"}, "afterCommit": {"oid": "dc470f01fb7b7290b4de4c660fd663022170716f", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dc470f01fb7b7290b4de4c660fd663022170716f", "committedDate": "2020-05-15T23:36:36Z", "message": "Fix CR comments and fix issues after master merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDE5NTAx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-413019501", "createdAt": "2020-05-15T23:38:26Z", "commit": {"oid": "dc470f01fb7b7290b4de4c660fd663022170716f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozODoyNlrOGWWbXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozODoyNlrOGWWbXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4OTMwOQ==", "bodyText": "Since this required the SDK should it be an SDK contribution instead? @jkwatson", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426089309", "createdAt": "2020-05-15T23:38:26Z", "author": {"login": "sfriberg"}, "path": "contrib/jfr_events/build.gradle", "diffHunk": "@@ -0,0 +1,17 @@\n+plugins {\n+    id \"java\"\n+    //    id \"maven-publish\"\n+}\n+\n+description = 'OpenTelemetry Contrib JFR Events'\n+ext.moduleName = \"io.opentelemetry.contrib.jfr\"\n+\n+sourceCompatibility = 11\n+targetCompatibility = 11\n+\n+dependencies {\n+    implementation project(':opentelemetry-api')\n+    implementation project(':opentelemetry-sdk')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc470f01fb7b7290b4de4c660fd663022170716f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzQ4OTE4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-413748918", "createdAt": "2020-05-18T16:20:44Z", "commit": {"oid": "d8aae5880560d906c1523724522056b37c8c5e58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjoyMDo0NFrOGW-iAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjoyMDo0NFrOGW-iAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0NjM3MQ==", "bodyText": "For some reason this doesn't seem to work with CricleCI, I don't see the JFR project showing up. Running gradle locally with JDK 8 and JDK 11 it is ignore and added correctly", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426746371", "createdAt": "2020-05-18T16:20:44Z", "author": {"login": "sfriberg"}, "path": "settings.gradle", "diffHunk": "@@ -42,6 +42,10 @@ include \":opentelemetry-all\",\n         \":opentelemetry-sdk-contrib-jaeger-remote-sampler\",\n         \":opentelemetry-bom\"\n \n+if(JavaVersion.current().isJava11Compatible()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aae5880560d906c1523724522056b37c8c5e58"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODk1MDYx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-413895061", "createdAt": "2020-05-18T19:53:07Z", "commit": {"oid": "d8aae5880560d906c1523724522056b37c8c5e58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1MzowN1rOGXFaIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1MzowN1rOGXFaIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTA0MA==", "bodyText": "Have you considered testing against any Java 8 distributions that include JFR?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426859040", "createdAt": "2020-05-18T19:53:07Z", "author": {"login": "devinsba"}, "path": "settings.gradle", "diffHunk": "@@ -42,6 +42,10 @@ include \":opentelemetry-all\",\n         \":opentelemetry-sdk-contrib-jaeger-remote-sampler\",\n         \":opentelemetry-bom\"\n \n+if(JavaVersion.current().isJava11Compatible()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aae5880560d906c1523724522056b37c8c5e58"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8aae5880560d906c1523724522056b37c8c5e58", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d8aae5880560d906c1523724522056b37c8c5e58", "committedDate": "2020-05-18T15:32:25Z", "message": "Only build with JDK 11"}, "afterCommit": {"oid": "61ca3d935f8ac5efd03e1acb269a62423d7f4e08", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/61ca3d935f8ac5efd03e1acb269a62423d7f4e08", "committedDate": "2020-10-22T18:10:49Z", "message": "Rewritten for new context implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61ca3d935f8ac5efd03e1acb269a62423d7f4e08", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/61ca3d935f8ac5efd03e1acb269a62423d7f4e08", "committedDate": "2020-10-22T18:10:49Z", "message": "Rewritten for new context implementation"}, "afterCommit": {"oid": "f5a1cb7c805a17c2289518538afc8e0a139d84fd", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f5a1cb7c805a17c2289518538afc8e0a139d84fd", "committedDate": "2020-10-22T18:39:03Z", "message": "Rewritten for new context implementation\n\nSigned-off-by: Staffan Friberg <sfriberg@kth.se>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDMwNDg3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-515030487", "createdAt": "2020-10-22T18:59:46Z", "commit": {"oid": "7b7b70bdff625e8e1a410cdbaa4be4e7dc44125d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODo1OTo0NlrOHmvrXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODo1OTo0NlrOHmvrXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4OTA4Nw==", "bodyText": "@jkwatson is this how I should do things to wrap the an existing ContextStorage?\nWhat would be the best way to have this provider detected and enabled as a wrapper when JAR is added on the classpath? Or should it be done through some configuration/code instead?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r510389087", "createdAt": "2020-10-22T18:59:46Z", "author": {"login": "sfriberg"}, "path": "sdk_extensions/jfr_events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.ContextStorageProvider;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+\n+public class JfrContextStorageProvider implements ContextStorageProvider {\n+\n+  @Override\n+  public ContextStorage get() {\n+    ContextStorage parentStorage = ContextStorage.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7b70bdff625e8e1a410cdbaa4be4e7dc44125d"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b7b70bdff625e8e1a410cdbaa4be4e7dc44125d", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7b7b70bdff625e8e1a410cdbaa4be4e7dc44125d", "committedDate": "2020-10-22T18:54:20Z", "message": "spotless"}, "afterCommit": {"oid": "d871d2710092d1722dc543ad35729df952445730", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d871d2710092d1722dc543ad35729df952445730", "committedDate": "2020-10-23T15:46:07Z", "message": "rewrite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d871d2710092d1722dc543ad35729df952445730", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d871d2710092d1722dc543ad35729df952445730", "committedDate": "2020-10-23T15:46:07Z", "message": "rewrite"}, "afterCommit": {"oid": "f4ff9f9606c403d662b869b47374f0b055c5713b", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f4ff9f9606c403d662b869b47374f0b055c5713b", "committedDate": "2020-11-13T23:22:01Z", "message": "Use new ContextStorageWrapper capabilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ec9749f2035011dc83d08ffe648a967d07cda47", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2ec9749f2035011dc83d08ffe648a967d07cda47", "committedDate": "2020-11-23T20:47:41Z", "message": "Rewritten for new context implementation\n\nSigned-off-by: Staffan Friberg <sfriberg@kth.se>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f67d52f6820b050a54b3d538c99f22489b859842", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f67d52f6820b050a54b3d538c99f22489b859842", "committedDate": "2020-11-23T20:47:41Z", "message": "remove nb file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0b71f1f23410837f7b332c2eacb7c28bdfc779b", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0b71f1f23410837f7b332c2eacb7c28bdfc779b", "committedDate": "2020-11-23T20:47:41Z", "message": "animalsniffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e1a4250bca9c3c4bc3b4e30557d16f10a6f167", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/52e1a4250bca9c3c4bc3b4e30557d16f10a6f167", "committedDate": "2020-11-23T20:47:41Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c8f01755a2e9f1c4a94871702718ac93c36852a", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3c8f01755a2e9f1c4a94871702718ac93c36852a", "committedDate": "2020-11-23T20:47:41Z", "message": "rewrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01fdc306b32656fac2e4531d035ff6380b00a02", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d01fdc306b32656fac2e4531d035ff6380b00a02", "committedDate": "2020-11-23T20:47:41Z", "message": "Use new ContextStorageWrapper capabilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81a0357f2fc0ba553a2ea0257b5193251911a822", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/81a0357f2fc0ba553a2ea0257b5193251911a822", "committedDate": "2020-11-23T20:47:41Z", "message": "work-around JDK bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "146c7ea0a7d328c192fad79fd40685bafeb231ae", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/146c7ea0a7d328c192fad79fd40685bafeb231ae", "committedDate": "2020-11-23T20:58:52Z", "message": "update junit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8672d504edc1d05bdab72ee01a1c1e9e3b1ac6c4", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8672d504edc1d05bdab72ee01a1c1e9e3b1ac6c4", "committedDate": "2020-11-23T20:47:10Z", "message": "work-around JDK bug"}, "afterCommit": {"oid": "146c7ea0a7d328c192fad79fd40685bafeb231ae", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/146c7ea0a7d328c192fad79fd40685bafeb231ae", "committedDate": "2020-11-23T20:58:52Z", "message": "update junit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84f9815138a4e3d98d47151454fe4102eb3aa14e", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/84f9815138a4e3d98d47151454fe4102eb3aa14e", "committedDate": "2020-11-23T21:17:51Z", "message": "update readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/94da981b7eb63c7eced9d2a62f41efab528dc84f", "committedDate": "2020-11-23T21:26:49Z", "message": "Update build script"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDcwMDAw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-537070000", "createdAt": "2020-11-24T04:31:20Z", "commit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDozMToyMVrOH4rh2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNToxMjo1OFrOH4sQHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NTQ4Mg==", "bodyText": "Does this class need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529195482", "createdAt": "2020-11-24T04:31:21Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageWrapper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+\n+public class JfrContextStorageWrapper implements ContextStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NTc4OQ==", "bodyText": "What happens if the event is never committed? Is there a way to detect it in JFR? Then it looks like it could be a nice scope debugging mechanism.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529195789", "createdAt": "2020-11-24T04:32:16Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageWrapper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+\n+public class JfrContextStorageWrapper implements ContextStorage {\n+\n+  private final ContextStorage wrapped;\n+\n+  public JfrContextStorageWrapper(ContextStorage wrapped) {\n+    this.wrapped = wrapped;\n+  }\n+\n+  @Override\n+  public Scope attach(Context toAttach) {\n+    Scope scope = wrapped.attach(toAttach);\n+    ScopeEvent event = new ScopeEvent(Span.fromContext(toAttach).getSpanContext());\n+    event.begin();\n+    return () -> {\n+      event.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NjA2OA==", "bodyText": "I'm not sure what this comment is referring to (span processors are always synchronous I guess). Maybe we don't need it? Otherwise if you can clarify what I'm missing would be great :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529196068", "createdAt": "2020-11-24T04:33:10Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NzI5MA==", "bodyText": "Should we use weak keys for this? It's bad for tracing if a bug means spans are never ended and leaked, but this would cause an actual memory leak I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529197290", "createdAt": "2020-11-24T04:37:16Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NzQzNA==", "bodyText": "By the way I've been thinking of shading in https://github.com/raphw/weak-lock-free/blob/master/src/main/java/com/blogspot/mydailyjava/weaklockfree/WeakConcurrentMap.java for our use for a different Context-related use case, if that'll help I can prioritize it :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529197434", "createdAt": "2020-11-24T04:37:52Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NzI5MA=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjAwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (nonNull(event) && event.shouldCommit()) {\n          \n          \n            \n                if (event != null && event.shouldCommit()) {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529206001", "createdAt": "2020-11-24T05:08:09Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjc5NQ==", "bodyText": "Hmm - not really for this PR but this doesn't seem like how shutdown is supposed to work. For example, we would probably stop accepting spans, and wait for spans to end naturally in an exporter when it is shutting down I think. But can't think of any improvement here so just writing for reference.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529206795", "createdAt": "2020-11-24T05:10:55Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {\n+      event.commit();\n+    }\n+  }\n+\n+  @Override\n+  public boolean isEndRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public CompletableResultCode shutdown() {\n+    spanEvents.forEach((id, event) -> event.commit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjk0Mw==", "bodyText": "Does @Label work on methods? Very small nit, but tend to like putting annotations on public API where possible. Alternatively, if we annotate the fields maybe we don't need the getters.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529206943", "createdAt": "2020-11-24T05:11:23Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/ScopeEvent.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+@Name(\"io.opentelemetry.context.Scope\")\n+@Label(\"Scope\")\n+@Category(\"Open Telemetry Tracing\")\n+@Description(\n+    \"Open Telemetry trace event corresponding to the span currently \"\n+        + \"in scope/active on this thread.\")\n+class ScopeEvent extends Event {\n+\n+  @Label(\"Trace Id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNzMyNA==", "bodyText": "Since jupiter, let's remove public from class / methods", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529207324", "createdAt": "2020-11-24T05:12:58Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/test/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessorTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.consumer.RecordingFile;\n+import org.junit.jupiter.api.Test;\n+\n+public class JfrSpanProcessorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e6856945df1fb6d18ea287bd1fa82a9c2f931a9", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e6856945df1fb6d18ea287bd1fa82a9c2f931a9", "committedDate": "2020-11-24T15:34:17Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e8001e8d29b1605ef03be49542f4c5e38682f0", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/97e8001e8d29b1605ef03be49542f4c5e38682f0", "committedDate": "2020-11-24T15:36:59Z", "message": "Update sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a88a766a5656acbbe8e39b6f4195855dfd78b9", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5a88a766a5656acbbe8e39b6f4195855dfd78b9", "committedDate": "2020-11-24T15:37:30Z", "message": "Update JfrSpanProcessor.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NjQ0NTIz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-537644523", "createdAt": "2020-11-24T15:43:27Z", "commit": {"oid": "e5a88a766a5656acbbe8e39b6f4195855dfd78b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb048d1b08f3343e9c466a63e0b26eb50cb8a09", "author": {"user": {"login": "sfriberg", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7eb048d1b08f3343e9c466a63e0b26eb50cb8a09", "committedDate": "2020-11-24T15:56:05Z", "message": "Update comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NjU5MTAx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#pullrequestreview-537659101", "createdAt": "2020-11-24T15:57:43Z", "commit": {"oid": "e5a88a766a5656acbbe8e39b6f4195855dfd78b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3154, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}