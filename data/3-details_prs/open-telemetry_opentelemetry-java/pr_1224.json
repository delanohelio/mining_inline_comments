{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MzM2NTQy", "number": 1224, "title": "Add implementation for UpDownSumObservers", "bodyText": "Depends on #1220", "createdAt": "2020-05-15T02:11:42Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224", "merged": true, "mergeCommit": {"oid": "39f7954b4e9109afb539f401116084e2dbc4751c"}, "closed": true, "closedAt": "2020-05-15T20:34:44Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchkr9jgFqTQxMjc5Njk1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchoDJCgH2gAyNDE4MzM2NTQyOmFiMjdjY2UwNGQ4MTg0ZmZiMWFjMjI2ZGQwNWQ1NTZkNTAzNDM1ZjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzk2OTUz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224#pullrequestreview-412796953", "createdAt": "2020-05-15T16:30:10Z", "commit": {"oid": "8b61e21d9a9380ab9869916d73b6180e93259a23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjozMDoxMFrOGWLzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjozMDoxMFrOGWLzng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkxNTI5NA==", "bodyText": "Not for this PR, but it might read a little better if the Result word were at the end, rather than the beginning of the interface names.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224#discussion_r425915294", "createdAt": "2020-05-15T16:30:10Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java", "diffHunk": "@@ -67,15 +76,12 @@\n     @Override\n     Builder setConstantLabels(Map<String, String> constantLabels);\n \n-    @Override\n-    Builder setMonotonic(boolean monotonic);\n-\n     @Override\n     DoubleSumObserver build();\n   }\n \n   /** The result for the {@link AsynchronousInstrument.Callback}. */\n-  interface ResultDoubleObserver {\n+  interface ResultDoubleSumObserver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b61e21d9a9380ab9869916d73b6180e93259a23"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODA0MzQ0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224#pullrequestreview-412804344", "createdAt": "2020-05-15T16:41:01Z", "commit": {"oid": "8b61e21d9a9380ab9869916d73b6180e93259a23"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66fca8282a972e5fcd3ad237e5e2b2b959dc0692", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/66fca8282a972e5fcd3ad237e5e2b2b959dc0692", "committedDate": "2020-05-15T19:10:39Z", "message": "Add implementation for UpDownSumObservers\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b61e21d9a9380ab9869916d73b6180e93259a23", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8b61e21d9a9380ab9869916d73b6180e93259a23", "committedDate": "2020-05-15T02:11:04Z", "message": "Add implementation for UpDownSumObservers\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "66fca8282a972e5fcd3ad237e5e2b2b959dc0692", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/66fca8282a972e5fcd3ad237e5e2b2b959dc0692", "committedDate": "2020-05-15T19:10:39Z", "message": "Add implementation for UpDownSumObservers\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTExNTgx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224#pullrequestreview-412911581", "createdAt": "2020-05-15T19:26:05Z", "commit": {"oid": "66fca8282a972e5fcd3ad237e5e2b2b959dc0692"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOToyNjowNVrOGWRPwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOToyNjowNVrOGWRPwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwNDQxNw==", "bodyText": "minor: descriptions in here are not up to date", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224#discussion_r426004417", "createdAt": "2020-05-15T19:26:05Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/DoubleUpDownSumObserverSdkTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.metrics.AsynchronousInstrument.Callback;\n+import io.opentelemetry.metrics.DoubleUpDownSumObserver.ResultDoubleUpDownSumObserver;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.TestClock;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor.Type;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.Collections;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link DoubleUpDownSumObserverSdk}. */\n+@RunWith(JUnit4.class)\n+public class DoubleUpDownSumObserverSdkTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+  private static final long SECOND_NANOS = 1_000_000_000;\n+  private static final Resource RESOURCE =\n+      Resource.create(\n+          Collections.singletonMap(\n+              \"resource_key\", AttributeValue.stringAttributeValue(\"resource_value\")));\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(\"io.opentelemetry.sdk.metrics.DoubleObserverSdkTest\", null);\n+  private final TestClock testClock = TestClock.create();\n+  private final MeterProviderSharedState meterProviderSharedState =\n+      MeterProviderSharedState.create(testClock, RESOURCE);\n+  private final MeterSdk testSdk =\n+      new MeterSdk(meterProviderSharedState, INSTRUMENTATION_LIBRARY_INFO);\n+\n+  @Test\n+  public void collectMetrics_NoCallback() {\n+    DoubleUpDownSumObserverSdk doubleObserver =\n+        testSdk\n+            .doubleUpDownSumObserverBuilder(\"testObserver\")\n+            .setConstantLabels(Collections.singletonMap(\"sk1\", \"sv1\"))\n+            .setDescription(\"My very own measure\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66fca8282a972e5fcd3ad237e5e2b2b959dc0692"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTEyMDUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224#pullrequestreview-412912052", "createdAt": "2020-05-15T19:27:01Z", "commit": {"oid": "66fca8282a972e5fcd3ad237e5e2b2b959dc0692"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOToyNzowMVrOGWRRDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOToyNzowMVrOGWRRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwNDc1MQ==", "bodyText": "this could be updated to have UpDownSum in it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224#discussion_r426004751", "createdAt": "2020-05-15T19:27:01Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/DoubleUpDownSumObserverSdkTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.metrics.AsynchronousInstrument.Callback;\n+import io.opentelemetry.metrics.DoubleUpDownSumObserver.ResultDoubleUpDownSumObserver;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.TestClock;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor.Type;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.Collections;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link DoubleUpDownSumObserverSdk}. */\n+@RunWith(JUnit4.class)\n+public class DoubleUpDownSumObserverSdkTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+  private static final long SECOND_NANOS = 1_000_000_000;\n+  private static final Resource RESOURCE =\n+      Resource.create(\n+          Collections.singletonMap(\n+              \"resource_key\", AttributeValue.stringAttributeValue(\"resource_value\")));\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(\"io.opentelemetry.sdk.metrics.DoubleObserverSdkTest\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66fca8282a972e5fcd3ad237e5e2b2b959dc0692"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTE0Mzc2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1224#pullrequestreview-412914376", "createdAt": "2020-05-15T19:31:17Z", "commit": {"oid": "66fca8282a972e5fcd3ad237e5e2b2b959dc0692"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab27cce04d8184ffb1ac226dd05d556d503435f3", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab27cce04d8184ffb1ac226dd05d556d503435f3", "committedDate": "2020-05-15T20:25:13Z", "message": "Fix minor nits in tests\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2719, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}