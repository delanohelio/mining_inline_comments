{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDgxNTU3", "number": 1791, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo1MjoxOVrOEs71RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzoyNDowOFrOEtlhSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTUzMDkyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo1MjoxOVrOHgcQwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1NTo1M1rOHgwqmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3OTUyMQ==", "bodyText": "@Oberon00 Based on the conversation in open-telemetry/opentelemetry-specification#1086 this should be something like wrapForPropagation, we're wrapping this SpanContext into a PropagatedSpan. This seems like odd naming to me though, as there is nothing about propagation happening here really, doubly-so because propagation is still more commonly used for remote propagation than in-process propagation I think. That's not great here since we don't do remote propagation of the invalid span.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r503779521", "createdAt": "2020-10-13T08:52:19Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return DefaultSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a {@link Span} that only wraps the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all operations are no-op, but it can be used to\n+   * propagate the {@link SpanContext} downstream.\n+   */\n+  static Span wrapWithNoop(SpanContext spanContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408fafeff0ce8f624189e0fdfac386eabdbe51f4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NDA5Ng==", "bodyText": "as there is nothing about propagation happening here really\n\nIf one considers making a span a local parent \"propagation\" (which I think one should), then it makes sense. Because what other uses would this returned object have?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r503794096", "createdAt": "2020-10-13T09:13:45Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return DefaultSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a {@link Span} that only wraps the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all operations are no-op, but it can be used to\n+   * propagate the {@link SpanContext} downstream.\n+   */\n+  static Span wrapWithNoop(SpanContext spanContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3OTUyMQ=="}, "originalCommit": {"oid": "408fafeff0ce8f624189e0fdfac386eabdbe51f4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNTI5Mw==", "bodyText": "Because what other uses would this returned object have?\n\nI dunno maybe someone will have something creative :) While it's indirect usage of this API, one case where it will be used is when extracting the SpanContext from a link - the result of this method will be taken out of the Context, the link will be made, and the result will be dropped without ever being propagated. So this is where the disconnect with the naming comes from - since it's completely up to the caller on whether it's propagated or not, so I find it pretty confusing. There's the other point where there's no such thing as a non-propagated span - all spans can be propagated, so why do we have the propagated span called out in particular? I'm sure someone is going to call Span.getPropagated(tracer.startSpan().getContext()) assuming that's how you're supposed to propagate your span ;) Span.getNoop(tracer.startSpan().getContext()), Span.getNonRecording(...) seems more obviously wrong because it better reflects what's actually happening.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r503805293", "createdAt": "2020-10-13T09:30:11Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return DefaultSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a {@link Span} that only wraps the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all operations are no-op, but it can be used to\n+   * propagate the {@link SpanContext} downstream.\n+   */\n+  static Span wrapWithNoop(SpanContext spanContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3OTUyMQ=="}, "originalCommit": {"oid": "408fafeff0ce8f624189e0fdfac386eabdbe51f4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMzgxNw==", "bodyText": "I don't love this name, but I 100% agree with the sentiment. Making it super clear what the capabilities (and lack thereof) will be of the returned Span seems like a very important signal to the user.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504113817", "createdAt": "2020-10-13T16:55:53Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return DefaultSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a {@link Span} that only wraps the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all operations are no-op, but it can be used to\n+   * propagate the {@link SpanContext} downstream.\n+   */\n+  static Span wrapWithNoop(SpanContext spanContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3OTUyMQ=="}, "originalCommit": {"oid": "408fafeff0ce8f624189e0fdfac386eabdbe51f4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzY1ODY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1ODo1OFrOHgwx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1ODo1OFrOHgwx-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExNTcwNw==", "bodyText": "This change seems a bit orthogonal to the PR. Does it need to be included?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504115707", "createdAt": "2020-10-13T16:58:58Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -144,44 +144,45 @@ public static HttpTraceContext getInstance() {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n \n-    SpanContext spanContext = extractImpl(carrier, getter);\n-    if (!spanContext.isValid()) {\n+    Span span = extractImpl(carrier, getter);\n+    if (!span.isValid()) {\n       return context;\n     }\n \n-    return TracingContextUtils.withSpan(DefaultSpan.create(spanContext), context);\n+    return TracingContextUtils.withSpan(span, context);\n   }\n \n-  private static <C> SpanContext extractImpl(C carrier, Getter<C> getter) {\n+  private static <C> Span extractImpl(C carrier, Getter<C> getter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952058709c2565f9afe643598645a453a723a3ad"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg1Mzk1OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MDoyNVrOHgyouw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MDoyNVrOHgyouw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NjEwNw==", "bodyText": "I'd like to separate out this changes into a follow-on PR, just to keep this one a little more tight in its scope.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504146107", "createdAt": "2020-10-13T17:50:25Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java", "diffHunk": "@@ -123,18 +122,18 @@ public static AwsXRayPropagator getInstance() {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n \n-    SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n-    if (!spanContext.isValid()) {\n+    Span span = extractSpan(carrier, getter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952058709c2565f9afe643598645a453a723a3ad"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg3NzM2OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1NjozNFrOHgy2wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1NjozNFrOHgy2wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0OTY5OA==", "bodyText": "ditto on reducing scope for this PR", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504149698", "createdAt": "2020-10-13T17:56:34Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -29,33 +28,33 @@\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n-    if (!spanContext.isValid()) {\n+    Span span = extractFromMultipleHeaders(carrier, getter);\n+    if (!span.isValid()) {\n       return Optional.empty();\n     }\n \n-    return Optional.of(TracingContextUtils.withSpan(DefaultSpan.create(spanContext), context));\n+    return Optional.of(TracingContextUtils.withSpan(span, context));\n   }\n \n-  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n+  private static <C> Span extractFromMultipleHeaders(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952058709c2565f9afe643598645a453a723a3ad"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTc1NjQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowMToxNFrOHhXiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowMToxNFrOHhXiQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDY1Ng==", "bodyText": "this is a nice cleanup. much tighter and clearer.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504750656", "createdAt": "2020-10-14T15:01:14Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -64,9 +64,7 @@ public Span startSpan() {\n         spanContext = TracingContextUtils.getCurrentSpan().getContext();\n       }\n \n-      return spanContext != null && !SpanContext.getInvalid().equals(spanContext)\n-          ? new DefaultSpan(spanContext)\n-          : DefaultSpan.getInvalid();\n+      return Span.getPropagated(spanContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ceec41364224421d92885b12381753782b6184a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjM1NzczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzoyMzoxMVrOHhdatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowMzo1NFrOHhe58w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzAyOQ==", "bodyText": "s/getPropagated/toPropagated?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504847029", "createdAt": "2020-10-14T17:23:11Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return PropagatedSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a non-recording {@link Span} that holds the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all tracing operations are no-op, but it can be used\n+   * to propagate a valid {@link SpanContext} downstream.\n+   */\n+  static Span getPropagated(SpanContext spanContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ceec41364224421d92885b12381753782b6184a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1MzA0Nw==", "bodyText": "I think this should be called Span.wrap(SpanContext). Then we are also safe against renamings of propagated/noop/etc", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504853047", "createdAt": "2020-10-14T17:33:00Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return PropagatedSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a non-recording {@link Span} that holds the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all tracing operations are no-op, but it can be used\n+   * to propagate a valid {@link SpanContext} downstream.\n+   */\n+  static Span getPropagated(SpanContext spanContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzAyOQ=="}, "originalCommit": {"oid": "0ceec41364224421d92885b12381753782b6184a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3MTQxMQ==", "bodyText": "I don't think we are safe against behavior change, this needs to always propagate the SC. But +1 for the name", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504871411", "createdAt": "2020-10-14T18:03:54Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -23,6 +23,26 @@\n @ThreadSafe\n public interface Span {\n \n+  /**\n+   * Returns an invalid {@link Span}. An invalid {@link Span} is used when tracing is disabled,\n+   * usually because there is no OpenTelemetry SDK installed.\n+   */\n+  static Span getInvalid() {\n+    return PropagatedSpan.INVALID;\n+  }\n+\n+  /**\n+   * Returns a non-recording {@link Span} that holds the provided {@link SpanContext} but has no\n+   * functionality. It will not be exported and all tracing operations are no-op, but it can be used\n+   * to propagate a valid {@link SpanContext} downstream.\n+   */\n+  static Span getPropagated(SpanContext spanContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzAyOQ=="}, "originalCommit": {"oid": "0ceec41364224421d92885b12381753782b6184a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjM2MTA3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzoyNDowOFrOHhdc4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzozODozOFrOHhrKEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzU4NQ==", "bodyText": "I think this change is unrelated with the PR description and purpose, consider to not add \"secondary\" changes to a PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r504847585", "createdAt": "2020-10-14T17:24:08Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -304,6 +324,15 @@ default void setAttribute(AttributeKey<Long> key, int value) {\n    */\n   boolean isRecording();\n \n+  /**\n+   * Returns whether this {@link Span} is valid.\n+   *\n+   * @see Span#getInvalid()\n+   */\n+  default boolean isValid() {\n+    return getContext().isValid();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ceec41364224421d92885b12381753782b6184a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA3MjE0Ng==", "bodyText": "Sure makes sense", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1791#discussion_r505072146", "createdAt": "2020-10-14T23:38:38Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -304,6 +324,15 @@ default void setAttribute(AttributeKey<Long> key, int value) {\n    */\n   boolean isRecording();\n \n+  /**\n+   * Returns whether this {@link Span} is valid.\n+   *\n+   * @see Span#getInvalid()\n+   */\n+  default boolean isValid() {\n+    return getContext().isValid();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NzU4NQ=="}, "originalCommit": {"oid": "0ceec41364224421d92885b12381753782b6184a"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2079, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}