{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTA4MzE3", "number": 898, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyOTozNlrODhogkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODozMjozM1rODhoj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTkzMjk4OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyOTozNlrOFseZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTowNzo0OFrOFsfm1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg==", "bodyText": "I heard once that getClass is expensive, maybe we do cache that in a constant for this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382179712", "createdAt": "2020-02-20T18:29:36Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4NDYwMQ==", "bodyText": "I am probably wrong, we need benchmarks :) later maybe", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382184601", "createdAt": "2020-02-20T18:39:17Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg=="}, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5MzM5Mg==", "bodyText": "heh. yeah, I think getClass() is very fast, but benchmarks can show the truth.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382193392", "createdAt": "2020-02-20T18:56:17Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg=="}, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5OTUxMA==", "bodyText": "also, I had this logic backwards. fixed now.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382199510", "createdAt": "2020-02-20T19:07:48Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTcxMg=="}, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTk0MDkxOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODozMjoyMlrOFsee_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTowNzoyM1rOFsfmFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTExNg==", "bodyText": "Does this need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382181116", "createdAt": "2020-02-20T18:32:22Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {\n+      return;\n+    }\n+    doMergeAndReset(other);\n+  }\n+\n+  /**\n+   * Merges the current value into the given {@code aggregator} and resets the current value in this\n+   * {@code Aggregator}.\n+   *\n+   * <p>If this method is called, you can assume that the passed in aggregator can be cast to your\n+   * self-type.\n+   *\n+   * @param aggregator The aggregator to merge with.\n+   */\n+  public abstract void doMergeAndReset(Aggregator aggregator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5MzgwNQ==", "bodyText": "it does not. will fix.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382193805", "createdAt": "2020-02-20T18:57:02Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {\n+      return;\n+    }\n+    doMergeAndReset(other);\n+  }\n+\n+  /**\n+   * Merges the current value into the given {@code aggregator} and resets the current value in this\n+   * {@code Aggregator}.\n+   *\n+   * <p>If this method is called, you can assume that the passed in aggregator can be cast to your\n+   * self-type.\n+   *\n+   * @param aggregator The aggregator to merge with.\n+   */\n+  public abstract void doMergeAndReset(Aggregator aggregator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTExNg=="}, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5OTMxNw==", "bodyText": "fixed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382199317", "createdAt": "2020-02-20T19:07:23Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {\n+\n+  @Override\n+  public void mergeToAndReset(Aggregator other) {\n+    if (!other.getClass().isAssignableFrom(this.getClass())) {\n+      return;\n+    }\n+    doMergeAndReset(other);\n+  }\n+\n+  /**\n+   * Merges the current value into the given {@code aggregator} and resets the current value in this\n+   * {@code Aggregator}.\n+   *\n+   * <p>If this method is called, you can assume that the passed in aggregator can be cast to your\n+   * self-type.\n+   *\n+   * @param aggregator The aggregator to merge with.\n+   */\n+  public abstract void doMergeAndReset(Aggregator aggregator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTExNg=="}, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTk0MTQyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODozMjozM1rOFsefUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTowNzozMFrOFsfmQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTIwMQ==", "bodyText": "Does this need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382181201", "createdAt": "2020-02-20T18:32:33Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5Mzg0MA==", "bodyText": "ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382193840", "createdAt": "2020-02-20T18:57:07Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTIwMQ=="}, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5OTM2Mg==", "bodyText": "fixed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/898#discussion_r382199362", "createdAt": "2020-02-20T19:07:30Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+public abstract class AbstractAggregator implements Aggregator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTIwMQ=="}, "originalCommit": {"oid": "de18a5cc732164a3896a04680e80f1c3b323d145"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 903, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}