{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MzIwMDQ5", "number": 1220, "title": "Add API for UpDownSumObservers", "bodyText": "Fix comments in SumObservers, remove monotonic property from the SumObserver that was left in the previous PR.", "createdAt": "2020-05-15T01:01:42Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220", "merged": true, "mergeCommit": {"oid": "317ccbc393c901dea1b6f493da934e7b7a6b0b81"}, "closed": true, "closedAt": "2020-05-15T19:07:13Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchYY5fABqjMzMzkwNjYxNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchmcnhABqjMzNDIwOTg3OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41bc41af6c21b2f1d779203406453bc42f10d8e4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/41bc41af6c21b2f1d779203406453bc42f10d8e4", "committedDate": "2020-05-15T01:00:53Z", "message": "Add API for UpDownSumObservers\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "8568f0f87c1584047a8bc42791a7f57280c11de4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8568f0f87c1584047a8bc42791a7f57280c11de4", "committedDate": "2020-05-15T02:10:16Z", "message": "Add API for UpDownSumObservers\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNTQ4NDI5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#pullrequestreview-412548429", "createdAt": "2020-05-15T10:59:38Z", "commit": {"oid": "8568f0f87c1584047a8bc42791a7f57280c11de4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDo1OTozOVrOGWAPtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMToxODoyMlrOGWAw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNTg3Nw==", "bodyText": "It does not sound monotonic to me since the cpu usage can float up and down. Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *           .doubleSumObserverBuilder(\"cpu_usage\")\n          \n          \n            \n             *           .doubleSumObserverBuilder(\"cpu_usage_time\")\n          \n      \n    \n    \n  \n\nOr we could provide a memory example, e.g. \"bytes written\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425725877", "createdAt": "2020-05-15T10:59:39Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java", "diffHunk": "@@ -16,33 +16,42 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleSumObserver.ResultDoubleObserver;\n+import io.opentelemetry.metrics.DoubleSumObserver.ResultDoubleSumObserver;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Observer to report pre-aggregated metrics with double value.\n+ * {@code SumObserver} is the asynchronous instrument corresponding to Counter, used to capture a\n+ * monotonic sum with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * SumObserver to capture any value that starts at zero and rises throughout the process lifetime\n+ * and never falls.\n+ *\n+ * <p>A {@code SumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n  *\n  * <p>Example:\n  *\n  * <pre>{@code\n  * class YourClass {\n  *\n  *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n- *   private static final DoubleSumObserver observer =\n+ *   private static final DoubleSumObserver cpuObserver =\n  *       meter.\n- *           .doubleSumObserverBuilder(\"doWork_latency\")\n- *           .setDescription(\"gRPC Latency\")\n+ *           .doubleSumObserverBuilder(\"cpu_usage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8568f0f87c1584047a8bc42791a7f57280c11de4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyOTE2NQ==", "bodyText": "I think we can remove this TODO", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425729165", "createdAt": "2020-05-15T11:06:49Z", "author": {"login": "thisthat"}, "path": "contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java", "diffHunk": "@@ -69,12 +70,11 @@ public MemoryPools() {\n   /** Export only the \"area\" metric. */\n   public void exportMemoryAreaMetric() {\n     // TODO: Set this as non-monotonic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8568f0f87c1584047a8bc42791a7f57280c11de4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyOTUxNw==", "bodyText": "also this", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425729517", "createdAt": "2020-05-15T11:07:37Z", "author": {"login": "thisthat"}, "path": "contrib/runtime_metrics/src/main/java/io/opentelemetry/contrib/metrics/runtime/MemoryPools.java", "diffHunk": "@@ -103,12 +103,11 @@ public void update(ResultLongObserver resultLongObserver) {\n   /** Export only the \"pool\" metric. */\n   public void exportMemoryPoolMetric() {\n     // TODO: Set this as non-monotonic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8568f0f87c1584047a8bc42791a7f57280c11de4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDM5Ng==", "bodyText": "Also this example is not monotonic", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425734396", "createdAt": "2020-05-15T11:18:22Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongSumObserver.java", "diffHunk": "@@ -16,33 +16,42 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.LongSumObserver.ResultLongObserver;\n+import io.opentelemetry.metrics.LongSumObserver.ResultLongSumObserver;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Observer to report pre-aggregated metrics with double value.\n+ * {@code SumObserver} is the asynchronous instrument corresponding to Counter, used to capture a\n+ * monotonic sum with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * SumObserver to capture any value that starts at zero and rises throughout the process lifetime\n+ * and never falls.\n+ *\n+ * <p>A {@code SumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n  *\n  * <p>Example:\n  *\n  * <pre>{@code\n  * class YourClass {\n  *\n  *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n- *   private static final LongSumObserver observer =\n+ *   private static final LongSumObserver cpuObserver =\n  *       meter.\n- *           .longSumObserverBuilder(\"doWork_latency\")\n- *           .setDescription(\"gRPC Latency\")\n+ *           .longSumObserverBuilder(\"cpu_usage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8568f0f87c1584047a8bc42791a7f57280c11de4"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5feb3e576f8a82b91bb715b8cc4fc42d5ad88bb4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5feb3e576f8a82b91bb715b8cc4fc42d5ad88bb4", "committedDate": "2020-05-15T14:44:45Z", "message": "Fix minor nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d2ddb1d0385efd4b4a93788cf80999e16add3597", "committedDate": "2020-05-15T16:32:06Z", "message": "Fix minor nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODQ2MTUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#pullrequestreview-412846152", "createdAt": "2020-05-15T17:43:49Z", "commit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0Mzo0OVrOGWOKhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0Mzo0OVrOGWOKhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzkyNg==", "bodyText": "Something to think about: this interface is exactly the same as the one in the up-down version. We could think about sharing the interface, calling it something like DoubleSumResult and reducing a wee bit of duplicated code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425953926", "createdAt": "2020-05-15T17:43:49Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleSumObserver.java", "diffHunk": "@@ -67,15 +76,12 @@\n     @Override\n     Builder setConstantLabels(Map<String, String> constantLabels);\n \n-    @Override\n-    Builder setMonotonic(boolean monotonic);\n-\n     @Override\n     DoubleSumObserver build();\n   }\n \n   /** The result for the {@link AsynchronousInstrument.Callback}. */\n-  interface ResultDoubleObserver {\n+  interface ResultDoubleSumObserver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODQ2NzE4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#pullrequestreview-412846718", "createdAt": "2020-05-15T17:44:40Z", "commit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0NDo0MFrOGWOMQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0NDo0MFrOGWOMQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NDM3MQ==", "bodyText": "copy-paste miss here. Should be the DoubleUpDown...", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425954371", "createdAt": "2020-05-15T17:44:40Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleUpDownSumObserver.ResultDoubleUpDownSumObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownSumObserver is the asynchronous instrument corresponding to UpDownCounter, used to capture\n+ * a non-monotonic count with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * UpDownSumObserver to capture any value that starts at zero and rises or falls throughout the\n+ * process lifetime.\n+ *\n+ * <p>A {@code UpDownSumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleUpDownSumObserver memoryObserver =\n+ *       meter.\n+ *           .doubleUpDownSumObserverBuilder(\"memory_usage\")\n+ *           .setDescription(\"System memory usage\")\n+ *           .setUnit(\"by\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     memoryObserver.setCallback(\n+ *         new LongSumObserver.Callback<LongObserver.ResultLongObserver>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODQ4MjE5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#pullrequestreview-412848219", "createdAt": "2020-05-15T17:46:58Z", "commit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0Njo1OFrOGWOQ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0Njo1OFrOGWOQ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NTU2MA==", "bodyText": "should be LongUpDown..", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425955560", "createdAt": "2020-05-15T17:46:58Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongUpDownSumObserver.ResultLongUpDownSumObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownSumObserver is the asynchronous instrument corresponding to UpDownCounter, used to capture\n+ * a non-monotonic count with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * UpDownSumObserver to capture any value that starts at zero and rises or falls throughout the\n+ * process lifetime.\n+ *\n+ * <p>A {@code UpDownSumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongUpDownSumObserver memoryObserver =\n+ *       meter.\n+ *           .longUpDownSumObserverBuilder(\"memory_usage\")\n+ *           .setDescription(\"System memory usage\")\n+ *           .setUnit(\"by\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     memoryObserver.setCallback(\n+ *         new LongSumObserver.Callback<LongObserver.ResultLongObserver>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODQ4OTEy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#pullrequestreview-412848912", "createdAt": "2020-05-15T17:48:02Z", "commit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0ODowMlrOGWOTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0ODowMlrOGWOTCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjEwNg==", "bodyText": "I don't think we need these 3 methods declared here, as they just restate the parent interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425956106", "createdAt": "2020-05-15T17:48:02Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongUpDownSumObserver.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongUpDownSumObserver.ResultLongUpDownSumObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownSumObserver is the asynchronous instrument corresponding to UpDownCounter, used to capture\n+ * a non-monotonic count with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * UpDownSumObserver to capture any value that starts at zero and rises or falls throughout the\n+ * process lifetime.\n+ *\n+ * <p>A {@code UpDownSumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongUpDownSumObserver memoryObserver =\n+ *       meter.\n+ *           .longUpDownSumObserverBuilder(\"memory_usage\")\n+ *           .setDescription(\"System memory usage\")\n+ *           .setUnit(\"by\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     memoryObserver.setCallback(\n+ *         new LongSumObserver.Callback<LongObserver.ResultLongObserver>() {\n+ *          {@literal @}Override\n+ *           public void update(ResultLongObserver result) {\n+ *             // Get system memory usage\n+ *             result.observe(memoryUsed, \"state\", \"used\");\n+ *             result.observe(memoryFree, \"state\", \"free\");\n+ *           }\n+ *         });\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * @since 0.1.0\n+ */\n+@ThreadSafe\n+public interface LongUpDownSumObserver extends AsynchronousInstrument<ResultLongUpDownSumObserver> {\n+  @Override\n+  void setCallback(Callback<ResultLongUpDownSumObserver> metricUpdater);\n+\n+  /** Builder class for {@link LongUpDownSumObserver}. */\n+  interface Builder extends AsynchronousInstrument.Builder {\n+    @Override\n+    Builder setDescription(String description);\n+\n+    @Override\n+    Builder setUnit(String unit);\n+\n+    @Override\n+    Builder setConstantLabels(Map<String, String> constantLabels);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODQ5Mzc0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#pullrequestreview-412849374", "createdAt": "2020-05-15T17:48:44Z", "commit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0ODo0NFrOGWOUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0ODo0NFrOGWOUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjUyMQ==", "bodyText": "These three methods restate the parent interface methods. I think we don't need them here, as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425956521", "createdAt": "2020-05-15T17:48:44Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleUpDownSumObserver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleUpDownSumObserver.ResultDoubleUpDownSumObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownSumObserver is the asynchronous instrument corresponding to UpDownCounter, used to capture\n+ * a non-monotonic count with Observe(sum).\n+ *\n+ * <p>\"Sum\" appears in the name to remind that it is used to capture sums directly. Use a\n+ * UpDownSumObserver to capture any value that starts at zero and rises or falls throughout the\n+ * process lifetime.\n+ *\n+ * <p>A {@code UpDownSumObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleUpDownSumObserver memoryObserver =\n+ *       meter.\n+ *           .doubleUpDownSumObserverBuilder(\"memory_usage\")\n+ *           .setDescription(\"System memory usage\")\n+ *           .setUnit(\"by\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     memoryObserver.setCallback(\n+ *         new LongSumObserver.Callback<LongObserver.ResultLongObserver>() {\n+ *          {@literal @}Override\n+ *           public void update(ResultLongObserver result) {\n+ *             // Get system memory usage\n+ *             result.observe(memoryUsed, \"state\", \"used\");\n+ *             result.observe(memoryFree, \"state\", \"free\");\n+ *           }\n+ *         });\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * @since 0.1.0\n+ */\n+@ThreadSafe\n+public interface DoubleUpDownSumObserver\n+    extends AsynchronousInstrument<ResultDoubleUpDownSumObserver> {\n+  @Override\n+  void setCallback(Callback<ResultDoubleUpDownSumObserver> metricUpdater);\n+\n+  /** Builder class for {@link DoubleUpDownSumObserver}. */\n+  interface Builder extends AsynchronousInstrument.Builder {\n+    @Override\n+    Builder setDescription(String description);\n+\n+    @Override\n+    Builder setUnit(String unit);\n+\n+    @Override\n+    Builder setConstantLabels(Map<String, String> constantLabels);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODU0MDY0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#pullrequestreview-412854064", "createdAt": "2020-05-15T17:55:58Z", "commit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo1NTo1OFrOGWOi9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo1NTo1OFrOGWOi9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2MDE4MQ==", "bodyText": "2020", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#discussion_r425960181", "createdAt": "2020-05-15T17:55:58Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/metrics/DoubleUpDownSumObserverTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODU4MjI2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1220#pullrequestreview-412858226", "createdAt": "2020-05-15T18:02:16Z", "commit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd5bedb502eaaef511d823eb6332faa54f782421", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cd5bedb502eaaef511d823eb6332faa54f782421", "committedDate": "2020-05-15T18:30:15Z", "message": "Add API for UpDownSumObservers\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7313fa1c25c690a1c1ae74dcb2c0f62f3f6a6ed", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a7313fa1c25c690a1c1ae74dcb2c0f62f3f6a6ed", "committedDate": "2020-05-15T18:30:15Z", "message": "Fix minor nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5564faf3778732c207d09e317a8864048d0361a9", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5564faf3778732c207d09e317a8864048d0361a9", "committedDate": "2020-05-15T18:33:02Z", "message": "Fix more nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2ddb1d0385efd4b4a93788cf80999e16add3597", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d2ddb1d0385efd4b4a93788cf80999e16add3597", "committedDate": "2020-05-15T16:32:06Z", "message": "Fix minor nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "5564faf3778732c207d09e317a8864048d0361a9", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5564faf3778732c207d09e317a8864048d0361a9", "committedDate": "2020-05-15T18:33:02Z", "message": "Fix more nits\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2714, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}