{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTczNDAy", "number": 1168, "title": "Add system/env vars and properties configuration for Metric classes", "bodyText": "This addresses #996", "createdAt": "2020-05-04T14:06:22Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168", "merged": true, "mergeCommit": {"oid": "fc911235d2db3e236a0b8a0c8431ca2e0bdb5515"}, "closed": true, "closedAt": "2020-05-10T15:21:57Z", "author": {"login": "thisthat"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdSnAdgH2gAyNDEyOTczNDAyOjM5OWZkYzY3OTQzOTg4NDgyNTlmNGVjNGUyNjlhMDEzOWY2MzdiYmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcf8tlrAFqTQwODc1NTAzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "399fdc6794398848259f4ec4e269a0139f637bba", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/399fdc6794398848259f4ec4e269a0139f637bba", "committedDate": "2020-05-02T09:10:47Z", "message": "Add configuration to IntervalMetricReader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8029a3cf67ae4b20f11f7d8f407c2a7a87a7945e", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8029a3cf67ae4b20f11f7d8f407c2a7a87a7945e", "committedDate": "2020-05-02T09:57:28Z", "message": "Add configuration to OTLP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71aa34761667908f14ac1ef8ab156e24568c4f19", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/71aa34761667908f14ac1ef8ab156e24568c4f19", "committedDate": "2020-05-04T14:02:42Z", "message": "Add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95f07918390b94eea8677b9224cd7195c951200a", "committedDate": "2020-05-04T14:04:08Z", "message": "Fix year copyright"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTg3NzUx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#pullrequestreview-405187751", "createdAt": "2020-05-04T17:18:07Z", "commit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxODowN1rOGQKHlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxODowN1rOGQKHlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NjE4MQ==", "bodyText": "Still says Jaeger in here, FYI.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r419596181", "createdAt": "2020-05-04T17:18:07Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -40,8 +43,8 @@\n    * Creates a new Jaeger gRPC Metric Reporter with the given name, using the given channel.\n    *\n    * @param channel the channel to use when communicating with the Jaeger Collector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTkzNjQ4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#pullrequestreview-405193648", "createdAt": "2020-05-04T17:26:00Z", "commit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyNjowMFrOGQKaew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyNjowMFrOGQKaew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ==", "bodyText": "Is the purpose of these overrides just to provide a handle for documenting the properties? If so, could we do that just in the class javadoc, rather than introducing a ton of lines of code simply for repeating documentation?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r419601019", "createdAt": "2020-05-04T17:26:00Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -146,5 +163,77 @@ public OtlpGrpcMetricExporter build() {\n     }\n \n     private Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+      Long value = getLongProperty(KEY_METRIC_TIMEOUT, configMap);\n+      if (value != null) {\n+        this.setDeadlineMs(value);\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the configuration values from the given properties object for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param properties {@link Properties} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    public Builder readProperties(Properties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d013f7b9adc05be5d7c2662c92506a2dcf589851", "committedDate": "2020-05-06T05:10:43Z", "message": "Removing Jaeger from javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Nzk2NzAx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#pullrequestreview-406796701", "createdAt": "2020-05-06T16:43:52Z", "commit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTA3Mzgw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#pullrequestreview-407507380", "createdAt": "2020-05-07T14:07:06Z", "commit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDowNzowNlrOGSARgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxMDoyM1rOGSAbOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzMjAzMg==", "bodyText": "0.5?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421532032", "createdAt": "2020-05-07T14:07:06Z", "author": {"login": "bogdandrutu"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -96,6 +99,18 @@ public static Builder newBuilder() {\n     return new Builder();\n   }\n \n+  /**\n+   * Returns a new {@link OtlpGrpcMetricExporter} reading the configuration values from the\n+   * environment and from system properties. System properties override values defined in the\n+   * environment. If a configuration value is missing, it uses the default value.\n+   *\n+   * @return a new {@link OtlpGrpcMetricExporter} instance.\n+   * @since 0.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw==", "bodyText": "I expect that everything that is not possible to configure via eng/sysprop to be passed as an argument to a factory method create", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421534523", "createdAt": "2020-05-07T14:10:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436af1c2599e35c5a12d13959140c360c9ace12c", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/436af1c2599e35c5a12d13959140c360c9ace12c", "committedDate": "2020-05-08T05:48:28Z", "message": "0.4.0 -> 0.5.0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ed8756ed4914949904382f5fba66e9cd9ee52bc", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2ed8756ed4914949904382f5fba66e9cd9ee52bc", "committedDate": "2020-05-08T05:46:50Z", "message": "@since 0.4.0 -> 0.5.0"}, "afterCommit": {"oid": "436af1c2599e35c5a12d13959140c360c9ace12c", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/436af1c2599e35c5a12d13959140c360c9ace12c", "committedDate": "2020-05-08T05:48:28Z", "message": "0.4.0 -> 0.5.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzU1MDMy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#pullrequestreview-408755032", "createdAt": "2020-05-10T15:21:50Z", "commit": {"oid": "436af1c2599e35c5a12d13959140c360c9ace12c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3029, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}