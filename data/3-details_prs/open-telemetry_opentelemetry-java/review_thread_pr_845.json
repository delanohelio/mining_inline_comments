{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzkwNzcz", "number": 845, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0NjozMFrODe5nFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODo1OVrODe5rEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzI3NzY3OnYy", "diffSide": "LEFT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/Aggregator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0NjozMFrOFoSxvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODozMzo0MFrOFoUTYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NTAwNg==", "bodyText": "we had added this to avoid the instanceOf checks in the merge methods. Why remove it now?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377795006", "createdAt": "2020-02-11T17:46:30Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/Aggregator.java", "diffHunk": "@@ -14,20 +14,21 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n /** Aggregator represents the interface for all the available aggregations. */\n @ThreadSafe\n-interface Aggregator<T extends Aggregator<?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNDgxMQ==", "bodyText": "With generics it becomes very hard to encapsulate this class in another class. For example to use this in AbstractBoundInstrument I have to use generics there as well (maybe I am too new in generics in Java).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377814811", "createdAt": "2020-02-11T18:24:15Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/Aggregator.java", "diffHunk": "@@ -14,20 +14,21 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n /** Aggregator represents the interface for all the available aggregations. */\n @ThreadSafe\n-interface Aggregator<T extends Aggregator<?>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NTAwNg=="}, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNTE2MQ==", "bodyText": "Also I commented in the description why I changed this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377815161", "createdAt": "2020-02-11T18:24:55Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/Aggregator.java", "diffHunk": "@@ -14,20 +14,21 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n /** Aggregator represents the interface for all the available aggregations. */\n @ThreadSafe\n-interface Aggregator<T extends Aggregator<?>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NTAwNg=="}, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyMDAwMQ==", "bodyText": "I'm not sure I follow the reasoning yet. Hard to see in isolation in this PR, rather that in the context of where you want to use it. I'd be ok if you wanted to get things working, then I could go back and see if I could clean up the overall structure, so we don't have to be doing instanceof all the time.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377820001", "createdAt": "2020-02-11T18:33:40Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/Aggregator.java", "diffHunk": "@@ -14,20 +14,21 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n /** Aggregator represents the interface for all the available aggregations. */\n @ThreadSafe\n-interface Aggregator<T extends Aggregator<?>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NTAwNg=="}, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzI4NTAxOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODoxMFrOFoS18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1MTo0NFrOFoaflg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjA4Mw==", "bodyText": "hmm. this smells like we might not have the right class/interface structure. Can we make the recordable type a parameter of the aggregator type?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377796083", "createdAt": "2020-02-11T17:48:10Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregator.java", "diffHunk": "@@ -14,26 +14,31 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import com.google.common.util.concurrent.AtomicDouble;\n \n-final class DoubleSumAggregator implements Aggregator<DoubleSumAggregator> {\n+public final class DoubleSumAggregator implements Aggregator {\n   // TODO: Change to use DoubleAdder when changed to java8.\n   private final AtomicDouble current;\n \n-  DoubleSumAggregator() {\n+  public DoubleSumAggregator() {\n     current = new AtomicDouble(0.0);\n   }\n \n   @Override\n-  public void merge(DoubleSumAggregator other) {\n-    this.current.getAndAdd(other.current.get());\n+  public void mergeAndReset(Aggregator aggregator) {\n+    if (!(aggregator instanceof DoubleSumAggregator)) {\n+      return;\n+    }\n+\n+    DoubleSumAggregator other = (DoubleSumAggregator) aggregator;\n+    other.current.getAndAdd(this.current.getAndSet(0));\n   }\n \n   @Override\n   public void recordLong(long value) {\n-    throw new UnsupportedOperationException(\"This Aggregator does not support long values\");\n+    throw new UnsupportedOperationException(\"This is a DoubleSumAggregator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMzgyNQ==", "bodyText": "not sure I understand the proposal, can you clarify a bit, maybe add a small example.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377813825", "createdAt": "2020-02-11T18:22:24Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregator.java", "diffHunk": "@@ -14,26 +14,31 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import com.google.common.util.concurrent.AtomicDouble;\n \n-final class DoubleSumAggregator implements Aggregator<DoubleSumAggregator> {\n+public final class DoubleSumAggregator implements Aggregator {\n   // TODO: Change to use DoubleAdder when changed to java8.\n   private final AtomicDouble current;\n \n-  DoubleSumAggregator() {\n+  public DoubleSumAggregator() {\n     current = new AtomicDouble(0.0);\n   }\n \n   @Override\n-  public void merge(DoubleSumAggregator other) {\n-    this.current.getAndAdd(other.current.get());\n+  public void mergeAndReset(Aggregator aggregator) {\n+    if (!(aggregator instanceof DoubleSumAggregator)) {\n+      return;\n+    }\n+\n+    DoubleSumAggregator other = (DoubleSumAggregator) aggregator;\n+    other.current.getAndAdd(this.current.getAndSet(0));\n   }\n \n   @Override\n   public void recordLong(long value) {\n-    throw new UnsupportedOperationException(\"This Aggregator does not support long values\");\n+    throw new UnsupportedOperationException(\"This is a DoubleSumAggregator\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjA4Mw=="}, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxOTU0Ng==", "bodyText": "If all the aggegrators need both methods on them, and all of them throw an UOE with one of them, that seems like the interface isn't really helping us out.\nIf we had an Aggregator<T>, then you could just have a record(T value) on that interface, and each implementation would only have to have one record method, rather than two.\nDoubleSumAggregator implements Aggregator<Double> then.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377819546", "createdAt": "2020-02-11T18:32:47Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregator.java", "diffHunk": "@@ -14,26 +14,31 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import com.google.common.util.concurrent.AtomicDouble;\n \n-final class DoubleSumAggregator implements Aggregator<DoubleSumAggregator> {\n+public final class DoubleSumAggregator implements Aggregator {\n   // TODO: Change to use DoubleAdder when changed to java8.\n   private final AtomicDouble current;\n \n-  DoubleSumAggregator() {\n+  public DoubleSumAggregator() {\n     current = new AtomicDouble(0.0);\n   }\n \n   @Override\n-  public void merge(DoubleSumAggregator other) {\n-    this.current.getAndAdd(other.current.get());\n+  public void mergeAndReset(Aggregator aggregator) {\n+    if (!(aggregator instanceof DoubleSumAggregator)) {\n+      return;\n+    }\n+\n+    DoubleSumAggregator other = (DoubleSumAggregator) aggregator;\n+    other.current.getAndAdd(this.current.getAndSet(0));\n   }\n \n   @Override\n   public void recordLong(long value) {\n-    throw new UnsupportedOperationException(\"This Aggregator does not support long values\");\n+    throw new UnsupportedOperationException(\"This is a DoubleSumAggregator\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjA4Mw=="}, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTQzMA==", "bodyText": "I do wonder if the interface ends up being some extra baggage to carry around, though. I'll keep an eye on this as things evolve.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377921430", "createdAt": "2020-02-11T21:51:44Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregator.java", "diffHunk": "@@ -14,26 +14,31 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import com.google.common.util.concurrent.AtomicDouble;\n \n-final class DoubleSumAggregator implements Aggregator<DoubleSumAggregator> {\n+public final class DoubleSumAggregator implements Aggregator {\n   // TODO: Change to use DoubleAdder when changed to java8.\n   private final AtomicDouble current;\n \n-  DoubleSumAggregator() {\n+  public DoubleSumAggregator() {\n     current = new AtomicDouble(0.0);\n   }\n \n   @Override\n-  public void merge(DoubleSumAggregator other) {\n-    this.current.getAndAdd(other.current.get());\n+  public void mergeAndReset(Aggregator aggregator) {\n+    if (!(aggregator instanceof DoubleSumAggregator)) {\n+      return;\n+    }\n+\n+    DoubleSumAggregator other = (DoubleSumAggregator) aggregator;\n+    other.current.getAndAdd(this.current.getAndSet(0));\n   }\n \n   @Override\n   public void recordLong(long value) {\n-    throw new UnsupportedOperationException(\"This Aggregator does not support long values\");\n+    throw new UnsupportedOperationException(\"This is a DoubleSumAggregator\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjA4Mw=="}, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzI4NjU2OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODozOFrOFoS22w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoyMToyOVrOFoT5dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjMxNQ==", "bodyText": "please import", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377796315", "createdAt": "2020-02-11T17:48:38Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregatorTest.java", "diffHunk": "@@ -14,13 +14,13 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link DoubleSumAggregator}. */\n+/** Unit tests for {@link io.opentelemetry.sdk.metrics.aggregators.DoubleSumAggregator}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMzM2Ng==", "bodyText": "The IDE did this, fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377813366", "createdAt": "2020-02-11T18:21:29Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregatorTest.java", "diffHunk": "@@ -14,13 +14,13 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link DoubleSumAggregator}. */\n+/** Unit tests for {@link io.opentelemetry.sdk.metrics.aggregators.DoubleSumAggregator}. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjMxNQ=="}, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzI4Nzg0OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/aggregators/LongSumAggregatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo0ODo1OVrOFoS3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoyMToyM1rOFoT5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjUwNw==", "bodyText": "import or leave out the package, since we're in the same package.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377796507", "createdAt": "2020-02-11T17:48:59Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/aggregators/LongSumAggregatorTest.java", "diffHunk": "@@ -14,13 +14,13 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link LongSumAggregator}. */\n+/** Unit tests for {@link io.opentelemetry.sdk.metrics.aggregators.LongSumAggregator}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMzMxNw==", "bodyText": "The IDE did this, fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/845#discussion_r377813317", "createdAt": "2020-02-11T18:21:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/aggregators/LongSumAggregatorTest.java", "diffHunk": "@@ -14,13 +14,13 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.sdk.metrics;\n+package io.opentelemetry.sdk.metrics.aggregators;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link LongSumAggregator}. */\n+/** Unit tests for {@link io.opentelemetry.sdk.metrics.aggregators.LongSumAggregator}. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjUwNw=="}, "originalCommit": {"oid": "9c69d6a72079cbb401dda45943acc0b6dc692e0a"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1084, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}