{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzczMDQw", "number": 1805, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzoxOToxOVrOEtwszg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxOTo1M1rOEv6xLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE5Mjc4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzoxOToxOVrOHhvVMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjo0NTo1MFrOHj_20g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MDUzMQ==", "bodyText": "Unfortunately the statics can't be named the same as the method name @carlosalberto. So added them with the \"global\" prefix for now.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r505140531", "createdAt": "2020-10-15T03:19:19Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,194 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, will include any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n   /**\n-   * Returns a singleton {@link TracerProvider}.\n+   * Returns the registered global {@link OpenTelemetry}, a default {@link OpenTelemetry} composed\n+   * of functionality any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+   * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+   * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will\n+   * be default, with no-op behavior.\n    *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n+   * @throws IllegalStateException if a provider has been specified by system property using the\n+   *     interface FQCN but the specified provider cannot be found.\n    */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  static OpenTelemetry get() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry();\n+  }\n+\n+  /** Returns the globally registered {@link TracerProvider}. */\n+  static TracerProvider getGlobalTracerProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzNjA3OQ==", "bodyText": "If I did this change, I would split the renaming in a separate PR, because that is a trivial change. Hard now to look at all changes and determine what is trivial vs what is behavior change.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r506636079", "createdAt": "2020-10-16T17:55:16Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,194 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, will include any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n   /**\n-   * Returns a singleton {@link TracerProvider}.\n+   * Returns the registered global {@link OpenTelemetry}, a default {@link OpenTelemetry} composed\n+   * of functionality any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+   * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+   * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will\n+   * be default, with no-op behavior.\n    *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n+   * @throws IllegalStateException if a provider has been specified by system property using the\n+   *     interface FQCN but the specified provider cannot be found.\n    */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  static OpenTelemetry get() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry();\n+  }\n+\n+  /** Returns the globally registered {@link TracerProvider}. */\n+  static TracerProvider getGlobalTracerProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MDUzMQ=="}, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4NTM5Mg==", "bodyText": "Do you mean making the instance methods something like getInstanceTracerProvider and swapping the names later? That seems like intentionally merging a bad name for a minor improvement in code review - the changes are only to this interface and the class. It's not something I'd generally recommend a contributor to have to do.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r506785392", "createdAt": "2020-10-17T02:52:20Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,194 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, will include any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n   /**\n-   * Returns a singleton {@link TracerProvider}.\n+   * Returns the registered global {@link OpenTelemetry}, a default {@link OpenTelemetry} composed\n+   * of functionality any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+   * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+   * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will\n+   * be default, with no-op behavior.\n    *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n+   * @throws IllegalStateException if a provider has been specified by system property using the\n+   *     interface FQCN but the specified provider cannot be found.\n    */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  static OpenTelemetry get() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry();\n+  }\n+\n+  /** Returns the globally registered {@link TracerProvider}. */\n+  static TracerProvider getGlobalTracerProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MDUzMQ=="}, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwODQzNA==", "bodyText": "Went ahead and renamed the instance methods, still don't think it's a good idea to merge this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r507508434", "createdAt": "2020-10-19T06:45:50Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,194 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, will include any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n   /**\n-   * Returns a singleton {@link TracerProvider}.\n+   * Returns the registered global {@link OpenTelemetry}, a default {@link OpenTelemetry} composed\n+   * of functionality any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+   * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+   * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will\n+   * be default, with no-op behavior.\n    *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n+   * @throws IllegalStateException if a provider has been specified by system property using the\n+   *     interface FQCN but the specified provider cannot be found.\n    */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  static OpenTelemetry get() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry();\n+  }\n+\n+  /** Returns the globally registered {@link TracerProvider}. */\n+  static TracerProvider getGlobalTracerProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MDUzMQ=="}, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODM1NzgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDoyMDo0NlrOHiYf1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjo1MzozOFrOHikU8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDk5Nw==", "bodyText": "Do we need to expose this on the public interface at this point? Could the callers here just make the call to DefaultOpenTelemetry directly?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r505814997", "createdAt": "2020-10-15T20:20:46Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,194 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, will include any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n   /**\n-   * Returns a singleton {@link TracerProvider}.\n+   * Returns the registered global {@link OpenTelemetry}, a default {@link OpenTelemetry} composed\n+   * of functionality any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+   * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+   * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will\n+   * be default, with no-op behavior.\n    *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n+   * @throws IllegalStateException if a provider has been specified by system property using the\n+   *     interface FQCN but the specified provider cannot be found.\n    */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  static OpenTelemetry get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODgxOQ==", "bodyText": "Oops, thanks for finding where I forgot to remove publicness, cleaned up", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r506008819", "createdAt": "2020-10-16T02:53:38Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,194 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, will include any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n   /**\n-   * Returns a singleton {@link TracerProvider}.\n+   * Returns the registered global {@link OpenTelemetry}, a default {@link OpenTelemetry} composed\n+   * of functionality any {@link io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+   * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+   * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will\n+   * be default, with no-op behavior.\n    *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n+   * @throws IllegalStateException if a provider has been specified by system property using the\n+   *     interface FQCN but the specified provider cannot be found.\n    */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  static OpenTelemetry get() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDk5Nw=="}, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODM5NDg2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/DefaultOpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDozMDoxNlrOHiY2aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDozMDoxNlrOHiY2aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyMDc3Ng==", "bodyText": "The builder methods can be package access at this point, correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r505820776", "createdAt": "2020-10-15T20:30:16Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/DefaultOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.DefaultBaggageManager;\n+import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.internal.Obfuscated;\n+import io.opentelemetry.metrics.DefaultMeterProvider;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.metrics.MeterProvider;\n+import io.opentelemetry.metrics.spi.MeterProviderFactory;\n+import io.opentelemetry.trace.DefaultTracerProvider;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracerProvider;\n+import io.opentelemetry.trace.spi.TracerProviderFactory;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n+ * and {@link BaggageManager}.\n+ *\n+ * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ *\n+ * @see TracerProvider\n+ * @see MeterProviderFactory\n+ * @see BaggageManagerFactory\n+ */\n+@ThreadSafe\n+class DefaultOpenTelemetry implements OpenTelemetry {\n+  private static final Object mutex = new Object();\n+\n+  static OpenTelemetry getGlobalOpenTelemetry() {\n+    if (globalOpenTelemetry == null) {\n+      synchronized (mutex) {\n+        if (globalOpenTelemetry == null) {\n+          globalOpenTelemetry = DefaultOpenTelemetry.builder().build();\n+        }\n+      }\n+    }\n+    return globalOpenTelemetry;\n+  }\n+\n+  static void setGlobalOpenTelemetry(OpenTelemetry openTelemetry) {\n+    globalOpenTelemetry = openTelemetry;\n+  }\n+\n+  static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  @Nullable private static volatile OpenTelemetry globalOpenTelemetry;\n+\n+  private final TracerProvider tracerProvider;\n+  private final MeterProvider meterProvider;\n+  private final BaggageManager baggageManager;\n+\n+  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+\n+  @Override\n+  public TracerProvider getTracerProvider() {\n+    return tracerProvider;\n+  }\n+\n+  @Override\n+  public MeterProvider getMeterProvider() {\n+    return meterProvider;\n+  }\n+\n+  @Override\n+  public BaggageManager getBaggageManager() {\n+    return baggageManager;\n+  }\n+\n+  @Override\n+  public ContextPropagators getPropagators() {\n+    return propagators;\n+  }\n+\n+  void setPropagators(ContextPropagators propagators) {\n+    this.propagators = propagators;\n+  }\n+\n+  DefaultOpenTelemetry(\n+      TracerProvider tracerProvider,\n+      MeterProvider meterProvider,\n+      BaggageManager baggageManager,\n+      ContextPropagators propagators) {\n+    this.tracerProvider = tracerProvider;\n+    this.meterProvider = meterProvider;\n+    this.baggageManager = baggageManager;\n+    this.propagators = propagators;\n+  }\n+\n+  /**\n+   * Load provider class via {@link ServiceLoader}. A specific provider class can be requested via\n+   * setting a system property with FQCN.\n+   *\n+   * @param providerClass a provider class\n+   * @param <T> provider type\n+   * @return a provider or null if not found\n+   * @throws IllegalStateException if a specified provider is not found\n+   */\n+  @Nullable\n+  private static <T> T loadSpi(Class<T> providerClass) {\n+    String specifiedProvider = System.getProperty(providerClass.getName());\n+    ServiceLoader<T> providers = ServiceLoader.load(providerClass);\n+    for (T provider : providers) {\n+      if (specifiedProvider == null || specifiedProvider.equals(provider.getClass().getName())) {\n+        return provider;\n+      }\n+    }\n+    if (specifiedProvider != null) {\n+      throw new IllegalStateException(\n+          String.format(\"Service provider %s not found\", specifiedProvider));\n+    }\n+    return null;\n+  }\n+\n+  // for testing\n+  static void reset() {\n+    globalOpenTelemetry = null;\n+  }\n+\n+  public Builder toBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODc5NzAyOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/src/main/java/io/opentelemetry/sdk/logging/export/BatchLogProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1OToyMFrOHic_vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1OToyMFrOHic_vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODcwMw==", "bodyText": "this will probably be something we want to inject, rather than grabbing it globally. follow-on PRs are fine.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r505888703", "createdAt": "2020-10-15T21:59:20Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging/src/main/java/io/opentelemetry/sdk/logging/export/BatchLogProcessor.java", "diffHunk": "@@ -70,7 +70,7 @@ public CompletableResultCode forceFlush() {\n \n   private static class Worker implements Runnable {\n     static {\n-      Meter meter = OpenTelemetry.getMeter(\"io.opentelemetry.sdk.logging\");\n+      Meter meter = OpenTelemetry.getGlobalMeter(\"io.opentelemetry.sdk.logging\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODgwMTEwOnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpanProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjowMDo1MFrOHidCDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjowMDo1MFrOHidCDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4OTI5Mg==", "bodyText": "another case where we'll want to inject a MeterProvider, probably?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r505889292", "createdAt": "2020-10-15T22:00:50Z", "author": {"login": "jkwatson"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpanProcessor.java", "diffHunk": "@@ -133,7 +133,7 @@ public CompletableResultCode forceFlush() {\n   private static final class Worker implements Runnable {\n \n     static {\n-      Meter meter = OpenTelemetry.getMeter(\"io.opentelemetry.sdk.trace\");\n+      Meter meter = OpenTelemetry.getGlobalMeter(\"io.opentelemetry.sdk.trace\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309d1e7bd8e384654c623fb08a4e2874db001c30"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzMxNTMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/DefaultOpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzo1Mzo0M1rOHjKjuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzo1Mzo0M1rOHjKjuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzNTE5Mw==", "bodyText": "final?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r506635193", "createdAt": "2020-10-16T17:53:43Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/DefaultOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.DefaultBaggageManager;\n+import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.internal.Obfuscated;\n+import io.opentelemetry.metrics.DefaultMeterProvider;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.metrics.MeterProvider;\n+import io.opentelemetry.metrics.spi.MeterProviderFactory;\n+import io.opentelemetry.trace.DefaultTracerProvider;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracerProvider;\n+import io.opentelemetry.trace.spi.TracerProviderFactory;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n+ * and {@link BaggageManager}.\n+ *\n+ * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ *\n+ * @see TracerProvider\n+ * @see MeterProviderFactory\n+ * @see BaggageManagerFactory\n+ */\n+@ThreadSafe\n+class DefaultOpenTelemetry implements OpenTelemetry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "824a8e1b83a20b7f57daa9ccce54eab49483a9ba"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTYzNzY1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/DefaultOpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzozMzoxM1rOHkZlfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo0NTowOVrOHkojSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTk4MA==", "bodyText": "if we do merge this as-is, we need to get these renamed ASAP, for sure.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r507929980", "createdAt": "2020-10-19T17:33:13Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/DefaultOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.DefaultBaggageManager;\n+import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.internal.Obfuscated;\n+import io.opentelemetry.metrics.DefaultMeterProvider;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.metrics.MeterProvider;\n+import io.opentelemetry.metrics.spi.MeterProviderFactory;\n+import io.opentelemetry.trace.DefaultTracerProvider;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracerProvider;\n+import io.opentelemetry.trace.spi.TracerProviderFactory;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n+ * and {@link BaggageManager}.\n+ *\n+ * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ *\n+ * @see TracerProvider\n+ * @see MeterProviderFactory\n+ * @see BaggageManagerFactory\n+ */\n+@ThreadSafe\n+final class DefaultOpenTelemetry implements OpenTelemetry {\n+  private static final Object mutex = new Object();\n+\n+  static OpenTelemetry getGlobalOpenTelemetry() {\n+    if (globalOpenTelemetry == null) {\n+      synchronized (mutex) {\n+        if (globalOpenTelemetry == null) {\n+          globalOpenTelemetry = DefaultOpenTelemetry.builder().build();\n+        }\n+      }\n+    }\n+    return globalOpenTelemetry;\n+  }\n+\n+  static void setGlobalOpenTelemetry(OpenTelemetry openTelemetry) {\n+    globalOpenTelemetry = openTelemetry;\n+  }\n+\n+  static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  @Nullable private static volatile OpenTelemetry globalOpenTelemetry;\n+\n+  private final TracerProvider tracerProvider;\n+  private final MeterProvider meterProvider;\n+  private final BaggageManager baggageManager;\n+\n+  private final ContextPropagators propagators;\n+\n+  @Override\n+  public TracerProvider getMyTracerProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2272347da7c508a24d42ccae0e1ceb30ab264a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMDI3NQ==", "bodyText": "can you stack a 2nd PR on top of this one with the renames, so we can move fast in getting it fixed?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r507930275", "createdAt": "2020-10-19T17:33:46Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/DefaultOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.DefaultBaggageManager;\n+import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.internal.Obfuscated;\n+import io.opentelemetry.metrics.DefaultMeterProvider;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.metrics.MeterProvider;\n+import io.opentelemetry.metrics.spi.MeterProviderFactory;\n+import io.opentelemetry.trace.DefaultTracerProvider;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracerProvider;\n+import io.opentelemetry.trace.spi.TracerProviderFactory;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n+ * and {@link BaggageManager}.\n+ *\n+ * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ *\n+ * @see TracerProvider\n+ * @see MeterProviderFactory\n+ * @see BaggageManagerFactory\n+ */\n+@ThreadSafe\n+final class DefaultOpenTelemetry implements OpenTelemetry {\n+  private static final Object mutex = new Object();\n+\n+  static OpenTelemetry getGlobalOpenTelemetry() {\n+    if (globalOpenTelemetry == null) {\n+      synchronized (mutex) {\n+        if (globalOpenTelemetry == null) {\n+          globalOpenTelemetry = DefaultOpenTelemetry.builder().build();\n+        }\n+      }\n+    }\n+    return globalOpenTelemetry;\n+  }\n+\n+  static void setGlobalOpenTelemetry(OpenTelemetry openTelemetry) {\n+    globalOpenTelemetry = openTelemetry;\n+  }\n+\n+  static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  @Nullable private static volatile OpenTelemetry globalOpenTelemetry;\n+\n+  private final TracerProvider tracerProvider;\n+  private final MeterProvider meterProvider;\n+  private final BaggageManager baggageManager;\n+\n+  private final ContextPropagators propagators;\n+\n+  @Override\n+  public TracerProvider getMyTracerProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTk4MA=="}, "originalCommit": {"oid": "9f2272347da7c508a24d42ccae0e1ceb30ab264a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NTE3OQ==", "bodyText": "I'd set up another PR before merging this after it's green-lighted by @bogdandrutu", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r508175179", "createdAt": "2020-10-20T02:45:09Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/DefaultOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.DefaultBaggageManager;\n+import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.internal.Obfuscated;\n+import io.opentelemetry.metrics.DefaultMeterProvider;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.metrics.MeterProvider;\n+import io.opentelemetry.metrics.spi.MeterProviderFactory;\n+import io.opentelemetry.trace.DefaultTracerProvider;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracerProvider;\n+import io.opentelemetry.trace.spi.TracerProviderFactory;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n+ * and {@link BaggageManager}.\n+ *\n+ * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ *\n+ * @see TracerProvider\n+ * @see MeterProviderFactory\n+ * @see BaggageManagerFactory\n+ */\n+@ThreadSafe\n+final class DefaultOpenTelemetry implements OpenTelemetry {\n+  private static final Object mutex = new Object();\n+\n+  static OpenTelemetry getGlobalOpenTelemetry() {\n+    if (globalOpenTelemetry == null) {\n+      synchronized (mutex) {\n+        if (globalOpenTelemetry == null) {\n+          globalOpenTelemetry = DefaultOpenTelemetry.builder().build();\n+        }\n+      }\n+    }\n+    return globalOpenTelemetry;\n+  }\n+\n+  static void setGlobalOpenTelemetry(OpenTelemetry openTelemetry) {\n+    globalOpenTelemetry = openTelemetry;\n+  }\n+\n+  static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  @Nullable private static volatile OpenTelemetry globalOpenTelemetry;\n+\n+  private final TracerProvider tracerProvider;\n+  private final MeterProvider meterProvider;\n+  private final BaggageManager baggageManager;\n+\n+  private final ContextPropagators propagators;\n+\n+  @Override\n+  public TracerProvider getMyTracerProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTk4MA=="}, "originalCommit": {"oid": "9f2272347da7c508a24d42ccae0e1ceb30ab264a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjgxMzg4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxOTo1M1rOHlLKWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzowMTowNVrOHlYcRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0MjIzMg==", "bodyText": "{@code getTracreProvider()...} ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r508742232", "createdAt": "2020-10-20T18:19:53Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,185 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>The default for the OpenTelemetry API will include any {@link\n+ * io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n-  /**\n-   * Returns a singleton {@link TracerProvider}.\n-   *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n-   */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  /** Returns the globally registered {@link TracerProvider}. */\n+  static TracerProvider getTracerProvider() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry().getMyTracerProvider();\n   }\n \n   /**\n-   * Gets or creates a named tracer instance.\n+   * Gets or creates a named tracer instance from the globally registered {@link TracerProvider}.\n    *\n-   * <p>This is a shortcut method for <code>getTracerProvider().get(instrumentationName)</code>.\n+   * <p>This is a shortcut method for {@code getTracerProvider().get(instrumentationName)}\n    *\n    * @param instrumentationName The name of the instrumentation library, not the name of the\n    *     instrument*ed* library (e.g., \"io.opentelemetry.contrib.mongodb\"). Must not be null.\n    * @return a tracer instance.\n    */\n-  public static Tracer getTracer(String instrumentationName) {\n-    return getTracerProvider().get(instrumentationName);\n+  static Tracer getTracer(String instrumentationName) {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry().getMyTracer(instrumentationName);\n   }\n \n   /**\n-   * Gets or creates a named and versioned tracer instance.\n+   * Gets or creates a named and versioned tracer instance from the globally registered {@link\n+   * TracerProvider}.\n    *\n-   * <p>This is a shortcut method for <code>\n-   * getTracerProvider().get(instrumentationName, instrumentationVersion)</code>.\n+   * <p>This is a shortcut method for @codegetTracerProvider().get(instrumentationName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2272347da7c508a24d42ccae0e1ceb30ab264a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MTg5OQ==", "bodyText": "@anuraaga fix this up and we're ready go merge, IMO", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r508951899", "createdAt": "2020-10-21T02:31:07Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,185 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>The default for the OpenTelemetry API will include any {@link\n+ * io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n-  /**\n-   * Returns a singleton {@link TracerProvider}.\n-   *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n-   */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  /** Returns the globally registered {@link TracerProvider}. */\n+  static TracerProvider getTracerProvider() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry().getMyTracerProvider();\n   }\n \n   /**\n-   * Gets or creates a named tracer instance.\n+   * Gets or creates a named tracer instance from the globally registered {@link TracerProvider}.\n    *\n-   * <p>This is a shortcut method for <code>getTracerProvider().get(instrumentationName)</code>.\n+   * <p>This is a shortcut method for {@code getTracerProvider().get(instrumentationName)}\n    *\n    * @param instrumentationName The name of the instrumentation library, not the name of the\n    *     instrument*ed* library (e.g., \"io.opentelemetry.contrib.mongodb\"). Must not be null.\n    * @return a tracer instance.\n    */\n-  public static Tracer getTracer(String instrumentationName) {\n-    return getTracerProvider().get(instrumentationName);\n+  static Tracer getTracer(String instrumentationName) {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry().getMyTracer(instrumentationName);\n   }\n \n   /**\n-   * Gets or creates a named and versioned tracer instance.\n+   * Gets or creates a named and versioned tracer instance from the globally registered {@link\n+   * TracerProvider}.\n    *\n-   * <p>This is a shortcut method for <code>\n-   * getTracerProvider().get(instrumentationName, instrumentationVersion)</code>.\n+   * <p>This is a shortcut method for @codegetTracerProvider().get(instrumentationName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0MjIzMg=="}, "originalCommit": {"oid": "9f2272347da7c508a24d42ccae0e1ceb30ab264a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1OTgxMw==", "bodyText": "Ouch - thanks fixed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1805#discussion_r508959813", "createdAt": "2020-10-21T03:01:05Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -5,255 +5,185 @@\n \n package io.opentelemetry;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.opentelemetry.baggage.BaggageManager;\n-import io.opentelemetry.baggage.DefaultBaggageManager;\n-import io.opentelemetry.baggage.spi.BaggageManagerFactory;\n import io.opentelemetry.context.propagation.ContextPropagators;\n-import io.opentelemetry.context.propagation.DefaultContextPropagators;\n-import io.opentelemetry.internal.Obfuscated;\n-import io.opentelemetry.metrics.DefaultMeterProvider;\n import io.opentelemetry.metrics.Meter;\n import io.opentelemetry.metrics.MeterProvider;\n-import io.opentelemetry.metrics.spi.MeterProviderFactory;\n-import io.opentelemetry.trace.DefaultTracerProvider;\n import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.TracerProvider;\n-import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import io.opentelemetry.trace.spi.TracerProviderFactory;\n-import java.util.Objects;\n-import java.util.ServiceLoader;\n-import javax.annotation.Nullable;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * This class provides a static global accessor for telemetry objects {@link Tracer}, {@link Meter}\n- * and {@link BaggageManager}.\n+ * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The telemetry objects are lazy-loaded singletons resolved via {@link ServiceLoader} mechanism.\n+ * <p>The default for the OpenTelemetry API will include any {@link\n+ * io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n+ * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * default, with no-op behavior.\n  *\n  * @see TracerProvider\n- * @see MeterProviderFactory\n- * @see BaggageManagerFactory\n+ * @see MeterProvider\n+ * @see BaggageManager\n  */\n-@ThreadSafe\n-public final class OpenTelemetry {\n-  private static final Object mutex = new Object();\n-\n-  @Nullable private static volatile OpenTelemetry instance;\n-\n-  private final TracerProvider tracerProvider;\n-  private final MeterProvider meterProvider;\n-  private final BaggageManager contextManager;\n-\n-  private volatile ContextPropagators propagators = DefaultContextPropagators.builder().build();\n+public interface OpenTelemetry {\n \n-  /**\n-   * Returns a singleton {@link TracerProvider}.\n-   *\n-   * @return registered TracerProvider or default via {@link DefaultTracerProvider#getInstance()}.\n-   * @throws IllegalStateException if a specified TracerProvider (via system properties) could not\n-   *     be found.\n-   */\n-  public static TracerProvider getTracerProvider() {\n-    return getInstance().tracerProvider;\n+  /** Returns the globally registered {@link TracerProvider}. */\n+  static TracerProvider getTracerProvider() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry().getMyTracerProvider();\n   }\n \n   /**\n-   * Gets or creates a named tracer instance.\n+   * Gets or creates a named tracer instance from the globally registered {@link TracerProvider}.\n    *\n-   * <p>This is a shortcut method for <code>getTracerProvider().get(instrumentationName)</code>.\n+   * <p>This is a shortcut method for {@code getTracerProvider().get(instrumentationName)}\n    *\n    * @param instrumentationName The name of the instrumentation library, not the name of the\n    *     instrument*ed* library (e.g., \"io.opentelemetry.contrib.mongodb\"). Must not be null.\n    * @return a tracer instance.\n    */\n-  public static Tracer getTracer(String instrumentationName) {\n-    return getTracerProvider().get(instrumentationName);\n+  static Tracer getTracer(String instrumentationName) {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry().getMyTracer(instrumentationName);\n   }\n \n   /**\n-   * Gets or creates a named and versioned tracer instance.\n+   * Gets or creates a named and versioned tracer instance from the globally registered {@link\n+   * TracerProvider}.\n    *\n-   * <p>This is a shortcut method for <code>\n-   * getTracerProvider().get(instrumentationName, instrumentationVersion)</code>.\n+   * <p>This is a shortcut method for @codegetTracerProvider().get(instrumentationName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0MjIzMg=="}, "originalCommit": {"oid": "9f2272347da7c508a24d42ccae0e1ceb30ab264a"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2092, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}