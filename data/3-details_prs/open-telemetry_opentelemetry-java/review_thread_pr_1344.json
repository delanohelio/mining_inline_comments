{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDk2NjQx", "number": 1344, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1MzoxN1rOEGh7Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NTo1MVrOEG5JzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjgyNzUwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/propagation/HttpTraceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1MzoxN1rOGlYtVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1MzoxN1rOGlYtVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1NTMxOQ==", "bodyText": "This is fixed in master", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r441855319", "createdAt": "2020-06-17T21:53:17Z", "author": {"login": "bogdandrutu"}, "path": "api/src/test/java/io/opentelemetry/trace/propagation/HttpTraceContextTest.java", "diffHunk": "@@ -58,7 +58,7 @@\n   private static final String TRACEPARENT_HEADER_NOT_SAMPLED =\n       \"00-\" + TRACE_ID_BASE16 + \"-\" + SPAN_ID_BASE16 + \"-00\";\n   private static final Setter<Map<String, String>> setter = Map::put;\n-  private static final Getter<Map<String, String>> getter = (carrier, key) -> carrier.get(key);\n+  private static final Getter<Map<String, String>> getter = Map::get;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8368f1e0eb4569a4a3f66a9249956574c723250a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjMzOTIzOnYy", "diffSide": "RIGHT", "path": "extensions/logging/log4j2_extensions/src/test/resources/ContextDataProviderTestConfig.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyNzoyOVrOGl7PtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyNzoyOVrOGl7PtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMTE3Mg==", "bodyText": "new line here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442421172", "createdAt": "2020-06-18T18:27:29Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/test/resources/ContextDataProviderTestConfig.xml", "diffHunk": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020, OpenTelemetry Authors\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<Configuration status=\"WARN\" >\n+  <Appenders>\n+    <List name=\"SyncList\">\n+      <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} traceid='%X{traceid}' spanid='%X{spanid}' traceflags='%X{traceflags}' - %msg%n\"/>\n+    </List>\n+    <List name=\"AsyncList\">\n+      <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} traceid='%X{traceid}' spanid='%X{spanid}' traceflags='%X{traceflags}' - %msg%n\"/>\n+    </List>\n+    <List name=\"JsonList\">\n+      <JsonLayout complete=\"false\" compact=\"true\">\n+        <KeyValuePair key=\"traceid\" value=\"$${ctx:traceid}\"/>\n+        <KeyValuePair key=\"spanid\" value=\"$${ctx:spanid}\"/>\n+        <KeyValuePair key=\"traceflags\" value=\"$${ctx:traceflags}\"/>\n+      </JsonLayout>\n+    </List>\n+  </Appenders>\n+  <Loggers>\n+    <Root level=\"debug\">\n+      <AppenderRef ref=\"SyncList\"/>\n+    </Root>\n+    <AsyncLogger name=\"AsyncContextDataProviderTest\" level=\"debug\">\n+      <AppenderRef ref=\"AsyncList\"/>\n+    </AsyncLogger>\n+    <Logger name=\"JsonContextDataProviderTest\" level=\"debug\">\n+      <AppenderRef ref=\"JsonList\"/>\n+    </Logger>\n+  </Loggers>\n+</Configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjM0NTMwOnYy", "diffSide": "RIGHT", "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyOToyOVrOGl7TzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyOToyOVrOGl7TzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjIyMQ==", "bodyText": "I think you can use TracingContextUtils.getCurrentSpan()\nOtherwise please make the tracer static member.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442422221", "createdAt": "2020-06-18T18:29:29Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {\n+  /**\n+   * This method is called on the creation of a log event, and is called in the same thread as the\n+   * call to the logger. This allows us to pull out request correlation information and make it\n+   * available to a layout, even if the logger is using an {@link\n+   * org.apache.logging.log4j.core.appender.AsyncAppender}\n+   *\n+   * @return A map containing string versions of the traceid, spanid, and traceflags which can then\n+   *     be accessed from layout components\n+   * @see OpenTelemetryJsonLayout\n+   */\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"ot_prototype_logging\");\n+    Span span = tracer.getCurrentSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjM0ODc4OnYy", "diffSide": "RIGHT", "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozMDozMlrOGl7WCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0MTo0NlrOGnMq3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjc5Mw==", "bodyText": "the \"isRecording\" should be a property of the TraceContextDataProvider to record for non recording spans as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442422793", "createdAt": "2020-06-18T18:30:32Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {\n+  /**\n+   * This method is called on the creation of a log event, and is called in the same thread as the\n+   * call to the logger. This allows us to pull out request correlation information and make it\n+   * available to a layout, even if the logger is using an {@link\n+   * org.apache.logging.log4j.core.appender.AsyncAppender}\n+   *\n+   * @return A map containing string versions of the traceid, spanid, and traceflags which can then\n+   *     be accessed from layout components\n+   * @see OpenTelemetryJsonLayout\n+   */\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"ot_prototype_logging\");\n+    Span span = tracer.getCurrentSpan();\n+    Map<String, String> map = new HashMap<>();\n+    if (span != null && span.isRecording()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0NTU5MQ==", "bodyText": "Sorry, I'm not following. Do you mean that I should not check on isRecording, or that I should check on TraceContextDataProvider as well? I'm mostly trying to check to ensure that this is a real span- would it be better to call span.getContext().isValid()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442445591", "createdAt": "2020-06-18T19:13:41Z", "author": {"login": "zenmoto"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {\n+  /**\n+   * This method is called on the creation of a log event, and is called in the same thread as the\n+   * call to the logger. This allows us to pull out request correlation information and make it\n+   * available to a layout, even if the logger is using an {@link\n+   * org.apache.logging.log4j.core.appender.AsyncAppender}\n+   *\n+   * @return A map containing string versions of the traceid, spanid, and traceflags which can then\n+   *     be accessed from layout components\n+   * @see OpenTelemetryJsonLayout\n+   */\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"ot_prototype_logging\");\n+    Span span = tracer.getCurrentSpan();\n+    Map<String, String> map = new HashMap<>();\n+    if (span != null && span.isRecording()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjc5Mw=="}, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NTIzMA==", "bodyText": "Yes, isRecording refers to if the span is recording events and having events added to it. I think you want to check for a valid span context, as you suggest.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r443755230", "createdAt": "2020-06-22T18:41:46Z", "author": {"login": "jkwatson"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {\n+  /**\n+   * This method is called on the creation of a log event, and is called in the same thread as the\n+   * call to the logger. This allows us to pull out request correlation information and make it\n+   * available to a layout, even if the logger is using an {@link\n+   * org.apache.logging.log4j.core.appender.AsyncAppender}\n+   *\n+   * @return A map containing string versions of the traceid, spanid, and traceflags which can then\n+   *     be accessed from layout components\n+   * @see OpenTelemetryJsonLayout\n+   */\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"ot_prototype_logging\");\n+    Span span = tracer.getCurrentSpan();\n+    Map<String, String> map = new HashMap<>();\n+    if (span != null && span.isRecording()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjc5Mw=="}, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjM1NDQ3OnYy", "diffSide": "RIGHT", "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayout.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozMjoxNVrOGl7Zdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1ODozOFrOGl8RAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzY3MQ==", "bodyText": "Can this PR be split between OpenTelemetryJsonLayout and TraceContextDataProvider?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442423671", "createdAt": "2020-06-18T18:32:15Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayout.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+import org.apache.logging.log4j.core.time.Instant;\n+import org.apache.logging.log4j.core.util.StringBuilderWriter;\n+import org.apache.logging.log4j.spi.StandardLevel;\n+import org.apache.logging.log4j.util.ReadOnlyStringMap;\n+import org.apache.logging.log4j.util.Strings;\n+\n+/**\n+ * This class implements a JSON layout for Log4j 2.x that will include request correlation\n+ * information in the form of traceid, spanid, and traceflags fields. The format is provisional, but\n+ * is designed to mirror the <a\n+ * href=\"https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md\">Log\n+ * Data Model</a>\n+ */\n+@Plugin(name = \"OpenTelemetryJsonLayout\", category = \"Core\", elementType = \"layout\")\n+public class OpenTelemetryJsonLayout extends AbstractStringLayout {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzg4OQ==", "bodyText": "I can. The OpenTelemetryJsonLayout depends on the TraceContextDataProvider. Would it be better to submit and merge the context data provider and then submit the other, or would it be better to submit the layout against the data provider branch?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442437889", "createdAt": "2020-06-18T18:58:38Z", "author": {"login": "zenmoto"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayout.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+import org.apache.logging.log4j.core.time.Instant;\n+import org.apache.logging.log4j.core.util.StringBuilderWriter;\n+import org.apache.logging.log4j.spi.StandardLevel;\n+import org.apache.logging.log4j.util.ReadOnlyStringMap;\n+import org.apache.logging.log4j.util.Strings;\n+\n+/**\n+ * This class implements a JSON layout for Log4j 2.x that will include request correlation\n+ * information in the form of traceid, spanid, and traceflags fields. The format is provisional, but\n+ * is designed to mirror the <a\n+ * href=\"https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md\">Log\n+ * Data Model</a>\n+ */\n+@Plugin(name = \"OpenTelemetryJsonLayout\", category = \"Core\", elementType = \"layout\")\n+public class OpenTelemetryJsonLayout extends AbstractStringLayout {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzY3MQ=="}, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjM1NjQ1OnYy", "diffSide": "RIGHT", "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayout.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozMjo1MFrOGl7arw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozMjo1MFrOGl7arw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzk4Mw==", "bodyText": "Probably you should cache the value of event.getContextData()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442423983", "createdAt": "2020-06-18T18:32:50Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayout.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+import org.apache.logging.log4j.core.time.Instant;\n+import org.apache.logging.log4j.core.util.StringBuilderWriter;\n+import org.apache.logging.log4j.spi.StandardLevel;\n+import org.apache.logging.log4j.util.ReadOnlyStringMap;\n+import org.apache.logging.log4j.util.Strings;\n+\n+/**\n+ * This class implements a JSON layout for Log4j 2.x that will include request correlation\n+ * information in the form of traceid, spanid, and traceflags fields. The format is provisional, but\n+ * is designed to mirror the <a\n+ * href=\"https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md\">Log\n+ * Data Model</a>\n+ */\n+@Plugin(name = \"OpenTelemetryJsonLayout\", category = \"Core\", elementType = \"layout\")\n+public class OpenTelemetryJsonLayout extends AbstractStringLayout {\n+  JsonFactory factory = new JsonFactory();\n+\n+  protected OpenTelemetryJsonLayout() {\n+    super(StandardCharsets.UTF_8);\n+  }\n+\n+  @Override\n+  public String toSerializable(LogEvent event) {\n+    StringBuilderWriter writer = new StringBuilderWriter();\n+    try {\n+      JsonGenerator generator = factory.createGenerator(writer);\n+      generator.writeStartObject();\n+      writeTimestamp(generator, event.getInstant());\n+\n+      generator.writeFieldName(\"name\");\n+      generator.writeString(event.getLoggerName());\n+\n+      generator.writeFieldName(\"body\");\n+      generator.writeString(event.getMessage().getFormattedMessage());\n+\n+      generator.writeFieldName(\"severitytext\");\n+      generator.writeString(event.getLevel().name());\n+\n+      generator.writeFieldName(\"severitynumber\");\n+      generator.writeNumber(decodeSeverity(event.getLevel()));\n+\n+      if (event.getContextData().containsKey(\"traceid\")) {\n+        writeRequestCorrelation(generator, event.getContextData());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjM2NjYyOnYy", "diffSide": "RIGHT", "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozNTo1NVrOGl7hBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNTowOVrOGl8ekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNTYwNg==", "bodyText": "Please investigate if possible to not call toLowerBase16 on the critical path. Save the current SpanContext in the map and format the strings when exporting:\n\nRemove unnecessary formatting and allocations from the critical path\nRemove unnecessary formatting and allocations if log is dropped in the export pipeline.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442425606", "createdAt": "2020-06-18T18:35:55Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MTM2MQ==", "bodyText": "Unfortunately one of the main use cases here is use by the PatternLayout class, which won't know to call toLowerbase16 when used, so this needs to be a string. On the positive side, this code is not called if the logging call is below the current threshold- I just confirmed that if a message is logged at a trace level, the message is discarded before the TraceContextDataProvider is invoked.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442441361", "createdAt": "2020-06-18T19:05:09Z", "author": {"login": "zenmoto"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNTYwNg=="}, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjYyNjE3OnYy", "diffSide": "RIGHT", "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1Mzo1MFrOGl-D3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1Mzo1MFrOGl-D3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NzI5Mg==", "bodyText": "It's odd to get a handle to a tracer like this without intending to actually do any tracing. If we do end up with a tracer, I agree with @bogdandrutu that it should be a static member of this class. Also, the name of it should match the standard of using the package name where it is used, I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442467292", "createdAt": "2020-06-18T19:53:50Z", "author": {"login": "jkwatson"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {\n+  /**\n+   * This method is called on the creation of a log event, and is called in the same thread as the\n+   * call to the logger. This allows us to pull out request correlation information and make it\n+   * available to a layout, even if the logger is using an {@link\n+   * org.apache.logging.log4j.core.appender.AsyncAppender}\n+   *\n+   * @return A map containing string versions of the traceid, spanid, and traceflags which can then\n+   *     be accessed from layout components\n+   * @see OpenTelemetryJsonLayout\n+   */\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"ot_prototype_logging\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjYzMzA4OnYy", "diffSide": "RIGHT", "path": "extensions/logging/log4j2_extensions/src/test/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayoutTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NTo1MVrOGl-INQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NTo1MVrOGl-INQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2ODQwNQ==", "bodyText": "We prefer using the truth library for assertions, rather than using assertEquals.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442468405", "createdAt": "2020-06-18T19:55:51Z", "author": {"login": "jkwatson"}, "path": "extensions/logging/log4j2_extensions/src/test/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayoutTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.gson.Gson;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.junit.LoggerContextRule;\n+import org.apache.logging.log4j.test.appender.ListAppender;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class OpenTelemetryJsonLayoutTest {\n+  @Rule public LoggerContextRule init = new LoggerContextRule(\"OpenTelemetryJsonLayoutConfig.xml\");\n+  private final Gson gson = new Gson();\n+\n+  @Test\n+  public void testOpenTelemetryJsonLayoutDefaults() {\n+    Logger logger = init.getLogger(\"DefaultJsonLogger\");\n+    ListAppender appender = init.getListAppender(\"Defaults\");\n+    double logTime = System.currentTimeMillis();\n+\n+    // First log outside a span\n+    logger.warn(\"test\");\n+\n+    // Now with an open span\n+    Tracer tracer = OpenTelemetry.getTracer(\"JsonLayoutTest\");\n+    Span span = tracer.spanBuilder(\"a_span\").startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      logger.error(\"test 2\");\n+    }\n+\n+    List<String> messages = appender.getMessages();\n+    String first = messages.get(0);\n+    Map<?, ?> data = gson.fromJson(first, Map.class);\n+    assertEquals(\"test\", data.get(\"body\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1439, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}