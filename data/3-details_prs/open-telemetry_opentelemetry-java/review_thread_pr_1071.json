{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODM2MzU4", "number": 1071, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo0MToyNVrODuaCDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo0MToyNVrODuaCDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTg3NTk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo0MToyNVrOGAYfWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNDo1N1rOGAcVmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1NDQyNA==", "bodyText": "Any reason to remove the 'pre-check' without the lock?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1071#discussion_r403054424", "createdAt": "2020-04-03T14:41:25Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -128,14 +133,16 @@ public static void setPropagators(ContextPropagators propagators) {\n \n   /** Lazy loads an instance. */\n   private static OpenTelemetry getInstance() {\n-    if (instance == null) {\n-      synchronized (OpenTelemetry.class) {\n-        if (instance == null) {\n-          instance = new OpenTelemetry();\n-        }\n+    mutex.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2046715cc04ad177fd529849db87eadf4ca0531c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2MzY4MQ==", "bodyText": "unfortunately, errorprone will complain if you try to do this. I guess I could remove the @GuardedBy on the field?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1071#discussion_r403063681", "createdAt": "2020-04-03T14:54:27Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -128,14 +133,16 @@ public static void setPropagators(ContextPropagators propagators) {\n \n   /** Lazy loads an instance. */\n   private static OpenTelemetry getInstance() {\n-    if (instance == null) {\n-      synchronized (OpenTelemetry.class) {\n-        if (instance == null) {\n-          instance = new OpenTelemetry();\n-        }\n+    mutex.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1NDQyNA=="}, "originalCommit": {"oid": "2046715cc04ad177fd529849db87eadf4ca0531c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4MTg3MA==", "bodyText": "Another argument for the plain Object for locking I guess.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1071#discussion_r403081870", "createdAt": "2020-04-03T15:21:30Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -128,14 +133,16 @@ public static void setPropagators(ContextPropagators propagators) {\n \n   /** Lazy loads an instance. */\n   private static OpenTelemetry getInstance() {\n-    if (instance == null) {\n-      synchronized (OpenTelemetry.class) {\n-        if (instance == null) {\n-          instance = new OpenTelemetry();\n-        }\n+    mutex.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1NDQyNA=="}, "originalCommit": {"oid": "2046715cc04ad177fd529849db87eadf4ca0531c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwOTIwOQ==", "bodyText": "errorprone will do the same complaining in that case as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1071#discussion_r403109209", "createdAt": "2020-04-03T16:03:42Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -128,14 +133,16 @@ public static void setPropagators(ContextPropagators propagators) {\n \n   /** Lazy loads an instance. */\n   private static OpenTelemetry getInstance() {\n-    if (instance == null) {\n-      synchronized (OpenTelemetry.class) {\n-        if (instance == null) {\n-          instance = new OpenTelemetry();\n-        }\n+    mutex.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1NDQyNA=="}, "originalCommit": {"oid": "2046715cc04ad177fd529849db87eadf4ca0531c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExNzQ2NQ==", "bodyText": "Ah, I see it does not understand double-checked locking!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1071#discussion_r403117465", "createdAt": "2020-04-03T16:14:57Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -128,14 +133,16 @@ public static void setPropagators(ContextPropagators propagators) {\n \n   /** Lazy loads an instance. */\n   private static OpenTelemetry getInstance() {\n-    if (instance == null) {\n-      synchronized (OpenTelemetry.class) {\n-        if (instance == null) {\n-          instance = new OpenTelemetry();\n-        }\n+    mutex.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1NDQyNA=="}, "originalCommit": {"oid": "2046715cc04ad177fd529849db87eadf4ca0531c"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 821, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}