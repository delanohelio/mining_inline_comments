{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTU5MDAx", "number": 1441, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo1Mzo1MVrOEQu-vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoyNTo0MFrOERSFWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTgyMzk2OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo1Mzo1MVrOG1DYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo1Mzo1MVrOG1DYjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MzE1MQ==", "bodyText": "how about implementing this with AutoValue, to match the rest of the API and SDK?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458283151", "createdAt": "2020-07-21T17:53:51Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import java.io.PrintStream;\n+\n+final class TraceConfigzActiveTableRow {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2dcb3325e0da5ff6a89546e0c5f05435f4cb8c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTgyNzE1OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzChangeTableRow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo1NDo0NFrOG1DaqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo1NDo0NFrOG1DaqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MzY4OQ==", "bodyText": "AutoValue would get rid of a ton of boilerplate in here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458283689", "createdAt": "2020-07-21T17:54:44Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzChangeTableRow.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+final class TraceConfigzChangeTableRow {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2dcb3325e0da5ff6a89546e0c5f05435f4cb8c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTg1OTA4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODowMzoxNFrOG1DvTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoxMzoxNlrOG1EGLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4ODk3NQ==", "bodyText": "The word \"Permanently\" here doesn't seem right. It's not permament...you can just use this page to change it again, correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458288975", "createdAt": "2020-07-21T18:03:14Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Permanently change</b></th>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2dcb3325e0da5ff6a89546e0c5f05435f4cb8c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5MzExNg==", "bodyText": "Yea, I followed the wording of OpenCensus, and \"permanently\" meant that the changes is applied and will not automatically change back to default after a certain amount of time. I don't know if OpenCensus wanted to have a \"temporary\" change as well. I can remove Permanent", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458293116", "createdAt": "2020-07-21T18:10:13Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Permanently change</b></th>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4ODk3NQ=="}, "originalCommit": {"oid": "2f2dcb3325e0da5ff6a89546e0c5f05435f4cb8c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NDEzNQ==", "bodyText": "How about \"Update Active TraceConfig\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458294135", "createdAt": "2020-07-21T18:12:01Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Permanently change</b></th>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4ODk3NQ=="}, "originalCommit": {"oid": "2f2dcb3325e0da5ff6a89546e0c5f05435f4cb8c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NDM2Nw==", "bodyText": "also, if your service gets restarted, it'll go back to whatever it was before, so it's really not very Permanent. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458294367", "createdAt": "2020-07-21T18:12:26Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Permanently change</b></th>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4ODk3NQ=="}, "originalCommit": {"oid": "2f2dcb3325e0da5ff6a89546e0c5f05435f4cb8c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NDgzMA==", "bodyText": "\"Update active TraceConfig\" sounds perfect, thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458294830", "createdAt": "2020-07-21T18:13:16Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Permanently change</b></th>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4ODk3NQ=="}, "originalCommit": {"oid": "2f2dcb3325e0da5ff6a89546e0c5f05435f4cb8c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTg4NzY0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoxMToxM1rOG1EBnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoxMToxM1rOG1EBnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5MzY2MQ==", "bodyText": "I think this method should be at the bottom of the class, rather than stuck here in the middle of the html rendering.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458293661", "createdAt": "2020-07-21T18:11:13Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Permanently change</b></th>\");\n+    out.print(\"<th colspan=1 class=\\\"header-text border-left-white\\\"><b>Default</b></th>\");\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"SamplingProbability to\")\n+        .setParamName(QUERY_STRING_SAMPLING_PROBABILITY)\n+        .setInputPlaceHolder(\"[0.0, 1.0]\")\n+        .setParamDefaultValue(TraceConfig.getDefault().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributes to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES)\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfEvents to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_EVENTS)\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfLinks to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_LINKS)\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerEvent to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT)\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerLink to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK)\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits the active tracing parameters table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitActiveTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\"<th class=\\\"header-text\\\"><b>Name</b></th>\");\n+    out.print(\"<th class=\\\"header-text border-left-white\\\"><b>Value</b></th>\");\n+    out.print(\"</tr>\");\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"Sampler\")\n+        .setParamValue(this.tracerProvider.getActiveTraceConfig().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributes\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfEvents\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfLinks\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerEvent\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerLink\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Apply updated trace configuration through the tracerProvider based on query parameters.\n+   *\n+   * @param queryMap the map containing URL query parameters.\n+   */\n+  private void applyTraceConfig(Map<String, String> queryMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2dcb3325e0da5ff6a89546e0c5f05435f4cb8c"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIyNjE5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1MDo0NVrOG1HW0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1ODo1MlrOG1Hn_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0ODI0MQ==", "bodyText": "I'd move the builder definition down below all the abstract methods for the main class. Also, I think Builders can be done with an interface, rather than an abstract class, which makes things read much more cleanly, IMO.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458348241", "createdAt": "2020-07-21T19:50:45Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzActiveTableRow {\n+  @AutoValue.Builder\n+  public abstract static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c3f0ca7565c91717a11dcce08f6d4fd2848ba1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MDM2NA==", "bodyText": "Seems like all other classes using @AutoValue.Builder are also using class for Builder", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458350364", "createdAt": "2020-07-21T19:54:53Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzActiveTableRow {\n+  @AutoValue.Builder\n+  public abstract static class Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0ODI0MQ=="}, "originalCommit": {"oid": "73c3f0ca7565c91717a11dcce08f6d4fd2848ba1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MTgyMA==", "bodyText": "But it can be interface, which will make it cleaner for sure", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458351820", "createdAt": "2020-07-21T19:57:25Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzActiveTableRow {\n+  @AutoValue.Builder\n+  public abstract static class Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0ODI0MQ=="}, "originalCommit": {"oid": "73c3f0ca7565c91717a11dcce08f6d4fd2848ba1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjYzOQ==", "bodyText": "I don't feel super strongly about it...I just discovered it myself last week and like the way it makes the builders feel, as long as you don't need any fancy functionality in your builder class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458352639", "createdAt": "2020-07-21T19:58:52Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzActiveTableRow {\n+  @AutoValue.Builder\n+  public abstract static class Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0ODI0MQ=="}, "originalCommit": {"oid": "73c3f0ca7565c91717a11dcce08f6d4fd2848ba1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIzMjQ5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzChangeTableRow.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1MjozOVrOG1Haqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDowMDowNVrOG1Hqdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTIyNg==", "bodyText": "I think the pattern for this method in the rest of the project is newBuilder(), FWIW", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458349226", "createdAt": "2020-07-21T19:52:39Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzChangeTableRow.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzChangeTableRow {\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    abstract TraceConfigzChangeTableRow build();\n+\n+    /**\n+     * Set the print stream to emit HTML contents.\n+     *\n+     * @param out the {@link PrintStream} {@code out}.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setPrintStream(PrintStream out);\n+\n+    /**\n+     * Set the display name of the parameter the row corresponds to.\n+     *\n+     * @param rowName the display name of the parameter the row corresponds to.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setRowName(String rowName);\n+\n+    /**\n+     * Set the parameter name the row corresponds to.\n+     *\n+     * @param paramName the parameter name the row corresponds to (this will be used as URL query\n+     *     parameter, e.g. /traceconfigz?maxnumofattributes=30).\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setParamName(String paramName);\n+\n+    /**\n+     * Set the placeholder of the input element.\n+     *\n+     * @param inputPlaceholder the value of the placeholder.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setInputPlaceHolder(String inputPlaceholder);\n+\n+    /**\n+     * Set the default value of the parameter the row corresponds to.\n+     *\n+     * @param defaultValue the default value of the corresponding parameter.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setParamDefaultValue(String defaultValue);\n+\n+    /**\n+     * Set the background color for zebraStriping.\n+     *\n+     * @param zebraStripeColor the background color for zebraStriping.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setZebraStripeColor(String zebraStripeColor);\n+\n+    /**\n+     * Set the boolean for zebraStriping the row.\n+     *\n+     * @param zebraStripe the boolean for zebraStriping the row.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setZebraStripe(boolean zebraStripe);\n+\n+    Builder() {}\n+  }\n+\n+  static Builder builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c3f0ca7565c91717a11dcce08f6d4fd2848ba1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MTE1MA==", "bodyText": "Seems like some of them are using builder(), and some are using newBuilder()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458351150", "createdAt": "2020-07-21T19:56:15Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzChangeTableRow.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzChangeTableRow {\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    abstract TraceConfigzChangeTableRow build();\n+\n+    /**\n+     * Set the print stream to emit HTML contents.\n+     *\n+     * @param out the {@link PrintStream} {@code out}.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setPrintStream(PrintStream out);\n+\n+    /**\n+     * Set the display name of the parameter the row corresponds to.\n+     *\n+     * @param rowName the display name of the parameter the row corresponds to.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setRowName(String rowName);\n+\n+    /**\n+     * Set the parameter name the row corresponds to.\n+     *\n+     * @param paramName the parameter name the row corresponds to (this will be used as URL query\n+     *     parameter, e.g. /traceconfigz?maxnumofattributes=30).\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setParamName(String paramName);\n+\n+    /**\n+     * Set the placeholder of the input element.\n+     *\n+     * @param inputPlaceholder the value of the placeholder.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setInputPlaceHolder(String inputPlaceholder);\n+\n+    /**\n+     * Set the default value of the parameter the row corresponds to.\n+     *\n+     * @param defaultValue the default value of the corresponding parameter.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setParamDefaultValue(String defaultValue);\n+\n+    /**\n+     * Set the background color for zebraStriping.\n+     *\n+     * @param zebraStripeColor the background color for zebraStriping.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setZebraStripeColor(String zebraStripeColor);\n+\n+    /**\n+     * Set the boolean for zebraStriping the row.\n+     *\n+     * @param zebraStripe the boolean for zebraStriping the row.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setZebraStripe(boolean zebraStripe);\n+\n+    Builder() {}\n+  }\n+\n+  static Builder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTIyNg=="}, "originalCommit": {"oid": "73c3f0ca7565c91717a11dcce08f6d4fd2848ba1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjgwNg==", "bodyText": "I personally prefer builder() so I won't fight too hard on this.  :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458352806", "createdAt": "2020-07-21T19:59:12Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzChangeTableRow.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzChangeTableRow {\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    abstract TraceConfigzChangeTableRow build();\n+\n+    /**\n+     * Set the print stream to emit HTML contents.\n+     *\n+     * @param out the {@link PrintStream} {@code out}.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setPrintStream(PrintStream out);\n+\n+    /**\n+     * Set the display name of the parameter the row corresponds to.\n+     *\n+     * @param rowName the display name of the parameter the row corresponds to.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setRowName(String rowName);\n+\n+    /**\n+     * Set the parameter name the row corresponds to.\n+     *\n+     * @param paramName the parameter name the row corresponds to (this will be used as URL query\n+     *     parameter, e.g. /traceconfigz?maxnumofattributes=30).\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setParamName(String paramName);\n+\n+    /**\n+     * Set the placeholder of the input element.\n+     *\n+     * @param inputPlaceholder the value of the placeholder.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setInputPlaceHolder(String inputPlaceholder);\n+\n+    /**\n+     * Set the default value of the parameter the row corresponds to.\n+     *\n+     * @param defaultValue the default value of the corresponding parameter.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setParamDefaultValue(String defaultValue);\n+\n+    /**\n+     * Set the background color for zebraStriping.\n+     *\n+     * @param zebraStripeColor the background color for zebraStriping.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setZebraStripeColor(String zebraStripeColor);\n+\n+    /**\n+     * Set the boolean for zebraStriping the row.\n+     *\n+     * @param zebraStripe the boolean for zebraStriping the row.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setZebraStripe(boolean zebraStripe);\n+\n+    Builder() {}\n+  }\n+\n+  static Builder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTIyNg=="}, "originalCommit": {"oid": "73c3f0ca7565c91717a11dcce08f6d4fd2848ba1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MzI3MQ==", "bodyText": "I'll leave it as builder() for now then", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458353271", "createdAt": "2020-07-21T20:00:05Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzChangeTableRow.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzChangeTableRow {\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    abstract TraceConfigzChangeTableRow build();\n+\n+    /**\n+     * Set the print stream to emit HTML contents.\n+     *\n+     * @param out the {@link PrintStream} {@code out}.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setPrintStream(PrintStream out);\n+\n+    /**\n+     * Set the display name of the parameter the row corresponds to.\n+     *\n+     * @param rowName the display name of the parameter the row corresponds to.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setRowName(String rowName);\n+\n+    /**\n+     * Set the parameter name the row corresponds to.\n+     *\n+     * @param paramName the parameter name the row corresponds to (this will be used as URL query\n+     *     parameter, e.g. /traceconfigz?maxnumofattributes=30).\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setParamName(String paramName);\n+\n+    /**\n+     * Set the placeholder of the input element.\n+     *\n+     * @param inputPlaceholder the value of the placeholder.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setInputPlaceHolder(String inputPlaceholder);\n+\n+    /**\n+     * Set the default value of the parameter the row corresponds to.\n+     *\n+     * @param defaultValue the default value of the corresponding parameter.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setParamDefaultValue(String defaultValue);\n+\n+    /**\n+     * Set the background color for zebraStriping.\n+     *\n+     * @param zebraStripeColor the background color for zebraStriping.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setZebraStripeColor(String zebraStripeColor);\n+\n+    /**\n+     * Set the boolean for zebraStriping the row.\n+     *\n+     * @param zebraStripe the boolean for zebraStriping the row.\n+     * @return the {@link Builder}.\n+     */\n+    abstract Builder setZebraStripe(boolean zebraStripe);\n+\n+    Builder() {}\n+  }\n+\n+  static Builder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTIyNg=="}, "originalCommit": {"oid": "73c3f0ca7565c91717a11dcce08f6d4fd2848ba1"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTEzMjQ4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTo1MjoyNFrOG1P0zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTo1MjoyNFrOG1P0zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4Njk5MQ==", "bodyText": "Javadoc should describe the semantics of a class rather than implementatil details like Builder pattern. I guess this is something like \"Information to render for a single row of the change parameter table.\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458486991", "createdAt": "2020-07-22T01:52:24Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTEzMzczOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTo1MzowOFrOG1P1lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDowODo0OFrOG1kK9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4NzE5MA==", "bodyText": "The PrintStream doesn't have to do with the row, it's not conventional to make it a field like this. Instead, just make it a parameter to emitHtml", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458487190", "createdAt": "2020-07-22T01:53:08Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzActiveTableRow {\n+  abstract PrintStream printStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4ODUxMA==", "bodyText": "Though in general this pattern of defining data classes that don't actually get stored anywhere isn't idiomatic and is making the code harder to reason about. Is there an advantage to this approach vs just normal method? If the intent was to make the variable naming clearer at the call site, we have a pattern using comments that would achieve the same like this and uses way less code.\npublic static void emitActiveTableRow(\n  String paramName,\n  String paramValue,\n  String zebraStripeColor,\n  boolean zebraStripe,\n  PrintStream out);\n\n...\nemitActiveTableRow(\n  /* paramName= */ foo,\n  /* paramValue= */ bar\n ...", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458488510", "createdAt": "2020-07-22T01:57:39Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzActiveTableRow {\n+  abstract PrintStream printStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4NzE5MA=="}, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMDM0Mg==", "bodyText": "It was intended to make variable naming clearer, I'll switch to use the comments pattern to clean up the code", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458820342", "createdAt": "2020-07-22T14:08:48Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzActiveTableRow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.PrintStream;\n+\n+/** Builder pattern class for emiting a single row of the change parameter table. */\n+@AutoValue\n+abstract class TraceConfigzActiveTableRow {\n+  abstract PrintStream printStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4NzE5MA=="}, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTE1MzQxOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjowMzoyNVrOG1QBDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTozMDo0MlrOG1n6Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDEyNQ==", "bodyText": "I think we can add omitEmptyValues to the trimmer in parseQueryMap to avoid having to check here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458490125", "createdAt": "2020-07-22T02:03:25Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Update active TraceConfig</b></th>\");\n+    out.print(\"<th colspan=1 class=\\\"header-text border-left-white\\\"><b>Default</b></th>\");\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"SamplingProbability to\")\n+        .setParamName(QUERY_STRING_SAMPLING_PROBABILITY)\n+        .setInputPlaceHolder(\"[0.0, 1.0]\")\n+        .setParamDefaultValue(TraceConfig.getDefault().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributes to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfEvents to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_EVENTS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfLinks to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_LINKS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerEvent to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerLink to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits the active tracing parameters table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitActiveTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\"<th class=\\\"header-text\\\"><b>Name</b></th>\");\n+    out.print(\"<th class=\\\"header-text border-left-white\\\"><b>Value</b></th>\");\n+    out.print(\"</tr>\");\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"Sampler\")\n+        .setParamValue(this.tracerProvider.getActiveTraceConfig().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributes\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfEvents\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfLinks\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerEvent\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerLink\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits HTML body content to the {@link PrintStream} {@code out}. Content emitted by this\n+   * function should be enclosed by <body></body> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitHtmlBody(PrintStream out) {\n+    out.print(\n+        \"<a href=\\\"/\\\"><img style=\\\"height: 90px;\\\" src=\\\"data:image/png;base64,\"\n+            + ZPageLogo.getLogoBase64()\n+            + \"\\\" /></a>\");\n+    out.print(\"<h1>Trace Configuration</h1>\");\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_CHANGE + \"\\\" />\");\n+    emitChangeTable(out);\n+    // Button for submit\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Submit</button>\");\n+    out.print(\"</form>\");\n+    // Button for restore default\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_DEFAULT + \"\\\" />\");\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Restore Default</button>\");\n+    out.print(\"</form>\");\n+    out.print(\"<h2>Active Tracing Parameters</h2>\");\n+    emitActiveTable(out);\n+  }\n+\n+  @Override\n+  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+    // PrintStream for emiting HTML contents\n+    try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {\n+      out.print(\"<!DOCTYPE html>\");\n+      out.print(\"<html lang=\\\"en\\\">\");\n+      out.print(\"<head>\");\n+      out.print(\"<meta charset=\\\"UTF-8\\\">\");\n+      out.print(\n+          \"<link rel=\\\"shortcut icon\\\" href=\\\"data:image/png;base64,\"\n+              + ZPageLogo.getFaviconBase64()\n+              + \"\\\" type=\\\"image/png\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Open+Sans:300\\\"\"\n+              + \"rel=\\\"stylesheet\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Roboto\\\" rel=\\\"stylesheet\\\">\");\n+      out.print(\"<title>\" + TRACE_CONFIGZ_NAME + \"</title>\");\n+      emitHtmlStyle(out);\n+      out.print(\"</head>\");\n+      out.print(\"<body>\");\n+      try {\n+        // Apply updated trace configuration based on query parameters\n+        applyTraceConfig(queryMap);\n+        emitHtmlBody(out);\n+      } catch (Throwable t) {\n+        out.print(\"Error while generating HTML: \" + t.toString());\n+        logger.log(Level.WARNING, \"error while generating HTML\", t);\n+      }\n+      out.print(\"</body>\");\n+      out.print(\"</html>\");\n+    } catch (Throwable t) {\n+      logger.log(Level.WARNING, \"error while generating HTML\", t);\n+    }\n+  }\n+\n+  /**\n+   * Apply updated trace configuration through the tracerProvider based on query parameters.\n+   *\n+   * @param queryMap the map containing URL query parameters.\n+   */\n+  private void applyTraceConfig(Map<String, String> queryMap) {\n+    String action = queryMap.get(QUERY_STRING_ACTION);\n+    if (action == null) {\n+      return;\n+    }\n+    if (action.equals(QUERY_STRING_ACTION_CHANGE)) {\n+      TraceConfig.Builder newConfigBuilder = this.tracerProvider.getActiveTraceConfig().toBuilder();\n+      String samplingProbabilityStr = queryMap.get(QUERY_STRING_SAMPLING_PROBABILITY);\n+      if (samplingProbabilityStr != null && !samplingProbabilityStr.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3OTgyNQ==", "bodyText": "With omitEmptyValues(), isEmpty() check can be skipped, but not null check right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458879825", "createdAt": "2020-07-22T15:28:23Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Update active TraceConfig</b></th>\");\n+    out.print(\"<th colspan=1 class=\\\"header-text border-left-white\\\"><b>Default</b></th>\");\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"SamplingProbability to\")\n+        .setParamName(QUERY_STRING_SAMPLING_PROBABILITY)\n+        .setInputPlaceHolder(\"[0.0, 1.0]\")\n+        .setParamDefaultValue(TraceConfig.getDefault().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributes to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfEvents to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_EVENTS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfLinks to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_LINKS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerEvent to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerLink to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits the active tracing parameters table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitActiveTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\"<th class=\\\"header-text\\\"><b>Name</b></th>\");\n+    out.print(\"<th class=\\\"header-text border-left-white\\\"><b>Value</b></th>\");\n+    out.print(\"</tr>\");\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"Sampler\")\n+        .setParamValue(this.tracerProvider.getActiveTraceConfig().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributes\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfEvents\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfLinks\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerEvent\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerLink\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits HTML body content to the {@link PrintStream} {@code out}. Content emitted by this\n+   * function should be enclosed by <body></body> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitHtmlBody(PrintStream out) {\n+    out.print(\n+        \"<a href=\\\"/\\\"><img style=\\\"height: 90px;\\\" src=\\\"data:image/png;base64,\"\n+            + ZPageLogo.getLogoBase64()\n+            + \"\\\" /></a>\");\n+    out.print(\"<h1>Trace Configuration</h1>\");\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_CHANGE + \"\\\" />\");\n+    emitChangeTable(out);\n+    // Button for submit\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Submit</button>\");\n+    out.print(\"</form>\");\n+    // Button for restore default\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_DEFAULT + \"\\\" />\");\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Restore Default</button>\");\n+    out.print(\"</form>\");\n+    out.print(\"<h2>Active Tracing Parameters</h2>\");\n+    emitActiveTable(out);\n+  }\n+\n+  @Override\n+  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+    // PrintStream for emiting HTML contents\n+    try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {\n+      out.print(\"<!DOCTYPE html>\");\n+      out.print(\"<html lang=\\\"en\\\">\");\n+      out.print(\"<head>\");\n+      out.print(\"<meta charset=\\\"UTF-8\\\">\");\n+      out.print(\n+          \"<link rel=\\\"shortcut icon\\\" href=\\\"data:image/png;base64,\"\n+              + ZPageLogo.getFaviconBase64()\n+              + \"\\\" type=\\\"image/png\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Open+Sans:300\\\"\"\n+              + \"rel=\\\"stylesheet\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Roboto\\\" rel=\\\"stylesheet\\\">\");\n+      out.print(\"<title>\" + TRACE_CONFIGZ_NAME + \"</title>\");\n+      emitHtmlStyle(out);\n+      out.print(\"</head>\");\n+      out.print(\"<body>\");\n+      try {\n+        // Apply updated trace configuration based on query parameters\n+        applyTraceConfig(queryMap);\n+        emitHtmlBody(out);\n+      } catch (Throwable t) {\n+        out.print(\"Error while generating HTML: \" + t.toString());\n+        logger.log(Level.WARNING, \"error while generating HTML\", t);\n+      }\n+      out.print(\"</body>\");\n+      out.print(\"</html>\");\n+    } catch (Throwable t) {\n+      logger.log(Level.WARNING, \"error while generating HTML\", t);\n+    }\n+  }\n+\n+  /**\n+   * Apply updated trace configuration through the tracerProvider based on query parameters.\n+   *\n+   * @param queryMap the map containing URL query parameters.\n+   */\n+  private void applyTraceConfig(Map<String, String> queryMap) {\n+    String action = queryMap.get(QUERY_STRING_ACTION);\n+    if (action == null) {\n+      return;\n+    }\n+    if (action.equals(QUERY_STRING_ACTION_CHANGE)) {\n+      TraceConfig.Builder newConfigBuilder = this.tracerProvider.getActiveTraceConfig().toBuilder();\n+      String samplingProbabilityStr = queryMap.get(QUERY_STRING_SAMPLING_PROBABILITY);\n+      if (samplingProbabilityStr != null && !samplingProbabilityStr.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDEyNQ=="}, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4MTU2Mw==", "bodyText": "Yup sorry just meant the empty check", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458881563", "createdAt": "2020-07-22T15:30:42Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Update active TraceConfig</b></th>\");\n+    out.print(\"<th colspan=1 class=\\\"header-text border-left-white\\\"><b>Default</b></th>\");\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"SamplingProbability to\")\n+        .setParamName(QUERY_STRING_SAMPLING_PROBABILITY)\n+        .setInputPlaceHolder(\"[0.0, 1.0]\")\n+        .setParamDefaultValue(TraceConfig.getDefault().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributes to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfEvents to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_EVENTS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfLinks to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_LINKS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerEvent to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerLink to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits the active tracing parameters table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitActiveTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\"<th class=\\\"header-text\\\"><b>Name</b></th>\");\n+    out.print(\"<th class=\\\"header-text border-left-white\\\"><b>Value</b></th>\");\n+    out.print(\"</tr>\");\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"Sampler\")\n+        .setParamValue(this.tracerProvider.getActiveTraceConfig().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributes\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfEvents\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfLinks\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerEvent\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerLink\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits HTML body content to the {@link PrintStream} {@code out}. Content emitted by this\n+   * function should be enclosed by <body></body> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitHtmlBody(PrintStream out) {\n+    out.print(\n+        \"<a href=\\\"/\\\"><img style=\\\"height: 90px;\\\" src=\\\"data:image/png;base64,\"\n+            + ZPageLogo.getLogoBase64()\n+            + \"\\\" /></a>\");\n+    out.print(\"<h1>Trace Configuration</h1>\");\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_CHANGE + \"\\\" />\");\n+    emitChangeTable(out);\n+    // Button for submit\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Submit</button>\");\n+    out.print(\"</form>\");\n+    // Button for restore default\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_DEFAULT + \"\\\" />\");\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Restore Default</button>\");\n+    out.print(\"</form>\");\n+    out.print(\"<h2>Active Tracing Parameters</h2>\");\n+    emitActiveTable(out);\n+  }\n+\n+  @Override\n+  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+    // PrintStream for emiting HTML contents\n+    try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {\n+      out.print(\"<!DOCTYPE html>\");\n+      out.print(\"<html lang=\\\"en\\\">\");\n+      out.print(\"<head>\");\n+      out.print(\"<meta charset=\\\"UTF-8\\\">\");\n+      out.print(\n+          \"<link rel=\\\"shortcut icon\\\" href=\\\"data:image/png;base64,\"\n+              + ZPageLogo.getFaviconBase64()\n+              + \"\\\" type=\\\"image/png\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Open+Sans:300\\\"\"\n+              + \"rel=\\\"stylesheet\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Roboto\\\" rel=\\\"stylesheet\\\">\");\n+      out.print(\"<title>\" + TRACE_CONFIGZ_NAME + \"</title>\");\n+      emitHtmlStyle(out);\n+      out.print(\"</head>\");\n+      out.print(\"<body>\");\n+      try {\n+        // Apply updated trace configuration based on query parameters\n+        applyTraceConfig(queryMap);\n+        emitHtmlBody(out);\n+      } catch (Throwable t) {\n+        out.print(\"Error while generating HTML: \" + t.toString());\n+        logger.log(Level.WARNING, \"error while generating HTML\", t);\n+      }\n+      out.print(\"</body>\");\n+      out.print(\"</html>\");\n+    } catch (Throwable t) {\n+      logger.log(Level.WARNING, \"error while generating HTML\", t);\n+    }\n+  }\n+\n+  /**\n+   * Apply updated trace configuration through the tracerProvider based on query parameters.\n+   *\n+   * @param queryMap the map containing URL query parameters.\n+   */\n+  private void applyTraceConfig(Map<String, String> queryMap) {\n+    String action = queryMap.get(QUERY_STRING_ACTION);\n+    if (action == null) {\n+      return;\n+    }\n+    if (action.equals(QUERY_STRING_ACTION_CHANGE)) {\n+      TraceConfig.Builder newConfigBuilder = this.tracerProvider.getActiveTraceConfig().toBuilder();\n+      String samplingProbabilityStr = queryMap.get(QUERY_STRING_SAMPLING_PROBABILITY);\n+      if (samplingProbabilityStr != null && !samplingProbabilityStr.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDEyNQ=="}, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTE1NDA0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjowMzo1MlrOG1QBeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTowOTo1M1rOG1m-Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDIzNA==", "bodyText": "Catch exception for invalid double for all the parsing here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458490234", "createdAt": "2020-07-22T02:03:52Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Update active TraceConfig</b></th>\");\n+    out.print(\"<th colspan=1 class=\\\"header-text border-left-white\\\"><b>Default</b></th>\");\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"SamplingProbability to\")\n+        .setParamName(QUERY_STRING_SAMPLING_PROBABILITY)\n+        .setInputPlaceHolder(\"[0.0, 1.0]\")\n+        .setParamDefaultValue(TraceConfig.getDefault().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributes to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfEvents to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_EVENTS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfLinks to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_LINKS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerEvent to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerLink to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits the active tracing parameters table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitActiveTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\"<th class=\\\"header-text\\\"><b>Name</b></th>\");\n+    out.print(\"<th class=\\\"header-text border-left-white\\\"><b>Value</b></th>\");\n+    out.print(\"</tr>\");\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"Sampler\")\n+        .setParamValue(this.tracerProvider.getActiveTraceConfig().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributes\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfEvents\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfLinks\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerEvent\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerLink\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits HTML body content to the {@link PrintStream} {@code out}. Content emitted by this\n+   * function should be enclosed by <body></body> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitHtmlBody(PrintStream out) {\n+    out.print(\n+        \"<a href=\\\"/\\\"><img style=\\\"height: 90px;\\\" src=\\\"data:image/png;base64,\"\n+            + ZPageLogo.getLogoBase64()\n+            + \"\\\" /></a>\");\n+    out.print(\"<h1>Trace Configuration</h1>\");\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_CHANGE + \"\\\" />\");\n+    emitChangeTable(out);\n+    // Button for submit\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Submit</button>\");\n+    out.print(\"</form>\");\n+    // Button for restore default\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_DEFAULT + \"\\\" />\");\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Restore Default</button>\");\n+    out.print(\"</form>\");\n+    out.print(\"<h2>Active Tracing Parameters</h2>\");\n+    emitActiveTable(out);\n+  }\n+\n+  @Override\n+  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+    // PrintStream for emiting HTML contents\n+    try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {\n+      out.print(\"<!DOCTYPE html>\");\n+      out.print(\"<html lang=\\\"en\\\">\");\n+      out.print(\"<head>\");\n+      out.print(\"<meta charset=\\\"UTF-8\\\">\");\n+      out.print(\n+          \"<link rel=\\\"shortcut icon\\\" href=\\\"data:image/png;base64,\"\n+              + ZPageLogo.getFaviconBase64()\n+              + \"\\\" type=\\\"image/png\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Open+Sans:300\\\"\"\n+              + \"rel=\\\"stylesheet\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Roboto\\\" rel=\\\"stylesheet\\\">\");\n+      out.print(\"<title>\" + TRACE_CONFIGZ_NAME + \"</title>\");\n+      emitHtmlStyle(out);\n+      out.print(\"</head>\");\n+      out.print(\"<body>\");\n+      try {\n+        // Apply updated trace configuration based on query parameters\n+        applyTraceConfig(queryMap);\n+        emitHtmlBody(out);\n+      } catch (Throwable t) {\n+        out.print(\"Error while generating HTML: \" + t.toString());\n+        logger.log(Level.WARNING, \"error while generating HTML\", t);\n+      }\n+      out.print(\"</body>\");\n+      out.print(\"</html>\");\n+    } catch (Throwable t) {\n+      logger.log(Level.WARNING, \"error while generating HTML\", t);\n+    }\n+  }\n+\n+  /**\n+   * Apply updated trace configuration through the tracerProvider based on query parameters.\n+   *\n+   * @param queryMap the map containing URL query parameters.\n+   */\n+  private void applyTraceConfig(Map<String, String> queryMap) {\n+    String action = queryMap.get(QUERY_STRING_ACTION);\n+    if (action == null) {\n+      return;\n+    }\n+    if (action.equals(QUERY_STRING_ACTION_CHANGE)) {\n+      TraceConfig.Builder newConfigBuilder = this.tracerProvider.getActiveTraceConfig().toBuilder();\n+      String samplingProbabilityStr = queryMap.get(QUERY_STRING_SAMPLING_PROBABILITY);\n+      if (samplingProbabilityStr != null && !samplingProbabilityStr.isEmpty()) {\n+        double samplingProbability = Double.parseDouble(samplingProbabilityStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MjE4Mw==", "bodyText": "I have the following code when I call applyTraceConfig, which should catch the parse exceptions\ntry {\n        // Apply updated trace configuration based on query parameters\n        applyTraceConfig(queryMap);\n        emitHtmlBody(out);\n} catch (Throwable t) {\n        out.print(\"Error while generating HTML: \" + t.toString());\n        logger.log(Level.WARNING, \"error while generating HTML\", t);\n}", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458862183", "createdAt": "2020-07-22T15:04:24Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Update active TraceConfig</b></th>\");\n+    out.print(\"<th colspan=1 class=\\\"header-text border-left-white\\\"><b>Default</b></th>\");\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"SamplingProbability to\")\n+        .setParamName(QUERY_STRING_SAMPLING_PROBABILITY)\n+        .setInputPlaceHolder(\"[0.0, 1.0]\")\n+        .setParamDefaultValue(TraceConfig.getDefault().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributes to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfEvents to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_EVENTS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfLinks to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_LINKS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerEvent to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerLink to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits the active tracing parameters table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitActiveTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\"<th class=\\\"header-text\\\"><b>Name</b></th>\");\n+    out.print(\"<th class=\\\"header-text border-left-white\\\"><b>Value</b></th>\");\n+    out.print(\"</tr>\");\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"Sampler\")\n+        .setParamValue(this.tracerProvider.getActiveTraceConfig().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributes\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfEvents\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfLinks\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerEvent\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerLink\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits HTML body content to the {@link PrintStream} {@code out}. Content emitted by this\n+   * function should be enclosed by <body></body> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitHtmlBody(PrintStream out) {\n+    out.print(\n+        \"<a href=\\\"/\\\"><img style=\\\"height: 90px;\\\" src=\\\"data:image/png;base64,\"\n+            + ZPageLogo.getLogoBase64()\n+            + \"\\\" /></a>\");\n+    out.print(\"<h1>Trace Configuration</h1>\");\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_CHANGE + \"\\\" />\");\n+    emitChangeTable(out);\n+    // Button for submit\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Submit</button>\");\n+    out.print(\"</form>\");\n+    // Button for restore default\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_DEFAULT + \"\\\" />\");\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Restore Default</button>\");\n+    out.print(\"</form>\");\n+    out.print(\"<h2>Active Tracing Parameters</h2>\");\n+    emitActiveTable(out);\n+  }\n+\n+  @Override\n+  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+    // PrintStream for emiting HTML contents\n+    try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {\n+      out.print(\"<!DOCTYPE html>\");\n+      out.print(\"<html lang=\\\"en\\\">\");\n+      out.print(\"<head>\");\n+      out.print(\"<meta charset=\\\"UTF-8\\\">\");\n+      out.print(\n+          \"<link rel=\\\"shortcut icon\\\" href=\\\"data:image/png;base64,\"\n+              + ZPageLogo.getFaviconBase64()\n+              + \"\\\" type=\\\"image/png\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Open+Sans:300\\\"\"\n+              + \"rel=\\\"stylesheet\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Roboto\\\" rel=\\\"stylesheet\\\">\");\n+      out.print(\"<title>\" + TRACE_CONFIGZ_NAME + \"</title>\");\n+      emitHtmlStyle(out);\n+      out.print(\"</head>\");\n+      out.print(\"<body>\");\n+      try {\n+        // Apply updated trace configuration based on query parameters\n+        applyTraceConfig(queryMap);\n+        emitHtmlBody(out);\n+      } catch (Throwable t) {\n+        out.print(\"Error while generating HTML: \" + t.toString());\n+        logger.log(Level.WARNING, \"error while generating HTML\", t);\n+      }\n+      out.print(\"</body>\");\n+      out.print(\"</html>\");\n+    } catch (Throwable t) {\n+      logger.log(Level.WARNING, \"error while generating HTML\", t);\n+    }\n+  }\n+\n+  /**\n+   * Apply updated trace configuration through the tracerProvider based on query parameters.\n+   *\n+   * @param queryMap the map containing URL query parameters.\n+   */\n+  private void applyTraceConfig(Map<String, String> queryMap) {\n+    String action = queryMap.get(QUERY_STRING_ACTION);\n+    if (action == null) {\n+      return;\n+    }\n+    if (action.equals(QUERY_STRING_ACTION_CHANGE)) {\n+      TraceConfig.Builder newConfigBuilder = this.tracerProvider.getActiveTraceConfig().toBuilder();\n+      String samplingProbabilityStr = queryMap.get(QUERY_STRING_SAMPLING_PROBABILITY);\n+      if (samplingProbabilityStr != null && !samplingProbabilityStr.isEmpty()) {\n+        double samplingProbability = Double.parseDouble(samplingProbabilityStr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDIzNA=="}, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2NjIzNQ==", "bodyText": "A user won't know what's going on with a generic message like that, we should at least catch and rethrow with a message indicating which parameter is bad.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458866235", "createdAt": "2020-07-22T15:09:53Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumbofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Update active TraceConfig</b></th>\");\n+    out.print(\"<th colspan=1 class=\\\"header-text border-left-white\\\"><b>Default</b></th>\");\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"SamplingProbability to\")\n+        .setParamName(QUERY_STRING_SAMPLING_PROBABILITY)\n+        .setInputPlaceHolder(\"[0.0, 1.0]\")\n+        .setParamDefaultValue(TraceConfig.getDefault().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributes to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfEvents to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_EVENTS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfLinks to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_LINKS)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerEvent to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzChangeTableRow.builder()\n+        .setPrintStream(out)\n+        .setRowName(\"MaxNumberOfAttributesPerLink to\")\n+        .setParamName(QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK)\n+        .setInputPlaceHolder(\"\")\n+        .setParamDefaultValue(\n+            Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits the active tracing parameters table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitActiveTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\"<th class=\\\"header-text\\\"><b>Name</b></th>\");\n+    out.print(\"<th class=\\\"header-text border-left-white\\\"><b>Value</b></th>\");\n+    out.print(\"</tr>\");\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"Sampler\")\n+        .setParamValue(this.tracerProvider.getActiveTraceConfig().getSampler().getDescription())\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributes\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfEvents\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfLinks\")\n+        .setParamValue(\n+            Integer.toString(this.tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerEvent\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(false)\n+        .build()\n+        .emitHtml();\n+    TraceConfigzActiveTableRow.builder()\n+        .setPrintStream(out)\n+        .setParamName(\"MaxNumOfAttributesPerLink\")\n+        .setParamValue(\n+            Integer.toString(\n+                this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink()))\n+        .setZebraStripeColor(ZEBRA_STRIPE_COLOR)\n+        .setZebraStripe(true)\n+        .build()\n+        .emitHtml();\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits HTML body content to the {@link PrintStream} {@code out}. Content emitted by this\n+   * function should be enclosed by <body></body> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitHtmlBody(PrintStream out) {\n+    out.print(\n+        \"<a href=\\\"/\\\"><img style=\\\"height: 90px;\\\" src=\\\"data:image/png;base64,\"\n+            + ZPageLogo.getLogoBase64()\n+            + \"\\\" /></a>\");\n+    out.print(\"<h1>Trace Configuration</h1>\");\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_CHANGE + \"\\\" />\");\n+    emitChangeTable(out);\n+    // Button for submit\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Submit</button>\");\n+    out.print(\"</form>\");\n+    // Button for restore default\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_DEFAULT + \"\\\" />\");\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Restore Default</button>\");\n+    out.print(\"</form>\");\n+    out.print(\"<h2>Active Tracing Parameters</h2>\");\n+    emitActiveTable(out);\n+  }\n+\n+  @Override\n+  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+    // PrintStream for emiting HTML contents\n+    try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {\n+      out.print(\"<!DOCTYPE html>\");\n+      out.print(\"<html lang=\\\"en\\\">\");\n+      out.print(\"<head>\");\n+      out.print(\"<meta charset=\\\"UTF-8\\\">\");\n+      out.print(\n+          \"<link rel=\\\"shortcut icon\\\" href=\\\"data:image/png;base64,\"\n+              + ZPageLogo.getFaviconBase64()\n+              + \"\\\" type=\\\"image/png\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Open+Sans:300\\\"\"\n+              + \"rel=\\\"stylesheet\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Roboto\\\" rel=\\\"stylesheet\\\">\");\n+      out.print(\"<title>\" + TRACE_CONFIGZ_NAME + \"</title>\");\n+      emitHtmlStyle(out);\n+      out.print(\"</head>\");\n+      out.print(\"<body>\");\n+      try {\n+        // Apply updated trace configuration based on query parameters\n+        applyTraceConfig(queryMap);\n+        emitHtmlBody(out);\n+      } catch (Throwable t) {\n+        out.print(\"Error while generating HTML: \" + t.toString());\n+        logger.log(Level.WARNING, \"error while generating HTML\", t);\n+      }\n+      out.print(\"</body>\");\n+      out.print(\"</html>\");\n+    } catch (Throwable t) {\n+      logger.log(Level.WARNING, \"error while generating HTML\", t);\n+    }\n+  }\n+\n+  /**\n+   * Apply updated trace configuration through the tracerProvider based on query parameters.\n+   *\n+   * @param queryMap the map containing URL query parameters.\n+   */\n+  private void applyTraceConfig(Map<String, String> queryMap) {\n+    String action = queryMap.get(QUERY_STRING_ACTION);\n+    if (action == null) {\n+      return;\n+    }\n+    if (action.equals(QUERY_STRING_ACTION_CHANGE)) {\n+      TraceConfig.Builder newConfigBuilder = this.tracerProvider.getActiveTraceConfig().toBuilder();\n+      String samplingProbabilityStr = queryMap.get(QUERY_STRING_SAMPLING_PROBABILITY);\n+      if (samplingProbabilityStr != null && !samplingProbabilityStr.isEmpty()) {\n+        double samplingProbability = Double.parseDouble(samplingProbabilityStr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDIzNA=="}, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTE1Nzc2OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjowNTo0M1rOG1QDiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjowNTo0M1rOG1QDiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDc2MA==", "bodyText": "Make sure to add tests for invalid values too", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r458490760", "createdAt": "2020-07-22T02:05:43Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link TraceConfigzZPageHandler}. */\n+@RunWith(JUnit4.class)\n+public final class TraceConfigzZPageHandlerTest {\n+  private static final TracerSdkProvider tracerProvider = OpenTelemetrySdk.getTracerProvider();\n+  private static final Map<String, String> emptyQueryMap = ImmutableMap.of();\n+\n+  @Test\n+  public void changeTable_emitRowsCorrectly() {\n+    OutputStream output = new ByteArrayOutputStream();\n+    String querySamplingProbability = \"samplingprobability\";\n+    String queryMaxNumOfAttributes = \"maxnumofattributes\";\n+    String queryMaxNumOfEvents = \"maxnumbofevents\";\n+    String queryMaxNumOfLinks = \"maxnumoflinks\";\n+    String queryMaxNumOfAttributesPerEvent = \"maxnumofattributesperevent\";\n+    String queryMaxNumOfAttributesPerLink = \"maxnumofattributesperlink\";\n+\n+    TraceConfigzZPageHandler traceConfigzZPageHandler =\n+        new TraceConfigzZPageHandler(tracerProvider);\n+    traceConfigzZPageHandler.emitHtml(emptyQueryMap, output);\n+\n+    assertThat(output.toString()).contains(\"SamplingProbability to\");\n+    assertThat(output.toString()).contains(\"name=\" + querySamplingProbability);\n+    assertThat(output.toString())\n+        .contains(\"(\" + TraceConfig.getDefault().getSampler().getDescription() + \")\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfAttributes to\");\n+    assertThat(output.toString()).contains(\"name=\" + queryMaxNumOfAttributes);\n+    assertThat(output.toString())\n+        .contains(\n+            \"(\" + Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributes()) + \")\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfEvents to\");\n+    assertThat(output.toString()).contains(\"name=\" + queryMaxNumOfEvents);\n+    assertThat(output.toString())\n+        .contains(\"(\" + Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()) + \")\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfLinks to\");\n+    assertThat(output.toString()).contains(\"name=\" + queryMaxNumOfLinks);\n+    assertThat(output.toString())\n+        .contains(\"(\" + Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()) + \")\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfAttributesPerEvent to\");\n+    assertThat(output.toString()).contains(\"name=\" + queryMaxNumOfAttributesPerEvent);\n+    assertThat(output.toString())\n+        .contains(\n+            \"(\"\n+                + Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent())\n+                + \")\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfAttributesPerLink to\");\n+    assertThat(output.toString()).contains(\"name=\" + queryMaxNumOfAttributesPerLink);\n+    assertThat(output.toString())\n+        .contains(\n+            \"(\"\n+                + Integer.toString(TraceConfig.getDefault().getMaxNumberOfAttributesPerLink())\n+                + \")\");\n+  }\n+\n+  @Test\n+  public void activeTable_emitRowsCorrectly() {\n+    OutputStream output = new ByteArrayOutputStream();\n+\n+    TraceConfigzZPageHandler traceConfigzZPageHandler =\n+        new TraceConfigzZPageHandler(tracerProvider);\n+    traceConfigzZPageHandler.emitHtml(emptyQueryMap, output);\n+\n+    assertThat(output.toString()).contains(\"Sampler\");\n+    assertThat(output.toString())\n+        .contains(\">\" + tracerProvider.getActiveTraceConfig().getSampler().getDescription() + \"<\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfAttributes\");\n+    assertThat(output.toString())\n+        .contains(\n+            \">\"\n+                + Integer.toString(tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes())\n+                + \"<\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfEvents\");\n+    assertThat(output.toString())\n+        .contains(\n+            \">\"\n+                + Integer.toString(tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents())\n+                + \"<\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfLinks\");\n+    assertThat(output.toString())\n+        .contains(\n+            \">\"\n+                + Integer.toString(tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks())\n+                + \"<\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfAttributesPerEvent\");\n+    assertThat(output.toString())\n+        .contains(\n+            \">\"\n+                + Integer.toString(\n+                    tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent())\n+                + \"<\");\n+    assertThat(output.toString()).contains(\"MaxNumberOfAttributesPerLink\");\n+    assertThat(output.toString())\n+        .contains(\n+            \">\"\n+                + Integer.toString(\n+                    tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink())\n+                + \"<\");\n+  }\n+\n+  @Test\n+  public void appliesChangesCorrectly_formSubmit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93c97b309b900de71724a0c30a487a0df09a1eea"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU3NTI5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoyNTo0MFrOG16V7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoyNTo0MFrOG16V7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MzU5Nw==", "bodyText": "Use pattern throw new IllegalArgumentException(\"Foo must be bar\", e) for all", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1441#discussion_r459183597", "createdAt": "2020-07-23T02:25:40Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+final class TraceConfigzZPageHandler extends ZPageHandler {\n+  private static final String TRACE_CONFIGZ_URL = \"/traceconfigz\";\n+  private static final String TRACE_CONFIGZ_NAME = \"TraceConfigZ\";\n+  private static final String TRACE_CONFIGZ_DESCRIPTION =\n+      \"TraceConfigZ displays information about the current active tracing configuration\"\n+          + \" and allows users to change it\";\n+  private static final String QUERY_STRING_ACTION = \"action\";\n+  private static final String QUERY_STRING_ACTION_CHANGE = \"change\";\n+  private static final String QUERY_STRING_ACTION_DEFAULT = \"default\";\n+  private static final String QUERY_STRING_SAMPLING_PROBABILITY = \"samplingprobability\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES = \"maxnumofattributes\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_EVENTS = \"maxnumofevents\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_LINKS = \"maxnumoflinks\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT =\n+      \"maxnumofattributesperevent\";\n+  private static final String QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK =\n+      \"maxnumofattributesperlink\";\n+  // Background color used for zebra striping rows in table\n+  private static final String ZEBRA_STRIPE_COLOR = \"#e6e6e6\";\n+  private static final Logger logger = Logger.getLogger(TraceConfigzZPageHandler.class.getName());\n+  private final TracerSdkProvider tracerProvider;\n+\n+  TraceConfigzZPageHandler(TracerSdkProvider tracerProvider) {\n+    this.tracerProvider = tracerProvider;\n+  }\n+\n+  @Override\n+  public String getUrlPath() {\n+    return TRACE_CONFIGZ_URL;\n+  }\n+\n+  @Override\n+  public String getPageName() {\n+    return TRACE_CONFIGZ_NAME;\n+  }\n+\n+  @Override\n+  public String getPageDescription() {\n+    return TRACE_CONFIGZ_DESCRIPTION;\n+  }\n+\n+  /**\n+   * Emits CSS styles to the {@link PrintStream} {@code out}. Content emited by this function should\n+   * be enclosed by <head></head> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitHtmlStyle(PrintStream out) {\n+    out.print(\"<style>\");\n+    out.print(ZPageStyle.style);\n+    out.print(\"</style>\");\n+  }\n+\n+  /**\n+   * Emits a row of the change tracing parameter table to the {@link PrintStream} {@code out}. Each\n+   * row corresponds to one tracing parameter.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   * @param rowName the display name of the corresponding tracing parameter.\n+   * @param paramName the name of the corresponding tracing parameter (this will be used to\n+   *     construct the query parameter in URL).\n+   * @param inputPlaceHolder placeholder for the <input> HTML element.\n+   * @param paramDefaultValue the default value of the corresponding tracing parameter.\n+   * @param zebraStripeColor hex code of the color used for zebra striping rows.\n+   * @param zebraStripe boolean indicating if the row is zebra striped.\n+   */\n+  private static void emitChangeTableRow(\n+      PrintStream out,\n+      String rowName,\n+      String paramName,\n+      String inputPlaceHolder,\n+      String paramDefaultValue,\n+      String zebraStripeColor,\n+      boolean zebraStripe) {\n+    if (zebraStripe) {\n+      out.print(\"<tr style=\\\"background-color: \" + zebraStripeColor + \";\\\">\");\n+    } else {\n+      out.print(\"<tr>\");\n+    }\n+    out.print(\"<td>Update \" + rowName + \"</td>\");\n+    out.print(\n+        \"<td class=\\\"border-left-dark\\\"><input type=text size=15 name=\"\n+            + paramName\n+            + \" value=\\\"\\\" placeholder=\\\"\"\n+            + inputPlaceHolder\n+            + \"\\\" /></td>\");\n+    out.print(\"<td class=\\\"border-left-dark\\\">(\" + paramDefaultValue + \")</td>\");\n+    out.print(\"</tr>\");\n+  }\n+\n+  /**\n+   * Emits the change tracing parameter table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private static void emitChangeTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\n+        \"<th colspan=2 style=\\\"text-align: left;\\\" class=\\\"header-text\\\">\"\n+            + \"<b>Update active TraceConfig</b></th>\");\n+    out.print(\"<th colspan=1 class=\\\"header-text border-left-white\\\"><b>Default</b></th>\");\n+    emitChangeTableRow(\n+        /* out= */ out,\n+        /* rowName= */ \"SamplingProbability to\",\n+        /* paramName= */ QUERY_STRING_SAMPLING_PROBABILITY,\n+        /* inputPlaceHolder= */ \"[0.0, 1.0]\",\n+        /* paramDefaultValue= */ TraceConfig.getDefault().getSampler().getDescription(),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ false);\n+    emitChangeTableRow(\n+        /* out= */ out,\n+        /* rowName= */ \"MaxNumberOfAttributes to\",\n+        /* paramName= */ QUERY_STRING_MAX_NUM_OF_ATTRIBUTES,\n+        /* inputPlaceHolder= */ \"\",\n+        /* paramDefaultValue= */ Integer.toString(\n+            TraceConfig.getDefault().getMaxNumberOfAttributes()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ true);\n+    emitChangeTableRow(\n+        /* out= */ out,\n+        /* rowName= */ \"MaxNumberOfEvents to\",\n+        /* paramName= */ QUERY_STRING_MAX_NUM_OF_EVENTS,\n+        /* inputPlaceHolder= */ \"\",\n+        /* paramDefaultValue= */ Integer.toString(TraceConfig.getDefault().getMaxNumberOfEvents()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ false);\n+    emitChangeTableRow(\n+        /* out= */ out,\n+        /* rowName= */ \"MaxNumberOfLinks to\",\n+        /* paramName= */ QUERY_STRING_MAX_NUM_OF_LINKS,\n+        /* inputPlaceHolder= */ \"\",\n+        /* paramDefaultValue= */ Integer.toString(TraceConfig.getDefault().getMaxNumberOfLinks()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ true);\n+    emitChangeTableRow(\n+        /* out= */ out,\n+        /* rowName= */ \"MaxNumberOfAttributesPerEvent to\",\n+        /* paramName= */ QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_EVENT,\n+        /* inputPlaceHolder= */ \"\",\n+        /* paramDefaultValue= */ Integer.toString(\n+            TraceConfig.getDefault().getMaxNumberOfAttributesPerEvent()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ false);\n+    emitChangeTableRow(\n+        /* out= */ out,\n+        /* rowName= */ \"MaxNumberOfAttributesPerLink to\",\n+        /* paramName= */ QUERY_STRING_MAX_NUM_OF_ATTRIBUTES_PER_LINK,\n+        /* inputPlaceHolder= */ \"\",\n+        /* paramDefaultValue= */ Integer.toString(\n+            TraceConfig.getDefault().getMaxNumberOfAttributesPerLink()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ true);\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits a row of the active tracing parameter table to the {@link PrintStream} {@code out}. Each\n+   * row corresponds to one tracing parameter.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   * @param paramName the name of the corresponding tracing parameter.\n+   * @param paramValue the value of the corresponding tracing parameter.\n+   * @param zebraStripeColor hex code of the color used for zebra striping rows.\n+   * @param zebraStripe boolean indicating if the row is zebra striped.\n+   */\n+  private static void emitActiveTableRow(\n+      PrintStream out,\n+      String paramName,\n+      String paramValue,\n+      String zebraStripeColor,\n+      boolean zebraStripe) {\n+    if (zebraStripe) {\n+      out.print(\"<tr style=\\\"background-color: \" + zebraStripeColor + \";\\\">\");\n+    } else {\n+      out.print(\"<tr>\");\n+    }\n+    out.print(\"<td>\" + paramName + \"</td>\");\n+    out.print(\"<td class=\\\"border-left-dark\\\">\" + paramValue + \"</td>\");\n+    out.print(\"</tr>\");\n+  }\n+\n+  /**\n+   * Emits the active tracing parameters table to the {@link PrintStream} {@code out}.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitActiveTable(PrintStream out) {\n+    out.print(\"<table style=\\\"border-spacing: 0; border: 1px solid #363636;\\\">\");\n+    out.print(\"<tr class=\\\"bg-color\\\">\");\n+    out.print(\"<th class=\\\"header-text\\\"><b>Name</b></th>\");\n+    out.print(\"<th class=\\\"header-text border-left-white\\\"><b>Value</b></th>\");\n+    out.print(\"</tr>\");\n+    emitActiveTableRow(\n+        /* out= */ out,\n+        /* paramName= */ \"Sampler\",\n+        /* paramValue=*/ this.tracerProvider.getActiveTraceConfig().getSampler().getDescription(),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ false);\n+    emitActiveTableRow(\n+        /* out= */ out,\n+        /* paramName= */ \"MaxNumOfAttributes\",\n+        /* paramValue=*/ Integer.toString(\n+            this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributes()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ true);\n+    emitActiveTableRow(\n+        /* out= */ out,\n+        /* paramName= */ \"MaxNumOfEvents\",\n+        /* paramValue=*/ Integer.toString(\n+            this.tracerProvider.getActiveTraceConfig().getMaxNumberOfEvents()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ false);\n+    emitActiveTableRow(\n+        /* out= */ out,\n+        /* paramName= */ \"MaxNumOfLinks\",\n+        /* paramValue=*/ Integer.toString(\n+            this.tracerProvider.getActiveTraceConfig().getMaxNumberOfLinks()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ true);\n+    emitActiveTableRow(\n+        /* out= */ out,\n+        /* paramName= */ \"MaxNumOfAttributesPerEvent\",\n+        /* paramValue=*/ Integer.toString(\n+            this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerEvent()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe= */ false);\n+    emitActiveTableRow(\n+        /* out= */ out,\n+        /* paramName= */ \"MaxNumOfAttributesPerLink\",\n+        /* paramValue=*/ Integer.toString(\n+            this.tracerProvider.getActiveTraceConfig().getMaxNumberOfAttributesPerLink()),\n+        /* zebraStripeColor= */ ZEBRA_STRIPE_COLOR,\n+        /* zebraStripe=*/ true);\n+    out.print(\"</table>\");\n+  }\n+\n+  /**\n+   * Emits HTML body content to the {@link PrintStream} {@code out}. Content emitted by this\n+   * function should be enclosed by <body></body> tag.\n+   *\n+   * @param out the {@link PrintStream} {@code out}.\n+   */\n+  private void emitHtmlBody(PrintStream out) {\n+    out.print(\n+        \"<a href=\\\"/\\\"><img style=\\\"height: 90px;\\\" src=\\\"data:image/png;base64,\"\n+            + ZPageLogo.getLogoBase64()\n+            + \"\\\" /></a>\");\n+    out.print(\"<h1>Trace Configuration</h1>\");\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_CHANGE + \"\\\" />\");\n+    emitChangeTable(out);\n+    // Button for submit\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Submit</button>\");\n+    out.print(\"</form>\");\n+    // Button for restore default\n+    out.print(\"<form class=\\\"form-flex\\\" action=\\\"\" + TRACE_CONFIGZ_URL + \"\\\" method=\\\"get\\\">\");\n+    out.print(\n+        \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"\" + QUERY_STRING_ACTION_DEFAULT + \"\\\" />\");\n+    out.print(\"<button class=\\\"button\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Restore Default</button>\");\n+    out.print(\"</form>\");\n+    out.print(\"<h2>Active Tracing Parameters</h2>\");\n+    emitActiveTable(out);\n+  }\n+\n+  @Override\n+  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+    // PrintStream for emiting HTML contents\n+    try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {\n+      out.print(\"<!DOCTYPE html>\");\n+      out.print(\"<html lang=\\\"en\\\">\");\n+      out.print(\"<head>\");\n+      out.print(\"<meta charset=\\\"UTF-8\\\">\");\n+      out.print(\n+          \"<link rel=\\\"shortcut icon\\\" href=\\\"data:image/png;base64,\"\n+              + ZPageLogo.getFaviconBase64()\n+              + \"\\\" type=\\\"image/png\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Open+Sans:300\\\"\"\n+              + \"rel=\\\"stylesheet\\\">\");\n+      out.print(\n+          \"<link href=\\\"https://fonts.googleapis.com/css?family=Roboto\\\" rel=\\\"stylesheet\\\">\");\n+      out.print(\"<title>\" + TRACE_CONFIGZ_NAME + \"</title>\");\n+      emitHtmlStyle(out);\n+      out.print(\"</head>\");\n+      out.print(\"<body>\");\n+      try {\n+        // Apply updated trace configuration based on query parameters\n+        applyTraceConfig(queryMap);\n+        emitHtmlBody(out);\n+      } catch (Throwable t) {\n+        out.print(\"Error while generating HTML: \" + t.toString());\n+        logger.log(Level.WARNING, \"error while generating HTML\", t);\n+      }\n+      out.print(\"</body>\");\n+      out.print(\"</html>\");\n+    } catch (Throwable t) {\n+      logger.log(Level.WARNING, \"error while generating HTML\", t);\n+    }\n+  }\n+\n+  /**\n+   * Apply updated trace configuration through the tracerProvider based on query parameters.\n+   *\n+   * @param queryMap the map containing URL query parameters.\n+   * @throws NumberFormatException if one of the {@code double}/{@code integer} valued query string\n+   *     does not contain a parsable {@code double}/{@code integer}.\n+   */\n+  private void applyTraceConfig(Map<String, String> queryMap) {\n+    String action = queryMap.get(QUERY_STRING_ACTION);\n+    if (action == null) {\n+      return;\n+    }\n+    if (action.equals(QUERY_STRING_ACTION_CHANGE)) {\n+      TraceConfig.Builder newConfigBuilder = this.tracerProvider.getActiveTraceConfig().toBuilder();\n+      String samplingProbabilityStr = queryMap.get(QUERY_STRING_SAMPLING_PROBABILITY);\n+      if (samplingProbabilityStr != null) {\n+        try {\n+          double samplingProbability = Double.parseDouble(samplingProbabilityStr);\n+          if (samplingProbability == 0) {\n+            newConfigBuilder.setSampler(Samplers.alwaysOff());\n+          } else if (samplingProbability == 1) {\n+            newConfigBuilder.setSampler(Samplers.alwaysOn());\n+          } else {\n+            newConfigBuilder.setSampler(Samplers.probability(samplingProbability));\n+          }\n+        } catch (NumberFormatException e) {\n+          throw new NumberFormatException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf8a6b58464b877f104a623f264a654e60f4b28"}, "originalPosition": 356}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1512, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}