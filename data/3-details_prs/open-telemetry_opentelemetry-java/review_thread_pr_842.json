{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjk3NzI1", "number": 842, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDoyNDowMVrODe8ubg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxODozNlrODfTSoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzc4Nzk4OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDoyNDowMVrOFoX0cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowNDozMlrOFo4-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NzYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Abstract class that extends the functionality of the BoundInstrument.\n          \n          \n            \n             * Abstract class that implements the basic functionality of the BoundInstrument.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r377877619", "createdAt": "2020-02-11T20:24:01Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -17,35 +17,64 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.InstrumentWithBinding.BoundInstrument;\n-import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+/**\n+ * Abstract class that extends the functionality of the BoundInstrument.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2bb46c586dd8767f5cb329f9777c730a591a24f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMDgzNw==", "bodyText": "done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r378420837", "createdAt": "2020-02-12T18:04:32Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -17,35 +17,64 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.InstrumentWithBinding.BoundInstrument;\n-import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+/**\n+ * Abstract class that extends the functionality of the BoundInstrument.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NzYxOQ=="}, "originalCommit": {"oid": "c2bb46c586dd8767f5cb329f9777c730a591a24f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzgyMzc0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDozNTo1NVrOFoYKwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMTo0OVrOFo6zpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MzMzMA==", "bodyText": "why did you stop passing in the labelset?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r377883330", "createdAt": "2020-02-11T20:35:55Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -38,14 +38,14 @@ private DoubleCounterSdk(\n \n   @Override\n   public void add(double delta, LabelSet labelSet) {\n-    BoundDoubleCounter boundDoubleCounter = bind(labelSet);\n-    boundDoubleCounter.add(delta);\n-    boundDoubleCounter.unbind();\n+    BoundInstrument boundInstrument = bind(labelSet);\n+    boundInstrument.add(delta);\n+    boundInstrument.unbind();\n   }\n \n   @Override\n-  public BoundDoubleCounter bind(LabelSet labelSet) {\n-    return new BoundInstrument(labelSet, monotonic);\n+  public BoundInstrument bind(LabelSet labelSet) {\n+    return new BoundInstrument(monotonic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2bb46c586dd8767f5cb329f9777c730a591a24f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MDg1Mg==", "bodyText": "The mapping between LabelSet and bound will be in the AbstractInstrumentWithBinding (from #831 ) so unnecessary memory usage in the Bound to also keep a reference to the LabelSet.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r378450852", "createdAt": "2020-02-12T19:01:49Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -38,14 +38,14 @@ private DoubleCounterSdk(\n \n   @Override\n   public void add(double delta, LabelSet labelSet) {\n-    BoundDoubleCounter boundDoubleCounter = bind(labelSet);\n-    boundDoubleCounter.add(delta);\n-    boundDoubleCounter.unbind();\n+    BoundInstrument boundInstrument = bind(labelSet);\n+    boundInstrument.add(delta);\n+    boundInstrument.unbind();\n   }\n \n   @Override\n-  public BoundDoubleCounter bind(LabelSet labelSet) {\n-    return new BoundInstrument(labelSet, monotonic);\n+  public BoundInstrument bind(LabelSet labelSet) {\n+    return new BoundInstrument(monotonic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MzMzMA=="}, "originalCommit": {"oid": "c2bb46c586dd8767f5cb329f9777c730a591a24f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQ4NTEzOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxODozNlrOFo7WUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToyNjowOFrOFo7l_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1OTcyOA==", "bodyText": "don't we need to be passing the labelset in to the ABI here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r378459728", "createdAt": "2020-02-12T19:18:36Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -73,13 +73,12 @@ public int hashCode() {\n     return result;\n   }\n \n-  private static final class BoundInstrument extends AbstractBoundInstrument\n-      implements BoundDoubleCounter {\n+  static final class BoundInstrument extends AbstractBoundInstrument implements BoundDoubleCounter {\n \n     private final boolean monotonic;\n \n-    BoundInstrument(LabelSet labelSet, boolean monotonic) {\n-      super(labelSet);\n+    BoundInstrument(boolean monotonic) {\n+      super(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "219d1febce2c7310ee1db5a4eae7e1a748e1444c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2Mzc0Mw==", "bodyText": "This is now the aggregation, will pass in a later PR :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r378463743", "createdAt": "2020-02-12T19:26:08Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -73,13 +73,12 @@ public int hashCode() {\n     return result;\n   }\n \n-  private static final class BoundInstrument extends AbstractBoundInstrument\n-      implements BoundDoubleCounter {\n+  static final class BoundInstrument extends AbstractBoundInstrument implements BoundDoubleCounter {\n \n     private final boolean monotonic;\n \n-    BoundInstrument(LabelSet labelSet, boolean monotonic) {\n-      super(labelSet);\n+    BoundInstrument(boolean monotonic) {\n+      super(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1OTcyOA=="}, "originalCommit": {"oid": "219d1febce2c7310ee1db5a4eae7e1a748e1444c"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1080, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}