{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1Njc3NzEx", "number": 1193, "title": "Fix getTracerLower behavior", "bodyText": "This resolves #1190\nSince the method is marked as internal, I also followed the suggestion proposed in the last SIG call and rename it to getTraceRandomPart()", "createdAt": "2020-05-10T06:45:27Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193", "merged": true, "mergeCommit": {"oid": "cd041c9d3041f4dceb73e88498ab7ad48dd5a1ac"}, "closed": true, "closedAt": "2020-05-11T18:21:15Z", "author": {"login": "thisthat"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcf1TSNAH2gAyNDE1Njc3NzExOmUyOTJjNjc3OWEwZDU2YWIxZTY5OGYwMjRmNTQ3ZmMzZGY5YTNkNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgRFpogFqTQwOTI2MTkxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e292c6779a0d56ab1e698f024f547fc3df9a3d50", "committedDate": "2020-05-10T06:43:46Z", "message": "Fix getTracerLower behavior"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzUxNDQy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#pullrequestreview-408751442", "createdAt": "2020-05-10T14:39:27Z", "commit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDozOToyN1rOGTExaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNTowNTowN1rOGTE9mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDMxNQ==", "bodyText": "Update comment?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422654315", "createdAt": "2020-05-10T14:39:27Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -210,8 +210,8 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the lower 8 bytes of the trace-id as a long value, assuming little-endian order.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDQ4OQ==", "bodyText": "Not sure I understand this logic? Do we have a test for this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422654489", "createdAt": "2020-05-10T14:40:47Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -210,8 +210,8 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the lower 8 bytes of the trace-id as a long value, assuming little-endian order.\n    */\n-  public long getLowerLong() {\n-    return (idHi < 0) ? -idHi : idHi;\n+  public long getTraceRandomPart() {\n+    return (idLo < 0) ? -idLo : idLo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDU1Ng==", "bodyText": "s/testCorrectGetRandomTracePart/getRandomTracePart\nWe usually should test the \"correct\" thing :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422654556", "createdAt": "2020-05-10T14:41:24Z", "author": {"login": "bogdandrutu"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "diffHunk": "@@ -50,9 +50,13 @@ public void isValid() {\n   }\n \n   @Test\n-  public void getLowerLong() {\n-    assertThat(first.getLowerLong()).isEqualTo(0);\n-    assertThat(second.getLowerLong()).isEqualTo(-0xFF00000000000000L);\n+  public void testCorrectGetRandomTracePart() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NzQzNQ==", "bodyText": "We need to make sure every library applies the same logic and extract correctly the random part. This is important because if 2 libraries are configured with the same probability we need both to sample or not sample a given trace id.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422657435", "createdAt": "2020-05-10T15:05:07Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -210,7 +210,7 @@ public final Decision shouldSample(\n       // while allowing for a (very) small chance of *not* sampling if the id == Long.MAX_VALUE.\n       // This is considered a reasonable tradeoff for the simplicity/performance requirements (this\n       // code is executed in-line for every Span creation).\n-      return Math.abs(traceId.getLowerLong()) < getIdUpperBound()\n+      return Math.abs(traceId.getTraceRandomPart()) < getIdUpperBound()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzU0Mjky", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#pullrequestreview-408754292", "createdAt": "2020-05-10T15:13:10Z", "commit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNToxMzoxMFrOGTFBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNToxMzoxMFrOGTFBbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1ODQxNQ==", "bodyText": "It took me few minutes to check that this is the correct expectation, I would suggest to put a 0 in front of the 9 so having something like 0x090A0B0C0D0E0F00L so I have 16 hex characters and also a easier way to map every 2 hex characters from here to the bytes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422658415", "createdAt": "2020-05-10T15:13:10Z", "author": {"login": "bogdandrutu"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "diffHunk": "@@ -50,9 +50,13 @@ public void isValid() {\n   }\n \n   @Test\n-  public void getLowerLong() {\n-    assertThat(first.getLowerLong()).isEqualTo(0);\n-    assertThat(second.getLowerLong()).isEqualTo(-0xFF00000000000000L);\n+  public void testCorrectGetRandomTracePart() {\n+    byte[] id = {\n+      0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0\n+    };\n+    TraceId traceid = TraceId.fromBytes(id, 0);\n+    assertThat(traceid.getTraceRandomPart()).isEqualTo(0x90A0B0C0D0E0F00L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6123205b71ddace2f1a46af4231c6305f180284", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a6123205b71ddace2f1a46af4231c6305f180284", "committedDate": "2020-05-11T06:00:20Z", "message": "Add test for negative trace representation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MjU3Njky", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#pullrequestreview-409257692", "createdAt": "2020-05-11T15:01:44Z", "commit": {"oid": "a6123205b71ddace2f1a46af4231c6305f180284"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTowMTo0NFrOGTgSFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTowMTo0NFrOGTgSFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwNTA0NQ==", "bodyText": "We also have the TraceId ctor taking two longs. Could we add a test for that one as well?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r423105045", "createdAt": "2020-05-11T15:01:44Z", "author": {"login": "carlosalberto"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "diffHunk": "@@ -50,9 +50,36 @@ public void isValid() {\n   }\n \n   @Test\n-  public void getLowerLong() {\n-    assertThat(first.getLowerLong()).isEqualTo(0);\n-    assertThat(second.getLowerLong()).isEqualTo(-0xFF00000000000000L);\n+  public void testGetRandomTracePart() {\n+    byte[] id = {\n+      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00\n+    };\n+    TraceId traceid = TraceId.fromBytes(id, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6123205b71ddace2f1a46af4231c6305f180284"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MjYxOTE3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#pullrequestreview-409261917", "createdAt": "2020-05-11T15:06:13Z", "commit": {"oid": "a6123205b71ddace2f1a46af4231c6305f180284"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2669, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}