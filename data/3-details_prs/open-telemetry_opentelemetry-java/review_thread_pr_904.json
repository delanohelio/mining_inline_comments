{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTAxOTY1", "number": 904, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODo1MDozM1rODhzfeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoyNzo1OFrODl5ZKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzczMjQyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODo1MDozM1rOFsvjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODo1MDozM1rOFsvjyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MDg3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Context.current().withValue(DIST_CONTEXT_KEY, distContext);\n          \n          \n            \n                return withCorrelationContext(distContext, Context.current());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382460875", "createdAt": "2020-02-21T08:50:33Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "diffHunk": "@@ -44,7 +45,7 @@\n    * @return a new context with the given value set.\n    * @since 0.1.0\n    */\n-  public static Context withValue(CorrelationContext distContext) {\n+  public static Context withCorrelationContext(CorrelationContext distContext) {\n     return Context.current().withValue(DIST_CONTEXT_KEY, distContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Nzc2MTg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTowMDo0MlrOFsv1iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTowMDo0MlrOFsv1iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NTQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Context.key(\"opentelemetry-dist-context-key\");\n          \n          \n            \n                  Context.key(\"opentelemetry-correlation-context-key\");", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382465416", "createdAt": "2020-02-21T09:00:42Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "diffHunk": "@@ -32,10 +33,10 @@\n  * @since 0.1.0\n  */\n @Immutable\n-public final class ContextUtils {\n+public final class CorrelationsContextUtils {\n   private static final Context.Key<CorrelationContext> DIST_CONTEXT_KEY =\n-      Context.keyWithDefault(\n-          \"opentelemetry-dist-context-key\", EmptyCorrelationContext.getInstance());\n+      Context.key(\"opentelemetry-dist-context-key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Nzc2NjIwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTowMTo1NFrOFsv4Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTowMTo1NFrOFsv4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NjA1MQ==", "bodyText": "0.3.0?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382466051", "createdAt": "2020-02-21T09:01:54Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "diffHunk": "@@ -77,10 +78,23 @@ public static CorrelationContext getValue() {\n    * @return the value from the specified {@code Context}.\n    * @since 0.1.0\n    */\n-  public static CorrelationContext getValue(Context context) {\n+  public static CorrelationContext getCorrelationContext(Context context) {\n     return DIST_CONTEXT_KEY.get(context);\n   }\n \n+  /**\n+   * Returns the value from the specified {@code Context}, falling back to a default, no-op {@link\n+   * CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the value from the specified {@code Context}.\n+   * @since 0.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Nzc5NDcyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxMjoxOVrOFswJzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxMjoxOVrOFswJzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3MDYwNQ==", "bodyText": "Since the method name changed, I would s/value/span in this and in the next methods' Javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382470605", "createdAt": "2020-02-21T09:12:19Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzgxNDI3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxODo0OFrOFswV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo1Mzo0NlrOFt35Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3MzY4OQ==", "bodyText": "Why DistributedContext in the name?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382473689", "createdAt": "2020-02-21T09:18:48Z", "author": {"login": "thisthat"}, "path": "api/src/test/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtilsTest.java", "diffHunk": "@@ -24,40 +24,37 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link ContextUtils}. */\n+/** Unit tests for {@link CorrelationsContextUtils}. */\n @RunWith(JUnit4.class)\n-public final class ContextUtilsTest {\n+public final class CorrelationsContextUtilsTest {\n   @Test\n-  public void testGetCurrentCorrelationContex_DefaultContext() {\n-    CorrelationContext distContext = ContextUtils.getValue(Context.current());\n-    assertThat(distContext).isNotNull();\n-    assertThat(distContext.getEntries()).isEmpty();\n+  public void testGetCurrentDistributedContext_DefaultContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NTk5OA==", "bodyText": "Oops, one of the remnants of the old code (that I didn't detect)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r383645998", "createdAt": "2020-02-25T03:53:46Z", "author": {"login": "carlosalberto"}, "path": "api/src/test/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtilsTest.java", "diffHunk": "@@ -24,40 +24,37 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link ContextUtils}. */\n+/** Unit tests for {@link CorrelationsContextUtils}. */\n @RunWith(JUnit4.class)\n-public final class ContextUtilsTest {\n+public final class CorrelationsContextUtilsTest {\n   @Test\n-  public void testGetCurrentCorrelationContex_DefaultContext() {\n-    CorrelationContext distContext = ContextUtils.getValue(Context.current());\n-    assertThat(distContext).isNotNull();\n-    assertThat(distContext.getEntries()).isEmpty();\n+  public void testGetCurrentDistributedContext_DefaultContext() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3MzY4OQ=="}, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzgxNTc4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxOToyMlrOFswW3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxOToyMlrOFswW3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3Mzk0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CorrelationContext distContext =\n          \n          \n            \n                CorrelationContext corrContext =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382473948", "createdAt": "2020-02-21T09:19:22Z", "author": {"login": "thisthat"}, "path": "api/src/test/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtilsTest.java", "diffHunk": "@@ -24,40 +24,37 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link ContextUtils}. */\n+/** Unit tests for {@link CorrelationsContextUtils}. */\n @RunWith(JUnit4.class)\n-public final class ContextUtilsTest {\n+public final class CorrelationsContextUtilsTest {\n   @Test\n-  public void testGetCurrentCorrelationContex_DefaultContext() {\n-    CorrelationContext distContext = ContextUtils.getValue(Context.current());\n-    assertThat(distContext).isNotNull();\n-    assertThat(distContext.getEntries()).isEmpty();\n+  public void testGetCurrentDistributedContext_DefaultContext() {\n+    CorrelationContext distContext =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQyMTYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowNzoyMVrOFs_0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowNzoyMVrOFs_0gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzI5OQ==", "bodyText": "I would keep them just in \"trace\".", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382727299", "createdAt": "2020-02-21T18:07:21Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQyMzg4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowODoxM1rOFs_18Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo1MTowNlrOFvfBYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzY2NQ==", "bodyText": "Not sure why we need 2 elements in the Context", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382727665", "createdAt": "2020-02-21T18:08:13Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span, Context context) {\n+    return context.withValue(CONTEXT_SPAN_KEY, span);\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@code SpanContext} set.\n+   *\n+   * @param spanContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.3.0\n+   */\n+  public static Context withSpanContext(SpanContext spanContext) {\n+    return withSpanContext(spanContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODE2Mw==", "bodyText": "Are we suggesting to add always both of them? It is hard to keep them in sync probably.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382728163", "createdAt": "2020-02-21T18:09:22Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span, Context context) {\n+    return context.withValue(CONTEXT_SPAN_KEY, span);\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@code SpanContext} set.\n+   *\n+   * @param spanContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.3.0\n+   */\n+  public static Context withSpanContext(SpanContext spanContext) {\n+    return withSpanContext(spanContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzY2NQ=="}, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1NTIyMw==", "bodyText": "Oh, we are simply putting spanContext in Context.current().\nOr maybe you are talking about the possibility to have in a given Context, at some moment, both SpanContext and Span? If that's the case, this can happen, but Span will be preferred (as mentioned in the Specification).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r383655223", "createdAt": "2020-02-25T04:40:17Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span, Context context) {\n+    return context.withValue(CONTEXT_SPAN_KEY, span);\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@code SpanContext} set.\n+   *\n+   * @param spanContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.3.0\n+   */\n+  public static Context withSpanContext(SpanContext spanContext) {\n+    return withSpanContext(spanContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzY2NQ=="}, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4MTgwMA==", "bodyText": "I am not sure that this is the right thing to do, I would stick with only Span in the Context until we prove that it is not possible.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r384781800", "createdAt": "2020-02-26T21:37:57Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span, Context context) {\n+    return context.withValue(CONTEXT_SPAN_KEY, span);\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@code SpanContext} set.\n+   *\n+   * @param spanContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.3.0\n+   */\n+  public static Context withSpanContext(SpanContext spanContext) {\n+    return withSpanContext(spanContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzY2NQ=="}, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2ODg4Nw==", "bodyText": "Well, at this time we need to store SpanContext when doing extraction:\n// newCtx will contain a SpanContext instance.\nContext newCtx = propagator.extract(...);\nThis is also covered in the specification now - unless you plan to drop SpanContext entirely, and use it always through DefaultSpan for this (which can be used a pseudo parent, that is).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r385268887", "createdAt": "2020-02-27T17:45:12Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span, Context context) {\n+    return context.withValue(CONTEXT_SPAN_KEY, span);\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@code SpanContext} set.\n+   *\n+   * @param spanContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.3.0\n+   */\n+  public static Context withSpanContext(SpanContext spanContext) {\n+    return withSpanContext(spanContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzY2NQ=="}, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNTY1MA==", "bodyText": "Let's not add it right now, so that gives me some time to think a bit more. We can for the moment just move what was already available without adding the SpanContext for the moment.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r385335650", "createdAt": "2020-02-27T19:51:06Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span, Context context) {\n+    return context.withValue(CONTEXT_SPAN_KEY, span);\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@code SpanContext} set.\n+   *\n+   * @param spanContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.3.0\n+   */\n+  public static Context withSpanContext(SpanContext spanContext) {\n+    return withSpanContext(spanContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzY2NQ=="}, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjc0MjUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo1MDozNlrOFu7ttg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo1MjoxMVrOFvfDpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1NzE3NA==", "bodyText": "Why not having getCorrelationContext never return null as it was before?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r384757174", "createdAt": "2020-02-26T20:50:36Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -77,21 +76,35 @@ public static CorrelationContext getValue() {\n    * @return the value from the specified {@code Context}.\n    * @since 0.1.0\n    */\n-  public static CorrelationContext getValue(Context context) {\n-    return DIST_CONTEXT_KEY.get(context);\n+  public static CorrelationContext getCorrelationContext(Context context) {\n+    return CORR_CONTEXT_KEY.get(context);\n+  }\n+\n+  /**\n+   * Returns the value from the specified {@code Context}, falling back to a default, no-op {@link\n+   * CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the value from the specified {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContextWithDefault(Context context) {\n+    CorrelationContext corrContext = CORR_CONTEXT_KEY.get(context);\n+    return corrContext == null ? DEFAULT_VALUE : corrContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93c9698c976a96ec0333f0bfa2d902d9b3596868"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5OTAyMg==", "bodyText": "I see the explanation in the description:\n\nI would suggest actually to have a getCorrelationContextWithoutDefault because the version with default will be the most used.\nI would suggest that we do not offer a getCorrelationContextWithoutDefault for the current Context because it will be used only by the propagators so limiting the API.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r384799022", "createdAt": "2020-02-26T22:12:24Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -77,21 +76,35 @@ public static CorrelationContext getValue() {\n    * @return the value from the specified {@code Context}.\n    * @since 0.1.0\n    */\n-  public static CorrelationContext getValue(Context context) {\n-    return DIST_CONTEXT_KEY.get(context);\n+  public static CorrelationContext getCorrelationContext(Context context) {\n+    return CORR_CONTEXT_KEY.get(context);\n+  }\n+\n+  /**\n+   * Returns the value from the specified {@code Context}, falling back to a default, no-op {@link\n+   * CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the value from the specified {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContextWithDefault(Context context) {\n+    CorrelationContext corrContext = CORR_CONTEXT_KEY.get(context);\n+    return corrContext == null ? DEFAULT_VALUE : corrContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1NzE3NA=="}, "originalCommit": {"oid": "93c9698c976a96ec0333f0bfa2d902d9b3596868"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2OTk2Mw==", "bodyText": "Ok, we can do that. Will update the code.\n\nI would suggest that we do not offer a getCorrelationContextWithoutDefault for the current Context because it will be used only by the propagators so limiting the API.\n\nSure, this works as well. We can always add it in the future if/as needed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r385269963", "createdAt": "2020-02-27T17:47:22Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -77,21 +76,35 @@ public static CorrelationContext getValue() {\n    * @return the value from the specified {@code Context}.\n    * @since 0.1.0\n    */\n-  public static CorrelationContext getValue(Context context) {\n-    return DIST_CONTEXT_KEY.get(context);\n+  public static CorrelationContext getCorrelationContext(Context context) {\n+    return CORR_CONTEXT_KEY.get(context);\n+  }\n+\n+  /**\n+   * Returns the value from the specified {@code Context}, falling back to a default, no-op {@link\n+   * CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the value from the specified {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContextWithDefault(Context context) {\n+    CorrelationContext corrContext = CORR_CONTEXT_KEY.get(context);\n+    return corrContext == null ? DEFAULT_VALUE : corrContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1NzE3NA=="}, "originalCommit": {"oid": "93c9698c976a96ec0333f0bfa2d902d9b3596868"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNjIyOA==", "bodyText": "Please update everywhere (span included).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r385336228", "createdAt": "2020-02-27T19:52:11Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -77,21 +76,35 @@ public static CorrelationContext getValue() {\n    * @return the value from the specified {@code Context}.\n    * @since 0.1.0\n    */\n-  public static CorrelationContext getValue(Context context) {\n-    return DIST_CONTEXT_KEY.get(context);\n+  public static CorrelationContext getCorrelationContext(Context context) {\n+    return CORR_CONTEXT_KEY.get(context);\n+  }\n+\n+  /**\n+   * Returns the value from the specified {@code Context}, falling back to a default, no-op {@link\n+   * CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the value from the specified {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContextWithDefault(Context context) {\n+    CorrelationContext corrContext = CORR_CONTEXT_KEY.get(context);\n+    return corrContext == null ? DEFAULT_VALUE : corrContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1NzE3NA=="}, "originalCommit": {"oid": "93c9698c976a96ec0333f0bfa2d902d9b3596868"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjI2MjEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1NjowNlrOFyZRAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1ODo0MVrOFyf7HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NzA3Mg==", "bodyText": "I think you better say:\nempty {@link CorrelationContext}.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388387072", "createdAt": "2020-03-05T15:56:06Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NjE1Nw==", "bodyText": "The intention is the same ;) But lets go with empty CorrelationContext ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388496157", "createdAt": "2020-03-05T18:58:41Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NzA3Mg=="}, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjI3MzE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1ODo0MFrOFyZYCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMDo0NVrOFyf_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4ODg3Mg==", "bodyText": "Not sure I understand this comment. I think I am ok with people using these methods directly.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388388872", "createdAt": "2020-03-05T15:58:40Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzM5MA==", "bodyText": "Oh, the idea behind this is that users shouldn't use this class(es) directly, but instead use the ones offered by Tracer and CorrelationContextManager (such as getCurrentSpan()), but lets remove this text while the related issue is resolved ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388497390", "createdAt": "2020-03-05T19:00:45Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4ODg3Mg=="}, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjI4NTczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowMDo0MlrOFyZfrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMzoyN1rOFygFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MDgzMQ==", "bodyText": "Let's remove this for the moment, people can use the other version.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388390831", "createdAt": "2020-03-05T16:00:42Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODgxMg==", "bodyText": "Keep the version returning a Scope?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388498812", "createdAt": "2020-03-05T19:03:27Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MDgzMQ=="}, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjI4NzcwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowMTowMlrOFyZg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMTozNlrOFygBtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MTE1NA==", "bodyText": "getCurrentCorrelationContext?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388391154", "createdAt": "2020-03-05T16:01:02Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @return the {@link CorrelationContext} from the current {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Nzg0Nw==", "bodyText": "I'm fine with the proposed change, will change it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388497847", "createdAt": "2020-03-05T19:01:36Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @return the {@link CorrelationContext} from the current {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MTE1NA=="}, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMxMzgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNzoxNFrOFyZxZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNjo1NDoyMVrOFzWRVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NTM2Ng==", "bodyText": "This needs to signal that it interacts with the \"Current\" Context. Maybe rename:\ncurrentContextWith(CorrelationContext corrContext)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388395366", "createdAt": "2020-03-05T16:07:14Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @return the {@link CorrelationContext} from the current {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext() {\n+    return getCorrelationContext(Context.current());\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the specified {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the {@link CorrelationContext} from the specified {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext(Context context) {\n+    CorrelationContext corrContext = CORR_CONTEXT_KEY.get(context);\n+    return corrContext == null ? EmptyCorrelationContext.getInstance() : corrContext;\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the specified {@code Context}. If none is found,\n+   * this method returns {code null}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the {@link CorrelationContext} from the specified {@code Context}.\n+   * @since 0.1.0\n+   */\n+  @Nullable\n+  public static CorrelationContext getCorrelationContextWithoutDefault(Context context) {\n+    return CORR_CONTEXT_KEY.get(context);\n+  }\n+\n+  /**\n+   * Returns a new {@link Scope} encapsulating the provided {@link CorrelationContext} added to the\n+   * current {@code Context}.\n+   *\n+   * @param corrContext the {@link CorrelationContext} to be added to the current {@code Context}.\n+   * @return the {@link Scope} for the updated {@code Context}.\n+   * @since 0.1.0\n+   */\n+  public static Scope withScopedCorrelationContext(CorrelationContext corrContext) {\n+    Context context = withCorrelationContext(corrContext);\n+    return ContextUtils.withScopedContext(context);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4NjU4Mg==", "bodyText": "Will follow this up in another PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389386582", "createdAt": "2020-03-08T16:54:21Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @return the {@link CorrelationContext} from the current {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext() {\n+    return getCorrelationContext(Context.current());\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the specified {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the {@link CorrelationContext} from the specified {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext(Context context) {\n+    CorrelationContext corrContext = CORR_CONTEXT_KEY.get(context);\n+    return corrContext == null ? EmptyCorrelationContext.getInstance() : corrContext;\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the specified {@code Context}. If none is found,\n+   * this method returns {code null}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the {@link CorrelationContext} from the specified {@code Context}.\n+   * @since 0.1.0\n+   */\n+  @Nullable\n+  public static CorrelationContext getCorrelationContextWithoutDefault(Context context) {\n+    return CORR_CONTEXT_KEY.get(context);\n+  }\n+\n+  /**\n+   * Returns a new {@link Scope} encapsulating the provided {@link CorrelationContext} added to the\n+   * current {@code Context}.\n+   *\n+   * @param corrContext the {@link CorrelationContext} to be added to the current {@code Context}.\n+   * @return the {@link Scope} for the updated {@code Context}.\n+   * @since 0.1.0\n+   */\n+  public static Scope withScopedCorrelationContext(CorrelationContext corrContext) {\n+    Context context = withCorrelationContext(corrContext);\n+    return ContextUtils.withScopedContext(context);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NTM2Ng=="}, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMyMDQ1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowODo1MFrOFyZ1zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1MTowOVrOFzDkNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjQ5Mg==", "bodyText": "Can we file an issue to remove these? Also I would suggest removing them because adding them later is backwards  compatible.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388396492", "createdAt": "2020-03-05T16:08:50Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "diffHunk": "@@ -50,7 +50,7 @@ public static CorrelationContextManager getInstance() {\n \n   @Override\n   public CorrelationContext getCurrentContext() {\n-    return ContextUtils.getValue();\n+    return CorrelationsContextUtils.getCorrelationContext(Context.current());\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODM5Mg==", "bodyText": "I guess this is what you are talking about? ;) open-telemetry/opentelemetry-specification#455", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388498392", "createdAt": "2020-03-05T19:02:40Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "diffHunk": "@@ -50,7 +50,7 @@ public static CorrelationContextManager getInstance() {\n \n   @Override\n   public CorrelationContext getCurrentContext() {\n-    return ContextUtils.getValue();\n+    return CorrelationsContextUtils.getCorrelationContext(Context.current());\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjQ5Mg=="}, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MDExOA==", "bodyText": "Is this solved? Or this is something else you are talking about?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389080118", "createdAt": "2020-03-06T18:51:09Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "diffHunk": "@@ -50,7 +50,7 @@ public static CorrelationContextManager getInstance() {\n \n   @Override\n   public CorrelationContext getCurrentContext() {\n-    return ContextUtils.getValue();\n+    return CorrelationsContextUtils.getCorrelationContext(Context.current());\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjQ5Mg=="}, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMyMjg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowOToyNlrOFyZ3bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMjo1NVrOFygEWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjkwOQ==", "bodyText": "Remove this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388396909", "createdAt": "2020-03-05T16:09:26Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODUyMw==", "bodyText": "Oh, my bad, yes ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388498523", "createdAt": "2020-03-05T19:02:55Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjkwOQ=="}, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMyNDQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowOTo1MVrOFyZ4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowOTo1MVrOFyZ4eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NzE3Ng==", "bodyText": "Same comments apply here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388397176", "createdAt": "2020-03-05T16:09:51Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDY0MDU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoyNzoxOFrOFzC2ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNjo1MTo1N1rOFzWQnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODQ4Mw==", "bodyText": "Remove this as we did in the CorrelationContext.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389068483", "createdAt": "2020-03-06T18:27:18Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@link Span} set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3OTI1Mw==", "bodyText": "We still have Context withCorrelationContext(Correlation Context) there. Maybe you are talking about removing the one of the overloads of these methods?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389079253", "createdAt": "2020-03-06T18:49:18Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@link Span} set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODQ4Mw=="}, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMDU3OQ==", "bodyText": "Yes, let's keep only the version that accepts both the object (span, correlation) and the Context.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389110579", "createdAt": "2020-03-06T19:48:37Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@link Span} set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODQ4Mw=="}, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4NjM5Nw==", "bodyText": "Done. Lets definitely add them again if/as needed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389386397", "createdAt": "2020-03-08T16:51:57Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@link Span} set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODQ4Mw=="}, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDY0MTY1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoyNzo0MlrOFzC3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo0OToyN1rOFzDhIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODY4NA==", "bodyText": "getCurrentCorrelationContext?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389068684", "createdAt": "2020-03-06T18:27:42Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "diffHunk": "@@ -50,7 +50,7 @@ public static CorrelationContextManager getInstance() {\n \n   @Override\n   public CorrelationContext getCurrentContext() {\n-    return ContextUtils.getValue();\n+    return CorrelationsContextUtils.getCorrelationContext(Context.current());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3OTMzMQ==", "bodyText": "Gotcha.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389079331", "createdAt": "2020-03-06T18:49:27Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "diffHunk": "@@ -50,7 +50,7 @@ public static CorrelationContextManager getInstance() {\n \n   @Override\n   public CorrelationContext getCurrentContext() {\n-    return ContextUtils.getValue();\n+    return CorrelationsContextUtils.getCorrelationContext(Context.current());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODY4NA=="}, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDY0MjM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoyNzo1OFrOFzC3-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo0OTozNlrOFzDhbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODc5NQ==", "bodyText": "getCurrentSpan()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389068795", "createdAt": "2020-03-06T18:27:58Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -46,12 +46,12 @@ public static Tracer getInstance() {\n \n   @Override\n   public Span getCurrentSpan() {\n-    return ContextUtils.getValue();\n+    return TracingContextUtils.getSpan(Context.current());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3OTQwNQ==", "bodyText": "Will update as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389079405", "createdAt": "2020-03-06T18:49:36Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -46,12 +46,12 @@ public static Tracer getInstance() {\n \n   @Override\n   public Span getCurrentSpan() {\n-    return ContextUtils.getValue();\n+    return TracingContextUtils.getSpan(Context.current());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODc5NQ=="}, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 911, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}