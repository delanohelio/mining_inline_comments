{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDQyODcy", "number": 1504, "title": "Wrote benchmark tests for the zPages module", "bodyText": "This pull request contains\n\nBenchmark tests for TracezSpanBuckets, as requested here\nBenchmark tests for TracezDataAggregator\n\nBenchmark Results\nJava version:\nopenjdk version \"11.0.6\" 2020-06-25\nOpenJDK Runtime Environment (build 11.0.6+10-google-release-318347721)\nOpenJDK 64-Bit Server VM (build 11.0.6+10-google-release-318347721, mixed mode, sharing)\n\nHardware Info\nArchitecture: x86_64\nCPU(s): 16\nThread(s) per core: 2\nModel name: Intel(R) Xeon(R) CPU @ 2.20GHz\n\nTracezSpanBucketsBenchmark:\nBenchmark                                                                       Mode  Cnt      Score     Error   Units\n\nTracezSpanBucketsBenchmark.addToBucket_01Thread                                thrpt   10  17133.815 \u00b1 179.117  ops/ms\nTracezSpanBucketsBenchmark.addToBucket_01Thread:\u00b7gc.alloc.rate                 thrpt   10    609.617 \u00b1   6.356  MB/sec\nTracezSpanBucketsBenchmark.addToBucket_01Thread:\u00b7gc.alloc.rate.norm            thrpt   10     56.000 \u00b1   0.001    B/op\nTracezSpanBucketsBenchmark.addToBucket_01Thread:\u00b7gc.churn.G1_Eden_Space        thrpt   10    630.842 \u00b1 502.667  MB/sec\nTracezSpanBucketsBenchmark.addToBucket_01Thread:\u00b7gc.churn.G1_Eden_Space.norm   thrpt   10     57.967 \u00b1  46.195    B/op\nTracezSpanBucketsBenchmark.addToBucket_01Thread:\u00b7gc.count                      thrpt   10      8.000            counts\nTracezSpanBucketsBenchmark.addToBucket_01Thread:\u00b7gc.time                       thrpt   10     37.000                ms\n\nTracezSpanBucketsBenchmark.addToBucket_05Threads                               thrpt   10   1448.734 \u00b1  59.915  ops/ms\nTracezSpanBucketsBenchmark.addToBucket_05Threads:\u00b7gc.alloc.rate                thrpt   10     88.369 \u00b1   3.629  MB/sec\nTracezSpanBucketsBenchmark.addToBucket_05Threads:\u00b7gc.alloc.rate.norm           thrpt   10     96.002 \u00b1   0.001    B/op\nTracezSpanBucketsBenchmark.addToBucket_05Threads:\u00b7gc.churn.G1_Eden_Space       thrpt   10     78.812 \u00b1 376.794  MB/sec\nTracezSpanBucketsBenchmark.addToBucket_05Threads:\u00b7gc.churn.G1_Eden_Space.norm  thrpt   10     85.257 \u00b1 407.608    B/op\nTracezSpanBucketsBenchmark.addToBucket_05Threads:\u00b7gc.count                     thrpt   10      1.000            counts\nTracezSpanBucketsBenchmark.addToBucket_05Threads:\u00b7gc.time                      thrpt   10      6.000                ms\n\nTracezSpanBucketsBenchmark.addToBucket_10Threads                               thrpt   10   2435.441 \u00b1  49.773  ops/ms\nTracezSpanBucketsBenchmark.addToBucket_10Threads:\u00b7gc.alloc.rate                thrpt   10    148.482 \u00b1   3.023  MB/sec\nTracezSpanBucketsBenchmark.addToBucket_10Threads:\u00b7gc.alloc.rate.norm           thrpt   10     96.002 \u00b1   0.001    B/op\nTracezSpanBucketsBenchmark.addToBucket_10Threads:\u00b7gc.churn.G1_Eden_Space       thrpt   10    157.433 \u00b1 501.783  MB/sec\nTracezSpanBucketsBenchmark.addToBucket_10Threads:\u00b7gc.churn.G1_Eden_Space.norm  thrpt   10    102.915 \u00b1 328.063    B/op\nTracezSpanBucketsBenchmark.addToBucket_10Threads:\u00b7gc.count                     thrpt   10      2.000            counts\nTracezSpanBucketsBenchmark.addToBucket_10Threads:\u00b7gc.time                      thrpt   10     12.000                ms\n\nTracezSpanBucketsBenchmark.addToBucket_20Threads                               thrpt   10   2355.800 \u00b1 140.500  ops/ms\nTracezSpanBucketsBenchmark.addToBucket_20Threads:\u00b7gc.alloc.rate                thrpt   10    143.503 \u00b1   8.528  MB/sec\nTracezSpanBucketsBenchmark.addToBucket_20Threads:\u00b7gc.alloc.rate.norm           thrpt   10     96.004 \u00b1   0.001    B/op\nTracezSpanBucketsBenchmark.addToBucket_20Threads:\u00b7gc.churn.G1_Eden_Space       thrpt   10    157.130 \u00b1 500.816  MB/sec\nTracezSpanBucketsBenchmark.addToBucket_20Threads:\u00b7gc.churn.G1_Eden_Space.norm  thrpt   10    106.904 \u00b1 340.741    B/op\nTracezSpanBucketsBenchmark.addToBucket_20Threads:\u00b7gc.count                     thrpt   10      2.000            counts\nTracezSpanBucketsBenchmark.addToBucket_20Threads:\u00b7gc.time                      thrpt   10     10.000                ms\n\nTracezDataAggregatorBenchmark:\nBenchmark                                                                       (numberOfSpans)   Mode  Cnt       Score       Error   Units\n\nTracezDataAggregatorBenchmark.getCounts_01Thread                                              1  thrpt   10   14792.282 \u00b1  3102.192  ops/ms\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.alloc.rate                               1  thrpt   10    2932.581 \u00b1   614.296  MB/sec\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.alloc.rate.norm                          1  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.churn.G1_Eden_Space                      1  thrpt   10    2872.969 \u00b1   829.405  MB/sec\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.churn.G1_Eden_Space.norm                 1  thrpt   10     304.446 \u00b1    49.594    B/op\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.count                                    1  thrpt   10      30.000              counts\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.time                                     1  thrpt   10      46.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_01Thread                                             10  thrpt   10   15679.266 \u00b1    75.415  ops/ms\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.alloc.rate                              10  thrpt   10    3108.393 \u00b1    14.967  MB/sec\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.alloc.rate.norm                         10  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.churn.G1_Eden_Space                     10  thrpt   10    3103.478 \u00b1   618.312  MB/sec\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.churn.G1_Eden_Space.norm                10  thrpt   10     311.539 \u00b1    62.521    B/op\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.count                                   10  thrpt   10      32.000              counts\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.time                                    10  thrpt   10      33.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_01Thread                                           1000  thrpt   10   16103.333 \u00b1    84.507  ops/ms\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.alloc.rate                            1000  thrpt   10    3192.435 \u00b1    16.622  MB/sec\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.alloc.rate.norm                       1000  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.churn.G1_Eden_Space                   1000  thrpt   10    3200.333 \u00b1   708.019  MB/sec\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.churn.G1_Eden_Space.norm              1000  thrpt   10     312.778 \u00b1    69.248    B/op\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.count                                 1000  thrpt   10      33.000              counts\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.time                                  1000  thrpt   10      32.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_01Thread                                        1000000  thrpt   10   37144.643 \u00b1   269.123  ops/ms\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.alloc.rate                         1000000  thrpt   10    3398.461 \u00b1    24.672  MB/sec\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.alloc.rate.norm                    1000000  thrpt   10     144.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.churn.G1_Eden_Space                1000000  thrpt   10    3391.009 \u00b1   576.120  MB/sec\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.churn.G1_Eden_Space.norm           1000000  thrpt   10     143.678 \u00b1    24.289    B/op\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.count                              1000000  thrpt   10      43.000              counts\nTracezDataAggregatorBenchmark.getCounts_01Thread:\u00b7gc.time                               1000000  thrpt   10      41.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_05Threads                                             1  thrpt   10   74813.371 \u00b1   548.537  ops/ms\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.alloc.rate                              1  thrpt   10   14824.862 \u00b1   108.219  MB/sec\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.alloc.rate.norm                         1  thrpt   10     311.999 \u00b1     0.004    B/op\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.churn.G1_Eden_Space                     1  thrpt   10   14954.062 \u00b1     1.122  MB/sec\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.churn.G1_Eden_Space.norm                1  thrpt   10     314.724 \u00b1     2.309    B/op\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.count                                   1  thrpt   10      90.000              counts\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.time                                    1  thrpt   10     105.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_05Threads                                            10  thrpt   10   79326.421 \u00b1   606.977  ops/ms\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.alloc.rate                             10  thrpt   10   15718.854 \u00b1   119.266  MB/sec\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.alloc.rate.norm                        10  thrpt   10     311.999 \u00b1     0.004    B/op\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.churn.G1_Eden_Space                    10  thrpt   10   15702.425 \u00b1  1283.161  MB/sec\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.churn.G1_Eden_Space.norm               10  thrpt   10     311.679 \u00b1    25.548    B/op\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.count                                  10  thrpt   10      78.000              counts\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.time                                   10  thrpt   10      94.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_05Threads                                          1000  thrpt   10   73127.398 \u00b1  1797.815  ops/ms\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.alloc.rate                           1000  thrpt   10   14488.777 \u00b1   357.274  MB/sec\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.alloc.rate.norm                      1000  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.churn.G1_Eden_Space                  1000  thrpt   10   14430.197 \u00b1  2011.378  MB/sec\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.churn.G1_Eden_Space.norm             1000  thrpt   10     310.599 \u00b1    40.134    B/op\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.count                                1000  thrpt   10      56.000              counts\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.time                                 1000  thrpt   10      96.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_05Threads                                       1000000  thrpt   10  170512.966 \u00b1 26345.175  ops/ms\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.alloc.rate                        1000000  thrpt   10   15594.783 \u00b1  2410.690  MB/sec\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.alloc.rate.norm                   1000000  thrpt   10     144.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.churn.G1_Eden_Space               1000000  thrpt   10   15683.896 \u00b1  2427.209  MB/sec\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.churn.G1_Eden_Space.norm          1000000  thrpt   10     144.972 \u00b1     9.016    B/op\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.count                             1000000  thrpt   10      95.000              counts\nTracezDataAggregatorBenchmark.getCounts_05Threads:\u00b7gc.time                              1000000  thrpt   10     111.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_10Threads                                             1  thrpt   10  114491.682 \u00b1  4265.189  ops/ms\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.alloc.rate                              1  thrpt   10   22675.116 \u00b1   843.016  MB/sec\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.alloc.rate.norm                         1  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.churn.G1_Eden_Space                     1  thrpt   10   22755.783 \u00b1  2479.838  MB/sec\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.churn.G1_Eden_Space.norm                1  thrpt   10     313.029 \u00b1    29.734    B/op\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.count                                   1  thrpt   10      88.000              counts\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.time                                    1  thrpt   10     129.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_10Threads                                            10  thrpt   10  118318.422 \u00b1  3740.372  ops/ms\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.alloc.rate                             10  thrpt   10   23429.930 \u00b1   739.594  MB/sec\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.alloc.rate.norm                        10  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.churn.G1_Eden_Space                    10  thrpt   10   23528.026 \u00b1  3013.909  MB/sec\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.churn.G1_Eden_Space.norm               10  thrpt   10     313.345 \u00b1    39.871    B/op\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.count                                  10  thrpt   10      57.000              counts\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.time                                   10  thrpt   10     110.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_10Threads                                          1000  thrpt   10  120036.874 \u00b1  5795.201  ops/ms\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.alloc.rate                           1000  thrpt   10   23774.585 \u00b1  1149.054  MB/sec\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.alloc.rate.norm                      1000  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.churn.G1_Eden_Space                  1000  thrpt   10   23717.020 \u00b1  1643.732  MB/sec\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.churn.G1_Eden_Space.norm             1000  thrpt   10     311.330 \u00b1    20.127    B/op\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.count                                1000  thrpt   10      69.000              counts\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.time                                 1000  thrpt   10     116.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_10Threads                                       1000000  thrpt   10  243987.812 \u00b1  4435.853  ops/ms\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.alloc.rate                        1000000  thrpt   10   22301.989 \u00b1   408.603  MB/sec\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.alloc.rate.norm                   1000000  thrpt   10     144.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.churn.G1_Eden_Space               1000000  thrpt   10   22655.038 \u00b1  2475.186  MB/sec\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.churn.G1_Eden_Space.norm          1000000  thrpt   10     146.233 \u00b1    14.683    B/op\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.count                             1000000  thrpt   10     121.000              counts\nTracezDataAggregatorBenchmark.getCounts_10Threads:\u00b7gc.time                              1000000  thrpt   10     159.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_20Threads                                             1  thrpt   10  124683.938 \u00b1  2800.323  ops/ms\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.alloc.rate                              1  thrpt   10   24866.222 \u00b1   550.802  MB/sec\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.alloc.rate.norm                         1  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.churn.G1_Eden_Space                     1  thrpt   10   25073.959 \u00b1  1773.667  MB/sec\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.churn.G1_Eden_Space.norm                1  thrpt   10     314.588 \u00b1    20.264    B/op\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.count                                   1  thrpt   10     103.000              counts\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.time                                    1  thrpt   10     149.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_20Threads                                            10  thrpt   10  126747.917 \u00b1  4223.296  ops/ms\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.alloc.rate                             10  thrpt   10   25298.949 \u00b1   838.861  MB/sec\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.alloc.rate.norm                        10  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.churn.G1_Eden_Space                    10  thrpt   10   25537.112 \u00b1  1869.991  MB/sec\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.churn.G1_Eden_Space.norm               10  thrpt   10     314.861 \u00b1    17.475    B/op\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.count                                  10  thrpt   10     105.000              counts\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.time                                   10  thrpt   10     156.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_20Threads                                          1000  thrpt   10  124157.989 \u00b1  4308.299  ops/ms\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.alloc.rate                           1000  thrpt   10   24787.688 \u00b1   885.568  MB/sec\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.alloc.rate.norm                      1000  thrpt   10     312.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.churn.G1_Eden_Space                  1000  thrpt   10   25313.217 \u00b1  2415.536  MB/sec\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.churn.G1_Eden_Space.norm             1000  thrpt   10     318.707 \u00b1    31.148    B/op\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.count                                1000  thrpt   10      68.000              counts\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.time                                 1000  thrpt   10     122.000                  ms\n\nTracezDataAggregatorBenchmark.getCounts_20Threads                                       1000000  thrpt   10  264277.339 \u00b1  9584.898  ops/ms\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.alloc.rate                        1000000  thrpt   10   24330.086 \u00b1   874.964  MB/sec\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.alloc.rate.norm                   1000000  thrpt   10     144.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.churn.G1_Eden_Space               1000000  thrpt   10   24533.285 \u00b1  1669.312  MB/sec\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.churn.G1_Eden_Space.norm          1000000  thrpt   10     145.218 \u00b1     9.040    B/op\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.count                             1000000  thrpt   10     129.000              counts\nTracezDataAggregatorBenchmark.getCounts_20Threads:\u00b7gc.time                              1000000  thrpt   10     170.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_01Thread                                               1  thrpt   10   29669.043 \u00b1   340.385  ops/ms\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.alloc.rate                                1  thrpt   10    1508.085 \u00b1    17.371  MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.alloc.rate.norm                           1  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.G1_Eden_Space                       1  thrpt   10    1498.367 \u00b1   377.019  MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.G1_Eden_Space.norm                  1  thrpt   10      79.511 \u00b1    20.156    B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.RememberedSet                       1  thrpt   10      \u2248 10\u207b\u2074              MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.RememberedSet.norm                  1  thrpt   10      \u2248 10\u207b\u2075                B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.count                                     1  thrpt   10      19.000              counts\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.time                                      1  thrpt   10      50.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_01Thread                                              10  thrpt   10   30589.978 \u00b1   308.822  ops/ms\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.alloc.rate                               10  thrpt   10    1554.894 \u00b1    15.683  MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.alloc.rate.norm                          10  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.G1_Eden_Space                      10  thrpt   10    1577.201 \u00b1     0.138  MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.G1_Eden_Space.norm                 10  thrpt   10      81.151 \u00b1     0.815    B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.RememberedSet                      10  thrpt   10      \u2248 10\u207b\u2074              MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.RememberedSet.norm                 10  thrpt   10      \u2248 10\u207b\u2075                B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.count                                    10  thrpt   10      20.000              counts\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.time                                     10  thrpt   10      49.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_01Thread                                            1000  thrpt   10   30729.432 \u00b1   377.905  ops/ms\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.alloc.rate                             1000  thrpt   10    1561.980 \u00b1    19.222  MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.alloc.rate.norm                        1000  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.G1_Eden_Space                    1000  thrpt   10    1577.258 \u00b1     0.070  MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.G1_Eden_Space.norm               1000  thrpt   10      80.787 \u00b1     0.998    B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.RememberedSet                    1000  thrpt   10      \u2248 10\u207b\u2074              MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.RememberedSet.norm               1000  thrpt   10      \u2248 10\u207b\u2075                B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.count                                  1000  thrpt   10      20.000              counts\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.time                                   1000  thrpt   10      47.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_01Thread                                         1000000  thrpt   10   41980.654 \u00b1   861.861  ops/ms\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.alloc.rate                          1000000  thrpt   10     640.150 \u00b1    13.139  MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.alloc.rate.norm                     1000000  thrpt   10      24.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.G1_Eden_Space                 1000000  thrpt   10     630.855 \u00b1   502.677  MB/sec\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.churn.G1_Eden_Space.norm            1000000  thrpt   10      23.689 \u00b1    18.885    B/op\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.count                               1000000  thrpt   10       8.000              counts\nTracezDataAggregatorBenchmark.getSpans_01Thread:\u00b7gc.time                                1000000  thrpt   10      39.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_05Threads                                              1  thrpt   10  153583.721 \u00b1  1183.387  ops/ms\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.alloc.rate                               1  thrpt   10    7802.605 \u00b1    60.135  MB/sec\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.alloc.rate.norm                          1  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.churn.G1_Eden_Space                      1  thrpt   10    7872.739 \u00b1  1097.468  MB/sec\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.churn.G1_Eden_Space.norm                 1  thrpt   10      80.740 \u00b1    11.608    B/op\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.count                                    1  thrpt   10      56.000              counts\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.time                                     1  thrpt   10      66.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_05Threads                                             10  thrpt   10  148371.599 \u00b1   620.134  ops/ms\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.alloc.rate                              10  thrpt   10    7537.974 \u00b1    31.528  MB/sec\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.alloc.rate.norm                         10  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.churn.G1_Eden_Space                     10  thrpt   10    7591.629 \u00b1  1098.081  MB/sec\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.churn.G1_Eden_Space.norm                10  thrpt   10      80.582 \u00b1    11.884    B/op\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.count                                   10  thrpt   10      54.000              counts\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.time                                    10  thrpt   10      63.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_05Threads                                           1000  thrpt   10  153344.292 \u00b1  1512.039  ops/ms\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.alloc.rate                            1000  thrpt   10    7790.644 \u00b1    77.477  MB/sec\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.alloc.rate.norm                       1000  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.churn.G1_Eden_Space                   1000  thrpt   10    7731.843 \u00b1  1120.331  MB/sec\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.churn.G1_Eden_Space.norm              1000  thrpt   10      79.397 \u00b1    11.491    B/op\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.count                                 1000  thrpt   10      55.000              counts\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.time                                  1000  thrpt   10      69.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_05Threads                                        1000000  thrpt   10  217758.245 \u00b1  2983.959  ops/ms\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.alloc.rate                         1000000  thrpt   10    3318.994 \u00b1    45.738  MB/sec\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.alloc.rate.norm                    1000000  thrpt   10      24.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.churn.G1_Eden_Space                1000000  thrpt   10    3295.297 \u00b1   756.881  MB/sec\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.churn.G1_Eden_Space.norm           1000000  thrpt   10      23.829 \u00b1     5.461    B/op\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.count                              1000000  thrpt   10      34.000              counts\nTracezDataAggregatorBenchmark.getSpans_05Threads:\u00b7gc.time                               1000000  thrpt   10      36.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_10Threads                                              1  thrpt   10  219368.772 \u00b1  9691.023  ops/ms\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.alloc.rate                               1  thrpt   10   11138.117 \u00b1   491.331  MB/sec\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.alloc.rate.norm                          1  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.churn.G1_Eden_Space                      1  thrpt   10   11334.881 \u00b1  1235.227  MB/sec\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.churn.G1_Eden_Space.norm                 1  thrpt   10      81.434 \u00b1     8.626    B/op\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.count                                    1  thrpt   10      67.000              counts\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.time                                     1  thrpt   10      90.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_10Threads                                             10  thrpt   10  232144.357 \u00b1  6292.858  ops/ms\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.alloc.rate                              10  thrpt   10   11787.628 \u00b1   320.882  MB/sec\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.alloc.rate.norm                         10  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.churn.G1_Eden_Space                     10  thrpt   10   11936.821 \u00b1  1115.213  MB/sec\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.churn.G1_Eden_Space.norm                10  thrpt   10      81.016 \u00b1     7.337    B/op\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.count                                   10  thrpt   10      85.000              counts\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.time                                    10  thrpt   10      98.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_10Threads                                           1000  thrpt   10  231495.460 \u00b1  9337.825  ops/ms\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.alloc.rate                            1000  thrpt   10   11754.540 \u00b1   474.589  MB/sec\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.alloc.rate.norm                       1000  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.churn.G1_Eden_Space                   1000  thrpt   10   11798.984 \u00b1  1097.823  MB/sec\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.churn.G1_Eden_Space.norm              1000  thrpt   10      80.320 \u00b1     7.176    B/op\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.count                                 1000  thrpt   10      84.000              counts\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.time                                  1000  thrpt   10     103.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_10Threads                                        1000000  thrpt   10  314909.374 \u00b1  7064.405  ops/ms\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.alloc.rate                         1000000  thrpt   10    4797.339 \u00b1   107.363  MB/sec\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.alloc.rate.norm                    1000000  thrpt   10      24.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.churn.G1_Eden_Space                1000000  thrpt   10    4842.396 \u00b1     0.907  MB/sec\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.churn.G1_Eden_Space.norm           1000000  thrpt   10      24.230 \u00b1     0.551    B/op\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.count                              1000000  thrpt   10      50.000              counts\nTracezDataAggregatorBenchmark.getSpans_10Threads:\u00b7gc.time                               1000000  thrpt   10      52.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_20Threads                                              1  thrpt   10  249317.349 \u00b1  2197.445  ops/ms\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.alloc.rate                               1  thrpt   10   12724.919 \u00b1   118.374  MB/sec\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.alloc.rate.norm                          1  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.churn.G1_Eden_Space                      1  thrpt   10   12869.508 \u00b1  1022.782  MB/sec\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.churn.G1_Eden_Space.norm                 1  thrpt   10      80.906 \u00b1     6.289    B/op\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.count                                    1  thrpt   10      93.000              counts\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.time                                     1  thrpt   10     114.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_20Threads                                             10  thrpt   10  247592.001 \u00b1  2447.009  ops/ms\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.alloc.rate                              10  thrpt   10   12649.872 \u00b1   171.812  MB/sec\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.alloc.rate.norm                         10  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.churn.G1_Eden_Space                     10  thrpt   10   12636.153 \u00b1  1344.897  MB/sec\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.churn.G1_Eden_Space.norm                10  thrpt   10      79.949 \u00b1     9.242    B/op\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.count                                   10  thrpt   10      76.000              counts\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.time                                    10  thrpt   10     105.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_20Threads                                           1000  thrpt   10  241294.723 \u00b1  2136.043  ops/ms\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.alloc.rate                            1000  thrpt   10   12339.221 \u00b1   135.705  MB/sec\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.alloc.rate.norm                       1000  thrpt   10      80.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.churn.G1_Eden_Space                   1000  thrpt   10   12451.366 \u00b1  1336.708  MB/sec\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.churn.G1_Eden_Space.norm              1000  thrpt   10      80.757 \u00b1     9.310    B/op\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.count                                 1000  thrpt   10      75.000              counts\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.time                                  1000  thrpt   10      99.000                  ms\n\nTracezDataAggregatorBenchmark.getSpans_20Threads                                        1000000  thrpt   10  337491.326 \u00b1 10743.347  ops/ms\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.alloc.rate                         1000000  thrpt   10    5184.041 \u00b1   166.886  MB/sec\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.alloc.rate.norm                    1000000  thrpt   10      24.000 \u00b1     0.001    B/op\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.churn.G1_Eden_Space                1000000  thrpt   10    5220.505 \u00b1   749.716  MB/sec\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.churn.G1_Eden_Space.norm           1000000  thrpt   10      24.179 \u00b1     3.571    B/op\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.count                              1000000  thrpt   10      55.000              counts\nTracezDataAggregatorBenchmark.getSpans_20Threads:\u00b7gc.time                               1000000  thrpt   10      61.000                  ms", "createdAt": "2020-08-04T22:27:29Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504", "merged": true, "mergeCommit": {"oid": "bcb1d4aca2165e6ad9de2ce81344fa4ba5a03cfd"}, "closed": true, "closedAt": "2020-08-07T03:02:42Z", "author": {"login": "williamhu99"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc19SBrAH2gAyNDYzMDQyODcyOmVjMzFlM2U5Y2IwMjEyYzc1MTMzMzMxMjkwMjQ2YjI1OGY0NDViMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8X3L9AFqTQ2MjkyNjI5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec31e3e9cb0212c75133331290246b258f445b13", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec31e3e9cb0212c75133331290246b258f445b13", "committedDate": "2020-07-18T00:27:58Z", "message": "Removed URLEncoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0fe0ede7bbd0e660feab6b0eac647f972224a12", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e0fe0ede7bbd0e660feab6b0eac647f972224a12", "committedDate": "2020-07-18T00:44:15Z", "message": "Fixed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf7f5c8f7890ffb19aabcd675ca4bcc7f4a5739a", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cf7f5c8f7890ffb19aabcd675ca4bcc7f4a5739a", "committedDate": "2020-07-20T21:20:21Z", "message": "Added URLDecoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "committedDate": "2020-07-20T21:29:32Z", "message": "Included comment for string replacement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "412797843fe71d406538cd0173d414afd3872019", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/412797843fe71d406538cd0173d414afd3872019", "committedDate": "2020-07-20T23:50:41Z", "message": "Added unit tests for special characters in span names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17c337050a0c57947eea07b53c36393805fc3e3", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e17c337050a0c57947eea07b53c36393805fc3e3", "committedDate": "2020-07-21T20:34:47Z", "message": "Resolved URL decoding issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb58b26018ed710133ff0493894b58d70b977640", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bb58b26018ed710133ff0493894b58d70b977640", "committedDate": "2020-07-21T22:08:18Z", "message": "Moved url decoding to parseQueryMap and updated the corresponding unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80a5ccf2b19dbdb2cd3fad4a968962318131883f", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/80a5ccf2b19dbdb2cd3fad4a968962318131883f", "committedDate": "2020-07-22T20:39:04Z", "message": "Added a README file for zPage quickstart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcbd9aa23db84e85639a17f02f25d2e54d5b5f4b", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dcbd9aa23db84e85639a17f02f25d2e54d5b5f4b", "committedDate": "2020-07-22T20:42:13Z", "message": "Add images for README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24ffce2bb7b6a24ba3ad8e86e476710be7ccd76a", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24ffce2bb7b6a24ba3ad8e86e476710be7ccd76a", "committedDate": "2020-07-22T21:02:18Z", "message": "Updated README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5047849b2843b486649d3a286cc36ab627f76901", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5047849b2843b486649d3a286cc36ab627f76901", "committedDate": "2020-07-22T21:52:04Z", "message": "Add frontend images"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a539ed8b5539985017b3a96e9539dd11f70aa1", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/85a539ed8b5539985017b3a96e9539dd11f70aa1", "committedDate": "2020-07-22T22:05:05Z", "message": "Add backend images"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4156123799670059e9ea44cb1a0174b8a65c9aed", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4156123799670059e9ea44cb1a0174b8a65c9aed", "committedDate": "2020-07-22T23:32:06Z", "message": "Added our design doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "265cf27c704f368c0b28c04c555568f1be926e9a", "author": {"user": {"login": "wtyanan", "name": "Terry (Tianyu) Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/265cf27c704f368c0b28c04c555568f1be926e9a", "committedDate": "2020-07-23T17:19:22Z", "message": "Added details on package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c102e45b016ccb12458c3f657fe8cf64c0cc5d2a", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c102e45b016ccb12458c3f657fe8cf64c0cc5d2a", "committedDate": "2020-07-23T19:17:16Z", "message": "Reworded a few lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e977dcf1146700915bbe6d1a2d095aaa79ed131f", "committedDate": "2020-07-23T19:26:44Z", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-java into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ed8ef33353ece317374cb46b29209c030781460c", "committedDate": "2020-07-24T17:09:38Z", "message": "Moved DESIGN.md to a docs folder and changed gradle config to implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f595909769797804702ce7ccca807df9b177e197", "author": {"user": {"login": "wtyanan", "name": "Terry (Tianyu) Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f595909769797804702ce7ccca807df9b177e197", "committedDate": "2020-07-27T14:34:34Z", "message": "Changed wording regarding HttpServer requirement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806b6322ef2e6440c0569e255ffa954cf97da42d", "author": {"user": {"login": "wtyanan", "name": "Terry (Tianyu) Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/806b6322ef2e6440c0569e255ffa954cf97da42d", "committedDate": "2020-07-27T15:12:53Z", "message": "Added zpages folder under docs, resolved broken image links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e4dde8cdcae5bcd69322b04d30fd4b3d85887c2", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e4dde8cdcae5bcd69322b04d30fd4b3d85887c2", "committedDate": "2020-07-27T18:00:10Z", "message": "Resolved comments for the design md file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86c2a517f201cc217acf5f747a62dd55078cafa1", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/86c2a517f201cc217acf5f747a62dd55078cafa1", "committedDate": "2020-07-27T20:40:52Z", "message": "Made a few wording changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c9a5a03bb2e2ea9ad1d62eadc3110794c5c823", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a3c9a5a03bb2e2ea9ad1d62eadc3110794c5c823", "committedDate": "2020-07-29T22:02:47Z", "message": "Wrote a benchmark test for TracezSpanBuckets (#23)\n\n* Scaffolded logic for basic benchmark tests\r\n\r\n* Wrote benchmark tests for TracezSpanBuckets\r\n\r\n* Updated README with benchmark tests\r\n\r\n* Changed the wording slightly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07b2fcf7564f64347c0d4fa4b2e482fec28d247e", "author": {"user": {"login": "wtyanan", "name": "Terry (Tianyu) Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/07b2fcf7564f64347c0d4fa4b2e482fec28d247e", "committedDate": "2020-08-04T18:57:44Z", "message": "Updated README file (#25)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "542f7569c7d47c1565c76912bdddd7ab245c429f", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/542f7569c7d47c1565c76912bdddd7ab245c429f", "committedDate": "2020-08-04T22:17:07Z", "message": "Wrote benchmark tests for TracezDataAggregator (#24)\n\n* Scaffolded logic for basic benchmark tests\r\n\r\n* Wrote benchmark tests for TracezSpanBuckets\r\n\r\n* Updated README with benchmark tests\r\n\r\n* Changed the wording slightly\r\n\r\n* Added a set of benchmark tests for TracezDataAggregator\r\n\r\n* Modified README formatting\r\n\r\n* Changed benchmark test to negate dead code elimination"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe056e3a4dce4816efd2c6e3a7ae626a54e396bc", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fe056e3a4dce4816efd2c6e3a7ae626a54e396bc", "committedDate": "2020-08-04T22:20:58Z", "message": "Merged with original repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f714b4397ad69538999336a4283c08c7a1b0e0a9", "committedDate": "2020-08-05T00:27:38Z", "message": "Added Javadocs to the TracezDataAggregator benchmark tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzc2NTUz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#pullrequestreview-461376553", "createdAt": "2020-08-05T06:34:21Z", "commit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjozNDoyMVrOG78FZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjozNDoyMVrOG78FZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMzU5MA==", "bodyText": "I would add a sentence that describes the hardware (CPU/RAM/OS) used to obtain these results.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465503590", "createdAt": "2020-08-05T06:34:21Z", "author": {"login": "thisthat"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -98,4 +98,123 @@ details. For example, here are the details of the `ChildSpan` latency sample (ro\n The /traceconfigz zPage displays information about the currently active tracing configuration and \n provides an interface for users to modify relevant parameters. Here is what the web page looks like:\n \n-![traceconfigz](img/traceconfigz.png)\n\\ No newline at end of file\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Benchmark Testing\n+\n+This module contains two sets of benchmark tests: one for adding spans to an instance of\n+TracezSpanBuckets and another for retrieving counts and spans with TracezDataAggregator. You can run\n+the tests yourself with the following commands:\n+\n+```\n+./gradlew -PjmhIncludeSingleClass=TracezSpanBucketsBenchmark clean :opentelemetry-sdk-extension-zpages:jmh\n+./gradlew -PjmhIncludeSingleClass=TracezDataAggregatorBenchmark clean :opentelemetry-sdk-extension-zpages:jmh\n+```\n+\n+The expected results for `TracezSpanBucketsBenchmark` are as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzgwMDQ4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#pullrequestreview-461380048", "createdAt": "2020-08-05T06:41:12Z", "commit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo0MToxMlrOG78QSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo0NzozMFrOG78abg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNjM3Ng==", "bodyText": "Yeah I'd personally leave these out of READMEs and paste them in PR to provide some history along with code changes. Especially, it's too hard to repro even with specs about the CPU (except if using a cloud VM) that we couldn't call them expected results.\nHaving JMH to measure future code changes in a relative way is great.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465506376", "createdAt": "2020-08-05T06:41:12Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -98,4 +98,123 @@ details. For example, here are the details of the `ChildSpan` latency sample (ro\n The /traceconfigz zPage displays information about the currently active tracing configuration and \n provides an interface for users to modify relevant parameters. Here is what the web page looks like:\n \n-![traceconfigz](img/traceconfigz.png)\n\\ No newline at end of file\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Benchmark Testing\n+\n+This module contains two sets of benchmark tests: one for adding spans to an instance of\n+TracezSpanBuckets and another for retrieving counts and spans with TracezDataAggregator. You can run\n+the tests yourself with the following commands:\n+\n+```\n+./gradlew -PjmhIncludeSingleClass=TracezSpanBucketsBenchmark clean :opentelemetry-sdk-extension-zpages:jmh\n+./gradlew -PjmhIncludeSingleClass=TracezDataAggregatorBenchmark clean :opentelemetry-sdk-extension-zpages:jmh\n+```\n+\n+The expected results for `TracezSpanBucketsBenchmark` are as follows:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMzU5MA=="}, "originalCommit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNjkyMw==", "bodyText": "Can you add an @Param for this size?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465506923", "createdAt": "2020-08-05T06:42:32Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    // Generate 1 million running spans, span latencies, and error spans\n+    for (int i = 0; i < 1000000; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzYxNA==", "bodyText": "I think it should be possible to pass this as a Gradle parameter if we need to tweak it, we don't need to copy the same benchmark over and over just to check many threads. On the flip side, it's probably nicer to just have a benchmark for each method that's a more important axis for comparison.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465507614", "createdAt": "2020-08-05T06:44:16Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    // Generate 1 million running spans, span latencies, and error spans\n+    for (int i = 0; i < 1000000; i++) {\n+      tracer.spanBuilder(runningSpan).startSpan();\n+      tracer.spanBuilder(latencySpan).startSpan().end();\n+      Span error = tracer.spanBuilder(errorSpan).startSpan();\n+      error.setStatus(Status.UNKNOWN);\n+      error.end();\n+    }\n+  }\n+\n+  /** Get span counts with 1 thread. */\n+  @Benchmark\n+  @Threads(value = 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODU5Mw==", "bodyText": "Actually I guess we could use a constant for completed spans and a param for running spans, that seems to have more variable overhead. The main observation here is 1 million concurrent requests in a single app is probably not possible for almost all apps!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465508593", "createdAt": "2020-08-05T06:46:39Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    // Generate 1 million running spans, span latencies, and error spans\n+    for (int i = 0; i < 1000000; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNjkyMw=="}, "originalCommit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODk3NA==", "bodyText": "Ditto thread can be passed in with a Gradle command, so we don't need to duplicate benchmarks for it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465508974", "createdAt": "2020-08-05T06:47:30Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezSpanBucketsBenchmark.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+/** Benchmark class for {@link TracezSpanBuckets}. */\n+@State(Scope.Benchmark)\n+public class TracezSpanBucketsBenchmark {\n+\n+  private static final String spanName = \"BENCHMARK_SPAN\";\n+  private static ReadableSpan readableSpan;\n+  private TracezSpanBuckets bucket;\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    bucket = new TracezSpanBuckets();\n+    Tracer tracer = OpenTelemetrySdk.getTracerProvider().get(\"TracezZPageBenchmark\");\n+    Span span = tracer.spanBuilder(spanName).startSpan();\n+    span.end();\n+    readableSpan = (ReadableSpan) span;\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public void addToBucket_01Thread() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922e95059d3616de987e26e7b127d7924cca8358", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/922e95059d3616de987e26e7b127d7924cca8358", "committedDate": "2020-08-05T20:15:45Z", "message": "Removed benchmark results from README and added a param to the TracezDataAggregator benchmark tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTIwMjc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#pullrequestreview-462120275", "createdAt": "2020-08-06T01:06:05Z", "commit": {"oid": "922e95059d3616de987e26e7b127d7924cca8358"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTowNjowNVrOG8fqNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTowODozNFrOG8fsuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NjQ1Mg==", "bodyText": "Ah I didn't think about wanting to generate the numbers for all the thread counts in one go. It seems fine then", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r466086452", "createdAt": "2020-08-06T01:06:05Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    // Generate 1 million running spans, span latencies, and error spans\n+    for (int i = 0; i < 1000000; i++) {\n+      tracer.spanBuilder(runningSpan).startSpan();\n+      tracer.spanBuilder(latencySpan).startSpan().end();\n+      Span error = tracer.spanBuilder(errorSpan).startSpan();\n+      error.setStatus(Status.UNKNOWN);\n+      error.end();\n+    }\n+  }\n+\n+  /** Get span counts with 1 thread. */\n+  @Benchmark\n+  @Threads(value = 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzYxNA=="}, "originalCommit": {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NzA0NA==", "bodyText": "Can just pick some \"by feeling\" tiny, small, medium, large, huge numbers, maybe 1, 10, 1000, 1000000", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r466087044", "createdAt": "2020-08-06T01:08:24Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Param({\"1000000\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "922e95059d3616de987e26e7b127d7924cca8358"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NzA5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Generate 1 million running spans, span latencies, and error spans", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r466087099", "createdAt": "2020-08-06T01:08:34Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Param({\"1000000\"})\n+  private int numberOfSpans;\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    // Generate 1 million running spans, span latencies, and error spans", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "922e95059d3616de987e26e7b127d7924cca8358"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d82c49fb7daa1bdeb2640dbfca59fdb275cb5d", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/13d82c49fb7daa1bdeb2640dbfca59fdb275cb5d", "committedDate": "2020-08-06T17:40:54Z", "message": "Update sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ab6f6afdbb19f3cb393ccb3be29fe4dd1893556", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5ab6f6afdbb19f3cb393ccb3be29fe4dd1893556", "committedDate": "2020-08-06T18:10:19Z", "message": "Added multiple param values for TracezDataAggregatorBenchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a4141a519f15b4fa308d36501585f0f5c3f20d", "author": {"user": {"login": "williamhu99", "name": "William Hu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/18a4141a519f15b4fa308d36501585f0f5c3f20d", "committedDate": "2020-08-06T18:10:36Z", "message": "Merge branch 'master' of github.com:williamhu99/opentelemetry-java into master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODE4NDcw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#pullrequestreview-462818470", "createdAt": "2020-08-06T19:34:59Z", "commit": {"oid": "18a4141a519f15b4fa308d36501585f0f5c3f20d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTI2Mjkw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#pullrequestreview-462926290", "createdAt": "2020-08-06T22:49:38Z", "commit": {"oid": "18a4141a519f15b4fa308d36501585f0f5c3f20d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2276, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}