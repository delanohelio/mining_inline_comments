{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjYzMjMy", "number": 746, "title": "Add base aggregator and double/long sum aggregator", "bodyText": "TODO: Add tests", "createdAt": "2020-01-10T23:37:44Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746", "merged": true, "mergeCommit": {"oid": "2d9d8d1d5c52fdb9d6b38feb0b1dad36a75a4f23"}, "closed": true, "closedAt": "2020-01-30T22:03:20Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5HXk7AFqTM0MTQ3NjkzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_hnzXAFqTM1MTE2MjA2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDc2OTM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#pullrequestreview-341476936", "createdAt": "2020-01-10T23:43:41Z", "commit": {"oid": "4a8ed62afd6c168c2de113607658218aae2b3989"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo0Mzo0MVrOFcisVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo0Mzo0MVrOFcisVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3Mjg1Mw==", "bodyText": "the naming is inconsistent here. BaseLongAggregator vs. DoubleAggregator", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r365472853", "createdAt": "2020-01-10T23:43:41Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/BaseAggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregators;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */\n+@ThreadSafe\n+public abstract class BaseAggregator {\n+\n+  /**\n+   * Merge aggregated values between the current instance and the given {@code aggregator}.\n+   *\n+   * @param aggregator value to merge with.\n+   */\n+  public abstract void merge(BaseAggregator aggregator);\n+\n+  /**\n+   * BaseLongAggregator represents the base class for all the available aggregations that work with\n+   * long values.\n+   */\n+  @ThreadSafe\n+  public abstract static class BaseLongAggregator extends BaseAggregator {\n+\n+    /**\n+     * Updates the current aggregator with a newly recorded value.\n+     *\n+     * @param value the new {@code long} value to be added.\n+     */\n+    public abstract void update(long value);\n+  }\n+\n+  /**\n+   * DoubleAggregator represents the base class for all the available aggregations that work with\n+   * double values.\n+   */\n+  @ThreadSafe\n+  public abstract static class DoubleAggregator extends BaseAggregator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a8ed62afd6c168c2de113607658218aae2b3989"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDc3MDIz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#pullrequestreview-341477023", "createdAt": "2020-01-10T23:44:06Z", "commit": {"oid": "4a8ed62afd6c168c2de113607658218aae2b3989"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo0NDowN1rOFcismA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo0NDowN1rOFcismA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjkyMA==", "bodyText": "\ud83e\udd1e", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r365472920", "createdAt": "2020-01-10T23:44:07Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregators;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.aggregators.BaseAggregator.DoubleAggregator;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** DoubleSumAggregator aggregates double values by computing a Sum. */\n+@ThreadSafe\n+public class DoubleSumAggregator extends DoubleAggregator {\n+  // TODO: Change to use DoubleAdder when changed to java8.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a8ed62afd6c168c2de113607658218aae2b3989"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDQ1NzM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#pullrequestreview-342045735", "createdAt": "2020-01-13T18:25:32Z", "commit": {"oid": "4a8ed62afd6c168c2de113607658218aae2b3989"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoyNTozMlrOFdAOPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoyNTozMlrOFdAOPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NjY3MA==", "bodyText": "Can we make all of these interfaces, rather than an abstract classes? Since there's no implementation of the methods, sticking with interfaces will be much cleaner, I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r365956670", "createdAt": "2020-01-13T18:25:32Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/BaseAggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregators;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */\n+@ThreadSafe\n+public abstract class BaseAggregator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a8ed62afd6c168c2de113607658218aae2b3989"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a8ed62afd6c168c2de113607658218aae2b3989", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a8ed62afd6c168c2de113607658218aae2b3989", "committedDate": "2020-01-10T23:36:31Z", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "b64244920de1bb8b7c4d53a809160e164782fb38", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b64244920de1bb8b7c4d53a809160e164782fb38", "committedDate": "2020-01-13T20:53:10Z", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTUyODY1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#pullrequestreview-342152865", "createdAt": "2020-01-13T21:31:45Z", "commit": {"oid": "b64244920de1bb8b7c4d53a809160e164782fb38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMTo0NVrOFdFQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMTo0NVrOFdFQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzOTIyMw==", "bodyText": "What would you think about adding a type parameter like\npublic interface BaseAggregator<T extends BaseAggregator<?>> and then having this method take T as the parameter? Then, you can implement exactly what you can merge with in the concrete implementations, rather than having to check for the self-type on every merge call.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r366039223", "createdAt": "2020-01-13T21:31:45Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/BaseAggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregators;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */\n+@ThreadSafe\n+public interface BaseAggregator {\n+\n+  /**\n+   * Merge aggregated values between the current instance and the given {@code aggregator}.\n+   *\n+   * @param aggregator value to merge with.\n+   */\n+  void merge(BaseAggregator aggregator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64244920de1bb8b7c4d53a809160e164782fb38"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b64244920de1bb8b7c4d53a809160e164782fb38", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b64244920de1bb8b7c4d53a809160e164782fb38", "committedDate": "2020-01-13T20:53:10Z", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "09f6d127c9fcdca856810ff022089abe4fce7a7f", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/09f6d127c9fcdca856810ff022089abe4fce7a7f", "committedDate": "2020-01-14T02:14:48Z", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09f6d127c9fcdca856810ff022089abe4fce7a7f", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/09f6d127c9fcdca856810ff022089abe4fce7a7f", "committedDate": "2020-01-14T02:14:48Z", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "a111d3455490902bab6c6f3adc464c291eeaf674", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a111d3455490902bab6c6f3adc464c291eeaf674", "committedDate": "2020-01-23T02:42:45Z", "message": "Update to use templates and move to main package\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a111d3455490902bab6c6f3adc464c291eeaf674", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a111d3455490902bab6c6f3adc464c291eeaf674", "committedDate": "2020-01-23T02:42:45Z", "message": "Update to use templates and move to main package\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b", "committedDate": "2020-01-24T21:51:44Z", "message": "Move inner classes to top level\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjQ5Mjc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#pullrequestreview-348249275", "createdAt": "2020-01-24T21:59:50Z", "commit": {"oid": "5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo1OTo1MFrOFhrlkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo1OTo1MFrOFhrlkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTQ1OQ==", "bodyText": "2020 \ud83d\ude09", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r370861459", "createdAt": "2020-01-24T21:59:50Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BaseAggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjQ5NTIx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#pullrequestreview-348249521", "createdAt": "2020-01-24T22:00:26Z", "commit": {"oid": "5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMDoyNlrOFhrmLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMDoyNlrOFhrmLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTYxNA==", "bodyText": "2020", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r370861614", "createdAt": "2020-01-24T22:00:26Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/LongSumAggregatorTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjczNDYx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#pullrequestreview-350673461", "createdAt": "2020-01-30T09:16:30Z", "commit": {"oid": "03ca6b03546756c6fbd133522a2e64b98294dfee"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxNjozMFrOFjj8mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxNjo0NVrOFjj9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMzQzMw==", "bodyText": "Nit: Aggregator", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r372833433", "createdAt": "2020-01-30T09:16:30Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03ca6b03546756c6fbd133522a2e64b98294dfee"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMzU3NA==", "bodyText": "Nit: LongAggregator", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r372833574", "createdAt": "2020-01-30T09:16:45Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */\n+@ThreadSafe\n+interface Aggregator<T extends Aggregator<?>> {\n+\n+  /**\n+   * Merge aggregated values between the current instance and the given {@code aggregator}.\n+   *\n+   * @param aggregator value to merge with.\n+   */\n+  void merge(T aggregator);\n+\n+  /**\n+   * BaseLongAggregator represents the base class for all the available aggregations that work with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03ca6b03546756c6fbd133522a2e64b98294dfee"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c53affce106fc262255cc58012793c508679f437", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c53affce106fc262255cc58012793c508679f437", "committedDate": "2020-01-30T19:56:51Z", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "345f984434d021dd75dab3807614ed70d66c3608", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/345f984434d021dd75dab3807614ed70d66c3608", "committedDate": "2020-01-30T19:56:51Z", "message": "Update to use templates and move to main package\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c1a665713a655997b77f06a260d0750e5ccd4a", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/16c1a665713a655997b77f06a260d0750e5ccd4a", "committedDate": "2020-01-30T19:56:51Z", "message": "Move inner classes to top level\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89c31a9f6b90ea3bbb98f288be8b7be2a21a8093", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89c31a9f6b90ea3bbb98f288be8b7be2a21a8093", "committedDate": "2020-01-30T19:56:51Z", "message": "Rename BaseAggregator to Aggregator.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "563c48b2b53db9ceec2c0bd381cd195aebfbb8d0", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/563c48b2b53db9ceec2c0bd381cd195aebfbb8d0", "committedDate": "2020-01-30T19:56:51Z", "message": "Update copyright\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2dfdfb43b85b3c87fc22f21e8e259da514c84f8", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e2dfdfb43b85b3c87fc22f21e8e259da514c84f8", "committedDate": "2020-01-30T19:56:51Z", "message": "./gradlew goJF\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49276380d58fce86dc81a051225e058dfaae151c", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/49276380d58fce86dc81a051225e058dfaae151c", "committedDate": "2020-01-30T19:57:33Z", "message": "Fix comments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03ca6b03546756c6fbd133522a2e64b98294dfee", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/03ca6b03546756c6fbd133522a2e64b98294dfee", "committedDate": "2020-01-24T23:18:45Z", "message": "./gradlew goJF\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "49276380d58fce86dc81a051225e058dfaae151c", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/49276380d58fce86dc81a051225e058dfaae151c", "committedDate": "2020-01-30T19:57:33Z", "message": "Fix comments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTYyMDYy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#pullrequestreview-351162062", "createdAt": "2020-01-30T21:42:30Z", "commit": {"oid": "49276380d58fce86dc81a051225e058dfaae151c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3438, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}