{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTgwOTI3", "number": 1855, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzoxMzozOFrOEwlDWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzoxMzozOFrOEwlDWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzc0MTY5OnYy", "diffSide": "RIGHT", "path": "api/src/jmh/java/io/opentelemetry/trace/DefaultTracerBenchmarks.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzoxMzozOFrOHmPCUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzoyMDowM1rOHmPIuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDI4OQ==", "bodyText": "would it be possible to make this also a method on the span instance?\nI'm struggling with what the name of that method would be right now, though.\nspan.activate() ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1855#discussion_r509854289", "createdAt": "2020-10-22T03:13:38Z", "author": {"login": "jkwatson"}, "path": "api/src/jmh/java/io/opentelemetry/trace/DefaultTracerBenchmarks.java", "diffHunk": "@@ -34,7 +35,7 @@\n   @Warmup(iterations = 5, time = 1)\n   public void measureFullSpanLifecycle() {\n     span = tracer.spanBuilder(\"span\").startSpan();\n-    try (io.opentelemetry.context.Scope ignored = TracingContextUtils.currentContextWith(span)) {\n+    try (io.opentelemetry.context.Scope ignored = Context.current().with(span).makeCurrent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f859e2cbde9cf6e05b94baad5007a644f2e3f19d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDY2MA==", "bodyText": "Oh yeah did have that idea - not sure if it's worth it. But I would just use the same name as Context, so span.makeCurrent(). Does it seem useful to have?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1855#discussion_r509854660", "createdAt": "2020-10-22T03:14:55Z", "author": {"login": "anuraaga"}, "path": "api/src/jmh/java/io/opentelemetry/trace/DefaultTracerBenchmarks.java", "diffHunk": "@@ -34,7 +35,7 @@\n   @Warmup(iterations = 5, time = 1)\n   public void measureFullSpanLifecycle() {\n     span = tracer.spanBuilder(\"span\").startSpan();\n-    try (io.opentelemetry.context.Scope ignored = TracingContextUtils.currentContextWith(span)) {\n+    try (io.opentelemetry.context.Scope ignored = Context.current().with(span).makeCurrent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDI4OQ=="}, "originalCommit": {"oid": "f859e2cbde9cf6e05b94baad5007a644f2e3f19d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDc1MA==", "bodyText": "or maybe Context.inCurrentScope(span) ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1855#discussion_r509854750", "createdAt": "2020-10-22T03:15:11Z", "author": {"login": "jkwatson"}, "path": "api/src/jmh/java/io/opentelemetry/trace/DefaultTracerBenchmarks.java", "diffHunk": "@@ -34,7 +35,7 @@\n   @Warmup(iterations = 5, time = 1)\n   public void measureFullSpanLifecycle() {\n     span = tracer.spanBuilder(\"span\").startSpan();\n-    try (io.opentelemetry.context.Scope ignored = TracingContextUtils.currentContextWith(span)) {\n+    try (io.opentelemetry.context.Scope ignored = Context.current().with(span).makeCurrent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDI4OQ=="}, "originalCommit": {"oid": "f859e2cbde9cf6e05b94baad5007a644f2e3f19d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NTkyOQ==", "bodyText": "I believe that looks like\ninterface Context\n  static Scope inCurrentScope(ImplicitContextKeyed value) {\n    return Context.current().with(value).makeCurrent();\n  }\nFor symmetry, I think we would need a version that also accepts ContextKey. I think I like this a bit less than adding to Span itself (rather, I could add it to ImplicitContextKeyed).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1855#discussion_r509855929", "createdAt": "2020-10-22T03:20:03Z", "author": {"login": "anuraaga"}, "path": "api/src/jmh/java/io/opentelemetry/trace/DefaultTracerBenchmarks.java", "diffHunk": "@@ -34,7 +35,7 @@\n   @Warmup(iterations = 5, time = 1)\n   public void measureFullSpanLifecycle() {\n     span = tracer.spanBuilder(\"span\").startSpan();\n-    try (io.opentelemetry.context.Scope ignored = TracingContextUtils.currentContextWith(span)) {\n+    try (io.opentelemetry.context.Scope ignored = Context.current().with(span).makeCurrent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDI4OQ=="}, "originalCommit": {"oid": "f859e2cbde9cf6e05b94baad5007a644f2e3f19d"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1986, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}