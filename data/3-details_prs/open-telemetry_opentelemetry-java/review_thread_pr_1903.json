{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzY2NDg5", "number": 1903, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyMjowMlrOEysnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNjoyMFrOEystjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk1MjEwOnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyMjowMlrOHpejrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyMjowMlrOHpejrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NDMxOA==", "bodyText": "These were only used in this class so moved them here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513254318", "createdAt": "2020-10-28T08:22:02Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -258,4 +258,15 @@ private static Clock getClock(Span parent, Clock clock) {\n       return MonotonicClock.create(clock);\n     }\n   }\n+\n+  @VisibleForTesting\n+  static boolean isRecording(SamplingResult.Decision decision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1651555df9ceca5db2ab2c964ab50dd1f7be217e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk1NDg4OnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/ImmutableSamplingResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyMjo0OFrOHpelXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyMjo0OFrOHpelXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NDc1MA==", "bodyText": "I think we have a pattern of naming an AutoValue class ImmutableBlah so used that but not sure how cosistent are on it currently. It's a private class anyways", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513254750", "createdAt": "2020-10-28T08:22:48Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/ImmutableSamplingResult.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import static io.opentelemetry.api.common.AttributeKey.doubleKey;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+@AutoValue\n+abstract class ImmutableSamplingResult implements SamplingResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1651555df9ceca5db2ab2c964ab50dd1f7be217e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk2MTM2OnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/ParentBasedSampler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNDoyOFrOHpepMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNDoyOFrOHpepMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NTczMA==", "bodyText": "This is top level now instead of class Samplers.ParentBased.\nActually if ParentBasedSamplerBuilder is made top-level, this class could be made private.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513255730", "createdAt": "2020-10-28T08:24:28Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/ParentBasedSampler.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A Sampler that uses the sampled flag of the parent Span, if present. If the span has no parent,\n+ * this Sampler will use the \"root\" sampler that it is built with. See documentation on the {@link\n+ * Builder} methods for the details on the various configurable options.\n+ */\n+@Immutable\n+public class ParentBasedSampler implements Sampler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk2NzI1OnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/SamplingResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNjowOFrOHpes5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNjowOFrOHpes5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NjY3OQ==", "bodyText": "This is top level now, Samplers.SamplingResult had some stuttering of \"sampl\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513256679", "createdAt": "2020-10-28T08:26:08Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/SamplingResult.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.context.Context;\n+import java.util.List;\n+\n+/**\n+ * Sampling result returned by {@link Sampler#shouldSample(Context, String, String, Span.Kind,\n+ * ReadableAttributes, List)}.\n+ */\n+public interface SamplingResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTk2ODEyOnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/SamplingResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNjoyMFrOHpetbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoyNjo0M1rOHpeuMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NjgxMw==", "bodyText": "Factories for SamplingResult moved to the SamplingResult", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513256813", "createdAt": "2020-10-28T08:26:20Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/SamplingResult.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.context.Context;\n+import java.util.List;\n+\n+/**\n+ * Sampling result returned by {@link Sampler#shouldSample(Context, String, String, Span.Kind,\n+ * ReadableAttributes, List)}.\n+ */\n+public interface SamplingResult {\n+\n+  /**\n+   * Returns a {@link SamplingResult} with no attributes and {@link SamplingResult#getDecision()}\n+   * returning {@code decision}.\n+   *\n+   * <p>This is meant for use by custom {@link Sampler} implementations.\n+   *\n+   * <p>Use {@link #create(Decision, Attributes)} if you need attributes.\n+   *\n+   * @param decision The decision made on the span.\n+   * @return A {@link SamplingResult} with empty attributes and the provided {@code decision}.\n+   */\n+  static SamplingResult create(Decision decision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NzAwOQ==", "bodyText": "Also I think using a method overload (same name) seems consistent with our normal style instead of the previous name empty", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1903#discussion_r513257009", "createdAt": "2020-10-28T08:26:43Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/samplers/SamplingResult.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.trace.samplers;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.context.Context;\n+import java.util.List;\n+\n+/**\n+ * Sampling result returned by {@link Sampler#shouldSample(Context, String, String, Span.Kind,\n+ * ReadableAttributes, List)}.\n+ */\n+public interface SamplingResult {\n+\n+  /**\n+   * Returns a {@link SamplingResult} with no attributes and {@link SamplingResult#getDecision()}\n+   * returning {@code decision}.\n+   *\n+   * <p>This is meant for use by custom {@link Sampler} implementations.\n+   *\n+   * <p>Use {@link #create(Decision, Attributes)} if you need attributes.\n+   *\n+   * @param decision The decision made on the span.\n+   * @return A {@link SamplingResult} with empty attributes and the provided {@code decision}.\n+   */\n+  static SamplingResult create(Decision decision) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NjgxMw=="}, "originalCommit": {"oid": "1535b4476c38299eb8db91484de8cdbc984e7cd3"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2031, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}