{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTU4ODIy", "number": 937, "title": "Add a first implementation for LastValue aggregator for Observers", "bodyText": "", "createdAt": "2020-02-26T23:26:04Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937", "merged": true, "mergeCommit": {"oid": "85a54f546eec361cd1b3f2a47336c91edba6d091"}, "closed": true, "closedAt": "2020-02-27T17:41:33Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIPX6JAFqTM2NTMyMDUwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcId5sAAFqTM2NTgwNTExNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzIwNTA0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#pullrequestreview-365320504", "createdAt": "2020-02-26T23:32:10Z", "commit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozMjoxMFrOFvANgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozMjoxMFrOFvANgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMDg1MA==", "bodyText": "Are we willing to accept that we might be overwriting something that was recorded later than what we're currently holding onto? I'm thinking of the dimensionality reduction use-case for this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384830850", "createdAt": "2020-02-26T23:32:10Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+public final class DoubleLastValueAggregator extends AbstractAggregator {\n+\n+  private static final double DEFAULT_VALUE = 0.0;\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new DoubleLastValueAggregator();\n+        }\n+      };\n+\n+  private final AtomicDouble current = new AtomicDouble(DEFAULT_VALUE);\n+\n+  public static AggregatorFactory getFactory() {\n+    return AGGREGATOR_FACTORY;\n+  }\n+\n+  @Override\n+  void doMergeAndReset(Aggregator aggregator) {\n+    DoubleLastValueAggregator other = (DoubleLastValueAggregator) aggregator;\n+    other.current.set(this.current.getAndSet(DEFAULT_VALUE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzIwNzUw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#pullrequestreview-365320750", "createdAt": "2020-02-26T23:32:52Z", "commit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozMjo1MlrOFvAOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozMjo1MlrOFvAOWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTA2NQ==", "bodyText": "I don't think we want an adder for the last-value impl, do we?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384831065", "createdAt": "2020-02-26T23:32:52Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public final class LongLastValueAggregator extends AbstractAggregator {\n+\n+  private static final long DEFAULT_VALUE = 0L;\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new LongLastValueAggregator();\n+        }\n+      };\n+\n+  // TODO: Change to use LongAdder when changed to java8.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzIxMjI1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#pullrequestreview-365321225", "createdAt": "2020-02-26T23:34:06Z", "commit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozNDowNlrOFvAP2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzozNDowNlrOFvAP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTQ0OA==", "bodyText": "I don't think this is a good default. I actually think we should return a null Point if nothing has been recorded, rather than returning a possibly misleading 0.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384831448", "createdAt": "2020-02-26T23:34:06Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public final class LongLastValueAggregator extends AbstractAggregator {\n+\n+  private static final long DEFAULT_VALUE = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "977faa7990622cdc86c7211bb5fd2aa0c53207d1", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/977faa7990622cdc86c7211bb5fd2aa0c53207d1", "committedDate": "2020-02-26T23:25:46Z", "message": "Add a first implementation for LastValue aggregator for Observers\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "ec57de83f99fd50dc31d8ca5231dde454641e4c8", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec57de83f99fd50dc31d8ca5231dde454641e4c8", "committedDate": "2020-02-26T23:57:44Z", "message": "Add a first implementation for LastValue aggregator for Observers\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34", "committedDate": "2020-02-27T00:24:10Z", "message": "Add a first implementation for LastValue aggregator for Observers\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec57de83f99fd50dc31d8ca5231dde454641e4c8", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec57de83f99fd50dc31d8ca5231dde454641e4c8", "committedDate": "2020-02-26T23:57:44Z", "message": "Add a first implementation for LastValue aggregator for Observers\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34", "committedDate": "2020-02-27T00:24:10Z", "message": "Add a first implementation for LastValue aggregator for Observers\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzQwNjU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#pullrequestreview-365340654", "createdAt": "2020-02-27T00:27:34Z", "commit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyNzozNFrOFvBRvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyNzozNFrOFvBRvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMxNg==", "bodyText": "Is it possible that an aggregator is asked to report data before the observer has had a chance to report, hence leading to a zero value recorded? The lifecycle in this is unclear to me. I'm also ok addressing this in a follow-up PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#discussion_r384848316", "createdAt": "2020-02-27T00:27:34Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/DoubleLastValueAggregator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregator;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n+\n+/**\n+ * Aggregator that aggregates recorded values by storing the last recorded value.\n+ *\n+ * <p>Limitations:\n+ *\n+ * <ul>\n+ *   <li>The current implementation does not store a time when the value was recorded, so merging\n+ *       multiple LastValueAggregators will not preserve the ordering of records. This is not a\n+ *       problem because LastValueAggregator is currently only available for Observers which record\n+ *       all values once.\n+ *   <li>The current implementation does not properly reset the current value, it should use a\n+ *       {@code null} value instead of 0. This is not a problem because LastValueAggregator is\n+ *       currently only available for Observers which do not reuse reset instances.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ff87cd3eb2c1262bd896d62d7d96473d8e3d34"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694eefaa30a4462c52da856060916071447377b0", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/694eefaa30a4462c52da856060916071447377b0", "committedDate": "2020-02-27T03:03:12Z", "message": "Fix issue when last value aggregation has no records.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODA1MTE3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/937#pullrequestreview-365805117", "createdAt": "2020-02-27T16:27:44Z", "commit": {"oid": "694eefaa30a4462c52da856060916071447377b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3106, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}