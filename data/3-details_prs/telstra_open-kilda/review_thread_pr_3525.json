{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODExMTI0", "number": 3525, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzoxNjowMVrOEIPyBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NToyMFrOEIQhjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDgyNjMwOnYy", "diffSide": "LEFT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzoxNjowMVrOGoF1xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MzowNlrOGoIs7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5MTkxMA==", "bodyText": "why?", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444691910", "createdAt": "2020-06-24T07:16:01Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -114,49 +117,13 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         cleanup: \"Restore topology to the original state, remove the flow\"\n         flowHelperV2.deleteFlow(flow.flowId)\n         portDown && !portUp && antiflap.portUp(isl.dstSwitch.dpId, isl.dstPort)\n-        broughtDownPorts.every { antiflap.portUp(it.switchId, it.portNo) }\n-        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+        broughtDownIsls.each { antiflap.portUp(it.srcSwitch.dpId, it.srcPort) }\n+        wait(discoveryInterval + WAIT_OFFSET) {\n             assert northbound.getActiveLinks().size() == topology.islsForActiveSwitches.size() * 2\n         }\n         database.resetCosts()\n     }\n \n-    @Tags([VIRTUAL, LOW_PRIORITY])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczODc5OA==", "bodyText": "It is failed isl that cause the flow to reroute, so the test makes no sense. Moreover, it is misleading, since switch disconnect itself does not cause a flow reroute (for example flow will be absolutely fine if round-trip remain active)", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444738798", "createdAt": "2020-06-24T08:43:06Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -114,49 +117,13 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         cleanup: \"Restore topology to the original state, remove the flow\"\n         flowHelperV2.deleteFlow(flow.flowId)\n         portDown && !portUp && antiflap.portUp(isl.dstSwitch.dpId, isl.dstPort)\n-        broughtDownPorts.every { antiflap.portUp(it.switchId, it.portNo) }\n-        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+        broughtDownIsls.each { antiflap.portUp(it.srcSwitch.dpId, it.srcPort) }\n+        wait(discoveryInterval + WAIT_OFFSET) {\n             assert northbound.getActiveLinks().size() == topology.islsForActiveSwitches.size() * 2\n         }\n         database.resetCosts()\n     }\n \n-    @Tags([VIRTUAL, LOW_PRIORITY])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5MTkxMA=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDg1ODM2OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzoyNjo1MVrOGoGKBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyODo0NlrOGoIMyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5NzA5Mg==", "bodyText": "I am afraid it can be unstable\nfor example:\n\nwe will have original reroute + 3 retries and move on to the next step\nin the next step(\"Flows are 'Down'\") we will get 'isl timeout'\nsystem will try to reroute the flow, flowStatus will be changed to IN_PROGRESS, but we expect that flowStatus is DOWN", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444697092", "createdAt": "2020-06-24T07:26:51Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -455,17 +421,9 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n             assert !firstFlowHistory.find { it.taskId =~ /.+ : retry #1/ }\n             def secondFlowHistory = northbound.getFlowHistory(secondFlow.flowId).findAll { it.action == REROUTE_ACTION }\n             assert secondFlowHistory.findAll { it.taskId =~ /.+ : retry #2/ }.size() >= 1\n-            // reroute caused by failed ISL on backup path\n-            assert secondFlowHistory.findAll {\n-                it.details =~ /Reason: ISL (.*) become INACTIVE because of FAIL TIMEOUT (.*)/\n-            }.size() == 1\n-            /* NOTE: retry is available for a flow when switchUp event appears on a transit switch\n-            We can't check that 3 attempts of reroute are available in flow history, system can't guarantee it.\n-            Reason: during retrying ISL on backup path can fail -> new reroute event(e.g. REROUTE_FAIL_ISL)\n-            will be triggered and put in the queue of reroute -> for instance: in the queue we have 3rd attempt\n-            and REROUTE_FAIL_ISL -> these two reroutes will be merged based on some algorithm ->\n-            system execute one reroute only.\n-            (System doesn't merge reason of reroute, it just pick any reason from queue) */\n+            /*there should be original reroute + 3 retries. We are not checking the #3 retry directly, since it may\n+            have its reason changed to 'isl timeout' because ISL is about to fail due to a disconnected switch*/\n+            assert secondFlowHistory.size() == 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMDU2OA==", "bodyText": "we wait until all non-rtl isls get failed before checking that flows are down. So isl timeout reroute will appear before that", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444730568", "createdAt": "2020-06-24T08:28:46Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -455,17 +421,9 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n             assert !firstFlowHistory.find { it.taskId =~ /.+ : retry #1/ }\n             def secondFlowHistory = northbound.getFlowHistory(secondFlow.flowId).findAll { it.action == REROUTE_ACTION }\n             assert secondFlowHistory.findAll { it.taskId =~ /.+ : retry #2/ }.size() >= 1\n-            // reroute caused by failed ISL on backup path\n-            assert secondFlowHistory.findAll {\n-                it.details =~ /Reason: ISL (.*) become INACTIVE because of FAIL TIMEOUT (.*)/\n-            }.size() == 1\n-            /* NOTE: retry is available for a flow when switchUp event appears on a transit switch\n-            We can't check that 3 attempts of reroute are available in flow history, system can't guarantee it.\n-            Reason: during retrying ISL on backup path can fail -> new reroute event(e.g. REROUTE_FAIL_ISL)\n-            will be triggered and put in the queue of reroute -> for instance: in the queue we have 3rd attempt\n-            and REROUTE_FAIL_ISL -> these two reroutes will be merged based on some algorithm ->\n-            system execute one reroute only.\n-            (System doesn't merge reason of reroute, it just pick any reason from queue) */\n+            /*there should be original reroute + 3 retries. We are not checking the #3 retry directly, since it may\n+            have its reason changed to 'isl timeout' because ISL is about to fail due to a disconnected switch*/\n+            assert secondFlowHistory.size() == 4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5NzA5Mg=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDg4MDAwOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzozMzo1MVrOGoGXZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOToxMzoyM1rOGoyPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMDUxNg==", "bodyText": "rtIsls -> nonRtIsls ?", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444700516", "createdAt": "2020-06-24T07:33:51Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -474,11 +432,20 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n \n         and: \"Flows are 'Down'\"\n+        def rtIsls = topology.getRelatedIsls(switchPair1.src).findAll {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMDY5MQ==", "bodyText": "right", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444730691", "createdAt": "2020-06-24T08:29:00Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -474,11 +432,20 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n \n         and: \"Flows are 'Down'\"\n+        def rtIsls = topology.getRelatedIsls(switchPair1.src).findAll {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMDUxNg=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQxNTM1MQ==", "bodyText": "it is not fixed", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r445415351", "createdAt": "2020-06-25T09:06:08Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -474,11 +432,20 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n \n         and: \"Flows are 'Down'\"\n+        def rtIsls = topology.getRelatedIsls(switchPair1.src).findAll {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMDUxNg=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQxOTMzNw==", "bodyText": "yeah I know, haven't done the push yet. will reask the review when done", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r445419337", "createdAt": "2020-06-25T09:13:23Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -474,11 +432,20 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n \n         and: \"Flows are 'Down'\"\n+        def rtIsls = topology.getRelatedIsls(switchPair1.src).findAll {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMDUxNg=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDg4MTAxOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzozNDoxN1rOGoGYIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODozMDowOVrOGoIP1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMDcwNg==", "bodyText": "why do we need to verify non rtIsls in this test? It is already tested in RoundTripIslSpec", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444700706", "createdAt": "2020-06-24T07:34:17Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -474,11 +432,20 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n \n         and: \"Flows are 'Down'\"\n+        def rtIsls = topology.getRelatedIsls(switchPair1.src).findAll {\n+            !it.srcSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD) ||\n+                !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+        }\n+        Wrappers.wait(discoveryTimeout) {\n+            def allLinks = northbound.getAllLinks()\n+            rtIsls.forEach { assert islUtils.getIslInfo(allLinks, it).get().state == FAILED }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTM1MA==", "bodyText": "explained above. Required to wait for all non-rtl isls to get failed so that 'isl timeout' reason does not get in the way when verifying history", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444731350", "createdAt": "2020-06-24T08:30:09Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -474,11 +432,20 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n \n         and: \"Flows are 'Down'\"\n+        def rtIsls = topology.getRelatedIsls(switchPair1.src).findAll {\n+            !it.srcSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD) ||\n+                !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+        }\n+        Wrappers.wait(discoveryTimeout) {\n+            def allLinks = northbound.getAllLinks()\n+            rtIsls.forEach { assert islUtils.getIslInfo(allLinks, it).get().state == FAILED }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMDcwNg=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkwMzExOnYy", "diffSide": "LEFT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/FlowRulesSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0MToyMlrOGoGl1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MDozMlrOGoInCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNDIxMw==", "bodyText": "is it obsolete?", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444704213", "createdAt": "2020-06-24T07:41:22Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/FlowRulesSpec.groovy", "diffHunk": "@@ -67,34 +66,6 @@ class FlowRulesSpec extends HealthCheckSpecification {\n         dstSwDefaultRules = northbound.getSwitchRules(dstSwitch.dpId).flowEntries\n     }\n \n-    @Tags([VIRTUAL, SMOKE])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczNzI4OQ==", "bodyText": "already tested in other specs", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444737289", "createdAt": "2020-06-24T08:40:32Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/FlowRulesSpec.groovy", "diffHunk": "@@ -67,34 +66,6 @@ class FlowRulesSpec extends HealthCheckSpecification {\n         dstSwDefaultRules = northbound.getSwitchRules(dstSwitch.dpId).flowEntries\n     }\n \n-    @Tags([VIRTUAL, SMOKE])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNDIxMw=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkzMzc3OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/SwitchDeleteSpec.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1MToxMFrOGoG5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDozODozOVrOGo1GSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwOTMyMw==", "bodyText": "are you sure that you want to delete isl with force option ?", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444709323", "createdAt": "2020-06-24T07:51:10Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/SwitchDeleteSpec.groovy", "diffHunk": "@@ -127,24 +125,18 @@ class SwitchDeleteSpec extends HealthCheckSpecification {\n         \"casual\"        | getFlowHelperV2().randomFlow(*getTopology().getActiveSwitches()[0..1])\n     }\n \n-    @Tags(VIRTUAL)\n+    @Tidy\n     def \"Able to delete an inactive switch without any ISLs\"() {\n         given: \"An inactive switch without any ISLs\"\n         def sw = topology.getActiveSwitches()[0]\n         def swIsls = topology.getRelatedIsls(sw)\n-\n-        // deactivate all active ISLs on switch\n+        // port down on all active ISLs on switch\n         swIsls.each { antiflap.portDown(sw.dpId, it.srcPort) }\n         TimeUnit.SECONDS.sleep(2) //receive any in-progress disco packets\n-        Wrappers.wait(WAIT_OFFSET) {\n-            swIsls.each { assert islUtils.getIslInfo(it).get().state == IslChangeType.FAILED }\n-        }\n-\n         // delete all ISLs on switch\n         swIsls.each {\n-            northbound.deleteLink(islUtils.toLinkParameters(it))\n+            northbound.deleteLink(islUtils.toLinkParameters(it), true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTg0NQ==", "bodyText": "no, will revisit this place", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444739845", "createdAt": "2020-06-24T08:44:56Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/SwitchDeleteSpec.groovy", "diffHunk": "@@ -127,24 +125,18 @@ class SwitchDeleteSpec extends HealthCheckSpecification {\n         \"casual\"        | getFlowHelperV2().randomFlow(*getTopology().getActiveSwitches()[0..1])\n     }\n \n-    @Tags(VIRTUAL)\n+    @Tidy\n     def \"Able to delete an inactive switch without any ISLs\"() {\n         given: \"An inactive switch without any ISLs\"\n         def sw = topology.getActiveSwitches()[0]\n         def swIsls = topology.getRelatedIsls(sw)\n-\n-        // deactivate all active ISLs on switch\n+        // port down on all active ISLs on switch\n         swIsls.each { antiflap.portDown(sw.dpId, it.srcPort) }\n         TimeUnit.SECONDS.sleep(2) //receive any in-progress disco packets\n-        Wrappers.wait(WAIT_OFFSET) {\n-            swIsls.each { assert islUtils.getIslInfo(it).get().state == IslChangeType.FAILED }\n-        }\n-\n         // delete all ISLs on switch\n         swIsls.each {\n-            northbound.deleteLink(islUtils.toLinkParameters(it))\n+            northbound.deleteLink(islUtils.toLinkParameters(it), true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwOTMyMw=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2NjE4Ng==", "bodyText": "reverted the changes here as it was before", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r445466186", "createdAt": "2020-06-25T10:38:39Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/SwitchDeleteSpec.groovy", "diffHunk": "@@ -127,24 +125,18 @@ class SwitchDeleteSpec extends HealthCheckSpecification {\n         \"casual\"        | getFlowHelperV2().randomFlow(*getTopology().getActiveSwitches()[0..1])\n     }\n \n-    @Tags(VIRTUAL)\n+    @Tidy\n     def \"Able to delete an inactive switch without any ISLs\"() {\n         given: \"An inactive switch without any ISLs\"\n         def sw = topology.getActiveSwitches()[0]\n         def swIsls = topology.getRelatedIsls(sw)\n-\n-        // deactivate all active ISLs on switch\n+        // port down on all active ISLs on switch\n         swIsls.each { antiflap.portDown(sw.dpId, it.srcPort) }\n         TimeUnit.SECONDS.sleep(2) //receive any in-progress disco packets\n-        Wrappers.wait(WAIT_OFFSET) {\n-            swIsls.each { assert islUtils.getIslInfo(it).get().state == IslChangeType.FAILED }\n-        }\n-\n         // delete all ISLs on switch\n         swIsls.each {\n-            northbound.deleteLink(islUtils.toLinkParameters(it))\n+            northbound.deleteLink(islUtils.toLinkParameters(it), true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwOTMyMw=="}, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk0Nzk4OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/SwitchDeleteSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NToyMFrOGoHC2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NToyMFrOGoHC2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMTY0Mw==", "bodyText": "do we really need this verification?\non the one hand we know that switch was deleted on the other hand switch was deleted with the force option and switch is still connected to FL\nlet it be, I don't have strict opinion here", "url": "https://github.com/telstra/open-kilda/pull/3525#discussion_r444711643", "createdAt": "2020-06-24T07:55:20Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/SwitchDeleteSpec.groovy", "diffHunk": "@@ -189,12 +178,13 @@ class SwitchDeleteSpec extends HealthCheckSpecification {\n             }\n         }\n \n-        and: \"Cleanup: restore the switch, ISLs and reset costs\"\n+        cleanup: \"Restore the switch, ISLs and reset costs\"\n         // restore switch\n         def blockData = lockKeeper.knockoutSwitch(sw, mgmtFlManager)\n-        lockKeeper.reviveSwitch(sw, blockData)\n-        Wrappers.wait(WAIT_OFFSET) { assert northbound.activeSwitches.any { it.switchId == sw.dpId } }\n-\n+        Wrappers.wait(WAIT_OFFSET) {\n+            mgmtFlManager.getFloodlightService(sw.getRegion()).getSwitches().every { it.switchId != sw.dpId }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a47837719c784b1b01ca3f5d22814da95596e66"}, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1856, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}