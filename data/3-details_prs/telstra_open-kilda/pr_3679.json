{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTUzNTgz", "number": 3679, "title": "Retry reroute with max_latency strategy", "bodyText": "When flow with MAX_LATENCY path computation strategy is rerouted or updated and path with required latency and bandwidth is not found then system should try to build a path without latency restrictions. If flow has a path that violates latency or bandwidth requirements then the flow should be in DEGRADED state.", "createdAt": "2020-08-11T08:31:28Z", "url": "https://github.com/telstra/open-kilda/pull/3679", "merged": true, "mergeCommit": {"oid": "470e9bd2559dc181657044b4fa985d5c79e9d428"}, "closed": true, "closedAt": "2020-08-24T20:07:37Z", "author": {"login": "niksv"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-k5R4ABqjM2NTM0ODE0NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCIVMAAFqTQ3MzgxODk5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb9b6cc28007740d4592510ceaaf07ec404b128a", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/cb9b6cc28007740d4592510ceaaf07ec404b128a", "committedDate": "2020-08-11T08:29:47Z", "message": "Retry reroute with max_latecncy strategy"}, "afterCommit": {"oid": "53caa059daad2793471418709bcb43cb6fb92410", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/53caa059daad2793471418709bcb43cb6fb92410", "committedDate": "2020-08-13T19:08:11Z", "message": "Rework MAX_LATENCY path computation strategy\n\nWhen flow with MAX_LATENCY path computation strategy is rerouted or updated and path with required latency and bandwidth is not found then system should try to build a path without latency restrictions. If flow has a path that violates latency or bandwidth requirements then the flow should be in DEGRADED state."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4a7d5b814e8acfbebf8b4bc17101189f10178c8", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/e4a7d5b814e8acfbebf8b4bc17101189f10178c8", "committedDate": "2020-08-14T10:25:46Z", "message": "Rework MAX_LATENCY path computation strategy\n\nWhen flow with MAX_LATENCY path computation strategy is rerouted or updated and path with required latency and bandwidth is not found then system should try to build a path without latency restrictions. If flow has a path that violates latency or bandwidth requirements then the flow should be in DEGRADED state."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53caa059daad2793471418709bcb43cb6fb92410", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/53caa059daad2793471418709bcb43cb6fb92410", "committedDate": "2020-08-13T19:08:11Z", "message": "Rework MAX_LATENCY path computation strategy\n\nWhen flow with MAX_LATENCY path computation strategy is rerouted or updated and path with required latency and bandwidth is not found then system should try to build a path without latency restrictions. If flow has a path that violates latency or bandwidth requirements then the flow should be in DEGRADED state."}, "afterCommit": {"oid": "e4a7d5b814e8acfbebf8b4bc17101189f10178c8", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/e4a7d5b814e8acfbebf8b4bc17101189f10178c8", "committedDate": "2020-08-14T10:25:46Z", "message": "Rework MAX_LATENCY path computation strategy\n\nWhen flow with MAX_LATENCY path computation strategy is rerouted or updated and path with required latency and bandwidth is not found then system should try to build a path without latency restrictions. If flow has a path that violates latency or bandwidth requirements then the flow should be in DEGRADED state."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTc5NjQ5", "url": "https://github.com/telstra/open-kilda/pull/3679#pullrequestreview-468179649", "createdAt": "2020-08-17T05:53:21Z", "commit": {"oid": "e4a7d5b814e8acfbebf8b4bc17101189f10178c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNDI0MzAy", "url": "https://github.com/telstra/open-kilda/pull/3679#pullrequestreview-472424302", "createdAt": "2020-08-21T11:48:55Z", "commit": {"oid": "e4a7d5b814e8acfbebf8b4bc17101189f10178c8"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo0ODo1NVrOHEqMaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowMTozNFrOHEqhMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzY1Ng==", "bodyText": "em... as far as I saw the code of PathComputer - in this case, it will use flow.getPathComputationStrategy() twice. First time as a \"normal\" strategy, second time as a \"backup\" strategy.", "url": "https://github.com/telstra/open-kilda/pull/3679#discussion_r474647656", "createdAt": "2020-08-21T11:48:55Z", "author": {"login": "surabujin"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/reroute/actions/AllocatePrimaryResourcesAction.java", "diffHunk": "@@ -70,15 +70,18 @@ protected void allocate(FlowRerouteFsm stateMachine)\n \n         log.debug(\"Finding a new primary path for flow {}\", flowId);\n \n-        PathPair potentialPath;\n+        GetPathsResult potentialPath;\n         if (stateMachine.isIgnoreBandwidth()) {\n             boolean originalIgnoreBandwidth = flow.isIgnoreBandwidth();\n             flow.setIgnoreBandwidth(true);\n-            potentialPath = pathComputer.getPath(flow);\n+            potentialPath = pathComputer.getPath(flow, getBackUpStrategies(flow.getPathComputationStrategy()));\n             flow.setIgnoreBandwidth(originalIgnoreBandwidth);\n         } else {\n-            potentialPath = pathComputer.getPath(flow, flow.getFlowPathIds());\n+            potentialPath = pathComputer.getPath(\n+                    flow, flow.getFlowPathIds(), getBackUpStrategies(flow.getPathComputationStrategy()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a7d5b814e8acfbebf8b4bc17101189f10178c8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1Mjk3Ng==", "bodyText": "Bad/unhandy API...\nAdd one mandatory strategy argument and raise an obvious exception in case of failure. In this case caller will be responsible for loop over required strategies and will alway know with strategy was used (no need to pass it via response).", "url": "https://github.com/telstra/open-kilda/pull/3679#discussion_r474652976", "createdAt": "2020-08-21T12:01:34Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/PathComputer.java", "diffHunk": "@@ -38,8 +38,9 @@\n      * @param flow the {@link Flow} instance\n      * @return {@link PathPair} instances\n      */\n-    default PathPair getPath(Flow flow) throws UnroutableFlowException, RecoverableException {\n-        return getPath(flow, Collections.emptyList());\n+    default GetPathsResult getPath(Flow flow, PathComputationStrategy... backUpStrategies)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a7d5b814e8acfbebf8b4bc17101189f10178c8"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczODE4OTkx", "url": "https://github.com/telstra/open-kilda/pull/3679#pullrequestreview-473818991", "createdAt": "2020-08-24T20:07:28Z", "commit": {"oid": "e4a7d5b814e8acfbebf8b4bc17101189f10178c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3549, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}