{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjI5NzE4", "number": 3659, "title": "extend PartialUpdateSpec", "bodyText": "", "createdAt": "2020-07-24T11:15:43Z", "url": "https://github.com/telstra/open-kilda/pull/3659", "merged": true, "mergeCommit": {"oid": "0de44ec0642bc2efc629063b349a25dd819b450a"}, "closed": true, "closedAt": "2020-08-13T10:12:13Z", "author": {"login": "andriidovhan"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc59cxWAFqTQ1ODI4NTY5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-dIbDAFqTQ2NjYyMTk3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mjg1Njk2", "url": "https://github.com/telstra/open-kilda/pull/3659#pullrequestreview-458285696", "createdAt": "2020-07-30T10:40:46Z", "commit": {"oid": "da7b28e0fc6f79063bfd140d2309a53b22d57cca"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0MDo0NlrOG5dt2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo1NToxM1rOG5eIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwODg4OA==", "bodyText": "'flow' may be null in case of assumption error", "url": "https://github.com/telstra/open-kilda/pull/3659#discussion_r462908888", "createdAt": "2020-07-30T10:40:46Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/PartialUpdateSpec.groovy", "diffHunk": "@@ -529,6 +551,92 @@ class PartialUpdateSpec extends HealthCheckSpecification {\n         ]\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"Able to update flow encapsulationType using partial update\"() {\n+        given: \"A flow with a 'transit_vlan' encapsulation\"\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            it.src.noviflow && !it.src.wb5164 && it.dst.noviflow && !it.dst.wb5164\n+        }\n+        assumeTrue(\"Unable to find required switches in topology\", switchPair as boolean)\n+\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flow.encapsulationType = FlowEncapsulationType.TRANSIT_VLAN\n+        flowHelperV2.addFlow(flow)\n+\n+        def originalCookies = northbound.getSwitchRules(switchPair.src.dpId).flowEntries.findAll {\n+            !new Cookie(it.cookie).serviceFlag\n+        }\n+\n+        when: \"Request a flow partial update for an encapsulationType field(vxlan)\"\n+        def newEncapsulationTypeValue = FlowEncapsulationType.VXLAN.toString().toLowerCase()\n+        def updateRequest = new FlowPatchV2().tap { it.encapsulationType = newEncapsulationTypeValue }\n+        def response = flowHelperV2.partialUpdate(flow.flowId, updateRequest)\n+\n+        then: \"Update response reflects the changes\"\n+        response.encapsulationType == newEncapsulationTypeValue\n+\n+        and: \"Changes actually took place\"\n+        northboundV2.getFlow(flow.flowId).encapsulationType == newEncapsulationTypeValue\n+\n+        and: \"Flow rules have been reinstalled\"\n+        !northbound.getSwitchRules(switchPair.src.dpId).flowEntries.findAll {\n+            !new Cookie(it.cookie).serviceFlag\n+        }.any { it in originalCookies }\n+\n+        cleanup: \"Remove the flow\"\n+        flowHelperV2.deleteFlow(flow.flowId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7b28e0fc6f79063bfd140d2309a53b22d57cca"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxNTY3Nw==", "bodyText": "we have 20+ qinq tests that do updates and verify them. Can we use partial update in some of those tests instead?", "url": "https://github.com/telstra/open-kilda/pull/3659#discussion_r462915677", "createdAt": "2020-07-30T10:55:13Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/PartialUpdateSpec.groovy", "diffHunk": "@@ -529,6 +551,92 @@ class PartialUpdateSpec extends HealthCheckSpecification {\n         ]\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"Able to update flow encapsulationType using partial update\"() {\n+        given: \"A flow with a 'transit_vlan' encapsulation\"\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            it.src.noviflow && !it.src.wb5164 && it.dst.noviflow && !it.dst.wb5164\n+        }\n+        assumeTrue(\"Unable to find required switches in topology\", switchPair as boolean)\n+\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flow.encapsulationType = FlowEncapsulationType.TRANSIT_VLAN\n+        flowHelperV2.addFlow(flow)\n+\n+        def originalCookies = northbound.getSwitchRules(switchPair.src.dpId).flowEntries.findAll {\n+            !new Cookie(it.cookie).serviceFlag\n+        }\n+\n+        when: \"Request a flow partial update for an encapsulationType field(vxlan)\"\n+        def newEncapsulationTypeValue = FlowEncapsulationType.VXLAN.toString().toLowerCase()\n+        def updateRequest = new FlowPatchV2().tap { it.encapsulationType = newEncapsulationTypeValue }\n+        def response = flowHelperV2.partialUpdate(flow.flowId, updateRequest)\n+\n+        then: \"Update response reflects the changes\"\n+        response.encapsulationType == newEncapsulationTypeValue\n+\n+        and: \"Changes actually took place\"\n+        northboundV2.getFlow(flow.flowId).encapsulationType == newEncapsulationTypeValue\n+\n+        and: \"Flow rules have been reinstalled\"\n+        !northbound.getSwitchRules(switchPair.src.dpId).flowEntries.findAll {\n+            !new Cookie(it.cookie).serviceFlag\n+        }.any { it in originalCookies }\n+\n+        cleanup: \"Remove the flow\"\n+        flowHelperV2.deleteFlow(flow.flowId)\n+    }\n+\n+    @Tidy\n+    def \"Able to update innerVlanId/vlanId using partial update\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7b28e0fc6f79063bfd140d2309a53b22d57cca"}, "originalPosition": 110}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da7b28e0fc6f79063bfd140d2309a53b22d57cca", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/da7b28e0fc6f79063bfd140d2309a53b22d57cca", "committedDate": "2020-07-24T11:15:26Z", "message": "extend PartialUpdateSpec"}, "afterCommit": {"oid": "f94f8bd9dfa474809bbafd1342db4951ab3a4145", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/f94f8bd9dfa474809bbafd1342db4951ab3a4145", "committedDate": "2020-07-31T09:09:20Z", "message": "extend PartialUpdateSpec"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNzY2Mzkx", "url": "https://github.com/telstra/open-kilda/pull/3659#pullrequestreview-460766391", "createdAt": "2020-08-04T12:31:07Z", "commit": {"oid": "f94f8bd9dfa474809bbafd1342db4951ab3a4145"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def61ecda6afe5bc67d829f9d1384feb1eaa296e", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/def61ecda6afe5bc67d829f9d1384feb1eaa296e", "committedDate": "2020-08-04T12:34:38Z", "message": "extend PartialUpdateSpec"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f94f8bd9dfa474809bbafd1342db4951ab3a4145", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/f94f8bd9dfa474809bbafd1342db4951ab3a4145", "committedDate": "2020-07-31T09:09:20Z", "message": "extend PartialUpdateSpec"}, "afterCommit": {"oid": "def61ecda6afe5bc67d829f9d1384feb1eaa296e", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/def61ecda6afe5bc67d829f9d1384feb1eaa296e", "committedDate": "2020-08-04T12:34:38Z", "message": "extend PartialUpdateSpec"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NjIxOTc2", "url": "https://github.com/telstra/open-kilda/pull/3659#pullrequestreview-466621976", "createdAt": "2020-08-13T10:05:50Z", "commit": {"oid": "def61ecda6afe5bc67d829f9d1384feb1eaa296e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3543, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}