{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MDc4NTUy", "number": 3221, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTo1MzozM1rODh0p_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTo1MzozM1rODh0p_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzkyMzE4OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/multitable/MultitableFlowsSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTo1MzozM1rOFsxYKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjozNDo0NFrOFs1fRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5MDY2NQ==", "bodyText": "I don't really follow how desired path is connected with this line. So all paths may have a protected path available, but there are no guarantees that the picked desiredPath will have a suitable protected path", "url": "https://github.com/telstra/open-kilda/pull/3221#discussion_r382490665", "createdAt": "2020-02-21T09:53:33Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/multitable/MultitableFlowsSpec.groovy", "diffHunk": "@@ -365,11 +365,12 @@ mode with existing flows and hold flows of different table-mode types\"() {\n         List<PathNode> desiredPath = null\n         List<Switch> involvedSwitches = null\n         def switchPair = topologyHelper.allNotNeighboringSwitchPairs.collectMany { [it, it.reversed] }.find { pair ->\n-            desiredPath = pair.paths.find { path ->\n-                involvedSwitches = pathHelper.getInvolvedSwitches(path)\n-                involvedSwitches.size() == 3 &&\n-                        involvedSwitches.every { it.features.contains(SwitchFeature.MULTI_TABLE) }\n+            def allPaths = pair.paths.findAll { path ->\n+                pathHelper.getInvolvedSwitches(path).every { it.features.contains(SwitchFeature.MULTI_TABLE) }\n             }\n+            desiredPath = allPaths.find { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+            // make sure that alternative path for protected path is available\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc311e71198b81a8e7f5488f8f998960185763ba"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1ODAyMg==", "bodyText": "can't agree more.\nfixed", "url": "https://github.com/telstra/open-kilda/pull/3221#discussion_r382558022", "createdAt": "2020-02-21T12:34:44Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/multitable/MultitableFlowsSpec.groovy", "diffHunk": "@@ -365,11 +365,12 @@ mode with existing flows and hold flows of different table-mode types\"() {\n         List<PathNode> desiredPath = null\n         List<Switch> involvedSwitches = null\n         def switchPair = topologyHelper.allNotNeighboringSwitchPairs.collectMany { [it, it.reversed] }.find { pair ->\n-            desiredPath = pair.paths.find { path ->\n-                involvedSwitches = pathHelper.getInvolvedSwitches(path)\n-                involvedSwitches.size() == 3 &&\n-                        involvedSwitches.every { it.features.contains(SwitchFeature.MULTI_TABLE) }\n+            def allPaths = pair.paths.findAll { path ->\n+                pathHelper.getInvolvedSwitches(path).every { it.features.contains(SwitchFeature.MULTI_TABLE) }\n             }\n+            desiredPath = allPaths.find { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+            // make sure that alternative path for protected path is available\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5MDY2NQ=="}, "originalCommit": {"oid": "cc311e71198b81a8e7f5488f8f998960185763ba"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2157, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}