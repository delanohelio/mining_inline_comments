{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzc2MDc1", "number": 3436, "title": "Server42 Part 1 Control and Stats apps", "bodyText": "Contain:\n\nControl java application\nStats java application\nServer42DPDK stub\nControl storm stub\nConfigurations\n\n\n\nThis change is\u2002", "createdAt": "2020-05-04T07:12:43Z", "url": "https://github.com/telstra/open-kilda/pull/3436", "merged": true, "mergeCommit": {"oid": "687023bb199aa45d7388e6b98589a9ce995a6ab9"}, "closed": true, "closedAt": "2020-05-18T13:05:52Z", "author": {"login": "nikitamarchenko"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceW0WTAFqTQwNTg1ODIyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchfkXvAFqTQxMjUzMjI3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODU4MjI1", "url": "https://github.com/telstra/open-kilda/pull/3436#pullrequestreview-405858225", "createdAt": "2020-05-05T14:42:45Z", "commit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "state": "COMMENTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo0Mjo0NVrOGQsx0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjozODozMFrOGQx-Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NDA0OQ==", "bodyText": "nit: I think it's better to use separate memory limit param.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420164049", "createdAt": "2020-05-05T14:42:45Z", "author": {"login": "rozdy"}, "path": "confd/templates/docker-compose/docker-compose.tmpl", "diffHunk": "@@ -471,6 +471,98 @@ services:\n       JAVA_MEM: \" \"\n     mem_limit: ${LOGSTASH_MEM_LIMIT:-1073741824}\n {{end}}\n+{{if not (exists \"/no_server42_control\")}}\n+  server42-control:\n+    container_name: server42-control\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-control.jar\n+    ports:\n+      - \"9002:9002\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-control.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MDkwOA==", "bodyText": "nit: 2018 -> 2020", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420170908", "createdAt": "2020-05-05T14:51:12Z", "author": {"login": "rozdy"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/stats/FlowRttStatsData.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright 2018 Telstra Open Source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3Mzk3Mg==", "bodyText": "Is it correct order? I can't see switch_id property here.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420173972", "createdAt": "2020-05-05T14:55:04Z", "author": {"login": "rozdy"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/stats/FlowRttStatsData.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright 2018 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.info.stats;\n+\n+import org.openkilda.messaging.info.InfoData;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Value\n+@Builder\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"switch_id\", \"flow_id\", \"t0\", \"t1\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3NjQ4NA==", "bodyText": "Do we have an option not to store autogenerated code in git?", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420176484", "createdAt": "2020-05-05T14:58:17Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-messaging/src/main/java/org/openkilda/server42/control/messaging/flowrtt/Control.java", "diffHunk": "@@ -5684,7 +6109,7 @@ public PushSettings parsePartialFrom(\n     internal_static_org_openkilda_server42_control_messaging_flowrtt_Flow_fieldAccessorTable = new\n       com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n         internal_static_org_openkilda_server42_control_messaging_flowrtt_Flow_descriptor,\n-        new java.lang.String[] { \"FlowId\", \"EncapsulationType\", \"TunnelId\", });\n+        new java.lang.String[] { \"FlowId\", \"EncapsulationType\", \"TunnelId\", \"TransitEncapsulationType\", \"TransitTunnelId\", \"Direction\", \"DstMac\", \"UdpSrcPort\", });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 564}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MjU2Mg==", "bodyText": "nit: consts are usually static and uppercase with underscores", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420182562", "createdAt": "2020-05-05T15:06:27Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MzEwNw==", "bodyText": "nit: probably you can use Map<String, FlowStats> as type here.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420183107", "createdAt": "2020-05-05T15:07:10Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4Mzk0Ng==", "bodyText": "Please add some details.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420183946", "createdAt": "2020-05-05T15:08:15Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDM3Mg==", "bodyText": "Why do we need to generate some latency?", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420190372", "createdAt": "2020-05-05T15:16:55Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {\n+                    for (FlowStats flow : flows.values()) {\n+                        flowLatencyPacketBuilder.setFlowId(flow.flowId);\n+                        flowLatencyPacketBuilder.setDirection(flow.direction);\n+                        flowLatencyPacketBuilder.setT0(millis);\n+\n+                        long generatedLatency = minDeltaLatency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDkyMA==", "bodyText": "It would be great to add some log here.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420190920", "createdAt": "2020-05-05T15:17:39Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {\n+                    for (FlowStats flow : flows.values()) {\n+                        flowLatencyPacketBuilder.setFlowId(flow.flowId);\n+                        flowLatencyPacketBuilder.setDirection(flow.direction);\n+                        flowLatencyPacketBuilder.setT0(millis);\n+\n+                        long generatedLatency = minDeltaLatency\n+                                + (long) (Math.random() * (maxDeltaLatency - minDeltaLatency));\n+                        flowLatencyPacketBuilder.setT1(millis + flow.baseLatency + generatedLatency);\n+                        flowBucketBuilder.addPacket(flowLatencyPacketBuilder.build());\n+                    }\n+                }\n+\n+                if (!flows.isEmpty()) {\n+                    server.send(flowBucketBuilder.build().toByteArray());\n+                    log.info(\"send stats\");\n+                }\n+\n+                try {\n+                    sleep(tickSize);\n+                } catch (InterruptedException e) {\n+                    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MTk3MA==", "bodyText": "Double slash typo.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420191970", "createdAt": "2020-05-05T15:19:06Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-server-stub/src/main/resources/log4j2.xml", "diffHunk": "@@ -1,41 +1,30 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n+<!--\n+Generated by confd.\n+Do not change this file, all changes will be lost. Change corresponding template.\n+-->\n <Configuration monitorInterval=\"30\">\n-\n-    <Properties>\n-        <Property name=\"LOG_EXCEPTION_CONVERSION_WORD\">%xwEx</Property>\n-        <Property name=\"LOG_LEVEL_PATTERN\">%5p</Property>\n-        <Property name=\"LOG_DATEFORMAT_PATTERN\">yyyy-MM-dd HH:mm:ss.SSS</Property>\n-        <Property name=\"CONSOLE_LOG_PATTERN\">%clr{%d{${LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}}\n-            %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint}\n-            %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}\n-        </Property>\n-        <Property name=\"FILE_LOG_PATTERN\">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.}\n-            : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}\n-        </Property>\n-    </Properties>\n-\n     <Appenders>\n-\n-        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\" follow=\"true\">\n-            <PatternLayout pattern=\"${sys:CONSOLE_LOG_PATTERN}\"/>\n+        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n+            <PatternLayout pattern=\"%d{ISO8601} %-5p [%t] %c{1.} - [%X] %m%n\"/>\n         </Console>\n-\n-        <Socket name=\"LOGSTASH\" host=\"logstash.kilda\" port=\"5005\">\n-            <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n-            </JsonLayout>\n+        <Socket name=\"LOGSTASH\" host=\"logstash.pendev\" port=\"5005\">\n+           <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n+                <KeyValuePair key=\"correlation_id\" value=\"${ctx:correlation_id}\"/>\n+                <KeyValuePair key=\"timeMillis\" value=\"$${timeMillis:}\"/>\n+           </JsonLayout>\n         </Socket>\n-        <RollingFile name=\"ROLLINGFILE\"\n-                     filePattern=\"/var/log/server42-control/app-%d{MM-dd-yyyy}-%i.log.gz\">\n+        <RollingFile name=\"ROLLINGFILE\" fileName=\"/var/log//server42-control-server-stub-service.log\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5Mjc2NA==", "bodyText": "Is it intentionally logs here?", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420192764", "createdAt": "2020-05-05T15:20:08Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-server-stub/src/main/resources/log4j2.xml", "diffHunk": "@@ -1,41 +1,30 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n+<!--\n+Generated by confd.\n+Do not change this file, all changes will be lost. Change corresponding template.\n+-->\n <Configuration monitorInterval=\"30\">\n-\n-    <Properties>\n-        <Property name=\"LOG_EXCEPTION_CONVERSION_WORD\">%xwEx</Property>\n-        <Property name=\"LOG_LEVEL_PATTERN\">%5p</Property>\n-        <Property name=\"LOG_DATEFORMAT_PATTERN\">yyyy-MM-dd HH:mm:ss.SSS</Property>\n-        <Property name=\"CONSOLE_LOG_PATTERN\">%clr{%d{${LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}}\n-            %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint}\n-            %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}\n-        </Property>\n-        <Property name=\"FILE_LOG_PATTERN\">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.}\n-            : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}\n-        </Property>\n-    </Properties>\n-\n     <Appenders>\n-\n-        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\" follow=\"true\">\n-            <PatternLayout pattern=\"${sys:CONSOLE_LOG_PATTERN}\"/>\n+        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n+            <PatternLayout pattern=\"%d{ISO8601} %-5p [%t] %c{1.} - [%X] %m%n\"/>\n         </Console>\n-\n-        <Socket name=\"LOGSTASH\" host=\"logstash.kilda\" port=\"5005\">\n-            <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n-            </JsonLayout>\n+        <Socket name=\"LOGSTASH\" host=\"logstash.pendev\" port=\"5005\">\n+           <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n+                <KeyValuePair key=\"correlation_id\" value=\"${ctx:correlation_id}\"/>\n+                <KeyValuePair key=\"timeMillis\" value=\"$${timeMillis:}\"/>\n+           </JsonLayout>\n         </Socket>\n-        <RollingFile name=\"ROLLINGFILE\"\n-                     filePattern=\"/var/log/server42-control/app-%d{MM-dd-yyyy}-%i.log.gz\">\n+        <RollingFile name=\"ROLLINGFILE\" fileName=\"/var/log//server42-control-server-stub-service.log\"\n+                filePattern=\"/var/logs/server42-control-server-stub-service/app-%d{MM-dd-yyyy}-%i.log.gz\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNDU3Mw==", "bodyText": "Same here", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420234573", "createdAt": "2020-05-05T16:17:00Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control-storm-stub/src/main/resources/log4j2.xml", "diffHunk": "@@ -1,44 +1,30 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n+<!--\n+Generated by confd.\n+Do not change this file, all changes will be lost. Change corresponding template.\n+-->\n <Configuration monitorInterval=\"30\">\n-\n-    <Properties>\n-        <Property name=\"LOG_EXCEPTION_CONVERSION_WORD\">%xwEx</Property>\n-        <Property name=\"LOG_LEVEL_PATTERN\">%5p</Property>\n-        <Property name=\"LOG_DATEFORMAT_PATTERN\">yyyy-MM-dd HH:mm:ss.SSS</Property>\n-        <Property name=\"CONSOLE_LOG_PATTERN\">%clr{%d{${LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}}\n-            %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint}\n-            %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}\n-        </Property>\n-        <Property name=\"FILE_LOG_PATTERN\">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.}\n-            : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}\n-        </Property>\n-    </Properties>\n-\n-\n     <Appenders>\n-\n-        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\" follow=\"true\">\n-            <PatternLayout pattern=\"${sys:CONSOLE_LOG_PATTERN}\"/>\n+        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n+            <PatternLayout pattern=\"%d{ISO8601} %-5p [%t] %c{1.} - [%X] %m%n\"/>\n         </Console>\n-\n-        <Socket name=\"LOGSTASH\" host=\"logstash.kilda\" port=\"5005\">\n-            <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n+        <Socket name=\"LOGSTASH\" host=\"logstash.pendev\" port=\"5005\">\n+           <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n                 <KeyValuePair key=\"correlation_id\" value=\"${ctx:correlation_id}\"/>\n-                <KeyValuePair key=\"timeMillis\" value=\"$${UtcMillis:}\"/>\n-            </JsonLayout>\n+                <KeyValuePair key=\"timeMillis\" value=\"$${timeMillis:}\"/>\n+           </JsonLayout>\n         </Socket>\n-        <RollingFile name=\"ROLLINGFILE\"\n-                     filePattern=\"/var/log/server42-control/app-%d{MM-dd-yyyy}-%i.log.gz\">\n+        <RollingFile name=\"ROLLINGFILE\" fileName=\"/var/log//server42-control-storm-stub-service.log\"\n+                filePattern=\"/var/logs/server42-control-storm-stub-service/app-%d{MM-dd-yyyy}-%i.log.gz\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzOTQzNQ==", "bodyText": "Same here", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420239435", "createdAt": "2020-05-05T16:24:19Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-control/src/main/resources/log4j2.xml", "diffHunk": "@@ -1,43 +1,30 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n+<!--\n+Generated by confd.\n+Do not change this file, all changes will be lost. Change corresponding template.\n+-->\n <Configuration monitorInterval=\"30\">\n-\n-    <Properties>\n-        <Property name=\"LOG_EXCEPTION_CONVERSION_WORD\">%xwEx</Property>\n-        <Property name=\"LOG_LEVEL_PATTERN\">%5p</Property>\n-        <Property name=\"LOG_DATEFORMAT_PATTERN\">yyyy-MM-dd HH:mm:ss.SSS</Property>\n-        <Property name=\"CONSOLE_LOG_PATTERN\">%clr{%d{${LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}}\n-            %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint}\n-            %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}\n-        </Property>\n-        <Property name=\"FILE_LOG_PATTERN\">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.}\n-            : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}\n-        </Property>\n-    </Properties>\n-\n     <Appenders>\n-\n-        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\" follow=\"true\">\n-            <PatternLayout pattern=\"${sys:CONSOLE_LOG_PATTERN}\"/>\n+        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n+            <PatternLayout pattern=\"%d{ISO8601} %-5p [%t] %c{1.} - [%X] %m%n\"/>\n         </Console>\n-\n-        <Socket name=\"LOGSTASH\" host=\"logstash.kilda\" port=\"5005\">\n-            <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n+        <Socket name=\"LOGSTASH\" host=\"logstash.pendev\" port=\"5005\">\n+           <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n                 <KeyValuePair key=\"correlation_id\" value=\"${ctx:correlation_id}\"/>\n                 <KeyValuePair key=\"timeMillis\" value=\"$${timeMillis:}\"/>\n-            </JsonLayout>\n+           </JsonLayout>\n         </Socket>\n-        <RollingFile name=\"ROLLINGFILE\"\n-                     filePattern=\"/var/log/server42-control/app-%d{MM-dd-yyyy}-%i.log.gz\">\n+        <RollingFile name=\"ROLLINGFILE\" fileName=\"/var/log//server42-control-service.log\"\n+                filePattern=\"/var/logs/server42-control-service/app-%d{MM-dd-yyyy}-%i.log.gz\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDM1Ng==", "bodyText": "nit: 2020", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420240356", "createdAt": "2020-05-05T16:25:39Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-messaging/src/main/java/org/openkilda/server42/messaging/FlowDirection.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright 2019 Telstra Open Source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MjEzMg==", "bodyText": "nit: 2020", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420242132", "createdAt": "2020-05-05T16:28:23Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/StatsApplication.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/* Copyright 2019 Telstra Open Source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MjI0Nw==", "bodyText": "nit: 2020", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420242247", "createdAt": "2020-05-05T16:28:32Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/kafka/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/* Copyright 2019 Telstra Open Source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MjUzMg==", "bodyText": "nit: 2020", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420242532", "createdAt": "2020-05-05T16:28:55Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/metrics/MetricsService.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/* Copyright 2019 Telstra Open Source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0NTIyOQ==", "bodyText": "Same here", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420245229", "createdAt": "2020-05-05T16:32:51Z", "author": {"login": "rozdy"}, "path": "src-java/server42/server42-stats/src/main/resources/log4j2.xml", "diffHunk": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Generated by confd.\n+Do not change this file, all changes will be lost. Change corresponding template.\n+-->\n+<Configuration monitorInterval=\"30\">\n+    <Appenders>\n+        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n+            <PatternLayout pattern=\"%d{ISO8601} %-5p [%t] %c{1.} - [%X] %m%n\"/>\n+        </Console>\n+        <Socket name=\"LOGSTASH\" host=\"logstash.pendev\" port=\"5005\">\n+           <JsonLayout compact=\"true\" eventEol=\"true\" properties=\"true\">\n+                <KeyValuePair key=\"correlation_id\" value=\"${ctx:correlation_id}\"/>\n+                <KeyValuePair key=\"timeMillis\" value=\"$${timeMillis:}\"/>\n+           </JsonLayout>\n+        </Socket>\n+        <RollingFile name=\"ROLLINGFILE\" fileName=\"/var/log//server42-stats-service.log\"\n+                filePattern=\"/var/logs/server42-stats-service/app-%d{MM-dd-yyyy}-%i.log.gz\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0OTE2Mg==", "bodyText": "I don't like names t0 and t1. Maybe use some meaningful names?", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420249162", "createdAt": "2020-05-05T16:38:30Z", "author": {"login": "rozdy"}, "path": "docs/design/server42/src/server42_mk3/include/server42/statistics.proto", "diffHunk": "@@ -1,13 +1,14 @@\n syntax = \"proto3\";\n \n-package org.openkilda;\n+package org.openkilda.server42.stats.messaging.flowrtt;\n \n \n message FlowLatencyPacket {\n-    bytes flow_id = 1;\n-    int64 t0 = 2;\n-    int64 t1 = 3;\n-    uint64 packet_id = 4;\n+    string flow_id = 1;\n+    bool direction = 2;\n+    int64 t0 = 3;\n+    int64 t1 = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzU5MzE4", "url": "https://github.com/telstra/open-kilda/pull/3436#pullrequestreview-406359318", "createdAt": "2020-05-06T07:24:53Z", "commit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NDQxNDg0", "url": "https://github.com/telstra/open-kilda/pull/3436#pullrequestreview-407441484", "createdAt": "2020-05-07T12:54:56Z", "commit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo1NDo1N1rOGR9JKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNjoxNlrOGR9_Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDc0NQ==", "bodyText": "+1", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421480745", "createdAt": "2020-05-07T12:54:57Z", "author": {"login": "niksv"}, "path": "confd/templates/docker-compose/docker-compose.tmpl", "diffHunk": "@@ -471,6 +471,98 @@ services:\n       JAVA_MEM: \" \"\n     mem_limit: ${LOGSTASH_MEM_LIMIT:-1073741824}\n {{end}}\n+{{if not (exists \"/no_server42_control\")}}\n+  server42-control:\n+    container_name: server42-control\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-control.jar\n+    ports:\n+      - \"9002:9002\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-control.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NDA0OQ=="}, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MTE5Mw==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421481193", "createdAt": "2020-05-07T12:55:36Z", "author": {"login": "niksv"}, "path": "confd/templates/docker-compose/docker-compose.tmpl", "diffHunk": "@@ -471,6 +471,98 @@ services:\n       JAVA_MEM: \" \"\n     mem_limit: ${LOGSTASH_MEM_LIMIT:-1073741824}\n {{end}}\n+{{if not (exists \"/no_server42_control\")}}\n+  server42-control:\n+    container_name: server42-control\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-control.jar\n+    ports:\n+      - \"9002:9002\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-control.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}\n+{{end}}\n+{{if not (exists \"/no_server42_stats\")}}\n+  server42-stats:\n+    container_name: server42-stats\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-stats.jar\n+    ports:\n+      - \"9003:9003\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-stats.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MTM5Ng==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421481396", "createdAt": "2020-05-07T12:55:55Z", "author": {"login": "niksv"}, "path": "confd/templates/docker-compose/docker-compose.tmpl", "diffHunk": "@@ -471,6 +471,98 @@ services:\n       JAVA_MEM: \" \"\n     mem_limit: ${LOGSTASH_MEM_LIMIT:-1073741824}\n {{end}}\n+{{if not (exists \"/no_server42_control\")}}\n+  server42-control:\n+    container_name: server42-control\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-control.jar\n+    ports:\n+      - \"9002:9002\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-control.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}\n+{{end}}\n+{{if not (exists \"/no_server42_stats\")}}\n+  server42-stats:\n+    container_name: server42-stats\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-stats.jar\n+    ports:\n+      - \"9003:9003\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-stats.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}\n+{{end}}\n+{{if not (exists \"/no_server42_server_stub\")}}\n+  server42-server-stub:\n+    container_name: server42-server-stub\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-control-server-stub.jar\n+    ports:\n+      - \"5555:5555\"\n+      - \"5556:5556\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-server-stub.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MTkwMg==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421481902", "createdAt": "2020-05-07T12:56:41Z", "author": {"login": "niksv"}, "path": "confd/templates/docker-compose/docker-compose.tmpl", "diffHunk": "@@ -471,6 +471,98 @@ services:\n       JAVA_MEM: \" \"\n     mem_limit: ${LOGSTASH_MEM_LIMIT:-1073741824}\n {{end}}\n+{{if not (exists \"/no_server42_control\")}}\n+  server42-control:\n+    container_name: server42-control\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-control.jar\n+    ports:\n+      - \"9002:9002\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-control.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}\n+{{end}}\n+{{if not (exists \"/no_server42_stats\")}}\n+  server42-stats:\n+    container_name: server42-stats\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-stats.jar\n+    ports:\n+      - \"9003:9003\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-stats.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}\n+{{end}}\n+{{if not (exists \"/no_server42_server_stub\")}}\n+  server42-server-stub:\n+    container_name: server42-server-stub\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-control-server-stub.jar\n+    ports:\n+      - \"5555:5555\"\n+      - \"5556:5556\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-server-stub.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}\n+{{end}}\n+{{if not (exists \"/no_server42_storm_stub\")}}\n+  server42-storm-stub:\n+    container_name: server42-storm-stub\n+    build:\n+      context: docker\n+      dockerfile: server42/Dockerfile\n+    image: kilda/server42\n+    command: java -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar server42-control-storm-stub.jar\n+    ports:\n+      - \"9001:9001\"\n+    depends_on:\n+      kafka:\n+        condition: service_healthy\n+      zookeeper:\n+        condition: service_healthy\n+{{if not (exists \"/no_logstash\")}}      logstash:\n+        condition: service_started\n+  {{end}}\n+    networks:\n+      default:\n+        aliases:\n+         - server42-storm-stub.pendev\n+    mem_limit: ${NB_MEM_LIMIT:-1073741824}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NDY5OQ==", "bodyText": "I think disabling of these components by default is a bad idea. These flags are for developers. As we are still opensource I think we should torn everything on by default", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421484699", "createdAt": "2020-05-07T13:00:57Z", "author": {"login": "niksv"}, "path": "confd/vars/docker-compose.yaml", "diffHunk": "@@ -1,11 +1,16 @@\n ---\n-#no_gui: true\n+no_gui: true\n #no_kibana: true\n-#no_floodlight_2: true\n-#no_floodlight_stats: true\n-#no_grpc_speaker: true\n+no_floodlight_2: true\n+no_floodlight_stats: true\n+no_grpc_speaker: true\n #no_storm_ui: true\n #no_opentsdb: true\n #no_elasticsearch: true\n #no_logstash: true\n-#no_grpc_stub: true\n+no_grpc_stub: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NzY1Nw==", "bodyText": "Why we need an order? is it used somewhere?", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421487657", "createdAt": "2020-05-07T13:05:46Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/stats/FlowRttStatsData.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright 2018 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.info.stats;\n+\n+import org.openkilda.messaging.info.InfoData;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Value\n+@Builder\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"switch_id\", \"flow_id\", \"t0\", \"t1\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3Mzk3Mg=="}, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDI1Ng==", "bodyText": "+1", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421494256", "createdAt": "2020-05-07T13:15:49Z", "author": {"login": "niksv"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MjU2Mg=="}, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDM0Ng==", "bodyText": "+1", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421494346", "createdAt": "2020-05-07T13:15:58Z", "author": {"login": "niksv"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MzEwNw=="}, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDU1OQ==", "bodyText": "+1", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421494559", "createdAt": "2020-05-07T13:16:16Z", "author": {"login": "niksv"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4Mzk0Ng=="}, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MTk3OTYx", "url": "https://github.com/telstra/open-kilda/pull/3436#pullrequestreview-408197961", "createdAt": "2020-05-08T12:19:06Z", "commit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjoxOTowNlrOGSjmsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjoxOTowNlrOGSjmsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExMDg5Nw==", "bodyText": "nit: The file is the template, so need to remove this message.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422110897", "createdAt": "2020-05-08T12:19:06Z", "author": {"login": "sergii-iakovenko"}, "path": "confd/templates/server42/server42-control-server-stub.application.properties.tmpl", "diffHunk": "@@ -0,0 +1,11 @@\n+# Generated by confd.\n+# Do not change this file, all changes will be lost. Change corresponding template.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Mjc5OTQ3", "url": "https://github.com/telstra/open-kilda/pull/3436#pullrequestreview-408279947", "createdAt": "2020-05-08T14:29:47Z", "commit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDoyOTo0N1rOGSnmDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo0NjoyNFrOGSoKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3NjI3MA==", "bodyText": "Not clear why you need synchronization here. StatsServer extends Thread class (which represents a single thread) and Spring creates @service bean as a singleton by default. Why do you expect this code to be executed by multiple threads?", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422176270", "createdAt": "2020-05-08T14:29:47Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3NzM2NA==", "bodyText": "No need to catch the exception here. Just let it exit the thread method.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422177364", "createdAt": "2020-05-08T14:31:46Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {\n+                    for (FlowStats flow : flows.values()) {\n+                        flowLatencyPacketBuilder.setFlowId(flow.flowId);\n+                        flowLatencyPacketBuilder.setDirection(flow.direction);\n+                        flowLatencyPacketBuilder.setT0(millis);\n+\n+                        long generatedLatency = minDeltaLatency\n+                                + (long) (Math.random() * (maxDeltaLatency - minDeltaLatency));\n+                        flowLatencyPacketBuilder.setT1(millis + flow.baseLatency + generatedLatency);\n+                        flowBucketBuilder.addPacket(flowLatencyPacketBuilder.build());\n+                    }\n+                }\n+\n+                if (!flows.isEmpty()) {\n+                    server.send(flowBucketBuilder.build().toByteArray());\n+                    log.info(\"send stats\");\n+                }\n+\n+                try {\n+                    sleep(tickSize);\n+                } catch (InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3ODI3OA==", "bodyText": "I'd use ConcurrentHashMap for \"flows\" instead of synchronizing the whole instance.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422178278", "createdAt": "2020-05-08T14:33:23Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {\n+                    for (FlowStats flow : flows.values()) {\n+                        flowLatencyPacketBuilder.setFlowId(flow.flowId);\n+                        flowLatencyPacketBuilder.setDirection(flow.direction);\n+                        flowLatencyPacketBuilder.setT0(millis);\n+\n+                        long generatedLatency = minDeltaLatency\n+                                + (long) (Math.random() * (maxDeltaLatency - minDeltaLatency));\n+                        flowLatencyPacketBuilder.setT1(millis + flow.baseLatency + generatedLatency);\n+                        flowBucketBuilder.addPacket(flowLatencyPacketBuilder.build());\n+                    }\n+                }\n+\n+                if (!flows.isEmpty()) {\n+                    server.send(flowBucketBuilder.build().toByteArray());\n+                    log.info(\"send stats\");\n+                }\n+\n+                try {\n+                    sleep(tickSize);\n+                } catch (InterruptedException e) {\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+\n+    @PostConstruct\n+    void init() {\n+        this.start();\n+    }\n+\n+    /**\n+     * Add flow to packet generator.\n+     */\n+    public synchronized void addFlow(Flow flow) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4Mjk3OA==", "bodyText": "Please, reconsider the name of the class. Or add javadoc. \"Gate\" is too general to understand the purpose/role.", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422182978", "createdAt": "2020-05-08T14:42:00Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/Gate.java", "diffHunk": "@@ -38,13 +41,22 @@\n import org.springframework.kafka.annotation.KafkaHandler;\n import org.springframework.kafka.annotation.KafkaListener;\n import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.support.KafkaHeaders;\n+import org.springframework.messaging.handler.annotation.Header;\n+import org.springframework.messaging.handler.annotation.Payload;\n import org.springframework.stereotype.Service;\n \n+import java.util.AbstractMap.SimpleEntry;\n import java.util.HashSet;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n @Service\n @Slf4j\n-@KafkaListener(id = \"server42-control\", topics = \"${openkilda.server42.control.kafka.topic.from_storm}\")\n+@KafkaListener(id = \"server42-control\",\n+        topics = \"${openkilda.server42.control.kafka.topic.from_storm}\",\n+        idIsGroup = false\n+)\n public class Gate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NTUwOA==", "bodyText": "nit: Why is the method called the same as an argument, instead of the name of the resulting bean?", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422185508", "createdAt": "2020-05-08T14:46:24Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/kafka/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.stats.kafka;\n+\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.kafka.config.TopicBuilder;\n+\n+@Configuration\n+public class KafkaConfig {\n+    @Bean\n+    public NewTopic toStorm(@Value(\"${openkilda.server42.stats.kafka.topic.flowrtt.to_storm}\") String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTQwNzU5", "url": "https://github.com/telstra/open-kilda/pull/3436#pullrequestreview-410140759", "createdAt": "2020-05-12T15:07:22Z", "commit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "committedDate": "2020-05-04T07:09:59Z", "message": "Server42 Part 1 Control and Stats apps"}, "afterCommit": {"oid": "be01f98a5746133cdf4babfce498805858921049", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/be01f98a5746133cdf4babfce498805858921049", "committedDate": "2020-05-12T15:07:37Z", "message": "Server42 Part 1 Control and Stats apps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTUwNDY1", "url": "https://github.com/telstra/open-kilda/pull/3436#pullrequestreview-410150465", "createdAt": "2020-05-12T15:17:20Z", "commit": {"oid": "be01f98a5746133cdf4babfce498805858921049"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e2edb44a39812be215a5800bbe33ab544c73bc4", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/5e2edb44a39812be215a5800bbe33ab544c73bc4", "committedDate": "2020-05-12T15:41:20Z", "message": "Server42 Part 1 Control and Stats apps"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be01f98a5746133cdf4babfce498805858921049", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/be01f98a5746133cdf4babfce498805858921049", "committedDate": "2020-05-12T15:07:37Z", "message": "Server42 Part 1 Control and Stats apps"}, "afterCommit": {"oid": "5e2edb44a39812be215a5800bbe33ab544c73bc4", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/5e2edb44a39812be215a5800bbe33ab544c73bc4", "committedDate": "2020-05-12T15:41:20Z", "message": "Server42 Part 1 Control and Stats apps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNTMyMjc4", "url": "https://github.com/telstra/open-kilda/pull/3436#pullrequestreview-412532278", "createdAt": "2020-05-15T10:32:22Z", "commit": {"oid": "5e2edb44a39812be215a5800bbe33ab544c73bc4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3637, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}