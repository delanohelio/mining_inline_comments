{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMTc0NzUy", "number": 3808, "title": "Add functional test for #3807", "bodyText": "", "createdAt": "2020-10-26T17:01:50Z", "url": "https://github.com/telstra/open-kilda/pull/3808", "merged": true, "mergeCommit": {"oid": "9595c9ba1b5fb1742dab3d57e31b2140b9923f2b"}, "closed": true, "closedAt": "2020-10-28T13:51:13Z", "author": {"login": "rtretyak"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWj_wSgFqTUxNzM4Mjk5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWnOrdABqjM5MjUzODMzNjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzgyOTkx", "url": "https://github.com/telstra/open-kilda/pull/3808#pullrequestreview-517382991", "createdAt": "2020-10-27T06:34:50Z", "commit": {"oid": "23bdcc61705e645576d755b4f2f02486ab153bfb"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjozNjozNFrOHotNAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzozODoyOFrOHouqsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NTY5Nw==", "bodyText": "flowsDeleted -> areFlowsDeleted?", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512445697", "createdAt": "2020-10-27T06:36:34Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowDiversityV2Spec.groovy", "diffHunk": "@@ -73,8 +76,27 @@ class FlowDiversityV2Spec extends HealthCheckSpecification {\n         }\n         allInvolvedIsls.unique(false) == allInvolvedIsls\n \n-        cleanup: \"Delete flows\"\n+        and: \"Flows' histories contain 'groupId' information\"\n+        [flow2, flow3].each {//flow1 had no diversity at the time of creation\n+            assert northbound.getFlowHistory(it.flowId).find { it.action == CREATE_ACTION }.dumps\n+                    .find { it.type == \"stateAfter\" }?.groupId\n+        }\n+\n+        when: \"Delete flows\"\n         [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }\n+        def flowsDeleted = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23bdcc61705e645576d755b4f2f02486ab153bfb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NjA5Mw==", "bodyText": "in case flow has no diversity, then groupId is missed\nam I right?", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512466093", "createdAt": "2020-10-27T07:30:31Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowDiversityV2Spec.groovy", "diffHunk": "@@ -73,8 +76,27 @@ class FlowDiversityV2Spec extends HealthCheckSpecification {\n         }\n         allInvolvedIsls.unique(false) == allInvolvedIsls\n \n-        cleanup: \"Delete flows\"\n+        and: \"Flows' histories contain 'groupId' information\"\n+        [flow2, flow3].each {//flow1 had no diversity at the time of creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23bdcc61705e645576d755b4f2f02486ab153bfb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NjI0Mw==", "bodyText": "empty line", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512466243", "createdAt": "2020-10-27T07:30:55Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowDiversityV2Spec.groovy", "diffHunk": "@@ -73,8 +76,27 @@ class FlowDiversityV2Spec extends HealthCheckSpecification {\n         }\n         allInvolvedIsls.unique(false) == allInvolvedIsls\n \n-        cleanup: \"Delete flows\"\n+        and: \"Flows' histories contain 'groupId' information\"\n+        [flow2, flow3].each {//flow1 had no diversity at the time of creation\n+            assert northbound.getFlowHistory(it.flowId).find { it.action == CREATE_ACTION }.dumps\n+                    .find { it.type == \"stateAfter\" }?.groupId\n+        }\n+\n+        when: \"Delete flows\"\n         [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }\n+        def flowsDeleted = true\n+\n+        then: \"Flows' histories contain 'groupId' information in 'delete' operation\"\n+        [flow1, flow2, flow3].each {\n+            verifyAll(northbound.getFlowHistory(it.flowId).find { it.action == DELETE_ACTION }.dumps) {\n+                it.find { it.type == \"stateBefore\" }?.groupId\n+                !it.find { it.type == \"stateAfter\" }?.groupId\n+            }\n+        }\n+\n+        cleanup:\n+        !flowsDeleted && [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23bdcc61705e645576d755b4f2f02486ab153bfb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2OTY4Mw==", "bodyText": "it can fail in future\nfor example: when the system was able to delete the first two flow and wasn't able to delete the third flow\nTo tell the truth I have no idea how to handle it and at the same do not add extra complexity", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512469683", "createdAt": "2020-10-27T07:38:28Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowDiversityV2Spec.groovy", "diffHunk": "@@ -73,8 +76,27 @@ class FlowDiversityV2Spec extends HealthCheckSpecification {\n         }\n         allInvolvedIsls.unique(false) == allInvolvedIsls\n \n-        cleanup: \"Delete flows\"\n+        and: \"Flows' histories contain 'groupId' information\"\n+        [flow2, flow3].each {//flow1 had no diversity at the time of creation\n+            assert northbound.getFlowHistory(it.flowId).find { it.action == CREATE_ACTION }.dumps\n+                    .find { it.type == \"stateAfter\" }?.groupId\n+        }\n+\n+        when: \"Delete flows\"\n         [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }\n+        def flowsDeleted = true\n+\n+        then: \"Flows' histories contain 'groupId' information in 'delete' operation\"\n+        [flow1, flow2, flow3].each {\n+            verifyAll(northbound.getFlowHistory(it.flowId).find { it.action == DELETE_ACTION }.dumps) {\n+                it.find { it.type == \"stateBefore\" }?.groupId\n+                !it.find { it.type == \"stateAfter\" }?.groupId\n+            }\n+        }\n+\n+        cleanup:\n+        !flowsDeleted && [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23bdcc61705e645576d755b4f2f02486ab153bfb"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8763c72b6ac4845db3b3335fb1f9b4908a03b6e3", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/8763c72b6ac4845db3b3335fb1f9b4908a03b6e3", "committedDate": "2020-10-27T11:25:40Z", "message": "Add functional test for #3807"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23bdcc61705e645576d755b4f2f02486ab153bfb", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/23bdcc61705e645576d755b4f2f02486ab153bfb", "committedDate": "2020-10-26T17:01:07Z", "message": "Add functional test for #3807"}, "afterCommit": {"oid": "8763c72b6ac4845db3b3335fb1f9b4908a03b6e3", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/8763c72b6ac4845db3b3335fb1f9b4908a03b6e3", "committedDate": "2020-10-27T11:25:40Z", "message": "Add functional test for #3807"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3750, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}