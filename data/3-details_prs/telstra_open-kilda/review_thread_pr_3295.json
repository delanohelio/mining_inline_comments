{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjA3MDQ3", "number": 3295, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyNzozM1rODqWu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjozMjozM1rODqW1xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzM5MjYzOnYy", "diffSide": "RIGHT", "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyNzozM1rOF6DJgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0Mzo0NVrOF_JWGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzMxMg==", "bodyText": "maybe use some constant for 1?", "url": "https://github.com/telstra/open-kilda/pull/3295#discussion_r396413312", "createdAt": "2020-03-23T12:27:33Z", "author": {"login": "niksv"}, "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java", "diffHunk": "@@ -65,26 +84,47 @@ public StormTopology createTopology() {\n         topologyBuilder.setBolt(BOLT_ID_REROUTE, rerouteBolt, parallelism)\n                 .shuffleGrouping(SPOUT_ID_REROUTE);\n \n-        FlowThrottlingBolt flowThrottlingBolt = new FlowThrottlingBolt(persistenceManager,\n-                topologyConfig.getRerouteThrottlingMinDelay(),\n-                topologyConfig.getRerouteThrottlingMaxDelay(),\n-                topologyConfig.getDefaultFlowPriority());\n-        //TODO(siakovenko): fix ThrottlingBolt with parallelism > 1 : see topologyConfig.getNewParallelism()\n-        topologyBuilder.setBolt(BOLT_ID_REROUTE_THROTTLING, flowThrottlingBolt, parallelism)\n-                .fieldsGrouping(BOLT_ID_REROUTE, new Fields(RerouteBolt.FLOW_ID_FIELD));\n-\n-        KafkaBolt kafkaFlowBolt = buildKafkaBolt(topologyConfig.getKafkaFlowTopic());\n+        int rerouteTimeout = (int) TimeUnit.SECONDS.toMillis(topologyConfig.getRerouteTimeoutSeconds());\n+        FlowRerouteQueueBolt flowRerouteQueueBolt = new FlowRerouteQueueBolt(persistenceManager,\n+                topologyConfig.getDefaultFlowPriority(),\n+                topologyConfig.getMaxRetry(), rerouteTimeout);\n+        topologyBuilder.setBolt(BOLT_ID_REROUTE_QUEUE, flowRerouteQueueBolt, parallelism)\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_REQUEST_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_MANUAL_REROUTE_REQUEST_ID,\n+                        new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_RESULT_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .allGrouping(BOLT_ID_TIME_WINDOW)\n+                .directGrouping(CoordinatorBolt.ID);\n+\n+        TimeWindowBolt timeWindowBolt = new TimeWindowBolt(topologyConfig.getRerouteThrottlingMinDelay(),\n+                topologyConfig.getRerouteThrottlingMaxDelay());\n+        // Time window bolt should use parallelism 1 to provide synchronisation for all reroute queue bolts\n+        topologyBuilder.setBolt(BOLT_ID_TIME_WINDOW, timeWindowBolt, 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cee0dc1a29d2cc94a82f942f8680dd2342758a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NzcyMg==", "bodyText": "I think comment is enough here.", "url": "https://github.com/telstra/open-kilda/pull/3295#discussion_r401757722", "createdAt": "2020-04-01T16:43:45Z", "author": {"login": "rozdy"}, "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java", "diffHunk": "@@ -65,26 +84,47 @@ public StormTopology createTopology() {\n         topologyBuilder.setBolt(BOLT_ID_REROUTE, rerouteBolt, parallelism)\n                 .shuffleGrouping(SPOUT_ID_REROUTE);\n \n-        FlowThrottlingBolt flowThrottlingBolt = new FlowThrottlingBolt(persistenceManager,\n-                topologyConfig.getRerouteThrottlingMinDelay(),\n-                topologyConfig.getRerouteThrottlingMaxDelay(),\n-                topologyConfig.getDefaultFlowPriority());\n-        //TODO(siakovenko): fix ThrottlingBolt with parallelism > 1 : see topologyConfig.getNewParallelism()\n-        topologyBuilder.setBolt(BOLT_ID_REROUTE_THROTTLING, flowThrottlingBolt, parallelism)\n-                .fieldsGrouping(BOLT_ID_REROUTE, new Fields(RerouteBolt.FLOW_ID_FIELD));\n-\n-        KafkaBolt kafkaFlowBolt = buildKafkaBolt(topologyConfig.getKafkaFlowTopic());\n+        int rerouteTimeout = (int) TimeUnit.SECONDS.toMillis(topologyConfig.getRerouteTimeoutSeconds());\n+        FlowRerouteQueueBolt flowRerouteQueueBolt = new FlowRerouteQueueBolt(persistenceManager,\n+                topologyConfig.getDefaultFlowPriority(),\n+                topologyConfig.getMaxRetry(), rerouteTimeout);\n+        topologyBuilder.setBolt(BOLT_ID_REROUTE_QUEUE, flowRerouteQueueBolt, parallelism)\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_REQUEST_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_MANUAL_REROUTE_REQUEST_ID,\n+                        new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_RESULT_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .allGrouping(BOLT_ID_TIME_WINDOW)\n+                .directGrouping(CoordinatorBolt.ID);\n+\n+        TimeWindowBolt timeWindowBolt = new TimeWindowBolt(topologyConfig.getRerouteThrottlingMinDelay(),\n+                topologyConfig.getRerouteThrottlingMaxDelay());\n+        // Time window bolt should use parallelism 1 to provide synchronisation for all reroute queue bolts\n+        topologyBuilder.setBolt(BOLT_ID_TIME_WINDOW, timeWindowBolt, 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzMxMg=="}, "originalCommit": {"oid": "b6cee0dc1a29d2cc94a82f942f8680dd2342758a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzQwOTk3OnYy", "diffSide": "RIGHT", "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjozMjozM1rOF6DUAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0NDo1NFrOF_JY5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjAwMA==", "bodyText": "I'm a little bit worried about setting parallelism to 2 in almost all Bolts and spouts. We need to test it carefully", "url": "https://github.com/telstra/open-kilda/pull/3295#discussion_r396416000", "createdAt": "2020-03-23T12:32:33Z", "author": {"login": "niksv"}, "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java", "diffHunk": "@@ -53,9 +69,12 @@ public StormTopology createTopology() {\n \n         TopologyBuilder topologyBuilder = new TopologyBuilder();\n \n-        final Integer parallelism = topologyConfig.getParallelism();\n+        final Integer parallelism = topologyConfig.getNewParallelism();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cee0dc1a29d2cc94a82f942f8680dd2342758a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1ODQzOQ==", "bodyText": "Design for this feature also include parallelism support. We are working on testing.", "url": "https://github.com/telstra/open-kilda/pull/3295#discussion_r401758439", "createdAt": "2020-04-01T16:44:54Z", "author": {"login": "rozdy"}, "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java", "diffHunk": "@@ -53,9 +69,12 @@ public StormTopology createTopology() {\n \n         TopologyBuilder topologyBuilder = new TopologyBuilder();\n \n-        final Integer parallelism = topologyConfig.getParallelism();\n+        final Integer parallelism = topologyConfig.getNewParallelism();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjAwMA=="}, "originalCommit": {"oid": "b6cee0dc1a29d2cc94a82f942f8680dd2342758a"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2014, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}