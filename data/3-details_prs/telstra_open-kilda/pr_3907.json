{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNDg2MzMx", "number": 3907, "title": "Added zero downtime producers", "bodyText": "NOTE: merge after #3912\nChange base to develop before merge", "createdAt": "2020-12-07T08:28:03Z", "url": "https://github.com/telstra/open-kilda/pull/3907", "merged": true, "mergeCommit": {"oid": "cd7a49b2cdac557469ac381558e11220c5449c5f"}, "closed": true, "closedAt": "2020-12-11T10:40:28Z", "author": {"login": "niksv"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjyBSvgBqjQwNzg1NzQ1MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlFfMlAFqTU0OTk4MjEzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a2393de2a26ed1e62d32b108e5c66af4e16d2ec", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/2a2393de2a26ed1e62d32b108e5c66af4e16d2ec", "committedDate": "2020-12-07T08:15:39Z", "message": "Added messaging versioning for Kafka Producers"}, "afterCommit": {"oid": "6dcc9a5c392123ae66f94c67c9718e8310b8affb", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/6dcc9a5c392123ae66f94c67c9718e8310b8affb", "committedDate": "2020-12-07T09:19:07Z", "message": "Added messaging versioning for Kafka Producers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6dcc9a5c392123ae66f94c67c9718e8310b8affb", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/6dcc9a5c392123ae66f94c67c9718e8310b8affb", "committedDate": "2020-12-07T09:19:07Z", "message": "Added messaging versioning for Kafka Producers"}, "afterCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/5c9c909a65e2d5d3223f2733edc1470151271647", "committedDate": "2020-12-08T11:44:10Z", "message": "Added messaging versioning for Kafka Producers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTA0NDM0", "url": "https://github.com/telstra/open-kilda/pull/3907#pullrequestreview-547904434", "createdAt": "2020-12-09T07:31:51Z", "commit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTEwNDk2", "url": "https://github.com/telstra/open-kilda/pull/3907#pullrequestreview-547910496", "createdAt": "2020-12-09T07:42:52Z", "commit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTIzMDM0", "url": "https://github.com/telstra/open-kilda/pull/3907#pullrequestreview-547923034", "createdAt": "2020-12-09T08:04:06Z", "commit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODowNDowNlrOICHR1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo0NToxM1rOICLlAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4NzMxNg==", "bodyText": "I thought run-id is for the whole project global, not specific service.", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539087316", "createdAt": "2020-12-09T08:04:06Z", "author": {"login": "surabujin"}, "path": "confd/vars/main.yaml", "diffHunk": "@@ -176,10 +176,14 @@ kilda_server42_control_switch_to_vlan_1003: \"1003=00:00:00:00:00:00:00:03\"\n \n kilda_server42_control_kafka_group_id: \"server42-control\"\n kilda_server42_control_zeromq_connection_host: \"tcp://server42-server-stub.pendev:5555\"\n+kilda_server42_control_component_name: \"server42-control\"\n+kilda_server42_control_run_id: \"server42-control-run-id\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5ODk1OA==", "bodyText": "why different approaches for different options i.e. .setProperty() and .put() ?", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539098958", "createdAt": "2020-12-09T08:21:09Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "diffHunk": "@@ -168,12 +174,26 @@ protected static int handleLaunchException(Exception error) {\n         return errorCode;\n     }\n \n+    /**\n+     * //TODO(zero_down_time) Remove when zero down time feature will be completed.\n+     *\n+     * @deprecated use getKafkaProducerProperties with parameters (component name, run id)\n+     */\n+    @Deprecated\n     private Properties getKafkaProducerProperties() {\n+        return getKafkaProducerProperties(COMMON_COMPONENT_NAME, COMMON_COMPONENT_RUN_ID);\n+    }\n+\n+    private Properties getKafkaProducerProperties(String componentName, String runId) {\n         Properties kafka = new Properties();\n \n         kafka.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n         kafka.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n         kafka.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaConfig.getHosts());\n+        kafka.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, VersioningProducerInterceptor.class.getName());\n+        kafka.put(PRODUCER_COMPONENT_NAME_PROPERTY, componentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNTQ2NQ==", "bodyText": "buildKafkaBolt createKafkaBolt makeKafkaBolt ... can we choose one name and migrate everything on it.", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539105465", "createdAt": "2020-12-09T08:31:34Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "diffHunk": "@@ -292,6 +312,17 @@ public final T getConfig() {\n         return makeKafkaBolt(topic, MessageSerializer.class);\n     }\n \n+    /**\n+     * Creates Kafka bolt, that uses {@link MessageSerializer} in order to serialize an object.\n+     *\n+     * @param topic Kafka topic\n+     * @return {@link KafkaBolt}\n+     */\n+    protected KafkaBolt<String, Message> buildKafkaBolt(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNzMxNA==", "bodyText": "weird comment", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539107314", "createdAt": "2020-12-09T08:34:35Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkClient.java", "diffHunk": "@@ -73,10 +73,14 @@ protected ZooKeeper getZk() throws IOException {\n     }\n \n     protected void ensureZNode(String... path) throws KeeperException, InterruptedException {\n+        ensureZNode(new byte[0], path); // set empty value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExMTU3OQ==", "bodyText": "This way setting of default value looks extremely dangerous. I would like to handle the missing node in a correct way than such default values enforcing.", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539111579", "createdAt": "2020-12-09T08:41:09Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -65,7 +67,7 @@ public ZkWatchDog(String id, String serviceName, String connectionString,\n     void validateNodes() throws KeeperException, InterruptedException {\n         super.validateNodes();\n         ensureZNode(serviceName, id, SIGNAL);\n-        ensureZNode(serviceName, id, BUILD_VERSION);\n+        ensureZNode(DEFAULT_BUILD_VERSION.getBytes(), serviceName, id, BUILD_VERSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyNDYzMQ==", "bodyText": "contract violation - the caller will never know that close() request has failed and will unable to make more close attempts.", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539124631", "createdAt": "2020-12-09T09:00:10Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -169,4 +171,24 @@ protected void notifyBuildVersionObservers() {\n             observer.handle(buildVersion);\n         }\n     }\n+\n+    @Override\n+    public void close() {\n+        if (!observers.isEmpty()) {\n+            log.error(\"Could not close connection to zookeeper {}. Watch dog still have {} life cycle observers\",\n+                    connectionString, observers.size());\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyNTg4OA==", "bodyText": "... python approaches? But java's exceptions are heavy in comparison to the pythons.", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539125888", "createdAt": "2020-12-09T09:02:00Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/Utils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen.kafka;\n+\n+import java.util.Map;\n+\n+public final class Utils {\n+    private Utils() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    // TODO(zero_down_time) remove when Zero Down Time feature will be implemented\n+    public static final String COMMON_COMPONENT_NAME = \"common_component\";\n+    // TODO(zero_down_time) remove when Zero Down Time feature will be implemented\n+    public static final String COMMON_COMPONENT_RUN_ID = \"common_run_id\";\n+\n+    /**\n+     * Kafka message header to specify message version.\n+     */\n+    public static final String MESSAGE_VERSION_HEADER = \"kafka.message.version.header\";\n+    /**\n+     * Property name for Kafka producer to specify component name for producer interceptor.\n+     */\n+    public static final String PRODUCER_COMPONENT_NAME_PROPERTY = \"kafka.producer.messaging.component.name.property\";\n+    /**\n+     * Property name for Kafka producer to specify run ID for producer interceptor.\n+     */\n+    public static final String PRODUCER_RUN_ID_PROPERTY = \"kafka.producer.messaging.run.id.property\";\n+    /**\n+     * Property name for Kafka producer to specify zookeeper connection string.\n+     */\n+    public static final String PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY =\n+            \"kafka.producer.messaging.zookeeper.connecting.string.property\";\n+\n+    /**\n+     * Returns value from map by key, throws exception otherwise.\n+     *\n+     * @param map map with keys and values\n+     * @param key key\n+     * @param clazz value will be cast to this class\n+     * @return value cast to the clazz\n+     */\n+    public static <T> T getValue(Map<String, ?> map, String key, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyODAxMQ==", "bodyText": "do not include not logic into a getter, better apply it it's result. At least it will fix this ugly name. Also, it can help to simplify the whole usage logic.", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539128011", "createdAt": "2020-12-09T09:05:06Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningInterceptorBase.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen.kafka.interceptors;\n+\n+import static java.lang.String.format;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+@Slf4j\n+public abstract class VersioningInterceptorBase implements BuildVersionObserver {\n+    public static final int VERSION_IS_NOT_SET_LOG_TIMEOUT = 60;\n+    public static final int CANT_CONNECT_TO_ZOOKEEPER_LOG_TIMEOUT = 60;\n+\n+    protected String connectionString;\n+    protected ZkWatchDog watchDog;\n+    protected String componentName;\n+    protected String runId;\n+    protected Instant versionIsNotSetTimestamp = Instant.MIN;\n+    protected Instant cantConnectToZooKeeperTimestamp = Instant.MIN;\n+    protected volatile byte[] version;\n+\n+    protected boolean isVersionIsNotTimeoutPassed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyODg2Ng==", "bodyText": "canRetryZookeeperConnect() ?", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539128866", "createdAt": "2020-12-09T09:06:20Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningInterceptorBase.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen.kafka.interceptors;\n+\n+import static java.lang.String.format;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+@Slf4j\n+public abstract class VersioningInterceptorBase implements BuildVersionObserver {\n+    public static final int VERSION_IS_NOT_SET_LOG_TIMEOUT = 60;\n+    public static final int CANT_CONNECT_TO_ZOOKEEPER_LOG_TIMEOUT = 60;\n+\n+    protected String connectionString;\n+    protected ZkWatchDog watchDog;\n+    protected String componentName;\n+    protected String runId;\n+    protected Instant versionIsNotSetTimestamp = Instant.MIN;\n+    protected Instant cantConnectToZooKeeperTimestamp = Instant.MIN;\n+    protected volatile byte[] version;\n+\n+    protected boolean isVersionIsNotTimeoutPassed() {\n+        return versionIsNotSetTimestamp.plus(VERSION_IS_NOT_SET_LOG_TIMEOUT, ChronoUnit.SECONDS)\n+                .isBefore(Instant.now());\n+    }\n+\n+    protected boolean isCantConnectToZooKeeperTimeoutPassed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMjc5MQ==", "bodyText": "You do not check actual connect results. Is it ok? Should we have something like isVersionUsable() and use it instead of null comparison? It can take into account ZK connection status too.", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539132791", "createdAt": "2020-12-09T09:11:42Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningProducerInterceptor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen.kafka.interceptors;\n+\n+import static org.openkilda.bluegreen.kafka.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.getValue;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.producer.ProducerInterceptor;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+\n+import java.time.Instant;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningProducerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ProducerInterceptor<K, V> {\n+\n+    public VersioningProducerInterceptor() {\n+        log.debug(\"Initializing VersioningProducerInterceptor\");\n+    }\n+\n+    @Override\n+    public ProducerRecord<K, V> onSend(ProducerRecord<K, V> record) {\n+        if (watchDog == null) {\n+            // try to reconnect\n+            initWatchDog();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzNjU1NA==", "bodyText": "As for me it should be in base class. We should have method warnBuildVersionNotSet(), which one will incapsulate log each N seconds logic.\nPS As for me we should calc and log the amount of \"skipped\" records.", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539136554", "createdAt": "2020-12-09T09:16:51Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningProducerInterceptor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen.kafka.interceptors;\n+\n+import static org.openkilda.bluegreen.kafka.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.getValue;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.producer.ProducerInterceptor;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+\n+import java.time.Instant;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningProducerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ProducerInterceptor<K, V> {\n+\n+    public VersioningProducerInterceptor() {\n+        log.debug(\"Initializing VersioningProducerInterceptor\");\n+    }\n+\n+    @Override\n+    public ProducerRecord<K, V> onSend(ProducerRecord<K, V> record) {\n+        if (watchDog == null) {\n+            // try to reconnect\n+            initWatchDog();\n+        }\n+\n+        if (record.headers().headers(MESSAGE_VERSION_HEADER).iterator().hasNext()) {\n+            log.info(\"Kafka record {} already has header {}: {}\",\n+                    record, MESSAGE_VERSION_HEADER,\n+                    new String(record.headers().headers(MESSAGE_VERSION_HEADER).iterator().next().value()));\n+            record.headers().remove(MESSAGE_VERSION_HEADER);\n+        }\n+\n+        if (version == null) {\n+            if (isVersionIsNotTimeoutPassed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE0NzcwNA==", "bodyText": "Is it safe to throw IllegalArgumentException from here?", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539147704", "createdAt": "2020-12-09T09:31:47Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningProducerInterceptor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen.kafka.interceptors;\n+\n+import static org.openkilda.bluegreen.kafka.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.getValue;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.producer.ProducerInterceptor;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+\n+import java.time.Instant;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningProducerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ProducerInterceptor<K, V> {\n+\n+    public VersioningProducerInterceptor() {\n+        log.debug(\"Initializing VersioningProducerInterceptor\");\n+    }\n+\n+    @Override\n+    public ProducerRecord<K, V> onSend(ProducerRecord<K, V> record) {\n+        if (watchDog == null) {\n+            // try to reconnect\n+            initWatchDog();\n+        }\n+\n+        if (record.headers().headers(MESSAGE_VERSION_HEADER).iterator().hasNext()) {\n+            log.info(\"Kafka record {} already has header {}: {}\",\n+                    record, MESSAGE_VERSION_HEADER,\n+                    new String(record.headers().headers(MESSAGE_VERSION_HEADER).iterator().next().value()));\n+            record.headers().remove(MESSAGE_VERSION_HEADER);\n+        }\n+\n+        if (version == null) {\n+            if (isVersionIsNotTimeoutPassed()) {\n+                // We will write this log every 60 seconds to do not spam in logs\n+                log.warn(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                        componentName, runId, record);\n+                versionIsNotSetTimestamp = Instant.now();\n+            }\n+            // We can't return null record. We will return record without version.\n+            // Such records wouldn't be read by Kafka Consumer with VersioningConsumerInterceptor\n+            return record;\n+        }\n+\n+        record.headers().add(MESSAGE_VERSION_HEADER, version);\n+        return record;\n+    }\n+\n+    @Override\n+    public void onAcknowledgement(RecordMetadata metadata, Exception exception) {\n+        // nothing to do\n+    }\n+\n+    public void close() {\n+        watchDog.unsubscribe(this);\n+        watchDog.close();\n+    }\n+\n+    @Override\n+    public void configure(Map<String, ?> configs) {\n+        connectionString = getValue(configs, PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1Nzc2MA==", "bodyText": "Extreme amount of kafka, producer and properties fords in one... name / definition :)", "url": "https://github.com/telstra/open-kilda/pull/3907#discussion_r539157760", "createdAt": "2020-12-09T09:45:13Z", "author": {"login": "surabujin"}, "path": "confd/templates/server42/server42-control.application.properties.tmpl", "diffHunk": "@@ -41,3 +41,9 @@ spring.kafka.consumer.properties.spring.json.default.value.type=org.openkilda.se\n spring.kafka.consumer.properties.spring.json.use.type.headers=false\n spring.kafka.consumer.properties.spring.json.remove.type.headers=true\n spring.kafka.listener.missing-topics-fatal=false\n+\n+# Kafka versioning (zero_downtime)\n+spring.kafka.producer.properties.interceptor.classes=org.openkilda.bluegreen.kafka.interceptors.VersioningProducerInterceptor\n+spring.kafka.producer.properties.kafka.producer.messaging.zookeeper.connecting.string.property={{ getv \"/kilda_zookeeper_hosts\"}}/{{ getv \"/kilda_zookeeper_state_root\" }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c9c909a65e2d5d3223f2733edc1470151271647", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/5c9c909a65e2d5d3223f2733edc1470151271647", "committedDate": "2020-12-08T11:44:10Z", "message": "Added messaging versioning for Kafka Producers"}, "afterCommit": {"oid": "326f679bb39b26e0975de85babd0fa80d3121f77", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/326f679bb39b26e0975de85babd0fa80d3121f77", "committedDate": "2020-12-10T05:37:51Z", "message": "Added messaging versioning for Kafka Producers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "326f679bb39b26e0975de85babd0fa80d3121f77", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/326f679bb39b26e0975de85babd0fa80d3121f77", "committedDate": "2020-12-10T05:37:51Z", "message": "Added messaging versioning for Kafka Producers"}, "afterCommit": {"oid": "4dabd39c6e263c71d349db31e6ed307a2b5a8ce9", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/4dabd39c6e263c71d349db31e6ed307a2b5a8ce9", "committedDate": "2020-12-10T07:21:07Z", "message": "Added messaging versioning for Kafka Producers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4dabd39c6e263c71d349db31e6ed307a2b5a8ce9", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/4dabd39c6e263c71d349db31e6ed307a2b5a8ce9", "committedDate": "2020-12-10T07:21:07Z", "message": "Added messaging versioning for Kafka Producers"}, "afterCommit": {"oid": "13168e2873dd42c7750d8f36665ac4990233ff65", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/13168e2873dd42c7750d8f36665ac4990233ff65", "committedDate": "2020-12-10T11:23:43Z", "message": "Added messaging versioning for Kafka Producers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76bde21e4b11fb1a1b93d46735baaf7bf626b828", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/76bde21e4b11fb1a1b93d46735baaf7bf626b828", "committedDate": "2020-12-10T14:08:40Z", "message": "Added messaging versioning for Kafka Producers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13168e2873dd42c7750d8f36665ac4990233ff65", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/13168e2873dd42c7750d8f36665ac4990233ff65", "committedDate": "2020-12-10T11:23:43Z", "message": "Added messaging versioning for Kafka Producers"}, "afterCommit": {"oid": "76bde21e4b11fb1a1b93d46735baaf7bf626b828", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/76bde21e4b11fb1a1b93d46735baaf7bf626b828", "committedDate": "2020-12-10T14:08:40Z", "message": "Added messaging versioning for Kafka Producers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTgyMTMw", "url": "https://github.com/telstra/open-kilda/pull/3907#pullrequestreview-549982130", "createdAt": "2020-12-11T10:36:02Z", "commit": {"oid": "76bde21e4b11fb1a1b93d46735baaf7bf626b828"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3787, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}