{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MzUyNDY5", "number": 3550, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODoxNDoxOVrOEJC2uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODoxNDoxOVrOEJC2uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE5NDE5OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowHistorySpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODoxNDoxOVrOGpX40w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDowNjoxOVrOGpbUvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNjE3OQ==", "bodyText": "should we require multitable for this?", "url": "https://github.com/telstra/open-kilda/pull/3550#discussion_r446036179", "createdAt": "2020-06-26T08:14:19Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowHistorySpec.groovy", "diffHunk": "@@ -31,11 +30,16 @@ class FlowHistorySpec extends HealthCheckSpecification {\n         timestampBefore = System.currentTimeSeconds() - 5\n     }\n \n-    @Tags([VIRTUAL]) // can't run it on stage env; mapping(v1->v2) is enabled, so flow is always created via V2\n     def \"History records are created for the create/update actions using custom timeline\"() {\n         when: \"Create a flow\"\n         def (Switch srcSwitch, Switch dstSwitch) = topology.activeSwitches\n         def flow = flowHelper.randomFlow(srcSwitch, dstSwitch)\n+        //set non default values\n+        flow.ignoreBandwidth = true\n+        flow.periodicPings = true\n+        flow.allocateProtectedPath = true\n+        flow.source.innerVlanId = flow.destination.vlanId\n+        flow.destination.innerVlanId = flow.source.vlanId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27aa241fdc32e51dc162bacd7e3512d7156b16a8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5MjQ3OA==", "bodyText": "oops, my bad\nassumeTrue is added.", "url": "https://github.com/telstra/open-kilda/pull/3550#discussion_r446092478", "createdAt": "2020-06-26T10:06:19Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowHistorySpec.groovy", "diffHunk": "@@ -31,11 +30,16 @@ class FlowHistorySpec extends HealthCheckSpecification {\n         timestampBefore = System.currentTimeSeconds() - 5\n     }\n \n-    @Tags([VIRTUAL]) // can't run it on stage env; mapping(v1->v2) is enabled, so flow is always created via V2\n     def \"History records are created for the create/update actions using custom timeline\"() {\n         when: \"Create a flow\"\n         def (Switch srcSwitch, Switch dstSwitch) = topology.activeSwitches\n         def flow = flowHelper.randomFlow(srcSwitch, dstSwitch)\n+        //set non default values\n+        flow.ignoreBandwidth = true\n+        flow.periodicPings = true\n+        flow.allocateProtectedPath = true\n+        flow.source.innerVlanId = flow.destination.vlanId\n+        flow.destination.innerVlanId = flow.source.vlanId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNjE3OQ=="}, "originalCommit": {"oid": "27aa241fdc32e51dc162bacd7e3512d7156b16a8"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1877, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}