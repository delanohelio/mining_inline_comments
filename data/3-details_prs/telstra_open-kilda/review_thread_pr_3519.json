{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTE0OTEw", "number": 3519, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDoxMzoyN1rOEBllug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDoxMzoyN1rOEBllug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk5ODk4OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/kafka/InfoDataDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDoxMzoyN1rOGdhc1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo0Njo1NVrOGhFekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwOTk0MA==", "bodyText": "are there way not to return anything in this case?", "url": "https://github.com/telstra/open-kilda/pull/3519#discussion_r433609940", "createdAt": "2020-06-02T04:13:27Z", "author": {"login": "timofei-durakov"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/kafka/InfoDataDeserializer.java", "diffHunk": "@@ -15,18 +15,40 @@\n \n package org.openkilda.wfm.kafka;\n \n+import static java.lang.String.format;\n+\n import org.openkilda.messaging.info.InfoData;\n import org.openkilda.wfm.topology.utils.SerializationUtils;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.kafka.common.serialization.Deserializer;\n \n import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Map;\n \n @Slf4j\n-public class InfoDataDeserializer extends Deserializer<InfoData> {\n+public class InfoDataDeserializer implements Deserializer<InfoData> {\n+\n+    @Override\n+    public void configure(Map<String, ?> configs, boolean isKey) {\n+        // No-op\n+    }\n+\n+    @Override\n+    public InfoData deserialize(String topic, byte[] data) {\n+        try {\n+            return SerializationUtils.MAPPER.readValue(data, InfoData.class);\n+        } catch (IOException e) {\n+            log.error(format(\"Failed to deserialize data: %s from topic %s\",\n+                    StringUtils.toEncodedString(data, Charset.defaultCharset()), topic), e);\n+            return InfoData.CORRUPTED_INFO_DATA;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cc3d0b0200d98d37fae87bb7d32d7126dbcf22"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0NTkzOQ==", "bodyText": "Reworked to return InfoData with error details.", "url": "https://github.com/telstra/open-kilda/pull/3519#discussion_r437345939", "createdAt": "2020-06-09T11:46:55Z", "author": {"login": "rozdy"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/kafka/InfoDataDeserializer.java", "diffHunk": "@@ -15,18 +15,40 @@\n \n package org.openkilda.wfm.kafka;\n \n+import static java.lang.String.format;\n+\n import org.openkilda.messaging.info.InfoData;\n import org.openkilda.wfm.topology.utils.SerializationUtils;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.kafka.common.serialization.Deserializer;\n \n import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Map;\n \n @Slf4j\n-public class InfoDataDeserializer extends Deserializer<InfoData> {\n+public class InfoDataDeserializer implements Deserializer<InfoData> {\n+\n+    @Override\n+    public void configure(Map<String, ?> configs, boolean isKey) {\n+        // No-op\n+    }\n+\n+    @Override\n+    public InfoData deserialize(String topic, byte[] data) {\n+        try {\n+            return SerializationUtils.MAPPER.readValue(data, InfoData.class);\n+        } catch (IOException e) {\n+            log.error(format(\"Failed to deserialize data: %s from topic %s\",\n+                    StringUtils.toEncodedString(data, Charset.defaultCharset()), topic), e);\n+            return InfoData.CORRUPTED_INFO_DATA;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwOTk0MA=="}, "originalCommit": {"oid": "99cc3d0b0200d98d37fae87bb7d32d7126dbcf22"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1850, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}