{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTMxMjUy", "number": 3686, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo0MjozMFrOEYFgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0ODozMFrOEb8f_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjkxNTQ2OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/BandwidthV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo0MjozMFrOHAOziw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzo1NTo1MFrOHA1g7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwNDYxOQ==", "bodyText": "I don't understand this. Test is about update, not reroute. Moreover, it is questionable whether this retry even has to happen at all", "url": "https://github.com/telstra/open-kilda/pull/3686#discussion_r470004619", "createdAt": "2020-08-13T14:42:30Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/BandwidthV2Spec.groovy", "diffHunk": "@@ -295,6 +295,13 @@ class BandwidthV2Spec extends HealthCheckSpecification {\n         flowPathAfterUpdate == flowPath\n         checkBandwidth(flowPathAfterUpdate, linksBeforeFlowCreate, linksAfterFlowUpdate)\n \n+        and: \"System retries to reroute the flow with ignored bandwidth\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2726bab74b156b36e2d48d4dd17333f806cd2d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYzODgyOA==", "bodyText": "agree, fixed\n(added relevant comment)", "url": "https://github.com/telstra/open-kilda/pull/3686#discussion_r470638828", "createdAt": "2020-08-14T13:55:50Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/BandwidthV2Spec.groovy", "diffHunk": "@@ -295,6 +295,13 @@ class BandwidthV2Spec extends HealthCheckSpecification {\n         flowPathAfterUpdate == flowPath\n         checkBandwidth(flowPathAfterUpdate, linksBeforeFlowCreate, linksAfterFlowUpdate)\n \n+        and: \"System retries to reroute the flow with ignored bandwidth\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwNDYxOQ=="}, "originalCommit": {"oid": "ee2726bab74b156b36e2d48d4dd17333f806cd2d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjkzMTg0OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo0NjowN1rOHAO9vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDowNzoxMVrOHA16Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwNzIyOA==", "bodyText": "This is a questionable solution, since we are not checking that the reroute operation has finished. You only check that flow is down (can be the result of original reroute or initial status change before reroute) and that the reroute retry has happened. You are not checking that reroute action has finished. Previous implementation did check the final 'REROUTE_FAIL' status of the operation.\nsame about other similar places in this pr", "url": "https://github.com/telstra/open-kilda/pull/3686#discussion_r470007228", "createdAt": "2020-08-13T14:46:07Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathSpec.groovy", "diffHunk": "@@ -970,7 +971,9 @@ class ProtectedPathSpec extends HealthCheckSpecification {\n         then: \"Flow state is changed to DOWN\"\n         Wrappers.wait(WAIT_OFFSET) {\n             assert northbound.getFlowStatus(flow.id).status == FlowState.DOWN\n-            assert northbound.getFlowHistory(flow.id).last().payload.find { it.action == REROUTE_FAIL }\n+            assert northbound.getFlowHistory(flow.id).find {\n+                it.action == REROUTE_ACTION && it.taskId =~ (/.+ : retry #1 ignore_bw true/)\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2726bab74b156b36e2d48d4dd17333f806cd2d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0NTM1MA==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3686#discussion_r470645350", "createdAt": "2020-08-14T14:07:11Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathSpec.groovy", "diffHunk": "@@ -970,7 +971,9 @@ class ProtectedPathSpec extends HealthCheckSpecification {\n         then: \"Flow state is changed to DOWN\"\n         Wrappers.wait(WAIT_OFFSET) {\n             assert northbound.getFlowStatus(flow.id).status == FlowState.DOWN\n-            assert northbound.getFlowHistory(flow.id).last().payload.find { it.action == REROUTE_FAIL }\n+            assert northbound.getFlowHistory(flow.id).find {\n+                it.action == REROUTE_ACTION && it.taskId =~ (/.+ : retry #1 ignore_bw true/)\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwNzIyOA=="}, "originalCommit": {"oid": "ee2726bab74b156b36e2d48d4dd17333f806cd2d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM4MjM4OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteSpec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0ODozMFrOHGLwLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzozMTowNVrOHGYLzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0NjA2Mg==", "bodyText": "should be either }?.payload?.last()?.action or just don't use safe navigation at all", "url": "https://github.com/telstra/open-kilda/pull/3686#discussion_r476246062", "createdAt": "2020-08-25T07:48:30Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteSpec.groovy", "diffHunk": "@@ -80,7 +82,12 @@ class AutoRerouteSpec extends HealthCheckSpecification {\n         def portDown = antiflap.portDown(isl.dstSwitch.dpId, isl.dstPort)\n \n         then: \"The flow becomes 'Down'\"\n-        Wrappers.wait(rerouteDelay + WAIT_OFFSET) { assert northbound.getFlowStatus(flow.id).status == FlowState.DOWN }\n+        Wrappers.wait(rerouteDelay + WAIT_OFFSET) {\n+            assert northbound.getFlowStatus(flow.id).status == FlowState.DOWN\n+            assert northbound.getFlowHistory(flow.id).find {\n+                it.action == REROUTE_ACTION && it.taskId =~ (/.+ : retry #1 ignore_bw true/)\n+            }?.payload.last().action == REROUTE_FAIL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a94f8263bba4f410eba5ceeb3dd753cf218338a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0OTc0Mg==", "bodyText": "I thought one safe navigation would be enough.\nfixed.", "url": "https://github.com/telstra/open-kilda/pull/3686#discussion_r476449742", "createdAt": "2020-08-25T13:31:05Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteSpec.groovy", "diffHunk": "@@ -80,7 +82,12 @@ class AutoRerouteSpec extends HealthCheckSpecification {\n         def portDown = antiflap.portDown(isl.dstSwitch.dpId, isl.dstPort)\n \n         then: \"The flow becomes 'Down'\"\n-        Wrappers.wait(rerouteDelay + WAIT_OFFSET) { assert northbound.getFlowStatus(flow.id).status == FlowState.DOWN }\n+        Wrappers.wait(rerouteDelay + WAIT_OFFSET) {\n+            assert northbound.getFlowStatus(flow.id).status == FlowState.DOWN\n+            assert northbound.getFlowHistory(flow.id).find {\n+                it.action == REROUTE_ACTION && it.taskId =~ (/.+ : retry #1 ignore_bw true/)\n+            }?.payload.last().action == REROUTE_FAIL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0NjA2Mg=="}, "originalCommit": {"oid": "8a94f8263bba4f410eba5ceeb3dd753cf218338a"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1805, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}