{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMDcwNTU2", "number": 3434, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjo0MDo0N1rOEALzYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjo0MDo0N1rOEALzYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjI4ODMzOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-persistence-tinkerpop/src/main/java/org/openkilda/persistence/ferma/repositories/FermaBfdSessionRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjo0MDo0N1rOGbTqzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzozMjoyM1rOHNNrSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4Njk4OQ==", "bodyText": "Why no to return Stream<?> in such methods? (just because we already have it and most times caller needs to make only one iteration over objects in response... so converting it into List is resource wasting)", "url": "https://github.com/telstra/open-kilda/pull/3434#discussion_r431286989", "createdAt": "2020-05-27T16:40:47Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-persistence-tinkerpop/src/main/java/org/openkilda/persistence/ferma/repositories/FermaBfdSessionRepository.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.persistence.ferma.repositories;\n+\n+import org.openkilda.model.BfdSession;\n+import org.openkilda.model.BfdSession.BfdSessionData;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.persistence.ConstraintViolationException;\n+import org.openkilda.persistence.TransactionManager;\n+import org.openkilda.persistence.ferma.FramedGraphFactory;\n+import org.openkilda.persistence.ferma.frames.BfdSessionFrame;\n+import org.openkilda.persistence.ferma.frames.KildaBaseVertexFrame;\n+import org.openkilda.persistence.ferma.frames.converters.SwitchIdConverter;\n+import org.openkilda.persistence.repositories.BfdSessionRepository;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ferma (Tinkerpop) implementation of {@link BfdSessionRepository}.\n+ */\n+class FermaBfdSessionRepository extends FermaGenericRepository<BfdSession, BfdSessionData, BfdSessionFrame>\n+        implements BfdSessionRepository {\n+    FermaBfdSessionRepository(FramedGraphFactory<?> graphFactory, TransactionManager transactionManager) {\n+        super(graphFactory, transactionManager);\n+    }\n+\n+    @Override\n+    public Collection<BfdSession> findAll() {\n+        return framedGraph().traverse(g -> g.V()\n+                .hasLabel(BfdSessionFrame.FRAME_LABEL))\n+                .toListExplicit(BfdSessionFrame.class).stream()\n+                .map(BfdSession::new)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce6a86be3122a3be8a6d313ac89408ce77d64885"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxNzYxMA==", "bodyText": "It's a good point. When the initial implementation of the persistence layer was introduced, we inherited the Neo4j-OGM approach - fetching via collections.\nHowever, I don't think this task is a right time to refactor the api.", "url": "https://github.com/telstra/open-kilda/pull/3434#discussion_r483617610", "createdAt": "2020-09-04T13:32:23Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-persistence-tinkerpop/src/main/java/org/openkilda/persistence/ferma/repositories/FermaBfdSessionRepository.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.persistence.ferma.repositories;\n+\n+import org.openkilda.model.BfdSession;\n+import org.openkilda.model.BfdSession.BfdSessionData;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.persistence.ConstraintViolationException;\n+import org.openkilda.persistence.TransactionManager;\n+import org.openkilda.persistence.ferma.FramedGraphFactory;\n+import org.openkilda.persistence.ferma.frames.BfdSessionFrame;\n+import org.openkilda.persistence.ferma.frames.KildaBaseVertexFrame;\n+import org.openkilda.persistence.ferma.frames.converters.SwitchIdConverter;\n+import org.openkilda.persistence.repositories.BfdSessionRepository;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ferma (Tinkerpop) implementation of {@link BfdSessionRepository}.\n+ */\n+class FermaBfdSessionRepository extends FermaGenericRepository<BfdSession, BfdSessionData, BfdSessionFrame>\n+        implements BfdSessionRepository {\n+    FermaBfdSessionRepository(FramedGraphFactory<?> graphFactory, TransactionManager transactionManager) {\n+        super(graphFactory, transactionManager);\n+    }\n+\n+    @Override\n+    public Collection<BfdSession> findAll() {\n+        return framedGraph().traverse(g -> g.V()\n+                .hasLabel(BfdSessionFrame.FRAME_LABEL))\n+                .toListExplicit(BfdSessionFrame.class).stream()\n+                .map(BfdSession::new)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4Njk4OQ=="}, "originalCommit": {"oid": "ce6a86be3122a3be8a6d313ac89408ce77d64885"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1957, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}