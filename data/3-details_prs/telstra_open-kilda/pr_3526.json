{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODEzMjg0", "number": 3526, "title": "Remove CopyField action from the VxLAN ingress rule.", "bodyText": "", "createdAt": "2020-06-04T12:51:11Z", "url": "https://github.com/telstra/open-kilda/pull/3526", "merged": true, "mergeCommit": {"oid": "16c28c984cff12aaaf46a05b092fd5d56adfdd2d"}, "closed": true, "closedAt": "2020-06-19T06:36:13Z", "author": {"login": "dpoltavets"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn-QFugFqTQyNDQ1NjAxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp3yGsgBqjM0MjkxNDM0NDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDU2MDEz", "url": "https://github.com/telstra/open-kilda/pull/3526#pullrequestreview-424456013", "createdAt": "2020-06-04T13:36:40Z", "commit": {"oid": "2d1efea498c31adf876b6e1bd251e2a472df1aaf"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNjo0MFrOGfGEwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNjo0MFrOGfGEwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1ODU2MA==", "bodyText": "incorrect comment, but correct code.\nint is 4 bytes. not 8", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r435258560", "createdAt": "2020-06-04T13:36:40Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/shared/packet/Vxlan.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/* Copyright 2017 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.shared.packet;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import net.floodlightcontroller.packet.BasePacket;\n+import net.floodlightcontroller.packet.IPacket;\n+\n+import java.nio.ByteBuffer;\n+\n+@lombok.Data\n+@EqualsAndHashCode(callSuper = true)\n+@NoArgsConstructor\n+public class Vxlan extends BasePacket {\n+    private static final byte FLAGS = 0x8;\n+    private static final int VXLAN_HEADER_SIZE_IN_BYTES = 8;\n+    private static final int FIRST_RESERVED_AREA_IN_BYTES = 3;\n+    private static final int SECOND_RESERVED_AREA_IN_BITS = 8;\n+\n+    private int vni;\n+\n+    @Override\n+    public byte[] serialize() {\n+        byte[] payloadData = null;\n+        if (this.payload != null) {\n+            this.payload.setParent(this);\n+            payloadData = this.payload.serialize();\n+        }\n+\n+        int length = (short) (VXLAN_HEADER_SIZE_IN_BYTES + (payloadData == null ? 0 : payloadData.length));\n+        byte[] data = new byte[length];\n+        ByteBuffer bb = ByteBuffer.wrap(data);\n+        bb.put(FLAGS);\n+        bb.put(new byte[FIRST_RESERVED_AREA_IN_BYTES]);\n+        // 8 bit shift to add reserved area\n+        bb.putInt(vni << SECOND_RESERVED_AREA_IN_BITS);\n+\n+        if (payloadData != null) {\n+            bb.put(payloadData);\n+        }\n+\n+        return data;\n+    }\n+\n+    @Override\n+    public IPacket deserialize(byte[] data, int offset, int length) {\n+        ByteBuffer bb = ByteBuffer.wrap(data, offset, length);\n+        // skip 8 bytes\n+        bb.getInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d1efea498c31adf876b6e1bd251e2a472df1aaf"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d1efea498c31adf876b6e1bd251e2a472df1aaf", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/2d1efea498c31adf876b6e1bd251e2a472df1aaf", "committedDate": "2020-06-04T12:46:42Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}, "afterCommit": {"oid": "84305dce81f9add79c8b2fbf220b6f1e336608f0", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/84305dce81f9add79c8b2fbf220b6f1e336608f0", "committedDate": "2020-06-05T05:04:24Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84305dce81f9add79c8b2fbf220b6f1e336608f0", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/84305dce81f9add79c8b2fbf220b6f1e336608f0", "committedDate": "2020-06-05T05:04:24Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}, "afterCommit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/e8a3b6b1cba1932b299e9944d330a744013d4ce1", "committedDate": "2020-06-05T05:06:19Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDM5NDEx", "url": "https://github.com/telstra/open-kilda/pull/3526#pullrequestreview-425039411", "createdAt": "2020-06-05T06:55:48Z", "commit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MjI3NTYy", "url": "https://github.com/telstra/open-kilda/pull/3526#pullrequestreview-425227562", "createdAt": "2020-06-05T11:47:17Z", "commit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTo0NzoxN1rOGfrQvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjoyMjozNlrOGfsTVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2NzgzOQ==", "bodyText": "Do you understand price of this change? \"ping\" will not be able to see issues with ingress flow rules (it is already can't see issues in egress rules). So only transit rules are verified.", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r435867839", "createdAt": "2020-06-05T11:47:17Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/command/ping/PingRequestCommand.java", "diffHunk": "@@ -104,7 +104,7 @@ private OFMessage makePacketOut(IOFSwitch sw, byte[] data) {\n         pktOut.setData(data);\n \n         List<OFAction> actions = Collections.singletonList(ofFactory.actions().buildOutput()\n-                .setPort(OFPort.TABLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MDY4Mg==", "bodyText": "If you make a decision on transit encapsulation type - you must process all existing and not existing(trigger apropriate error) types.", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r435870682", "createdAt": "2020-06-05T11:53:41Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/service/ping/PingService.java", "diffHunk": "@@ -94,21 +97,40 @@ public IPacket wrapData(Ping ping, byte[] payload) {\n         l3.setDestinationAddress(NET_L3_ADDRESS);\n         l3.setTtl(NET_L3_TTL);\n \n-        EthType l2Type = EthType.IPv4;\n-        IPacket l2Payload = l3;\n-        List<Integer> vlanStack = FlowEndpoint.makeVlanStack(ping.getIngressInnerVlanId(), ping.getIngressVlanId());\n-        for (int vlanID : vlanStack) {\n-            l2Payload = EthernetPacketToolbox.injectVlan(l2Payload, vlanID, l2Type);\n-            l2Type = EthType.VLAN_FRAME;\n-        }\n-\n         Ethernet l2 = new Ethernet();\n-        l2.setEtherType(l2Type);\n+        l2.setPayload(l3);\n+        l2.setEtherType(EthType.IPv4);\n         l2.setSourceMACAddress(magicSourceMacAddress);\n         DatapathId egressSwitch = DatapathId.of(ping.getDest().getDatapath().toLong());\n         l2.setDestinationMACAddress(MacAddress.of(egressSwitch));\n-        l2.setPayload(l2Payload);\n \n+        if (FlowEncapsulationType.VXLAN.equals(ping.getTransitEncapsulation().getType())) {\n+            Vxlan vxlan = new Vxlan();\n+            vxlan.setPayload(l2);\n+            vxlan.setVni(ping.getTransitEncapsulation().getId());\n+\n+            UDP udp = new UDP();\n+            udp.setPayload(vxlan);\n+            udp.setSourcePort(TransportPort.of(SwitchManager.STUB_VXLAN_UDP_SRC));\n+            udp.setDestinationPort(TransportPort.of(SwitchManager.VXLAN_UDP_DST));\n+\n+            IPv4 ipv4 = new IPv4();\n+            ipv4.setPayload(udp);\n+            ipv4.setProtocol(IpProtocol.UDP);\n+            ipv4.setSourceAddress(SwitchManager.STUB_VXLAN_IPV4_SRC);\n+            ipv4.setDestinationAddress(SwitchManager.STUB_VXLAN_IPV4_DST);\n+            ipv4.setTtl(NET_L3_TTL);\n+\n+            Ethernet ethernet = new Ethernet();\n+            ethernet.setPayload(ipv4);\n+            ethernet.setEtherType(EthType.IPv4);\n+            ethernet.setSourceMACAddress(magicSourceMacAddress);\n+            ethernet.setDestinationMACAddress(MacAddress.of(egressSwitch));\n+\n+            return ethernet;\n+        }\n+\n+        l2.setVlanID(ping.getTransitEncapsulation().getId().shortValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MzA5MQ==", "bodyText": "em... and what it is?", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r435873091", "createdAt": "2020-06-05T11:58:23Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/shared/packet/Vxlan.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/* Copyright 2017 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.shared.packet;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import net.floodlightcontroller.packet.BasePacket;\n+import net.floodlightcontroller.packet.IPacket;\n+\n+import java.nio.ByteBuffer;\n+\n+@lombok.Data\n+@EqualsAndHashCode(callSuper = true)\n+@NoArgsConstructor\n+public class Vxlan extends BasePacket {\n+    private static final byte FLAGS = 0x8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NTYwOA==", "bodyText": "Totally unreadable. You fill only one field and name all other as \"reserved\"... ugly. Without VxLan packet schema somewhere in front of eyes this code is not modifiable.", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r435875608", "createdAt": "2020-06-05T12:03:19Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/shared/packet/Vxlan.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/* Copyright 2017 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.shared.packet;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import net.floodlightcontroller.packet.BasePacket;\n+import net.floodlightcontroller.packet.IPacket;\n+\n+import java.nio.ByteBuffer;\n+\n+@lombok.Data\n+@EqualsAndHashCode(callSuper = true)\n+@NoArgsConstructor\n+public class Vxlan extends BasePacket {\n+    private static final byte FLAGS = 0x8;\n+    private static final int VXLAN_HEADER_SIZE_IN_BYTES = 8;\n+    private static final int FIRST_RESERVED_AREA_IN_BYTES = 3;\n+    private static final int SECOND_RESERVED_AREA_IN_BITS = 8;\n+\n+    private int vni;\n+\n+    @Override\n+    public byte[] serialize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4MDkyMw==", "bodyText": "Why 4?", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r435880923", "createdAt": "2020-06-05T12:14:42Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/shared/packet/Vxlan.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/* Copyright 2017 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.shared.packet;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import net.floodlightcontroller.packet.BasePacket;\n+import net.floodlightcontroller.packet.IPacket;\n+\n+import java.nio.ByteBuffer;\n+\n+@lombok.Data\n+@EqualsAndHashCode(callSuper = true)\n+@NoArgsConstructor\n+public class Vxlan extends BasePacket {\n+    private static final byte FLAGS = 0x8;\n+    private static final int VXLAN_HEADER_SIZE_IN_BYTES = 8;\n+    private static final int FIRST_RESERVED_AREA_IN_BYTES = 3;\n+    private static final int SECOND_RESERVED_AREA_IN_BITS = 8;\n+\n+    private int vni;\n+\n+    @Override\n+    public byte[] serialize() {\n+        byte[] payloadData = null;\n+        if (this.payload != null) {\n+            this.payload.setParent(this);\n+            payloadData = this.payload.serialize();\n+        }\n+\n+        int length = (short) (VXLAN_HEADER_SIZE_IN_BYTES + (payloadData == null ? 0 : payloadData.length));\n+        byte[] data = new byte[length];\n+        ByteBuffer bb = ByteBuffer.wrap(data);\n+        bb.put(FLAGS);\n+        bb.put(new byte[FIRST_RESERVED_AREA_IN_BYTES]);\n+        // 8 bit shift to add reserved area\n+        bb.putInt(vni << SECOND_RESERVED_AREA_IN_BITS);\n+\n+        if (payloadData != null) {\n+            bb.put(payloadData);\n+        }\n+\n+        return data;\n+    }\n+\n+    @Override\n+    public IPacket deserialize(byte[] data, int offset, int length) {\n+        ByteBuffer bb = ByteBuffer.wrap(data, offset, length);\n+        // skip 8 bytes\n+        bb.getInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1ODU2MA=="}, "originalCommit": {"oid": "2d1efea498c31adf876b6e1bd251e2a472df1aaf"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NDg4Nw==", "bodyText": "new ... toBuilder ... build?.. why for?", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r435884887", "createdAt": "2020-06-05T12:22:36Z", "author": {"login": "surabujin"}, "path": "src-java/ping-topology/ping-storm-topology/src/main/java/org/openkilda/wfm/topology/ping/bolt/FlowFetcher.java", "diffHunk": "@@ -110,8 +128,10 @@ private void handlePeriodicRequest(Tuple input) throws PipelineException {\n             refreshHeap(input, true);\n         }\n         final CommandContext commandContext = pullContext(input);\n-        for (Flow flow : flowsSet) {\n-            PingContext pingContext = new PingContext(Kinds.PERIODIC, flow);\n+        for (FlowWithTransitEncapsulation flow : flowsSet) {\n+            PingContext pingContext = new PingContext(Kinds.PERIODIC, flow.getFlow()).toBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzM2NzIy", "url": "https://github.com/telstra/open-kilda/pull/3526#pullrequestreview-425336722", "createdAt": "2020-06-05T14:10:22Z", "commit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMDoyM1rOGfwLQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMDoyM1rOGfwLQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0ODM1NQ==", "bodyText": "Why this check is required?", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r435948355", "createdAt": "2020-06-05T14:10:23Z", "author": {"login": "surabujin"}, "path": "src-java/ping-topology/ping-storm-topology/src/main/java/org/openkilda/wfm/topology/ping/bolt/PingProducer.java", "diffHunk": "@@ -66,20 +72,39 @@ private Ping buildPing(PingContext pingContext, FlowDirection direction) {\n         Flow flow = pingContext.getFlow();\n         FlowEndpoint ingress;\n         FlowEndpoint egress;\n+        int islPort;\n         if (FlowDirection.FORWARD == direction) {\n             ingress = new FlowSourceAdapter(flow).getEndpoint();\n             egress = new FlowDestAdapter(flow).getEndpoint();\n+            islPort = getIslPort(flow, flow.getForwardPath());\n         } else if (FlowDirection.REVERSE == direction) {\n             ingress = new FlowDestAdapter(flow).getEndpoint();\n             egress = new FlowSourceAdapter(flow).getEndpoint();\n+            islPort = getIslPort(flow, flow.getReversePath());\n         } else {\n             throw new IllegalArgumentException(String.format(\n                     \"Unexpected %s value: %s\", FlowDirection.class.getCanonicalName(), direction));\n         }\n \n-        return new Ping(ingress.getOuterVlanId(), ingress.getInnerVlanId(),\n-                        new NetworkEndpoint(ingress.getSwitchId(), ingress.getPortNumber()),\n-                        new NetworkEndpoint(egress.getSwitchId(), egress.getPortNumber()));\n+        return new Ping(new NetworkEndpoint(ingress.getSwitchId(), ingress.getPortNumber()),\n+                        new NetworkEndpoint(egress.getSwitchId(), egress.getPortNumber()),\n+                        pingContext.getTransitEncapsulation(), islPort);\n+    }\n+\n+    private int getIslPort(Flow flow, FlowPath flowPath) {\n+        List<PathSegment> segments = flowPath.getSegments();\n+        if (segments.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    format(\"Path segments not provided, flow_id: %s\", flow.getFlowId()));\n+        }\n+\n+        PathSegment ingressSegment = segments.get(0);\n+        if (!ingressSegment.getSrcSwitch().getSwitchId().equals(flowPath.getSrcSwitch().getSwitchId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8a3b6b1cba1932b299e9944d330a744013d4ce1", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/e8a3b6b1cba1932b299e9944d330a744013d4ce1", "committedDate": "2020-06-05T05:06:19Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}, "afterCommit": {"oid": "0fb904c9f81bd83d0db28e4a615a41bcb88f340a", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/0fb904c9f81bd83d0db28e4a615a41bcb88f340a", "committedDate": "2020-06-09T08:24:31Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDU5MDI3", "url": "https://github.com/telstra/open-kilda/pull/3526#pullrequestreview-427059027", "createdAt": "2020-06-09T11:50:32Z", "commit": {"oid": "0fb904c9f81bd83d0db28e4a615a41bcb88f340a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo1MDozMlrOGhFlxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo1MDozMlrOGhFlxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0Nzc4Mw==", "bodyText": "new ... toBuilder() ... build()... still", "url": "https://github.com/telstra/open-kilda/pull/3526#discussion_r437347783", "createdAt": "2020-06-09T11:50:32Z", "author": {"login": "surabujin"}, "path": "src-java/ping-topology/ping-storm-topology/src/main/java/org/openkilda/wfm/topology/ping/bolt/FlowFetcher.java", "diffHunk": "@@ -126,17 +148,44 @@ private void handleOnDemandRequest(Tuple input) throws PipelineException {\n         if (optionalFlow.isPresent()) {\n             Flow flow = optionalFlow.get();\n \n-            PingContext pingContext = new PingContext(Kinds.ON_DEMAND, flow).toBuilder()\n-                    .timeout(request.getTimeout())\n-                    .build();\n-            emit(input, pingContext, pullContext(input));\n-\n+            if (!flow.isOneSwitchFlow()) {\n+                Optional<FlowTransitEncapsulation> transitEncapsulation = getTransitEncapsulation(flow);\n+                if (transitEncapsulation.isPresent()) {\n+                    PingContext pingContext = new PingContext(Kinds.ON_DEMAND, flow).toBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb904c9f81bd83d0db28e4a615a41bcb88f340a"}, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fb904c9f81bd83d0db28e4a615a41bcb88f340a", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/0fb904c9f81bd83d0db28e4a615a41bcb88f340a", "committedDate": "2020-06-09T08:24:31Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}, "afterCommit": {"oid": "b612ab099ced91f56812ec89e7f2eeace7644f17", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/b612ab099ced91f56812ec89e7f2eeace7644f17", "committedDate": "2020-06-10T07:30:49Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b612ab099ced91f56812ec89e7f2eeace7644f17", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/b612ab099ced91f56812ec89e7f2eeace7644f17", "committedDate": "2020-06-10T07:30:49Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}, "afterCommit": {"oid": "7328b9914f33141b80b8c031e80dcf5d7f3078ec", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/7328b9914f33141b80b8c031e80dcf5d7f3078ec", "committedDate": "2020-06-10T08:34:17Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eb4f45072a063421299ecc8c6c099b8c8ff70f0", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/2eb4f45072a063421299ecc8c6c099b8c8ff70f0", "committedDate": "2020-06-10T11:16:09Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7328b9914f33141b80b8c031e80dcf5d7f3078ec", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/7328b9914f33141b80b8c031e80dcf5d7f3078ec", "committedDate": "2020-06-10T08:34:17Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}, "afterCommit": {"oid": "2eb4f45072a063421299ecc8c6c099b8c8ff70f0", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/2eb4f45072a063421299ecc8c6c099b8c8ff70f0", "committedDate": "2020-06-10T11:16:09Z", "message": "CopyField action has been removed from the VxLAN ingress rule."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3582, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}