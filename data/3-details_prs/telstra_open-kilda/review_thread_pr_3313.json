{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDQwMTUz", "number": 3313, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjo1MDoxMFrODsiE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNjo0NlrODx_Tzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDIyMjQzOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjo1MDoxMFrOF9bszw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoxOTo1NFrOF_AOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MTI5NQ==", "bodyText": "Why methods in Schema are not static? Are they have some state?\nWe have only 2 directions. Do we really need to pass direction emun every time? Maybe it's better to create 2 methods like: makeForward(long effectiveId) and makeReverse(long effectiveId)?\n\nBecause of these 2 points we have to use\nFlowSegmentCookieSchema.INSTANCE.make(cookie, FlowPathDirection.FORWARD)\ninstead of\nFlowSegmentCookieSchema.makeForward(cookie)", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r399961295", "createdAt": "2020-03-30T06:50:10Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwODM5OQ==", "bodyText": "1 - there are too many limits from static methods and no benefits (if you take a look at #3331 you will see that in some cases schemas can inherit each other).\n2 - direction can be not only written in the cookie but read too.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401608399", "createdAt": "2020-04-01T13:19:54Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MTI5NQ=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDIyOTEyOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjo1Mjo0OVrOF9bw4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxMTowNlrOGB6S9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MjMzOQ==", "bodyText": "why effective? what does it mean?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r399962339", "createdAt": "2020-03-30T06:52:49Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwOTA4Mw==", "bodyText": "This is my personal... preferences, I follow naming style of linux/unix system ('effective' term goes from effective-user-id term - this is not some constant ID but ID used right now, I believe it is close enough to our use case). Propose a better term.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401609083", "createdAt": "2020-04-01T13:20:53Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MjMzOQ=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1Njg4Ng==", "bodyText": "+1 to @niksv for me it doesn't meaningful, let's try to rename?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r404656886", "createdAt": "2020-04-07T09:11:06Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MjMzOQ=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDIzMzc0OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjo1NDoyNVrOF9bzgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyODozM1rOF_Am5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MzAwOQ==", "bodyText": "What if direction flag is NOT set? is it a valid case?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r399963009", "createdAt": "2020-03-30T06:54:25Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNDU2NA==", "bodyText": "The current implementation (https://github.com/telstra/open-kilda/blob/develop/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java#L234) do not enforce presence of direction bits. I do not want to introduce this limit now.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401614564", "createdAt": "2020-04-01T13:28:33Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MzAwOQ=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDI1MzE5OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzowMToyM1rOF9b_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzozNDoyMlrOF_A3Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2NjAwOA==", "bodyText": "Why LLDP type and ARP type have different naming?\nI guess it must be LLDP_INPUT_CUSTOMER_TYPE and ARP_INPUT_CUSTOMER_TYPE", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r399966008", "createdAt": "2020-03-30T07:01:23Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+public abstract class CookieSchema {\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+    static final BitField TYPE_FIELD   = new BitField(0x1FF0_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    protected abstract Cookie makeBlank();\n+\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        // inheritors can implement validate logic\n+    }\n+\n+    /**\n+     * Extract and return \"type\" field.\n+     */\n+    public CookieType getType(Cookie cookie) {\n+        return resolveEnum(CookieType.values(), getRawType(cookie), CookieType.class);\n+    }\n+\n+    // TODO: drop?\n+    protected int getRawType(Cookie cookie) {\n+        return (int) getField(cookie.getValue(), TYPE_FIELD);\n+    }\n+\n+    protected long setType(long value, CookieType type) {\n+        return setField(value, TYPE_FIELD, type.getValue());\n+    }\n+\n+    protected long getField(long value, BitField field) {\n+        long payload = value & field.getMask();\n+        return payload >>> field.getOffset();\n+    }\n+\n+    protected Cookie setField(Cookie cookie, BitField field, long payload) {\n+        long raw = setField(cookie.getValue(), field, payload);\n+        return new Cookie(raw);\n+    }\n+\n+    protected long setField(long value, BitField field, long payload) {\n+        long mask = field.getMask();\n+        payload <<= field.getOffset();\n+        payload &= mask;\n+        return (value & ~mask) | payload;\n+    }\n+\n+    protected void validateServiceFlag(Cookie cookie, boolean expectedValue) throws InvalidCookieException {\n+        boolean actual = getField(cookie.getValue(), SERVICE_FLAG) != 0;\n+        if (expectedValue != actual) {\n+            throw new InvalidCookieException(\n+                    String.format(\"Service flag is expected to be %s\", expectedValue ? \"set\" : \"unset\"), cookie);\n+        }\n+    }\n+\n+    protected static <T extends NumericEnumField> T resolveEnum(T[] valuesSpace, long needle, Class<T> typeRef) {\n+        for (T entry : valuesSpace) {\n+            if (entry.getValue() == needle) {\n+                return entry;\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\n+                \"Unable to map value %x value into %s value\", needle, typeRef.getSimpleName()));\n+    }\n+\n+    // 9 bit long field\n+    public enum CookieType implements NumericEnumField {\n+        SERVICE_OR_FLOW_SEGMENT(0x000),\n+        LLDP(0x001),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxODcxOQ==", "bodyText": "Because... I took it from the existing definition in Cookie.java (it was renamed later). Renamed.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401618719", "createdAt": "2020-04-01T13:34:22Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+public abstract class CookieSchema {\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+    static final BitField TYPE_FIELD   = new BitField(0x1FF0_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    protected abstract Cookie makeBlank();\n+\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        // inheritors can implement validate logic\n+    }\n+\n+    /**\n+     * Extract and return \"type\" field.\n+     */\n+    public CookieType getType(Cookie cookie) {\n+        return resolveEnum(CookieType.values(), getRawType(cookie), CookieType.class);\n+    }\n+\n+    // TODO: drop?\n+    protected int getRawType(Cookie cookie) {\n+        return (int) getField(cookie.getValue(), TYPE_FIELD);\n+    }\n+\n+    protected long setType(long value, CookieType type) {\n+        return setField(value, TYPE_FIELD, type.getValue());\n+    }\n+\n+    protected long getField(long value, BitField field) {\n+        long payload = value & field.getMask();\n+        return payload >>> field.getOffset();\n+    }\n+\n+    protected Cookie setField(Cookie cookie, BitField field, long payload) {\n+        long raw = setField(cookie.getValue(), field, payload);\n+        return new Cookie(raw);\n+    }\n+\n+    protected long setField(long value, BitField field, long payload) {\n+        long mask = field.getMask();\n+        payload <<= field.getOffset();\n+        payload &= mask;\n+        return (value & ~mask) | payload;\n+    }\n+\n+    protected void validateServiceFlag(Cookie cookie, boolean expectedValue) throws InvalidCookieException {\n+        boolean actual = getField(cookie.getValue(), SERVICE_FLAG) != 0;\n+        if (expectedValue != actual) {\n+            throw new InvalidCookieException(\n+                    String.format(\"Service flag is expected to be %s\", expectedValue ? \"set\" : \"unset\"), cookie);\n+        }\n+    }\n+\n+    protected static <T extends NumericEnumField> T resolveEnum(T[] valuesSpace, long needle, Class<T> typeRef) {\n+        for (T entry : valuesSpace) {\n+            if (entry.getValue() == needle) {\n+                return entry;\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\n+                \"Unable to map value %x value into %s value\", needle, typeRef.getSimpleName()));\n+    }\n+\n+    // 9 bit long field\n+    public enum CookieType implements NumericEnumField {\n+        SERVICE_OR_FLOW_SEGMENT(0x000),\n+        LLDP(0x001),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2NjAwOA=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDI2MzE3OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzowNDo1NFrOF9cFJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzozNDo1OVrOF_A44g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2NzUyNg==", "bodyText": "why effective? It is confusing. Do you mean \"unmasked cookie\" or something else?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r399967526", "createdAt": "2020-03-30T07:04:54Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }\n+    }\n+\n+    /**\n+     * Read the direction bits and return direction as {@link FlowPathDirection} constant.\n+     *\n+     * <p>Raise {@link IllegalArgumentException} if all direction bits are equal to 0.\n+     */\n+    public FlowPathDirection getValidatedDirection(Cookie cookie) {\n+        FlowPathDirection direction = getDirection(cookie);\n+        if (FlowPathDirection.UNKNOWN == direction) {\n+            throw new IllegalArgumentException(String.format(\"Cookie %s have no the direction marker\", cookie));\n+        }\n+        return direction;\n+    }\n+\n+    /**\n+     * Extract and return normalized representation flow path direction.\n+     */\n+    public FlowPathDirection getDirection(Cookie cookie) {\n+        long raw = cookie.getValue();\n+        if (getField(raw, FLOW_FORWARD_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.FORWARD;\n+        } else if (getField(raw, FLOW_REVERSE_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.REVERSE;\n+        } else {\n+            return FlowPathDirection.UNKNOWN;\n+        }\n+    }\n+\n+    /**\n+     * Set direction bits to the value passed as directions argument.\n+     */\n+    public Cookie setDirection(Cookie cookie, FlowPathDirection direction) {\n+        int forward = 0;\n+        int reverse = 0;\n+        if (direction == FlowPathDirection.FORWARD) {\n+            forward = 1;\n+        } else if (direction == FlowPathDirection.REVERSE) {\n+            reverse = 1;\n+        } else if (direction == FlowPathDirection.UNKNOWN) {\n+            // nothing to do\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Unable to map %s.%s into cookie direction bits\",\n+                    FlowPathDirection.class.getSimpleName(), direction));\n+        }\n+\n+        long raw = setField(cookie.getValue(), FLOW_FORWARD_DIRECTION_FLAG, forward);\n+        raw = setField(raw, FLOW_REVERSE_DIRECTION_FLAG, reverse);\n+        return new Cookie(raw);\n+    }\n+\n+    public Cookie setFlowEffectiveId(Cookie cookie, long effectiveId) {\n+        return new Cookie(setField(cookie.getValue(), FLOW_EFFECTIVE_ID_FIELD, effectiveId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxOTE3MA==", "bodyText": "You have already asked it.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401619170", "createdAt": "2020-04-01T13:34:59Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }\n+    }\n+\n+    /**\n+     * Read the direction bits and return direction as {@link FlowPathDirection} constant.\n+     *\n+     * <p>Raise {@link IllegalArgumentException} if all direction bits are equal to 0.\n+     */\n+    public FlowPathDirection getValidatedDirection(Cookie cookie) {\n+        FlowPathDirection direction = getDirection(cookie);\n+        if (FlowPathDirection.UNKNOWN == direction) {\n+            throw new IllegalArgumentException(String.format(\"Cookie %s have no the direction marker\", cookie));\n+        }\n+        return direction;\n+    }\n+\n+    /**\n+     * Extract and return normalized representation flow path direction.\n+     */\n+    public FlowPathDirection getDirection(Cookie cookie) {\n+        long raw = cookie.getValue();\n+        if (getField(raw, FLOW_FORWARD_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.FORWARD;\n+        } else if (getField(raw, FLOW_REVERSE_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.REVERSE;\n+        } else {\n+            return FlowPathDirection.UNKNOWN;\n+        }\n+    }\n+\n+    /**\n+     * Set direction bits to the value passed as directions argument.\n+     */\n+    public Cookie setDirection(Cookie cookie, FlowPathDirection direction) {\n+        int forward = 0;\n+        int reverse = 0;\n+        if (direction == FlowPathDirection.FORWARD) {\n+            forward = 1;\n+        } else if (direction == FlowPathDirection.REVERSE) {\n+            reverse = 1;\n+        } else if (direction == FlowPathDirection.UNKNOWN) {\n+            // nothing to do\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Unable to map %s.%s into cookie direction bits\",\n+                    FlowPathDirection.class.getSimpleName(), direction));\n+        }\n+\n+        long raw = setField(cookie.getValue(), FLOW_FORWARD_DIRECTION_FLAG, forward);\n+        raw = setField(raw, FLOW_REVERSE_DIRECTION_FLAG, reverse);\n+        return new Cookie(raw);\n+    }\n+\n+    public Cookie setFlowEffectiveId(Cookie cookie, long effectiveId) {\n+        return new Cookie(setField(cookie.getValue(), FLOW_EFFECTIVE_ID_FIELD, effectiveId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2NzUyNg=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDI3OTQ0OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowSideAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzoxMDowNVrOF9cOuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzozNjo0MVrOF_A9jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2OTk3Ng==", "bodyText": "maybe we need to add Method isForward()?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r399969976", "createdAt": "2020-03-30T07:10:05Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowSideAdapter.java", "diffHunk": "@@ -40,7 +42,7 @@ public static FlowSideAdapter makeIngressAdapter(Flow flow, FlowPath path) {\n      * Determine \"forward\" direction for provided flow/path pair and create adapter to access dest endpoint.\n      */\n     public static FlowSideAdapter makeEgressAdapter(Flow flow, FlowPath path) {\n-        if (path.getCookie().isMaskedAsForward()) {\n+        if (FlowSegmentCookieSchema.INSTANCE.getValidatedDirection(path.getCookie()) == FlowPathDirection.FORWARD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyMDM2Nw==", "bodyText": "No. Read direction and compare.\nYou will need too many such 'isSomething()` methods.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401620367", "createdAt": "2020-04-01T13:36:41Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowSideAdapter.java", "diffHunk": "@@ -40,7 +42,7 @@ public static FlowSideAdapter makeIngressAdapter(Flow flow, FlowPath path) {\n      * Determine \"forward\" direction for provided flow/path pair and create adapter to access dest endpoint.\n      */\n     public static FlowSideAdapter makeEgressAdapter(Flow flow, FlowPath path) {\n-        if (path.getCookie().isMaskedAsForward()) {\n+        if (FlowSegmentCookieSchema.INSTANCE.getValidatedDirection(path.getCookie()) == FlowPathDirection.FORWARD) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2OTk3Ng=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDI5NTYwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzoxNToxM1rOF9cYUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzozODowNFrOF_BBoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3MjQzMg==", "bodyText": "Why do we need to set UNKNOWN direction? where it can be used?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r399972432", "createdAt": "2020-03-30T07:15:13Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }\n+    }\n+\n+    /**\n+     * Read the direction bits and return direction as {@link FlowPathDirection} constant.\n+     *\n+     * <p>Raise {@link IllegalArgumentException} if all direction bits are equal to 0.\n+     */\n+    public FlowPathDirection getValidatedDirection(Cookie cookie) {\n+        FlowPathDirection direction = getDirection(cookie);\n+        if (FlowPathDirection.UNKNOWN == direction) {\n+            throw new IllegalArgumentException(String.format(\"Cookie %s have no the direction marker\", cookie));\n+        }\n+        return direction;\n+    }\n+\n+    /**\n+     * Extract and return normalized representation flow path direction.\n+     */\n+    public FlowPathDirection getDirection(Cookie cookie) {\n+        long raw = cookie.getValue();\n+        if (getField(raw, FLOW_FORWARD_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.FORWARD;\n+        } else if (getField(raw, FLOW_REVERSE_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.REVERSE;\n+        } else {\n+            return FlowPathDirection.UNKNOWN;\n+        }\n+    }\n+\n+    /**\n+     * Set direction bits to the value passed as directions argument.\n+     */\n+    public Cookie setDirection(Cookie cookie, FlowPathDirection direction) {\n+        int forward = 0;\n+        int reverse = 0;\n+        if (direction == FlowPathDirection.FORWARD) {\n+            forward = 1;\n+        } else if (direction == FlowPathDirection.REVERSE) {\n+            reverse = 1;\n+        } else if (direction == FlowPathDirection.UNKNOWN) {\n+            // nothing to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyMTQwOA==", "bodyText": "Because direction bits are not enforced.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401621408", "createdAt": "2020-04-01T13:38:04Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }\n+    }\n+\n+    /**\n+     * Read the direction bits and return direction as {@link FlowPathDirection} constant.\n+     *\n+     * <p>Raise {@link IllegalArgumentException} if all direction bits are equal to 0.\n+     */\n+    public FlowPathDirection getValidatedDirection(Cookie cookie) {\n+        FlowPathDirection direction = getDirection(cookie);\n+        if (FlowPathDirection.UNKNOWN == direction) {\n+            throw new IllegalArgumentException(String.format(\"Cookie %s have no the direction marker\", cookie));\n+        }\n+        return direction;\n+    }\n+\n+    /**\n+     * Extract and return normalized representation flow path direction.\n+     */\n+    public FlowPathDirection getDirection(Cookie cookie) {\n+        long raw = cookie.getValue();\n+        if (getField(raw, FLOW_FORWARD_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.FORWARD;\n+        } else if (getField(raw, FLOW_REVERSE_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.REVERSE;\n+        } else {\n+            return FlowPathDirection.UNKNOWN;\n+        }\n+    }\n+\n+    /**\n+     * Set direction bits to the value passed as directions argument.\n+     */\n+    public Cookie setDirection(Cookie cookie, FlowPathDirection direction) {\n+        int forward = 0;\n+        int reverse = 0;\n+        if (direction == FlowPathDirection.FORWARD) {\n+            forward = 1;\n+        } else if (direction == FlowPathDirection.REVERSE) {\n+            reverse = 1;\n+        } else if (direction == FlowPathDirection.UNKNOWN) {\n+            // nothing to do", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3MjQzMg=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDMyMDE4OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzoyMzowM1rOF9cmtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0MTo0NFrOF_BL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3NjExOA==", "bodyText": "I think this is not a best way to set a field. Try to put setField(cookie.getValue(), FLOW_FORWARD_DIRECTION_FLAG, forward); into if (direction == FlowPathDirection.FORWARD) {\nSomething like this:\n        long raw = cookie.getValue();\n        if (direction == FlowPathDirection.FORWARD) {\n            raw = setField(cookie.getValue(), FLOW_FORWARD_DIRECTION_FLAG, 1);\n        } else if (direction == FlowPathDirection.REVERSE) {\n            raw = setField(raw, FLOW_REVERSE_DIRECTION_FLAG, 1);\n        } else if (direction == FlowPathDirection.UNKNOWN) {\n            // nothing to do\n        } else {\n            throw new IllegalArgumentException(String.format(\n                    \"Unable to map %s.%s into cookie direction bits\",\n                    FlowPathDirection.class.getSimpleName(), direction));\n        }\n\n        return new Cookie(raw);", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r399976118", "createdAt": "2020-03-30T07:23:03Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }\n+    }\n+\n+    /**\n+     * Read the direction bits and return direction as {@link FlowPathDirection} constant.\n+     *\n+     * <p>Raise {@link IllegalArgumentException} if all direction bits are equal to 0.\n+     */\n+    public FlowPathDirection getValidatedDirection(Cookie cookie) {\n+        FlowPathDirection direction = getDirection(cookie);\n+        if (FlowPathDirection.UNKNOWN == direction) {\n+            throw new IllegalArgumentException(String.format(\"Cookie %s have no the direction marker\", cookie));\n+        }\n+        return direction;\n+    }\n+\n+    /**\n+     * Extract and return normalized representation flow path direction.\n+     */\n+    public FlowPathDirection getDirection(Cookie cookie) {\n+        long raw = cookie.getValue();\n+        if (getField(raw, FLOW_FORWARD_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.FORWARD;\n+        } else if (getField(raw, FLOW_REVERSE_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.REVERSE;\n+        } else {\n+            return FlowPathDirection.UNKNOWN;\n+        }\n+    }\n+\n+    /**\n+     * Set direction bits to the value passed as directions argument.\n+     */\n+    public Cookie setDirection(Cookie cookie, FlowPathDirection direction) {\n+        int forward = 0;\n+        int reverse = 0;\n+        if (direction == FlowPathDirection.FORWARD) {\n+            forward = 1;\n+        } else if (direction == FlowPathDirection.REVERSE) {\n+            reverse = 1;\n+        } else if (direction == FlowPathDirection.UNKNOWN) {\n+            // nothing to do\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Unable to map %s.%s into cookie direction bits\",\n+                    FlowPathDirection.class.getSimpleName(), direction));\n+        }\n+\n+        long raw = setField(cookie.getValue(), FLOW_FORWARD_DIRECTION_FLAG, forward);\n+        raw = setField(raw, FLOW_REVERSE_DIRECTION_FLAG, reverse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNDA1Mg==", "bodyText": "I still don't see any benefits here. Is the benefit in not defining 2 int variables?\nPS You lost 0 0 variant (\"nothing to do branch\"), plus you must update both bits, or you can make the cookie with both direction bits set.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401624052", "createdAt": "2020-04-01T13:41:44Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }\n+    }\n+\n+    /**\n+     * Read the direction bits and return direction as {@link FlowPathDirection} constant.\n+     *\n+     * <p>Raise {@link IllegalArgumentException} if all direction bits are equal to 0.\n+     */\n+    public FlowPathDirection getValidatedDirection(Cookie cookie) {\n+        FlowPathDirection direction = getDirection(cookie);\n+        if (FlowPathDirection.UNKNOWN == direction) {\n+            throw new IllegalArgumentException(String.format(\"Cookie %s have no the direction marker\", cookie));\n+        }\n+        return direction;\n+    }\n+\n+    /**\n+     * Extract and return normalized representation flow path direction.\n+     */\n+    public FlowPathDirection getDirection(Cookie cookie) {\n+        long raw = cookie.getValue();\n+        if (getField(raw, FLOW_FORWARD_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.FORWARD;\n+        } else if (getField(raw, FLOW_REVERSE_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.REVERSE;\n+        } else {\n+            return FlowPathDirection.UNKNOWN;\n+        }\n+    }\n+\n+    /**\n+     * Set direction bits to the value passed as directions argument.\n+     */\n+    public Cookie setDirection(Cookie cookie, FlowPathDirection direction) {\n+        int forward = 0;\n+        int reverse = 0;\n+        if (direction == FlowPathDirection.FORWARD) {\n+            forward = 1;\n+        } else if (direction == FlowPathDirection.REVERSE) {\n+            reverse = 1;\n+        } else if (direction == FlowPathDirection.UNKNOWN) {\n+            // nothing to do\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Unable to map %s.%s into cookie direction bits\",\n+                    FlowPathDirection.class.getSimpleName(), direction));\n+        }\n+\n+        long raw = setField(cookie.getValue(), FLOW_FORWARD_DIRECTION_FLAG, forward);\n+        raw = setField(raw, FLOW_REVERSE_DIRECTION_FLAG, reverse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3NjExOA=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDUzODQ5OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/test/java/org/openkilda/model/bitops/cookie/CookieSchemaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyMzoyNVrOF9eoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0MzozNVrOF_BRVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwOTM3OQ==", "bodyText": "you can use @Test(expected = IllegalArgumentException.class) for such tests\n    @Test(expected = IllegalArgumentException.class)\n    public void ensureNoEmptyMasks() {\n             new BitField(0);\n    }", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r400009379", "createdAt": "2020-03-30T08:23:25Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/test/java/org/openkilda/model/bitops/cookie/CookieSchemaTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class CookieSchemaTest extends GenericCookieSchemaTest {\n+    @Test\n+    public void ensureNoEmptyMasks() {\n+        try {\n+            new BitField(0);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected behaviour\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNTQzMA==", "bodyText": "ok", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401625430", "createdAt": "2020-04-01T13:43:35Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/test/java/org/openkilda/model/bitops/cookie/CookieSchemaTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class CookieSchemaTest extends GenericCookieSchemaTest {\n+    @Test\n+    public void ensureNoEmptyMasks() {\n+        try {\n+            new BitField(0);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected behaviour\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwOTM3OQ=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDUzOTE1OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/test/java/org/openkilda/model/bitops/cookie/CookieSchemaTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyMzozM1rOF9eo_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyMzozM1rOF9eo_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwOTQ2OQ==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r400009469", "createdAt": "2020-03-30T08:23:33Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/test/java/org/openkilda/model/bitops/cookie/CookieSchemaTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class CookieSchemaTest extends GenericCookieSchemaTest {\n+    @Test\n+    public void ensureNoEmptyMasks() {\n+        try {\n+            new BitField(0);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected behaviour\n+        }\n+    }\n+\n+    @Test\n+    public void ensureNoGapsInMask() {\n+        try {\n+            new BitField(5);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected behaviour\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDU2NjgyOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/ServiceCookieSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozMDo1NFrOF9e5_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0OTo1OFrOF_BkQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMzgyMA==", "bodyText": "why 9?\nit is 1001 as binary. should it be 7FF0?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r400013820", "createdAt": "2020-03-30T08:30:54Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/ServiceCookieSchema.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.MeterId;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class ServiceCookieSchema extends CookieSchema {\n+    public static final ServiceCookieSchema INSTANCE = new ServiceCookieSchema();\n+\n+    private static final Set<CookieType> allowedTypes = Stream.of(\n+            CookieType.SERVICE_OR_FLOW_SEGMENT,\n+            CookieType.LLDP,\n+            CookieType.MULTI_TABLE_ISL_VLAN_EGRESS_RULES,\n+            CookieType.MULTI_TABLE_ISL_VXLAN_EGRESS_RULES,\n+            CookieType.MULTI_TABLE_ISL_VXLAN_TRANSIT_RULES,\n+            CookieType.MULTI_TABLE_INGRESS_RULES,\n+            CookieType.ARP_INPUT_CUSTOMER_TYPE\n+    ).collect(Collectors.toSet());\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                   used by generic cookie -> 0x9FF0_0000_0000_0000L", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzMDI3Mw==", "bodyText": "hex(0x8000000000000000 | 0x1ff0000000000000) => 0x9ff0000000000000\nbin(0x8000000000000000 | 0x1ff0000000000000) => 0b1001111111110000000000000000000000000000000000000000000000000000", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401630273", "createdAt": "2020-04-01T13:49:58Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/ServiceCookieSchema.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.MeterId;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class ServiceCookieSchema extends CookieSchema {\n+    public static final ServiceCookieSchema INSTANCE = new ServiceCookieSchema();\n+\n+    private static final Set<CookieType> allowedTypes = Stream.of(\n+            CookieType.SERVICE_OR_FLOW_SEGMENT,\n+            CookieType.LLDP,\n+            CookieType.MULTI_TABLE_ISL_VLAN_EGRESS_RULES,\n+            CookieType.MULTI_TABLE_ISL_VXLAN_EGRESS_RULES,\n+            CookieType.MULTI_TABLE_ISL_VXLAN_TRANSIT_RULES,\n+            CookieType.MULTI_TABLE_INGRESS_RULES,\n+            CookieType.ARP_INPUT_CUSTOMER_TYPE\n+    ).collect(Collectors.toSet());\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                   used by generic cookie -> 0x9FF0_0000_0000_0000L", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMzgyMA=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDU2NzI1OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozMTowMFrOF9e6Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozMTowMFrOF9e6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMzg4Mw==", "bodyText": "why 9?\nit is 1001 as binary. should it be 7FF0?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r400013883", "createdAt": "2020-03-30T08:31:00Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDY0NTU0OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1MDo1MVrOF9fp1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDowNjo0MVrOF_CUlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNjA3MA==", "bodyText": "Honestly I don't like the idea of creating so many classes (schemas, types, etc).\nCookie class is a one place were you can find all information related to cookie(types, subtypes, schema with description of all bits used in cookie)\nInformation from the left(which were removed ) is readable, complete and easy understandable.\nNow we have several classes, with several subtypes, placed in different files. It's hard to work with such number of classes. It's easy to make a mistake. Usage in code doesn't looks like a syntax sugar. Example\nWas:\nlong cookie = flowResources.getUnmaskedCookie();\nCookie.buildForwardCookie(cookie)\n\nNow:\nCookie blank = FlowSegmentCookieSchema.INSTANCE.makeBlank();\nCookie flowCookie = FlowSegmentCookieSchema.INSTANCE.setFlowEffectiveId(\nblank, flowResources.getUnmaskedCookie());\nFlowSegmentCookieSchema.INSTANCE.setDirection(flowCookie, FlowPathDirection.FORWARD)\n\nMaybe we shouldn't make simple things difficult?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r400026070", "createdAt": "2020-03-30T08:50:51Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -45,101 +47,110 @@\n  * </p>\n  */\n @Value\n+@EqualsAndHashCode(of = {\"value\"})\n public class Cookie implements Comparable<Cookie>, Serializable {\n     private static final long serialVersionUID = 1L;\n \n-    public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n-    public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n-    public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n-\n-    // There is no alive system that use this deprecated direction flags so it should be save to drop it.\n-    @Deprecated\n-    public static final long DEPRECATED_FLOW_PATH_DIRECTION_FLAG = 0x0080_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_VALUE_MASK              = 0x0000_0000_000F_FFFFL;\n-    public static final long ISL_COOKIE_VALUE_MASK               = 0x0000_0000_000F_FFFFL;\n-    public static final long INGRESS_RULE_COOKIE_VALUE_MASK      = 0x0000_0000_000F_FFFFL;\n-\n-    public static final long DROP_RULE_COOKIE                           = 0x01L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_BROADCAST_RULE_COOKIE         = 0x02L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_RULE_COOKIE           = 0x03L | DEFAULT_RULE_FLAG;\n-    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE         = 0x04L | DEFAULT_RULE_FLAG;\n-    public static final long CATCH_BFD_RULE_COOKIE                      = 0x05L | DEFAULT_RULE_FLAG;\n-    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE             = 0x06L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE     = 0x07L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = 0x08L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_INGRESS_DROP_COOKIE             = 0x09L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE        = 0x0AL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE      = 0x0BL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_TRANSIT_DROP_COOKIE             = 0x0CL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INPUT_PRE_DROP_COOKIE                 = 0x0DL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_TRANSIT_COOKIE                        = 0x0EL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INGRESS_COOKIE                        = 0x0FL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_COOKIE                   = 0x10L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE             = 0x11L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE        = 0x12L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INPUT_PRE_DROP_COOKIE                  = 0x13L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_TRANSIT_COOKIE                         = 0x14L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INGRESS_COOKIE                         = 0x15L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_COOKIE                    = 0x16L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_VXLAN_COOKIE              = 0x17L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE         = 0x18L | DEFAULT_RULE_FLAG;\n-\n-    // 9 bits cookie type \"field\"\n-    public static final long TYPE_MASK                               = 0x1FF0_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_TYPE                        = 0x0000_0000_0000_0000L;\n-    public static final long LLDP_INPUT_CUSTOMER_TYPE                = 0x0010_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VLAN_EGRESS_RULES_TYPE   = 0x0020_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_EGRESS_RULES_TYPE  = 0x0030_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n-    public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n-    public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n-\n-    private final long value;\n-\n-    /**\n-     * Create {@code Cookie} instance and perform it's validation.\n-     */\n-    public static Cookie decode(long rawValue) {\n-        Cookie cookie = new Cookie(rawValue);\n-        cookie.ensureNoFlagsConflicts();\n-        return cookie;\n-    }\n+    // FIXME(surabujin): get rid from this constants", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MjY0NA==", "bodyText": "At first, we have used long type to represent cookie in our code. It produced a great number of different errors in all imaginable places. So it was wrapped into special type to ensure that if code expect the cookie it will receive the cookie and compiler will guarantee this - this is when Cookie class appears. At some later point, this guarantee was eliminated with methods like\n    public static long encodeIslVlanEgress(int port) {\n        return new Cookie(port | DEFAULT_RULE_FLAG)\n                .setType(CookieType.MULTI_TABLE_ISL_VLAN_EGRESS_RULES)\n                .getValue();\n    }\n\ni.e. methods that receive simple/generic type and return simple/generic type.\nLater cookie \"schema\" becomes more complex - type field was introduced and this field defines the meaning of other bits. So now cookie have not documented and not defined in any way restrictions which bits can be defined at the same time and which must collide. Keeping this all in \"simple\" way how it now - is keeping it in the way this restriction can't be easily defined in code and as the result can't be covered with tests.\nThe goal of all these \"extra classes as you say\" is to define each \"conflicting\" schema in its own class. It is verbose enough way to define \"compatible\" bits (and not compatible). Another goal is to eliminate the possibility to use simple/generic types instead of Cookie type (but it can't be reached so easy).", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r401642644", "createdAt": "2020-04-01T14:06:41Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -45,101 +47,110 @@\n  * </p>\n  */\n @Value\n+@EqualsAndHashCode(of = {\"value\"})\n public class Cookie implements Comparable<Cookie>, Serializable {\n     private static final long serialVersionUID = 1L;\n \n-    public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n-    public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n-    public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n-\n-    // There is no alive system that use this deprecated direction flags so it should be save to drop it.\n-    @Deprecated\n-    public static final long DEPRECATED_FLOW_PATH_DIRECTION_FLAG = 0x0080_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_VALUE_MASK              = 0x0000_0000_000F_FFFFL;\n-    public static final long ISL_COOKIE_VALUE_MASK               = 0x0000_0000_000F_FFFFL;\n-    public static final long INGRESS_RULE_COOKIE_VALUE_MASK      = 0x0000_0000_000F_FFFFL;\n-\n-    public static final long DROP_RULE_COOKIE                           = 0x01L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_BROADCAST_RULE_COOKIE         = 0x02L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_RULE_COOKIE           = 0x03L | DEFAULT_RULE_FLAG;\n-    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE         = 0x04L | DEFAULT_RULE_FLAG;\n-    public static final long CATCH_BFD_RULE_COOKIE                      = 0x05L | DEFAULT_RULE_FLAG;\n-    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE             = 0x06L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE     = 0x07L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = 0x08L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_INGRESS_DROP_COOKIE             = 0x09L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE        = 0x0AL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE      = 0x0BL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_TRANSIT_DROP_COOKIE             = 0x0CL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INPUT_PRE_DROP_COOKIE                 = 0x0DL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_TRANSIT_COOKIE                        = 0x0EL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INGRESS_COOKIE                        = 0x0FL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_COOKIE                   = 0x10L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE             = 0x11L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE        = 0x12L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INPUT_PRE_DROP_COOKIE                  = 0x13L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_TRANSIT_COOKIE                         = 0x14L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INGRESS_COOKIE                         = 0x15L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_COOKIE                    = 0x16L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_VXLAN_COOKIE              = 0x17L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE         = 0x18L | DEFAULT_RULE_FLAG;\n-\n-    // 9 bits cookie type \"field\"\n-    public static final long TYPE_MASK                               = 0x1FF0_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_TYPE                        = 0x0000_0000_0000_0000L;\n-    public static final long LLDP_INPUT_CUSTOMER_TYPE                = 0x0010_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VLAN_EGRESS_RULES_TYPE   = 0x0020_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_EGRESS_RULES_TYPE  = 0x0030_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n-    public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n-    public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n-\n-    private final long value;\n-\n-    /**\n-     * Create {@code Cookie} instance and perform it's validation.\n-     */\n-    public static Cookie decode(long rawValue) {\n-        Cookie cookie = new Cookie(rawValue);\n-        cookie.ensureNoFlagsConflicts();\n-        return cookie;\n-    }\n+    // FIXME(surabujin): get rid from this constants", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNjA3MA=="}, "originalCommit": {"oid": "97ddfaefcb8a3d297c9937caec65ca6114ac466e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk2ODA2OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1NjowNVrOGB5uTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToyMjozOFrOGD9fSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NzUwMA==", "bodyText": "this approach will lead to issue in future, it's like using Maps instead of Class Objects", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r404647500", "createdAt": "2020-04-07T08:56:05Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+public abstract class CookieSchema {\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField TYPE_FIELD   = new BitField(0x1FF0_0000_0000_0000L);\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    protected abstract Cookie makeBlank();\n+\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        // inheritors can implement validate logic\n+    }\n+\n+    /**\n+     * Extract and return \"type\" field.\n+     */\n+    public CookieType getType(Cookie cookie) {\n+        int numericType = (int) getField(cookie.getValue(), TYPE_FIELD);\n+        return resolveEnum(CookieType.values(), numericType, CookieType.class);\n+    }\n+\n+    protected long setType(long value, CookieType type) {\n+        return setField(value, TYPE_FIELD, type.getValue());\n+    }\n+\n+    protected long getField(long value, BitField field) {\n+        long payload = value & field.getMask();\n+        return payload >>> field.getOffset();\n+    }\n+\n+    protected Cookie setField(Cookie cookie, BitField field, long payload) {\n+        long raw = setField(cookie.getValue(), field, payload);\n+        return new Cookie(raw);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4MDQ3NQ==", "bodyText": "+1 Please, consider introducing a cookie builder.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405480475", "createdAt": "2020-04-08T12:19:02Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+public abstract class CookieSchema {\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField TYPE_FIELD   = new BitField(0x1FF0_0000_0000_0000L);\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    protected abstract Cookie makeBlank();\n+\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        // inheritors can implement validate logic\n+    }\n+\n+    /**\n+     * Extract and return \"type\" field.\n+     */\n+    public CookieType getType(Cookie cookie) {\n+        int numericType = (int) getField(cookie.getValue(), TYPE_FIELD);\n+        return resolveEnum(CookieType.values(), numericType, CookieType.class);\n+    }\n+\n+    protected long setType(long value, CookieType type) {\n+        return setField(value, TYPE_FIELD, type.getValue());\n+    }\n+\n+    protected long getField(long value, BitField field) {\n+        long payload = value & field.getMask();\n+        return payload >>> field.getOffset();\n+    }\n+\n+    protected Cookie setField(Cookie cookie, BitField field, long payload) {\n+        long raw = setField(cookie.getValue(), field, payload);\n+        return new Cookie(raw);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NzUwMA=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwNjM0NA==", "bodyText": "...", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r406806344", "createdAt": "2020-04-10T15:22:38Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+public abstract class CookieSchema {\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField TYPE_FIELD   = new BitField(0x1FF0_0000_0000_0000L);\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    protected abstract Cookie makeBlank();\n+\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        // inheritors can implement validate logic\n+    }\n+\n+    /**\n+     * Extract and return \"type\" field.\n+     */\n+    public CookieType getType(Cookie cookie) {\n+        int numericType = (int) getField(cookie.getValue(), TYPE_FIELD);\n+        return resolveEnum(CookieType.values(), numericType, CookieType.class);\n+    }\n+\n+    protected long setType(long value, CookieType type) {\n+        return setField(value, TYPE_FIELD, type.getValue());\n+    }\n+\n+    protected long getField(long value, BitField field) {\n+        long payload = value & field.getMask();\n+        return payload >>> field.getOffset();\n+    }\n+\n+    protected Cookie setField(Cookie cookie, BitField field, long payload) {\n+        long raw = setField(cookie.getValue(), field, payload);\n+        return new Cookie(raw);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NzUwMA=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk4MTIwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1OToyNFrOGB525Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToyMzowMlrOGD9gCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0OTcwMQ==", "bodyText": "why not switch/case?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r404649701", "createdAt": "2020-04-07T08:59:24Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }\n+    }\n+\n+    /**\n+     * Read the direction bits and return direction as {@link FlowPathDirection} constant.\n+     *\n+     * <p>Raise {@link IllegalArgumentException} if all direction bits are equal to 0.\n+     */\n+    public FlowPathDirection getValidatedDirection(Cookie cookie) {\n+        FlowPathDirection direction = getDirection(cookie);\n+        if (FlowPathDirection.UNKNOWN == direction) {\n+            throw new IllegalArgumentException(String.format(\"Cookie %s have no the direction marker\", cookie));\n+        }\n+        return direction;\n+    }\n+\n+    /**\n+     * Extract and return normalized representation flow path direction.\n+     */\n+    public FlowPathDirection getDirection(Cookie cookie) {\n+        long raw = cookie.getValue();\n+        if (getField(raw, FLOW_FORWARD_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.FORWARD;\n+        } else if (getField(raw, FLOW_REVERSE_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.REVERSE;\n+        } else {\n+            return FlowPathDirection.UNKNOWN;\n+        }\n+    }\n+\n+    /**\n+     * Set direction bits to the value passed as directions argument.\n+     */\n+    public Cookie setDirection(Cookie cookie, FlowPathDirection direction) {\n+        int forward = 0;\n+        int reverse = 0;\n+        if (direction == FlowPathDirection.FORWARD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwNjUzOQ==", "bodyText": "don't matter.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r406806539", "createdAt": "2020-04-10T15:23:02Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/FlowSegmentCookieSchema.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.bitops.BitField;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class FlowSegmentCookieSchema extends CookieSchema {\n+    public static final FlowSegmentCookieSchema INSTANCE = new FlowSegmentCookieSchema();\n+\n+    // update ALL_FIELDS if modify fields list\n+    //                                     used by generic cookie -> 0x9FF0_0000_0000_0000L\n+    static final BitField FLOW_EFFECTIVE_ID_FIELD     = new BitField(0x0000_0000_000F_FFFFL);\n+    static final BitField FLOW_REVERSE_DIRECTION_FLAG = new BitField(0x2000_0000_0000_0000L);\n+    static final BitField FLOW_FORWARD_DIRECTION_FLAG = new BitField(0x4000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = ArrayUtils.addAll(\n+            CookieSchema.ALL_FIELDS, FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG, FLOW_EFFECTIVE_ID_FIELD);\n+\n+    public Cookie make(long effectiveId) {\n+        return setFlowEffectiveId(makeBlank(), effectiveId);\n+    }\n+\n+    public Cookie make(long effectiveId, FlowPathDirection direction) {\n+        Cookie cookie = setFlowEffectiveId(makeBlank(), effectiveId);\n+        return setDirection(cookie, direction);\n+    }\n+\n+    @Override\n+    public Cookie makeBlank() {\n+        return new Cookie(setType(0, CookieType.SERVICE_OR_FLOW_SEGMENT));\n+    }\n+\n+    @Override\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        super.validate(cookie);\n+\n+        validateServiceFlag(cookie, false);\n+\n+        long raw = cookie.getValue();\n+        int directionBitsSetCount = 0;\n+        BitField[] mutuallyExclusiveFlags = {FLOW_FORWARD_DIRECTION_FLAG, FLOW_REVERSE_DIRECTION_FLAG};\n+        for (BitField field : mutuallyExclusiveFlags) {\n+            directionBitsSetCount += getField(raw, field);\n+        }\n+\n+        if (1 < directionBitsSetCount) {\n+            throw new InvalidCookieException(\"Illegal flags combination - both the direction bits are set\", cookie);\n+        }\n+    }\n+\n+    /**\n+     * Read the direction bits and return direction as {@link FlowPathDirection} constant.\n+     *\n+     * <p>Raise {@link IllegalArgumentException} if all direction bits are equal to 0.\n+     */\n+    public FlowPathDirection getValidatedDirection(Cookie cookie) {\n+        FlowPathDirection direction = getDirection(cookie);\n+        if (FlowPathDirection.UNKNOWN == direction) {\n+            throw new IllegalArgumentException(String.format(\"Cookie %s have no the direction marker\", cookie));\n+        }\n+        return direction;\n+    }\n+\n+    /**\n+     * Extract and return normalized representation flow path direction.\n+     */\n+    public FlowPathDirection getDirection(Cookie cookie) {\n+        long raw = cookie.getValue();\n+        if (getField(raw, FLOW_FORWARD_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.FORWARD;\n+        } else if (getField(raw, FLOW_REVERSE_DIRECTION_FLAG) != 0) {\n+            return FlowPathDirection.REVERSE;\n+        } else {\n+            return FlowPathDirection.UNKNOWN;\n+        }\n+    }\n+\n+    /**\n+     * Set direction bits to the value passed as directions argument.\n+     */\n+    public Cookie setDirection(Cookie cookie, FlowPathDirection direction) {\n+        int forward = 0;\n+        int reverse = 0;\n+        if (direction == FlowPathDirection.FORWARD) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0OTcwMQ=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTAxODcxOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowOToyMlrOGB6O1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowOToyMlrOGB6O1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1NTgzMA==", "bodyText": "this need a javadoc", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r404655830", "createdAt": "2020-04-07T09:09:22Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+public abstract class CookieSchema {\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField TYPE_FIELD   = new BitField(0x1FF0_0000_0000_0000L);\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    protected abstract Cookie makeBlank();\n+\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        // inheritors can implement validate logic\n+    }\n+\n+    /**\n+     * Extract and return \"type\" field.\n+     */\n+    public CookieType getType(Cookie cookie) {\n+        int numericType = (int) getField(cookie.getValue(), TYPE_FIELD);\n+        return resolveEnum(CookieType.values(), numericType, CookieType.class);\n+    }\n+\n+    protected long setType(long value, CookieType type) {\n+        return setField(value, TYPE_FIELD, type.getValue());\n+    }\n+\n+    protected long getField(long value, BitField field) {\n+        long payload = value & field.getMask();\n+        return payload >>> field.getOffset();\n+    }\n+\n+    protected Cookie setField(Cookie cookie, BitField field, long payload) {\n+        long raw = setField(cookie.getValue(), field, payload);\n+        return new Cookie(raw);\n+    }\n+\n+    protected long setField(long value, BitField field, long payload) {\n+        long mask = field.getMask();\n+        payload <<= field.getOffset();\n+        payload &= mask;\n+        return (value & ~mask) | payload;\n+    }\n+\n+    protected void validateServiceFlag(Cookie cookie, boolean expectedValue) throws InvalidCookieException {\n+        boolean actual = getField(cookie.getValue(), SERVICE_FLAG) != 0;\n+        if (expectedValue != actual) {\n+            throw new InvalidCookieException(\n+                    String.format(\"Service flag is expected to be %s\", expectedValue ? \"set\" : \"unset\"), cookie);\n+        }\n+    }\n+\n+    protected static <T extends NumericEnumField> T resolveEnum(T[] valuesSpace, long needle, Class<T> typeRef) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTAzODg0OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNDoyNVrOGB6bbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNDoyNVrOGB6bbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1OTA1NQ==", "bodyText": "No java doc", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r404659055", "createdAt": "2020-04-07T09:14:25Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops;\n+\n+import org.openkilda.model.Cookie;\n+\n+import lombok.Getter;\n+\n+@Getter\n+public class BitField {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTQwNDc5OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/mappers/HistoryMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODoyOToxMVrOGCkfyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozMDo0OVrOGD9tkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0ODI5OA==", "bodyText": "nit: This could be a part of the generatedMap.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405348298", "createdAt": "2020-04-08T08:29:11Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/mappers/HistoryMapper.java", "diffHunk": "@@ -97,25 +99,18 @@\n      * Note: you have to additionally set {@link org.openkilda.wfm.share.history.model.FlowDumpData.DumpType}\n      * to the dump data.\n      */\n-    @Mapping(target = \"sourceSwitch\", expression = \"java(flow.getSrcSwitch().getSwitchId())\")\n-    @Mapping(target = \"destinationSwitch\", expression = \"java(flow.getDestSwitch().getSwitchId())\")\n-    @Mapping(source = \"flow.srcPort\", target = \"sourcePort\")\n-    @Mapping(source = \"flow.destPort\", target = \"destinationPort\")\n-    @Mapping(source = \"flow.srcVlan\", target = \"sourceVlan\")\n-    @Mapping(source = \"flow.destVlan\", target = \"destinationVlan\")\n-    @Mapping(source = \"flow.flowId\", target = \"flowId\")\n-    @Mapping(source = \"flow.bandwidth\", target = \"bandwidth\")\n-    @Mapping(source = \"flow.ignoreBandwidth\", target = \"ignoreBandwidth\")\n-    @Mapping(target = \"forwardCookie\", expression =\n-            \"java(org.openkilda.model.Cookie.buildForwardCookie(resources.getUnmaskedCookie()))\")\n-    @Mapping(target = \"reverseCookie\", expression =\n-            \"java(org.openkilda.model.Cookie.buildReverseCookie(resources.getUnmaskedCookie()))\")\n-    @Mapping(source = \"resources.forward.meterId\", target = \"forwardMeterId\")\n-    @Mapping(source = \"resources.reverse.meterId\", target = \"reverseMeterId\")\n-    @Mapping(source = \"dumpType\", target = \"dumpType\")\n-    @BeanMapping(ignoreByDefault = true)\n-    public abstract FlowDumpData map(Flow flow, FlowResources resources, DumpType dumpType);\n+    public FlowDumpData map(Flow flow, FlowResources resources, DumpType dumpType) {\n+        FlowDumpData result = generatedMap(flow, resources, dumpType);\n+\n+        result.setSourceSwitch(flow.getSrcSwitch().getSwitchId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDAwMw==", "bodyText": "moved.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r406810003", "createdAt": "2020-04-10T15:30:49Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/mappers/HistoryMapper.java", "diffHunk": "@@ -97,25 +99,18 @@\n      * Note: you have to additionally set {@link org.openkilda.wfm.share.history.model.FlowDumpData.DumpType}\n      * to the dump data.\n      */\n-    @Mapping(target = \"sourceSwitch\", expression = \"java(flow.getSrcSwitch().getSwitchId())\")\n-    @Mapping(target = \"destinationSwitch\", expression = \"java(flow.getDestSwitch().getSwitchId())\")\n-    @Mapping(source = \"flow.srcPort\", target = \"sourcePort\")\n-    @Mapping(source = \"flow.destPort\", target = \"destinationPort\")\n-    @Mapping(source = \"flow.srcVlan\", target = \"sourceVlan\")\n-    @Mapping(source = \"flow.destVlan\", target = \"destinationVlan\")\n-    @Mapping(source = \"flow.flowId\", target = \"flowId\")\n-    @Mapping(source = \"flow.bandwidth\", target = \"bandwidth\")\n-    @Mapping(source = \"flow.ignoreBandwidth\", target = \"ignoreBandwidth\")\n-    @Mapping(target = \"forwardCookie\", expression =\n-            \"java(org.openkilda.model.Cookie.buildForwardCookie(resources.getUnmaskedCookie()))\")\n-    @Mapping(target = \"reverseCookie\", expression =\n-            \"java(org.openkilda.model.Cookie.buildReverseCookie(resources.getUnmaskedCookie()))\")\n-    @Mapping(source = \"resources.forward.meterId\", target = \"forwardMeterId\")\n-    @Mapping(source = \"resources.reverse.meterId\", target = \"reverseMeterId\")\n-    @Mapping(source = \"dumpType\", target = \"dumpType\")\n-    @BeanMapping(ignoreByDefault = true)\n-    public abstract FlowDumpData map(Flow flow, FlowResources resources, DumpType dumpType);\n+    public FlowDumpData map(Flow flow, FlowResources resources, DumpType dumpType) {\n+        FlowDumpData result = generatedMap(flow, resources, dumpType);\n+\n+        result.setSourceSwitch(flow.getSrcSwitch().getSwitchId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0ODI5OA=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTk4MDI3OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowMzowNlrOGCqItA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNjo0OVrOGD93sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0MDY5Mg==", "bodyText": "nit: although there's no such rule in OpenKilda code convention, comparing of enum values in reverse argument order (CookieType.XYZ == cookieType instead of cookieType == CookieType.XYZ) is a controversial practice, which has no benefits but leads to poor readability. BTW, the sonar rule doesn't list this variant as a compliant one - https://rules.sonarsource.com/java/RSPEC-4551", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405440692", "createdAt": "2020-04-08T11:03:06Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java", "diffHunk": "@@ -710,27 +714,27 @@ private Long processInstallDefaultFlowByCookie(SwitchId switchId, long cookie) t\n             return switchManager.installArpPostIngressOneSwitchFlow(dpid);\n         } else if (cookie == ARP_TRANSIT_COOKIE) {\n             return switchManager.installArpTransitFlow(dpid);\n-        } else if (Cookie.isIngressRulePassThrough(cookie)) {\n-            long port = Cookie.getValueFromIntermediateCookie(cookie);\n+        } else if (CookieType.MULTI_TABLE_INGRESS_RULES == cookieType) {\n+            long port = ServiceCookieSchema.INSTANCE.getUniqueId(encodedCookie);\n             return switchManager.installIntermediateIngressRule(dpid, (int) port);\n-        } else if (Cookie.isIslVlanEgress(cookie)) {\n-            long port = Cookie.getValueFromIntermediateCookie(cookie);\n+        } else if (CookieType.MULTI_TABLE_ISL_VLAN_EGRESS_RULES == cookieType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjU5NQ==", "bodyText": "Don't see any difference in readability - in any case you must read both sides of ==. Swapped.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r406812595", "createdAt": "2020-04-10T15:36:49Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java", "diffHunk": "@@ -710,27 +714,27 @@ private Long processInstallDefaultFlowByCookie(SwitchId switchId, long cookie) t\n             return switchManager.installArpPostIngressOneSwitchFlow(dpid);\n         } else if (cookie == ARP_TRANSIT_COOKIE) {\n             return switchManager.installArpTransitFlow(dpid);\n-        } else if (Cookie.isIngressRulePassThrough(cookie)) {\n-            long port = Cookie.getValueFromIntermediateCookie(cookie);\n+        } else if (CookieType.MULTI_TABLE_INGRESS_RULES == cookieType) {\n+            long port = ServiceCookieSchema.INSTANCE.getUniqueId(encodedCookie);\n             return switchManager.installIntermediateIngressRule(dpid, (int) port);\n-        } else if (Cookie.isIslVlanEgress(cookie)) {\n-            long port = Cookie.getValueFromIntermediateCookie(cookie);\n+        } else if (CookieType.MULTI_TABLE_ISL_VLAN_EGRESS_RULES == cookieType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0MDY5Mg=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjAwMDEzOnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/service/connected/ConnectedDevicesService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowOTowNlrOGCqUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNzo1OVrOGD959A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0MzY3OQ==", "bodyText": "Please, don't use internal or library-specific collection classes. In addition to standard java collections, we have 2 libraries in dependencies: apache commons and guava.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405443679", "createdAt": "2020-04-08T11:09:06Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/service/connected/ConnectedDevicesService.java", "diffHunk": "@@ -52,17 +41,35 @@\n import net.floodlightcontroller.packet.Ethernet;\n import net.floodlightcontroller.packet.IPacket;\n import net.floodlightcontroller.packet.LLDP;\n+import org.mapstruct.ap.internal.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMzE3Mg==", "bodyText": "It was not intentional.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r406813172", "createdAt": "2020-04-10T15:37:59Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/service/connected/ConnectedDevicesService.java", "diffHunk": "@@ -52,17 +41,35 @@\n import net.floodlightcontroller.packet.Ethernet;\n import net.floodlightcontroller.packet.IPacket;\n import net.floodlightcontroller.packet.LLDP;\n+import org.mapstruct.ap.internal.util.Collections;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0MzY3OQ=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjAyOTQ1OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/service/connected/ConnectedDevicesService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMToxODo1M1rOGCqnMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMToxODo1M1rOGCqnMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0ODQ5Ng==", "bodyText": "If this is supposed to be a constant, then use an unmodifiable set and name the field in upper-case. Please, check guava's ImmutableSet.of.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405448496", "createdAt": "2020-04-08T11:18:53Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/service/connected/ConnectedDevicesService.java", "diffHunk": "@@ -52,17 +41,35 @@\n import net.floodlightcontroller.packet.Ethernet;\n import net.floodlightcontroller.packet.IPacket;\n import net.floodlightcontroller.packet.LLDP;\n+import org.mapstruct.ap.internal.util.Collections;\n import org.projectfloodlight.openflow.protocol.OFType;\n import org.projectfloodlight.openflow.types.U64;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n \n public class ConnectedDevicesService implements IService, IInputTranslator {\n     private static final Logger logger = LoggerFactory.getLogger(ConnectedDevicesService.class);\n \n+    private static final Set<ServiceCookieTag> lldpServiceTags = Collections.asSet(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA3ODcxOnYy", "diffSide": "RIGHT", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/BaseResourceAllocationAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNDo0MFrOGCrF7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNDo0MFrOGCrF7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NjM2NA==", "bodyText": "What does the blank cookie mean from business logic standpoint? Shouldn't this be some kind of cookie builder?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405456364", "createdAt": "2020-04-08T11:34:40Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/BaseResourceAllocationAction.java", "diffHunk": "@@ -190,12 +192,17 @@ protected boolean isNotSamePath(PathPair pathPair, FlowPathPair flowPathPair) {\n \n     protected FlowPathPair createFlowPathPair(Flow flow, FlowPathPair pathsToReuseBandwidth,\n                                               PathPair pathPair, FlowResources flowResources) {\n-        long cookie = flowResources.getUnmaskedCookie();\n-        FlowPath newForwardPath = flowPathBuilder.buildFlowPath(flow, flowResources.getForward(),\n-                pathPair.getForward(), Cookie.buildForwardCookie(cookie));\n+        Cookie blank = FlowSegmentCookieSchema.INSTANCE.makeBlank();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjEzOTEyOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowPathDirection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo1MzowMFrOGCrrPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTowNjo0OVrOGGbzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2NTkxNg==", "bodyText": "Could you please add javadoc with some explanation why UNKNOWN path direction is available / possible in Kilda data model?\nLooks like this value was introduced just to cover a specific case when a method can't determine a cookie direction, which not a reason to introduce a new direction into the model. Null or Optional.empty() may address this.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405465916", "createdAt": "2020-04-08T11:53:00Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowPathDirection.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+public enum FlowPathDirection {\n+    UNKNOWN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNjA1MQ==", "bodyText": "I can't explain why this value is possible. Up to now, we do not restrict the flow(also we do not have a separation between flow cookies and other cookies) cookie to have a specific direction. And I have no plans to add this restriction in this PR.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r406816051", "createdAt": "2020-04-10T15:44:39Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowPathDirection.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+public enum FlowPathDirection {\n+    UNKNOWN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2NTkxNg=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MDkzNw==", "bodyText": "Ok, then I'd call those cookies as with \"unspecified\" direction rather than UNKNOWN. The current version (UNKNOWN) sounds like we can't determine it for some reason...", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r408690937", "createdAt": "2020-04-15T09:03:43Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowPathDirection.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+public enum FlowPathDirection {\n+    UNKNOWN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2NTkxNg=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwMDEyMA==", "bodyText": "Renamed to \"UNDEFINED\".", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r409400120", "createdAt": "2020-04-16T09:06:49Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowPathDirection.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+public enum FlowPathDirection {\n+    UNKNOWN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2NTkxNg=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjIxNDkwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxNDoxN1rOGCsZuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMDoxNVrOGFwwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NzgxOQ==", "bodyText": "nit: Can't this be just as following?\nif (mask == 0) throw new IllegalArgumentException(\"Bit field mask must not be 0\");\nlong theBit = Long.lowestOneBit(mask);\nif (theBit != mask) throw new IllegalArgumentException(\"Illegal bit field mask\");\noffset = Long.numberOfTrailingZeros(theBit) + 1;", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405477819", "createdAt": "2020-04-08T12:14:17Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops;\n+\n+import org.openkilda.model.Cookie;\n+\n+import lombok.Getter;\n+\n+@Getter\n+public class BitField {\n+    private final long mask;\n+    private final int offset;\n+\n+    public BitField(long mask) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyNjU4Ng==", "bodyText": "Long.lowestOneBit(mask) return one lowest bit, so this approach fails for any bit field(mask) longer than 1 bit.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r406826586", "createdAt": "2020-04-10T16:09:25Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops;\n+\n+import org.openkilda.model.Cookie;\n+\n+import lombok.Getter;\n+\n+@Getter\n+public class BitField {\n+    private final long mask;\n+    private final int offset;\n+\n+    public BitField(long mask) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NzgxOQ=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDgyMA==", "bodyText": "Got it.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r408694820", "createdAt": "2020-04-15T09:10:15Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops;\n+\n+import org.openkilda.model.Cookie;\n+\n+import lombok.Getter;\n+\n+@Getter\n+public class BitField {\n+    private final long mask;\n+    private final int offset;\n+\n+    public BitField(long mask) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NzgxOQ=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjIyNzM0OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxODowNFrOGCshsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxMDo1NlrOGFwxzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3OTg1Ng==", "bodyText": "Why did CookieSchema become a part of the bitops package? Shouldn't it be on the same level as the cookie entity? I'd propose to move the cookie and cookie schema under \"org.openkilda.model.cookie\".", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405479856", "createdAt": "2020-04-08T12:18:04Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyNzg4NQ==", "bodyText": "Move Cookie class and all related classes into org.openkilda.model.cookie was my initial idea. But it produces so huge change, that I have decided to do it in some late and as a PR that contains class movements only.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r406827885", "createdAt": "2020-04-10T16:12:38Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3OTg1Ng=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NTI0NQ==", "bodyText": "Ok", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r408695245", "createdAt": "2020-04-15T09:10:56Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3OTg1Ng=="}, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjMzNTg2OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NzoyMFrOGCtkXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NzoyMFrOGCtkXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NjkyNQ==", "bodyText": "nit: where is @OverRide?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r405496925", "createdAt": "2020-04-08T12:47:20Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/cookie/CookieSchema.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops.cookie;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+public abstract class CookieSchema {\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField TYPE_FIELD   = new BitField(0x1FF0_0000_0000_0000L);\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    protected abstract Cookie makeBlank();\n+\n+    public void validate(Cookie cookie) throws InvalidCookieException {\n+        // inheritors can implement validate logic\n+    }\n+\n+    /**\n+     * Extract and return \"type\" field.\n+     */\n+    public CookieType getType(Cookie cookie) {\n+        int numericType = (int) getField(cookie.getValue(), TYPE_FIELD);\n+        return resolveEnum(CookieType.values(), numericType, CookieType.class);\n+    }\n+\n+    protected long setType(long value, CookieType type) {\n+        return setField(value, TYPE_FIELD, type.getValue());\n+    }\n+\n+    protected long getField(long value, BitField field) {\n+        long payload = value & field.getMask();\n+        return payload >>> field.getOffset();\n+    }\n+\n+    protected Cookie setField(Cookie cookie, BitField field, long payload) {\n+        long raw = setField(cookie.getValue(), field, payload);\n+        return new Cookie(raw);\n+    }\n+\n+    protected long setField(long value, BitField field, long payload) {\n+        long mask = field.getMask();\n+        payload <<= field.getOffset();\n+        payload &= mask;\n+        return (value & ~mask) | payload;\n+    }\n+\n+    protected void validateServiceFlag(Cookie cookie, boolean expectedValue) throws InvalidCookieException {\n+        boolean actual = getField(cookie.getValue(), SERVICE_FLAG) != 0;\n+        if (expectedValue != actual) {\n+            throw new InvalidCookieException(\n+                    String.format(\"Service flag is expected to be %s\", expectedValue ? \"set\" : \"unset\"), cookie);\n+        }\n+    }\n+\n+    protected static <T extends NumericEnumField> T resolveEnum(T[] valuesSpace, long needle, Class<T> typeRef) {\n+        for (T entry : valuesSpace) {\n+            if (entry.getValue() == needle) {\n+                return entry;\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\n+                \"Unable to map value %x value into %s value\", needle, typeRef.getSimpleName()));\n+    }\n+\n+    // 9 bit long type field\n+    public enum CookieType implements NumericEnumField {\n+        SERVICE_OR_FLOW_SEGMENT(0x000),\n+        LLDP_INPUT_CUSTOMER_TYPE(0x001),\n+        MULTI_TABLE_ISL_VLAN_EGRESS_RULES(0x002),\n+        MULTI_TABLE_ISL_VXLAN_EGRESS_RULES(0x003),\n+        MULTI_TABLE_ISL_VXLAN_TRANSIT_RULES(0x004),\n+        MULTI_TABLE_INGRESS_RULES(0x005),\n+        ARP_INPUT_CUSTOMER_TYPE(0x006),\n+        INGRESS_SEGMENT(0x007),   // used for ingress flow segment and for one switch flow segments\n+        SHARED_OF_FLOW(0x008);\n+\n+        private int value;\n+\n+        CookieType(int value) {\n+            this.value = value;\n+        }\n+\n+        public int getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ba3a6a83e38ad5fb0826f172fb9bab12c519ae"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQwMTI5OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/CookieBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNjoyM1rOGFw-Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTowODo0OFrOGGb4Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODQwNw==", "bodyText": "It makes sense to declare the class as abstract. No need to allow instantiating it.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r408698407", "createdAt": "2020-04-15T09:16:23Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/CookieBase.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@EqualsAndHashCode(of = {\"value\"})\n+public class CookieBase implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwMTQxNQ==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r409401415", "createdAt": "2020-04-16T09:08:48Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/CookieBase.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@EqualsAndHashCode(of = {\"value\"})\n+public class CookieBase implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODQwNw=="}, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQyMjA0OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMjowNVrOGFxLMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo1MjoxM1rOGJg9ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTc0Nw==", "bodyText": "You can allow the builder to set both value and type, but as for now use only the type.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r408701747", "createdAt": "2020-04-15T09:22:05Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -44,102 +38,133 @@\n  * 5 - Multi-table customer flow rule for ingress table pass-through\n  * </p>\n  */\n-@Value\n-public class Cookie implements Comparable<Cookie>, Serializable {\n-    private static final long serialVersionUID = 1L;\n-\n-    public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n-    public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n-    public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n-\n-    // There is no alive system that use this deprecated direction flags so it should be save to drop it.\n-    @Deprecated\n-    public static final long DEPRECATED_FLOW_PATH_DIRECTION_FLAG = 0x0080_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_VALUE_MASK              = 0x0000_0000_000F_FFFFL;\n-    public static final long ISL_COOKIE_VALUE_MASK               = 0x0000_0000_000F_FFFFL;\n-    public static final long INGRESS_RULE_COOKIE_VALUE_MASK      = 0x0000_0000_000F_FFFFL;\n-\n-    public static final long DROP_RULE_COOKIE                           = 0x01L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_BROADCAST_RULE_COOKIE         = 0x02L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_RULE_COOKIE           = 0x03L | DEFAULT_RULE_FLAG;\n-    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE         = 0x04L | DEFAULT_RULE_FLAG;\n-    public static final long CATCH_BFD_RULE_COOKIE                      = 0x05L | DEFAULT_RULE_FLAG;\n-    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE             = 0x06L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE     = 0x07L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = 0x08L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_INGRESS_DROP_COOKIE             = 0x09L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE        = 0x0AL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE      = 0x0BL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_TRANSIT_DROP_COOKIE             = 0x0CL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INPUT_PRE_DROP_COOKIE                 = 0x0DL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_TRANSIT_COOKIE                        = 0x0EL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INGRESS_COOKIE                        = 0x0FL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_COOKIE                   = 0x10L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE             = 0x11L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE        = 0x12L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INPUT_PRE_DROP_COOKIE                  = 0x13L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_TRANSIT_COOKIE                         = 0x14L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INGRESS_COOKIE                         = 0x15L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_COOKIE                    = 0x16L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_VXLAN_COOKIE              = 0x17L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE         = 0x18L | DEFAULT_RULE_FLAG;\n+public class Cookie extends CookieBase implements Comparable<Cookie> {\n+    // FIXME(surabujin): get rid from this constants (it will allow to merge CookieBase into Cookie)\n+    public static final long DROP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_BROADCAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_BROADCAST_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_RULE_COOKIE).getValue();\n+    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_VERIFICATION_LOOP_RULE_COOKIE).getValue();\n+    public static final long CATCH_BFD_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.CATCH_BFD_RULE_COOKIE).getValue();\n+    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ROUND_TRIP_LATENCY_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_VXLAN_RULE_COOKIE).getValue();\n+    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_POST_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_EGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_TRANSIT_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_TRANSIT_DROP_COOKIE).getValue();\n+    public static final long LLDP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long LLDP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_TRANSIT_COOKIE).getValue();\n+    public static final long LLDP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n+    public static final long ARP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long ARP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_TRANSIT_COOKIE).getValue();\n+    public static final long ARP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n \n-    // 9 bits cookie type \"field\"\n-    public static final long TYPE_MASK                               = 0x1FF0_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_TYPE                        = 0x0000_0000_0000_0000L;\n-    public static final long LLDP_INPUT_CUSTOMER_TYPE                = 0x0010_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VLAN_EGRESS_RULES_TYPE   = 0x0020_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_EGRESS_RULES_TYPE  = 0x0030_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n-    public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n-    public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n+    @JsonCreator\n+    public Cookie(long value) {\n+        super(value);\n+    }\n \n-    private final long value;\n+    @Builder\n+    public Cookie(CookieType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNzIwNg==", "bodyText": "Em... why for? This 2 different use cases - one \"restore\" cookie from the raw value (direct new Cookie(raw) call) and another build new cookie from fields provided by the app (builder way). I do not want to add value field into the builder, to will make it less obvious.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r409407206", "createdAt": "2020-04-16T09:17:51Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -44,102 +38,133 @@\n  * 5 - Multi-table customer flow rule for ingress table pass-through\n  * </p>\n  */\n-@Value\n-public class Cookie implements Comparable<Cookie>, Serializable {\n-    private static final long serialVersionUID = 1L;\n-\n-    public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n-    public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n-    public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n-\n-    // There is no alive system that use this deprecated direction flags so it should be save to drop it.\n-    @Deprecated\n-    public static final long DEPRECATED_FLOW_PATH_DIRECTION_FLAG = 0x0080_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_VALUE_MASK              = 0x0000_0000_000F_FFFFL;\n-    public static final long ISL_COOKIE_VALUE_MASK               = 0x0000_0000_000F_FFFFL;\n-    public static final long INGRESS_RULE_COOKIE_VALUE_MASK      = 0x0000_0000_000F_FFFFL;\n-\n-    public static final long DROP_RULE_COOKIE                           = 0x01L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_BROADCAST_RULE_COOKIE         = 0x02L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_RULE_COOKIE           = 0x03L | DEFAULT_RULE_FLAG;\n-    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE         = 0x04L | DEFAULT_RULE_FLAG;\n-    public static final long CATCH_BFD_RULE_COOKIE                      = 0x05L | DEFAULT_RULE_FLAG;\n-    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE             = 0x06L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE     = 0x07L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = 0x08L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_INGRESS_DROP_COOKIE             = 0x09L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE        = 0x0AL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE      = 0x0BL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_TRANSIT_DROP_COOKIE             = 0x0CL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INPUT_PRE_DROP_COOKIE                 = 0x0DL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_TRANSIT_COOKIE                        = 0x0EL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INGRESS_COOKIE                        = 0x0FL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_COOKIE                   = 0x10L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE             = 0x11L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE        = 0x12L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INPUT_PRE_DROP_COOKIE                  = 0x13L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_TRANSIT_COOKIE                         = 0x14L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INGRESS_COOKIE                         = 0x15L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_COOKIE                    = 0x16L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_VXLAN_COOKIE              = 0x17L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE         = 0x18L | DEFAULT_RULE_FLAG;\n+public class Cookie extends CookieBase implements Comparable<Cookie> {\n+    // FIXME(surabujin): get rid from this constants (it will allow to merge CookieBase into Cookie)\n+    public static final long DROP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_BROADCAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_BROADCAST_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_RULE_COOKIE).getValue();\n+    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_VERIFICATION_LOOP_RULE_COOKIE).getValue();\n+    public static final long CATCH_BFD_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.CATCH_BFD_RULE_COOKIE).getValue();\n+    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ROUND_TRIP_LATENCY_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_VXLAN_RULE_COOKIE).getValue();\n+    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_POST_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_EGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_TRANSIT_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_TRANSIT_DROP_COOKIE).getValue();\n+    public static final long LLDP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long LLDP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_TRANSIT_COOKIE).getValue();\n+    public static final long LLDP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n+    public static final long ARP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long ARP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_TRANSIT_COOKIE).getValue();\n+    public static final long ARP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n \n-    // 9 bits cookie type \"field\"\n-    public static final long TYPE_MASK                               = 0x1FF0_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_TYPE                        = 0x0000_0000_0000_0000L;\n-    public static final long LLDP_INPUT_CUSTOMER_TYPE                = 0x0010_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VLAN_EGRESS_RULES_TYPE   = 0x0020_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_EGRESS_RULES_TYPE  = 0x0030_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n-    public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n-    public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n+    @JsonCreator\n+    public Cookie(long value) {\n+        super(value);\n+    }\n \n-    private final long value;\n+    @Builder\n+    public Cookie(CookieType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTc0Nw=="}, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYzMDM3Mg==", "bodyText": "Got it.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r412630372", "createdAt": "2020-04-22T02:52:13Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -44,102 +38,133 @@\n  * 5 - Multi-table customer flow rule for ingress table pass-through\n  * </p>\n  */\n-@Value\n-public class Cookie implements Comparable<Cookie>, Serializable {\n-    private static final long serialVersionUID = 1L;\n-\n-    public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n-    public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n-    public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n-\n-    // There is no alive system that use this deprecated direction flags so it should be save to drop it.\n-    @Deprecated\n-    public static final long DEPRECATED_FLOW_PATH_DIRECTION_FLAG = 0x0080_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_VALUE_MASK              = 0x0000_0000_000F_FFFFL;\n-    public static final long ISL_COOKIE_VALUE_MASK               = 0x0000_0000_000F_FFFFL;\n-    public static final long INGRESS_RULE_COOKIE_VALUE_MASK      = 0x0000_0000_000F_FFFFL;\n-\n-    public static final long DROP_RULE_COOKIE                           = 0x01L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_BROADCAST_RULE_COOKIE         = 0x02L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_RULE_COOKIE           = 0x03L | DEFAULT_RULE_FLAG;\n-    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE         = 0x04L | DEFAULT_RULE_FLAG;\n-    public static final long CATCH_BFD_RULE_COOKIE                      = 0x05L | DEFAULT_RULE_FLAG;\n-    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE             = 0x06L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE     = 0x07L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = 0x08L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_INGRESS_DROP_COOKIE             = 0x09L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE        = 0x0AL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE      = 0x0BL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_TRANSIT_DROP_COOKIE             = 0x0CL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INPUT_PRE_DROP_COOKIE                 = 0x0DL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_TRANSIT_COOKIE                        = 0x0EL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INGRESS_COOKIE                        = 0x0FL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_COOKIE                   = 0x10L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE             = 0x11L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE        = 0x12L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INPUT_PRE_DROP_COOKIE                  = 0x13L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_TRANSIT_COOKIE                         = 0x14L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INGRESS_COOKIE                         = 0x15L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_COOKIE                    = 0x16L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_VXLAN_COOKIE              = 0x17L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE         = 0x18L | DEFAULT_RULE_FLAG;\n+public class Cookie extends CookieBase implements Comparable<Cookie> {\n+    // FIXME(surabujin): get rid from this constants (it will allow to merge CookieBase into Cookie)\n+    public static final long DROP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_BROADCAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_BROADCAST_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_RULE_COOKIE).getValue();\n+    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_VERIFICATION_LOOP_RULE_COOKIE).getValue();\n+    public static final long CATCH_BFD_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.CATCH_BFD_RULE_COOKIE).getValue();\n+    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ROUND_TRIP_LATENCY_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_VXLAN_RULE_COOKIE).getValue();\n+    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_POST_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_EGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_TRANSIT_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_TRANSIT_DROP_COOKIE).getValue();\n+    public static final long LLDP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long LLDP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_TRANSIT_COOKIE).getValue();\n+    public static final long LLDP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n+    public static final long ARP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long ARP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_TRANSIT_COOKIE).getValue();\n+    public static final long ARP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n \n-    // 9 bits cookie type \"field\"\n-    public static final long TYPE_MASK                               = 0x1FF0_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_TYPE                        = 0x0000_0000_0000_0000L;\n-    public static final long LLDP_INPUT_CUSTOMER_TYPE                = 0x0010_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VLAN_EGRESS_RULES_TYPE   = 0x0020_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_EGRESS_RULES_TYPE  = 0x0030_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n-    public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n-    public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n+    @JsonCreator\n+    public Cookie(long value) {\n+        super(value);\n+    }\n \n-    private final long value;\n+    @Builder\n+    public Cookie(CookieType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTc0Nw=="}, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQyNTM5OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMjo0OVrOGFxNJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTozNToxNFrOGGc7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjI0NQ==", "bodyText": "Why is the value called \"blank\"?", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r408702245", "createdAt": "2020-04-15T09:22:49Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -44,102 +38,133 @@\n  * 5 - Multi-table customer flow rule for ingress table pass-through\n  * </p>\n  */\n-@Value\n-public class Cookie implements Comparable<Cookie>, Serializable {\n-    private static final long serialVersionUID = 1L;\n-\n-    public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n-    public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n-    public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n-\n-    // There is no alive system that use this deprecated direction flags so it should be save to drop it.\n-    @Deprecated\n-    public static final long DEPRECATED_FLOW_PATH_DIRECTION_FLAG = 0x0080_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_VALUE_MASK              = 0x0000_0000_000F_FFFFL;\n-    public static final long ISL_COOKIE_VALUE_MASK               = 0x0000_0000_000F_FFFFL;\n-    public static final long INGRESS_RULE_COOKIE_VALUE_MASK      = 0x0000_0000_000F_FFFFL;\n-\n-    public static final long DROP_RULE_COOKIE                           = 0x01L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_BROADCAST_RULE_COOKIE         = 0x02L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_RULE_COOKIE           = 0x03L | DEFAULT_RULE_FLAG;\n-    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE         = 0x04L | DEFAULT_RULE_FLAG;\n-    public static final long CATCH_BFD_RULE_COOKIE                      = 0x05L | DEFAULT_RULE_FLAG;\n-    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE             = 0x06L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE     = 0x07L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = 0x08L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_INGRESS_DROP_COOKIE             = 0x09L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE        = 0x0AL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE      = 0x0BL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_TRANSIT_DROP_COOKIE             = 0x0CL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INPUT_PRE_DROP_COOKIE                 = 0x0DL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_TRANSIT_COOKIE                        = 0x0EL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INGRESS_COOKIE                        = 0x0FL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_COOKIE                   = 0x10L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE             = 0x11L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE        = 0x12L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INPUT_PRE_DROP_COOKIE                  = 0x13L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_TRANSIT_COOKIE                         = 0x14L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INGRESS_COOKIE                         = 0x15L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_COOKIE                    = 0x16L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_VXLAN_COOKIE              = 0x17L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE         = 0x18L | DEFAULT_RULE_FLAG;\n+public class Cookie extends CookieBase implements Comparable<Cookie> {\n+    // FIXME(surabujin): get rid from this constants (it will allow to merge CookieBase into Cookie)\n+    public static final long DROP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_BROADCAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_BROADCAST_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_RULE_COOKIE).getValue();\n+    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_VERIFICATION_LOOP_RULE_COOKIE).getValue();\n+    public static final long CATCH_BFD_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.CATCH_BFD_RULE_COOKIE).getValue();\n+    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ROUND_TRIP_LATENCY_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_VXLAN_RULE_COOKIE).getValue();\n+    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_POST_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_EGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_TRANSIT_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_TRANSIT_DROP_COOKIE).getValue();\n+    public static final long LLDP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long LLDP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_TRANSIT_COOKIE).getValue();\n+    public static final long LLDP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n+    public static final long ARP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long ARP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_TRANSIT_COOKIE).getValue();\n+    public static final long ARP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n \n-    // 9 bits cookie type \"field\"\n-    public static final long TYPE_MASK                               = 0x1FF0_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_TYPE                        = 0x0000_0000_0000_0000L;\n-    public static final long LLDP_INPUT_CUSTOMER_TYPE                = 0x0010_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VLAN_EGRESS_RULES_TYPE   = 0x0020_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_EGRESS_RULES_TYPE  = 0x0030_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n-    public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n-    public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n+    @JsonCreator\n+    public Cookie(long value) {\n+        super(value);\n+    }\n \n-    private final long value;\n+    @Builder\n+    public Cookie(CookieType type) {\n+        super(0, type);\n+    }\n \n     /**\n-     * Create {@code Cookie} instance and perform it's validation.\n+     * Conver existing {@link Cookie} instance into {@link CookieBuilder}.\n      */\n-    public static Cookie decode(long rawValue) {\n-        Cookie cookie = new Cookie(rawValue);\n-        cookie.ensureNoFlagsConflicts();\n-        return cookie;\n+    public CookieBuilder toBuilder() {\n+        return new CookieBuilder()\n+                .type(getType());\n     }\n \n-    @JsonCreator\n-    public Cookie(long value) {\n-        this.value = value;\n-    }\n-\n-    public static Cookie buildForwardCookie(long unmaskedCookie) {\n-        return new Cookie(unmaskedCookie | Cookie.FLOW_PATH_FORWARD_FLAG);\n+    protected Cookie(long blank, CookieType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxODUxNQ==", "bodyText": "Because it is incomplete yet... Can't find normal name for this argument. If not blank only stub is coming to the mind. Renamed it into value :(", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r409418515", "createdAt": "2020-04-16T09:35:14Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -44,102 +38,133 @@\n  * 5 - Multi-table customer flow rule for ingress table pass-through\n  * </p>\n  */\n-@Value\n-public class Cookie implements Comparable<Cookie>, Serializable {\n-    private static final long serialVersionUID = 1L;\n-\n-    public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n-    public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n-    public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n-\n-    // There is no alive system that use this deprecated direction flags so it should be save to drop it.\n-    @Deprecated\n-    public static final long DEPRECATED_FLOW_PATH_DIRECTION_FLAG = 0x0080_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_VALUE_MASK              = 0x0000_0000_000F_FFFFL;\n-    public static final long ISL_COOKIE_VALUE_MASK               = 0x0000_0000_000F_FFFFL;\n-    public static final long INGRESS_RULE_COOKIE_VALUE_MASK      = 0x0000_0000_000F_FFFFL;\n-\n-    public static final long DROP_RULE_COOKIE                           = 0x01L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_BROADCAST_RULE_COOKIE         = 0x02L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_RULE_COOKIE           = 0x03L | DEFAULT_RULE_FLAG;\n-    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE         = 0x04L | DEFAULT_RULE_FLAG;\n-    public static final long CATCH_BFD_RULE_COOKIE                      = 0x05L | DEFAULT_RULE_FLAG;\n-    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE             = 0x06L | DEFAULT_RULE_FLAG;\n-    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE     = 0x07L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = 0x08L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_INGRESS_DROP_COOKIE             = 0x09L | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE        = 0x0AL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE      = 0x0BL | DEFAULT_RULE_FLAG;\n-    public static final long MULTITABLE_TRANSIT_DROP_COOKIE             = 0x0CL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INPUT_PRE_DROP_COOKIE                 = 0x0DL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_TRANSIT_COOKIE                        = 0x0EL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_INGRESS_COOKIE                        = 0x0FL | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_COOKIE                   = 0x10L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE             = 0x11L | DEFAULT_RULE_FLAG;\n-    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE        = 0x12L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INPUT_PRE_DROP_COOKIE                  = 0x13L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_TRANSIT_COOKIE                         = 0x14L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_INGRESS_COOKIE                         = 0x15L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_COOKIE                    = 0x16L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_VXLAN_COOKIE              = 0x17L | DEFAULT_RULE_FLAG;\n-    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE         = 0x18L | DEFAULT_RULE_FLAG;\n+public class Cookie extends CookieBase implements Comparable<Cookie> {\n+    // FIXME(surabujin): get rid from this constants (it will allow to merge CookieBase into Cookie)\n+    public static final long DROP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_BROADCAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_BROADCAST_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_RULE_COOKIE).getValue();\n+    public static final long DROP_VERIFICATION_LOOP_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.DROP_VERIFICATION_LOOP_RULE_COOKIE).getValue();\n+    public static final long CATCH_BFD_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.CATCH_BFD_RULE_COOKIE).getValue();\n+    public static final long ROUND_TRIP_LATENCY_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ROUND_TRIP_LATENCY_RULE_COOKIE).getValue();\n+    public static final long VERIFICATION_UNICAST_VXLAN_RULE_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.VERIFICATION_UNICAST_VXLAN_RULE_COOKIE).getValue();\n+    public static final long MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_POST_INGRESS_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_POST_INGRESS_DROP_COOKIE).getValue();\n+    public static final long MULTITABLE_EGRESS_PASS_THROUGH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_EGRESS_PASS_THROUGH_COOKIE).getValue();\n+    public static final long MULTITABLE_TRANSIT_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.MULTITABLE_TRANSIT_DROP_COOKIE).getValue();\n+    public static final long LLDP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long LLDP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_TRANSIT_COOKIE).getValue();\n+    public static final long LLDP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long LLDP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.LLDP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n+    public static final long ARP_INPUT_PRE_DROP_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INPUT_PRE_DROP_COOKIE).getValue();\n+    public static final long ARP_TRANSIT_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_TRANSIT_COOKIE).getValue();\n+    public static final long ARP_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_VXLAN_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_VXLAN_COOKIE).getValue();\n+    public static final long ARP_POST_INGRESS_ONE_SWITCH_COOKIE = new ServiceCookie(\n+            ServiceCookie.ServiceCookieTag.ARP_POST_INGRESS_ONE_SWITCH_COOKIE).getValue();\n \n-    // 9 bits cookie type \"field\"\n-    public static final long TYPE_MASK                               = 0x1FF0_0000_0000_0000L;\n-    public static final long FLOW_COOKIE_TYPE                        = 0x0000_0000_0000_0000L;\n-    public static final long LLDP_INPUT_CUSTOMER_TYPE                = 0x0010_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VLAN_EGRESS_RULES_TYPE   = 0x0020_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_EGRESS_RULES_TYPE  = 0x0030_0000_0000_0000L;\n-    public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n-    public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n-    public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n+    @JsonCreator\n+    public Cookie(long value) {\n+        super(value);\n+    }\n \n-    private final long value;\n+    @Builder\n+    public Cookie(CookieType type) {\n+        super(0, type);\n+    }\n \n     /**\n-     * Create {@code Cookie} instance and perform it's validation.\n+     * Conver existing {@link Cookie} instance into {@link CookieBuilder}.\n      */\n-    public static Cookie decode(long rawValue) {\n-        Cookie cookie = new Cookie(rawValue);\n-        cookie.ensureNoFlagsConflicts();\n-        return cookie;\n+    public CookieBuilder toBuilder() {\n+        return new CookieBuilder()\n+                .type(getType());\n     }\n \n-    @JsonCreator\n-    public Cookie(long value) {\n-        this.value = value;\n-    }\n-\n-    public static Cookie buildForwardCookie(long unmaskedCookie) {\n-        return new Cookie(unmaskedCookie | Cookie.FLOW_PATH_FORWARD_FLAG);\n+    protected Cookie(long blank, CookieType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjI0NQ=="}, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQ0MDc5OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/CookieBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNjo0NlrOGFxWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo1MToyNlrOGGdh9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwNDY0OQ==", "bodyText": "nit: I'd call it \"isValid\" and swap with \"validate\" to be overwritten by inheritors.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r408704649", "createdAt": "2020-04-15T09:26:46Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/CookieBase.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@EqualsAndHashCode(of = {\"value\"})\n+public class CookieBase implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField TYPE_FIELD = new BitField(0x1FF0_0000_0000_0000L);\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    private final long value;\n+\n+    CookieBase(long value) {\n+        this.value = value;\n+    }\n+\n+    protected CookieBase(long blank, CookieType type) {\n+        value = setField(blank, TYPE_FIELD, type.getValue());\n+    }\n+\n+    /**\n+     * Validate cookie value without throwing exception in case of validation fail, but returning {@code false} result.\n+     */\n+    public boolean safeValidate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyODQ3MQ==", "bodyText": "In this case it can't report what exactly goes wrong (not this info brought with exception raised by validate).\nPS safeValidate renamed into isValid.", "url": "https://github.com/telstra/open-kilda/pull/3313#discussion_r409428471", "createdAt": "2020-04-16T09:51:26Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/CookieBase.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+import org.openkilda.exception.InvalidCookieException;\n+import org.openkilda.model.bitops.BitField;\n+import org.openkilda.model.bitops.NumericEnumField;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@EqualsAndHashCode(of = {\"value\"})\n+public class CookieBase implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    // update ALL_FIELDS if modify fields list\n+    static final BitField TYPE_FIELD = new BitField(0x1FF0_0000_0000_0000L);\n+    static final BitField SERVICE_FLAG = new BitField(0x8000_0000_0000_0000L);\n+\n+    // used by unit tests to check fields intersections\n+    static final BitField[] ALL_FIELDS = new BitField[]{SERVICE_FLAG, TYPE_FIELD};\n+\n+    private final long value;\n+\n+    CookieBase(long value) {\n+        this.value = value;\n+    }\n+\n+    protected CookieBase(long blank, CookieType type) {\n+        value = setField(blank, TYPE_FIELD, type.getValue());\n+    }\n+\n+    /**\n+     * Validate cookie value without throwing exception in case of validation fail, but returning {@code false} result.\n+     */\n+    public boolean safeValidate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwNDY0OQ=="}, "originalCommit": {"oid": "d18950867d8d842cfbda875554772e850533ec88"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2028, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}