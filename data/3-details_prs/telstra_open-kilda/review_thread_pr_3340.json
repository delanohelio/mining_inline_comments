{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NzM1OTcz", "number": 3340, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTowMjowM1rODte4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTowMjo1NFrODte5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE4Mzk1OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/stats/OpenTsdbSpec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTowMjowM1rOF-7jGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozNDo1MVrOGALJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMTY3Mw==", "bodyText": "you can search for it.manufacturer == \"Noviflow Inc.\" if you want noviflow switches. Also, I think it makes sense to pick it.hardware + it.software for uniqueness, since we can have same hw model but with different firmware and most likely would like to test them both", "url": "https://github.com/telstra/open-kilda/pull/3340#discussion_r401531673", "createdAt": "2020-04-01T11:02:03Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/stats/OpenTsdbSpec.groovy", "diffHunk": "@@ -57,7 +57,29 @@ class OpenTsdbSpec extends HealthCheckSpecification {\n                  [[cookieHex: String.format(\"0x%X\", DefaultRule.VERIFICATION_BROADCAST_RULE.cookie)]]].combinations())\n     }\n \n+    @Unroll(\"GRPC stats are being logged for metric:#metric, tags:#tags\")\n+    @Tags([HARDWARE, SMOKE_SWITCHES])\n+    def \"GRPC stats are being logged\"(metric, tags) {\n+        expect: \"At least 1 result in the past 10 minutes\"\n+        otsdb.query(10.minutes.ago, metricPrefix + metric, tags).dps.size() > 0\n+\n+        where:\n+        [metric, tags] << (\n+                [[\"switch.packet-in.total-packets\", \"switch.packet-in.total-packets.dataplane\",\n+                  \"switch.packet-in.no-match.packets\", \"switch.packet-in.apply-action.packets\",\n+                  \"switch.packet-in.apply-action.packets\", \"switch.packet-in.invalid-ttl.packets\",\n+                  \"switch.packet-in.action-set.packets\", \"switch.packet-in.group.packets\",\n+                  \"switch.packet-in.packet-out.packets\", \"switch.packet-out.total-packets.dataplane\",\n+                  \"switch.packet-out.total-packets.host\", \"switch.packet-out.eth0-interface-up\"],\n+                 noviflowSwitches.collect { [switchid: it.switchId.toOtsdFormat()] }].combinations()\n+        )\n+    }\n+\n     def getUniqueSwitches() {\n         topology.activeSwitches.unique { it.ofVersion }\n     }\n+\n+    def getNoviflowSwitches() {\n+        northbound.activeSwitches.findAll { it.description =~ /NW[0-9]+.([0-9].[0-9])/ }.unique { it.hardware }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7fb13e5aeae3581df3700188f004b7174e6811"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzNTg3MQ==", "bodyText": "I can't agree more", "url": "https://github.com/telstra/open-kilda/pull/3340#discussion_r402835871", "createdAt": "2020-04-03T08:34:51Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/stats/OpenTsdbSpec.groovy", "diffHunk": "@@ -57,7 +57,29 @@ class OpenTsdbSpec extends HealthCheckSpecification {\n                  [[cookieHex: String.format(\"0x%X\", DefaultRule.VERIFICATION_BROADCAST_RULE.cookie)]]].combinations())\n     }\n \n+    @Unroll(\"GRPC stats are being logged for metric:#metric, tags:#tags\")\n+    @Tags([HARDWARE, SMOKE_SWITCHES])\n+    def \"GRPC stats are being logged\"(metric, tags) {\n+        expect: \"At least 1 result in the past 10 minutes\"\n+        otsdb.query(10.minutes.ago, metricPrefix + metric, tags).dps.size() > 0\n+\n+        where:\n+        [metric, tags] << (\n+                [[\"switch.packet-in.total-packets\", \"switch.packet-in.total-packets.dataplane\",\n+                  \"switch.packet-in.no-match.packets\", \"switch.packet-in.apply-action.packets\",\n+                  \"switch.packet-in.apply-action.packets\", \"switch.packet-in.invalid-ttl.packets\",\n+                  \"switch.packet-in.action-set.packets\", \"switch.packet-in.group.packets\",\n+                  \"switch.packet-in.packet-out.packets\", \"switch.packet-out.total-packets.dataplane\",\n+                  \"switch.packet-out.total-packets.host\", \"switch.packet-out.eth0-interface-up\"],\n+                 noviflowSwitches.collect { [switchid: it.switchId.toOtsdFormat()] }].combinations()\n+        )\n+    }\n+\n     def getUniqueSwitches() {\n         topology.activeSwitches.unique { it.ofVersion }\n     }\n+\n+    def getNoviflowSwitches() {\n+        northbound.activeSwitches.findAll { it.description =~ /NW[0-9]+.([0-9].[0-9])/ }.unique { it.hardware }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMTY3Mw=="}, "originalCommit": {"oid": "ea7fb13e5aeae3581df3700188f004b7174e6811"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE4Njc3OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/stats/OpenTsdbSpec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTowMjo1NFrOF-7kwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozMTo1OVrOGAK_1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMjA5OA==", "bodyText": "Can be Tidy", "url": "https://github.com/telstra/open-kilda/pull/3340#discussion_r401532098", "createdAt": "2020-04-01T11:02:54Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/stats/OpenTsdbSpec.groovy", "diffHunk": "@@ -57,7 +57,29 @@ class OpenTsdbSpec extends HealthCheckSpecification {\n                  [[cookieHex: String.format(\"0x%X\", DefaultRule.VERIFICATION_BROADCAST_RULE.cookie)]]].combinations())\n     }\n \n+    @Unroll(\"GRPC stats are being logged for metric:#metric, tags:#tags\")\n+    @Tags([HARDWARE, SMOKE_SWITCHES])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7fb13e5aeae3581df3700188f004b7174e6811"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzMzM2Ng==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3340#discussion_r402833366", "createdAt": "2020-04-03T08:31:59Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/stats/OpenTsdbSpec.groovy", "diffHunk": "@@ -57,7 +57,29 @@ class OpenTsdbSpec extends HealthCheckSpecification {\n                  [[cookieHex: String.format(\"0x%X\", DefaultRule.VERIFICATION_BROADCAST_RULE.cookie)]]].combinations())\n     }\n \n+    @Unroll(\"GRPC stats are being logged for metric:#metric, tags:#tags\")\n+    @Tags([HARDWARE, SMOKE_SWITCHES])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMjA5OA=="}, "originalCommit": {"oid": "ea7fb13e5aeae3581df3700188f004b7174e6811"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2047, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}