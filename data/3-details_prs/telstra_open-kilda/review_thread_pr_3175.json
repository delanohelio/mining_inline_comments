{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDQyODM5", "number": 3175, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowOTo0OFrODnJNLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo0Mzo1MVrODneHfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzcxODg3OnYy", "diffSide": "RIGHT", "path": "docs/design/network-discovery/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowOTo0OFrOF0-FaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxNzozMFrOGAPWKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NzQ2NQ==", "bodyText": "'updates update' probably duplicate?", "url": "https://github.com/telstra/open-kilda/pull/3175#discussion_r391087465", "createdAt": "2020-03-11T16:09:48Z", "author": {"login": "rozdy"}, "path": "docs/design/network-discovery/README.md", "diffHunk": "@@ -99,3 +102,43 @@ Manage setup/remove BFD sessions\n Responsible for global BFD toggle.\n \n ![BFDGlobalToggleFSM](bfd-global-toggle.png)\n+\n+\n+# Discovery poll process\n+Discovery poll represented by 3 services, each one responsible for some small\n+particular part.\n+\n+![discovery-sequence-diagram](discovery-sequence.png)\n+\n+## Watch list service\n+Keep the list of ISL endpoints (switch + port) available for the discovery\n+process i.e. The port event processor is responsible for managing add and for\n+remove events into this list. Periodically for each entry in this the list,\n+it produces request to the `watcher` service.\n+\n+## Watcher service\n+This service track the state of the particular discovery request. Using request\n+from watch list service it produces discovery requests to the `speaker`.\n+\n+Each produced discovery request contains a unique identifier, discovery sent\n+confirmation, discovery response and round trip notification are bring this\n+identifier back to the watcher service. If unique identifier extracted from one\n+of these responses is missing in the \"wait\" list of the watcher, this is\n+stale/foreign response and must be ignored. See the discovery sequence diagram\n+above for details.\n+\n+Also watcher is responsible for tracking round trip status (this status is\n+represented with \"last round trip received time\" for each network endpoint). On\n+receive-round-trip event from the `speaker`, watcher updates update stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNDYxNw==", "bodyText": "yes, fixed", "url": "https://github.com/telstra/open-kilda/pull/3175#discussion_r402904617", "createdAt": "2020-04-03T10:17:30Z", "author": {"login": "surabujin"}, "path": "docs/design/network-discovery/README.md", "diffHunk": "@@ -99,3 +102,43 @@ Manage setup/remove BFD sessions\n Responsible for global BFD toggle.\n \n ![BFDGlobalToggleFSM](bfd-global-toggle.png)\n+\n+\n+# Discovery poll process\n+Discovery poll represented by 3 services, each one responsible for some small\n+particular part.\n+\n+![discovery-sequence-diagram](discovery-sequence.png)\n+\n+## Watch list service\n+Keep the list of ISL endpoints (switch + port) available for the discovery\n+process i.e. The port event processor is responsible for managing add and for\n+remove events into this list. Periodically for each entry in this the list,\n+it produces request to the `watcher` service.\n+\n+## Watcher service\n+This service track the state of the particular discovery request. Using request\n+from watch list service it produces discovery requests to the `speaker`.\n+\n+Each produced discovery request contains a unique identifier, discovery sent\n+confirmation, discovery response and round trip notification are bring this\n+identifier back to the watcher service. If unique identifier extracted from one\n+of these responses is missing in the \"wait\" list of the watcher, this is\n+stale/foreign response and must be ignored. See the discovery sequence diagram\n+above for details.\n+\n+Also watcher is responsible for tracking round trip status (this status is\n+represented with \"last round trip received time\" for each network endpoint). On\n+receive-round-trip event from the `speaker`, watcher updates update stored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NzQ2NQ=="}, "originalCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzEzMTA4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo0MDoxMFrOF1e_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxOToyMVrOGAPaUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyNjY5OQ==", "bodyText": "Maybe instantiate this condition once as a static field and use for all FSM instances?", "url": "https://github.com/telstra/open-kilda/pull/3175#discussion_r391626699", "createdAt": "2020-03-12T13:40:10Z", "author": {"login": "rozdy"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -835,14 +947,38 @@ private static String makeInvalidMappingMessage(Class<?> from, Class<?> to, Obje\n \n \n             // UP\n+            final String upHandlePollEventMethod = \"upHandlePollEvent\";\n+\n+            builder.transition()\n+                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent._BECOME_DOWN);\n+            builder.onEntry(IslFsmState.UP)\n+                    .callMethod(\"upEnter\");\n             builder.transition()\n-                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent.ISL_DOWN);\n+                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent.ISL_DOWN)\n+                    .when(new Condition<IslFsmContext>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "originalPosition": 389}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNTY4MQ==", "bodyText": "As far as I understand how the squirrelfoundation builds FSM instances, it is already shared across all potential FSM instances.", "url": "https://github.com/telstra/open-kilda/pull/3175#discussion_r402905681", "createdAt": "2020-04-03T10:19:21Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -835,14 +947,38 @@ private static String makeInvalidMappingMessage(Class<?> from, Class<?> to, Obje\n \n \n             // UP\n+            final String upHandlePollEventMethod = \"upHandlePollEvent\";\n+\n+            builder.transition()\n+                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent._BECOME_DOWN);\n+            builder.onEntry(IslFsmState.UP)\n+                    .callMethod(\"upEnter\");\n             builder.transition()\n-                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent.ISL_DOWN);\n+                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent.ISL_DOWN)\n+                    .when(new Condition<IslFsmContext>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyNjY5OQ=="}, "originalCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "originalPosition": 389}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzEzNDk5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo0MToxMVrOF1fCPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMjozOFrOGAPg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyNzMyNA==", "bodyText": "Remove or add some description plz.", "url": "https://github.com/telstra/open-kilda/pull/3175#discussion_r391627324", "createdAt": "2020-03-12T13:41:11Z", "author": {"login": "rozdy"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -835,14 +947,38 @@ private static String makeInvalidMappingMessage(Class<?> from, Class<?> to, Obje\n \n \n             // UP\n+            final String upHandlePollEventMethod = \"upHandlePollEvent\";\n+\n+            builder.transition()\n+                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent._BECOME_DOWN);\n+            builder.onEntry(IslFsmState.UP)\n+                    .callMethod(\"upEnter\");\n             builder.transition()\n-                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent.ISL_DOWN);\n+                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent.ISL_DOWN)\n+                    .when(new Condition<IslFsmContext>() {\n+                        @Override\n+                        public boolean isSatisfied(IslFsmContext context) {\n+                            return IslDownReason.PORT_DOWN.equals(context.getDownReason());\n+                        }\n+\n+                        @Override\n+                        public String name() {\n+                            return \"isl-down-by-physical-port-down\";\n+                        }\n+                    })\n+                    .callMethod(\"upHandlePhysicalDown\");\n             builder.transition()\n-                    .from(IslFsmState.UP).to(IslFsmState.MOVED).on(IslFsmEvent.ISL_MOVE);\n+                    .from(IslFsmState.UP).to(IslFsmState.MOVED).on(IslFsmEvent.ISL_MOVE)\n+                    .callMethod(updateEndpointStatusMethod);\n+            // FIXME(surabujin): ???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "originalPosition": 405}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzM1Ng==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3175#discussion_r402907356", "createdAt": "2020-04-03T10:22:38Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -835,14 +947,38 @@ private static String makeInvalidMappingMessage(Class<?> from, Class<?> to, Obje\n \n \n             // UP\n+            final String upHandlePollEventMethod = \"upHandlePollEvent\";\n+\n+            builder.transition()\n+                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent._BECOME_DOWN);\n+            builder.onEntry(IslFsmState.UP)\n+                    .callMethod(\"upEnter\");\n             builder.transition()\n-                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent.ISL_DOWN);\n+                    .from(IslFsmState.UP).to(IslFsmState.DOWN).on(IslFsmEvent.ISL_DOWN)\n+                    .when(new Condition<IslFsmContext>() {\n+                        @Override\n+                        public boolean isSatisfied(IslFsmContext context) {\n+                            return IslDownReason.PORT_DOWN.equals(context.getDownReason());\n+                        }\n+\n+                        @Override\n+                        public String name() {\n+                            return \"isl-down-by-physical-port-down\";\n+                        }\n+                    })\n+                    .callMethod(\"upHandlePhysicalDown\");\n             builder.transition()\n-                    .from(IslFsmState.UP).to(IslFsmState.MOVED).on(IslFsmEvent.ISL_MOVE);\n+                    .from(IslFsmState.UP).to(IslFsmState.MOVED).on(IslFsmEvent.ISL_MOVE)\n+                    .callMethod(updateEndpointStatusMethod);\n+            // FIXME(surabujin): ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyNzMyNA=="}, "originalCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "originalPosition": 405}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzE0NDk0OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo0Mzo1MVrOF1fIvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMzo0NlrOGAPjJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyODk5MA==", "bodyText": "Why do we have some event names with starting underscore?", "url": "https://github.com/telstra/open-kilda/pull/3175#discussion_r391628990", "createdAt": "2020-03-12T13:43:51Z", "author": {"login": "rozdy"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -920,7 +1058,8 @@ public static IslFsmContextBuilder builder(IIslCarrier output, Endpoint endpoint\n         NEXT,\n \n         HISTORY, _HISTORY_DOWN, _HISTORY_UP, _HISTORY_MOVED,\n-        ISL_UP, ISL_DOWN, ISL_MOVE,\n+        ISL_UP, ISL_DOWN, ISL_MOVE, ROUND_TRIP_STATUS,\n+        _BECOME_DOWN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "originalPosition": 445}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzk0Mw==", "bodyText": "They are \"internal/service\" states i.e. used to implement conditional transitions and so on (not shown on FSM diagram).", "url": "https://github.com/telstra/open-kilda/pull/3175#discussion_r402907943", "createdAt": "2020-04-03T10:23:46Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -920,7 +1058,8 @@ public static IslFsmContextBuilder builder(IIslCarrier output, Endpoint endpoint\n         NEXT,\n \n         HISTORY, _HISTORY_DOWN, _HISTORY_UP, _HISTORY_MOVED,\n-        ISL_UP, ISL_DOWN, ISL_MOVE,\n+        ISL_UP, ISL_DOWN, ISL_MOVE, ROUND_TRIP_STATUS,\n+        _BECOME_DOWN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyODk5MA=="}, "originalCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "originalPosition": 445}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2121, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}