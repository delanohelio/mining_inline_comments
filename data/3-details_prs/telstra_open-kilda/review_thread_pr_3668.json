{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDQ4MTY0", "number": 3668, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozNToyNlrOEUjfnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxOTo1NlrOEW0DZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTg4NTA4OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/HealthCheckSpecification.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozNToyNlrOG60lGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMTo1NzowM1rOG9XDrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMjA1Ng==", "bodyText": "How about moving it to the BaseSpecification file?\nAfter that, we will refactor other specs and delete defining of the useMultitable variable", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r464332056", "createdAt": "2020-08-03T10:35:26Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/HealthCheckSpecification.groovy", "diffHunk": "@@ -10,8 +10,13 @@ import org.openkilda.messaging.info.event.IslChangeType\n import org.openkilda.testing.model.topology.TopologyDefinition.Status\n import org.openkilda.testing.tools.SoftAssertions\n \n+import org.springframework.beans.factory.annotation.Value\n+\n class HealthCheckSpecification extends BaseSpecification {\n \n+    @Value('${use.multitable}')\n+    boolean useMultitable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4847e5d72b6295f412b438a891752fd5714d4e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5NDA5Mw==", "bodyText": "done, also removed duplicates from child specs", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r466994093", "createdAt": "2020-08-07T11:57:03Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/HealthCheckSpecification.groovy", "diffHunk": "@@ -10,8 +10,13 @@ import org.openkilda.messaging.info.event.IslChangeType\n import org.openkilda.testing.model.topology.TopologyDefinition.Status\n import org.openkilda.testing.tools.SoftAssertions\n \n+import org.springframework.beans.factory.annotation.Value\n+\n class HealthCheckSpecification extends BaseSpecification {\n \n+    @Value('${use.multitable}')\n+    boolean useMultitable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMjA1Ng=="}, "originalCommit": {"oid": "cb4847e5d72b6295f412b438a891752fd5714d4e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTkzNjY0OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/HealthCheckSpecification.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo1Mzo0M1rOG61DsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMTo1NjozM1rOG9XCvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzOTg4OA==", "bodyText": "It won't work for hardware env.\nSome switch doesn't support the multiTable mode\ntopology.activeSwitches.each {sw ->\n            if (sw.features.contains(SwitchFeature.MULTI_TABLE)) {\n                verifyAll(northbound.getSwitchProperties(sw.dpId)) {\n                    multiTable == useMultitable\n                }\n            }\n        }", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r464339888", "createdAt": "2020-08-03T10:53:43Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/HealthCheckSpecification.groovy", "diffHunk": "@@ -64,5 +69,27 @@ class HealthCheckSpecification extends BaseSpecification {\n             }\n         }\n         regionVerifications.verify()\n+\n+        and: \"Feature toggles are in expected state\"\n+        verifyAll(northbound.getFeatureToggles()) {\n+            flowsRerouteOnIslDiscoveryEnabled\n+            createFlowEnabled\n+            updateFlowEnabled\n+            deleteFlowEnabled\n+            useBfdForIslIntegrityCheck\n+            floodlightRoutePeriodicSync\n+            server42FlowRtt\n+            //for below props any value allowed. dependent tests will skip themselves or adjust if feature is off\n+            //flowsRerouteUsingDefaultEncapType\n+            //collectGrpcStats\n+        }\n+\n+        and: \"Switches configurations are in expected state\"\n+        topology.switches.each { sw ->\n+            verifyAll(northbound.getSwitchProperties(sw.dpId)) {\n+                multiTable == useMultitable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4847e5d72b6295f412b438a891752fd5714d4e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5Mzg1NA==", "bodyText": "changed to\n            verifyAll(northbound.getSwitchProperties(sw.dpId)) {\n                multiTable == useMultitable && sw.features.contains(SwitchFeature.MULTI_TABLE)", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r466993854", "createdAt": "2020-08-07T11:56:33Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/HealthCheckSpecification.groovy", "diffHunk": "@@ -64,5 +69,27 @@ class HealthCheckSpecification extends BaseSpecification {\n             }\n         }\n         regionVerifications.verify()\n+\n+        and: \"Feature toggles are in expected state\"\n+        verifyAll(northbound.getFeatureToggles()) {\n+            flowsRerouteOnIslDiscoveryEnabled\n+            createFlowEnabled\n+            updateFlowEnabled\n+            deleteFlowEnabled\n+            useBfdForIslIntegrityCheck\n+            floodlightRoutePeriodicSync\n+            server42FlowRtt\n+            //for below props any value allowed. dependent tests will skip themselves or adjust if feature is off\n+            //flowsRerouteUsingDefaultEncapType\n+            //collectGrpcStats\n+        }\n+\n+        and: \"Switches configurations are in expected state\"\n+        topology.switches.each { sw ->\n+            verifyAll(northbound.getSwitchProperties(sw.dpId)) {\n+                multiTable == useMultitable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzOTg4OA=="}, "originalCommit": {"oid": "cb4847e5d72b6295f412b438a891752fd5714d4e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTkzNzgzOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RetriesSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo1NDowOFrOG61EXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMTo1ODozOFrOG9XGMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MDA2Mw==", "bodyText": "itmeout -> timeout", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r464340063", "createdAt": "2020-08-03T10:54:08Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RetriesSpec.groovy", "diffHunk": "@@ -32,7 +32,7 @@ import java.util.concurrent.TimeUnit\n \n @Slf4j\n class RetriesSpec extends HealthCheckSpecification {\n-    @Shared int globalTimeout = 30\n+    @Shared int globalTimeout = 30 //global itmeout for h&s operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4847e5d72b6295f412b438a891752fd5714d4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5NDczNw==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r466994737", "createdAt": "2020-08-07T11:58:38Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RetriesSpec.groovy", "diffHunk": "@@ -32,7 +32,7 @@ import java.util.concurrent.TimeUnit\n \n @Slf4j\n class RetriesSpec extends HealthCheckSpecification {\n-    @Shared int globalTimeout = 30\n+    @Shared int globalTimeout = 30 //global itmeout for h&s operation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MDA2Mw=="}, "originalCommit": {"oid": "cb4847e5d72b6295f412b438a891752fd5714d4e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzM3OTgzOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RetriesSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzozNToxNVrOG-OzBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo1ODo0MVrOG-SSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwNzMzMg==", "bodyText": "Why not 5000? it doesn't work anymore? or probably 7000 provide more stability?", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r467907332", "createdAt": "2020-08-10T13:35:15Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RetriesSpec.groovy", "diffHunk": "@@ -412,9 +412,7 @@ and at least 1 path must remain safe\"\n         antiflap.portDown(islToBreak.srcSwitch.dpId, islToBreak.srcPort)\n \n         and: \"Connection to src switch is slow in order to simulate a global timeout on reroute operation\"\n-        lockKeeper.shapeSwitchesTraffic([swPair.src], new TrafficControlData(5000))\n-        //note that for some reason 5000+ delay will also cause isls on given switch to timeout. Reason unknown\n-        //failed isls have no impact on this particular scenario\n+        lockKeeper.shapeSwitchesTraffic([swPair.src], new TrafficControlData(7000))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ccf5d5100cabe2eb965e13cdc5a4b8c0532e536"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2NDU2NQ==", "bodyText": "more stability. 5000 fails sometimes due to no global timeout happening", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r467964565", "createdAt": "2020-08-10T14:58:41Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RetriesSpec.groovy", "diffHunk": "@@ -412,9 +412,7 @@ and at least 1 path must remain safe\"\n         antiflap.portDown(islToBreak.srcSwitch.dpId, islToBreak.srcPort)\n \n         and: \"Connection to src switch is slow in order to simulate a global timeout on reroute operation\"\n-        lockKeeper.shapeSwitchesTraffic([swPair.src], new TrafficControlData(5000))\n-        //note that for some reason 5000+ delay will also cause isls on given switch to timeout. Reason unknown\n-        //failed isls have no impact on this particular scenario\n+        lockKeeper.shapeSwitchesTraffic([swPair.src], new TrafficControlData(7000))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwNzMzMg=="}, "originalCommit": {"oid": "1ccf5d5100cabe2eb965e13cdc5a4b8c0532e536"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzU0NjQxOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/server42/Server42RttSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxNDoyMFrOG-QYOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxNDoyMFrOG-QYOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMzI0Mg==", "bodyText": "looks like it should be paraphrased\nprobably to:  and: \"server42FlowRtt is turned off on src and dst\"", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r467933242", "createdAt": "2020-08-10T14:14:20Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/server42/Server42RttSpec.groovy", "diffHunk": "@@ -1,96 +1,96 @@\n package org.openkilda.functionaltests.spec.server42\n \n import static org.junit.Assume.assumeTrue\n-import static org.openkilda.testing.Constants.STATS_LOGGING_TIMEOUT\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n \n import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.helpers.SwitchHelper\n import org.openkilda.functionaltests.helpers.Wrappers\n import org.openkilda.messaging.model.system.FeatureTogglesDto\n-import org.openkilda.model.FlowEncapsulationType\n-import org.openkilda.northbound.dto.v1.switches.SwitchPropertiesDto\n+import org.openkilda.testing.model.topology.TopologyDefinition.Switch\n \n import groovy.time.TimeCategory\n import org.springframework.beans.factory.annotation.Value\n-import spock.lang.Ignore\n import spock.lang.Narrative\n import spock.lang.Shared\n import spock.util.mop.Use\n \n import java.util.concurrent.TimeUnit\n \n-@Ignore(\"unstable on jenkins, fix ASAP\")\n @Use(TimeCategory)\n @Narrative(\"Verify that statistic is collected from server42 Rtt\")\n+/* On local environment these tests will use stubs without sending real rtt packets across the network.\n+see server42-control-server-stub\n+ */\n class Server42RttSpec extends HealthCheckSpecification {\n     @Shared\n     @Value('${opentsdb.metric.prefix}')\n     String metricPrefix\n \n-    def \"Create two flow with server42 Rtt feature and check datapoints in opentsdb\"() {\n-        given: \"Two active neighboring switches one with server42 and one without\"\n+    @Tidy\n+    def \"Flow rtt stats are available in forward and reverse directions for new flows\"() {\n+        given: \"Two active switches with src switch having server42\"\n         def server42switches = topology.getActiveServer42Switches();\n         def server42switchesDpIds = server42switches*.dpId;\n-        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+        def switchPair = topologyHelper.switchPairs.collectMany { [it, it.reversed] }.find {\n             it.src.dpId in server42switchesDpIds && !server42switchesDpIds.contains(it.dst.dpId)\n         }\n         assumeTrue(\"Was not able to find a switch with a server42 connected\", switchPair != null)\n-        def flowRttFeatureStartState = isEnabledFlowRtt();\n \n-        when: \"Set server42FlowRtt toggle to true\"\n-        enableFlowRtt()\n+        and: \"server42FlowRtt feature toggle is set to true\"\n+        def flowRttFeatureStartState = changeFlowRttToggle(true)\n \n-        and: \"Set server 42 src switch enabled\"\n+        and: \"server42FlowRtt is enabled on src and dst switches\"\n         def server42Switch = switchPair.src\n-        def flowRttSwitchFeatureStartState = isEnabledFlowRttForSwitch(server42Switch);\n-        enableFlowRttForSwitch(server42Switch)\n+        def initialSwitchRtt = [server42Switch, switchPair.dst].collectEntries { [it, changeFlowRttSwitch(it, true)] }\n \n-        and: \"Flow for forward metric created\"\n+        when: \"Create a flow for forward metric\"\n         def flowCreateTime = new Date()\n         def flow = flowHelperV2.randomFlow(switchPair)\n         flowHelperV2.addFlow(flow)\n \n-        and: \"Reversed flow for backward metric created\"\n+        and: \"Create a reversed flow for backward metric\"\n         def reversedFlow = flowHelperV2.randomFlow(switchPair.reversed)\n         flowHelperV2.addFlow(reversedFlow)\n \n-        then: \"Check if stats for forward is available\"\n-        def statsData = null\n-        Wrappers.wait(STATS_LOGGING_TIMEOUT, 1) {\n-            statsData = otsdb.query(flowCreateTime, metricPrefix + \"flow.rtt\",\n+        then: \"Check if stats for forward are available\"\n+        Wrappers.wait(WAIT_OFFSET, 1) {\n+            def statsData = otsdb.query(flowCreateTime, metricPrefix + \"flow.rtt\",\n                     [flowid   : flow.flowId,\n                      direction: \"forward\"]).dps\n             assert statsData && !statsData.empty\n         }\n \n-        and: \"Check if stats for reverse is available\"\n-        Wrappers.wait(STATS_LOGGING_TIMEOUT, 1) {\n-            statsData = otsdb.query(flowCreateTime, metricPrefix + \"flow.rtt\",\n+        and: \"Check if stats for reverse are available\"\n+        Wrappers.wait(WAIT_OFFSET, 1) {\n+            def statsData = otsdb.query(flowCreateTime, metricPrefix + \"flow.rtt\",\n                     [flowid   : reversedFlow.flowId,\n                      direction: \"reverse\"]).dps\n             assert statsData && !statsData.empty\n         }\n \n-        and: \"Cleanup: revert system to original state\"\n-        revertToOrigin(flow, reversedFlow, flowRttFeatureStartState, flowRttSwitchFeatureStartState, server42Switch)\n+        cleanup: \"Revert system to original state\"\n+        revertToOrigin(flow, reversedFlow, flowRttFeatureStartState, initialSwitchRtt)\n     }\n \n-    def \"Create two flow with server42 Rtt feature and check feature togglers\"() {\n-        given: \"Two active neighboring switches one with server42 and one without\"\n-        def server42switches = topology.getActiveServer42Switches();\n-        def server42switchesDpIds = server42switches*.dpId;\n-        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+    @Tidy\n+    def \"Flow rtt stats are available only if both global and switch toggles are 'on' on both endpoints\"() {\n+        given: \"Two active switches with src switch having server42\"\n+        def server42switches = topology.getActiveServer42Switches()\n+        def server42switchesDpIds = server42switches*.dpId\n+        def switchPair = topologyHelper.switchPairs.collectMany { [it, it.reversed] }.find {\n             it.src.dpId in server42switchesDpIds && !server42switchesDpIds.contains(it.dst.dpId)\n         }\n         assumeTrue(\"Was not able to find a switch with a server42 connected\", switchPair != null)\n         def server42Switch = switchPair.src\n+        def statsWaitSeconds = 4\n \n-        when: \"Set server42FlowRtt toggle to false\"\n-        def flowRttFeatureStartState = isEnabledFlowRtt();\n-        disableFlowRtt()\n+        and: \"server42FlowRtt toggle is turned off\"\n+        def flowRttFeatureStartState = changeFlowRttToggle(false)\n \n-        and: \"Set server42Switch FlowRtt deactivated\"\n-        def flowRttSwitchFeatureStartState = isEnabledFlowRttForSwitch(server42Switch);\n-        disableFlowRttForSwitch(server42Switch)\n+        and: \"server42FlowRtt for src switch is turned off on src and dst\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ccf5d5100cabe2eb965e13cdc5a4b8c0532e536"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzU2OTY1OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/server42/Server42RttSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxOTo1NlrOG-QmnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowMjowN1rOG-ScRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNjkyNA==", "bodyText": "what do you mean for new flows? Flow rtt stats are not available for a flow that is created before enabling server42FlowRtt , am I right?", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r467936924", "createdAt": "2020-08-10T14:19:56Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/server42/Server42RttSpec.groovy", "diffHunk": "@@ -1,96 +1,96 @@\n package org.openkilda.functionaltests.spec.server42\n \n import static org.junit.Assume.assumeTrue\n-import static org.openkilda.testing.Constants.STATS_LOGGING_TIMEOUT\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n \n import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.helpers.SwitchHelper\n import org.openkilda.functionaltests.helpers.Wrappers\n import org.openkilda.messaging.model.system.FeatureTogglesDto\n-import org.openkilda.model.FlowEncapsulationType\n-import org.openkilda.northbound.dto.v1.switches.SwitchPropertiesDto\n+import org.openkilda.testing.model.topology.TopologyDefinition.Switch\n \n import groovy.time.TimeCategory\n import org.springframework.beans.factory.annotation.Value\n-import spock.lang.Ignore\n import spock.lang.Narrative\n import spock.lang.Shared\n import spock.util.mop.Use\n \n import java.util.concurrent.TimeUnit\n \n-@Ignore(\"unstable on jenkins, fix ASAP\")\n @Use(TimeCategory)\n @Narrative(\"Verify that statistic is collected from server42 Rtt\")\n+/* On local environment these tests will use stubs without sending real rtt packets across the network.\n+see server42-control-server-stub\n+ */\n class Server42RttSpec extends HealthCheckSpecification {\n     @Shared\n     @Value('${opentsdb.metric.prefix}')\n     String metricPrefix\n \n-    def \"Create two flow with server42 Rtt feature and check datapoints in opentsdb\"() {\n-        given: \"Two active neighboring switches one with server42 and one without\"\n+    @Tidy\n+    def \"Flow rtt stats are available in forward and reverse directions for new flows\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ccf5d5100cabe2eb965e13cdc5a4b8c0532e536"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2NzA0Nw==", "bodyText": "This text is not implying that it is not available for old flows, it is only stating what is checked in the test - rtt is available for new flows (aka flows created after enabling toggles). It is also available for existing flows, but it is not checked here", "url": "https://github.com/telstra/open-kilda/pull/3668#discussion_r467967047", "createdAt": "2020-08-10T15:02:07Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/server42/Server42RttSpec.groovy", "diffHunk": "@@ -1,96 +1,96 @@\n package org.openkilda.functionaltests.spec.server42\n \n import static org.junit.Assume.assumeTrue\n-import static org.openkilda.testing.Constants.STATS_LOGGING_TIMEOUT\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n \n import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.helpers.SwitchHelper\n import org.openkilda.functionaltests.helpers.Wrappers\n import org.openkilda.messaging.model.system.FeatureTogglesDto\n-import org.openkilda.model.FlowEncapsulationType\n-import org.openkilda.northbound.dto.v1.switches.SwitchPropertiesDto\n+import org.openkilda.testing.model.topology.TopologyDefinition.Switch\n \n import groovy.time.TimeCategory\n import org.springframework.beans.factory.annotation.Value\n-import spock.lang.Ignore\n import spock.lang.Narrative\n import spock.lang.Shared\n import spock.util.mop.Use\n \n import java.util.concurrent.TimeUnit\n \n-@Ignore(\"unstable on jenkins, fix ASAP\")\n @Use(TimeCategory)\n @Narrative(\"Verify that statistic is collected from server42 Rtt\")\n+/* On local environment these tests will use stubs without sending real rtt packets across the network.\n+see server42-control-server-stub\n+ */\n class Server42RttSpec extends HealthCheckSpecification {\n     @Shared\n     @Value('${opentsdb.metric.prefix}')\n     String metricPrefix\n \n-    def \"Create two flow with server42 Rtt feature and check datapoints in opentsdb\"() {\n-        given: \"Two active neighboring switches one with server42 and one without\"\n+    @Tidy\n+    def \"Flow rtt stats are available in forward and reverse directions for new flows\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNjkyNA=="}, "originalCommit": {"oid": "1ccf5d5100cabe2eb965e13cdc5a4b8c0532e536"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1790, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}