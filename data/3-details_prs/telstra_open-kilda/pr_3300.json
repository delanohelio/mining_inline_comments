{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NzgwOTQ2", "number": 3300, "title": "improve test according to latest changes in #3295", "bodyText": "", "createdAt": "2020-03-17T11:31:35Z", "url": "https://github.com/telstra/open-kilda/pull/3300", "merged": true, "mergeCommit": {"oid": "b6cee0dc1a29d2cc94a82f942f8680dd2342758a"}, "closed": true, "closedAt": "2020-03-20T14:40:46Z", "author": {"login": "andriidovhan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOiDk3AFqTM3NTk5NTk4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPhihLgFqTM3ODU0MDQ4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTk1OTgz", "url": "https://github.com/telstra/open-kilda/pull/3300#pullrequestreview-375995983", "createdAt": "2020-03-17T12:41:41Z", "commit": {"oid": "1f231bd227a2c3e7636fc8f907c1bd0baa7eaecb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0MTo0MVrOF3aeDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0MTo0MVrOF3aeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0OTY3OA==", "bodyText": "1 = 1 + 1\nSomething wrong here", "url": "https://github.com/telstra/open-kilda/pull/3300#discussion_r393649678", "createdAt": "2020-03-17T12:41:41Z", "author": {"login": "rozdy"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -446,11 +446,16 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n \n         then: \"Flows are not rerouted and flows status are 'Down'\"\n         def flowPathMap = [(firstFlow.flowId): firstFlowMainPath, (secondFlow.flowId): secondFlowPath]\n-        TimeUnit.SECONDS.sleep(rerouteDelay * 2) // it helps to be sure that the auto-reroute operation is completed\n-        Wrappers.wait(WAIT_OFFSET) {\n-            assert northbound.getLink(islToBreak).state == FAILED\n-            // just to be sure that backup ISL is not failed\n-            assert northbound.getLink(islToReroute).state == DISCOVERED\n+        // 'wait' helps to be sure that the auto-reroute operation is completed\n+        Wrappers.wait(WAIT_OFFSET * 2) {\n+            def firstFlowHistory = northbound.getFlowHistory(firstFlow.flowId).findAll { it.action == \"Flow rerouting\" }\n+            assert firstFlowHistory.last().histories.find { it.action == REROUTE_FAIL }\n+            assert firstFlowHistory.size() == 1\n+            def secondFlowHistory = northbound.getFlowHistory(secondFlow.flowId).findAll { it.action == \"Flow rerouting\" }\n+            assert secondFlowHistory.findAll { it.action == \"Flow rerouting\" }.size() == 4\n+            /* 1 = first reroute due to the broken isl + 1 reroute on switch up event;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f231bd227a2c3e7636fc8f907c1bd0baa7eaecb"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f231bd227a2c3e7636fc8f907c1bd0baa7eaecb", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/1f231bd227a2c3e7636fc8f907c1bd0baa7eaecb", "committedDate": "2020-03-17T11:25:29Z", "message": "improve test according to #3194"}, "afterCommit": {"oid": "8a0d47fdf7fd80b48942877b061de6513cc25c11", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/8a0d47fdf7fd80b48942877b061de6513cc25c11", "committedDate": "2020-03-17T12:55:22Z", "message": "improve test according to #3295"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a0d47fdf7fd80b48942877b061de6513cc25c11", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/8a0d47fdf7fd80b48942877b061de6513cc25c11", "committedDate": "2020-03-17T12:55:22Z", "message": "improve test according to #3295"}, "afterCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/fcc58b0581b97784575920ab6d91a276e96d0058", "committedDate": "2020-03-17T17:05:43Z", "message": "improve test according to #3295"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjkyNDE0", "url": "https://github.com/telstra/open-kilda/pull/3300#pullrequestreview-376692414", "createdAt": "2020-03-18T09:30:57Z", "commit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTozMDo1N1rOF38qzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTo0NTowOFrOF39LpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwOTk5OA==", "bodyText": "Why do you expect for 'retry #1' to be found more than 1 time?", "url": "https://github.com/telstra/open-kilda/pull/3300#discussion_r394209998", "createdAt": "2020-03-18T09:30:57Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -444,21 +443,39 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         and: \"Init auto reroute (bring ports down on the dstSwitch)\"\n         antiflap.portDown(islToBreak.dstSwitch.dpId, islToBreak.dstPort)\n \n-        then: \"Flows are not rerouted and flows status are 'Down'\"\n+        then: \"Flows are not rerouted and system tries to reroute a flow with transit switch\"\n         def flowPathMap = [(firstFlow.flowId): firstFlowMainPath, (secondFlow.flowId): secondFlowPath]\n-        TimeUnit.SECONDS.sleep(rerouteDelay * 2) // it helps to be sure that the auto-reroute operation is completed\n-        Wrappers.wait(WAIT_OFFSET) {\n-            assert northbound.getLink(islToBreak).state == FAILED\n-            // just to be sure that backup ISL is not failed\n-            assert northbound.getLink(islToReroute).state == DISCOVERED\n+        Wrappers.wait(WAIT_OFFSET * 2) {\n+            def firstFlowHistory = northbound.getFlowHistory(firstFlow.flowId).findAll { it.action == \"Flow rerouting\" }\n+            assert firstFlowHistory.last().histories.find { it.action == REROUTE_FAIL }\n+            assert !firstFlowHistory.find { it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/) }\n+            def secondFlowHistory = northbound.getFlowHistory(secondFlow.flowId).findAll { it.action == \"Flow rerouting\" }\n+            assert secondFlowHistory.findAll { it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/) }.size() > 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMTA5Mg==", "bodyText": "can we do a more meaningful search here?", "url": "https://github.com/telstra/open-kilda/pull/3300#discussion_r394211092", "createdAt": "2020-03-18T09:32:44Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -444,21 +443,39 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         and: \"Init auto reroute (bring ports down on the dstSwitch)\"\n         antiflap.portDown(islToBreak.dstSwitch.dpId, islToBreak.dstPort)\n \n-        then: \"Flows are not rerouted and flows status are 'Down'\"\n+        then: \"Flows are not rerouted and system tries to reroute a flow with transit switch\"\n         def flowPathMap = [(firstFlow.flowId): firstFlowMainPath, (secondFlow.flowId): secondFlowPath]\n-        TimeUnit.SECONDS.sleep(rerouteDelay * 2) // it helps to be sure that the auto-reroute operation is completed\n-        Wrappers.wait(WAIT_OFFSET) {\n-            assert northbound.getLink(islToBreak).state == FAILED\n-            // just to be sure that backup ISL is not failed\n-            assert northbound.getLink(islToReroute).state == DISCOVERED\n+        Wrappers.wait(WAIT_OFFSET * 2) {\n+            def firstFlowHistory = northbound.getFlowHistory(firstFlow.flowId).findAll { it.action == \"Flow rerouting\" }\n+            assert firstFlowHistory.last().histories.find { it.action == REROUTE_FAIL }\n+            assert !firstFlowHistory.find { it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/) }\n+            def secondFlowHistory = northbound.getFlowHistory(secondFlow.flowId).findAll { it.action == \"Flow rerouting\" }\n+            assert secondFlowHistory.findAll { it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/) }.size() > 1\n+            // reroute caused by failed ISL on main and backup paths\n+            assert secondFlowHistory.findAll { !(it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/)) }.size() > 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMjMwMA==", "bodyText": "ok", "url": "https://github.com/telstra/open-kilda/pull/3300#discussion_r394212300", "createdAt": "2020-03-18T09:34:45Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -444,21 +443,39 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         and: \"Init auto reroute (bring ports down on the dstSwitch)\"\n         antiflap.portDown(islToBreak.dstSwitch.dpId, islToBreak.dstPort)\n \n-        then: \"Flows are not rerouted and flows status are 'Down'\"\n+        then: \"Flows are not rerouted and system tries to reroute a flow with transit switch\"\n         def flowPathMap = [(firstFlow.flowId): firstFlowMainPath, (secondFlow.flowId): secondFlowPath]\n-        TimeUnit.SECONDS.sleep(rerouteDelay * 2) // it helps to be sure that the auto-reroute operation is completed\n-        Wrappers.wait(WAIT_OFFSET) {\n-            assert northbound.getLink(islToBreak).state == FAILED\n-            // just to be sure that backup ISL is not failed\n-            assert northbound.getLink(islToReroute).state == DISCOVERED\n+        Wrappers.wait(WAIT_OFFSET * 2) {\n+            def firstFlowHistory = northbound.getFlowHistory(firstFlow.flowId).findAll { it.action == \"Flow rerouting\" }\n+            assert firstFlowHistory.last().histories.find { it.action == REROUTE_FAIL }\n+            assert !firstFlowHistory.find { it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/) }\n+            def secondFlowHistory = northbound.getFlowHistory(secondFlow.flowId).findAll { it.action == \"Flow rerouting\" }\n+            assert secondFlowHistory.findAll { it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/) }.size() > 1\n+            // reroute caused by failed ISL on main and backup paths\n+            assert secondFlowHistory.findAll { !(it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/)) }.size() > 1\n+            /* NOTE: retry is available for a flow when switchUp event appears on a transit switch\n+            We can't check that 3 attempts of reroute are available in flow history, system can't guarantee it.\n+            Reason: during retrying ISL on backup path can fail -> new reroute event(e.g. REROUTE_FAIL_ISL)\n+            will be triggered and put in the queue of reroute -> for instance: in the queue we have 3rd attempt\n+            and REROUTE_FAIL_ISL -> these two reroutes will be merged based on some algorithm ->\n+            system execute one reroute only.\n+            (System doesn't merge reason of reroute, it just pick any reason from queue) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNDkwOQ==", "bodyText": "there is a risk that flows won't find a path during reroute", "url": "https://github.com/telstra/open-kilda/pull/3300#discussion_r394214909", "createdAt": "2020-03-18T09:39:14Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -467,31 +484,23 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n         isSwitchActivated = true\n \n-        then: \"Both flows are rerouted\"\n-        Wrappers.wait(rerouteDelay + WAIT_OFFSET) {\n-            withPool {\n-                [firstFlow.flowId, secondFlow.flowId].eachParallel { String flowId ->\n-                    assert northbound.getFlowStatus(flowId).status == FlowState.UP\n-                    assert PathHelper.convert(northbound.getFlowPath(flowId)) != flowPathMap[flowId]\n-                }\n-            }\n-        }\n-\n-        and: \"Flow is rerouted due to switchUp event\"\n-        //TODO(andriidovhan) specify flow history verification(it is not implemented yet) Reroute reason: switchUp event\n+        then: \"System tries to reroute the flow on switchUp event\"\n+        /* there is a risk that flows wont be rerouted, because switch is online but ISL are not discovered yet,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNTMzMA==", "bodyText": "ISL -> ISLs", "url": "https://github.com/telstra/open-kilda/pull/3300#discussion_r394215330", "createdAt": "2020-03-18T09:40:02Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -467,31 +484,23 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n         isSwitchActivated = true\n \n-        then: \"Both flows are rerouted\"\n-        Wrappers.wait(rerouteDelay + WAIT_OFFSET) {\n-            withPool {\n-                [firstFlow.flowId, secondFlow.flowId].eachParallel { String flowId ->\n-                    assert northbound.getFlowStatus(flowId).status == FlowState.UP\n-                    assert PathHelper.convert(northbound.getFlowPath(flowId)) != flowPathMap[flowId]\n-                }\n-            }\n-        }\n-\n-        and: \"Flow is rerouted due to switchUp event\"\n-        //TODO(andriidovhan) specify flow history verification(it is not implemented yet) Reroute reason: switchUp event\n+        then: \"System tries to reroute the flow on switchUp event\"\n+        /* there is a risk that flows wont be rerouted, because switch is online but ISL are not discovered yet,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNDkwOQ=="}, "originalCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNjI4OQ==", "bodyText": "As for me it makes sense to wait for UP status at least as a separate step/wait here before trying to remove the flow", "url": "https://github.com/telstra/open-kilda/pull/3300#discussion_r394216289", "createdAt": "2020-03-18T09:41:37Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -467,31 +484,23 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n         }\n         isSwitchActivated = true\n \n-        then: \"Both flows are rerouted\"\n-        Wrappers.wait(rerouteDelay + WAIT_OFFSET) {\n-            withPool {\n-                [firstFlow.flowId, secondFlow.flowId].eachParallel { String flowId ->\n-                    assert northbound.getFlowStatus(flowId).status == FlowState.UP\n-                    assert PathHelper.convert(northbound.getFlowPath(flowId)) != flowPathMap[flowId]\n-                }\n-            }\n-        }\n-\n-        and: \"Flow is rerouted due to switchUp event\"\n-        //TODO(andriidovhan) specify flow history verification(it is not implemented yet) Reroute reason: switchUp event\n+        then: \"System tries to reroute the flow on switchUp event\"\n+        /* there is a risk that flows wont be rerouted, because switch is online but ISL are not discovered yet,\n+         that's why we check that system tries to reroute flow on the switchUp event and don't check that flow is UP */\n         Wrappers.wait(WAIT_OFFSET / 2) {\n-            assert northbound.getFlowHistory(firstFlow.flowId).findAll { it.action == \"Flow rerouting\" }.size() == 2\n-\n-            assert northbound.getFlowHistory(secondFlow.flowId).findAll { it.action == \"Flow rerouting\" }.size() == 5\n-            /* 2 = first reroute due to the broken isl + 1 reroute on switch up event;\n-             5 = first reroute due to the broken isl + 3 retries + 1 reroute on switch up event;\n-             NOTE: retry is available for a flow when switchUp event appears on a transit switch */\n+            assert northbound.getFlowHistory(firstFlow.flowId).findAll {\n+                it.action == \"Flow rerouting\"\n+            }.last().details == \"Reason: Switch '$switchPair1.src.dpId' online\"\n+            assert northbound.getFlowHistory(secondFlow.flowId).findAll {\n+                it.action == \"Flow rerouting\"\n+            }.last().details == \"Reason: Switch '$switchPair1.src.dpId' online\"\n         }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODQwNQ==", "bodyText": "Is this expected? 'retry #' really made sense in the details description, not sure about task id.", "url": "https://github.com/telstra/open-kilda/pull/3300#discussion_r394218405", "createdAt": "2020-03-18T09:45:08Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -76,7 +76,7 @@ and at least 1 path must remain safe\"\n         then: \"System fails to install rules on desired path and tries to retry path installation\"\n         Wrappers.wait(rerouteDelay + WAIT_OFFSET, 0.1) {\n             assert northbound.getFlowHistory(flow.flowId).find {\n-                it.action == \"Flow rerouting\" && it.details.matches(/Reason: .*?: retry #1/)\n+                it.action == \"Flow rerouting\" && it.taskId =~ (/[^a-z_A-Z0-9-\\s]* : retry #1 :/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcc58b0581b97784575920ab6d91a276e96d0058", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/fcc58b0581b97784575920ab6d91a276e96d0058", "committedDate": "2020-03-17T17:05:43Z", "message": "improve test according to #3295"}, "afterCommit": {"oid": "72aba99c26efa7dfea229b12d93c5b56959ac420", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/72aba99c26efa7dfea229b12d93c5b56959ac420", "committedDate": "2020-03-18T15:14:25Z", "message": "improve test according to #3295"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c644a2549e2f654795a4b7337510e1c0dc88b7", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/81c644a2549e2f654795a4b7337510e1c0dc88b7", "committedDate": "2020-03-18T16:42:02Z", "message": "improve test according to #3295"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72aba99c26efa7dfea229b12d93c5b56959ac420", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/72aba99c26efa7dfea229b12d93c5b56959ac420", "committedDate": "2020-03-18T15:14:25Z", "message": "improve test according to #3295"}, "afterCommit": {"oid": "81c644a2549e2f654795a4b7337510e1c0dc88b7", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/81c644a2549e2f654795a4b7337510e1c0dc88b7", "committedDate": "2020-03-18T16:42:02Z", "message": "improve test according to #3295"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4Mzg0NzI1", "url": "https://github.com/telstra/open-kilda/pull/3300#pullrequestreview-378384725", "createdAt": "2020-03-20T10:52:58Z", "commit": {"oid": "81c644a2549e2f654795a4b7337510e1c0dc88b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTQwNDg1", "url": "https://github.com/telstra/open-kilda/pull/3300#pullrequestreview-378540485", "createdAt": "2020-03-20T14:39:31Z", "commit": {"oid": "81c644a2549e2f654795a4b7337510e1c0dc88b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3669, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}