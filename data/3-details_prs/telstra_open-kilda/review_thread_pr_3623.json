{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDU4MDUx", "number": 3623, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyNDowN1rOEUjSkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo1MDoyM1rOEWrHsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTg1MTY5OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyNDowN1rOG60RMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTozNjozOFrOG8B_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjk2Mw==", "bodyText": "Closing bracket is missing", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464326963", "createdAt": "2020-08-03T10:24:07Z", "author": {"login": "rozdy"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java", "diffHunk": "@@ -271,8 +269,22 @@ private void handleCommand(CommandMessage message) {\n             doRemoveIslDefaultRule(message);\n         } else if (data instanceof DumpGroupsRequest) {\n             doDumpGroupsRequest(message);\n+        } else if (data instanceof BroadcastWrapper) {\n+            handleBroadcastCommand(message, (BroadcastWrapper) data);\n         } else {\n-            logger.error(\"Unable to handle '{}' request - handler not found.\", data);\n+            handlerNotFound(data);\n+        }\n+    }\n+\n+    private void handleBroadcastCommand(CommandMessage message, BroadcastWrapper wrapper) {\n+        CommandData payload = wrapper.getPayload();\n+        if (payload instanceof PortsCommandData) {\n+            doPortsCommandDataRequest(wrapper.getScope(), (PortsCommandData) payload, message.getCorrelationId());\n+        } else if (payload instanceof ConnectModeRequest) {\n+            // FIXME(surabujin) - caller do not expect multiple responses(from multiple regions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwMDQ1Nw==", "bodyText": "bracket added", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r465600457", "createdAt": "2020-08-05T09:36:38Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java", "diffHunk": "@@ -271,8 +269,22 @@ private void handleCommand(CommandMessage message) {\n             doRemoveIslDefaultRule(message);\n         } else if (data instanceof DumpGroupsRequest) {\n             doDumpGroupsRequest(message);\n+        } else if (data instanceof BroadcastWrapper) {\n+            handleBroadcastCommand(message, (BroadcastWrapper) data);\n         } else {\n-            logger.error(\"Unable to handle '{}' request - handler not found.\", data);\n+            handlerNotFound(data);\n+        }\n+    }\n+\n+    private void handleBroadcastCommand(CommandMessage message, BroadcastWrapper wrapper) {\n+        CommandData payload = wrapper.getPayload();\n+        if (payload instanceof PortsCommandData) {\n+            doPortsCommandDataRequest(wrapper.getScope(), (PortsCommandData) payload, message.getCorrelationId());\n+        } else if (payload instanceof ConnectModeRequest) {\n+            // FIXME(surabujin) - caller do not expect multiple responses(from multiple regions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjk2Mw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTg4MjE1OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozNDoyOFrOG60jUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTozNTowN1rOG-wDmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw==", "bodyText": "I don't like boolean readWriteMode. Either change to enum or rename to something like writeAllowedMode.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464331603", "createdAt": "2020-08-03T10:34:28Z", "author": {"login": "rozdy"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNjE0Ng==", "bodyText": "if (switchEntry.isReadWriteMode()) {...} as for me is better than if (switchEntry.isWriteAllowedMode) {...}, I would like to keed it's current name. If it is strict requirement - let me know.\nPS read-only and read-write terms are widely used across the code of this feature, this is one more reason to keep the current name.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r465606146", "createdAt": "2020-08-05T09:46:47Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NzYxNQ==", "bodyText": "Ok, now I get it ReadWrite is the name of the mode and it's true or false. First time reading it looks like true is write mode and false is read mode. Now I can't suggest better name for it.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r465657615", "createdAt": "2020-08-05T11:24:29Z", "author": {"login": "rozdy"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0ODQ5NA==", "bodyText": "readWriteMode is very hard to understand, if the main focus in this pair of modes in write permissions, why not to call it writeMode of type boolean", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r466948494", "createdAt": "2020-08-07T10:08:57Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3NzgzOA==", "bodyText": "Because it will differ from other parts of code that use readOnly and readWrite names.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468377838", "createdAt": "2020-08-11T07:23:37Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MDYwOA==", "bodyText": "and that's the thing as for me, we really can't have less permissions than read for the switch, and the only thing that should be checked is whether it allows to write or not. This approach blurs focus on what is really important here.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468390608", "createdAt": "2020-08-11T07:48:28Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1MDYxNA==", "bodyText": "My point is to use the same terms across code - floodlightrouter use 2 terms(as for now) to define/describe switch capabilities - it is read-write-mode and read-only-mode. That why I insist on the same term here.\nObvious another way - to use some enum to define these modes. The cost of this solution - more complex handling of these modes (need to track extra/unknown modes). This is a more correct way to solve this naming issue than new/other terminology.\nDo you insist on renaming?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468450614", "createdAt": "2020-08-11T09:32:17Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1MjI0OA==", "bodyText": "yes, please do. I worry about losing context here in a months or so, thank you!", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468452248", "createdAt": "2020-08-11T09:35:07Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTkwMTc5OnYy", "diffSide": "RIGHT", "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/FloodlightRouterTopologyConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0MTo0MVrOG60vEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo1MzozN1rOG8Ckww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNDYxMQ==", "bodyText": "Consider renaming to \"switch mapping expire delay\".", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464334611", "createdAt": "2020-08-03T10:41:41Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/FloodlightRouterTopologyConfig.java", "diffHunk": "@@ -43,4 +43,8 @@\n     @Default(\"1\")\n     @Converter(StringToSetConverter.class)\n     Set<String> getFloodlightRegions();\n+\n+    @Key(\"floodlight.switch.mapping.remove.delay.seconds\")\n+    @Default(\"900\")\n+    Long getSwitchMappingRemoveDelay();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwOTkyMw==", "bodyText": "This is the delay before actual removal after the mapping removes request... so the current name should be more accurate... Again if you insist - let me know.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r465609923", "createdAt": "2020-08-05T09:53:37Z", "author": {"login": "surabujin"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/FloodlightRouterTopologyConfig.java", "diffHunk": "@@ -43,4 +43,8 @@\n     @Default(\"1\")\n     @Converter(StringToSetConverter.class)\n     Set<String> getFloodlightRegions();\n+\n+    @Key(\"floodlight.switch.mapping.remove.delay.seconds\")\n+    @Default(\"900\")\n+    Long getSwitchMappingRemoveDelay();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNDYxMQ=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTkyNzA0OnYy", "diffSide": "RIGHT", "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/bolts/RegionTrackerBolt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo1MDozNFrOG60-Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjoxMjoyOFrOG8G7HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzODQ4Nw==", "bodyText": "Why don't use pullValue here?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464338487", "createdAt": "2020-08-03T10:50:34Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/bolts/RegionTrackerBolt.java", "diffHunk": "@@ -150,79 +126,69 @@ private void handleTick() {\n         }\n     }\n \n-    private void handleInput(Tuple input) {\n-        String sourceComponent = input.getSourceComponent();\n-        Message message = (Message) input.getValueByField(AbstractTopology.MESSAGE_FIELD);\n+    private void handleNetworkNotification(Tuple input) {\n+        String stream = input.getSourceStreamId();\n+        if (SpeakerToNetworkProxyBolt.STREAM_ALIVE_EVIDENCE_ID.equals(stream)) {\n+            handleAliveEvidenceNotification(input);\n+        } else if (SpeakerToNetworkProxyBolt.STREAM_REGION_NOTIFICATION_ID.equals(stream)) {\n+            handleRegionNotification(input);\n+        } else {\n+            unhandledInput(input);\n+        }\n+    }\n \n-        // setup correct command context\n-        commandContext = new CommandContext(message);\n+    private void handleAliveEvidenceNotification(Tuple input) {\n+        String region = input.getStringByField(SpeakerToNetworkProxyBolt.FIELD_ID_REGION);\n+        long timestamp = input.getLongByField(SpeakerToNetworkProxyBolt.FIELD_ID_TIMESTAMP);\n \n-        switch (sourceComponent) {\n-            case ComponentType.KILDA_TOPO_DISCO_REPLY_BOLT:\n-                routerService.processSpeakerDiscoResponse(this, message);\n-                break;\n-            default:\n-                log.error(\"Unknown input stream handled: {}\", sourceComponent);\n-                break;\n-        }\n+        floodlightTracker.handleAliveEvidence(region, timestamp);\n     }\n \n-    private void setupTuple(Tuple input) {\n-        currentTuple = input;\n-        commandContext = new CommandContext();\n+    private void handleRegionNotification(Tuple input) {\n+        String region = input.getStringByField(SpeakerToNetworkProxyBolt.FIELD_ID_REGION);\n+        InfoData payload = (InfoData) input.getValueByField(SpeakerToNetworkProxyBolt.FIELD_ID_PAYLOAD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4MTE4MQ==", "bodyText": "Missed during refactoring. Replaced with pullValue provided by AbstractBolt.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r465681181", "createdAt": "2020-08-05T12:12:28Z", "author": {"login": "surabujin"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/bolts/RegionTrackerBolt.java", "diffHunk": "@@ -150,79 +126,69 @@ private void handleTick() {\n         }\n     }\n \n-    private void handleInput(Tuple input) {\n-        String sourceComponent = input.getSourceComponent();\n-        Message message = (Message) input.getValueByField(AbstractTopology.MESSAGE_FIELD);\n+    private void handleNetworkNotification(Tuple input) {\n+        String stream = input.getSourceStreamId();\n+        if (SpeakerToNetworkProxyBolt.STREAM_ALIVE_EVIDENCE_ID.equals(stream)) {\n+            handleAliveEvidenceNotification(input);\n+        } else if (SpeakerToNetworkProxyBolt.STREAM_REGION_NOTIFICATION_ID.equals(stream)) {\n+            handleRegionNotification(input);\n+        } else {\n+            unhandledInput(input);\n+        }\n+    }\n \n-        // setup correct command context\n-        commandContext = new CommandContext(message);\n+    private void handleAliveEvidenceNotification(Tuple input) {\n+        String region = input.getStringByField(SpeakerToNetworkProxyBolt.FIELD_ID_REGION);\n+        long timestamp = input.getLongByField(SpeakerToNetworkProxyBolt.FIELD_ID_TIMESTAMP);\n \n-        switch (sourceComponent) {\n-            case ComponentType.KILDA_TOPO_DISCO_REPLY_BOLT:\n-                routerService.processSpeakerDiscoResponse(this, message);\n-                break;\n-            default:\n-                log.error(\"Unknown input stream handled: {}\", sourceComponent);\n-                break;\n-        }\n+        floodlightTracker.handleAliveEvidence(region, timestamp);\n     }\n \n-    private void setupTuple(Tuple input) {\n-        currentTuple = input;\n-        commandContext = new CommandContext();\n+    private void handleRegionNotification(Tuple input) {\n+        String region = input.getStringByField(SpeakerToNetworkProxyBolt.FIELD_ID_REGION);\n+        InfoData payload = (InfoData) input.getValueByField(SpeakerToNetworkProxyBolt.FIELD_ID_PAYLOAD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzODQ4Nw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTk0MTIwOnYy", "diffSide": "RIGHT", "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/bolts/SpeakerToControllerProxyBolt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo1NToxN1rOG61GVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjoxNToxNVrOG8HBNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MDU2Ng==", "bodyText": "As I can see not only discovery notifications may be suppressed here.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464340566", "createdAt": "2020-08-03T10:55:17Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/bolts/SpeakerToControllerProxyBolt.java", "diffHunk": "@@ -41,8 +69,79 @@ protected void handleInput(Tuple input) throws Exception {\n         proxy(key, payload);\n     }\n \n-    protected void proxy(String key, Object payload) {\n-        getOutput().emit(getCurrentTuple(), makeDefaultTuple(key, payload));\n+    private void handleSwitchMappingUpdate(Tuple input) throws PipelineException {\n+        RegionMappingUpdate update = pullValue(input, SwitchMonitorBolt.FIELD_ID_PAYLOAD, RegionMappingUpdate.class);\n+        switchMapping.update(update);\n+    }\n+\n+    private void proxy(String key, Object value) {\n+        if (value instanceof InfoMessage) {\n+            proxyInfoMessage(key, (InfoMessage) value);\n+        } else {\n+            proxyOther(key, value);\n+        }\n+    }\n+\n+    protected void proxyInfoMessage(String key, InfoMessage envelope) {\n+        InfoData payload = envelope.getData();\n+        if (payload instanceof IslInfoData) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslInfoData) payload);\n+        } else if (payload instanceof PortInfoData) {\n+            proxyOnlyIfActiveRegion(key, envelope, (PortInfoData) payload);\n+        } else if (payload instanceof IslOneWayLatency) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslOneWayLatency) payload);\n+        } else if (payload instanceof IslBaseLatency) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslBaseLatency) payload);\n+        } else if (payload instanceof ConnectedDevicePacketBase) {\n+            proxyOnlyIfActiveRegion(key, envelope, (ConnectedDevicePacketBase) payload);\n+        } else {\n+            proxyOther(key, envelope);\n+        }\n+    }\n+\n+    protected void proxyOther(String key, Object value) {\n+        getOutput().emit(getCurrentTuple(), makeDefaultTuple(key, value));\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslInfoData payload) {\n+        SwitchId switchId = payload.getDestination().getSwitchId();\n+        proxyOnlyIfActiveRegion(key, envelope, switchId);\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, PortInfoData payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslOneWayLatency payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getDstSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslBaseLatency payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSrcSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, ConnectedDevicePacketBase payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, SwitchId switchId) {\n+        switchMapping.lookupReadWriteRegion(switchId).ifPresent(activeRegion -> {\n+            String region = envelope.getRegion();\n+            if (Objects.equals(activeRegion, region)) {\n+                proxyOther(key, envelope);\n+            } else {\n+                log.debug(\n+                        \"Suppress discovery notification {} (received via region \\\"{}\\\" while active region is \\\"{}\\\")\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4Mjc0Mw==", "bodyText": "Yes... it become true during testing of this feature (i.e. at the start it filters out only discovery event). Made the message more generic.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r465682743", "createdAt": "2020-08-05T12:15:15Z", "author": {"login": "surabujin"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/bolts/SpeakerToControllerProxyBolt.java", "diffHunk": "@@ -41,8 +69,79 @@ protected void handleInput(Tuple input) throws Exception {\n         proxy(key, payload);\n     }\n \n-    protected void proxy(String key, Object payload) {\n-        getOutput().emit(getCurrentTuple(), makeDefaultTuple(key, payload));\n+    private void handleSwitchMappingUpdate(Tuple input) throws PipelineException {\n+        RegionMappingUpdate update = pullValue(input, SwitchMonitorBolt.FIELD_ID_PAYLOAD, RegionMappingUpdate.class);\n+        switchMapping.update(update);\n+    }\n+\n+    private void proxy(String key, Object value) {\n+        if (value instanceof InfoMessage) {\n+            proxyInfoMessage(key, (InfoMessage) value);\n+        } else {\n+            proxyOther(key, value);\n+        }\n+    }\n+\n+    protected void proxyInfoMessage(String key, InfoMessage envelope) {\n+        InfoData payload = envelope.getData();\n+        if (payload instanceof IslInfoData) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslInfoData) payload);\n+        } else if (payload instanceof PortInfoData) {\n+            proxyOnlyIfActiveRegion(key, envelope, (PortInfoData) payload);\n+        } else if (payload instanceof IslOneWayLatency) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslOneWayLatency) payload);\n+        } else if (payload instanceof IslBaseLatency) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslBaseLatency) payload);\n+        } else if (payload instanceof ConnectedDevicePacketBase) {\n+            proxyOnlyIfActiveRegion(key, envelope, (ConnectedDevicePacketBase) payload);\n+        } else {\n+            proxyOther(key, envelope);\n+        }\n+    }\n+\n+    protected void proxyOther(String key, Object value) {\n+        getOutput().emit(getCurrentTuple(), makeDefaultTuple(key, value));\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslInfoData payload) {\n+        SwitchId switchId = payload.getDestination().getSwitchId();\n+        proxyOnlyIfActiveRegion(key, envelope, switchId);\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, PortInfoData payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslOneWayLatency payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getDstSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslBaseLatency payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSrcSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, ConnectedDevicePacketBase payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, SwitchId switchId) {\n+        switchMapping.lookupReadWriteRegion(switchId).ifPresent(activeRegion -> {\n+            String region = envelope.getRegion();\n+            if (Objects.equals(activeRegion, region)) {\n+                proxyOther(key, envelope);\n+            } else {\n+                log.debug(\n+                        \"Suppress discovery notification {} (received via region \\\"{}\\\" while active region is \\\"{}\\\")\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MDU2Ng=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDAxODAyOnYy", "diffSide": "RIGHT", "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/model/RegionMappingUpdate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMToyMzo1MVrOG610vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjoxNTo0N1rOG8HCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MjQ0Ng==", "bodyText": "The same naming issue. Rename to writeAllowedMode.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464352446", "createdAt": "2020-08-03T11:23:51Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/model/RegionMappingUpdate.java", "diffHunk": "@@ -13,14 +13,15 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.floodlightrouter.service;\n+package org.openkilda.wfm.topology.floodlightrouter.model;\n \n import org.openkilda.model.SwitchId;\n \n import lombok.Value;\n \n @Value\n-public class SwitchMapping {\n+public class RegionMappingUpdate {\n     private SwitchId switchId;\n     private String region;\n+    private boolean readWriteMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4MzAyNg==", "bodyText": "Same reason to keep this name.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r465683026", "createdAt": "2020-08-05T12:15:47Z", "author": {"login": "surabujin"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/model/RegionMappingUpdate.java", "diffHunk": "@@ -13,14 +13,15 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.floodlightrouter.service;\n+package org.openkilda.wfm.topology.floodlightrouter.model;\n \n import org.openkilda.model.SwitchId;\n \n import lombok.Value;\n \n @Value\n-public class SwitchMapping {\n+public class RegionMappingUpdate {\n     private SwitchId switchId;\n     private String region;\n+    private boolean readWriteMode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MjQ0Ng=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDAyODk3OnYy", "diffSide": "RIGHT", "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/service/monitor/SwitchConnectMonitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMToyNzoxN1rOG6164g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjoxNjo1MlrOG8HEpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1NDAxOA==", "bodyText": "os -> is", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464354018", "createdAt": "2020-08-03T11:27:17Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/service/monitor/SwitchConnectMonitor.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.floodlightrouter.service.monitor;\n+\n+import org.openkilda.messaging.info.InfoData;\n+import org.openkilda.messaging.info.discovery.NetworkDumpSwitchData;\n+import org.openkilda.messaging.info.event.SwitchInfoData;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.wfm.topology.floodlightrouter.model.RegionMappingUpdate;\n+import org.openkilda.wfm.topology.floodlightrouter.service.SwitchMonitorCarrier;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public abstract class SwitchConnectMonitor {\n+    protected final SwitchMonitorCarrier carrier;\n+    private final Clock clock;\n+    protected final SwitchId switchId;\n+\n+    protected final Set<String> availableInRegions = new HashSet<>();\n+    private String activeRegion = null;\n+\n+    /**\n+     * Last time when connection was marked as unavailable. Caller must use {@code isAvailable()} result to detect\n+     * is connection now available or not.\n+     */\n+    @Getter\n+    private Instant becomeUnavailableAt;\n+\n+    public SwitchConnectMonitor(SwitchMonitorCarrier carrier, Clock clock, SwitchId switchId) {\n+        this.carrier = carrier;\n+        this.clock = clock;\n+        this.switchId = switchId;\n+\n+        // connection os not active yet... so it is inactive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4MzYyMQ==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r465683621", "createdAt": "2020-08-05T12:16:52Z", "author": {"login": "surabujin"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/service/monitor/SwitchConnectMonitor.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.floodlightrouter.service.monitor;\n+\n+import org.openkilda.messaging.info.InfoData;\n+import org.openkilda.messaging.info.discovery.NetworkDumpSwitchData;\n+import org.openkilda.messaging.info.event.SwitchInfoData;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.wfm.topology.floodlightrouter.model.RegionMappingUpdate;\n+import org.openkilda.wfm.topology.floodlightrouter.service.SwitchMonitorCarrier;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public abstract class SwitchConnectMonitor {\n+    protected final SwitchMonitorCarrier carrier;\n+    private final Clock clock;\n+    protected final SwitchId switchId;\n+\n+    protected final Set<String> availableInRegions = new HashSet<>();\n+    private String activeRegion = null;\n+\n+    /**\n+     * Last time when connection was marked as unavailable. Caller must use {@code isAvailable()} result to detect\n+     * is connection now available or not.\n+     */\n+    @Getter\n+    private Instant becomeUnavailableAt;\n+\n+    public SwitchConnectMonitor(SwitchMonitorCarrier carrier, Clock clock, SwitchId switchId) {\n+        this.carrier = carrier;\n+        this.clock = clock;\n+        this.switchId = switchId;\n+\n+        // connection os not active yet... so it is inactive", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1NDAxOA=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDA0NTA1OnYy", "diffSide": "RIGHT", "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/service/monitor/SwitchConnectMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTozMzoxN1rOG62EjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTozMzoxN1rOG62EjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1NjQ5Mg==", "bodyText": "Rename here too.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464356492", "createdAt": "2020-08-03T11:33:17Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/service/monitor/SwitchConnectMonitor.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.floodlightrouter.service.monitor;\n+\n+import org.openkilda.messaging.info.InfoData;\n+import org.openkilda.messaging.info.discovery.NetworkDumpSwitchData;\n+import org.openkilda.messaging.info.event.SwitchInfoData;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.wfm.topology.floodlightrouter.model.RegionMappingUpdate;\n+import org.openkilda.wfm.topology.floodlightrouter.service.SwitchMonitorCarrier;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public abstract class SwitchConnectMonitor {\n+    protected final SwitchMonitorCarrier carrier;\n+    private final Clock clock;\n+    protected final SwitchId switchId;\n+\n+    protected final Set<String> availableInRegions = new HashSet<>();\n+    private String activeRegion = null;\n+\n+    /**\n+     * Last time when connection was marked as unavailable. Caller must use {@code isAvailable()} result to detect\n+     * is connection now available or not.\n+     */\n+    @Getter\n+    private Instant becomeUnavailableAt;\n+\n+    public SwitchConnectMonitor(SwitchMonitorCarrier carrier, Clock clock, SwitchId switchId) {\n+        this.carrier = carrier;\n+        this.clock = clock;\n+        this.switchId = switchId;\n+\n+        // connection os not active yet... so it is inactive\n+        becomeUnavailableAt = clock.instant();\n+    }\n+\n+    /**\n+     * Handle switch status notification.\n+     */\n+    public boolean handleSwitchStatusNotification(SwitchInfoData notification, String region) {\n+        ensureSwitchIdMatch(notification.getSwitchId());\n+\n+        if (isConnectNotification(notification)) {\n+            handleConnect(notification, region);\n+        } else if (isDisconnectNotification(notification)) {\n+            handleDisconnect(notification, region);\n+        } else {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Handle region offline notification.\n+     */\n+    public void handleRegionOfflineNotification(String region) {\n+        if (availableInRegions.remove(region)) {\n+            handleAvailableRegionsSetUpdate();\n+            if (availableInRegions.isEmpty()) {\n+                becomeUnavailableDueToRegionOffline();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Handle network dump response.\n+     */\n+    public void handleNetworkDumpResponse(NetworkDumpSwitchData switchData, String region) {\n+        ensureSwitchIdMatch(switchData.getSwitchId());\n+\n+        boolean availableNow = isAvailable();\n+        handleConnect(switchData, region);\n+        if (availableNow && Objects.equals(activeRegion, region)) {\n+            // proxy network dump for active region only\n+            carrier.switchStatusUpdateNotification(switchId, switchData);\n+        }\n+    }\n+\n+    public boolean isAvailable() {\n+        return ! availableInRegions.isEmpty();\n+    }\n+\n+    protected void handleConnect(InfoData notification, String region) {\n+        if (availableInRegions.add(region)) {\n+            if (availableInRegions.size() == 1) {\n+                becomeAvailable(notification, region);\n+            }\n+            handleAvailableRegionsSetUpdate();\n+        }\n+    }\n+\n+    protected void handleDisconnect(SwitchInfoData notification, String region) {\n+        if (availableInRegions.remove(region)) {\n+            handleAvailableRegionsSetUpdate();\n+            if (availableInRegions.isEmpty()) {\n+                becomeUnavailable(notification);\n+            }\n+        }\n+    }\n+\n+    protected void becomeAvailable(InfoData notification, String region) {\n+        activeRegion = region;\n+        log.info(\"Set {} active region for {} to \\\"{}\\\"\", formatConnectMode(), switchId, activeRegion);\n+\n+        carrier.regionUpdateNotification(new RegionMappingUpdate(switchId, activeRegion, isReadWriteMode()));\n+        carrier.switchStatusUpdateNotification(switchId, notification);\n+    }\n+\n+    protected void becomeUnavailable(InfoData notification) {\n+        becomeUnavailableAt = clock.instant();\n+        activeRegion = null;\n+        log.info(\"There is no any {} available regions for {} - switch is unavailable\", formatConnectMode(), switchId);\n+\n+        carrier.regionUpdateNotification(new RegionMappingUpdate(switchId, null, isReadWriteMode()));\n+        carrier.switchStatusUpdateNotification(switchId, notification);\n+    }\n+\n+    protected abstract void becomeUnavailableDueToRegionOffline();\n+\n+    protected void handleAvailableRegionsSetUpdate() {\n+        log.info(\n+                \"List of {} availability zones for {} has changed to: {}\",\n+                formatConnectMode(), switchId, formatAvailableRegionsSet());\n+        if (!availableInRegions.contains(activeRegion) && !availableInRegions.isEmpty()) {\n+            swapActiveRegion();\n+        }\n+    }\n+\n+    protected void ensureSwitchIdMatch(SwitchId affectedSwitchId) {\n+        if (!switchId.equals(affectedSwitchId)) {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Got status update notification for wrong switch %s, can process notification only for %s\",\n+                    affectedSwitchId, switchId));\n+        }\n+    }\n+\n+    protected abstract boolean isReadWriteMode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjA4ODk2OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/resources/floodlightkilda.properties.example", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0MjoyNlrOG-C6HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzozNToyMVrOG-r4XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjU0MQ==", "bodyText": "why all these are changed?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467712541", "createdAt": "2020-08-10T06:42:26Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/resources/floodlightkilda.properties.example", "diffHunk": "@@ -59,24 +63,31 @@ net.floodlightcontroller.topology.TopologyManager.pathMetric=latency\n net.floodlightcontroller.topology.TopologyManager.maxPathsToCompute=3\n #org.openkilda.floodlight.KildaCore.command-processor-workers-count = 4\n #org.openkilda.floodlight.KildaCore.command-processor-workers-limit = 32\n-#org.openkilda.floodlight.KildaCore.command-processor-deferred-requests-limit = 8\n+org.openkilda.floodlight.KildaCore.command-processor-deferred-requests-limit = 64\n #org.openkilda.floodlight.KildaCore.command-processor-idle-workers-keep-alive-seconds = 300\n-#org.openkilda.floodlight.KildaCore.flow-ping-magic-src-mac-address=00:26:E1:FF:FF:FE\n-org.openkilda.floodlight.KildaCore.server42-upd-port-offset=5000\n org.openkilda.floodlight.KafkaChannel.environment-naming-prefix=\n org.openkilda.floodlight.KafkaChannel.bootstrap-servers=kafka.pendev:9092\n #org.openkilda.floodlight.KafkaChannel.heart-beat-interval=1\n-#org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-executors=10\n-#org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-disco-executors=10\n+org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-executors=20", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4MzgzNw==", "bodyText": "Looks like I have grabbed all difference between existing '.example' file and produced from the template. Reverted.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468383837", "createdAt": "2020-08-11T07:35:21Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/resources/floodlightkilda.properties.example", "diffHunk": "@@ -59,24 +63,31 @@ net.floodlightcontroller.topology.TopologyManager.pathMetric=latency\n net.floodlightcontroller.topology.TopologyManager.maxPathsToCompute=3\n #org.openkilda.floodlight.KildaCore.command-processor-workers-count = 4\n #org.openkilda.floodlight.KildaCore.command-processor-workers-limit = 32\n-#org.openkilda.floodlight.KildaCore.command-processor-deferred-requests-limit = 8\n+org.openkilda.floodlight.KildaCore.command-processor-deferred-requests-limit = 64\n #org.openkilda.floodlight.KildaCore.command-processor-idle-workers-keep-alive-seconds = 300\n-#org.openkilda.floodlight.KildaCore.flow-ping-magic-src-mac-address=00:26:E1:FF:FF:FE\n-org.openkilda.floodlight.KildaCore.server42-upd-port-offset=5000\n org.openkilda.floodlight.KafkaChannel.environment-naming-prefix=\n org.openkilda.floodlight.KafkaChannel.bootstrap-servers=kafka.pendev:9092\n #org.openkilda.floodlight.KafkaChannel.heart-beat-interval=1\n-#org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-executors=10\n-#org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-disco-executors=10\n+org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-executors=20", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjU0MQ=="}, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjEwMDUzOnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/release/resources/topology.properties.example", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0Nzo0NVrOG-DAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MDoxN1rOG-sCJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDE4Mg==", "bodyText": "why is this commented, not removed?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467714182", "createdAt": "2020-08-10T06:47:45Z", "author": {"login": "timofei-durakov"}, "path": "src-java/base-topology/base-storm-topology/src/release/resources/topology.properties.example", "diffHunk": "@@ -102,6 +102,7 @@ floodlight.alive.timeout = 10\n floodlight.alive.interval = 2\n message.blacklist.timeout = 180\n floodlight.regions = 1\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NjM0Mg==", "bodyText": "See response for this option into template file.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468386342", "createdAt": "2020-08-11T07:40:17Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/release/resources/topology.properties.example", "diffHunk": "@@ -102,6 +102,7 @@ floodlight.alive.timeout = 10\n floodlight.alive.interval = 2\n message.blacklist.timeout = 180\n floodlight.regions = 1\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDE4Mg=="}, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjEwMTAxOnYy", "diffSide": "RIGHT", "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0ODowMVrOG-DA2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0NzozNFrOG-uXNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDI2NA==", "bodyText": "why is this commented, not removed?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467714264", "createdAt": "2020-08-10T06:48:01Z", "author": {"login": "timofei-durakov"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -96,6 +96,7 @@ floodlight.alive.timeout = {{ getv \"/kilda_floodlight_alive_timeout\" }}\n floodlight.alive.interval = {{ getv \"/kilda_floodlight_alive_interval\" }}\n message.blacklist.timeout = {{ getv \"/kilda_message_blacklist_timeout\" }}\n floodlight.regions = {{ getv \"/kilda_floodlight_regions\" }}\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NTc5Nw==", "bodyText": "Why it must be removed? This is a new option and its default value has been added into example config as a comment.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468385797", "createdAt": "2020-08-11T07:39:18Z", "author": {"login": "surabujin"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -96,6 +96,7 @@ floodlight.alive.timeout = {{ getv \"/kilda_floodlight_alive_timeout\" }}\n floodlight.alive.interval = {{ getv \"/kilda_floodlight_alive_interval\" }}\n message.blacklist.timeout = {{ getv \"/kilda_message_blacklist_timeout\" }}\n floodlight.regions = {{ getv \"/kilda_floodlight_regions\" }}\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDI2NA=="}, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4Njg3Mg==", "bodyText": "why you commented it by default then?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468386872", "createdAt": "2020-08-11T07:41:18Z", "author": {"login": "timofei-durakov"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -96,6 +96,7 @@ floodlight.alive.timeout = {{ getv \"/kilda_floodlight_alive_timeout\" }}\n floodlight.alive.interval = {{ getv \"/kilda_floodlight_alive_interval\" }}\n message.blacklist.timeout = {{ getv \"/kilda_message_blacklist_timeout\" }}\n floodlight.regions = {{ getv \"/kilda_floodlight_regions\" }}\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDI2NA=="}, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNDUwMg==", "bodyText": "em... How some \"user\" can know that such an option exists? The only other way to know - is to read code a lot of code...", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468424502", "createdAt": "2020-08-11T08:47:34Z", "author": {"login": "surabujin"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -96,6 +96,7 @@ floodlight.alive.timeout = {{ getv \"/kilda_floodlight_alive_timeout\" }}\n floodlight.alive.interval = {{ getv \"/kilda_floodlight_alive_interval\" }}\n message.blacklist.timeout = {{ getv \"/kilda_message_blacklist_timeout\" }}\n floodlight.regions = {{ getv \"/kilda_floodlight_regions\" }}\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDI2NA=="}, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjEwMjI4OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/BroadcastWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0ODo0NVrOG-DBnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo1MDoxNlrOG-sWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDQ2MQ==", "bodyText": "could you please add a java doc why this wrapper is needed, it will help", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467714461", "createdAt": "2020-08-10T06:48:45Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/BroadcastWrapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.command;\n+\n+import org.openkilda.model.SwitchId;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+import java.util.Set;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = false)\n+public class BroadcastWrapper extends CommandData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTUzNw==", "bodyText": "Added.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468391537", "createdAt": "2020-08-11T07:50:16Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/BroadcastWrapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.command;\n+\n+import org.openkilda.model.SwitchId;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+import java.util.Set;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = false)\n+public class BroadcastWrapper extends CommandData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDQ2MQ=="}, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjEwNjEwOnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/BroadcastWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo1MDoyM1rOG-DDxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo1NTo1OVrOG-sirQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNTAxMw==", "bodyText": "why not switches? scope is too abstract:-p", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467715013", "createdAt": "2020-08-10T06:50:23Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/BroadcastWrapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.command;\n+\n+import org.openkilda.model.SwitchId;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+import java.util.Set;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = false)\n+public class BroadcastWrapper extends CommandData {\n+    @JsonProperty(\"scope\")\n+    private Set<SwitchId> scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5NDY2OQ==", "bodyText": "\"switches\" is even more abstract here as for me. It doesn't bring any \"restriction\" of \"affected area\" meaning only the type of data stored in the set.\n\"switch\" is most used term in our system, it is the main focus in open-kilda, so this term is everywhere. If there is any possibility to not use the term \"switch\", I will prefer to not use it.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r468394669", "createdAt": "2020-08-11T07:55:59Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/BroadcastWrapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.command;\n+\n+import org.openkilda.model.SwitchId;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+import java.util.Set;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = false)\n+public class BroadcastWrapper extends CommandData {\n+    @JsonProperty(\"scope\")\n+    private Set<SwitchId> scope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNTAxMw=="}, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1772, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}