{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNDYxODg1", "number": 3905, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDoyMjo1MlrOFU_bPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDoyNjo1MVrOFU_ctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NTU1MDA2OnYy", "diffSide": "RIGHT", "path": "src-java/stats-topology/stats-storm-topology/src/main/java/org/openkilda/wfm/topology/stats/StatsTopology.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDoyMjo1MlrOIdOA5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDoyMjo1MlrOIdOA5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzUwOTIyMg==", "bodyText": "Does it make sense to introduce a dedicated \"build\" method instead of repeating \"getZkTopoName(), getConfig().getBlueGreenMode()\" each time?", "url": "https://github.com/telstra/open-kilda/pull/3905#discussion_r567509222", "createdAt": "2021-02-01T00:22:52Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/stats-topology/stats-storm-topology/src/main/java/org/openkilda/wfm/topology/stats/StatsTopology.java", "diffHunk": "@@ -139,23 +146,30 @@ public StormTopology createTopology() {\n         declareBolt(builder,\n                 new TickBolt(topologyConfig.getStatisticsRequestInterval()), TICK_BOLT.name());\n \n-        declareBolt(builder, new StatsRequesterBolt(persistenceManager), STATS_REQUESTER_BOLT.name())\n-                .shuffleGrouping(TICK_BOLT.name());\n+        declareBolt(builder, new StatsRequesterBolt(persistenceManager, ZooKeeperSpout.SPOUT_ID),\n+                STATS_REQUESTER_BOLT.name())\n+                .shuffleGrouping(TICK_BOLT.name())\n+                .allGrouping(ZooKeeperSpout.SPOUT_ID);\n \n-        declareBolt(builder, buildKafkaBolt(topologyConfig.getSpeakerTopic()), STATS_KILDA_SPEAKER_BOLT.name())\n+        declareBolt(builder, buildKafkaBolt(topologyConfig.getSpeakerTopic(), getZkTopoName(),\n+                getConfig().getBlueGreenMode()), STATS_KILDA_SPEAKER_BOLT.name())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0cfd321270798f842576a146f8ed5513c926fd1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NTU1MTM1OnYy", "diffSide": "RIGHT", "path": "src-java/stats-topology/stats-storm-topology/src/main/java/org/openkilda/wfm/topology/stats/bolts/SpeakerBolt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDoyNDoyNlrOIdOBpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDoyNDoyNlrOIdOBpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzUwOTQxMw==", "bodyText": "Why not write \"if (!active) { return; }\"? This will improve readability.", "url": "https://github.com/telstra/open-kilda/pull/3905#discussion_r567509413", "createdAt": "2021-02-01T00:24:26Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/stats-topology/stats-storm-topology/src/main/java/org/openkilda/wfm/topology/stats/bolts/SpeakerBolt.java", "diffHunk": "@@ -52,41 +56,48 @@\n     private static final String TABLE_STATS_STREAM = StatsStreamType.TABLE_STATS.toString();\n     private static final String PACKET_IN_OUT_STATS_STREAM = StatsStreamType.PACKET_IN_OUT_STATS.toString();\n \n+    public SpeakerBolt(String lifeCycleEventSourceComponent) {\n+        super(lifeCycleEventSourceComponent);\n+    }\n+\n     @Override\n     protected void handleInput(Tuple tuple) throws Exception {\n         logger.debug(\"Ingoing tuple: {}\", tuple);\n \n-        Message message = pullValue(tuple, MessageKafkaTranslator.FIELD_ID_PAYLOAD, Message.class);\n-        if (!(message instanceof InfoMessage)) {\n-            return;\n-        }\n-        InfoMessage infoMessage = (InfoMessage) message;\n-        final InfoData data = infoMessage.getData();\n-        if (data instanceof PortStatsData) {\n-            logger.debug(\"Port stats message: {}\", infoMessage);\n-            emitWithContext(PORT_STATS_STREAM, tuple, new Values(infoMessage));\n-        } else if (data instanceof MeterConfigStatsData) {\n-            logger.debug(\"Meter config stats message: {}\", infoMessage);\n-            emitWithContext(METER_CFG_STATS_STREAM, tuple, new Values(infoMessage));\n-        } else if (data instanceof MeterStatsData) {\n-            logger.debug(\"Meter stats message: {}\", infoMessage);\n-            emitWithContext(CACHE_STREAM, tuple, new Values(data));\n-        } else if (data instanceof FlowStatsData) {\n-            logger.debug(\"Flow stats message: {}\", infoMessage);\n-            ImmutablePair<FlowStatsData, FlowStatsData> splitData =\n-                    splitSystemRuleStatsAndFlowStats((FlowStatsData) data);\n-\n-            emitWithContext(SYSTEM_RULES_STATS_STREAM, tuple, new Values(splitData.getKey()));\n-            emitWithContext(CACHE_STREAM, tuple, new Values(splitData.getValue()));\n-        } else if (data instanceof SwitchTableStatsData) {\n-            logger.debug(\"Table stats message: {}\", infoMessage);\n-            emitWithContext(TABLE_STATS_STREAM, tuple, new Values(data));\n-        } else if (data instanceof GetPacketInOutStatsResponse) {\n-            logger.debug(\"Packet in out stats message: {}\", infoMessage);\n-            emitWithContext(PACKET_IN_OUT_STATS_STREAM, tuple, new Values(data));\n-        } else {\n-            //FIXME (ncherevko): we might receive few unexpected messages here, need to fix it and uncomment below line\n-            //unhandledInput(tuple);\n+        if (active) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0cfd321270798f842576a146f8ed5513c926fd1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NTU1MzgxOnYy", "diffSide": "RIGHT", "path": "src-java/stats-topology/stats-storm-topology/src/test/java/org/openkilda/wfm/topology/stats/StatsTopologyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDoyNjo1MVrOIdOC6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDoyNjo1MVrOIdOC6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzUwOTczOA==", "bodyText": "Can such logic of building ZK node names be shared and reusable?", "url": "https://github.com/telstra/open-kilda/pull/3905#discussion_r567509738", "createdAt": "2021-02-01T00:26:51Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/stats-topology/stats-storm-topology/src/test/java/org/openkilda/wfm/topology/stats/StatsTopologyTest.java", "diffHunk": "@@ -163,6 +172,16 @@ public static void setupOnce() throws Exception {\n         sleep(TOPOLOGY_START_TIMEOUT);\n     }\n \n+    private static void setStartSignal() throws IOException, KeeperException, InterruptedException {\n+        ZooKeeper zooKeeper = new ZooKeeper(\"localhost\", 3000, event -> { });\n+\n+        setNode(zooKeeper, \"/kilda\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0cfd321270798f842576a146f8ed5513c926fd1"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2354, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}