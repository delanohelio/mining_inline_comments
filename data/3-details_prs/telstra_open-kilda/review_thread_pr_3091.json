{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NjM0OTM4", "number": 3091, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToxODo1N1rODXdK_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToxODo1N1rODXdK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTIxNzg5OnYy", "diffSide": "RIGHT", "path": "services/src/functional-tests/src/main/groovy/org/openkilda/functionaltests/extension/fixture/CleanupVerifierExtension.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToxODo1N1rOFcwobA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowMzozNFrOFdVOWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwMTIyOA==", "bodyText": "I guess we should check that meter is supported by a switch (.description.contains(\"OF_12\") )", "url": "https://github.com/telstra/open-kilda/pull/3091#discussion_r365701228", "createdAt": "2020-01-13T09:18:57Z", "author": {"login": "andriidovhan"}, "path": "services/src/functional-tests/src/main/groovy/org/openkilda/functionaltests/extension/fixture/CleanupVerifierExtension.groovy", "diffHunk": "@@ -32,23 +33,25 @@ class CleanupVerifierExtension extends ContextAwareGlobalExtension {\n         if (!enabled) {\n             return\n         }\n-        spec.addListener(new AbstractRunListener() {\n-            @Override\n-            void afterSpec(SpecInfo runningSpec) {\n-                log.info(\"Running cleanup verifier for '$runningSpec.name'\")\n-                assert northbound.getAllFlows().empty\n-                northbound.getAllSwitches().each {\n-                    def validation = northbound.validateSwitch(it.switchId)\n-                    validation.verifyRuleSectionsAreEmpty()\n-                    validation.verifyMeterSectionsAreEmpty()\n+        spec.features.each {\n+            it.addInterceptor(new IMethodInterceptor() {\n+                @Override\n+                void intercept(IMethodInvocation invocation) throws Throwable {\n+                    invocation.proceed()\n+                    log.info(\"Running cleanup verifier for '$invocation.feature.name'\")\n+                    assert northbound.getAllFlows().empty\n+                    northbound.getAllSwitches().each {\n+                        def validation = northbound.validateSwitch(it.switchId)\n+                        validation.verifyRuleSectionsAreEmpty()\n+                        validation.verifyMeterSectionsAreEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ddb7e9480248bba870074d8cbbddae5285354f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMDc2Mw==", "bodyText": "verifyMeterSectionsAreEmpty inside verifies that the 'meters' section is present in the validation response. So it's already safe", "url": "https://github.com/telstra/open-kilda/pull/3091#discussion_r366300763", "createdAt": "2020-01-14T12:03:34Z", "author": {"login": "rtretyak"}, "path": "services/src/functional-tests/src/main/groovy/org/openkilda/functionaltests/extension/fixture/CleanupVerifierExtension.groovy", "diffHunk": "@@ -32,23 +33,25 @@ class CleanupVerifierExtension extends ContextAwareGlobalExtension {\n         if (!enabled) {\n             return\n         }\n-        spec.addListener(new AbstractRunListener() {\n-            @Override\n-            void afterSpec(SpecInfo runningSpec) {\n-                log.info(\"Running cleanup verifier for '$runningSpec.name'\")\n-                assert northbound.getAllFlows().empty\n-                northbound.getAllSwitches().each {\n-                    def validation = northbound.validateSwitch(it.switchId)\n-                    validation.verifyRuleSectionsAreEmpty()\n-                    validation.verifyMeterSectionsAreEmpty()\n+        spec.features.each {\n+            it.addInterceptor(new IMethodInterceptor() {\n+                @Override\n+                void intercept(IMethodInvocation invocation) throws Throwable {\n+                    invocation.proceed()\n+                    log.info(\"Running cleanup verifier for '$invocation.feature.name'\")\n+                    assert northbound.getAllFlows().empty\n+                    northbound.getAllSwitches().each {\n+                        def validation = northbound.validateSwitch(it.switchId)\n+                        validation.verifyRuleSectionsAreEmpty()\n+                        validation.verifyMeterSectionsAreEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwMTIyOA=="}, "originalCommit": {"oid": "14ddb7e9480248bba870074d8cbbddae5285354f"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2160, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}