{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NTc2MDgx", "number": 3460, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo0MTo1MlrOEAxenQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo0MTo1MlrOEAxenQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjQ2MTA5OnYy", "diffSide": "RIGHT", "path": "docs/design/solutions/data-storage-v2/data-storage-v2-options.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo0MTo1MlrOGcQkDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo0MTo1MlrOGcQkDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NDY4Nw==", "bodyText": "no pros at all?:-p", "url": "https://github.com/telstra/open-kilda/pull/3460#discussion_r432284687", "createdAt": "2020-05-29T06:41:52Z", "author": {"login": "timofei-durakov"}, "path": "docs/design/solutions/data-storage-v2/data-storage-v2-options.md", "diffHunk": "@@ -0,0 +1,141 @@\n+# Kilda Data storage V2\n+\n+## Overview\n+This doc describes the proposed solutions for migration OpenKilda from Neo4j to another data storage(s).\n+\n+## Goals\n+The goal is to implement a data storage solution that satisfies the system requirements.\n+\n+Currently, Kilda uses [Neo4j](https://neo4j.com/) as a persistent storage for its [data model](../domain-model/domain-model.md),\n+and [Neo4j-OGM](https://github.com/neo4j/neo4j-ogm) as the mapping library in the persistence layer.\n+\n+Since the persistence layer was introduced, we faced multiple issues related to it: \n+Neo4j-OGM performance on concurrent updates (https://github.com/telstra/open-kilda/pull/2747),\n+missed changes in persistent objects (https://github.com/telstra/open-kilda/issues/3064), \n+improper handling of data types and converters (https://github.com/telstra/open-kilda/issues/3166).\n+\n+Considering the above mentioned along with a lack of high-availability configuration and online backups in the Neo4j community edition, \n+it was decided that Neo4j along with Neo4j-OGM doesn't correspond to the current and emerging system requirements -\n+https://github.com/telstra/open-kilda/issues/940. \n+\n+## Requirements for Data storage\n+Kilda architecture among other requirements to the data storage, expects flexibility in choice of the storage options:\n+from a single instance deployed on a developer's workstation, up to scalable and distributed, which provides high-availability.\n+\n+A dedicated storage for specific data may have own requirements, but all of them share the following:\n+- Durable writes with strong or eventual consistency.\n+- Support configuration with high availability and failover.\n+- Support online or incremental backups.\n+- Minimal overhead introduced by the persistence layer on CPU and memory resources.\n+\n+## Data groups\n+The data model consists of elements which can be split into several groups by their purpose,\n+specific use cases and requirements to storage:\n+- Network topology: switches and links (ISLs)\n+- Flows (each one contains multiple Flow paths and corresponding Path segments)\n+- History records (flow events, port status changes, etc)\n+- Resources pools (flow encapsulation, meter, etc) \n+\n+## The solutions\n+Each data group has own and specific use cases, so we evaluate it separately from others:\n+\n+#### Network topology, flow data\n+_Use cases:_\n+- Transactional CRUD operations on entities that represent the network.\n+- Find a path between nodes (via PCE).\n+- Find related entities (flows by an ISL or by a switch)\n+- Visualize as a graph model on GUI / web application.\n+- Analyze connectivity in the network, and identify required backup links\n+- Execute custom traversals over the network structure for ad-hoc investigations.\n+\n+_The solution:_ \n+- The data is stored in a graph database ([OrientDB](https://orientdb.com/) or [JanusGraph](https://janusgraph.org/)) \n+which has a complete implementation of [Tinkerpop Graph API](http://tinkerpop.apache.org/docs/3.4.6/reference/#graph).\n+- The persistence layer utilizes a one of existing OGM for data mapping: [Tinkerpop](https://tinkerpop.apache.org/) / [Ferma](http://syncleus.com/Ferma/).\n+- PCE utilizes graph traversal on the database side.\n+\n+_Known issues / problems:_\n+- The planned 2-step migration (via Neo4j + Tinkerpop) can't be implemented due to [a fundamental performance issue \n+in neo4j-gremlin-bolt](#neo4j).\n+- No exising options for schema versioning: [Liquigraph](https://www.liquigraph.org/) supports Neo4j only.\n+\n+_Alternative solutions:_\n+- Use a graph database which supports [Gremlin](https://tinkerpop.apache.org/gremlin.html) traversal language,\n+but doesn't have a complete implementation of Tinkerpop Graph API: [Amazon Neptune](https://aws.amazon.com/neptune/), \n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/). This requires custom data mapping to be coded in the persistence layer.\n+- Use a relational database. In this case, persistent data kept in a way that differs from how the business sees it. This may complicate future integrations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426a4e87b43af50f0c7b99b6164c196e7be56dd0"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1971, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}