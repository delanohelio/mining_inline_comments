{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDg5MjY0", "number": 3331, "title": "OF metadata bit manipulation toolset", "bodyText": "", "createdAt": "2020-03-25T09:55:54Z", "url": "https://github.com/telstra/open-kilda/pull/3331", "merged": true, "mergeCommit": {"oid": "90d100bebd3f2978f0a0690d4327d66563a4050b"}, "closed": true, "closedAt": "2020-04-23T08:06:51Z", "author": {"login": "surabujin"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRcjF6AFqTM4MTk4NzA0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaKtD9gFqTM5ODM1NDkzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTg3MDQ3", "url": "https://github.com/telstra/open-kilda/pull/3331#pullrequestreview-381987047", "createdAt": "2020-03-26T13:05:44Z", "commit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowNTo0NVrOF8F5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1MDo0OVrOF8H1Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTU1OQ==", "bodyText": "why -1? you are trying to set a boolean field (with 1 bit). I guess it should be 1 here. It's strange to see here FFFFFFFFFFFFFF", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398555559", "createdAt": "2020-03-26T13:05:45Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());\n+\n+        U64 mask = setField(base.getMask(), -1, schema.getOuterVlanField());\n+        mask = setField(mask, -1, schema.getOuterVlanPresenceFlag());\n+\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private MetadataMatch setBooleanField(MetadataMatch base, boolean flag, BitField field) {\n+        U64 value = setField(base.getValue(), flag ? -1 : 0, field);\n+        U64 mask = setField(base.getMask(), -1, field);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEyOA==", "bodyText": "magic numbers is a bad practice. Please move -1 to constants like FULL_MASK = FFFF_FFFF_FFFF_FFFF or something else", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398556128", "createdAt": "2020-03-26T13:06:38Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NzM3NQ==", "bodyText": "Where is it used? or it will be used in next patch?", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398557375", "createdAt": "2020-03-26T13:08:37Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());\n+\n+        U64 mask = setField(base.getMask(), -1, schema.getOuterVlanField());\n+        mask = setField(mask, -1, schema.getOuterVlanPresenceFlag());\n+\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private MetadataMatch setBooleanField(MetadataMatch base, boolean flag, BitField field) {\n+        U64 value = setField(base.getValue(), flag ? -1 : 0, field);\n+        U64 mask = setField(base.getMask(), -1, field);\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private static U64 setField(U64 target, long value, BitField field) {\n+        U64 result = target.and(U64.of(~field.getMask()));\n+        value <<= field.getOffset();\n+        return result.or(U64.of(value & field.getMask()));\n+    }\n+\n+    @Value\n+    public static class MetadataMatch {\n+        protected static final MetadataMatch ZERO = new MetadataMatch(U64.ZERO, U64.ZERO);\n+\n+        private final U64 value;\n+        private final U64 mask;\n+\n+        protected MetadataMatch merge(U64 extendValue, U64 extendMask) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE4MA==", "bodyText": "Why don't we just use 0x0000_0000_0000_0008L as a flag?\nThis will save us from using HALF_SIZE_METADATA feature.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398559180", "createdAt": "2020-03-26T13:11:23Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.bitops.BitField;\n+\n+public class MetadataSchema {\n+    public static final MetadataSchema INSTANCE = new MetadataSchema();\n+\n+    private static final BitField LLDP_MARKER_FLAG         = new BitField(0x0000_0000_0000_0001L);\n+    private static final BitField ARP_MARKER_FLAG          = new BitField(0x0000_0000_0000_0004L);\n+\n+    private static final BitField ONE_SWITCH_FLOW_FLAG     = new BitField(0x0000_0000_0000_0002L);\n+\n+    private static final BitField OUTER_VLAN_FIELD         = new BitField(0x0000_0000_0000_fff0L);\n+    private static final BitField OUTER_VLAN_PRESENCE_FLAG = new BitField(0x1000_0000_0000_0000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NDg0Ng==", "bodyText": "Did you checked that this limitation is actual only for WB switches? I thought that it is actual for all noviflow switches.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398584846", "createdAt": "2020-03-26T13:48:01Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        if (is100GbHw(sw)) {\n+            return Optional.of(SwitchFeature.HALF_SIZE_METADATA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NzE3MA==", "bodyText": "this class contains 2 other tests with WB switches (line 113, line 162). But those tests are green. seems method is100GbHw works wrong", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398587170", "createdAt": "2020-03-26T13:50:49Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java", "diffHunk": "@@ -139,7 +140,7 @@ public void eswitch500Software() {\n         discoveryCheck(makeSwitchMock(\"NoviFlow Inc\", \"NW500.0.1\", \"WB5164-E\", OFVersion.OF_13, 2),\n                 ImmutableSet.of(\n                         GROUP_PACKET_OUT_CONTROLLER, BFD, METERS, RESET_COUNTS_FLAG, INACCURATE_METER, MATCH_UDP_PORT,\n-                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN));\n+                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN, HALF_SIZE_METADATA));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9", "committedDate": "2020-03-25T09:48:29Z", "message": "OF metadata bit manipulation toolset"}, "afterCommit": {"oid": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "committedDate": "2020-04-01T08:40:52Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDY1NjY2", "url": "https://github.com/telstra/open-kilda/pull/3331#pullrequestreview-385465666", "createdAt": "2020-04-01T10:41:01Z", "commit": {"oid": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NDo1M1rOF-7A2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1MTozNFrOF-7OKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjkwNQ==", "bodyText": "Looks like isNoviSwitch works incorrect as well (as you had to add E switch check in HALF_SIZE_METADATA feature detector). But the probkem is not related to this patch. Will fix in separate PR.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401522905", "createdAt": "2020-04-01T10:44:53Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java", "diffHunk": "@@ -139,7 +140,7 @@ public void eswitch500Software() {\n         discoveryCheck(makeSwitchMock(\"NoviFlow Inc\", \"NW500.0.1\", \"WB5164-E\", OFVersion.OF_13, 2),\n                 ImmutableSet.of(\n                         GROUP_PACKET_OUT_CONTROLLER, BFD, METERS, RESET_COUNTS_FLAG, INACCURATE_METER, MATCH_UDP_PORT,\n-                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN));\n+                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN, HALF_SIZE_METADATA));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NzE3MA=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjMxMg==", "bodyText": "as I understand it's useless now", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401526312", "createdAt": "2020-04-01T10:51:34Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadataSchema.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+/**\n+ * Will raise error for fields not available in half-sized metadata.\n+ */\n+public class HalfSizeMetadataSchema extends MetadataSchema {\n+    public static final HalfSizeMetadataSchema INSTANCE = new HalfSizeMetadataSchema();\n+\n+    protected HalfSizeMetadataSchema() {\n+        super();\n+        // hide public constructor\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "committedDate": "2020-04-01T08:40:52Z", "message": "OF metadata bit manipulation toolset"}, "afterCommit": {"oid": "66f464f3ba04afe0f9f2c6a90e85620716cfa5a1", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/66f464f3ba04afe0f9f2c6a90e85620716cfa5a1", "committedDate": "2020-04-01T15:57:27Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66f464f3ba04afe0f9f2c6a90e85620716cfa5a1", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/66f464f3ba04afe0f9f2c6a90e85620716cfa5a1", "committedDate": "2020-04-01T15:57:27Z", "message": "OF metadata bit manipulation toolset"}, "afterCommit": {"oid": "fd33e42a15acd6fef85dad83794ca1967e9c2d89", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/fd33e42a15acd6fef85dad83794ca1967e9c2d89", "committedDate": "2020-04-02T13:14:48Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd33e42a15acd6fef85dad83794ca1967e9c2d89", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/fd33e42a15acd6fef85dad83794ca1967e9c2d89", "committedDate": "2020-04-02T13:14:48Z", "message": "OF metadata bit manipulation toolset"}, "afterCommit": {"oid": "610f81b76079e2043abb3deb98d47b16612254d9", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/610f81b76079e2043abb3deb98d47b16612254d9", "committedDate": "2020-04-02T17:36:51Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjQ5NTA1", "url": "https://github.com/telstra/open-kilda/pull/3331#pullrequestreview-387249505", "createdAt": "2020-04-03T13:22:09Z", "commit": {"oid": "610f81b76079e2043abb3deb98d47b16612254d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "610f81b76079e2043abb3deb98d47b16612254d9", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/610f81b76079e2043abb3deb98d47b16612254d9", "committedDate": "2020-04-02T17:36:51Z", "message": "OF metadata bit manipulation toolset"}, "afterCommit": {"oid": "3d2aa1b6850f5939a09445469afe9a08f417f637", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/3d2aa1b6850f5939a09445469afe9a08f417f637", "committedDate": "2020-04-06T14:35:41Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d2aa1b6850f5939a09445469afe9a08f417f637", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/3d2aa1b6850f5939a09445469afe9a08f417f637", "committedDate": "2020-04-06T14:35:41Z", "message": "OF metadata bit manipulation toolset"}, "afterCommit": {"oid": "4b9f38e60d6f6304605f362cb13799dbf25a41cf", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/4b9f38e60d6f6304605f362cb13799dbf25a41cf", "committedDate": "2020-04-13T10:13:08Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b9f38e60d6f6304605f362cb13799dbf25a41cf", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/4b9f38e60d6f6304605f362cb13799dbf25a41cf", "committedDate": "2020-04-13T10:13:08Z", "message": "OF metadata bit manipulation toolset"}, "afterCommit": {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/c71eae855234a2b16a789613e3e8c549875e85cf", "committedDate": "2020-04-21T17:09:00Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDYxMDYz", "url": "https://github.com/telstra/open-kilda/pull/3331#pullrequestreview-398061063", "createdAt": "2020-04-22T10:37:28Z", "commit": {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDozNzoyOFrOGJviNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0Nzo1MlrOGJv7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2OTE3Mw==", "bodyText": "why is it still E_SWITCH_MANUFACTURER_DESCRIPTION match first? isNoviSwitch by itself should be enough", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r412869173", "createdAt": "2020-04-22T10:37:28Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        boolean match = E_SWITCH_MANUFACTURER_DESCRIPTION.equalsIgnoreCase(getManufacturer(sw));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NTYzNA==", "bodyText": "Javadoc required", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r412875634", "createdAt": "2020-04-22T10:47:52Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops;\n+\n+import org.openkilda.model.Cookie;\n+\n+import lombok.Getter;\n+\n+/**\n+ * Represent bit-mask and offset of continuous(without 0 in the middle) bit-field.\n+ */\n+@Getter\n+public class BitField {\n+    private final long mask;\n+    private final int offset;\n+\n+    public BitField(long mask) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "committedDate": "2020-04-22T11:23:58Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/c71eae855234a2b16a789613e3e8c549875e85cf", "committedDate": "2020-04-21T17:09:00Z", "message": "OF metadata bit manipulation toolset"}, "afterCommit": {"oid": "08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "committedDate": "2020-04-22T11:23:58Z", "message": "OF metadata bit manipulation toolset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTA1NDA1", "url": "https://github.com/telstra/open-kilda/pull/3331#pullrequestreview-398105405", "createdAt": "2020-04-22T11:43:05Z", "commit": {"oid": "08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MzU0OTM0", "url": "https://github.com/telstra/open-kilda/pull/3331#pullrequestreview-398354934", "createdAt": "2020-04-22T16:16:23Z", "commit": {"oid": "08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3676, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}