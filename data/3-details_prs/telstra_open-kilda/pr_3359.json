{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTExNjQx", "number": 3359, "title": "add test for targetPathComputationStrategy and partialUpdate", "bodyText": "", "createdAt": "2020-04-02T11:12:51Z", "url": "https://github.com/telstra/open-kilda/pull/3359", "merged": true, "mergeCommit": {"oid": "51d0df27ee267730d8f47c90672d4f78e4361620"}, "closed": true, "closedAt": "2020-04-13T11:09:42Z", "author": {"login": "andriidovhan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU60JOgFqTM4ODA0ODUzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXMG8RgFqTM5MjA2NTYyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDQ4NTMy", "url": "https://github.com/telstra/open-kilda/pull/3359#pullrequestreview-388048532", "createdAt": "2020-04-06T08:49:06Z", "commit": {"oid": "a4283a3e0623a87da03fac8de25825f4b27877e2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo0OTowN1rOGBNuig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo1NDozNlrOGBN73g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNjY2Ng==", "bodyText": "already tested above", "url": "https://github.com/telstra/open-kilda/pull/3359#discussion_r403926666", "createdAt": "2020-04-06T08:49:07Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/PartialUpdateSpec.groovy", "diffHunk": "@@ -48,6 +49,18 @@ class PartialUpdateSpec extends HealthCheckSpecification {\n                 [\n                         field   : \"priority\",\n                         newValue: 654\n+                ],\n+                [\n+                        field   : \"maxLatency\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4283a3e0623a87da03fac8de25825f4b27877e2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNzc4NA==", "bodyText": "end of test1\nstart of test2\nWe should not overuse long scenarios. Moreover in this case scenarios a pretty much isolated and don't depend on each other, don't see any benefits in keeping them in 1 test", "url": "https://github.com/telstra/open-kilda/pull/3359#discussion_r403927784", "createdAt": "2020-04-06T08:50:59Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/network/PathComputationSpec.groovy", "diffHunk": "@@ -102,4 +107,74 @@ class PathComputationSpec extends HealthCheckSpecification {\n         originalLatencies && originalLatencies.each { isl, latency -> database.updateIslLatency(isl, latency) }\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n+\n+    @Tidy\n+    def \"Target flow path computation strategy is not applied immediately in case flow was updated partially\"() {\n+        given: \"Switch pair with two paths at least\"\n+        def swPair = topologyHelper.switchPairs.find { it.paths.size() >= 2 }\n+\n+        and: \"A flow with cost strategy\"\n+        def latencyStrategy = PathComputationStrategy.LATENCY.toString().toLowerCase()\n+        def costStrategy = PathComputationStrategy.COST.toString().toLowerCase()\n+        def flow = flowHelperV2.randomFlow(swPair).tap { it.pathComputationStrategy = costStrategy }\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Update path computation strategy(cost -> latency) via partialUpdate\"\n+        northbound.partialUpdate(flow.flowId, new FlowPatchDto().tap {\n+            it.targetPathComputationStrategy = latencyStrategy\n+        })\n+        Wrappers.wait(WAIT_OFFSET / 2) { assert northbound.getFlowStatus(flow.flowId).status == FlowState.UP }\n+\n+        then: \"Path computation strategy is not changed\"\n+        with(northbound.getFlow(flow.flowId)) {\n+            pathComputationStrategy == costStrategy\n+            targetPathComputationStrategy == latencyStrategy\n+        }\n+\n+        and: \"Flow is valid\"\n+        northbound.validateFlow(flow.flowId).each { direction -> assert direction.asExpected }\n+\n+        when: \"Sync the flow\"\n+        northbound.synchronizeFlow(flow.flowId)\n+\n+        then: \"Path computation strategy is updated and targetPathComputationStrategy is deleted\"\n+        with(northbound.getFlow(flow.flowId)) {\n+            pathComputationStrategy == latencyStrategy\n+            !targetPathComputationStrategy\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4283a3e0623a87da03fac8de25825f4b27877e2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMDA3OA==", "bodyText": "What if latency and cost paths are the same? Will the update actually happen?", "url": "https://github.com/telstra/open-kilda/pull/3359#discussion_r403930078", "createdAt": "2020-04-06T08:54:36Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/network/PathComputationSpec.groovy", "diffHunk": "@@ -102,4 +107,74 @@ class PathComputationSpec extends HealthCheckSpecification {\n         originalLatencies && originalLatencies.each { isl, latency -> database.updateIslLatency(isl, latency) }\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n+\n+    @Tidy\n+    def \"Target flow path computation strategy is not applied immediately in case flow was updated partially\"() {\n+        given: \"Switch pair with two paths at least\"\n+        def swPair = topologyHelper.switchPairs.find { it.paths.size() >= 2 }\n+\n+        and: \"A flow with cost strategy\"\n+        def latencyStrategy = PathComputationStrategy.LATENCY.toString().toLowerCase()\n+        def costStrategy = PathComputationStrategy.COST.toString().toLowerCase()\n+        def flow = flowHelperV2.randomFlow(swPair).tap { it.pathComputationStrategy = costStrategy }\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Update path computation strategy(cost -> latency) via partialUpdate\"\n+        northbound.partialUpdate(flow.flowId, new FlowPatchDto().tap {\n+            it.targetPathComputationStrategy = latencyStrategy\n+        })\n+        Wrappers.wait(WAIT_OFFSET / 2) { assert northbound.getFlowStatus(flow.flowId).status == FlowState.UP }\n+\n+        then: \"Path computation strategy is not changed\"\n+        with(northbound.getFlow(flow.flowId)) {\n+            pathComputationStrategy == costStrategy\n+            targetPathComputationStrategy == latencyStrategy\n+        }\n+\n+        and: \"Flow is valid\"\n+        northbound.validateFlow(flow.flowId).each { direction -> assert direction.asExpected }\n+\n+        when: \"Sync the flow\"\n+        northbound.synchronizeFlow(flow.flowId)\n+\n+        then: \"Path computation strategy is updated and targetPathComputationStrategy is deleted\"\n+        with(northbound.getFlow(flow.flowId)) {\n+            pathComputationStrategy == latencyStrategy\n+            !targetPathComputationStrategy\n+        }\n+\n+        when: \"Update path computation strategy(latency -> cost) via partialUpdate\"\n+        northbound.partialUpdate(flow.flowId, new FlowPatchDto().tap {\n+            it.targetPathComputationStrategy = costStrategy\n+        })\n+        Wrappers.wait(WAIT_OFFSET / 2) { assert northbound.getFlowStatus(flow.flowId).status == FlowState.UP }\n+\n+        and: \"Reroute the flow\"\n+        northboundV2.rerouteFlow(flow.flowId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4283a3e0623a87da03fac8de25825f4b27877e2"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4283a3e0623a87da03fac8de25825f4b27877e2", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/a4283a3e0623a87da03fac8de25825f4b27877e2", "committedDate": "2020-04-02T11:08:26Z", "message": "add test for targetPathComputationStrategy"}, "afterCommit": {"oid": "8f3b33a6b18bc5213468f4fc0c2fdac68e37269f", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/8f3b33a6b18bc5213468f4fc0c2fdac68e37269f", "committedDate": "2020-04-06T10:05:28Z", "message": "add test for targetPathComputationStrategy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f3b33a6b18bc5213468f4fc0c2fdac68e37269f", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/8f3b33a6b18bc5213468f4fc0c2fdac68e37269f", "committedDate": "2020-04-06T10:05:28Z", "message": "add test for targetPathComputationStrategy"}, "afterCommit": {"oid": "f576f45abd43a680c3155124e7c17a1de7a47069", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/f576f45abd43a680c3155124e7c17a1de7a47069", "committedDate": "2020-04-06T10:57:50Z", "message": "add test for targetPathComputationStrategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTM1ODM0", "url": "https://github.com/telstra/open-kilda/pull/3359#pullrequestreview-389935834", "createdAt": "2020-04-08T12:42:34Z", "commit": {"oid": "f576f45abd43a680c3155124e7c17a1de7a47069"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0MjozNFrOGCtY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0MjozNFrOGCtY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NDAwOQ==", "bodyText": "Partial update of targetPathComputationStrategy should not cause a flow status change. Can you recheck this place please? I think these waits can be removed", "url": "https://github.com/telstra/open-kilda/pull/3359#discussion_r405494009", "createdAt": "2020-04-08T12:42:34Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/network/PathComputationSpec.groovy", "diffHunk": "@@ -102,4 +107,88 @@ class PathComputationSpec extends HealthCheckSpecification {\n         originalLatencies && originalLatencies.each { isl, latency -> database.updateIslLatency(isl, latency) }\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n+\n+    @Tidy\n+    def \"Target flow path computation strategy is not applied immediately in case flow was updated partially\"() {\n+        given: \"Switch pair with two paths at least\"\n+        def swPair = topologyHelper.switchPairs.find { it.paths.size() >= 2 }\n+\n+        and: \"A flow with cost strategy\"\n+        def latencyStrategy = PathComputationStrategy.LATENCY.toString().toLowerCase()\n+        def costStrategy = PathComputationStrategy.COST.toString().toLowerCase()\n+        def flow = flowHelperV2.randomFlow(swPair).tap { it.pathComputationStrategy = costStrategy }\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Update path computation strategy(cost -> latency) via partialUpdate\"\n+        northbound.partialUpdate(flow.flowId, new FlowPatchDto().tap {\n+            it.targetPathComputationStrategy = latencyStrategy\n+        })\n+        Wrappers.wait(WAIT_OFFSET / 2) { assert northbound.getFlowStatus(flow.flowId).status == FlowState.UP }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f576f45abd43a680c3155124e7c17a1de7a47069"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f576f45abd43a680c3155124e7c17a1de7a47069", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/f576f45abd43a680c3155124e7c17a1de7a47069", "committedDate": "2020-04-06T10:57:50Z", "message": "add test for targetPathComputationStrategy"}, "afterCommit": {"oid": "427a32d5031d7ca4abb025e2a2077fc05013750c", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/427a32d5031d7ca4abb025e2a2077fc05013750c", "committedDate": "2020-04-10T12:01:27Z", "message": "add test for targetPathComputationStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d10891f1cd954e48c23c1546862f9765bc558ad8", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/d10891f1cd954e48c23c1546862f9765bc558ad8", "committedDate": "2020-04-10T12:02:56Z", "message": "add test for targetPathComputationStrategy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "427a32d5031d7ca4abb025e2a2077fc05013750c", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/427a32d5031d7ca4abb025e2a2077fc05013750c", "committedDate": "2020-04-10T12:01:27Z", "message": "add test for targetPathComputationStrategy"}, "afterCommit": {"oid": "d10891f1cd954e48c23c1546862f9765bc558ad8", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/d10891f1cd954e48c23c1546862f9765bc558ad8", "committedDate": "2020-04-10T12:02:56Z", "message": "add test for targetPathComputationStrategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDY1NjI3", "url": "https://github.com/telstra/open-kilda/pull/3359#pullrequestreview-392065627", "createdAt": "2020-04-13T10:12:47Z", "commit": {"oid": "d10891f1cd954e48c23c1546862f9765bc558ad8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3610, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}