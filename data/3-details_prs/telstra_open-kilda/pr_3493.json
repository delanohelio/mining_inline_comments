{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzM3Mjk4", "number": 3493, "title": "Northbound V1 requests redirected to FlowHSTopology", "bodyText": "Related with: #3291\nMERGE NOTE: DO NOT FORGET TO CHANGE BASE BEFORE MERGING", "createdAt": "2020-05-21T12:56:17Z", "url": "https://github.com/telstra/open-kilda/pull/3493", "merged": true, "mergeCommit": {"oid": "105ff7d166a3692ca073f2c31dbc4430006c90ca"}, "closed": true, "closedAt": "2020-05-25T12:56:25Z", "author": {"login": "dpoltavets"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjr_ARAFqTQxNjY2ODg2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABckr1_pgFqTQxNzUzMTY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjY4ODYx", "url": "https://github.com/telstra/open-kilda/pull/3493#pullrequestreview-416668861", "createdAt": "2020-05-22T06:08:10Z", "commit": {"oid": "0c4f15c32d06e419ff5ea3250ba8d7155df642e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/2baceb065a956949172d61f26515fb46cf0d6191", "committedDate": "2020-05-22T07:42:44Z", "message": "Northbound V1 requests redirected to FlowHSTopology"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c4f15c32d06e419ff5ea3250ba8d7155df642e5", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/0c4f15c32d06e419ff5ea3250ba8d7155df642e5", "committedDate": "2020-05-21T12:50:58Z", "message": "Northbound V1 requests redirected to FlowHSTopology"}, "afterCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/2baceb065a956949172d61f26515fb46cf0d6191", "committedDate": "2020-05-22T07:42:44Z", "message": "Northbound V1 requests redirected to FlowHSTopology"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzIxMjg5", "url": "https://github.com/telstra/open-kilda/pull/3493#pullrequestreview-416721289", "createdAt": "2020-05-22T08:01:16Z", "commit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODQzMTkz", "url": "https://github.com/telstra/open-kilda/pull/3493#pullrequestreview-416843193", "createdAt": "2020-05-22T11:34:34Z", "commit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTozNDozNVrOGZUAJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjowODowMVrOGZU0Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTMwMw==", "bodyText": "(nip) Why not include whole request payload (same as flow create do)?", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429195303", "createdAt": "2020-05-22T11:34:35Z", "author": {"login": "surabujin"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -244,22 +233,24 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public CompletableFuture<FlowResponsePayload> updateFlow(final FlowUpdatePayload input) {\n+    public CompletableFuture<FlowResponsePayload> updateFlow(final FlowUpdatePayload request) {\n+        logger.info(\"Update flow request for flow {}\", request.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMTY3OQ==", "bodyText": "What about logging here?", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429201679", "createdAt": "2020-05-22T11:50:48Z", "author": {"login": "surabujin"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -386,7 +377,7 @@\n     private CompletableFuture<FlowResponsePayload> sendDeleteFlow(String flowId, String correlationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjU4Mw==", "bodyText": "Yey!!! At last!", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429202583", "createdAt": "2020-05-22T11:52:57Z", "author": {"login": "surabujin"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -499,9 +490,9 @@ private FlowPathPayload buildFlowPathPayload(List<FlowPathDto> paths, String flo\n     @Override\n     public CompletableFuture<BatchResults> unpushFlows(List<FlowInfoData> externalFlows, Boolean propagate,\n                                                        Boolean verify) {\n-        FlowOperation op = (propagate) ? FlowOperation.UNPUSH_PROPAGATE : FlowOperation.UNPUSH;\n-        // TODO: ADD the VERIFY implementation\n-        return flowPushUnpush(externalFlows, op);\n+        String correlationId = RequestCorrelationId.getId();\n+        throw new MessageException(correlationId, System.currentTimeMillis(), ErrorType.NOT_PERMITTED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNjIxOQ==", "bodyText": "One more time - YEY!", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429206219", "createdAt": "2020-05-22T12:02:05Z", "author": {"login": "surabujin"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -510,9 +501,9 @@ private FlowPathPayload buildFlowPathPayload(List<FlowPathDto> paths, String flo\n     @Override\n     public CompletableFuture<BatchResults> pushFlows(List<FlowInfoData> externalFlows,\n                                                      Boolean propagate, Boolean verify) {\n-        FlowOperation op = (propagate) ? FlowOperation.PUSH_PROPAGATE : FlowOperation.PUSH;\n-        // TODO: ADD the VERIFY implementation\n-        return flowPushUnpush(externalFlows, op);\n+        String correlationId = RequestCorrelationId.getId();\n+        throw new MessageException(correlationId, System.currentTimeMillis(), ErrorType.NOT_PERMITTED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODAzOQ==", "bodyText": "Why we do not check switch rules now?", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429208039", "createdAt": "2020-05-22T12:06:38Z", "author": {"login": "surabujin"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/FlowHelper.groovy", "diffHunk": "@@ -130,16 +130,7 @@ class FlowHelper {\n     FlowPayload addFlow(FlowPayload flow) {\n         log.debug(\"Adding flow '${flow.id}'\")\n         def response = northbound.addFlow(flow)\n-\n-        def flowEntry = null\n-        Wrappers.wait(WAIT_OFFSET) {\n-            assert northbound.getFlowStatus(flow.id).status == FlowState.UP\n-\n-            flowEntry = db.getFlow(flow.id)\n-            assert flowEntry\n-        }\n-        checkRulesOnSwitches(flowEntry, RULES_INSTALLATION_TIME, true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODQ4NA==", "bodyText": "Same here", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429208484", "createdAt": "2020-05-22T12:07:41Z", "author": {"login": "surabujin"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/FlowHelper.groovy", "diffHunk": "@@ -148,20 +139,10 @@ class FlowHelper {\n      * It is supposed if rules absent on source and destination switches, the flow is completely deleted.\n      */\n     FlowPayload deleteFlow(String flowId) {\n-        deleteFlow(flowId, false)\n-    }\n-\n-    FlowPayload deleteFlow(String flowId, boolean verifyMeters) {\n-        def flowEntry = db.getFlow(flowId)\n-\n+        Wrappers.wait(WAIT_OFFSET) { assert northbound.getFlowStatus(flowId).status != FlowState.IN_PROGRESS }\n         log.debug(\"Deleting flow '$flowId'\")\n         def response = northbound.deleteFlow(flowId)\n-\n-        checkRulesOnSwitches(flowEntry, RULES_DELETION_TIME, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODY0Nw==", "bodyText": "And here.", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429208647", "createdAt": "2020-05-22T12:08:01Z", "author": {"login": "surabujin"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/FlowHelper.groovy", "diffHunk": "@@ -170,18 +151,9 @@ class FlowHelper {\n      * It is supposed if rules are installed on source and destination switches, the flow is completely updated.\n      */\n     FlowPayload updateFlow(String flowId, FlowPayload flow) {\n-        def flowEntryBeforeUpdate = db.getFlow(flowId)\n-\n-        log.debug(\"Updating flow '${flow.id}'\")\n+        log.debug(\"Updating flow '${flowId}'\")\n         def response = northbound.updateFlow(flowId, flow)\n-        Wrappers.wait(PATH_INSTALLATION_TIME) { assert northbound.getFlowStatus(flow.id).status == FlowState.UP }\n-\n-        def flowEntryAfterUpdate = db.getFlow(flowId)\n-\n-        // TODO(ylobankov): Delete check for rules installation once we add a new test to verify this functionality.\n-        checkRulesOnSwitches(flowEntryAfterUpdate, RULES_INSTALLATION_TIME, true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTMxNjg2", "url": "https://github.com/telstra/open-kilda/pull/3493#pullrequestreview-417531686", "createdAt": "2020-05-25T08:04:41Z", "commit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDo0MVrOGZ4Zug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoyNDozM1rOGZ5ARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTY3NA==", "bodyText": "previously in v1 system was not able to guarantee rules installation before setting the flow to UP, so we had to wait for them ourselves after creating each flow. In h&s now we don't have to do this for each flow, since it is checked by the system. Instead, we have a separate test that verifies that system checks this correctly for us", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429791674", "createdAt": "2020-05-25T08:04:41Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/FlowHelper.groovy", "diffHunk": "@@ -130,16 +130,7 @@ class FlowHelper {\n     FlowPayload addFlow(FlowPayload flow) {\n         log.debug(\"Adding flow '${flow.id}'\")\n         def response = northbound.addFlow(flow)\n-\n-        def flowEntry = null\n-        Wrappers.wait(WAIT_OFFSET) {\n-            assert northbound.getFlowStatus(flow.id).status == FlowState.UP\n-\n-            flowEntry = db.getFlow(flow.id)\n-            assert flowEntry\n-        }\n-        checkRulesOnSwitches(flowEntry, RULES_INSTALLATION_TIME, true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODAzOQ=="}, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwMTU0MQ==", "bodyText": "there will be a lot of conflicts with #3432 =(", "url": "https://github.com/telstra/open-kilda/pull/3493#discussion_r429801541", "createdAt": "2020-05-25T08:24:33Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudSpec.groovy", "diffHunk": "@@ -1077,14 +1129,38 @@ class FlowCrudSpec extends HealthCheckSpecification {\n                             flowToConflict.destination.vlanId = 0\n                             dominantFlow.destination.vlanId = 0\n                         },\n-                        getError            : { FlowPayload dominantFlow, FlowPayload flowToConflict,\n-                                                String operation = \"create\" ->\n-                            errorMessage(operation, dominantFlow, \"destination\", flowToConflict, \"destination\")\n+                        getErrorMessage            : { FlowPayload dominantFlow, FlowPayload flowToConflict,\n+                                                       String operation = \"create\" ->\n+                            \"Could not $operation flow\"\n+                        },\n+                        getErrorDescription        : { FlowPayload dominantFlow, FlowPayload flowToConflict,\n+                                                       String operation = \"create\" ->\n+                            errorDescription(operation, dominantFlow, \"destination\", flowToConflict, \"destination\")\n                         }\n                 ]\n         ]\n     }\n \n+    @Shared\n+    def errorDescription = { String operation, FlowPayload flow, String endpoint, FlowPayload conflictingFlow,\n+                             String conflictingEndpoint ->\n+        def message = \"Requested flow '$conflictingFlow.id' \" +\n+                \"conflicts with existing flow '$flow.id'. \" +\n+                \"Details: requested flow '$conflictingFlow.id' $conflictingEndpoint: \" +\n+                \"switchId=\\\"${conflictingFlow.\"$conflictingEndpoint\".datapath}\\\" \" +\n+                \"port=${conflictingFlow.\"$conflictingEndpoint\".portNumber}\"\n+        if (0 < conflictingFlow.\"$conflictingEndpoint\".vlanId) {\n+            message += \" vlanId=${conflictingFlow.\"$conflictingEndpoint\".vlanId}\";\n+        }\n+        message += \", existing flow '$flow.id' $endpoint: \" +\n+                \"switchId=\\\"${flow.\"$endpoint\".datapath}\\\" \" +\n+                \"port=${flow.\"$endpoint\".portNumber}\"\n+        if (0 < flow.\"$endpoint\".vlanId) {\n+            message += \" vlanId=${flow.\"$endpoint\".vlanId}\"\n+        }\n+        return message\n+    }\n+\n     private static Message buildMessage(final CommandData data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baceb065a956949172d61f26515fb46cf0d6191"}, "originalPosition": 340}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3653, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}