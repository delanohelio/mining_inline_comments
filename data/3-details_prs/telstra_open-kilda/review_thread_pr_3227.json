{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTU0NDE5", "number": 3227, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDoyMzowNVrODsm31w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDowNTo1NFrODzpi0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTAwODIzOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDoyMzowNVrOF9jJHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDoyMzowNVrOF9jJHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA4MzIzMA==", "bodyText": "Wrong numbers. Exclude is 7, Telescope is 8. I guess I didn't update doc for ARP type", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400083230", "createdAt": "2020-03-30T10:23:05Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -42,6 +43,8 @@\n  * 3 - Multi-table ISL rule for vxlan encapsulation for egress table\n  * 4 - Multi-table ISL rule for vxlan encapsulation for transit table\n  * 5 - Multi-table customer flow rule for ingress table pass-through\n+ * 6 - Exclude rule\n+ * 7 - Telescope rule.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTA3NDI2OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo0MTo1MlrOF9jxwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo0MTo1MlrOF9jxwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5MzYzMg==", "bodyText": "I think this mask must be after line 64 to have all masks in one place", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400093632", "createdAt": "2020-03-30T10:41:52Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -93,6 +97,11 @@\n     public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n     public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n     public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n+    public static final long EXCLUSION_COOKIE_TYPE                   = 0x0070_0000_0000_0000L;\n+    public static final long TELESCOPE_COOKIE_TYPE                   = 0x0080_0000_0000_0000L;\n+\n+    public static final long TYPE_METADATA_MASK                      = 0x0000_000F_FFF0_0000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTA5NzU4OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo0ODozMFrOF9j_9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo0ODozMFrOF9j_9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5NzI2OA==", "bodyText": "this flag intersects with TYPE_METADATA_MASK. is it ok?", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400097268", "createdAt": "2020-03-30T10:48:30Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -51,6 +54,7 @@\n     public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n     public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n     public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n+    public static final long FLOW_FORWARD_SHORT_FLAG             = 0x0000_0000_0010_0000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTEwODAzOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/ExclusionId.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo1MTozN1rOF9kGdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo0MDozMFrOGIMACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODkzNA==", "bodyText": "I think you need to overwrite setId() and setFlowId() methods because unique index field must be recalculated after calling of set methods.\nSee FlowMeter class", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400098934", "createdAt": "2020-03-30T10:51:37Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/ExclusionId.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+import static java.lang.String.format;\n+\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import org.neo4j.ogm.annotation.GeneratedValue;\n+import org.neo4j.ogm.annotation.Id;\n+import org.neo4j.ogm.annotation.Index;\n+import org.neo4j.ogm.annotation.NodeEntity;\n+import org.neo4j.ogm.annotation.Property;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represents an exclusion id allocated for a flow.\n+ */\n+@Data\n+@NoArgsConstructor\n+@EqualsAndHashCode(exclude = {\"entityId\"})\n+@NodeEntity(label = \"exclusion_id\")\n+public class ExclusionId implements Serializable {\n+    private static final long serialVersionUID = 6022722903714656513L;\n+\n+    // Hidden as needed for OGM only.\n+    @Id\n+    @GeneratedValue\n+    @Setter(AccessLevel.NONE)\n+    @Getter(AccessLevel.NONE)\n+    private Long entityId;\n+\n+    @NonNull\n+    @Property(name = \"flow_id\")\n+    private String flowId;\n+\n+    @NonNull\n+    @Property(name = \"id\")\n+    private int id;\n+\n+    // Hidden as used to imitate unique composite index for non-enterprise Neo4j versions.\n+    @Setter(AccessLevel.NONE)\n+    @Getter(AccessLevel.NONE)\n+    @Property(name = \"unique_index\")\n+    @Index(unique = true)\n+    private String uniqueIndex;\n+\n+    @Builder(toBuilder = true)\n+    public ExclusionId(@NonNull String flowId, int id) {\n+        this.flowId = flowId;\n+        this.id = id;\n+        calculateUniqueIndex();\n+    }\n+\n+    private void calculateUniqueIndex() {\n+        uniqueIndex = format(\"%s_%d\", flowId, id);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzODQwOQ==", "bodyText": "so what about setId()?\nI mean use calculateUniqueIndex() in setId() to recalculate index if id was changed", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411238409", "createdAt": "2020-04-20T09:40:30Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/ExclusionId.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+import static java.lang.String.format;\n+\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import org.neo4j.ogm.annotation.GeneratedValue;\n+import org.neo4j.ogm.annotation.Id;\n+import org.neo4j.ogm.annotation.Index;\n+import org.neo4j.ogm.annotation.NodeEntity;\n+import org.neo4j.ogm.annotation.Property;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represents an exclusion id allocated for a flow.\n+ */\n+@Data\n+@NoArgsConstructor\n+@EqualsAndHashCode(exclude = {\"entityId\"})\n+@NodeEntity(label = \"exclusion_id\")\n+public class ExclusionId implements Serializable {\n+    private static final long serialVersionUID = 6022722903714656513L;\n+\n+    // Hidden as needed for OGM only.\n+    @Id\n+    @GeneratedValue\n+    @Setter(AccessLevel.NONE)\n+    @Getter(AccessLevel.NONE)\n+    private Long entityId;\n+\n+    @NonNull\n+    @Property(name = \"flow_id\")\n+    private String flowId;\n+\n+    @NonNull\n+    @Property(name = \"id\")\n+    private int id;\n+\n+    // Hidden as used to imitate unique composite index for non-enterprise Neo4j versions.\n+    @Setter(AccessLevel.NONE)\n+    @Getter(AccessLevel.NONE)\n+    @Property(name = \"unique_index\")\n+    @Index(unique = true)\n+    private String uniqueIndex;\n+\n+    @Builder(toBuilder = true)\n+    public ExclusionId(@NonNull String flowId, int id) {\n+        this.flowId = flowId;\n+        this.id = id;\n+        calculateUniqueIndex();\n+    }\n+\n+    private void calculateUniqueIndex() {\n+        uniqueIndex = format(\"%s_%d\", flowId, id);\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODkzNA=="}, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTExMzA2OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo1Mjo1NVrOF9kJdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo1Mjo1NVrOF9kJdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5OTcwMA==", "bodyText": "extra space at the begining", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400099700", "createdAt": "2020-03-30T10:52:55Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java", "diffHunk": "@@ -557,5 +557,34 @@ public FlowStatus computeFlowStatus() {\n     public boolean isActualPathId(PathId pathId) {\n         return pathId != null && (pathId.equals(this.getForwardPathId()) || pathId.equals(this.getReversePathId())\n                 || pathId.equals(this.getProtectedForwardPathId()) || pathId.equals(this.getProtectedReversePathId()));\n+\n+    }\n+\n+    /**\n+     *  Lookup flow path by its endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE0NzkzOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowMjozMlrOF9keng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowMjozMlrOF9keng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNTExOA==", "bodyText": "I think we should we handle case when getPath(oppositePathId) returns empty Optional. For example when Flow object loaded without relationships.", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400105118", "createdAt": "2020-03-30T11:02:32Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java", "diffHunk": "@@ -557,5 +557,34 @@ public FlowStatus computeFlowStatus() {\n     public boolean isActualPathId(PathId pathId) {\n         return pathId != null && (pathId.equals(this.getForwardPathId()) || pathId.equals(this.getReversePathId())\n                 || pathId.equals(this.getProtectedForwardPathId()) || pathId.equals(this.getProtectedReversePathId()));\n+\n+    }\n+\n+    /**\n+     *  Lookup flow path by its endpoint.\n+     * @param switchId target switchId\n+     * @param port target port\n+     * @param vlan target vlan\n+     * @return flowPath with matching source endpoint\n+     */\n+    public FlowPath getFlowPathByEndpoint(SwitchId switchId, int port, int vlan) {\n+        if (switchId.equals(srcSwitch.getSwitchId()) && srcPort == port && vlan == srcVlan) {\n+            return getForwardPath();\n+        } else if (switchId.equals(destSwitch.getSwitchId()) && destPort == port && vlan == destVlan) {\n+            return getReversePath();\n+        }\n+        throw new IllegalArgumentException(String.format(\"Unable to find target endpoint switch_id=\\\"%s\\\",\"\n+                + \"port=%d,vlanId=%d\", switchId, port, vlan));\n+    }\n+\n+    /**\n+     * Gets opposite path by pathId.\n+     * @param pathId target path id\n+     * @return opposite path\n+     */\n+    public FlowPath getOppositePath(PathId pathId) {\n+        PathId oppositePathId = getOppositePathId(pathId)\n+                .orElseThrow(() -> new IllegalArgumentException(String.format(\"Unknown path id %s\", pathId)));\n+        return getPath(oppositePathId).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE1NjAwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowPath.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowNTowM1rOF9kjxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowNTowM1rOF9kjxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNjQzNw==", "bodyText": "Java name and Json name are different. I think we should use same names (like we do everywhere)", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400106437", "createdAt": "2020-03-30T11:05:03Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowPath.java", "diffHunk": "@@ -115,14 +116,16 @@\n     @Setter(AccessLevel.NONE)\n     private List<PathSegment> segments = new ArrayList<>();\n \n-\n+    @Property(name = \"enabled_applications\")\n+    private Set<FlowApplication> applications;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE2MzE0OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowNzoxOFrOF9koVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowNzoxOFrOF9koVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNzYwNw==", "bodyText": "missed | after A\nthere is no information about encapsulation ID mask here\nplacement of flags is wrong. Now flags are in the middle. Between prefix and encapsulationId", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400107607", "createdAt": "2020-03-30T11:07:18Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "diffHunk": "@@ -15,34 +15,43 @@\n \n package org.openkilda.model;\n \n-import lombok.Value;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n \n import java.io.Serializable;\n \n /**\n  * Represents information about a metadata.\n- * Uses 64 bit to encode information about the packet:\n- *  0                   1                   2                   3\n- *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+ * Uses 32 bit to encode information about the packet:\n+ * 0                   1                   2                   3\n+ * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |L|O|                      Reserved Prefix                      |\n- * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |                          Reserved Prefix                      |\n+ * |L|O|A                       Reserved Prefix                      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE2NDYwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowNzo0NlrOF9kpPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowNzo0NlrOF9kpPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNzgzNg==", "bodyText": "you forgot to change ARP flag", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400107836", "createdAt": "2020-03-30T11:07:46Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "diffHunk": "@@ -15,34 +15,43 @@\n \n package org.openkilda.model;\n \n-import lombok.Value;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n \n import java.io.Serializable;\n \n /**\n  * Represents information about a metadata.\n- * Uses 64 bit to encode information about the packet:\n- *  0                   1                   2                   3\n- *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+ * Uses 32 bit to encode information about the packet:\n+ * 0                   1                   2                   3\n+ * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |L|O|                      Reserved Prefix                      |\n- * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |                          Reserved Prefix                      |\n+ * |L|O|A                       Reserved Prefix                      |\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n+ *\n  * <p>\n  * L - flag indicates LLDP packet\n  * O - flag indicates packet received by one switch flow\n  * </p>\n  */\n-@Value\n+@Data\n+@EqualsAndHashCode(callSuper = false)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonNaming(SnakeCaseStrategy.class)\n+\n public class Metadata implements Serializable {\n     private static final long serialVersionUID = 5505079196135886296L;\n \n-    public static final long METADATA_LLDP_VALUE = 0x0000_0000_0000_0001L;\n-    public static final long METADATA_LLDP_MASK =  0x0000_0000_0000_0001L;\n+    public static final long METADATA_LLDP_VALUE = 0x0000_0000_0020_0000L;\n+    public static final long METADATA_LLDP_MASK = 0x0000_0000_0020_0000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE5MTkwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4JMirrorGroupRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxNjoxOVrOF9k6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxNjoxOVrOF9k6fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjI1NQ==", "bodyText": "more that 1 Group\nI think it will be helpful to add information about these extra groups. Something like\n\"Found more that 1 Group entity by path (%s). Group IDs: [%s]\"", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400112255", "createdAt": "2020-03-30T11:16:19Z", "author": {"login": "niksv"}, "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4JMirrorGroupRepository.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.persistence.repositories.impl;\n+\n+import static java.lang.String.format;\n+\n+import org.openkilda.model.GroupId;\n+import org.openkilda.model.MirrorGroup;\n+import org.openkilda.model.PathId;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.persistence.PersistenceException;\n+import org.openkilda.persistence.TransactionManager;\n+import org.openkilda.persistence.repositories.MirrorGroupRepository;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.neo4j.ogm.cypher.ComparisonOperator;\n+import org.neo4j.ogm.cypher.Filter;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class Neo4JMirrorGroupRepository extends Neo4jGenericRepository<MirrorGroup> implements MirrorGroupRepository {\n+    static final String PATH_ID_PROPERTY_NAME = \"path_id\";\n+\n+    public Neo4JMirrorGroupRepository(Neo4jSessionFactory sessionFactory, TransactionManager transactionManager) {\n+        super(sessionFactory, transactionManager);\n+    }\n+\n+    @Override\n+    public Collection<MirrorGroup> findByPathId(PathId pathId) {\n+        Filter pathIdFilter = new Filter(PATH_ID_PROPERTY_NAME, ComparisonOperator.EQUALS, pathId);\n+\n+        Collection<MirrorGroup> groups = loadAll(pathIdFilter);\n+        if (groups.size() > 1) {\n+            throw new PersistenceException(format(\"Found more that 2 Group entity by path (%s). \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTIwMTQwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxOToxNlrOF9lAkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxOToxNlrOF9lAkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMzgxMQ==", "bodyText": "extra spaces before =", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400113811", "createdAt": "2020-03-30T11:19:16Z", "author": {"login": "niksv"}, "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.persistence.repositories.impl;\n+\n+import static org.neo4j.ogm.cypher.ComparisonOperator.EQUALS;\n+\n+import org.openkilda.model.ApplicationRule;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.persistence.PersistenceException;\n+import org.openkilda.persistence.TransactionManager;\n+import org.openkilda.persistence.repositories.ApplicationRepository;\n+\n+import org.neo4j.ogm.cypher.Filter;\n+import org.neo4j.ogm.cypher.Filters;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class Neo4jApplicationRepository extends Neo4jGenericRepository<ApplicationRule>\n+        implements ApplicationRepository {\n+    private static final String SWITCH_ID_PROPERTY_NAME   = \"switch_id\";\n+    private static final String SRC_IP_PROPERTY_NAME   = \"src_ip\";\n+    private static final String SRC_PORT_PROPERTY_NAME   = \"src_port\";\n+    private static final String DST_IP_PROPERTY_NAME   = \"dst_ip\";\n+    private static final String DST_PORT_PROPERTY_NAME   = \"dst_port\";\n+    private static final String PROTO_PROPERTY_NAME   = \"proto\";\n+    private static final String ETH_TYPE_PROPERTY_NAME   = \"eth_type\";\n+    private static final String METADATA_PROPERTY_NAME   = \"metadata\";\n+    private static final String FLOW_ID_PROPERTY_NAME   = \"flow_id\";\n+    private static final String COOKIE_PROPERTY_NAME   = \"cookie\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTIxMzc2OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyMjo1MFrOF9lH4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyMjo1MFrOF9lH4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNTY4MQ==", "bodyText": "I think you mast add more information in error message. At least group ids.\nnow it's just like \"something is wrong with some group\"", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400115681", "createdAt": "2020-03-30T11:22:50Z", "author": {"login": "niksv"}, "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.persistence.repositories.impl;\n+\n+import static org.neo4j.ogm.cypher.ComparisonOperator.EQUALS;\n+\n+import org.openkilda.model.ApplicationRule;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.persistence.PersistenceException;\n+import org.openkilda.persistence.TransactionManager;\n+import org.openkilda.persistence.repositories.ApplicationRepository;\n+\n+import org.neo4j.ogm.cypher.Filter;\n+import org.neo4j.ogm.cypher.Filters;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class Neo4jApplicationRepository extends Neo4jGenericRepository<ApplicationRule>\n+        implements ApplicationRepository {\n+    private static final String SWITCH_ID_PROPERTY_NAME   = \"switch_id\";\n+    private static final String SRC_IP_PROPERTY_NAME   = \"src_ip\";\n+    private static final String SRC_PORT_PROPERTY_NAME   = \"src_port\";\n+    private static final String DST_IP_PROPERTY_NAME   = \"dst_ip\";\n+    private static final String DST_PORT_PROPERTY_NAME   = \"dst_port\";\n+    private static final String PROTO_PROPERTY_NAME   = \"proto\";\n+    private static final String ETH_TYPE_PROPERTY_NAME   = \"eth_type\";\n+    private static final String METADATA_PROPERTY_NAME   = \"metadata\";\n+    private static final String FLOW_ID_PROPERTY_NAME   = \"flow_id\";\n+    private static final String COOKIE_PROPERTY_NAME   = \"cookie\";\n+\n+    public Neo4jApplicationRepository(Neo4jSessionFactory sessionFactory, TransactionManager transactionManager) {\n+        super(sessionFactory, transactionManager);\n+    }\n+\n+    @Override\n+    protected Class<ApplicationRule> getEntityType() {\n+        return ApplicationRule.class;\n+    }\n+\n+    @Override\n+    public Optional<ApplicationRule> lookupRuleByMatchAndFlow(SwitchId switchId, String flowId, String srcIp,\n+                                                              Integer srcPort, String dstIp, Integer dstPort,\n+                                                              String proto, String ethType, Long metadata) {\n+        Filters filters = getBaseFilters(switchId, srcIp, srcPort, dstIp, dstPort, proto, ethType, metadata);\n+        filters.and(new Filter(FLOW_ID_PROPERTY_NAME, EQUALS, flowId));\n+        return processQuery(filters);\n+    }\n+\n+    @Override\n+    public Optional<ApplicationRule> lookupRuleByMatchAndCookie(SwitchId switchId, Cookie cookie, String srcIp,\n+                                                                Integer srcPort, String dstIp, Integer dstPort,\n+                                                                String proto, String ethType, Long metadata) {\n+        Filters filters = getBaseFilters(switchId, srcIp, srcPort, dstIp, dstPort, proto, ethType, metadata);\n+        filters.and(new Filter(COOKIE_PROPERTY_NAME, EQUALS, cookie));\n+        return processQuery(filters);\n+    }\n+\n+    @Override\n+    public Collection<ApplicationRule> findBySwitchId(SwitchId switchId) {\n+        return loadAll(new Filter(SWITCH_ID_PROPERTY_NAME, EQUALS, switchId));\n+    }\n+\n+    @Override\n+    public Collection<ApplicationRule> findByFlowId(String flowId) {\n+        return loadAll(new Filter(FLOW_ID_PROPERTY_NAME, EQUALS, flowId));\n+    }\n+\n+    private Filters getBaseFilters(SwitchId switchId, String srcIp, Integer srcPort, String dstIp,\n+                                               Integer dstPort, String proto, String ethType, Long metadata) {\n+        Filters filters = new Filters(new Filter(SWITCH_ID_PROPERTY_NAME, EQUALS, switchId));\n+        filters.and(new Filter(SRC_IP_PROPERTY_NAME, EQUALS, srcIp));\n+        filters.and(new Filter(SRC_PORT_PROPERTY_NAME, EQUALS, srcPort));\n+        filters.and(new Filter(DST_IP_PROPERTY_NAME, EQUALS, dstIp));\n+        filters.and(new Filter(DST_PORT_PROPERTY_NAME, EQUALS, dstPort));\n+        filters.and(new Filter(PROTO_PROPERTY_NAME, EQUALS, proto));\n+        filters.and(new Filter(ETH_TYPE_PROPERTY_NAME, EQUALS, ethType));\n+        filters.and(new Filter(METADATA_PROPERTY_NAME, EQUALS, metadata));\n+\n+        return filters;\n+    }\n+\n+    private Optional<ApplicationRule> processQuery(Filters filters) {\n+        Collection<ApplicationRule> results = loadAll(filters);\n+\n+        if (results.size() > 1) {\n+            throw new PersistenceException(\"Found more that 1 Application Rule entity by criteria\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTIyMjI5OnYy", "diffSide": "RIGHT", "path": "docker/neo4j/init/neo4j-queries.cql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyNToyNlrOF9lNKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyNToyNlrOF9lNKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzAzMw==", "bodyText": "I think you forgot to create migration scripts for this", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400117033", "createdAt": "2020-03-30T11:25:26Z", "author": {"login": "niksv"}, "path": "docker/neo4j/init/neo4j-queries.cql", "diffHunk": "@@ -48,3 +53,6 @@ CREATE INDEX ON :`flow_event` (`flow_id`);\n CREATE INDEX ON :`flow_history` (`task_id`);\n CREATE INDEX ON :`flow_dump` (`flow_id`);\n CREATE INDEX ON :`flow_dump` (`task_id`);\n+CREATE CONSTRAINT ON (`application_rule`:`application_rule`) ASSERT `application_rule`.`entityId` IS UNIQUE;\n+CREATE CONSTRAINT ON (`exclusion_id`:`exclusion_id`) ASSERT `exclusion_id`.`entityId` IS UNIQUE;\n+CREATE CONSTRAINT ON (`exclusion_id`:`exclusion_id`) ASSERT `exclusion_id`.`unique_index` IS UNIQUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDgxMDc2OnYy", "diffSide": "RIGHT", "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1Njo1MlrOGIMo_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1Njo1MlrOGIMo_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0ODg5Mg==", "bodyText": "Why you want to drop this constraint and then create it? It's a brand new constraint. DB has no such constraint.", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411248892", "createdAt": "2020-04-20T09:56:52Z", "author": {"login": "niksv"}, "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "diffHunk": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<changelog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+           xsi:noNamespaceSchemaLocation=\"http://www.liquigraph.org/schema/1.0/liquigraph.xsd\">\n+    <!-- and/or define directly changesets-->\n+    <changeset id=\"1.24-add-mirror-group-constraints\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b6477dc1ad561f55c606d5353251a0053e0c9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDgxMTEyOnYy", "diffSide": "RIGHT", "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1Njo1OVrOGIMpMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1Njo1OVrOGIMpMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0ODk0NA==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411248944", "createdAt": "2020-04-20T09:56:59Z", "author": {"login": "niksv"}, "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "diffHunk": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<changelog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+           xsi:noNamespaceSchemaLocation=\"http://www.liquigraph.org/schema/1.0/liquigraph.xsd\">\n+    <!-- and/or define directly changesets-->\n+    <changeset id=\"1.24-add-mirror-group-constraints\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`entityId` IS UNIQUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b6477dc1ad561f55c606d5353251a0053e0c9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDgxNTE0OnYy", "diffSide": "RIGHT", "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1ODowMFrOGIMrqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1ODowMFrOGIMrqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0OTU3Ng==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411249576", "createdAt": "2020-04-20T09:58:00Z", "author": {"login": "niksv"}, "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "diffHunk": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<changelog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+           xsi:noNamespaceSchemaLocation=\"http://www.liquigraph.org/schema/1.0/liquigraph.xsd\">\n+    <!-- and/or define directly changesets-->\n+    <changeset id=\"1.24-add-mirror-group-constraints\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`entityId` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`entityId` IS UNIQUE;\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-path_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"path_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group`(`path_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-switch_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"switch_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group` (`switch_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-flow_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"flow_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group` (`flow_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-application_rule-constrains\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`application_rule`:`application_rule`) ASSERT `application_rule`.`entityId` IS UNIQUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b6477dc1ad561f55c606d5353251a0053e0c9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDgxNTkzOnYy", "diffSide": "RIGHT", "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1ODoxMVrOGIMsFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1ODoxMVrOGIMsFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0OTY4Nw==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411249687", "createdAt": "2020-04-20T09:58:11Z", "author": {"login": "niksv"}, "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "diffHunk": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<changelog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+           xsi:noNamespaceSchemaLocation=\"http://www.liquigraph.org/schema/1.0/liquigraph.xsd\">\n+    <!-- and/or define directly changesets-->\n+    <changeset id=\"1.24-add-mirror-group-constraints\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`entityId` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`entityId` IS UNIQUE;\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-path_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"path_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group`(`path_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-switch_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"switch_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group` (`switch_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-flow_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"flow_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group` (`flow_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-application_rule-constrains\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`application_rule`:`application_rule`) ASSERT `application_rule`.`entityId` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`application_rule`:`application_rule`) ASSERT `application_rule`.`entityId` IS UNIQUE;\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-exclusion-constrains\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`exclusion_id`:`exclusion_id`) ASSERT `exclusion_id`.`entityId` IS UNIQUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b6477dc1ad561f55c606d5353251a0053e0c9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDgxNjc0OnYy", "diffSide": "RIGHT", "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1ODoxOFrOGIMsiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1ODoxOFrOGIMsiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0OTgwMA==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411249800", "createdAt": "2020-04-20T09:58:18Z", "author": {"login": "niksv"}, "path": "services/src/neo4j/migrations/1.24-flow-applications-indexes/1-add-applications-index.xml", "diffHunk": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<changelog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+           xsi:noNamespaceSchemaLocation=\"http://www.liquigraph.org/schema/1.0/liquigraph.xsd\">\n+    <!-- and/or define directly changesets-->\n+    <changeset id=\"1.24-add-mirror-group-constraints\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`unique_index` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`entityId` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`mirror_group`:`mirror_group`) ASSERT `mirror_group`.`entityId` IS UNIQUE;\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-path_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"path_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group`(`path_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-switch_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"switch_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group` (`switch_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-mirror_group-flow_id-index\" author=\"Timofey Durakov\">\n+        <precondition if-not-met=\"MARK_AS_EXECUTED\">\n+            <query><![CDATA[\n+                CALL db.indexes()\n+                YIELD label, properties\n+                WHERE label=\"mirror_group\" AND properties=[\"flow_id\"]\n+                RETURN count(*) = 0 as result\n+            ]]></query>\n+        </precondition>\n+        <query><![CDATA[\n+            CREATE INDEX ON :`mirror_group` (`flow_id`);\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-application_rule-constrains\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`application_rule`:`application_rule`) ASSERT `application_rule`.`entityId` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`application_rule`:`application_rule`) ASSERT `application_rule`.`entityId` IS UNIQUE;\n+        ]]></query>\n+    </changeset>\n+    <changeset id=\"1.24-add-exclusion-constrains\" author=\"Timofey Durakov\">\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`exclusion_id`:`exclusion_id`) ASSERT `exclusion_id`.`entityId` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            CREATE CONSTRAINT ON (`exclusion_id`:`exclusion_id`) ASSERT `exclusion_id`.`entityId` IS UNIQUE;\n+        ]]></query>\n+        <query><![CDATA[\n+            DROP CONSTRAINT ON (`exclusion_id`:`exclusion_id`) ASSERT `exclusion_id`.`unique_index` IS UNIQUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b6477dc1ad561f55c606d5353251a0053e0c9"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDg0NjI0OnYy", "diffSide": "LEFT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDowNTo1NFrOGIM-fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDowNTo1NFrOGIM-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI1NDM5Ng==", "bodyText": "Please do not remove space before zero.\nBefore removal it was easy to understand that L is in 0 bit, O is in 1 bit. After removing it's hard to understand that.\nespecially in the middle. Digits are under | now\n4 5 6 7 8 \n+-+-+-+-+\n|F|O|L|A|", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411254396", "createdAt": "2020-04-20T10:05:54Z", "author": {"login": "niksv"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "diffHunk": "@@ -15,37 +15,46 @@\n \n package org.openkilda.model;\n \n-import lombok.Value;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n \n import java.io.Serializable;\n \n /**\n  * Represents information about a metadata.\n- * Uses 64 bit to encode information about the packet:\n- *  0                   1                   2                   3\n- *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+ * Uses 32 bit to encode information about the packet:\n+ * 0                   1                   2                   3\n+ * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |L|O|                      Reserved Prefix                      |\n- * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eb164ea55d4840e72d0f95f03cc08dc7542a4af"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1992, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}