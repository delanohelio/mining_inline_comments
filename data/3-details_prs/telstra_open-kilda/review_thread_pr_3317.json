{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNTM2NjA2", "number": 3317, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoxMzoxNFrODqWcrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo0Mzo0OFrODqXFFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzM0NTczOnYy", "diffSide": "RIGHT", "path": "src-python/lock-keeper/lockkeeper.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoxMzoxNFrOF6CsBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNDo1M1rOF6G5yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwNTc2Nw==", "bodyText": "Do we always use the eth0 interface?\nProbably would be better to use separate function for getting interface name, for example:\nip route show to match switch_address | awk  '{ print $5 }'", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396405767", "createdAt": "2020-03-23T12:13:14Z", "author": {"login": "andriidovhan"}, "path": "src-python/lock-keeper/lockkeeper.py", "diffHunk": "@@ -131,6 +132,32 @@ def fl_restart():\n     return jsonify({'status': 'ok'})\n \n \n+@app.route('/floodlight/tc', methods=['POST'])\n+def floodlight_shape_traffic():\n+    body = request.get_json()\n+    common_commands = ['tc qdisc del dev eth0 root',\n+                       'tc qdisc add dev eth0 root handle 1: prio priomap 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2',\n+                       'tc qdisc add dev eth0 parent 1:1 handle 10: netem delay {}ms'.format(\n+                           body['tcData']['egressDelayMs'])]\n+    switches_by_container = defaultdict(list)\n+    for sw in body['affectedAddresses']:\n+        switches_by_container[sw['containerName']].append(sw)\n+    for container, switches in switches_by_container.items():\n+        commands = common_commands.copy()\n+        for switch in switches:\n+            commands.extend(['tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dst {}/32 match ip '", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyOTg5MQ==", "bodyText": "We always use eth0. This code is executed inside floodlight container, not lab service", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396429891", "createdAt": "2020-03-23T12:57:09Z", "author": {"login": "rtretyak"}, "path": "src-python/lock-keeper/lockkeeper.py", "diffHunk": "@@ -131,6 +132,32 @@ def fl_restart():\n     return jsonify({'status': 'ok'})\n \n \n+@app.route('/floodlight/tc', methods=['POST'])\n+def floodlight_shape_traffic():\n+    body = request.get_json()\n+    common_commands = ['tc qdisc del dev eth0 root',\n+                       'tc qdisc add dev eth0 root handle 1: prio priomap 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2',\n+                       'tc qdisc add dev eth0 parent 1:1 handle 10: netem delay {}ms'.format(\n+                           body['tcData']['egressDelayMs'])]\n+    switches_by_container = defaultdict(list)\n+    for sw in body['affectedAddresses']:\n+        switches_by_container[sw['containerName']].append(sw)\n+    for container, switches in switches_by_container.items():\n+        commands = common_commands.copy()\n+        for switch in switches:\n+            commands.extend(['tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dst {}/32 match ip '", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwNTc2Nw=="}, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDgyNA==", "bodyText": "agree", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396474824", "createdAt": "2020-03-23T14:04:53Z", "author": {"login": "andriidovhan"}, "path": "src-python/lock-keeper/lockkeeper.py", "diffHunk": "@@ -131,6 +132,32 @@ def fl_restart():\n     return jsonify({'status': 'ok'})\n \n \n+@app.route('/floodlight/tc', methods=['POST'])\n+def floodlight_shape_traffic():\n+    body = request.get_json()\n+    common_commands = ['tc qdisc del dev eth0 root',\n+                       'tc qdisc add dev eth0 root handle 1: prio priomap 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2',\n+                       'tc qdisc add dev eth0 parent 1:1 handle 10: netem delay {}ms'.format(\n+                           body['tcData']['egressDelayMs'])]\n+    switches_by_container = defaultdict(list)\n+    for sw in body['affectedAddresses']:\n+        switches_by_container[sw['containerName']].append(sw)\n+    for container, switches in switches_by_container.items():\n+        commands = common_commands.copy()\n+        for switch in switches:\n+            commands.extend(['tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dst {}/32 match ip '", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwNTc2Nw=="}, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzM5Mzk2OnYy", "diffSide": "RIGHT", "path": "src-python/lock-keeper/lockkeeper.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyNzo1MVrOF6DKPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo0OTo0MlrOF6I63g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzUwMA==", "bodyText": "Do you mind extending text response(for virtual and hardware implementations)?\nfor instance:\n\nafter executing execute_commands_in_container\ncreate list([[containerNames, ip, port],]\nreturn it in response\n\"tc filter is applied in the following containers: {}\".format(<generated_list>)\n\nI guess it can be useful during investigating.", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396413500", "createdAt": "2020-03-23T12:27:51Z", "author": {"login": "andriidovhan"}, "path": "src-python/lock-keeper/lockkeeper.py", "diffHunk": "@@ -131,6 +132,32 @@ def fl_restart():\n     return jsonify({'status': 'ok'})\n \n \n+@app.route('/floodlight/tc', methods=['POST'])\n+def floodlight_shape_traffic():\n+    body = request.get_json()\n+    common_commands = ['tc qdisc del dev eth0 root',\n+                       'tc qdisc add dev eth0 root handle 1: prio priomap 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2',\n+                       'tc qdisc add dev eth0 parent 1:1 handle 10: netem delay {}ms'.format(\n+                           body['tcData']['egressDelayMs'])]\n+    switches_by_container = defaultdict(list)\n+    for sw in body['affectedAddresses']:\n+        switches_by_container[sw['containerName']].append(sw)\n+    for container, switches in switches_by_container.items():\n+        commands = common_commands.copy()\n+        for switch in switches:\n+            commands.extend(['tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dst {}/32 match ip '\n+                             'dport {} 0xffff flowid 1:1'.format(switch['ip'], switch['port'])])\n+        execute_commands_in_container(commands, container)\n+    return jsonify({'status': 'ok'})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNzg3MA==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396507870", "createdAt": "2020-03-23T14:49:42Z", "author": {"login": "rtretyak"}, "path": "src-python/lock-keeper/lockkeeper.py", "diffHunk": "@@ -131,6 +132,32 @@ def fl_restart():\n     return jsonify({'status': 'ok'})\n \n \n+@app.route('/floodlight/tc', methods=['POST'])\n+def floodlight_shape_traffic():\n+    body = request.get_json()\n+    common_commands = ['tc qdisc del dev eth0 root',\n+                       'tc qdisc add dev eth0 root handle 1: prio priomap 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2',\n+                       'tc qdisc add dev eth0 parent 1:1 handle 10: netem delay {}ms'.format(\n+                           body['tcData']['egressDelayMs'])]\n+    switches_by_container = defaultdict(list)\n+    for sw in body['affectedAddresses']:\n+        switches_by_container[sw['containerName']].append(sw)\n+    for container, switches in switches_by_container.items():\n+        commands = common_commands.copy()\n+        for switch in switches:\n+            commands.extend(['tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dst {}/32 match ip '\n+                             'dport {} 0xffff flowid 1:1'.format(switch['ip'], switch['port'])])\n+        execute_commands_in_container(commands, container)\n+    return jsonify({'status': 'ok'})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzUwMA=="}, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzQwNTAwOnYy", "diffSide": "RIGHT", "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/lockkeeper/LockKeeperVirtualImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjozMDo1OFrOF6DQ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo0OTo0MFrOF6I6xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNTIyNg==", "bodyText": "please, add some log", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396415226", "createdAt": "2020-03-23T12:30:58Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/lockkeeper/LockKeeperVirtualImpl.java", "diffHunk": "@@ -168,19 +168,34 @@ public void restartFloodlight(String region) {\n     }\n \n     @Override\n-    public void blockFloodlightAccess(String region, BlockRequest address) {\n+    public void blockFloodlightAccess(String region, FloodlightResourceAddress address) {\n         log.debug(\"Block floodlight access to {} by adding iptables rules\", address);\n         restTemplate.exchange(getCurrentLabUrl() + \"/lock-keeper/floodlight/block\",\n                 HttpMethod.POST, new HttpEntity<>(address, buildJsonHeaders()), String.class);\n     }\n \n     @Override\n-    public void unblockFloodlightAccess(String region, BlockRequest address) {\n+    public void unblockFloodlightAccess(String region, FloodlightResourceAddress address) {\n         log.debug(\"Unblock floodlight access to {} by removing iptables rules\", address);\n         restTemplate.exchange(getCurrentLabUrl() + \"/lock-keeper/floodlight/unblock\",\n                 HttpMethod.POST, new HttpEntity<>(address, buildJsonHeaders()), String.class);\n     }\n \n+    @Override\n+    public void shapeSwitchesTraffic(List<Switch> switches, TrafficControlData tcData) {\n+        List<FloodlightResourceAddress> swResources = switches.stream()\n+                .map(sw -> LockKeeperService.toFlResource(sw, mgmtManager)).collect(Collectors.toList());\n+        restTemplate.exchange(getCurrentLabUrl() + \"/lock-keeper/floodlight/tc\", HttpMethod.POST,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNzg0NA==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396507844", "createdAt": "2020-03-23T14:49:40Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/lockkeeper/LockKeeperVirtualImpl.java", "diffHunk": "@@ -168,19 +168,34 @@ public void restartFloodlight(String region) {\n     }\n \n     @Override\n-    public void blockFloodlightAccess(String region, BlockRequest address) {\n+    public void blockFloodlightAccess(String region, FloodlightResourceAddress address) {\n         log.debug(\"Block floodlight access to {} by adding iptables rules\", address);\n         restTemplate.exchange(getCurrentLabUrl() + \"/lock-keeper/floodlight/block\",\n                 HttpMethod.POST, new HttpEntity<>(address, buildJsonHeaders()), String.class);\n     }\n \n     @Override\n-    public void unblockFloodlightAccess(String region, BlockRequest address) {\n+    public void unblockFloodlightAccess(String region, FloodlightResourceAddress address) {\n         log.debug(\"Unblock floodlight access to {} by removing iptables rules\", address);\n         restTemplate.exchange(getCurrentLabUrl() + \"/lock-keeper/floodlight/unblock\",\n                 HttpMethod.POST, new HttpEntity<>(address, buildJsonHeaders()), String.class);\n     }\n \n+    @Override\n+    public void shapeSwitchesTraffic(List<Switch> switches, TrafficControlData tcData) {\n+        List<FloodlightResourceAddress> swResources = switches.stream()\n+                .map(sw -> LockKeeperService.toFlResource(sw, mgmtManager)).collect(Collectors.toList());\n+        restTemplate.exchange(getCurrentLabUrl() + \"/lock-keeper/floodlight/tc\", HttpMethod.POST,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNTIyNg=="}, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzQ0OTE2OnYy", "diffSide": "LEFT", "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/lockkeeper/LockKeeperVirtualImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo0Mzo0OFrOF6DsJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzo0NzoyNVrOF6kLog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMjE4MQ==", "bodyText": "Why don't you like log.debug?)", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396422181", "createdAt": "2020-03-23T12:43:48Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/lockkeeper/LockKeeperVirtualImpl.java", "diffHunk": "@@ -83,23 +85,21 @@ public void setController(Switch sw, String controller) {\n      * changes are reverted.\n      */\n     @Override\n-    public BlockRequest knockoutSwitch(Switch sw, MultiFloodlightManager manager) {\n-        log.debug(\"Block Floodlight access to switch '{}' by adding iptables rules\", sw.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzMDkwMg==", "bodyText": "It is misleading since we are not using iptables in virtual implementation, we set dummy controller instead. The setController already has a debug log for changing controller", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396430902", "createdAt": "2020-03-23T12:58:47Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/lockkeeper/LockKeeperVirtualImpl.java", "diffHunk": "@@ -83,23 +85,21 @@ public void setController(Switch sw, String controller) {\n      * changes are reverted.\n      */\n     @Override\n-    public BlockRequest knockoutSwitch(Switch sw, MultiFloodlightManager manager) {\n-        log.debug(\"Block Floodlight access to switch '{}' by adding iptables rules\", sw.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMjE4MQ=="}, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1NDUzMA==", "bodyText": "agree", "url": "https://github.com/telstra/open-kilda/pull/3317#discussion_r396954530", "createdAt": "2020-03-24T07:47:25Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/lockkeeper/LockKeeperVirtualImpl.java", "diffHunk": "@@ -83,23 +85,21 @@ public void setController(Switch sw, String controller) {\n      * changes are reverted.\n      */\n     @Override\n-    public BlockRequest knockoutSwitch(Switch sw, MultiFloodlightManager manager) {\n-        log.debug(\"Block Floodlight access to switch '{}' by adding iptables rules\", sw.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMjE4MQ=="}, "originalCommit": {"oid": "e8ded166824b5d706e84071bef909354412c333b"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2035, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}