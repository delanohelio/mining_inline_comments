{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDMzMzk4", "number": 3738, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTowMzoyMVrOEoB2ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTowMzoyMVrOEoB2ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDA4ODA1OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/bfd/BfdAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTowMzoyMVrOHY4vvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo0NDozN1rOHY59gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NzU5Ng==", "bodyText": "typo?", "url": "https://github.com/telstra/open-kilda/pull/3738#discussion_r495857596", "createdAt": "2020-09-28T11:03:21Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/bfd/BfdAction.java", "diffHunk": "@@ -29,53 +28,48 @@\n abstract class BfdAction {\n     protected Logger log = LoggerFactory.getLogger(getClass());\n \n-    protected LinkStatus linkStatus;\n+    protected final String speakerRequestKey;\n \n-    protected String speakerRequestKey = null;\n-    protected BfdSessionResponse speakerResponse = null;\n     protected boolean haveSpeakerResponse = false;\n+    private ActionResult result;\n \n-    BfdAction(LinkStatus linkStatus) {\n-        this.linkStatus = linkStatus;\n-    }\n-\n-    public Optional<ActionResult> updateLinkStatus(LinkStatus status) {\n-        linkStatus = status;\n-        return evaluateResult();\n+    BfdAction(String requestKey) {\n+        this.speakerRequestKey = requestKey;\n     }\n \n     public final Optional<ActionResult> consumeSpeakerResponse(String requestKey, BfdSessionResponse response) {\n-        if (speakerRequestKey != null && speakerRequestKey.equals(requestKey)) {\n+        if (! haveSpeakerResponse && speakerRequestKey.equals(requestKey)) {\n             haveSpeakerResponse = true;\n-            speakerRequestKey = null;\n-\n-            speakerResponse = response;\n+            result = makeResult(response);\n         }\n \n-        return evaluateResult();\n+        return Optional.ofNullable(result);\n     }\n \n     public abstract String getLogIdentifier();\n \n-    protected abstract Optional<ActionResult> evaluateResult();\n+    protected abstract ActionResult makeResult(BfdSessionResponse response);\n \n     @Value\n     static class ActionResult {\n-        private boolean success;\n+        boolean success;\n \n         /**\n          * Error core (null in case of timeout).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b970da486b775c284af03d58dba5e37709bbc96"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NzUwNg==", "bodyText": "yep (fixed)", "url": "https://github.com/telstra/open-kilda/pull/3738#discussion_r495877506", "createdAt": "2020-09-28T11:44:37Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/bfd/BfdAction.java", "diffHunk": "@@ -29,53 +28,48 @@\n abstract class BfdAction {\n     protected Logger log = LoggerFactory.getLogger(getClass());\n \n-    protected LinkStatus linkStatus;\n+    protected final String speakerRequestKey;\n \n-    protected String speakerRequestKey = null;\n-    protected BfdSessionResponse speakerResponse = null;\n     protected boolean haveSpeakerResponse = false;\n+    private ActionResult result;\n \n-    BfdAction(LinkStatus linkStatus) {\n-        this.linkStatus = linkStatus;\n-    }\n-\n-    public Optional<ActionResult> updateLinkStatus(LinkStatus status) {\n-        linkStatus = status;\n-        return evaluateResult();\n+    BfdAction(String requestKey) {\n+        this.speakerRequestKey = requestKey;\n     }\n \n     public final Optional<ActionResult> consumeSpeakerResponse(String requestKey, BfdSessionResponse response) {\n-        if (speakerRequestKey != null && speakerRequestKey.equals(requestKey)) {\n+        if (! haveSpeakerResponse && speakerRequestKey.equals(requestKey)) {\n             haveSpeakerResponse = true;\n-            speakerRequestKey = null;\n-\n-            speakerResponse = response;\n+            result = makeResult(response);\n         }\n \n-        return evaluateResult();\n+        return Optional.ofNullable(result);\n     }\n \n     public abstract String getLogIdentifier();\n \n-    protected abstract Optional<ActionResult> evaluateResult();\n+    protected abstract ActionResult makeResult(BfdSessionResponse response);\n \n     @Value\n     static class ActionResult {\n-        private boolean success;\n+        boolean success;\n \n         /**\n          * Error core (null in case of timeout).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NzU5Ng=="}, "originalCommit": {"oid": "1b970da486b775c284af03d58dba5e37709bbc96"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1829, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}