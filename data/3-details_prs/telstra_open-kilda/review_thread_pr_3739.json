{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDc5Nzk0", "number": 3739, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoxOTo0NFrOEnUoaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowNjoxMFrOEo5WZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjY3OTQ0OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoxOTo0NFrOHX2ZwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzoxMzo0MVrOHX3veg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MDYyNA==", "bodyText": "I'd rename it System doesn't rebuild path for the flow... since reroute could be miss-leading here", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494770624", "createdAt": "2020-09-25T06:19:44Z", "author": {"login": "timofei-durakov"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,155 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating portNumber/vlanId\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5MjU3MA==", "bodyText": "renamed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494792570", "createdAt": "2020-09-25T07:13:41Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,155 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating portNumber/vlanId\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MDYyNA=="}, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjY4MjY0OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoyMTowNVrOHX2boA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzozNDo0NlrOHX4WGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MTEwNA==", "bodyText": "it will be better if you verify separately all three scenarios:\n\nsrc endpoint changed\ndst endpoint changed\nboth endpoints changed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494771104", "createdAt": "2020-09-25T06:21:05Z", "author": {"login": "timofei-durakov"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,155 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwMjQ1Nw==", "bodyText": "added", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494802457", "createdAt": "2020-09-25T07:34:46Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,155 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MTEwNA=="}, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjY4NjM1OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoyMjo0MVrOHX2dyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzozNDozNlrOHX4V1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MTY1OA==", "bodyText": "destination is updated on line 1129, no checks for it is made here", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494771658", "createdAt": "2020-09-25T06:22:41Z", "author": {"login": "timofei-durakov"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,155 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port\n+            it.source.vlanId = flow.destination.vlanId + 1\n+            it.destination.portNumber = 10 // traffgen port\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber\n+            it.source.vlanId == updatedFlow.source.vlanId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwMjM5MA==", "bodyText": "oops, my bad.\nfixed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494802390", "createdAt": "2020-09-25T07:34:36Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,155 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port\n+            it.source.vlanId = flow.destination.vlanId + 1\n+            it.destination.portNumber = 10 // traffgen port\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber\n+            it.source.vlanId == updatedFlow.source.vlanId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MTY1OA=="}, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjY5MzU1OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoyNTozMFrOHX2h0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzozNDo1NVrOHX4WZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MjY4OQ==", "bodyText": "this scenario as-is seems to be useless, isl conflict validation is made prior the update happen, If you want to verify rollback you need to knock out src switch during the update for example, or make fl not receiving install commands", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494772689", "createdAt": "2020-09-25T06:25:30Z", "author": {"login": "timofei-durakov"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,155 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port\n+            it.source.vlanId = flow.destination.vlanId + 1\n+            it.destination.portNumber = 10 // traffgen port\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber\n+            it.source.vlanId == updatedFlow.source.vlanId\n+        }\n+\n+        and: \"Flow is not rerouted\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        and: \"System allows traffic on the flow\"\n+        def traffExam = traffExamProvider.get()\n+        def examFlow = new FlowTrafficExamBuilder(topology, traffExam).buildBidirectionalExam(\n+                flowHelperV2.toV1(updatedFlow), 100, 5\n+        )\n+        withPool {\n+            [examFlow.forward, examFlow.reverse].eachParallel { direction ->\n+                def resources = traffExam.startExam(direction)\n+                direction.setResources(resources)\n+                assert traffExam.waitExam(direction).hasTraffic()\n+            }\n+        }\n+\n+        and: \"Flow is valid\"\n+        northbound.validateFlow(flow.flowId).each { direction -> assert direction.asExpected }\n+\n+        and: \"All involved switches pass switch validation\"\n+        withPool {\n+            currentPath*.switchId.eachParallel { SwitchId swId ->\n+                with(northbound.validateSwitch(swId)) { validation ->\n+                    validation.verifyRuleSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                    validation.verifyMeterSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                }\n+            }\n+        }\n+        def involvedSwitchesPassSwValidation = true\n+\n+        cleanup: \"Revert system to original state\"\n+        flow && flowHelperV2.deleteFlow(flow.flowId)\n+        northbound.deleteLinkProps(northbound.getAllLinkProps())\n+        !involvedSwitchesPassSwValidation && currentPath*.switchId.each { SwitchId swId ->\n+            northbound.synchronizeSwitch(swId, true)\n+        }\n+        database.resetCosts()\n+    }\n+\n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path during rollback after unsuccessfull update portNumber action\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwMjUzNQ==", "bodyText": "deleted", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494802535", "createdAt": "2020-09-25T07:34:55Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,155 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port\n+            it.source.vlanId = flow.destination.vlanId + 1\n+            it.destination.portNumber = 10 // traffgen port\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber\n+            it.source.vlanId == updatedFlow.source.vlanId\n+        }\n+\n+        and: \"Flow is not rerouted\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        and: \"System allows traffic on the flow\"\n+        def traffExam = traffExamProvider.get()\n+        def examFlow = new FlowTrafficExamBuilder(topology, traffExam).buildBidirectionalExam(\n+                flowHelperV2.toV1(updatedFlow), 100, 5\n+        )\n+        withPool {\n+            [examFlow.forward, examFlow.reverse].eachParallel { direction ->\n+                def resources = traffExam.startExam(direction)\n+                direction.setResources(resources)\n+                assert traffExam.waitExam(direction).hasTraffic()\n+            }\n+        }\n+\n+        and: \"Flow is valid\"\n+        northbound.validateFlow(flow.flowId).each { direction -> assert direction.asExpected }\n+\n+        and: \"All involved switches pass switch validation\"\n+        withPool {\n+            currentPath*.switchId.eachParallel { SwitchId swId ->\n+                with(northbound.validateSwitch(swId)) { validation ->\n+                    validation.verifyRuleSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                    validation.verifyMeterSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                }\n+            }\n+        }\n+        def involvedSwitchesPassSwValidation = true\n+\n+        cleanup: \"Revert system to original state\"\n+        flow && flowHelperV2.deleteFlow(flow.flowId)\n+        northbound.deleteLinkProps(northbound.getAllLinkProps())\n+        !involvedSwitchesPassSwValidation && currentPath*.switchId.each { SwitchId swId ->\n+            northbound.synchronizeSwitch(swId, true)\n+        }\n+        database.resetCosts()\n+    }\n+\n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path during rollback after unsuccessfull update portNumber action\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MjY4OQ=="}, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjcwNDY0OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/QinQFlowSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoyOTo1NlrOHX2ofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo0ODozOFrOHX4xSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3NDM5Nw==", "bodyText": "the same issue, btw, no inner vlan validation here", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494774397", "createdAt": "2020-09-25T06:29:56Z", "author": {"login": "timofei-durakov"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/QinQFlowSpec.groovy", "diffHunk": "@@ -885,4 +887,80 @@ class QinQFlowSpec extends HealthCheckSpecification {\n         cleanup:\n         flow && flowHelperV2.deleteFlow(flow.flowId)\n     }\n+\n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating innerVlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            [it.src, it.dst].every { sw ->\n+                sw.dpId in allTraffgenSwitchIds && northbound.getSwitchProperties(sw.dpId).multiTable\n+            } && it.paths.size() > 2\n+        } ?: assumeTrue(\"Not able to find enough switches with traffgens and in multi-table mode\", false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flow.source.innerVlanId = flow.source.vlanId\n+        flow.destination.innerVlanId = flow.destination.vlanId\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.innerVlanId = flow.destination.vlanId\n+            it.destination.innerVlanId = flow.source.vlanId\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwOTQxOA==", "bodyText": "thx, fixed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r494809418", "createdAt": "2020-09-25T07:48:38Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/QinQFlowSpec.groovy", "diffHunk": "@@ -885,4 +887,80 @@ class QinQFlowSpec extends HealthCheckSpecification {\n         cleanup:\n         flow && flowHelperV2.deleteFlow(flow.flowId)\n     }\n+\n+    @Tidy\n+    def \"System doesn't reroute flow to more preferable path while updating innerVlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            [it.src, it.dst].every { sw ->\n+                sw.dpId in allTraffgenSwitchIds && northbound.getSwitchProperties(sw.dpId).multiTable\n+            } && it.paths.size() > 2\n+        } ?: assumeTrue(\"Not able to find enough switches with traffgens and in multi-table mode\", false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flow.source.innerVlanId = flow.source.vlanId\n+        flow.destination.innerVlanId = flow.destination.vlanId\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.innerVlanId = flow.destination.vlanId\n+            it.destination.innerVlanId = flow.source.vlanId\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3NDM5Nw=="}, "originalCommit": {"oid": "241bc3ceb5878e89563ce9da9c0d8ce97f1805d2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzE2OTIyOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowMTo1N1rOHaPz8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzo0NDo0MFrOHaRLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NDA4Mg==", "bodyText": "should be taken from topology.yaml", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497284082", "createdAt": "2020-09-30T07:01:57Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,117 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't rebuild path for a flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: vlanId on the src endpoint\"\n+        def updatedFlowSrcEndpoint = flow.jacksonCopy().tap {\n+            it.source.vlanId = flow.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowSrcEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlowSrcEndpoint.source.portNumber\n+            it.source.vlanId == updatedFlowSrcEndpoint.source.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        when: \"Update the flow: vlanId on the dst endpoint\"\n+        def updatedFlowDstEndpoint = flow.jacksonCopy().tap {\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowDstEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.destination.portNumber == updatedFlowDstEndpoint.destination.portNumber\n+            it.destination.vlanId == updatedFlowDstEndpoint.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        then: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNjQ3MA==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497306470", "createdAt": "2020-09-30T07:44:40Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,117 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't rebuild path for a flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: vlanId on the src endpoint\"\n+        def updatedFlowSrcEndpoint = flow.jacksonCopy().tap {\n+            it.source.vlanId = flow.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowSrcEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlowSrcEndpoint.source.portNumber\n+            it.source.vlanId == updatedFlowSrcEndpoint.source.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        when: \"Update the flow: vlanId on the dst endpoint\"\n+        def updatedFlowDstEndpoint = flow.jacksonCopy().tap {\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowDstEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.destination.portNumber == updatedFlowDstEndpoint.destination.portNumber\n+            it.destination.vlanId == updatedFlowDstEndpoint.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        then: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NDA4Mg=="}, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzE3MzkxOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowMzo0NVrOHaP3Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzoxMzoyOFrOHaQJjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NDg3MA==", "bodyText": "assert", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497284870", "createdAt": "2020-09-30T07:03:45Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,117 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't rebuild path for a flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: vlanId on the src endpoint\"\n+        def updatedFlowSrcEndpoint = flow.jacksonCopy().tap {\n+            it.source.vlanId = flow.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowSrcEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlowSrcEndpoint.source.portNumber\n+            it.source.vlanId == updatedFlowSrcEndpoint.source.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        when: \"Update the flow: vlanId on the dst endpoint\"\n+        def updatedFlowDstEndpoint = flow.jacksonCopy().tap {\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowDstEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.destination.portNumber == updatedFlowDstEndpoint.destination.portNumber\n+            it.destination.vlanId == updatedFlowDstEndpoint.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4OTYxMg==", "bodyText": "agree, fixed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497289612", "createdAt": "2020-09-30T07:13:28Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,117 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't rebuild path for a flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: vlanId on the src endpoint\"\n+        def updatedFlowSrcEndpoint = flow.jacksonCopy().tap {\n+            it.source.vlanId = flow.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowSrcEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlowSrcEndpoint.source.portNumber\n+            it.source.vlanId == updatedFlowSrcEndpoint.source.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        when: \"Update the flow: vlanId on the dst endpoint\"\n+        def updatedFlowDstEndpoint = flow.jacksonCopy().tap {\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowDstEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.destination.portNumber == updatedFlowDstEndpoint.destination.portNumber\n+            it.destination.vlanId == updatedFlowDstEndpoint.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NDg3MA=="}, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzE3NDMyOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowMzo1M1rOHaP3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzoxNjoyN1rOHaQPwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NDkzNQ==", "bodyText": "assert", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497284935", "createdAt": "2020-09-30T07:03:53Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,117 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't rebuild path for a flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: vlanId on the src endpoint\"\n+        def updatedFlowSrcEndpoint = flow.jacksonCopy().tap {\n+            it.source.vlanId = flow.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowSrcEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlowSrcEndpoint.source.portNumber\n+            it.source.vlanId == updatedFlowSrcEndpoint.source.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        when: \"Update the flow: vlanId on the dst endpoint\"\n+        def updatedFlowDstEndpoint = flow.jacksonCopy().tap {\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowDstEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.destination.portNumber == updatedFlowDstEndpoint.destination.portNumber\n+            it.destination.vlanId == updatedFlowDstEndpoint.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        then: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port\n+            it.source.vlanId = updatedFlowDstEndpoint.source.vlanId + 1\n+            it.destination.portNumber = 10 // traffgen port\n+            it.destination.vlanId = updatedFlowDstEndpoint.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber\n+            it.source.vlanId == updatedFlow.source.vlanId\n+            it.destination.portNumber == updatedFlow.destination.portNumber\n+            it.destination.vlanId == updatedFlow.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5MTIwMQ==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497291201", "createdAt": "2020-09-30T07:16:27Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,117 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't rebuild path for a flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: vlanId on the src endpoint\"\n+        def updatedFlowSrcEndpoint = flow.jacksonCopy().tap {\n+            it.source.vlanId = flow.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowSrcEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlowSrcEndpoint.source.portNumber\n+            it.source.vlanId == updatedFlowSrcEndpoint.source.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        when: \"Update the flow: vlanId on the dst endpoint\"\n+        def updatedFlowDstEndpoint = flow.jacksonCopy().tap {\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowDstEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.destination.portNumber == updatedFlowDstEndpoint.destination.portNumber\n+            it.destination.vlanId == updatedFlowDstEndpoint.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        then: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port\n+            it.source.vlanId = updatedFlowDstEndpoint.source.vlanId + 1\n+            it.destination.portNumber = 10 // traffgen port\n+            it.destination.vlanId = updatedFlowDstEndpoint.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber\n+            it.source.vlanId == updatedFlow.source.vlanId\n+            it.destination.portNumber == updatedFlow.destination.portNumber\n+            it.destination.vlanId == updatedFlow.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NDkzNQ=="}, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzE3Nzk5OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowNToxMVrOHaP5mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzo0NToxOVrOHaRM-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NTUyOQ==", "bodyText": "not required", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497285529", "createdAt": "2020-09-30T07:05:11Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,117 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't rebuild path for a flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: vlanId on the src endpoint\"\n+        def updatedFlowSrcEndpoint = flow.jacksonCopy().tap {\n+            it.source.vlanId = flow.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowSrcEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlowSrcEndpoint.source.portNumber\n+            it.source.vlanId == updatedFlowSrcEndpoint.source.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        when: \"Update the flow: vlanId on the dst endpoint\"\n+        def updatedFlowDstEndpoint = flow.jacksonCopy().tap {\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowDstEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.destination.portNumber == updatedFlowDstEndpoint.destination.portNumber\n+            it.destination.vlanId == updatedFlowDstEndpoint.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        then: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port\n+            it.source.vlanId = updatedFlowDstEndpoint.source.vlanId + 1\n+            it.destination.portNumber = 10 // traffgen port\n+            it.destination.vlanId = updatedFlowDstEndpoint.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber\n+            it.source.vlanId == updatedFlow.source.vlanId\n+            it.destination.portNumber == updatedFlow.destination.portNumber\n+            it.destination.vlanId == updatedFlow.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        and: \"Flow is valid\"\n+        northbound.validateFlow(flow.flowId).each { direction -> assert direction.asExpected }\n+\n+        and: \"System allows traffic on the flow\"\n+        def traffExam = traffExamProvider.get()\n+        def examFlow = new FlowTrafficExamBuilder(topology, traffExam).buildBidirectionalExam(\n+                flowHelperV2.toV1(updatedFlow), 100, 5\n+        )\n+        withPool {\n+            [examFlow.forward, examFlow.reverse].eachParallel { direction ->\n+                def resources = traffExam.startExam(direction)\n+                direction.setResources(resources)\n+                assert traffExam.waitExam(direction).hasTraffic()\n+            }\n+        }\n+\n+        and: \"All involved switches pass switch validation\"\n+        withPool {\n+            currentPath*.switchId.eachParallel { SwitchId swId ->\n+                with(northbound.validateSwitch(swId)) { validation ->\n+                    validation.verifyRuleSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                    validation.verifyMeterSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                }\n+            }\n+        }\n+        def involvedSwitchesPassSwValidation = true\n+\n+        cleanup: \"Revert system to original state\"\n+        flow && flowHelperV2.deleteFlow(flow.flowId)\n+        northbound.deleteLinkProps(northbound.getAllLinkProps())\n+        !involvedSwitchesPassSwValidation && currentPath*.switchId.each { SwitchId swId ->\n+            northbound.synchronizeSwitch(swId, true)\n+        }\n+        database.resetCosts()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNjg3NA==", "bodyText": "you are right, it is needless\nallLinkProps are already deleted\nfixed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497306874", "createdAt": "2020-09-30T07:45:19Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudV2Spec.groovy", "diffHunk": "@@ -1104,6 +1103,117 @@ class FlowCrudV2Spec extends HealthCheckSpecification {\n         }\n     }\n \n+    @Tidy\n+    def \"System doesn't rebuild path for a flow to more preferable path while updating portNumber/vlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            allTraffgenSwitchIds.contains(swP.src.dpId) && allTraffgenSwitchIds.contains(swP.dst.dpId) &&\n+                    swP.paths.size() >= 2\n+        } ?: assumeTrue(\"Unable to find required switches/paths in topology\",false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair, false)\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: vlanId on the src endpoint\"\n+        def updatedFlowSrcEndpoint = flow.jacksonCopy().tap {\n+            it.source.vlanId = flow.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowSrcEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlowSrcEndpoint.source.portNumber\n+            it.source.vlanId == updatedFlowSrcEndpoint.source.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        when: \"Update the flow: vlanId on the dst endpoint\"\n+        def updatedFlowDstEndpoint = flow.jacksonCopy().tap {\n+            it.destination.vlanId = flow.source.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlowDstEndpoint)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.destination.portNumber == updatedFlowDstEndpoint.destination.portNumber\n+            it.destination.vlanId == updatedFlowDstEndpoint.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        then: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.portNumber = 10 // traffgen port\n+            it.source.vlanId = updatedFlowDstEndpoint.source.vlanId + 1\n+            it.destination.portNumber = 10 // traffgen port\n+            it.destination.vlanId = updatedFlowDstEndpoint.destination.vlanId + 1\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.portNumber == updatedFlow.source.portNumber\n+            it.source.vlanId == updatedFlow.source.vlanId\n+            it.destination.portNumber == updatedFlow.destination.portNumber\n+            it.destination.vlanId == updatedFlow.destination.vlanId\n+        }\n+\n+        and: \"Flow path is not rebuild\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath\n+        }\n+\n+        and: \"Flow is valid\"\n+        northbound.validateFlow(flow.flowId).each { direction -> assert direction.asExpected }\n+\n+        and: \"System allows traffic on the flow\"\n+        def traffExam = traffExamProvider.get()\n+        def examFlow = new FlowTrafficExamBuilder(topology, traffExam).buildBidirectionalExam(\n+                flowHelperV2.toV1(updatedFlow), 100, 5\n+        )\n+        withPool {\n+            [examFlow.forward, examFlow.reverse].eachParallel { direction ->\n+                def resources = traffExam.startExam(direction)\n+                direction.setResources(resources)\n+                assert traffExam.waitExam(direction).hasTraffic()\n+            }\n+        }\n+\n+        and: \"All involved switches pass switch validation\"\n+        withPool {\n+            currentPath*.switchId.eachParallel { SwitchId swId ->\n+                with(northbound.validateSwitch(swId)) { validation ->\n+                    validation.verifyRuleSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                    validation.verifyMeterSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                }\n+            }\n+        }\n+        def involvedSwitchesPassSwValidation = true\n+\n+        cleanup: \"Revert system to original state\"\n+        flow && flowHelperV2.deleteFlow(flow.flowId)\n+        northbound.deleteLinkProps(northbound.getAllLinkProps())\n+        !involvedSwitchesPassSwValidation && currentPath*.switchId.each { SwitchId swId ->\n+            northbound.synchronizeSwitch(swId, true)\n+        }\n+        database.resetCosts()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NTUyOQ=="}, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzE4MTE5OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/QinQFlowSpec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowNjoxMFrOHaP7iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzo0Njo0MVrOHaRP5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NjAyNQ==", "bodyText": "assert", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497286025", "createdAt": "2020-09-30T07:06:10Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/QinQFlowSpec.groovy", "diffHunk": "@@ -885,4 +887,80 @@ class QinQFlowSpec extends HealthCheckSpecification {\n         cleanup:\n         flow && flowHelperV2.deleteFlow(flow.flowId)\n     }\n+\n+    @Tidy\n+    def \"System doesn't rebuild flow path to more preferable path while updating innerVlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            [it.src, it.dst].every { sw ->\n+                sw.dpId in allTraffgenSwitchIds && northbound.getSwitchProperties(sw.dpId).multiTable\n+            } && it.paths.size() > 2\n+        } ?: assumeTrue(\"Not able to find enough switches with traffgens and in multi-table mode\", false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flow.source.innerVlanId = flow.source.vlanId\n+        flow.destination.innerVlanId = flow.destination.vlanId\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.innerVlanId = flow.destination.vlanId\n+            it.destination.innerVlanId = flow.source.vlanId\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.innerVlanId == updatedFlow.source.innerVlanId\n+            it.destination.innerVlanId == updatedFlow.destination.innerVlanId\n+        }\n+\n+        and: \"Flow is not rerouted\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNzYyMw==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3739#discussion_r497307623", "createdAt": "2020-09-30T07:46:41Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/QinQFlowSpec.groovy", "diffHunk": "@@ -885,4 +887,80 @@ class QinQFlowSpec extends HealthCheckSpecification {\n         cleanup:\n         flow && flowHelperV2.deleteFlow(flow.flowId)\n     }\n+\n+    @Tidy\n+    def \"System doesn't rebuild flow path to more preferable path while updating innerVlanId\"() {\n+        given: \"Two active switches connected to traffgens with two possible paths at least\"\n+        def allTraffgenSwitchIds = topology.activeTraffGens*.switchConnected*.dpId ?:\n+                assumeTrue(\"Should be at least two active traffgens connected to switches\", false)\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            [it.src, it.dst].every { sw ->\n+                sw.dpId in allTraffgenSwitchIds && northbound.getSwitchProperties(sw.dpId).multiTable\n+            } && it.paths.size() > 2\n+        } ?: assumeTrue(\"Not able to find enough switches with traffgens and in multi-table mode\", false)\n+\n+        and: \"A flow\"\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flow.source.innerVlanId = flow.source.vlanId\n+        flow.destination.innerVlanId = flow.destination.vlanId\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Make the current path less preferable than alternatives\"\n+        def currentPath = pathHelper.convert(northbound.getFlowPath(flow.flowId))\n+        def alternativePaths = switchPair.paths.findAll { it != currentPath }\n+        alternativePaths.each { pathHelper.makePathMorePreferable(it, currentPath) }\n+\n+        and: \"Update the flow: port number and vlanId on the src/dst endpoints\"\n+        def updatedFlow = flow.jacksonCopy().tap {\n+            it.source.innerVlanId = flow.destination.vlanId\n+            it.destination.innerVlanId = flow.source.vlanId\n+        }\n+        flowHelperV2.updateFlow(flow.flowId, updatedFlow)\n+\n+        then: \"Flow is really updated\"\n+        with(northboundV2.getFlow(flow.flowId)) {\n+            it.source.innerVlanId == updatedFlow.source.innerVlanId\n+            it.destination.innerVlanId == updatedFlow.destination.innerVlanId\n+        }\n+\n+        and: \"Flow is not rerouted\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            pathHelper.convert(northbound.getFlowPath(flow.flowId)) == currentPath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NjAyNQ=="}, "originalCommit": {"oid": "b47ea2f257e0cfb2ef9371ab4557319acfad2dc3"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1832, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}