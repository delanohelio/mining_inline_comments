{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjA1MDM5", "number": 3851, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyMDowM1rOE4rt9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyOToyMFrOE4r8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODcxOTkwOnYy", "diffSide": "RIGHT", "path": "src-cpp/server42/src/Workers.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyMDowM1rOHywFyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozMDozM1rOHywf4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3ODc2Mg==", "bodyText": "Bit OR i.e. | should be cheaper than int64 sum.", "url": "https://github.com/telstra/open-kilda/pull/3851#discussion_r522978762", "createdAt": "2020-11-13T14:20:03Z", "author": {"login": "surabujin"}, "path": "src-cpp/server42/src/Workers.cpp", "diffHunk": "@@ -33,6 +34,16 @@ using namespace std::literals::chrono_literals;\n \n namespace org::openkilda {\n \n+    uint64_t get_current_timestamp() {\n+        auto now = std::chrono::time_point_cast<std::chrono::nanoseconds>(\n+                std::chrono::high_resolution_clock::now());\n+        auto duration = now.time_since_epoch();\n+        uint64_t seconds = std::chrono::duration_cast<std::chrono::seconds>(duration).count();\n+        uint64_t nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(duration - std::chrono::seconds(seconds)).count();\n+        uint64_t timestamp = (seconds << 32ul) + (nanoseconds & 0xFFFFFFFF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10d7c9d7b22afd0bc4407aa45923277299bf06c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NTQ0MQ==", "bodyText": "do not try to be smarter than GCC. =)", "url": "https://github.com/telstra/open-kilda/pull/3851#discussion_r522985441", "createdAt": "2020-11-13T14:30:33Z", "author": {"login": "nikitamarchenko"}, "path": "src-cpp/server42/src/Workers.cpp", "diffHunk": "@@ -33,6 +34,16 @@ using namespace std::literals::chrono_literals;\n \n namespace org::openkilda {\n \n+    uint64_t get_current_timestamp() {\n+        auto now = std::chrono::time_point_cast<std::chrono::nanoseconds>(\n+                std::chrono::high_resolution_clock::now());\n+        auto duration = now.time_since_epoch();\n+        uint64_t seconds = std::chrono::duration_cast<std::chrono::seconds>(duration).count();\n+        uint64_t nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(duration - std::chrono::seconds(seconds)).count();\n+        uint64_t timestamp = (seconds << 32ul) + (nanoseconds & 0xFFFFFFFF);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3ODc2Mg=="}, "originalCommit": {"oid": "f10d7c9d7b22afd0bc4407aa45923277299bf06c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODczMDQ4OnYy", "diffSide": "RIGHT", "path": "src-cpp/server42/src/Workers.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyMjoyOFrOHywMGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyOToyM1rOHywc5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4MDM3Nw==", "bodyText": "htobe64 can/shoult be done outside this(all) loop.", "url": "https://github.com/telstra/open-kilda/pull/3851#discussion_r522980377", "createdAt": "2020-11-13T14:22:28Z", "author": {"login": "surabujin"}, "path": "src-cpp/server42/src/Workers.cpp", "diffHunk": "@@ -64,8 +77,13 @@ namespace org::openkilda {\n                             mbuf_send_buffer[i].initFromRawPacket(*(pos+i), device);\n                             mbuf_send_buffer_p[i] = &mbuf_send_buffer[i];\n                             mbuf_send_buffer_p[i]->setFreeMbuf(true);\n-                        }\n \n+                            //TODO: can be switched to raw memory arithmetics\n+                            pcpp::Packet parsed_packet(mbuf_send_buffer_p[i], false, pcpp::UDP);\n+                            auto *udp_layer = parsed_packet.getLayerOfType<pcpp::UdpLayer>();\n+                            auto *payload = reinterpret_cast<org::openkilda::Payload *>(udp_layer->getLayerPayload());\n+                            payload->t0 = htobe64(timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10d7c9d7b22afd0bc4407aa45923277299bf06c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NDY3OQ==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3851#discussion_r522984679", "createdAt": "2020-11-13T14:29:23Z", "author": {"login": "nikitamarchenko"}, "path": "src-cpp/server42/src/Workers.cpp", "diffHunk": "@@ -64,8 +77,13 @@ namespace org::openkilda {\n                             mbuf_send_buffer[i].initFromRawPacket(*(pos+i), device);\n                             mbuf_send_buffer_p[i] = &mbuf_send_buffer[i];\n                             mbuf_send_buffer_p[i]->setFreeMbuf(true);\n-                        }\n \n+                            //TODO: can be switched to raw memory arithmetics\n+                            pcpp::Packet parsed_packet(mbuf_send_buffer_p[i], false, pcpp::UDP);\n+                            auto *udp_layer = parsed_packet.getLayerOfType<pcpp::UdpLayer>();\n+                            auto *payload = reinterpret_cast<org::openkilda::Payload *>(udp_layer->getLayerPayload());\n+                            payload->t0 = htobe64(timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4MDM3Nw=="}, "originalCommit": {"oid": "f10d7c9d7b22afd0bc4407aa45923277299bf06c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODc1NzU2OnYy", "diffSide": "RIGHT", "path": "src-cpp/server42/src/Workers.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyOToyMFrOHywcyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDo0MTowM1rOHyw6Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NDY0OA==", "bodyText": "Maybe it would be better to give some name to magic number 3 here?", "url": "https://github.com/telstra/open-kilda/pull/3851#discussion_r522984648", "createdAt": "2020-11-13T14:29:20Z", "author": {"login": "rozdy"}, "path": "src-cpp/server42/src/Workers.cpp", "diffHunk": "@@ -298,29 +333,44 @@ namespace org::openkilda {\n \n                 auto *payload = reinterpret_cast<org::openkilda::Payload *>(udp_layer->getLayerPayload());\n \n-                auto now = std::chrono::time_point_cast<std::chrono::nanoseconds>(\n-                        std::chrono::high_resolution_clock::now());\n-\n-                auto duration = now.time_since_epoch();\n-                uint64_t seconds = std::chrono::duration_cast<std::chrono::seconds>(duration).count();\n-                uint64_t nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();\n-\n                 std::string flow_id(payload->flow_id);\n \n                 if (!fake_duration.count(flow_id)) {\n-                    fake_duration[flow_id] = base_latency(rd);\n+                    fake_duration[flow_id] = base_latency(rd) * cycles_in_1_ms;\n                 }\n \n-                uint64_t timestamp = (seconds << 32ul) + (nanoseconds & 0xFFFFFFFF);\n+                std::shared_ptr<pcpp::MBufRawPacket> mbuf_raw_ptr(new pcpp::MBufRawPacket());\n+\n+                mbuf_raw_ptr->initFromRawPacket(rx_mbuf[i], device);\n+\n+                uint64_t latency_time = fake_duration[flow_id];\n+                const uint64_t delta_based_direction = 3 * cycles_in_1_ms;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10d7c9d7b22afd0bc4407aa45923277299bf06c"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk5MjE4Mw==", "bodyText": "Latency delta is based on the direction set to 3ms. Three because it gives a good view in opentsdb.", "url": "https://github.com/telstra/open-kilda/pull/3851#discussion_r522992183", "createdAt": "2020-11-13T14:41:03Z", "author": {"login": "nikitamarchenko"}, "path": "src-cpp/server42/src/Workers.cpp", "diffHunk": "@@ -298,29 +333,44 @@ namespace org::openkilda {\n \n                 auto *payload = reinterpret_cast<org::openkilda::Payload *>(udp_layer->getLayerPayload());\n \n-                auto now = std::chrono::time_point_cast<std::chrono::nanoseconds>(\n-                        std::chrono::high_resolution_clock::now());\n-\n-                auto duration = now.time_since_epoch();\n-                uint64_t seconds = std::chrono::duration_cast<std::chrono::seconds>(duration).count();\n-                uint64_t nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();\n-\n                 std::string flow_id(payload->flow_id);\n \n                 if (!fake_duration.count(flow_id)) {\n-                    fake_duration[flow_id] = base_latency(rd);\n+                    fake_duration[flow_id] = base_latency(rd) * cycles_in_1_ms;\n                 }\n \n-                uint64_t timestamp = (seconds << 32ul) + (nanoseconds & 0xFFFFFFFF);\n+                std::shared_ptr<pcpp::MBufRawPacket> mbuf_raw_ptr(new pcpp::MBufRawPacket());\n+\n+                mbuf_raw_ptr->initFromRawPacket(rx_mbuf[i], device);\n+\n+                uint64_t latency_time = fake_duration[flow_id];\n+                const uint64_t delta_based_direction = 3 * cycles_in_1_ms;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NDY0OA=="}, "originalCommit": {"oid": "f10d7c9d7b22afd0bc4407aa45923277299bf06c"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2286, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}