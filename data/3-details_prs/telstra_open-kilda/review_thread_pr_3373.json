{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODEzMDYy", "number": 3373, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoxNToxN1rOD1J-JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoxNToxN1rOD1J-JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDY0NDg1OnYy", "diffSide": "RIGHT", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/bolts/FlowPathSwapHubBolt.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoxNToxN1rOGKcpAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTowMzo1N1rOGMYooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwODE5NA==", "bodyText": "commented code", "url": "https://github.com/telstra/open-kilda/pull/3373#discussion_r413608194", "createdAt": "2020-04-23T08:15:17Z", "author": {"login": "niksv"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/bolts/FlowPathSwapHubBolt.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.flowhs.bolts;\n+\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_HISTORY_BOLT;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_NB_RESPONSE_SENDER;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_PING_SENDER;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_SPEAKER_WORKER;\n+import static org.openkilda.wfm.topology.utils.KafkaRecordTranslator.FIELD_ID_PAYLOAD;\n+\n+import org.openkilda.floodlight.api.request.FlowSegmentRequest;\n+import org.openkilda.floodlight.api.response.SpeakerFlowSegmentResponse;\n+import org.openkilda.messaging.Message;\n+import org.openkilda.messaging.command.CommandMessage;\n+import org.openkilda.messaging.command.flow.FlowPathSwapRequest;\n+import org.openkilda.messaging.command.flow.PeriodicPingCommand;\n+import org.openkilda.persistence.PersistenceManager;\n+import org.openkilda.wfm.error.PipelineException;\n+import org.openkilda.wfm.share.flow.resources.FlowResourcesConfig;\n+import org.openkilda.wfm.share.flow.resources.FlowResourcesManager;\n+import org.openkilda.wfm.share.history.model.FlowHistoryHolder;\n+import org.openkilda.wfm.share.hubandspoke.HubBolt;\n+import org.openkilda.wfm.share.utils.KeyProvider;\n+import org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream;\n+import org.openkilda.wfm.topology.flowhs.service.FlowPathSwapHubCarrier;\n+import org.openkilda.wfm.topology.flowhs.service.FlowPathSwapService;\n+import org.openkilda.wfm.topology.utils.MessageKafkaTranslator;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.storm.tuple.Values;\n+\n+public class FlowPathSwapHubBolt extends HubBolt implements FlowPathSwapHubCarrier {\n+\n+    private final FlowPathSwapConfig config;\n+    private final PersistenceManager persistenceManager;\n+    private final FlowResourcesConfig flowResourcesConfig;\n+\n+    private transient FlowPathSwapService service;\n+    private String currentKey;\n+\n+    public FlowPathSwapHubBolt(FlowPathSwapConfig config, PersistenceManager persistenceManager,\n+                               FlowResourcesConfig flowResourcesConfig) {\n+        super(config);\n+\n+        this.config = config;\n+        this.persistenceManager = persistenceManager;\n+        this.flowResourcesConfig = flowResourcesConfig;\n+\n+\n+    }\n+\n+    @Override\n+    protected void init() {\n+\n+        FlowResourcesManager resourcesManager = new FlowResourcesManager(persistenceManager, flowResourcesConfig);\n+        service = new FlowPathSwapService(this, persistenceManager, config.getTransactionRetriesLimit(),\n+                config.getSpeakerCommandRetriesLimit(), resourcesManager);\n+    }\n+\n+    @Override\n+    protected void onRequest(Tuple input) throws PipelineException {\n+        currentKey = input.getStringByField(MessageKafkaTranslator.FIELD_ID_KEY);\n+        FlowPathSwapRequest payload = (FlowPathSwapRequest) input.getValueByField(FIELD_ID_PAYLOAD);\n+        service.handleRequest(currentKey, pullContext(input), payload);\n+    }\n+\n+    @Override\n+    protected void onWorkerResponse(Tuple input) {\n+        String operationKey = input.getStringByField(MessageKafkaTranslator.FIELD_ID_KEY);\n+        currentKey = KeyProvider.getParentKey(operationKey);\n+        SpeakerFlowSegmentResponse flowResponse = (SpeakerFlowSegmentResponse) input.getValueByField(FIELD_ID_PAYLOAD);\n+        service.handleAsyncResponse(currentKey, flowResponse);\n+    }\n+\n+    @Override\n+    public void onTimeout(String key, Tuple tuple) {\n+        currentKey = key;\n+        // service.handleTimeout(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21957e5994ad1241f5543365ba9897cdf0f25768"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMDIzOQ==", "bodyText": "+1\nIs there any reason why this code is commented out?", "url": "https://github.com/telstra/open-kilda/pull/3373#discussion_r414330239", "createdAt": "2020-04-24T06:35:57Z", "author": {"login": "dpoltavets"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/bolts/FlowPathSwapHubBolt.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.flowhs.bolts;\n+\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_HISTORY_BOLT;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_NB_RESPONSE_SENDER;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_PING_SENDER;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_SPEAKER_WORKER;\n+import static org.openkilda.wfm.topology.utils.KafkaRecordTranslator.FIELD_ID_PAYLOAD;\n+\n+import org.openkilda.floodlight.api.request.FlowSegmentRequest;\n+import org.openkilda.floodlight.api.response.SpeakerFlowSegmentResponse;\n+import org.openkilda.messaging.Message;\n+import org.openkilda.messaging.command.CommandMessage;\n+import org.openkilda.messaging.command.flow.FlowPathSwapRequest;\n+import org.openkilda.messaging.command.flow.PeriodicPingCommand;\n+import org.openkilda.persistence.PersistenceManager;\n+import org.openkilda.wfm.error.PipelineException;\n+import org.openkilda.wfm.share.flow.resources.FlowResourcesConfig;\n+import org.openkilda.wfm.share.flow.resources.FlowResourcesManager;\n+import org.openkilda.wfm.share.history.model.FlowHistoryHolder;\n+import org.openkilda.wfm.share.hubandspoke.HubBolt;\n+import org.openkilda.wfm.share.utils.KeyProvider;\n+import org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream;\n+import org.openkilda.wfm.topology.flowhs.service.FlowPathSwapHubCarrier;\n+import org.openkilda.wfm.topology.flowhs.service.FlowPathSwapService;\n+import org.openkilda.wfm.topology.utils.MessageKafkaTranslator;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.storm.tuple.Values;\n+\n+public class FlowPathSwapHubBolt extends HubBolt implements FlowPathSwapHubCarrier {\n+\n+    private final FlowPathSwapConfig config;\n+    private final PersistenceManager persistenceManager;\n+    private final FlowResourcesConfig flowResourcesConfig;\n+\n+    private transient FlowPathSwapService service;\n+    private String currentKey;\n+\n+    public FlowPathSwapHubBolt(FlowPathSwapConfig config, PersistenceManager persistenceManager,\n+                               FlowResourcesConfig flowResourcesConfig) {\n+        super(config);\n+\n+        this.config = config;\n+        this.persistenceManager = persistenceManager;\n+        this.flowResourcesConfig = flowResourcesConfig;\n+\n+\n+    }\n+\n+    @Override\n+    protected void init() {\n+\n+        FlowResourcesManager resourcesManager = new FlowResourcesManager(persistenceManager, flowResourcesConfig);\n+        service = new FlowPathSwapService(this, persistenceManager, config.getTransactionRetriesLimit(),\n+                config.getSpeakerCommandRetriesLimit(), resourcesManager);\n+    }\n+\n+    @Override\n+    protected void onRequest(Tuple input) throws PipelineException {\n+        currentKey = input.getStringByField(MessageKafkaTranslator.FIELD_ID_KEY);\n+        FlowPathSwapRequest payload = (FlowPathSwapRequest) input.getValueByField(FIELD_ID_PAYLOAD);\n+        service.handleRequest(currentKey, pullContext(input), payload);\n+    }\n+\n+    @Override\n+    protected void onWorkerResponse(Tuple input) {\n+        String operationKey = input.getStringByField(MessageKafkaTranslator.FIELD_ID_KEY);\n+        currentKey = KeyProvider.getParentKey(operationKey);\n+        SpeakerFlowSegmentResponse flowResponse = (SpeakerFlowSegmentResponse) input.getValueByField(FIELD_ID_PAYLOAD);\n+        service.handleAsyncResponse(currentKey, flowResponse);\n+    }\n+\n+    @Override\n+    public void onTimeout(String key, Tuple tuple) {\n+        currentKey = key;\n+        // service.handleTimeout(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwODE5NA=="}, "originalCommit": {"oid": "21957e5994ad1241f5543365ba9897cdf0f25768"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzOTcxMg==", "bodyText": "Fixed, thanks", "url": "https://github.com/telstra/open-kilda/pull/3373#discussion_r415639712", "createdAt": "2020-04-27T09:03:57Z", "author": {"login": "timofei-durakov"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/bolts/FlowPathSwapHubBolt.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.flowhs.bolts;\n+\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_HISTORY_BOLT;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_NB_RESPONSE_SENDER;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_PING_SENDER;\n+import static org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream.HUB_TO_SPEAKER_WORKER;\n+import static org.openkilda.wfm.topology.utils.KafkaRecordTranslator.FIELD_ID_PAYLOAD;\n+\n+import org.openkilda.floodlight.api.request.FlowSegmentRequest;\n+import org.openkilda.floodlight.api.response.SpeakerFlowSegmentResponse;\n+import org.openkilda.messaging.Message;\n+import org.openkilda.messaging.command.CommandMessage;\n+import org.openkilda.messaging.command.flow.FlowPathSwapRequest;\n+import org.openkilda.messaging.command.flow.PeriodicPingCommand;\n+import org.openkilda.persistence.PersistenceManager;\n+import org.openkilda.wfm.error.PipelineException;\n+import org.openkilda.wfm.share.flow.resources.FlowResourcesConfig;\n+import org.openkilda.wfm.share.flow.resources.FlowResourcesManager;\n+import org.openkilda.wfm.share.history.model.FlowHistoryHolder;\n+import org.openkilda.wfm.share.hubandspoke.HubBolt;\n+import org.openkilda.wfm.share.utils.KeyProvider;\n+import org.openkilda.wfm.topology.flowhs.FlowHsTopology.Stream;\n+import org.openkilda.wfm.topology.flowhs.service.FlowPathSwapHubCarrier;\n+import org.openkilda.wfm.topology.flowhs.service.FlowPathSwapService;\n+import org.openkilda.wfm.topology.utils.MessageKafkaTranslator;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.storm.tuple.Values;\n+\n+public class FlowPathSwapHubBolt extends HubBolt implements FlowPathSwapHubCarrier {\n+\n+    private final FlowPathSwapConfig config;\n+    private final PersistenceManager persistenceManager;\n+    private final FlowResourcesConfig flowResourcesConfig;\n+\n+    private transient FlowPathSwapService service;\n+    private String currentKey;\n+\n+    public FlowPathSwapHubBolt(FlowPathSwapConfig config, PersistenceManager persistenceManager,\n+                               FlowResourcesConfig flowResourcesConfig) {\n+        super(config);\n+\n+        this.config = config;\n+        this.persistenceManager = persistenceManager;\n+        this.flowResourcesConfig = flowResourcesConfig;\n+\n+\n+    }\n+\n+    @Override\n+    protected void init() {\n+\n+        FlowResourcesManager resourcesManager = new FlowResourcesManager(persistenceManager, flowResourcesConfig);\n+        service = new FlowPathSwapService(this, persistenceManager, config.getTransactionRetriesLimit(),\n+                config.getSpeakerCommandRetriesLimit(), resourcesManager);\n+    }\n+\n+    @Override\n+    protected void onRequest(Tuple input) throws PipelineException {\n+        currentKey = input.getStringByField(MessageKafkaTranslator.FIELD_ID_KEY);\n+        FlowPathSwapRequest payload = (FlowPathSwapRequest) input.getValueByField(FIELD_ID_PAYLOAD);\n+        service.handleRequest(currentKey, pullContext(input), payload);\n+    }\n+\n+    @Override\n+    protected void onWorkerResponse(Tuple input) {\n+        String operationKey = input.getStringByField(MessageKafkaTranslator.FIELD_ID_KEY);\n+        currentKey = KeyProvider.getParentKey(operationKey);\n+        SpeakerFlowSegmentResponse flowResponse = (SpeakerFlowSegmentResponse) input.getValueByField(FIELD_ID_PAYLOAD);\n+        service.handleAsyncResponse(currentKey, flowResponse);\n+    }\n+\n+    @Override\n+    public void onTimeout(String key, Tuple tuple) {\n+        currentKey = key;\n+        // service.handleTimeout(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwODE5NA=="}, "originalCommit": {"oid": "21957e5994ad1241f5543365ba9897cdf0f25768"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1922, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}