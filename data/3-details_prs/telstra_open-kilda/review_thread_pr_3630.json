{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NzgxMjAz", "number": 3630, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODowMTowNlrOEPA1RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODowNToyN1rOEPA-wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTc3NzMyOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODowMTowNlrOGyfGyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowOToxM1rOGzLiFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5MTYyNg==", "bodyText": "@Tidy?", "url": "https://github.com/telstra/open-kilda/pull/3630#discussion_r455591626", "createdAt": "2020-07-16T08:01:06Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "diffHunk": "@@ -104,6 +104,7 @@ class FloodlightKafkaConnectionSpec extends HealthCheckSpecification {\n     def \"System can detect switch changes if they happen while Floodlight was disconnected after it reconnects\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc79fbe89e1dacf95fff4ce23c9dbc84273d6071"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxOTUxMA==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3630#discussion_r456319510", "createdAt": "2020-07-17T09:09:13Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "diffHunk": "@@ -104,6 +104,7 @@ class FloodlightKafkaConnectionSpec extends HealthCheckSpecification {\n     def \"System can detect switch changes if they happen while Floodlight was disconnected after it reconnects\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5MTYyNg=="}, "originalCommit": {"oid": "bc79fbe89e1dacf95fff4ce23c9dbc84273d6071"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTgwMTYyOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODowNToyN1rOGyfXUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowOToxN1rOGzLiNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5NTg1OQ==", "bodyText": "how do we know that floodlight is available again? probably we should add extra check like assert northbound.activeSwitches.size() == topology.activeSwitches.size()", "url": "https://github.com/telstra/open-kilda/pull/3630#discussion_r455595859", "createdAt": "2020-07-16T08:05:27Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "diffHunk": "@@ -121,7 +123,8 @@ class FloodlightKafkaConnectionSpec extends HealthCheckSpecification {\n             assert islUtils.getIslInfo(isls, isl.reversed).get().state == IslChangeType.FAILED\n         }\n \n-        and: \"Cleanup: restore the broken link\"\n+        cleanup:\n+        regionsOut && regions.each { lockKeeper.reviveFloodlight(it) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc79fbe89e1dacf95fff4ce23c9dbc84273d6071"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxOTU0Mg==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3630#discussion_r456319542", "createdAt": "2020-07-17T09:09:17Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "diffHunk": "@@ -121,7 +123,8 @@ class FloodlightKafkaConnectionSpec extends HealthCheckSpecification {\n             assert islUtils.getIslInfo(isls, isl.reversed).get().state == IslChangeType.FAILED\n         }\n \n-        and: \"Cleanup: restore the broken link\"\n+        cleanup:\n+        regionsOut && regions.each { lockKeeper.reviveFloodlight(it) }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5NTg1OQ=="}, "originalCommit": {"oid": "bc79fbe89e1dacf95fff4ce23c9dbc84273d6071"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1774, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}