{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzc3NDA3", "number": 3490, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1ODozMFrOD-2R6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoxNjoxMVrOD-3gww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjI3NjI0OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1ODozMFrOGZMruQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowNjowMlrOGZahhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NTM4NQ==", "bodyText": "do we really want that generic wrapper?", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429075385", "createdAt": "2020-05-22T06:58:30Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.pce.model;\n+\n+import static com.google.common.primitives.Longs.asList;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Path weight.\n+ */\n+public class PathWeight implements Comparable<PathWeight> {\n+\n+    private List<Long> params;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNDIwMQ==", "bodyText": "I guess we need so generic param because PathWeight will be used with different strategies. And different strategies can have different param names.", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429104201", "createdAt": "2020-05-22T08:08:44Z", "author": {"login": "niksv"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.pce.model;\n+\n+import static com.google.common.primitives.Longs.asList;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Path weight.\n+ */\n+public class PathWeight implements Comparable<PathWeight> {\n+\n+    private List<Long> params;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NTM4NQ=="}, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMjE1MA==", "bodyText": "For now we have more generic wrapper for weight - long. This wrapper add ability to operate with multiple long values as path weight.\nAdded more helpful javadoc also.", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429302150", "createdAt": "2020-05-22T15:06:02Z", "author": {"login": "rozdy"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.pce.model;\n+\n+import static com.google.common.primitives.Longs.asList;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Path weight.\n+ */\n+public class PathWeight implements Comparable<PathWeight> {\n+\n+    private List<Long> params;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NTM4NQ=="}, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjQ2MDUwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/finder/BestWeightAndShortestPathFinder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODowOTo1OFrOGZOefA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowNjoxN1rOGZaiBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNDc2NA==", "bodyText": "nit: I think you can use\npath.stream().map(weightFunction::apply).map(weightFunction::toLong()).sum()", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429104764", "createdAt": "2020-05-22T08:09:58Z", "author": {"login": "niksv"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/finder/BestWeightAndShortestPathFinder.java", "diffHunk": "@@ -227,7 +228,7 @@ private long getTotalWeight(List<Edge> path, WeightFunction weightFunction) {\n         if (path.isEmpty()) {\n             return Long.MAX_VALUE;\n         }\n-        return path.stream().mapToLong(weightFunction::apply).sum();\n+        return path.stream().mapToLong(edge -> weightFunction.apply(edge).toLong()).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMjI3OQ==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429302279", "createdAt": "2020-05-22T15:06:17Z", "author": {"login": "rozdy"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/finder/BestWeightAndShortestPathFinder.java", "diffHunk": "@@ -227,7 +228,7 @@ private long getTotalWeight(List<Edge> path, WeightFunction weightFunction) {\n         if (path.isEmpty()) {\n             return Long.MAX_VALUE;\n         }\n-        return path.stream().mapToLong(weightFunction::apply).sum();\n+        return path.stream().mapToLong(edge -> weightFunction.apply(edge).toLong()).sum();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNDc2NA=="}, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjQ3ODExOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoxNjoxMVrOGZOpjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowNjoyNFrOGZaiOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNzU5Nw==", "bodyText": "nit: you can use just Integer.compare(firstSize, secondSize)", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429107597", "createdAt": "2020-05-22T08:16:11Z", "author": {"login": "niksv"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.pce.model;\n+\n+import static com.google.common.primitives.Longs.asList;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Path weight.\n+ */\n+public class PathWeight implements Comparable<PathWeight> {\n+\n+    private List<Long> params;\n+\n+    public PathWeight(long... params) {\n+        this.params = asList(params);\n+    }\n+\n+    public PathWeight(List<Long> params) {\n+        this.params = params;\n+    }\n+\n+    /**\n+     * Sum two path weights.\n+     * @param toAdd path weight to add.\n+     * @return new path weight.\n+     */\n+    public PathWeight add(PathWeight toAdd) {\n+        List<Long> result = new ArrayList<>();\n+        Iterator<Long> firstIterator = params.iterator();\n+        Iterator<Long> secondIterator = toAdd.params.iterator();\n+        while (firstIterator.hasNext() || secondIterator.hasNext()) {\n+            long first = firstIterator.hasNext() ? firstIterator.next() : 0L;\n+            long second = secondIterator.hasNext() ? secondIterator.next() : 0L;\n+            result.add(first + second);\n+        }\n+        return new PathWeight(result);\n+    }\n+\n+    /**\n+     * Simple scalar representation of weight.\n+     * @return scalar weight representation.\n+     */\n+    public long toLong() {\n+        return params.size() > 0 ? params.get(0) : 0;\n+    }\n+\n+    @Override\n+    public int compareTo(PathWeight o) {\n+        int firstSize = params.size();\n+        int secondSize = o.params.size();\n+        int limit = Math.min(firstSize, secondSize);\n+        int i = 0;\n+        while (i < limit) {\n+            long first = params.get(i).longValue();\n+            long second = o.params.get(i).longValue();\n+            if (first != second) {\n+                return first > second ? 1 : -1;\n+            }\n+            i++;\n+        }\n+        if (firstSize == secondSize) {\n+            return 0;\n+        } else {\n+            return firstSize > secondSize ? 1 : -1;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMjMzMQ==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429302331", "createdAt": "2020-05-22T15:06:24Z", "author": {"login": "rozdy"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.pce.model;\n+\n+import static com.google.common.primitives.Longs.asList;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Path weight.\n+ */\n+public class PathWeight implements Comparable<PathWeight> {\n+\n+    private List<Long> params;\n+\n+    public PathWeight(long... params) {\n+        this.params = asList(params);\n+    }\n+\n+    public PathWeight(List<Long> params) {\n+        this.params = params;\n+    }\n+\n+    /**\n+     * Sum two path weights.\n+     * @param toAdd path weight to add.\n+     * @return new path weight.\n+     */\n+    public PathWeight add(PathWeight toAdd) {\n+        List<Long> result = new ArrayList<>();\n+        Iterator<Long> firstIterator = params.iterator();\n+        Iterator<Long> secondIterator = toAdd.params.iterator();\n+        while (firstIterator.hasNext() || secondIterator.hasNext()) {\n+            long first = firstIterator.hasNext() ? firstIterator.next() : 0L;\n+            long second = secondIterator.hasNext() ? secondIterator.next() : 0L;\n+            result.add(first + second);\n+        }\n+        return new PathWeight(result);\n+    }\n+\n+    /**\n+     * Simple scalar representation of weight.\n+     * @return scalar weight representation.\n+     */\n+    public long toLong() {\n+        return params.size() > 0 ? params.get(0) : 0;\n+    }\n+\n+    @Override\n+    public int compareTo(PathWeight o) {\n+        int firstSize = params.size();\n+        int secondSize = o.params.size();\n+        int limit = Math.min(firstSize, secondSize);\n+        int i = 0;\n+        while (i < limit) {\n+            long first = params.get(i).longValue();\n+            long second = o.params.get(i).longValue();\n+            if (first != second) {\n+                return first > second ? 1 : -1;\n+            }\n+            i++;\n+        }\n+        if (firstSize == secondSize) {\n+            return 0;\n+        } else {\n+            return firstSize > secondSize ? 1 : -1;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNzU5Nw=="}, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1984, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}