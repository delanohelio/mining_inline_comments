{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Mzg0NTcx", "number": 3958, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwODowNjowOFrOFnYpBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwOTowNTozN1rOFnaMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2ODQyNTAwOnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/AbstractBolt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwODowNjowOFrOI4_WSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwOTo0ODoyMVrOI5DtPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjYyOTA2Nw==", "bodyText": "this is not required actually", "url": "https://github.com/telstra/open-kilda/pull/3958#discussion_r596629067", "createdAt": "2021-03-18T08:06:08Z", "author": {"login": "timofei-durakov"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/AbstractBolt.java", "diffHunk": "@@ -66,6 +66,7 @@\n     private String lifeCycleEventSourceComponent;\n \n     public AbstractBolt() {\n+        this(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab5c38331847a6163996cccb22faea73f9e740"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjcwMDQ3OQ==", "bodyText": "I would like to keep it - just to not be surprised when somebody will extend AbstractBolt(String lifeCycleEventSourceComponent) constructor.", "url": "https://github.com/telstra/open-kilda/pull/3958#discussion_r596700479", "createdAt": "2021-03-18T09:48:21Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/AbstractBolt.java", "diffHunk": "@@ -66,6 +66,7 @@\n     private String lifeCycleEventSourceComponent;\n \n     public AbstractBolt() {\n+        this(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjYyOTA2Nw=="}, "originalCommit": {"oid": "67ab5c38331847a6163996cccb22faea73f9e740"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2ODQyNjc2OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/AbstractBolt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwODowNjozNlrOI4_XXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwOTo0NDo1NlrOI5Diyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjYyOTM0Mg==", "bodyText": "why do you remove transient here? p.s. default false is not required as well", "url": "https://github.com/telstra/open-kilda/pull/3958#discussion_r596629342", "createdAt": "2021-03-18T08:06:36Z", "author": {"login": "timofei-durakov"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/AbstractBolt.java", "diffHunk": "@@ -45,7 +45,7 @@\n \n     protected transient Logger log = makeLog();\n \n-    protected transient boolean active;\n+    protected boolean active = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab5c38331847a6163996cccb22faea73f9e740"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjY5NzgwMg==", "bodyText": "Because we should not loose it during topology upload. Its current value \"false\" allow to lose it, but in general we should not loose it. Same reason to obviously declare false value, just for readability.", "url": "https://github.com/telstra/open-kilda/pull/3958#discussion_r596697802", "createdAt": "2021-03-18T09:44:56Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/AbstractBolt.java", "diffHunk": "@@ -45,7 +45,7 @@\n \n     protected transient Logger log = makeLog();\n \n-    protected transient boolean active;\n+    protected boolean active = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjYyOTM0Mg=="}, "originalCommit": {"oid": "67ab5c38331847a6163996cccb22faea73f9e740"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2ODY3ODEwOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwOTowNToyMVrOI5BvCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwOTo1Mjo1NFrOI5D6eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjY2ODE2OA==", "bodyText": "extra spaces?", "url": "https://github.com/telstra/open-kilda/pull/3958#discussion_r596668168", "createdAt": "2021-03-18T09:05:21Z", "author": {"login": "timofei-durakov"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -125,34 +127,23 @@ private void speakerMessage(Tuple input, Message message) throws PipelineExcepti\n     private void proxySpeaker(Tuple input, Message message) throws PipelineException {\n         if (active) {\n             if (message instanceof InfoMessage) {\n-                proxySpeaker(input, ((InfoMessage) message).getData());\n+                proxy(input, ((InfoMessage) message).getData());\n             } else {\n                 log.error(\"Do not proxy speaker message - unexpected message type \\\"{}\\\"\", message.getClass());\n             }\n         }\n     }\n \n-    private void proxySpeaker(Tuple input, InfoData payload) throws PipelineException {\n-        if (payload instanceof IslInfoData) {\n-            emit(STREAM_WATCHER_ID, input, makeWatcherTuple(\n-                    input, new WatcherSpeakerDiscoveryCommand((IslInfoData) payload)));\n-        } else if (payload instanceof DiscoPacketSendingConfirmation) {\n-            emit(STREAM_WATCHER_ID, input, makeWatcherTuple(\n-                    input, new WatcherSpeakerSendConfirmationCommand((DiscoPacketSendingConfirmation) payload)));\n-        } else if (payload instanceof IslRoundTripLatency) {\n-            emit(STREAM_WATCHER_ID, input, makeWatcherTuple(\n-                    input, new WatcherSpeakerRoundTripDiscovery((IslRoundTripLatency) payload)));\n-        } else if (payload instanceof SwitchInfoData) {\n-            emit(input, makeDefaultTuple(input, new SwitchEventCommand((SwitchInfoData) payload)));\n-        } else if (payload instanceof PortInfoData) {\n-            emit(input, makeDefaultTuple(input, new SwitchPortEventCommand((PortInfoData) payload)));\n-        } else if (payload instanceof NetworkDumpSwitchData) {\n-            emit(input, makeDefaultTuple(\n-                    input, new SwitchManagedEventCommand(((NetworkDumpSwitchData) payload).getSwitchView())));\n-        } else if (payload instanceof UnmanagedSwitchNotification) {\n-            emit(input, makeDefaultTuple(\n-                    input, new SwitchUnmanagedEventCommand(((UnmanagedSwitchNotification) payload).getSwitchId())));\n-        } else if (payload instanceof DeactivateSwitchInfoData) {\n+    private void proxy(Tuple input, InfoData payload) throws PipelineException {\n+        if (! proxyUnconditionally(input, payload)) {\n+            if (! proxyOnlyWhenActive(input, payload)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab5c38331847a6163996cccb22faea73f9e740"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjcwMzg2NA==", "bodyText": "em... have I mixed up java's coding style with python's?.. I was sure we must have a space after ! operator.", "url": "https://github.com/telstra/open-kilda/pull/3958#discussion_r596703864", "createdAt": "2021-03-18T09:52:54Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -125,34 +127,23 @@ private void speakerMessage(Tuple input, Message message) throws PipelineExcepti\n     private void proxySpeaker(Tuple input, Message message) throws PipelineException {\n         if (active) {\n             if (message instanceof InfoMessage) {\n-                proxySpeaker(input, ((InfoMessage) message).getData());\n+                proxy(input, ((InfoMessage) message).getData());\n             } else {\n                 log.error(\"Do not proxy speaker message - unexpected message type \\\"{}\\\"\", message.getClass());\n             }\n         }\n     }\n \n-    private void proxySpeaker(Tuple input, InfoData payload) throws PipelineException {\n-        if (payload instanceof IslInfoData) {\n-            emit(STREAM_WATCHER_ID, input, makeWatcherTuple(\n-                    input, new WatcherSpeakerDiscoveryCommand((IslInfoData) payload)));\n-        } else if (payload instanceof DiscoPacketSendingConfirmation) {\n-            emit(STREAM_WATCHER_ID, input, makeWatcherTuple(\n-                    input, new WatcherSpeakerSendConfirmationCommand((DiscoPacketSendingConfirmation) payload)));\n-        } else if (payload instanceof IslRoundTripLatency) {\n-            emit(STREAM_WATCHER_ID, input, makeWatcherTuple(\n-                    input, new WatcherSpeakerRoundTripDiscovery((IslRoundTripLatency) payload)));\n-        } else if (payload instanceof SwitchInfoData) {\n-            emit(input, makeDefaultTuple(input, new SwitchEventCommand((SwitchInfoData) payload)));\n-        } else if (payload instanceof PortInfoData) {\n-            emit(input, makeDefaultTuple(input, new SwitchPortEventCommand((PortInfoData) payload)));\n-        } else if (payload instanceof NetworkDumpSwitchData) {\n-            emit(input, makeDefaultTuple(\n-                    input, new SwitchManagedEventCommand(((NetworkDumpSwitchData) payload).getSwitchView())));\n-        } else if (payload instanceof UnmanagedSwitchNotification) {\n-            emit(input, makeDefaultTuple(\n-                    input, new SwitchUnmanagedEventCommand(((UnmanagedSwitchNotification) payload).getSwitchId())));\n-        } else if (payload instanceof DeactivateSwitchInfoData) {\n+    private void proxy(Tuple input, InfoData payload) throws PipelineException {\n+        if (! proxyUnconditionally(input, payload)) {\n+            if (! proxyOnlyWhenActive(input, payload)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjY2ODE2OA=="}, "originalCommit": {"oid": "67ab5c38331847a6163996cccb22faea73f9e740"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2ODY3OTQ1OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwOTowNTozN1rOI5Bv1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwOTowNTozN1rOI5Bv1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjY2ODM3Mw==", "bodyText": "and here", "url": "https://github.com/telstra/open-kilda/pull/3958#discussion_r596668373", "createdAt": "2021-03-18T09:05:37Z", "author": {"login": "timofei-durakov"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -172,8 +163,54 @@ private void proxySpeaker(Tuple input, InfoData payload) throws PipelineExceptio\n         } else if (payload instanceof DeactivateIslInfoData) {\n             emit(STREAM_ISL_ID, input, makeIslTuple(input, new IslDeleteCommand((DeactivateIslInfoData) payload)));\n         } else {\n-            log.error(\"Do not proxy speaker message - unexpected message payload \\\"{}\\\"\", payload.getClass());\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean proxyOnlyWhenActive(Tuple input, InfoData payload) throws PipelineException {\n+        if (! active) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab5c38331847a6163996cccb22faea73f9e740"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2216, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}