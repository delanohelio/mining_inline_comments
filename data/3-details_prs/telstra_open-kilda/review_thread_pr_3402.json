{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2Njg5MjI3", "number": 3402, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MTo0NFrOD78z8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MTo0NFrOD78z8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTg4OTE0OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/InstallServer42lIngressFlow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MTo0NFrOGUlmkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MTo0NFrOGUlmkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MDc4NA==", "bodyText": "I'd suggest to add values to output here", "url": "https://github.com/telstra/open-kilda/pull/3402#discussion_r424240784", "createdAt": "2020-05-13T07:51:44Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/InstallServer42lIngressFlow.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.command.flow;\n+\n+import static org.openkilda.messaging.Utils.FLOW_ID;\n+import static org.openkilda.messaging.Utils.TRANSACTION_ID;\n+\n+import org.openkilda.messaging.Utils;\n+import org.openkilda.model.FlowEncapsulationType;\n+import org.openkilda.model.OutputVlanType;\n+import org.openkilda.model.SwitchId;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.util.UUID;\n+\n+@Getter\n+@Setter\n+@JsonSerialize\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@EqualsAndHashCode(callSuper = true)\n+public class InstallServer42lIngressFlow extends InstallTransitFlow {\n+    private static final long serialVersionUID = 2944794560559058839L;\n+\n+    @JsonProperty(\"customer_port\")\n+    protected int customerPort;\n+\n+    @JsonProperty(\"input_vlan_id\")\n+    protected Integer inputVlanId;\n+\n+    @JsonProperty(\"output_vlan_type\")\n+    protected OutputVlanType outputVlanType;\n+\n+    @JsonProperty(\"meter_id\")\n+    protected Long meterId;\n+\n+    @JsonProperty(\"egress_switch_id\")\n+    protected SwitchId egressSwitchId;\n+\n+    /**\n+     * Instance constructor.\n+     *\n+     * @param transactionId  transaction id\n+     * @param id             id of the flow\n+     * @param cookie         flow cookie\n+     * @param switchId       switch ID for flow installation\n+     * @param inputPort      input port of the flow\n+     * @param outputPort     output port of the flow\n+     * @param inputVlanId    input vlan id value\n+     * @param transitEncapsulationId  transit encapsulation id value\n+     * @param transitEncapsulationType  transit encapsulation type value\n+     * @param outputVlanType output vlan type action\n+     * @param meterId        flow meter id\n+     * @param egressSwitchId id of the ingress switch\n+     * @throws IllegalArgumentException if any of mandatory parameters is null\n+     */\n+    @Builder\n+    @JsonCreator\n+    public InstallServer42lIngressFlow(@JsonProperty(TRANSACTION_ID) final UUID transactionId,\n+                                       @JsonProperty(FLOW_ID) final String id,\n+                                       @JsonProperty(\"cookie\") final Long cookie,\n+                                       @JsonProperty(\"switch_id\") final SwitchId switchId,\n+                                       @JsonProperty(\"input_port\") final Integer inputPort,\n+                                       @JsonProperty(\"output_port\") final Integer outputPort,\n+                                       @JsonProperty(\"customer_port\") final Integer customerPort,\n+                                       @JsonProperty(\"input_vlan_id\") final Integer inputVlanId,\n+                                       @JsonProperty(\"transit_encapsulation_id\") final Integer transitEncapsulationId,\n+                                       @JsonProperty(\"transit_encapsulation_type\") final FlowEncapsulationType\n+                                          transitEncapsulationType,\n+                                       @JsonProperty(\"output_vlan_type\") final OutputVlanType outputVlanType,\n+                                       @JsonProperty(\"meter_id\") final Long meterId,\n+                                       @JsonProperty(\"egress_switch_id\") final SwitchId egressSwitchId) {\n+        super(transactionId, id, cookie, switchId, inputPort, outputPort, transitEncapsulationId,\n+                transitEncapsulationType, true);\n+        setCustomerPort(customerPort);\n+        setInputVlanId(inputVlanId);\n+        setOutputVlanType(outputVlanType);\n+        setMeterId(meterId);\n+        setEgressSwitchId(egressSwitchId);\n+    }\n+\n+    /**\n+     * Sets output action on the vlan tag.\n+     *\n+     * @param outputVlanType action on the vlan tag\n+     */\n+    public void setOutputVlanType(final OutputVlanType outputVlanType) {\n+        if (outputVlanType == null) {\n+            throw new IllegalArgumentException(\"need to set output_vlan_type\");\n+        } else if (!Utils.validateInputVlanType(inputVlanId, outputVlanType)) {\n+            throw new IllegalArgumentException(\"need to set valid values for input_vlan_id and output_vlan_type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e741b119cd12a4378153cd7dd4b1906f31df717"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1938, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}