{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NTk3OTQ4", "number": 3722, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1OToyMlrOEjJYsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1OTo0NlrOEjJZ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjg5MzkyOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/BfdSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1OToyMlrOHRVv5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1OToyMlrOHRVv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0NDE2Nw==", "bodyText": "@Tidy?", "url": "https://github.com/telstra/open-kilda/pull/3722#discussion_r487944167", "createdAt": "2020-09-14T13:59:22Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/BfdSpec.groovy", "diffHunk": "@@ -245,4 +296,142 @@ class BfdSpec extends HealthCheckSpecification {\n             }\n         }\n     }\n+\n+    def \"Able to create/update BFD session with custom properties\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636f3d40aeb9e5ec645ffa83a801ecb3c9ef4055"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjg5Njk1OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/BfdSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1OTo0NlrOHRVxdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1OTo0NlrOHRVxdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0NDU2Ng==", "bodyText": "@Tidy?", "url": "https://github.com/telstra/open-kilda/pull/3722#discussion_r487944566", "createdAt": "2020-09-14T13:59:46Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/BfdSpec.groovy", "diffHunk": "@@ -245,4 +296,142 @@ class BfdSpec extends HealthCheckSpecification {\n             }\n         }\n     }\n+\n+    def \"Able to create/update BFD session with custom properties\"() {\n+        given: \"An ISL between two Noviflow switches\"\n+        def isl = topology.islsForActiveSwitches.find { it.srcSwitch.noviflow && it.dstSwitch.noviflow }\n+        assumeTrue(\"The test requires at least one BFD ISL\", isl as boolean)\n+\n+        when: \"Create bfd session with custom properties\"\n+        def bfdProps = new BfdProperties(100, (short)1)\n+        northboundV2.setLinkBfd(isl, bfdProps)\n+\n+        then: \"'get ISL' and 'get BFD' api reflect the changes\"\n+        Wrappers.wait(WAIT_OFFSET / 2) {\n+            [isl, isl.reversed].each {\n+                verifyAll(northbound.getLink(it)) {\n+                    enableBfd\n+                    bfdSessionStatus == \"up\"\n+                }\n+                verifyAll(northboundV2.getLinkBfd(it)) {\n+                    properties == bfdProps\n+                    effectiveSource.properties == bfdProps\n+                    effectiveDestination.properties == bfdProps\n+                }\n+            }\n+        }\n+\n+        when: \"Update bfd session with custom properties\"\n+        def updatedBfdProps = new BfdProperties(500, (short)5)\n+        northboundV2.setLinkBfd(isl, updatedBfdProps)\n+\n+        then: \"'get ISL' and 'get BFD' api reflect the changes\"\n+        Wrappers.wait(WAIT_OFFSET / 2) {\n+            [isl, isl.reversed].each {\n+                verifyAll(northbound.getLink(it)) {\n+                    enableBfd\n+                    bfdSessionStatus == \"up\"\n+                }\n+                verifyAll(northboundV2.getLinkBfd(it)) {\n+                    properties == updatedBfdProps\n+                    effectiveSource.properties == updatedBfdProps\n+                    effectiveDestination.properties == updatedBfdProps\n+                }\n+            }\n+        }\n+\n+        cleanup: \"Disable bfd\"\n+        bfdProps && northboundV2.deleteLinkBfd(isl)\n+    }\n+\n+    @Unroll\n+    def \"Unable to create bfd with #data.descr\"() {\n+        given: \"An ISL between two Noviflow switches\"\n+        def isl = topology.islsForActiveSwitches.find { it.srcSwitch.noviflow && it.dstSwitch.noviflow }\n+        assumeTrue(\"The test requires at least one BFD ISL\", isl as boolean)\n+\n+        when: \"Try enabling bfd with forbidden properties\"\n+        northboundV2.setLinkBfd(isl, data.props)\n+\n+        then: \"Error is returned\"\n+        def e = thrown(HttpClientErrorException)\n+        e.statusCode == HttpStatus.BAD_REQUEST\n+\n+        where:\n+        data << [\n+                [\n+                        descr: \"too small interval\",\n+                        props: new BfdProperties(99, (short)1)\n+                ],\n+                [\n+                        descr: \"too small multiplier\",\n+                        props: new BfdProperties(100, (short)0)\n+                ]\n+        ]\n+    }\n+\n+    def \"Able to CRUD BFD sessions using v1 API\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636f3d40aeb9e5ec645ffa83a801ecb3c9ef4055"}, "originalPosition": 290}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1823, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}