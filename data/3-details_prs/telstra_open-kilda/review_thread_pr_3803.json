{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjA5NzIx", "number": 3803, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0Mjo1NVrOFCdifw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoyMDowOVrOFChaqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTI1NDM5OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0Mjo1NVrOIBoiYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0Mjo1NVrOIBoiYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4MzY0OQ==", "bodyText": "As for me kafkaConfig.getHosts() is ... weird enough.", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r538583649", "createdAt": "2020-12-08T16:42:55Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "diffHunk": "@@ -99,12 +111,36 @@ protected AbstractTopology(LaunchEnvironment env, Class<T> topologyConfigClass)\n         kafkaConfig = configurationProvider.getConfiguration(KafkaConfig.class);\n \n         logger.debug(\"Topology built {}: kafka={}, parallelism={}, workers={}\",\n-                topologyName, kafkaConfig.getHosts(), topologyConfig.getParallelism(),\n-                topologyConfig.getWorkers());\n+                topologyName, kafkaConfig.getHosts(), getTopologyParallelism(), getTopologyWorkers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2672e241e677aa4d9842fa520137fa4c6bc73c99"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTI4NDYyOnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0NzoyMlrOIBo16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNTowNlrOIClIYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4ODY0OA==", "bodyText": "looks like we buildin this yamls inside .jar. In this case I don't see any reason to generate them with confd, we should put \"raw\" yaml files into the resources folder. The only reason to keep confd generated configs - the ability to change configuration option without recompile project. If we can't change it without recompilation, we can get rid from confd layer.", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r538588648", "createdAt": "2020-12-08T16:47:22Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "diffHunk": "@@ -99,12 +111,36 @@ protected AbstractTopology(LaunchEnvironment env, Class<T> topologyConfigClass)\n         kafkaConfig = configurationProvider.getConfiguration(KafkaConfig.class);\n \n         logger.debug(\"Topology built {}: kafka={}, parallelism={}, workers={}\",\n-                topologyName, kafkaConfig.getHosts(), topologyConfig.getParallelism(),\n-                topologyConfig.getWorkers());\n+                topologyName, kafkaConfig.getHosts(), getTopologyParallelism(), getTopologyWorkers());\n     }\n \n-    protected String getDefaultTopologyName() {\n-        return getClass().getSimpleName().toLowerCase();\n+    private Optional<TopologyDef> loadTopologyDef(String topologyDefinitionName, Properties properties) {\n+        try {\n+            // Check the definition in resources for existence.\n+            String yamlResource = format(\"/%s.yaml\", topologyDefinitionName);\n+            if (FluxParser.class.getResourceAsStream(yamlResource) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2672e241e677aa4d9842fa520137fa4c6bc73c99"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NjQxNg==", "bodyText": "For topology definition files I reuse the templating approach we apply for topology.properties. So a developer defines which Storm components require individual configuration, and puts it into the corresponding topology definition. Then during the deployment, we can override the file in the way we do for topology.properties.", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r539576416", "createdAt": "2020-12-09T19:15:06Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "diffHunk": "@@ -99,12 +111,36 @@ protected AbstractTopology(LaunchEnvironment env, Class<T> topologyConfigClass)\n         kafkaConfig = configurationProvider.getConfiguration(KafkaConfig.class);\n \n         logger.debug(\"Topology built {}: kafka={}, parallelism={}, workers={}\",\n-                topologyName, kafkaConfig.getHosts(), topologyConfig.getParallelism(),\n-                topologyConfig.getWorkers());\n+                topologyName, kafkaConfig.getHosts(), getTopologyParallelism(), getTopologyWorkers());\n     }\n \n-    protected String getDefaultTopologyName() {\n-        return getClass().getSimpleName().toLowerCase();\n+    private Optional<TopologyDef> loadTopologyDef(String topologyDefinitionName, Properties properties) {\n+        try {\n+            // Check the definition in resources for existence.\n+            String yamlResource = format(\"/%s.yaml\", topologyDefinitionName);\n+            if (FluxParser.class.getResourceAsStream(yamlResource) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4ODY0OA=="}, "originalCommit": {"oid": "2672e241e677aa4d9842fa520137fa4c6bc73c99"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTgzNDU4OnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/resources/connecteddevices-topology.yaml.example", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoxMTozMFrOIBubIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjowNjozMFrOICcjiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4MDA5Nw==", "bodyText": "I would like to not have these *-topology.yaml.exmapl files. There are too many of them. We have issues with supporting ... much lover count of example config for existing components. We will fail to support these examples.", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r538680097", "createdAt": "2020-12-08T18:11:30Z", "author": {"login": "surabujin"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/resources/connecteddevices-topology.yaml.example", "diffHunk": "@@ -0,0 +1,16 @@\n+# topology configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2672e241e677aa4d9842fa520137fa4c6bc73c99"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzNTkxMw==", "bodyText": "Make sense. I simplified them as much as possible. But due to the issue in confd (kelseyhightower/confd#735), we either create the resources folders during the update-props step or take a place with an example file.", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r539435913", "createdAt": "2020-12-09T16:06:30Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/resources/connecteddevices-topology.yaml.example", "diffHunk": "@@ -0,0 +1,16 @@\n+# topology configuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4MDA5Nw=="}, "originalCommit": {"oid": "2672e241e677aa4d9842fa520137fa4c6bc73c99"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTg4OTcxOnYy", "diffSide": "RIGHT", "path": "src-java/gradle/wrapper/gradle-wrapper.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoyMDowOVrOIBu9_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNToxOVrOIClI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4OTAyMA==", "bodyText": "Is it an intentional change?", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r538689020", "createdAt": "2020-12-08T18:20:09Z", "author": {"login": "surabujin"}, "path": "src-java/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,5 +1,5 @@\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-6.7-bin.zip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2672e241e677aa4d9842fa520137fa4c6bc73c99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NjU2OA==", "bodyText": "Nope. Reverted.", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r539576568", "createdAt": "2020-12-09T19:15:19Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,5 +1,5 @@\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-6.7-bin.zip", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4OTAyMA=="}, "originalCommit": {"oid": "2672e241e677aa4d9842fa520137fa4c6bc73c99"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2245, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}