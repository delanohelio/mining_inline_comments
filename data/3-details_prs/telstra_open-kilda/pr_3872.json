{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1OTk3OTYx", "number": 3872, "title": "Added kafka message versioning with ZooKeeper", "bodyText": "This PR adds kafka Header to all Kafka messages in Kilda. This is needed to isolate components by version.\nIf a component read Kafka message without version or with different version - this message will be skipped.\nEach component gets current version from ZooKeeper during start up. If ZooKeeper has no version for component default version will be used.\nAt this moment all components will use default version. When Zero Downtime feature will be finished Kilda will use some other version.", "createdAt": "2020-11-23T21:13:35Z", "url": "https://github.com/telstra/open-kilda/pull/3872", "merged": true, "mergeCommit": {"oid": "7353e4e9c2d17de6c62f8a2e611557d0f5828cc6"}, "closed": true, "closedAt": "2020-12-25T12:34:53Z", "author": {"login": "niksv"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfk2JogBqjQwMzEyNzE4NzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdplUhbABqjQxNDg4NDY1MjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8848aa46723063fed5bbbf53db4a3776413e8d74", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/8848aa46723063fed5bbbf53db4a3776413e8d74", "committedDate": "2020-11-23T21:09:51Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "7b5321ca3f874e7fa318d31b6d2bc33ef2aaf51b", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/7b5321ca3f874e7fa318d31b6d2bc33ef2aaf51b", "committedDate": "2020-11-24T07:44:21Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b5321ca3f874e7fa318d31b6d2bc33ef2aaf51b", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/7b5321ca3f874e7fa318d31b6d2bc33ef2aaf51b", "committedDate": "2020-11-24T07:44:21Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "3885faa85f4ed5f48d3915078e85bdc806e23453", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/3885faa85f4ed5f48d3915078e85bdc806e23453", "committedDate": "2020-11-24T07:54:44Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3885faa85f4ed5f48d3915078e85bdc806e23453", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/3885faa85f4ed5f48d3915078e85bdc806e23453", "committedDate": "2020-11-24T07:54:44Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "9d3177a2e75412bdb118ba6f1a08873dbd5ae528", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/9d3177a2e75412bdb118ba6f1a08873dbd5ae528", "committedDate": "2020-11-25T08:18:07Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d3177a2e75412bdb118ba6f1a08873dbd5ae528", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/9d3177a2e75412bdb118ba6f1a08873dbd5ae528", "committedDate": "2020-11-25T08:18:07Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "731ed35ac0a40aad187737468474b3c860d36b22", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/731ed35ac0a40aad187737468474b3c860d36b22", "committedDate": "2020-11-25T13:08:48Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "731ed35ac0a40aad187737468474b3c860d36b22", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/731ed35ac0a40aad187737468474b3c860d36b22", "committedDate": "2020-11-25T13:08:48Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "8eed973e18eca4b022be0a4352c5407d703006b6", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/8eed973e18eca4b022be0a4352c5407d703006b6", "committedDate": "2020-11-25T13:10:11Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8eed973e18eca4b022be0a4352c5407d703006b6", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/8eed973e18eca4b022be0a4352c5407d703006b6", "committedDate": "2020-11-25T13:10:11Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "bcb2f05c227e2eeb17df224c1b814b22538de527", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/bcb2f05c227e2eeb17df224c1b814b22538de527", "committedDate": "2020-11-25T13:45:25Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66cd64651685df6b6f28a9ab13e03e02706d0eb0", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/66cd64651685df6b6f28a9ab13e03e02706d0eb0", "committedDate": "2020-11-25T14:30:40Z", "message": "Create zk build version by default"}, "afterCommit": {"oid": "cfbd8683aee6ba4141d719449f99b5544a857d3d", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/cfbd8683aee6ba4141d719449f99b5544a857d3d", "committedDate": "2020-11-26T07:07:45Z", "message": "Create zk build version by default"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfbd8683aee6ba4141d719449f99b5544a857d3d", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/cfbd8683aee6ba4141d719449f99b5544a857d3d", "committedDate": "2020-11-26T07:07:45Z", "message": "Create zk build version by default"}, "afterCommit": {"oid": "bfbfd675d899959960a6983a124a73cb3f7c9575", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/bfbfd675d899959960a6983a124a73cb3f7c9575", "committedDate": "2020-11-26T07:23:02Z", "message": "Create zk build version by default"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "736f793069b5da20e135efd9213580fd41e3cd3b", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/736f793069b5da20e135efd9213580fd41e3cd3b", "committedDate": "2020-11-26T13:34:38Z", "message": "Fixes"}, "afterCommit": {"oid": "4d2f07133ecee67768543cd2c40362301d2cf680", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/4d2f07133ecee67768543cd2c40362301d2cf680", "committedDate": "2020-11-27T11:13:00Z", "message": "Fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d2f07133ecee67768543cd2c40362301d2cf680", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/4d2f07133ecee67768543cd2c40362301d2cf680", "committedDate": "2020-11-27T11:13:00Z", "message": "Fixes"}, "afterCommit": {"oid": "a388ab403b82caa9e495e7312174faf3e0e651e6", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/a388ab403b82caa9e495e7312174faf3e0e651e6", "committedDate": "2020-11-27T11:28:57Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a388ab403b82caa9e495e7312174faf3e0e651e6", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/a388ab403b82caa9e495e7312174faf3e0e651e6", "committedDate": "2020-11-27T11:28:57Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "eabb46e760d8ea081f7fbdc52f59231299f2b7a8", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/eabb46e760d8ea081f7fbdc52f59231299f2b7a8", "committedDate": "2020-11-27T11:31:26Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eabb46e760d8ea081f7fbdc52f59231299f2b7a8", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/eabb46e760d8ea081f7fbdc52f59231299f2b7a8", "committedDate": "2020-11-27T11:31:26Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "0b40151a229b2bcebfdda3f7b13ad1d679cbc598", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/0b40151a229b2bcebfdda3f7b13ad1d679cbc598", "committedDate": "2020-11-28T08:09:19Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MDUyMTc2", "url": "https://github.com/telstra/open-kilda/pull/3872#pullrequestreview-539052176", "createdAt": "2020-11-26T07:33:38Z", "commit": {"oid": "bfbfd675d899959960a6983a124a73cb3f7c9575"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzozMzozOFrOH6OxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzozNDo1MlrOH6Oy5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyMTM5OA==", "bodyText": "why not debug?", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r530821398", "createdAt": "2020-11-26T07:33:38Z", "author": {"login": "timofei-durakov"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningConsumerInterceptor.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import com.google.common.collect.Lists;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerInterceptor;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.header.Header;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningConsumerInterceptor<K, V> implements ConsumerInterceptor<K, V>, BuildVersionObserver {\n+    private String componentName;\n+    private String runId;\n+    private volatile String version;\n+\n+    @Override\n+    public ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> records) {\n+        Map<TopicPartition, List<ConsumerRecord<K, V>>> filteredRecordMap = new HashMap<>();\n+\n+        for (TopicPartition partition : records.partitions()) {\n+            List<ConsumerRecord<K, V>> filteredRecords = new ArrayList<>();\n+\n+            for (ConsumerRecord<K, V> record : records.records(partition)) {\n+                if (checkRecordVersion(record)) {\n+                    filteredRecords.add(record);\n+                }\n+            }\n+\n+            filteredRecordMap.put(partition, filteredRecords);\n+        }\n+        return new ConsumerRecords<>(filteredRecordMap);\n+    }\n+\n+    private boolean checkRecordVersion(ConsumerRecord<K, V> record) {\n+        List<Header> headers = Lists.newArrayList(record.headers().headers(MESSAGE_VERSION_HEADER));\n+\n+        if (version == null) {\n+            log.info(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                    componentName, runId, record);\n+            return false;\n+        }\n+\n+        if (headers.isEmpty()) {\n+            if (log.isTraceEnabled()) {\n+                log.trace(String.format(\"Missed %s header for record %s\", MESSAGE_VERSION_HEADER, record));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfbfd675d899959960a6983a124a73cb3f7c9575"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyMTcxNQ==", "bodyText": "found", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r530821715", "createdAt": "2020-11-26T07:34:27Z", "author": {"login": "timofei-durakov"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningConsumerInterceptor.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import com.google.common.collect.Lists;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerInterceptor;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.header.Header;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningConsumerInterceptor<K, V> implements ConsumerInterceptor<K, V>, BuildVersionObserver {\n+    private String componentName;\n+    private String runId;\n+    private volatile String version;\n+\n+    @Override\n+    public ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> records) {\n+        Map<TopicPartition, List<ConsumerRecord<K, V>>> filteredRecordMap = new HashMap<>();\n+\n+        for (TopicPartition partition : records.partitions()) {\n+            List<ConsumerRecord<K, V>> filteredRecords = new ArrayList<>();\n+\n+            for (ConsumerRecord<K, V> record : records.records(partition)) {\n+                if (checkRecordVersion(record)) {\n+                    filteredRecords.add(record);\n+                }\n+            }\n+\n+            filteredRecordMap.put(partition, filteredRecords);\n+        }\n+        return new ConsumerRecords<>(filteredRecordMap);\n+    }\n+\n+    private boolean checkRecordVersion(ConsumerRecord<K, V> record) {\n+        List<Header> headers = Lists.newArrayList(record.headers().headers(MESSAGE_VERSION_HEADER));\n+\n+        if (version == null) {\n+            log.info(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                    componentName, runId, record);\n+            return false;\n+        }\n+\n+        if (headers.isEmpty()) {\n+            if (log.isTraceEnabled()) {\n+                log.trace(String.format(\"Missed %s header for record %s\", MESSAGE_VERSION_HEADER, record));\n+            }\n+            return false;\n+        }\n+\n+        if (headers.size() > 1) {\n+            log.warn(String.format(\"Fount more than one %s headers for record %s\", MESSAGE_VERSION_HEADER, record));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfbfd675d899959960a6983a124a73cb3f7c9575"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyMTg2Mg==", "bodyText": "the same", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r530821862", "createdAt": "2020-11-26T07:34:52Z", "author": {"login": "timofei-durakov"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningConsumerInterceptor.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import com.google.common.collect.Lists;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerInterceptor;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.header.Header;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningConsumerInterceptor<K, V> implements ConsumerInterceptor<K, V>, BuildVersionObserver {\n+    private String componentName;\n+    private String runId;\n+    private volatile String version;\n+\n+    @Override\n+    public ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> records) {\n+        Map<TopicPartition, List<ConsumerRecord<K, V>>> filteredRecordMap = new HashMap<>();\n+\n+        for (TopicPartition partition : records.partitions()) {\n+            List<ConsumerRecord<K, V>> filteredRecords = new ArrayList<>();\n+\n+            for (ConsumerRecord<K, V> record : records.records(partition)) {\n+                if (checkRecordVersion(record)) {\n+                    filteredRecords.add(record);\n+                }\n+            }\n+\n+            filteredRecordMap.put(partition, filteredRecords);\n+        }\n+        return new ConsumerRecords<>(filteredRecordMap);\n+    }\n+\n+    private boolean checkRecordVersion(ConsumerRecord<K, V> record) {\n+        List<Header> headers = Lists.newArrayList(record.headers().headers(MESSAGE_VERSION_HEADER));\n+\n+        if (version == null) {\n+            log.info(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                    componentName, runId, record);\n+            return false;\n+        }\n+\n+        if (headers.isEmpty()) {\n+            if (log.isTraceEnabled()) {\n+                log.trace(String.format(\"Missed %s header for record %s\", MESSAGE_VERSION_HEADER, record));\n+            }\n+            return false;\n+        }\n+\n+        if (headers.size() > 1) {\n+            log.warn(String.format(\"Fount more than one %s headers for record %s\", MESSAGE_VERSION_HEADER, record));\n+            // TODO maybe need to be replaced with some soft handling. Maybe check all versions in list\n+            // Currently such hard constraints are needed to test versioning massaging\n+            return false;\n+        }\n+\n+        if (!version.equals(new String(headers.get(0).value()))) {\n+            if (log.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfbfd675d899959960a6983a124a73cb3f7c9575"}, "originalPosition": 90}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b40151a229b2bcebfdda3f7b13ad1d679cbc598", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/0b40151a229b2bcebfdda3f7b13ad1d679cbc598", "committedDate": "2020-11-28T08:09:19Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "7c29f8c4c2370b0b49a068a9b10756eb065b7af3", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/7c29f8c4c2370b0b49a068a9b10756eb065b7af3", "committedDate": "2020-12-02T07:53:04Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c29f8c4c2370b0b49a068a9b10756eb065b7af3", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/7c29f8c4c2370b0b49a068a9b10756eb065b7af3", "committedDate": "2020-12-02T07:53:04Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/b16257805eef789ba31f95b21436e9efe73a35ae", "committedDate": "2020-12-02T10:31:22Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTAxMDAy", "url": "https://github.com/telstra/open-kilda/pull/3872#pullrequestreview-544101002", "createdAt": "2020-12-03T15:47:46Z", "commit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTo0Nzo0NlrOH-jS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1NzowNFrOH-m5Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1MjA1Mg==", "bodyText": "that is debugging message no info", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535352052", "createdAt": "2020-12-03T15:47:46Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningConsumerInterceptor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import com.google.common.collect.Lists;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerInterceptor;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.header.Header;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningConsumerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ConsumerInterceptor<K, V>, BuildVersionObserver {\n+\n+    public VersioningConsumerInterceptor() {\n+        log.info(\"Initializing VersioningConsumerInterceptor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NjU3MA==", "bodyText": "must be some reconnect process", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535356570", "createdAt": "2020-12-03T15:52:11Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningConsumerInterceptor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import com.google.common.collect.Lists;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerInterceptor;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.header.Header;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningConsumerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ConsumerInterceptor<K, V>, BuildVersionObserver {\n+\n+    public VersioningConsumerInterceptor() {\n+        log.info(\"Initializing VersioningConsumerInterceptor\");\n+    }\n+\n+    @Override\n+    public ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> records) {\n+        Map<TopicPartition, List<ConsumerRecord<K, V>>> filteredRecordMap = new HashMap<>();\n+\n+        for (TopicPartition partition : records.partitions()) {\n+            List<ConsumerRecord<K, V>> filteredRecords = new ArrayList<>();\n+\n+            for (ConsumerRecord<K, V> record : records.records(partition)) {\n+                if (checkRecordVersion(record)) {\n+                    filteredRecords.add(record);\n+                }\n+            }\n+\n+            filteredRecordMap.put(partition, filteredRecords);\n+        }\n+        return new ConsumerRecords<>(filteredRecordMap);\n+    }\n+\n+    private boolean checkRecordVersion(ConsumerRecord<K, V> record) {\n+        List<Header> headers = Lists.newArrayList(record.headers().headers(MESSAGE_VERSION_HEADER));\n+\n+        if (version == null) {\n+            if (isVersionIsNotTimeoutPassed()) {\n+                // We will write this log every 60 seconds to do not spam in logs\n+                log.warn(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                        componentName, runId, record);\n+                versionIsNotSetTimestamp = Instant.now();\n+            }\n+            return false;\n+        }\n+\n+        if (headers.isEmpty()) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(String.format(\"Missed %s header for record %s\", MESSAGE_VERSION_HEADER, record));\n+            }\n+            return false;\n+        }\n+\n+        if (headers.size() > 1) {\n+            log.warn(String.format(\"Found more than one %s headers for record %s\", MESSAGE_VERSION_HEADER, record));\n+            return false;\n+        }\n+\n+        if (!version.equals(new String(headers.get(0).value()))) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Skip record {} with version {}. Target version is {}\",\n+                        record, new String(headers.get(0).value()), version);\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void configure(Map<String, ?> configs) {\n+        String connectionString = getValue(configs, CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY, String.class);\n+        runId = getValue(configs, CONSUMER_RUN_ID_PROPERTY, String.class);\n+        componentName = getValue(configs, CONSUMER_COMPONENT_NAME_PROPERTY, String.class);\n+        log.info(\"Configuring VersioningConsumerInterceptor for component {} with id {} and connection string {}\",\n+                componentName, runId, connectionString);\n+\n+        try {\n+            ZkWatchDog watchDog = ZkWatchDog.builder()\n+                    .id(runId)\n+                    .serviceName(componentName)\n+                    .connectionString(connectionString).build();\n+\n+            watchDog.subscribe(this);\n+        } catch (IOException e) {\n+            log.error(\"Component {} with id {} can't connect to ZooKeeper with connection string: {}, received: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODE1OA==", "bodyText": "watchDog?", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535358158", "createdAt": "2020-12-03T15:54:08Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningConsumerInterceptor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import com.google.common.collect.Lists;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerInterceptor;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.header.Header;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningConsumerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ConsumerInterceptor<K, V>, BuildVersionObserver {\n+\n+    public VersioningConsumerInterceptor() {\n+        log.info(\"Initializing VersioningConsumerInterceptor\");\n+    }\n+\n+    @Override\n+    public ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> records) {\n+        Map<TopicPartition, List<ConsumerRecord<K, V>>> filteredRecordMap = new HashMap<>();\n+\n+        for (TopicPartition partition : records.partitions()) {\n+            List<ConsumerRecord<K, V>> filteredRecords = new ArrayList<>();\n+\n+            for (ConsumerRecord<K, V> record : records.records(partition)) {\n+                if (checkRecordVersion(record)) {\n+                    filteredRecords.add(record);\n+                }\n+            }\n+\n+            filteredRecordMap.put(partition, filteredRecords);\n+        }\n+        return new ConsumerRecords<>(filteredRecordMap);\n+    }\n+\n+    private boolean checkRecordVersion(ConsumerRecord<K, V> record) {\n+        List<Header> headers = Lists.newArrayList(record.headers().headers(MESSAGE_VERSION_HEADER));\n+\n+        if (version == null) {\n+            if (isVersionIsNotTimeoutPassed()) {\n+                // We will write this log every 60 seconds to do not spam in logs\n+                log.warn(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                        componentName, runId, record);\n+                versionIsNotSetTimestamp = Instant.now();\n+            }\n+            return false;\n+        }\n+\n+        if (headers.isEmpty()) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(String.format(\"Missed %s header for record %s\", MESSAGE_VERSION_HEADER, record));\n+            }\n+            return false;\n+        }\n+\n+        if (headers.size() > 1) {\n+            log.warn(String.format(\"Found more than one %s headers for record %s\", MESSAGE_VERSION_HEADER, record));\n+            return false;\n+        }\n+\n+        if (!version.equals(new String(headers.get(0).value()))) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Skip record {} with version {}. Target version is {}\",\n+                        record, new String(headers.get(0).value()), version);\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void configure(Map<String, ?> configs) {\n+        String connectionString = getValue(configs, CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY, String.class);\n+        runId = getValue(configs, CONSUMER_RUN_ID_PROPERTY, String.class);\n+        componentName = getValue(configs, CONSUMER_COMPONENT_NAME_PROPERTY, String.class);\n+        log.info(\"Configuring VersioningConsumerInterceptor for component {} with id {} and connection string {}\",\n+                componentName, runId, connectionString);\n+\n+        try {\n+            ZkWatchDog watchDog = ZkWatchDog.builder()\n+                    .id(runId)\n+                    .serviceName(componentName)\n+                    .connectionString(connectionString).build();\n+\n+            watchDog.subscribe(this);\n+        } catch (IOException e) {\n+            log.error(\"Component {} with id {} can't connect to ZooKeeper with connection string: {}, received: {}\",\n+                    componentName, runId, connectionString, e.getMessage());\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public void onCommit(Map<TopicPartition, OffsetAndMetadata> offsets) {\n+        // nothing to do here\n+    }\n+\n+    @Override\n+    public void close() {\n+        // nothing to do here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1OTE4Mw==", "bodyText": "make it debug", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535359183", "createdAt": "2020-12-03T15:55:19Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningProducerInterceptor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.producer.ProducerInterceptor;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningProducerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ProducerInterceptor<K, V>, BuildVersionObserver {\n+\n+    public VersioningProducerInterceptor() {\n+        log.info(\"Initializing VersioningProducerInterceptor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MDEzMg==", "bodyText": "In our app, you will call getBytes billion times on one constant version.", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535370132", "createdAt": "2020-12-03T16:09:05Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningProducerInterceptor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.producer.ProducerInterceptor;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningProducerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ProducerInterceptor<K, V>, BuildVersionObserver {\n+\n+    public VersioningProducerInterceptor() {\n+        log.info(\"Initializing VersioningProducerInterceptor\");\n+    }\n+\n+    @Override\n+    public ProducerRecord<K, V> onSend(ProducerRecord<K, V> record) {\n+        if (record.headers().headers(MESSAGE_VERSION_HEADER).iterator().hasNext()) {\n+            log.info(\"Kafka record {} already has header {}: {}\",\n+                    record, MESSAGE_VERSION_HEADER,\n+                    new String(record.headers().headers(MESSAGE_VERSION_HEADER).iterator().next().value()));\n+            record.headers().remove(MESSAGE_VERSION_HEADER);\n+        }\n+\n+        if (version == null) {\n+            if (isVersionIsNotTimeoutPassed()) {\n+                // We will write this log every 60 seconds to do not spam in logs\n+                log.warn(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                        componentName, runId, record);\n+                versionIsNotSetTimestamp = Instant.now();\n+            }\n+            // We can't return null record. We will return record without version.\n+            // Such records wouldn't be read by Kafka Consumer with VersioningConsumerInterceptor\n+            return record;\n+        }\n+\n+        record.headers().add(MESSAGE_VERSION_HEADER, version.getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4NzUyOA==", "bodyText": "need reconnect process", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535387528", "createdAt": "2020-12-03T16:30:59Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningProducerInterceptor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.producer.ProducerInterceptor;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningProducerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ProducerInterceptor<K, V>, BuildVersionObserver {\n+\n+    public VersioningProducerInterceptor() {\n+        log.info(\"Initializing VersioningProducerInterceptor\");\n+    }\n+\n+    @Override\n+    public ProducerRecord<K, V> onSend(ProducerRecord<K, V> record) {\n+        if (record.headers().headers(MESSAGE_VERSION_HEADER).iterator().hasNext()) {\n+            log.info(\"Kafka record {} already has header {}: {}\",\n+                    record, MESSAGE_VERSION_HEADER,\n+                    new String(record.headers().headers(MESSAGE_VERSION_HEADER).iterator().next().value()));\n+            record.headers().remove(MESSAGE_VERSION_HEADER);\n+        }\n+\n+        if (version == null) {\n+            if (isVersionIsNotTimeoutPassed()) {\n+                // We will write this log every 60 seconds to do not spam in logs\n+                log.warn(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                        componentName, runId, record);\n+                versionIsNotSetTimestamp = Instant.now();\n+            }\n+            // We can't return null record. We will return record without version.\n+            // Such records wouldn't be read by Kafka Consumer with VersioningConsumerInterceptor\n+            return record;\n+        }\n+\n+        record.headers().add(MESSAGE_VERSION_HEADER, version.getBytes());\n+        return record;\n+    }\n+\n+    @Override\n+    public void onAcknowledgement(RecordMetadata metadata, Exception exception) {\n+        // nothing to do\n+    }\n+\n+    public void close() {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void configure(Map<String, ?> configs) {\n+        String connectionString = getValue(configs, PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY, String.class);\n+        runId = getValue(configs, PRODUCER_RUN_ID_PROPERTY, String.class);\n+        componentName = getValue(configs, PRODUCER_COMPONENT_NAME_PROPERTY, String.class);\n+        log.info(\"Configuring VersioningProducerInterceptor for component {} with id {} and connection string {}\",\n+                componentName, runId, connectionString);\n+\n+        try {\n+            ZkWatchDog watchDog = ZkWatchDog.builder()\n+                    .id(runId)\n+                    .serviceName(componentName)\n+                    .connectionString(connectionString).build();\n+\n+            watchDog.subscribe(this);\n+        } catch (IOException e) {\n+            log.error(\"Component {} with id {} can't connect to ZooKeeper with connection string: {}, received: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM5MTkzOA==", "bodyText": "you print that on stderr stream, not in logger", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535391938", "createdAt": "2020-12-03T16:36:48Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/kafka/versioning/VersioningProducerInterceptor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.kafka.versioning;\n+\n+import static org.openkilda.messaging.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.messaging.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.messaging.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.messaging.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.messaging.Utils.getValue;\n+\n+import org.openkilda.bluegreen.BuildVersionObserver;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.producer.ProducerInterceptor;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningProducerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ProducerInterceptor<K, V>, BuildVersionObserver {\n+\n+    public VersioningProducerInterceptor() {\n+        log.info(\"Initializing VersioningProducerInterceptor\");\n+    }\n+\n+    @Override\n+    public ProducerRecord<K, V> onSend(ProducerRecord<K, V> record) {\n+        if (record.headers().headers(MESSAGE_VERSION_HEADER).iterator().hasNext()) {\n+            log.info(\"Kafka record {} already has header {}: {}\",\n+                    record, MESSAGE_VERSION_HEADER,\n+                    new String(record.headers().headers(MESSAGE_VERSION_HEADER).iterator().next().value()));\n+            record.headers().remove(MESSAGE_VERSION_HEADER);\n+        }\n+\n+        if (version == null) {\n+            if (isVersionIsNotTimeoutPassed()) {\n+                // We will write this log every 60 seconds to do not spam in logs\n+                log.warn(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                        componentName, runId, record);\n+                versionIsNotSetTimestamp = Instant.now();\n+            }\n+            // We can't return null record. We will return record without version.\n+            // Such records wouldn't be read by Kafka Consumer with VersioningConsumerInterceptor\n+            return record;\n+        }\n+\n+        record.headers().add(MESSAGE_VERSION_HEADER, version.getBytes());\n+        return record;\n+    }\n+\n+    @Override\n+    public void onAcknowledgement(RecordMetadata metadata, Exception exception) {\n+        // nothing to do\n+    }\n+\n+    public void close() {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void configure(Map<String, ?> configs) {\n+        String connectionString = getValue(configs, PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY, String.class);\n+        runId = getValue(configs, PRODUCER_RUN_ID_PROPERTY, String.class);\n+        componentName = getValue(configs, PRODUCER_COMPONENT_NAME_PROPERTY, String.class);\n+        log.info(\"Configuring VersioningProducerInterceptor for component {} with id {} and connection string {}\",\n+                componentName, runId, connectionString);\n+\n+        try {\n+            ZkWatchDog watchDog = ZkWatchDog.builder()\n+                    .id(runId)\n+                    .serviceName(componentName)\n+                    .connectionString(connectionString).build();\n+\n+            watchDog.subscribe(this);\n+        } catch (IOException e) {\n+            log.error(\"Component {} with id {} can't connect to ZooKeeper with connection string: {}, received: {}\",\n+                    componentName, runId, connectionString, e.getMessage());\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM5NjY1Mw==", "bodyText": "may cause conflict with the config from @timofei-durakov", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535396653", "createdAt": "2020-12-03T16:42:12Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-storm-topology/src/test/resources/topology.properties", "diffHunk": "@@ -6,7 +6,7 @@ parallelism = 1\n flow.hs.parallelism = 4\n workers = 1\n \n-zookeeper.hosts=localhost:2181\n+zookeeper.hosts=localhost:2181/kilda", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQxMTAwNg==", "bodyText": "looking like python", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r535411006", "createdAt": "2020-12-03T16:57:04Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkClient.java", "diffHunk": "@@ -73,10 +73,14 @@ protected ZooKeeper getZk() throws IOException {\n     }\n \n     protected void ensureZNode(String... path) throws KeeperException, InterruptedException {\n+        ensureZNode(\"\".getBytes(), path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b16257805eef789ba31f95b21436e9efe73a35ae", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/b16257805eef789ba31f95b21436e9efe73a35ae", "committedDate": "2020-12-02T10:31:22Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "e6115c836e93bf44b9e97ec92474bf084b3005f2", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/e6115c836e93bf44b9e97ec92474bf084b3005f2", "committedDate": "2020-12-04T09:16:32Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6115c836e93bf44b9e97ec92474bf084b3005f2", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/e6115c836e93bf44b9e97ec92474bf084b3005f2", "committedDate": "2020-12-04T09:16:32Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "f174b433b65f6ac67c4ede0f9e284d48d9d0ee8e", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/f174b433b65f6ac67c4ede0f9e284d48d9d0ee8e", "committedDate": "2020-12-04T12:10:15Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f174b433b65f6ac67c4ede0f9e284d48d9d0ee8e", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/f174b433b65f6ac67c4ede0f9e284d48d9d0ee8e", "committedDate": "2020-12-04T12:10:15Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "c1be45fc9a95538801fa852f6dee5ff0dc133ce0", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/c1be45fc9a95538801fa852f6dee5ff0dc133ce0", "committedDate": "2020-12-04T15:01:11Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1be45fc9a95538801fa852f6dee5ff0dc133ce0", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/c1be45fc9a95538801fa852f6dee5ff0dc133ce0", "committedDate": "2020-12-04T15:01:11Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "82f0f770f1b2ca942c191c25a7bd5e04f0c17fe3", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/82f0f770f1b2ca942c191c25a7bd5e04f0c17fe3", "committedDate": "2020-12-07T08:26:59Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82f0f770f1b2ca942c191c25a7bd5e04f0c17fe3", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/82f0f770f1b2ca942c191c25a7bd5e04f0c17fe3", "committedDate": "2020-12-07T08:26:59Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "3e13b4b55acf0075d8b00eb2e3145e080ab1027b", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/3e13b4b55acf0075d8b00eb2e3145e080ab1027b", "committedDate": "2020-12-07T09:19:07Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDc2MTQx", "url": "https://github.com/telstra/open-kilda/pull/3872#pullrequestreview-547076141", "createdAt": "2020-12-08T10:50:04Z", "commit": {"oid": "3e13b4b55acf0075d8b00eb2e3145e080ab1027b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1MDowNVrOIBTW6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1MDozNVrOIBTYEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNjY1MA==", "bodyText": "move it config files", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r538236650", "createdAt": "2020-12-08T10:50:05Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/kafka/KafkaConfig.java", "diffHunk": "@@ -15,16 +15,61 @@\n \n package org.openkilda.server42.stats.kafka;\n \n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+\n+import org.openkilda.bluegreen.kafka.interceptors.VersioningConsumerInterceptor;\n+import org.openkilda.bluegreen.kafka.interceptors.VersioningProducerInterceptor;\n+\n import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.kafka.KafkaProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.kafka.config.TopicBuilder;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.ProducerFactory;\n+\n+import java.util.Map;\n \n @Configuration\n public class KafkaConfig {\n+    public static final String SERVER_42_RUN_ID = \"server42-run-id\";\n+    public static final String SERVER_42_STATS_COMPONENT_NAME = \"server42-stats\";\n+\n+    @Value(\"${zookeeper.connect_string}\")\n+    private String zookeeperConnectString;\n+\n     @Bean\n     public NewTopic toStorm(@Value(\"${openkilda.server42.stats.kafka.topic.flowrtt.to_storm}\") String name) {\n         return TopicBuilder.name(name).build();\n     }\n+\n+    @Bean\n+    public ConsumerFactory<?, ?> kafkaConsumerFactory(KafkaProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e13b4b55acf0075d8b00eb2e3145e080ab1027b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNjczMw==", "bodyText": "move it config files", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r538236733", "createdAt": "2020-12-08T10:50:13Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/kafka/KafkaConfig.java", "diffHunk": "@@ -15,16 +15,61 @@\n \n package org.openkilda.server42.stats.kafka;\n \n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_RUN_ID_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.PRODUCER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+\n+import org.openkilda.bluegreen.kafka.interceptors.VersioningConsumerInterceptor;\n+import org.openkilda.bluegreen.kafka.interceptors.VersioningProducerInterceptor;\n+\n import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.kafka.KafkaProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.kafka.config.TopicBuilder;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.ProducerFactory;\n+\n+import java.util.Map;\n \n @Configuration\n public class KafkaConfig {\n+    public static final String SERVER_42_RUN_ID = \"server42-run-id\";\n+    public static final String SERVER_42_STATS_COMPONENT_NAME = \"server42-stats\";\n+\n+    @Value(\"${zookeeper.connect_string}\")\n+    private String zookeeperConnectString;\n+\n     @Bean\n     public NewTopic toStorm(@Value(\"${openkilda.server42.stats.kafka.topic.flowrtt.to_storm}\") String name) {\n         return TopicBuilder.name(name).build();\n     }\n+\n+    @Bean\n+    public ConsumerFactory<?, ?> kafkaConsumerFactory(KafkaProperties properties) {\n+        Map<String, Object> updatedProperties = properties.buildConsumerProperties();\n+        updatedProperties.put(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, VersioningConsumerInterceptor.class.getName());\n+        updatedProperties.put(CONSUMER_COMPONENT_NAME_PROPERTY, SERVER_42_STATS_COMPONENT_NAME);\n+        updatedProperties.put(CONSUMER_RUN_ID_PROPERTY, SERVER_42_RUN_ID);\n+        updatedProperties.put(CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY, zookeeperConnectString);\n+        return new DefaultKafkaConsumerFactory<>(updatedProperties);\n+    }\n+\n+    @Bean\n+    public ProducerFactory<?, ?> kafkaProducerFactory(KafkaProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e13b4b55acf0075d8b00eb2e3145e080ab1027b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNjg2MA==", "bodyText": "move it config files", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r538236860", "createdAt": "2020-12-08T10:50:27Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/KafkaConfig.java", "diffHunk": "@@ -49,4 +73,24 @@ public NewTopic fromStorm(@Value(\"${openkilda.server42.control.kafka.topic.from_\n         factory.setRecordFilterStrategy(kafkaRecordFilter);\n         return factory;\n     }\n+\n+    @Bean\n+    public ConsumerFactory<?, ?> kafkaConsumerFactory(KafkaProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e13b4b55acf0075d8b00eb2e3145e080ab1027b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNjk0Nw==", "bodyText": "move it config files", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r538236947", "createdAt": "2020-12-08T10:50:35Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/KafkaConfig.java", "diffHunk": "@@ -49,4 +73,24 @@ public NewTopic fromStorm(@Value(\"${openkilda.server42.control.kafka.topic.from_\n         factory.setRecordFilterStrategy(kafkaRecordFilter);\n         return factory;\n     }\n+\n+    @Bean\n+    public ConsumerFactory<?, ?> kafkaConsumerFactory(KafkaProperties properties) {\n+        Map<String, Object> updatedProperties = properties.buildConsumerProperties();\n+        updatedProperties.put(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, VersioningConsumerInterceptor.class.getName());\n+        updatedProperties.put(CONSUMER_COMPONENT_NAME_PROPERTY, SERVER_42_CONTROL_COMPONENT_NAME);\n+        updatedProperties.put(CONSUMER_RUN_ID_PROPERTY, SERVER_42_RUN_ID);\n+        updatedProperties.put(CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY, zookeeperConnectString);\n+        return new DefaultKafkaConsumerFactory<>(updatedProperties);\n+    }\n+\n+    @Bean\n+    public ProducerFactory<?, ?> kafkaProducerFactory(KafkaProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e13b4b55acf0075d8b00eb2e3145e080ab1027b"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e13b4b55acf0075d8b00eb2e3145e080ab1027b", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/3e13b4b55acf0075d8b00eb2e3145e080ab1027b", "committedDate": "2020-12-07T09:19:07Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "749cbeb0c7ee90e84e5bbb9c30be3a03e7f0517f", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/749cbeb0c7ee90e84e5bbb9c30be3a03e7f0517f", "committedDate": "2020-12-08T11:52:01Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MTc0NDcw", "url": "https://github.com/telstra/open-kilda/pull/3872#pullrequestreview-547174470", "createdAt": "2020-12-08T12:10:39Z", "commit": {"oid": "749cbeb0c7ee90e84e5bbb9c30be3a03e7f0517f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTA0OTIx", "url": "https://github.com/telstra/open-kilda/pull/3872#pullrequestreview-547904921", "createdAt": "2020-12-09T07:32:47Z", "commit": {"oid": "749cbeb0c7ee90e84e5bbb9c30be3a03e7f0517f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "749cbeb0c7ee90e84e5bbb9c30be3a03e7f0517f", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/749cbeb0c7ee90e84e5bbb9c30be3a03e7f0517f", "committedDate": "2020-12-08T11:52:01Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "c42db9fb4ea0da5562e555df0c1b24bf3f8d77f4", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/c42db9fb4ea0da5562e555df0c1b24bf3f8d77f4", "committedDate": "2020-12-09T14:32:29Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c42db9fb4ea0da5562e555df0c1b24bf3f8d77f4", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/c42db9fb4ea0da5562e555df0c1b24bf3f8d77f4", "committedDate": "2020-12-09T14:32:29Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "6ea225b74b18ea5c591b01dfc22026490d91568d", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/6ea225b74b18ea5c591b01dfc22026490d91568d", "committedDate": "2020-12-10T07:22:34Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ea225b74b18ea5c591b01dfc22026490d91568d", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/6ea225b74b18ea5c591b01dfc22026490d91568d", "committedDate": "2020-12-10T07:22:34Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "b6ffc009a9b9a1028b95d39a311a55c4156fd8c8", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/b6ffc009a9b9a1028b95d39a311a55c4156fd8c8", "committedDate": "2020-12-11T11:23:47Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6ffc009a9b9a1028b95d39a311a55c4156fd8c8", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/b6ffc009a9b9a1028b95d39a311a55c4156fd8c8", "committedDate": "2020-12-11T11:23:47Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "60a0af1f3fb34fdce8b9c8bd82e70a0ccac05c09", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/60a0af1f3fb34fdce8b9c8bd82e70a0ccac05c09", "committedDate": "2020-12-11T12:14:15Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDUxMzYw", "url": "https://github.com/telstra/open-kilda/pull/3872#pullrequestreview-551451360", "createdAt": "2020-12-14T14:59:57Z", "commit": {"oid": "60a0af1f3fb34fdce8b9c8bd82e70a0ccac05c09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo1OTo1N1rOIFUj8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo1OTo1N1rOIFUj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1MDY3Mg==", "bodyText": "I would like to switch into \"error\" state and inject error instead of receive records into onConsume i.e. if the interceptor is in an error state it must drop all records passed into onConsume and inject one(or one per partition) error message with all required details.\nSo our code can read this message and report it in a controlled way. It should be much safer from a storm point of view - i.e. produce errors on received records, instead of an uncontrolled endless restart of workers.", "url": "https://github.com/telstra/open-kilda/pull/3872#discussion_r542450672", "createdAt": "2020-12-14T14:59:57Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningConsumerInterceptor.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen.kafka.interceptors;\n+\n+import static java.lang.String.format;\n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_COMPONENT_NAME_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_RUN_ID_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY;\n+import static org.openkilda.bluegreen.kafka.Utils.MESSAGE_VERSION_HEADER;\n+import static org.openkilda.bluegreen.kafka.Utils.getValue;\n+\n+import com.google.common.collect.Lists;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerInterceptor;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.header.Header;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Slf4j\n+public class VersioningConsumerInterceptor<K, V> extends VersioningInterceptorBase\n+        implements ConsumerInterceptor<K, V> {\n+\n+    public VersioningConsumerInterceptor() {\n+        log.debug(\"Initializing VersioningConsumerInterceptor\");\n+    }\n+\n+    @Override\n+    public ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> records) {\n+        if (!watchDog.isConnectionAlive()) {\n+            if (isZooKeeperConnectTimeoutPassed()) {\n+                log.error(\"Component {} with id {} tries to reconnect to ZooKeeper with connection string: {}\",\n+                        componentName, runId, connectionString);\n+                cantConnectToZooKeeperTimestamp = Instant.now();\n+            }\n+            watchDog.init(); // try to reconnect\n+        }\n+\n+        Map<TopicPartition, List<ConsumerRecord<K, V>>> filteredRecordMap = new HashMap<>();\n+\n+        for (TopicPartition partition : records.partitions()) {\n+            List<ConsumerRecord<K, V>> filteredRecords = new ArrayList<>();\n+\n+            for (ConsumerRecord<K, V> record : records.records(partition)) {\n+                if (checkRecordVersion(record)) {\n+                    filteredRecords.add(record);\n+                }\n+            }\n+\n+            filteredRecordMap.put(partition, filteredRecords);\n+        }\n+        return new ConsumerRecords<>(filteredRecordMap);\n+    }\n+\n+    private boolean checkRecordVersion(ConsumerRecord<K, V> record) {\n+        List<Header> headers = Lists.newArrayList(record.headers().headers(MESSAGE_VERSION_HEADER));\n+\n+        if (version == null) {\n+            if (isVersionTimeoutPassed()) {\n+                // We will write this log every 60 seconds to do not spam in logs\n+                log.warn(\"Messaging version is not set for component {} with id {}. Skip record {}\",\n+                        componentName, runId, record);\n+                versionIsNotSetTimestamp = Instant.now();\n+            }\n+            return false;\n+        }\n+\n+        if (headers.isEmpty()) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Missed {} header for record {}\", MESSAGE_VERSION_HEADER, record);\n+            }\n+            return false;\n+        }\n+\n+        if (headers.size() > 1) {\n+            log.warn(\"Found more than one {} headers for record {}\", MESSAGE_VERSION_HEADER, record);\n+            return false;\n+        }\n+\n+        if (!Arrays.equals(version, headers.get(0).value())) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Skip record {} with version {}. Target version is {}\",\n+                        record, new String(headers.get(0).value()), getVersionAsString());\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void configure(Map<String, ?> configs) {\n+        connectionString = getValue(configs, CONSUMER_ZOOKEEPER_CONNECTION_STRING_PROPERTY, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a0af1f3fb34fdce8b9c8bd82e70a0ccac05c09"}, "originalPosition": 113}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60a0af1f3fb34fdce8b9c8bd82e70a0ccac05c09", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/60a0af1f3fb34fdce8b9c8bd82e70a0ccac05c09", "committedDate": "2020-12-11T12:14:15Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "5016a513cea391d87199073873bda51a47a60608", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/5016a513cea391d87199073873bda51a47a60608", "committedDate": "2020-12-17T07:30:54Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5016a513cea391d87199073873bda51a47a60608", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/5016a513cea391d87199073873bda51a47a60608", "committedDate": "2020-12-17T07:30:54Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "45302dbdba1056f0515c850e9c50512a23c06c96", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/45302dbdba1056f0515c850e9c50512a23c06c96", "committedDate": "2020-12-17T12:27:17Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45302dbdba1056f0515c850e9c50512a23c06c96", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/45302dbdba1056f0515c850e9c50512a23c06c96", "committedDate": "2020-12-17T12:27:17Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "0d5ea4be81046c8479f21de1b88f35a6cbdb1b5d", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/0d5ea4be81046c8479f21de1b88f35a6cbdb1b5d", "committedDate": "2020-12-21T18:54:48Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d5ea4be81046c8479f21de1b88f35a6cbdb1b5d", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/0d5ea4be81046c8479f21de1b88f35a6cbdb1b5d", "committedDate": "2020-12-21T18:54:48Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "a28d94de98958b7ee3d97a52eb4ad40c36894eee", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/a28d94de98958b7ee3d97a52eb4ad40c36894eee", "committedDate": "2020-12-21T19:00:34Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a28d94de98958b7ee3d97a52eb4ad40c36894eee", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/a28d94de98958b7ee3d97a52eb4ad40c36894eee", "committedDate": "2020-12-21T19:00:34Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "7aad382db3e02530a95564a4be1086ca2a4f9f34", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/7aad382db3e02530a95564a4be1086ca2a4f9f34", "committedDate": "2020-12-21T19:18:33Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aad382db3e02530a95564a4be1086ca2a4f9f34", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/7aad382db3e02530a95564a4be1086ca2a4f9f34", "committedDate": "2020-12-21T19:18:33Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "bc7fc3087816094130f7dcf351f3d5c50242978b", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/bc7fc3087816094130f7dcf351f3d5c50242978b", "committedDate": "2020-12-22T14:50:13Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc7fc3087816094130f7dcf351f3d5c50242978b", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/bc7fc3087816094130f7dcf351f3d5c50242978b", "committedDate": "2020-12-22T14:50:13Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "9e14c93848284033f16de1f23814cd41ff1b21f7", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/9e14c93848284033f16de1f23814cd41ff1b21f7", "committedDate": "2020-12-25T09:02:58Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c6d01900ce1456bf7b5456900a749faa46d9ab", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/c7c6d01900ce1456bf7b5456900a749faa46d9ab", "committedDate": "2020-12-25T09:56:46Z", "message": "Added kafka message versioning with ZooKeeper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e14c93848284033f16de1f23814cd41ff1b21f7", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/9e14c93848284033f16de1f23814cd41ff1b21f7", "committedDate": "2020-12-25T09:02:58Z", "message": "Added kafka message versioning with ZooKeeper"}, "afterCommit": {"oid": "c7c6d01900ce1456bf7b5456900a749faa46d9ab", "author": {"user": {"login": "niksv", "name": "Sergey Nikitin"}}, "url": "https://github.com/telstra/open-kilda/commit/c7c6d01900ce1456bf7b5456900a749faa46d9ab", "committedDate": "2020-12-25T09:56:46Z", "message": "Added kafka message versioning with ZooKeeper"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3773, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}