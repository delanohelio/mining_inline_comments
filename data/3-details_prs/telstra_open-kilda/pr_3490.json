{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzc3NDA3", "number": 3490, "title": "Add \"cost and available bandwidth\" path computation strategy", "bodyText": "Add new path computation strategy that finds path with best cost but if two paths has the same cost then choose the one with min available bandwidth.", "createdAt": "2020-05-20T14:10:35Z", "url": "https://github.com/telstra/open-kilda/pull/3490", "merged": true, "mergeCommit": {"oid": "6c95badc25e05022a8f9ab778c92ee9b45101c30"}, "closed": true, "closedAt": "2020-05-25T12:51:30Z", "author": {"login": "rozdy"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjgXx3ABqjMzNjE0MTEzMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckrdF5gFqTQxNzUzMTkwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52aac67b3eaae75cd93e6de2ef4b46a72e856a47", "author": {"user": {"login": "rozdy", "name": "Ievgen Rozdymakha"}}, "url": "https://github.com/telstra/open-kilda/commit/52aac67b3eaae75cd93e6de2ef4b46a72e856a47", "committedDate": "2020-05-20T14:07:26Z", "message": "Add \"cost and available bandwidth\" path computation strategy"}, "afterCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5", "author": {"user": {"login": "rozdy", "name": "Ievgen Rozdymakha"}}, "url": "https://github.com/telstra/open-kilda/commit/8c5592d85829a07cb43aec5476194a033ebc49a5", "committedDate": "2020-05-21T16:36:08Z", "message": "Add \"cost and available bandwidth\" path computation strategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Njg4NzA3", "url": "https://github.com/telstra/open-kilda/pull/3490#pullrequestreview-416688707", "createdAt": "2020-05-22T06:58:30Z", "commit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1ODozMFrOGZMruQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1ODozMFrOGZMruQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NTM4NQ==", "bodyText": "do we really want that generic wrapper?", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429075385", "createdAt": "2020-05-22T06:58:30Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.pce.model;\n+\n+import static com.google.common.primitives.Longs.asList;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Path weight.\n+ */\n+public class PathWeight implements Comparable<PathWeight> {\n+\n+    private List<Long> params;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzI1NTk1", "url": "https://github.com/telstra/open-kilda/pull/3490#pullrequestreview-416725595", "createdAt": "2020-05-22T08:08:44Z", "commit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODowODo0NFrOGZOcSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoxNjoxMVrOGZOpjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNDIwMQ==", "bodyText": "I guess we need so generic param because PathWeight will be used with different strategies. And different strategies can have different param names.", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429104201", "createdAt": "2020-05-22T08:08:44Z", "author": {"login": "niksv"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.pce.model;\n+\n+import static com.google.common.primitives.Longs.asList;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Path weight.\n+ */\n+public class PathWeight implements Comparable<PathWeight> {\n+\n+    private List<Long> params;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NTM4NQ=="}, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNDc2NA==", "bodyText": "nit: I think you can use\npath.stream().map(weightFunction::apply).map(weightFunction::toLong()).sum()", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429104764", "createdAt": "2020-05-22T08:09:58Z", "author": {"login": "niksv"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/finder/BestWeightAndShortestPathFinder.java", "diffHunk": "@@ -227,7 +228,7 @@ private long getTotalWeight(List<Edge> path, WeightFunction weightFunction) {\n         if (path.isEmpty()) {\n             return Long.MAX_VALUE;\n         }\n-        return path.stream().mapToLong(weightFunction::apply).sum();\n+        return path.stream().mapToLong(edge -> weightFunction.apply(edge).toLong()).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNzU5Nw==", "bodyText": "nit: you can use just Integer.compare(firstSize, secondSize)", "url": "https://github.com/telstra/open-kilda/pull/3490#discussion_r429107597", "createdAt": "2020-05-22T08:16:11Z", "author": {"login": "niksv"}, "path": "src-java/kilda-pce/src/main/java/org/openkilda/pce/model/PathWeight.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.pce.model;\n+\n+import static com.google.common.primitives.Longs.asList;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Path weight.\n+ */\n+public class PathWeight implements Comparable<PathWeight> {\n+\n+    private List<Long> params;\n+\n+    public PathWeight(long... params) {\n+        this.params = asList(params);\n+    }\n+\n+    public PathWeight(List<Long> params) {\n+        this.params = params;\n+    }\n+\n+    /**\n+     * Sum two path weights.\n+     * @param toAdd path weight to add.\n+     * @return new path weight.\n+     */\n+    public PathWeight add(PathWeight toAdd) {\n+        List<Long> result = new ArrayList<>();\n+        Iterator<Long> firstIterator = params.iterator();\n+        Iterator<Long> secondIterator = toAdd.params.iterator();\n+        while (firstIterator.hasNext() || secondIterator.hasNext()) {\n+            long first = firstIterator.hasNext() ? firstIterator.next() : 0L;\n+            long second = secondIterator.hasNext() ? secondIterator.next() : 0L;\n+            result.add(first + second);\n+        }\n+        return new PathWeight(result);\n+    }\n+\n+    /**\n+     * Simple scalar representation of weight.\n+     * @return scalar weight representation.\n+     */\n+    public long toLong() {\n+        return params.size() > 0 ? params.get(0) : 0;\n+    }\n+\n+    @Override\n+    public int compareTo(PathWeight o) {\n+        int firstSize = params.size();\n+        int secondSize = o.params.size();\n+        int limit = Math.min(firstSize, secondSize);\n+        int i = 0;\n+        while (i < limit) {\n+            long first = params.get(i).longValue();\n+            long second = o.params.get(i).longValue();\n+            if (first != second) {\n+                return first > second ? 1 : -1;\n+            }\n+            i++;\n+        }\n+        if (firstSize == secondSize) {\n+            return 0;\n+        } else {\n+            return firstSize > secondSize ? 1 : -1;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1198c480ef4c51c7bdf8654f1ba4ee6c0aa72f77", "author": {"user": {"login": "rozdy", "name": "Ievgen Rozdymakha"}}, "url": "https://github.com/telstra/open-kilda/commit/1198c480ef4c51c7bdf8654f1ba4ee6c0aa72f77", "committedDate": "2020-05-22T15:02:58Z", "message": "Add \"cost and available bandwidth\" path computation strategy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c5592d85829a07cb43aec5476194a033ebc49a5", "author": {"user": {"login": "rozdy", "name": "Ievgen Rozdymakha"}}, "url": "https://github.com/telstra/open-kilda/commit/8c5592d85829a07cb43aec5476194a033ebc49a5", "committedDate": "2020-05-21T16:36:08Z", "message": "Add \"cost and available bandwidth\" path computation strategy"}, "afterCommit": {"oid": "1198c480ef4c51c7bdf8654f1ba4ee6c0aa72f77", "author": {"user": {"login": "rozdy", "name": "Ievgen Rozdymakha"}}, "url": "https://github.com/telstra/open-kilda/commit/1198c480ef4c51c7bdf8654f1ba4ee6c0aa72f77", "committedDate": "2020-05-22T15:02:58Z", "message": "Add \"cost and available bandwidth\" path computation strategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTMxOTA1", "url": "https://github.com/telstra/open-kilda/pull/3490#pullrequestreview-417531905", "createdAt": "2020-05-25T08:05:03Z", "commit": {"oid": "1198c480ef4c51c7bdf8654f1ba4ee6c0aa72f77"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3652, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}