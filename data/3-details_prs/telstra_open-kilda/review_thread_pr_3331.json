{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDg5MjY0", "number": 3331, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowNTo0NVrODrorcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0Nzo1MlrOD0sMQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgxODQzOnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowNTo0NVrOF8F5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOToxMzoyMlrOF8otlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTU1OQ==", "bodyText": "why -1? you are trying to set a boolean field (with 1 bit). I guess it should be 1 here. It's strange to see here FFFFFFFFFFFFFF", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398555559", "createdAt": "2020-03-26T13:05:45Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());\n+\n+        U64 mask = setField(base.getMask(), -1, schema.getOuterVlanField());\n+        mask = setField(mask, -1, schema.getOuterVlanPresenceFlag());\n+\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private MetadataMatch setBooleanField(MetadataMatch base, boolean flag, BitField field) {\n+        U64 value = setField(base.getValue(), flag ? -1 : 0, field);\n+        U64 mask = setField(base.getMask(), -1, field);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNTkxMQ==", "bodyText": "Because I do not want to hardcode this bit placement one more time. setField method will cut off all extra bits, so I can pass 0xFFFFFFFFFFFFFFFF as input to set 1 for all bits included into specific BitField.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r399125911", "createdAt": "2020-03-27T09:13:22Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());\n+\n+        U64 mask = setField(base.getMask(), -1, schema.getOuterVlanField());\n+        mask = setField(mask, -1, schema.getOuterVlanPresenceFlag());\n+\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private MetadataMatch setBooleanField(MetadataMatch base, boolean flag, BitField field) {\n+        U64 value = setField(base.getValue(), flag ? -1 : 0, field);\n+        U64 mask = setField(base.getMask(), -1, field);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTU1OQ=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgyMjEzOnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowNjozOFrOF8F74A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOToxNjowMFrOF8ozsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEyOA==", "bodyText": "magic numbers is a bad practice. Please move -1 to constants like FULL_MASK = FFFF_FFFF_FFFF_FFFF or something else", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398556128", "createdAt": "2020-03-26T13:06:38Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNzQ3Mw==", "bodyText": "Usually yes, but not always. I do not like \"extra\" constants. And in this specific case, it is extra constant.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r399127473", "createdAt": "2020-03-27T09:16:00Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEyOA=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgyOTkyOnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowODozN1rOF8GAvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1MDoyN1rOF-22MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NzM3NQ==", "bodyText": "Where is it used? or it will be used in next patch?", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398557375", "createdAt": "2020-03-26T13:08:37Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());\n+\n+        U64 mask = setField(base.getMask(), -1, schema.getOuterVlanField());\n+        mask = setField(mask, -1, schema.getOuterVlanPresenceFlag());\n+\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private MetadataMatch setBooleanField(MetadataMatch base, boolean flag, BitField field) {\n+        U64 value = setField(base.getValue(), flag ? -1 : 0, field);\n+        U64 mask = setField(base.getMask(), -1, field);\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private static U64 setField(U64 target, long value, BitField field) {\n+        U64 result = target.and(U64.of(~field.getMask()));\n+        value <<= field.getOffset();\n+        return result.or(U64.of(value & field.getMask()));\n+    }\n+\n+    @Value\n+    public static class MetadataMatch {\n+        protected static final MetadataMatch ZERO = new MetadataMatch(U64.ZERO, U64.ZERO);\n+\n+        private final U64 value;\n+        private final U64 mask;\n+\n+        protected MetadataMatch merge(U64 extendValue, U64 extendMask) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NDY0MQ==", "bodyText": "Not used, removed.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401454641", "createdAt": "2020-04-01T08:50:27Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());\n+\n+        U64 mask = setField(base.getMask(), -1, schema.getOuterVlanField());\n+        mask = setField(mask, -1, schema.getOuterVlanPresenceFlag());\n+\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private MetadataMatch setBooleanField(MetadataMatch base, boolean flag, BitField field) {\n+        U64 value = setField(base.getValue(), flag ? -1 : 0, field);\n+        U64 mask = setField(base.getMask(), -1, field);\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private static U64 setField(U64 target, long value, BitField field) {\n+        U64 result = target.and(U64.of(~field.getMask()));\n+        value <<= field.getOffset();\n+        return result.or(U64.of(value & field.getMask()));\n+    }\n+\n+    @Value\n+    public static class MetadataMatch {\n+        protected static final MetadataMatch ZERO = new MetadataMatch(U64.ZERO, U64.ZERO);\n+\n+        private final U64 value;\n+        private final U64 mask;\n+\n+        protected MetadataMatch merge(U64 extendValue, U64 extendMask) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NzM3NQ=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg0MTAyOnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxMToyM1rOF8GHzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1MToxOFrOF-24BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE4MA==", "bodyText": "Why don't we just use 0x0000_0000_0000_0008L as a flag?\nThis will save us from using HALF_SIZE_METADATA feature.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398559180", "createdAt": "2020-03-26T13:11:23Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.bitops.BitField;\n+\n+public class MetadataSchema {\n+    public static final MetadataSchema INSTANCE = new MetadataSchema();\n+\n+    private static final BitField LLDP_MARKER_FLAG         = new BitField(0x0000_0000_0000_0001L);\n+    private static final BitField ARP_MARKER_FLAG          = new BitField(0x0000_0000_0000_0004L);\n+\n+    private static final BitField ONE_SWITCH_FLOW_FLAG     = new BitField(0x0000_0000_0000_0002L);\n+\n+    private static final BitField OUTER_VLAN_FIELD         = new BitField(0x0000_0000_0000_fff0L);\n+    private static final BitField OUTER_VLAN_PRESENCE_FLAG = new BitField(0x1000_0000_0000_0000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMjIyOA==", "bodyText": "I have a doubts regarding usage of bits in upper half of metadata. I prefer to have tools that allow us to work with all possible hardware, also I want to highlight, that some hardware do not implement OF spec requirement and has such \"limitation\".\nOne more argument - is a requirement to make migration if we will decide to change any bit/flag location/meaning.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r399132228", "createdAt": "2020-03-27T09:24:14Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.bitops.BitField;\n+\n+public class MetadataSchema {\n+    public static final MetadataSchema INSTANCE = new MetadataSchema();\n+\n+    private static final BitField LLDP_MARKER_FLAG         = new BitField(0x0000_0000_0000_0001L);\n+    private static final BitField ARP_MARKER_FLAG          = new BitField(0x0000_0000_0000_0004L);\n+\n+    private static final BitField ONE_SWITCH_FLOW_FLAG     = new BitField(0x0000_0000_0000_0002L);\n+\n+    private static final BitField OUTER_VLAN_FIELD         = new BitField(0x0000_0000_0000_fff0L);\n+    private static final BitField OUTER_VLAN_PRESENCE_FLAG = new BitField(0x1000_0000_0000_0000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE4MA=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NTEwOQ==", "bodyText": "I have moded the outer-VLAN presence flag into the lower half of metadata schema.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401455109", "createdAt": "2020-04-01T08:51:18Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.bitops.BitField;\n+\n+public class MetadataSchema {\n+    public static final MetadataSchema INSTANCE = new MetadataSchema();\n+\n+    private static final BitField LLDP_MARKER_FLAG         = new BitField(0x0000_0000_0000_0001L);\n+    private static final BitField ARP_MARKER_FLAG          = new BitField(0x0000_0000_0000_0004L);\n+\n+    private static final BitField ONE_SWITCH_FLOW_FLAG     = new BitField(0x0000_0000_0000_0002L);\n+\n+    private static final BitField OUTER_VLAN_FIELD         = new BitField(0x0000_0000_0000_fff0L);\n+    private static final BitField OUTER_VLAN_PRESENCE_FLAG = new BitField(0x1000_0000_0000_0000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE4MA=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTAwMDgxOnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo0ODowMVrOF8HsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1Mzo1OFrOF-2-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NDg0Ng==", "bodyText": "Did you checked that this limitation is actual only for WB switches? I thought that it is actual for all noviflow switches.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398584846", "createdAt": "2020-03-26T13:48:01Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        if (is100GbHw(sw)) {\n+            return Optional.of(SwitchFeature.HALF_SIZE_METADATA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMjgxMw==", "bodyText": "Not yet (but it will be weird if all nowiswitches affected).", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r399132813", "createdAt": "2020-03-27T09:25:16Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        if (is100GbHw(sw)) {\n+            return Optional.of(SwitchFeature.HALF_SIZE_METADATA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NDg0Ng=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1Njc3Nw==", "bodyText": "I have made a test and it confirms that all nowiflow switches have truncated metadata field. I have updated feature detection.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401456777", "createdAt": "2020-04-01T08:53:58Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        if (is100GbHw(sw)) {\n+            return Optional.of(SwitchFeature.HALF_SIZE_METADATA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NDg0Ng=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTAxNTUyOnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1MDo0OVrOF8H1Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NDo1M1rOF-7A2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NzE3MA==", "bodyText": "this class contains 2 other tests with WB switches (line 113, line 162). But those tests are green. seems method is100GbHw works wrong", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398587170", "createdAt": "2020-03-26T13:50:49Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java", "diffHunk": "@@ -139,7 +140,7 @@ public void eswitch500Software() {\n         discoveryCheck(makeSwitchMock(\"NoviFlow Inc\", \"NW500.0.1\", \"WB5164-E\", OFVersion.OF_13, 2),\n                 ImmutableSet.of(\n                         GROUP_PACKET_OUT_CONTROLLER, BFD, METERS, RESET_COUNTS_FLAG, INACCURATE_METER, MATCH_UDP_PORT,\n-                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN));\n+                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN, HALF_SIZE_METADATA));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NzEzNQ==", "bodyText": "I have verified is100GbHw check and it works incorrectly. I will make fix for it in separate PR.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401457135", "createdAt": "2020-04-01T08:54:30Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java", "diffHunk": "@@ -139,7 +140,7 @@ public void eswitch500Software() {\n         discoveryCheck(makeSwitchMock(\"NoviFlow Inc\", \"NW500.0.1\", \"WB5164-E\", OFVersion.OF_13, 2),\n                 ImmutableSet.of(\n                         GROUP_PACKET_OUT_CONTROLLER, BFD, METERS, RESET_COUNTS_FLAG, INACCURATE_METER, MATCH_UDP_PORT,\n-                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN));\n+                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN, HALF_SIZE_METADATA));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NzE3MA=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjkwNQ==", "bodyText": "Looks like isNoviSwitch works incorrect as well (as you had to add E switch check in HALF_SIZE_METADATA feature detector). But the probkem is not related to this patch. Will fix in separate PR.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401522905", "createdAt": "2020-04-01T10:44:53Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java", "diffHunk": "@@ -139,7 +140,7 @@ public void eswitch500Software() {\n         discoveryCheck(makeSwitchMock(\"NoviFlow Inc\", \"NW500.0.1\", \"WB5164-E\", OFVersion.OF_13, 2),\n                 ImmutableSet.of(\n                         GROUP_PACKET_OUT_CONTROLLER, BFD, METERS, RESET_COUNTS_FLAG, INACCURATE_METER, MATCH_UDP_PORT,\n-                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN));\n+                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN, HALF_SIZE_METADATA));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NzE3MA=="}, "originalCommit": {"oid": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE1MTQ5OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadataSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1MTozNFrOF-7OKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1MTozNFrOF-7OKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjMxMg==", "bodyText": "as I understand it's useless now", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401526312", "createdAt": "2020-04-01T10:51:34Z", "author": {"login": "niksv"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadataSchema.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+/**\n+ * Will raise error for fields not available in half-sized metadata.\n+ */\n+public class HalfSizeMetadataSchema extends MetadataSchema {\n+    public static final HalfSizeMetadataSchema INSTANCE = new HalfSizeMetadataSchema();\n+\n+    protected HalfSizeMetadataSchema() {\n+        super();\n+        // hide public constructor\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTcyMjc4OnYy", "diffSide": "RIGHT", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDozNzoyOFrOGJviNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTowMDoxM1rOGJwYyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2OTE3Mw==", "bodyText": "why is it still E_SWITCH_MANUFACTURER_DESCRIPTION match first? isNoviSwitch by itself should be enough", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r412869173", "createdAt": "2020-04-22T10:37:28Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        boolean match = E_SWITCH_MANUFACTURER_DESCRIPTION.equalsIgnoreCase(getManufacturer(sw));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MzE0Nw==", "bodyText": "Correct. I forgot to change this feature-detector.", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r412883147", "createdAt": "2020-04-22T11:00:13Z", "author": {"login": "surabujin"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        boolean match = E_SWITCH_MANUFACTURER_DESCRIPTION.equalsIgnoreCase(getManufacturer(sw));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2OTE3Mw=="}, "originalCommit": {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc2NTc5OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0Nzo1MlrOGJv7cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo0Nzo1MlrOGJv7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NTYzNA==", "bodyText": "Javadoc required", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r412875634", "createdAt": "2020-04-22T10:47:52Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops;\n+\n+import org.openkilda.model.Cookie;\n+\n+import lombok.Getter;\n+\n+/**\n+ * Represent bit-mask and offset of continuous(without 0 in the middle) bit-field.\n+ */\n+@Getter\n+public class BitField {\n+    private final long mask;\n+    private final int offset;\n+\n+    public BitField(long mask) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2038, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}