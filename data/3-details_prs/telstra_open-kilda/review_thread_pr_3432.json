{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNjk1NzUx", "number": 3432, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODowNjo0MlrOD4UAfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozMjo0NVrOD4UQ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc0NjUzOnYy", "diffSide": "RIGHT", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/FlowMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODowNjo0MlrOGPEfAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDowMDoyN1rOGQBs3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NTI5Nw==", "bodyText": "You don't need eval expression here - instead, you can use source = \"source.switchDpId\".", "url": "https://github.com/telstra/open-kilda/pull/3432#discussion_r418455297", "createdAt": "2020-05-01T08:06:42Z", "author": {"login": "surabujin"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/FlowMapper.java", "diffHunk": "@@ -159,6 +160,42 @@ default FlowResponsePayload toFlowResponseOutput(FlowReadResponse r) {\n     @Mapping(target = \"type\", ignore = true)\n     FlowRequest toFlowRequest(FlowRequestV2 request);\n \n+\n+    @Mapping(target = \"flowId\", source = \"id\")\n+    @Mapping(target = \"sourceSwitch\", expression = \"java(request.getSource().getSwitchDpId())\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d64474f9a9f4694d249d4fd0278b48ec1e16b9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1ODI2OQ==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3432#discussion_r419458269", "createdAt": "2020-05-04T14:00:27Z", "author": {"login": "rtretyak"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/FlowMapper.java", "diffHunk": "@@ -159,6 +160,42 @@ default FlowResponsePayload toFlowResponseOutput(FlowReadResponse r) {\n     @Mapping(target = \"type\", ignore = true)\n     FlowRequest toFlowRequest(FlowRequestV2 request);\n \n+\n+    @Mapping(target = \"flowId\", source = \"id\")\n+    @Mapping(target = \"sourceSwitch\", expression = \"java(request.getSource().getSwitchDpId())\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NTI5Nw=="}, "originalCommit": {"oid": "c3d64474f9a9f4694d249d4fd0278b48ec1e16b9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc3OTEzOnYy", "diffSide": "RIGHT", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoyNzoxM1rOGPEyuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDowMDozOFrOGQBtag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MDM0NA==", "bodyText": "Should it be placed into flowHsTopic?", "url": "https://github.com/telstra/open-kilda/pull/3432#discussion_r418460344", "createdAt": "2020-05-01T08:27:13Z", "author": {"login": "surabujin"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -170,17 +169,17 @@\n         final String correlationId = RequestCorrelationId.getId();\n         logger.info(\"Create flow: {}\", input);\n \n-        FlowCreateRequest payload;\n+        FlowRequest flowRequest;\n         try {\n-            payload = new FlowCreateRequest(new FlowDto(input), input.getDiverseFlowId());\n+            flowRequest =  flowMapper.toFlowCreateRequest(input);\n         } catch (IllegalArgumentException e) {\n             logger.error(\"Can not parse arguments: {}\", e.getMessage(), e);\n             throw new MessageException(correlationId, System.currentTimeMillis(), ErrorType.DATA_INVALID,\n                     e.getMessage(), \"Can not parse arguments of the create flow request\");\n         }\n \n         CommandMessage request = new CommandMessage(\n-                payload, System.currentTimeMillis(), correlationId, Destination.WFM);\n+                flowRequest, System.currentTimeMillis(), correlationId, Destination.WFM);\n \n         return messagingChannel.sendAndGet(topic, request)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d64474f9a9f4694d249d4fd0278b48ec1e16b9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1ODQxMA==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3432#discussion_r419458410", "createdAt": "2020-05-04T14:00:38Z", "author": {"login": "rtretyak"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -170,17 +169,17 @@\n         final String correlationId = RequestCorrelationId.getId();\n         logger.info(\"Create flow: {}\", input);\n \n-        FlowCreateRequest payload;\n+        FlowRequest flowRequest;\n         try {\n-            payload = new FlowCreateRequest(new FlowDto(input), input.getDiverseFlowId());\n+            flowRequest =  flowMapper.toFlowCreateRequest(input);\n         } catch (IllegalArgumentException e) {\n             logger.error(\"Can not parse arguments: {}\", e.getMessage(), e);\n             throw new MessageException(correlationId, System.currentTimeMillis(), ErrorType.DATA_INVALID,\n                     e.getMessage(), \"Can not parse arguments of the create flow request\");\n         }\n \n         CommandMessage request = new CommandMessage(\n-                payload, System.currentTimeMillis(), correlationId, Destination.WFM);\n+                flowRequest, System.currentTimeMillis(), correlationId, Destination.WFM);\n \n         return messagingChannel.sendAndGet(topic, request)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MDM0NA=="}, "originalCommit": {"oid": "c3d64474f9a9f4694d249d4fd0278b48ec1e16b9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc4MTc5OnYy", "diffSide": "RIGHT", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoyODozNVrOGPE0Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowNTozOFrOGRIIug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MDcyNg==", "bodyText": "Are we ready for a complete switch to H&S create? I.e. remove toggle for a fast rollback on v1 create? (Current mapping have such toggle).", "url": "https://github.com/telstra/open-kilda/pull/3432#discussion_r418460726", "createdAt": "2020-05-01T08:28:35Z", "author": {"login": "surabujin"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -170,17 +169,17 @@\n         final String correlationId = RequestCorrelationId.getId();\n         logger.info(\"Create flow: {}\", input);\n \n-        FlowCreateRequest payload;\n+        FlowRequest flowRequest;\n         try {\n-            payload = new FlowCreateRequest(new FlowDto(input), input.getDiverseFlowId());\n+            flowRequest =  flowMapper.toFlowCreateRequest(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d64474f9a9f4694d249d4fd0278b48ec1e16b9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMjI4Mg==", "bodyText": "It should be just tested, whole point to change worker on permanent basis", "url": "https://github.com/telstra/open-kilda/pull/3432#discussion_r420612282", "createdAt": "2020-05-06T08:05:38Z", "author": {"login": "timofei-durakov"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -170,17 +169,17 @@\n         final String correlationId = RequestCorrelationId.getId();\n         logger.info(\"Create flow: {}\", input);\n \n-        FlowCreateRequest payload;\n+        FlowRequest flowRequest;\n         try {\n-            payload = new FlowCreateRequest(new FlowDto(input), input.getDiverseFlowId());\n+            flowRequest =  flowMapper.toFlowCreateRequest(input);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MDcyNg=="}, "originalCommit": {"oid": "c3d64474f9a9f4694d249d4fd0278b48ec1e16b9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc4ODU1OnYy", "diffSide": "RIGHT", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/FlowMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozMjo0NVrOGPE4YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowNDozOFrOGRIGug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MTc5Mg==", "bodyText": "I would like to have a copy constructor for DetectConnectedDevicesDto or mapper method to copy such objects (at least it remove code duplication).", "url": "https://github.com/telstra/open-kilda/pull/3432#discussion_r418461792", "createdAt": "2020-05-01T08:32:45Z", "author": {"login": "surabujin"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/FlowMapper.java", "diffHunk": "@@ -159,6 +160,42 @@ default FlowResponsePayload toFlowResponseOutput(FlowReadResponse r) {\n     @Mapping(target = \"type\", ignore = true)\n     FlowRequest toFlowRequest(FlowRequestV2 request);\n \n+\n+    @Mapping(target = \"flowId\", source = \"id\")\n+    @Mapping(target = \"sourceSwitch\", expression = \"java(request.getSource().getSwitchDpId())\")\n+    @Mapping(target = \"destinationSwitch\", expression = \"java(request.getDestination().getSwitchDpId())\")\n+    @Mapping(target = \"sourcePort\", expression = \"java(request.getSource().getPortNumber())\")\n+    @Mapping(target = \"destinationPort\", expression = \"java(request.getDestination().getPortNumber())\")\n+    @Mapping(target = \"sourceVlan\", expression = \"java(request.getSource().getVlanId())\")\n+    @Mapping(target = \"destinationVlan\", expression = \"java(request.getDestination().getVlanId())\")\n+    @Mapping(target = \"bandwidth\", source = \"maximumBandwidth\")\n+    @Mapping(target = \"transitEncapsulationId\", ignore = true)\n+    @Mapping(target = \"type\", ignore = true)\n+    @Mapping(target = \"detectConnectedDevices\", ignore = true)\n+    FlowRequest toFlowRequest(FlowCreatePayload request);\n+\n+    /**\n+     * Map FlowCreatePayload.\n+     *\n+     * @param source {@link FlowCreatePayload} instance.\n+     * @return {@link FlowRequest} instance.\n+     */\n+    default FlowRequest toFlowCreateRequest(FlowCreatePayload source) {\n+        FlowRequest target = toFlowRequest(source).toBuilder().type(Type.CREATE).build();\n+        DetectConnectedDevicesDto detectConnectedDevicesDto = new DetectConnectedDevicesDto();\n+        if (source.getSource().getDetectConnectedDevices() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d64474f9a9f4694d249d4fd0278b48ec1e16b9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMTc3MA==", "bodyText": "in v1 detect info was part of flow endpoint, in v2 it's a separate entity.\nv1: FlowCreatePayload::FlowEndpointPayload::DetectConnectedDevicesPayload(separation based on endpoint level\nv2: FlowRequest::DetectConnectedDevicesDto - single object, separation based on field level,\ne.g. srcLldp/dstLldp\nDoes it make sense to implement such mapper? Could see little gain here.", "url": "https://github.com/telstra/open-kilda/pull/3432#discussion_r420611770", "createdAt": "2020-05-06T08:04:38Z", "author": {"login": "timofei-durakov"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/FlowMapper.java", "diffHunk": "@@ -159,6 +160,42 @@ default FlowResponsePayload toFlowResponseOutput(FlowReadResponse r) {\n     @Mapping(target = \"type\", ignore = true)\n     FlowRequest toFlowRequest(FlowRequestV2 request);\n \n+\n+    @Mapping(target = \"flowId\", source = \"id\")\n+    @Mapping(target = \"sourceSwitch\", expression = \"java(request.getSource().getSwitchDpId())\")\n+    @Mapping(target = \"destinationSwitch\", expression = \"java(request.getDestination().getSwitchDpId())\")\n+    @Mapping(target = \"sourcePort\", expression = \"java(request.getSource().getPortNumber())\")\n+    @Mapping(target = \"destinationPort\", expression = \"java(request.getDestination().getPortNumber())\")\n+    @Mapping(target = \"sourceVlan\", expression = \"java(request.getSource().getVlanId())\")\n+    @Mapping(target = \"destinationVlan\", expression = \"java(request.getDestination().getVlanId())\")\n+    @Mapping(target = \"bandwidth\", source = \"maximumBandwidth\")\n+    @Mapping(target = \"transitEncapsulationId\", ignore = true)\n+    @Mapping(target = \"type\", ignore = true)\n+    @Mapping(target = \"detectConnectedDevices\", ignore = true)\n+    FlowRequest toFlowRequest(FlowCreatePayload request);\n+\n+    /**\n+     * Map FlowCreatePayload.\n+     *\n+     * @param source {@link FlowCreatePayload} instance.\n+     * @return {@link FlowRequest} instance.\n+     */\n+    default FlowRequest toFlowCreateRequest(FlowCreatePayload source) {\n+        FlowRequest target = toFlowRequest(source).toBuilder().type(Type.CREATE).build();\n+        DetectConnectedDevicesDto detectConnectedDevicesDto = new DetectConnectedDevicesDto();\n+        if (source.getSource().getDetectConnectedDevices() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MTc5Mg=="}, "originalCommit": {"oid": "c3d64474f9a9f4694d249d4fd0278b48ec1e16b9"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1954, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}