{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyODU2MjQ4", "number": 3783, "title": "[Server42] LCM part 1 and 2", "bodyText": "don't be scared of size; almost all (2,784) is auto-generated", "createdAt": "2020-10-13T21:19:48Z", "url": "https://github.com/telstra/open-kilda/pull/3783", "merged": true, "mergeCommit": {"oid": "2b77e5aa04656997744b95b1550bc75fd006ad12"}, "closed": true, "closedAt": "2020-10-25T21:53:57Z", "author": {"login": "nikitamarchenko"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS1kVwAFqTUwOTUxOTk2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVVlG7gBqjM5MTM2NjU2NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTE5OTY2", "url": "https://github.com/telstra/open-kilda/pull/3783#pullrequestreview-509519966", "createdAt": "2020-10-15T15:43:19Z", "commit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0MzoyMFrOHiORQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzowMzo1OVrOHiRkVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NzQyNw==", "bodyText": "As for me it is more make_flow_id than get_flow_id.", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505647427", "createdAt": "2020-10-15T15:43:20Z", "author": {"login": "surabujin"}, "path": "src-cpp/server42/src/FlowId.h", "diffHunk": "@@ -0,0 +1,19 @@\n+#ifndef SERVER42_FLOWID_H\n+#define SERVER42_FLOWID_H\n+\n+\n+namespace org::openkilda {\n+\n+    enum class flow_id_members {\n+        flow_id, direction\n+    };\n+\n+    using flow_id_t = std::tuple<std::string, bool>;\n+\n+    inline flow_id_t get_flow_id(const std::string &flow_id, bool direction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0ODU5Ng==", "bodyText": "Flow id become string, perhaps object flow_id_t should be flow_reference_t, it should resolve name/meaning collision in such places.", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505648596", "createdAt": "2020-10-15T15:44:56Z", "author": {"login": "surabujin"}, "path": "src-cpp/server42/src/FlowMetadata.h", "diffHunk": "@@ -0,0 +1,119 @@\n+#ifndef SERVER42_FLOWMETADATA_H\n+#define SERVER42_FLOWMETADATA_H\n+\n+#include <map>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+#include <list>\n+#include <boost/shared_ptr.hpp>\n+\n+#include <boost/multi_index_container.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index/identity.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/mem_fun.hpp>\n+\n+#include \"FlowId.h\"\n+#include \"FlowPool.h\"\n+\n+namespace org::openkilda {\n+\n+    namespace bmi = boost::multi_index;\n+\n+    class FlowMetadata {\n+\n+        flow_id_t flow_id;\n+        std::string dst_mac;\n+        int64_t hash;\n+\n+    public:\n+        FlowMetadata(std::string flowId, bool direction, std::string dstMac, int64_t hash)\n+                : dst_mac(std::move(dstMac)), hash(hash) {\n+\n+            flow_id = org::openkilda::get_flow_id(flowId, direction);\n+        }\n+\n+        const std::string &get_flow_id() const {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODg3OQ==", "bodyText": "Should it be ss <<  too? Also I didn't get what we are trying to output here.", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505668879", "createdAt": "2020-10-15T16:13:32Z", "author": {"login": "surabujin"}, "path": "src-cpp/server42/src/FlowPoolTest.cpp", "diffHunk": "@@ -1,82 +1,85 @@\n #define BOOST_TEST_MODULE server42 tests\n+\n #include <boost/test/unit_test.hpp>\n \n #include \"FlowPool.h\"\n+#include \"FlowMetadata.h\"\n #include \"statistics.pb.h\"\n \n+namespace bmi = boost::multi_index;\n+namespace ok = org::openkilda;\n+\n class BasicAllocator {\n public:\n-    typedef int* value_t;\n+    typedef int *value_t;\n \n-    static  value_t allocate(int v) {\n+    static value_t allocate(int v) {\n         return new int(v);\n     }\n \n     static void dealocate(value_t v) {\n-        delete(v);\n+        delete (v);\n     }\n };\n \n \n-BOOST_AUTO_TEST_CASE( flow_pool_basic_add )\n-{\n+BOOST_AUTO_TEST_CASE(flow_pool_basic_add) {\n \n     org::openkilda::FlowPool<BasicAllocator> flow;\n \n-    flow.add_flow(\"test-01\", BasicAllocator::allocate(100));\n-    flow.add_flow(\"test-02\", BasicAllocator::allocate(1000));\n+    flow.add_flow(\"test-01\", BasicAllocator::allocate(100), 1);\n+    flow.add_flow(\"test-02\", BasicAllocator::allocate(1000), 2);\n     flow.remove_flow(\"test-01\");\n \n-    BOOST_TEST( flow.table.size() == 1 );\n+    BOOST_TEST(flow.table.size() == 1);\n }\n \n #define C1M 150\n //#define C1M 3\n \n-BOOST_AUTO_TEST_CASE( flow_pool_basic_add_1m )\n-{\n+BOOST_AUTO_TEST_CASE(flow_pool_basic_add_1m) {\n     org::openkilda::FlowPool<BasicAllocator> flow;\n-    for (uint32_t i = 0; i<C1M; ++i) {\n+    for (uint32_t i = 0; i < C1M; ++i) {\n         std::stringstream ss;\n-        ss << \"test-\"<< i;\n-        flow.add_flow(ss.str(), BasicAllocator::allocate(i));\n+        ss << \"test-\" << i;\n+        flow.add_flow(ss.str(), BasicAllocator::allocate(i), i);\n     }\n \n     std::cout << flow.table.size();\n \n-    BOOST_TEST( flow.table.size() == C1M);\n+    BOOST_TEST(flow.table.size() == C1M);\n \n-    for (uint32_t i = 0; i<C1M; ++i) {\n+    for (uint32_t i = 0; i < C1M; ++i) {\n         std::stringstream ss;\n-        ss << \"test-\"<< i;\n+        ss << \"test-\" << i;\n         flow.remove_flow(ss.str());\n         //std::cout << flow.table.size() << \"\\n\" << std::flush;\n     }\n \n-    BOOST_TEST( flow.table.size() == 0);\n+    BOOST_TEST(flow.table.size() == 0);\n }\n \n-BOOST_AUTO_TEST_CASE( flow_pool_basic_iteration_1m ) {\n+BOOST_AUTO_TEST_CASE(flow_pool_basic_iteration_1m) {\n \n     org::openkilda::FlowPool<BasicAllocator> flow;\n-    for (uint32_t i = 0; i<C1M; ++i) {\n+    for (uint32_t i = 0; i < C1M; ++i) {\n         std::stringstream ss;\n-        ss << \"test-\"<< i;\n-        flow.add_flow(ss.str(), BasicAllocator::allocate(i));\n+        ss << \"test-\" << i;\n+        flow.add_flow(ss.str(), BasicAllocator::allocate(i), i);\n     }\n \n     int **start = flow.table.data();\n     int **end = flow.table.data() + flow.table.size();\n \n-    for (int**pos = start;pos < end;pos += 64) {\n+    for (int **pos = start; pos < end; pos += 64) {\n         //m_Device->sendPackets(pos, std::min(64L, end - pos));\n         std::cout << **pos << \"-\" << std::min(64L, end - pos) << \"\\n\" << std::flush;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4MDI4OQ==", "bodyText": "Maybe \"replace old flow with new flow\"?", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505680289", "createdAt": "2020-10-15T16:30:38Z", "author": {"login": "surabujin"}, "path": "src-cpp/server42/src/PacketGenerator.cpp", "diffHunk": "@@ -56,7 +66,17 @@ namespace org::openkilda {\n \n         auto packet = flow_pool_t::allocator_t::allocate(newPacket.getRawPacket(), arg.device);\n \n-        bool success = arg.flow_pool.add_flow(get_flow_id(arg), packet);\n+        if (flow_meta) {\n+            BOOST_LOG_TRIVIAL(debug)\n+                << \"remove old flow \" << arg.flow_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4OTEzNQ==", "bodyText": "Why we have @Header here?", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505689135", "createdAt": "2020-10-15T16:44:09Z", "author": {"login": "surabujin"}, "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/Gate.java", "diffHunk": "@@ -171,19 +204,34 @@ void listen(PushSettings data) {\n \n     @KafkaHandler\n     void listen(RemoveFlow data) {\n+        try {\n+            removeFlow(data.getFlowId(), data.getDirection());\n+        } catch (InvalidProtocolBufferException e) {\n+            log.error(\"Marshalling error on {}\", data);\n+        }\n+    }\n+\n+    private void removeFlow(String flowId, FlowDirection direction) throws InvalidProtocolBufferException {\n         Builder builder = CommandPacket.newBuilder();\n         Flow flow = Flow.newBuilder()\n-                .setFlowId(data.getFlowId())\n-                .setDirection(FlowDirection.toBoolean(data.getDirection()))\n+                .setFlowId(flowId)\n+                .setDirection(FlowDirection.toBoolean(direction))\n                 .build();\n         Control.RemoveFlow removeFlow = Control.RemoveFlow.newBuilder().setFlow(flow).build();\n         builder.setType(Type.REMOVE_FLOW);\n         builder.addCommand(Any.pack(removeFlow));\n         CommandPacket packet = builder.build();\n-        try {\n-            zeroMqClient.send(packet);\n-        } catch (InvalidProtocolBufferException e) {\n-            log.error(\"Marshalling error on {}\", data);\n-        }\n+        zeroMqClient.send(packet);\n+    }\n+\n+    private CommandPacket getFlowLIstCommandPacket(@Header(KafkaHeaders.RECEIVED_MESSAGE_KEY) String switchIdKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTAyMQ==", "bodyText": "Perhaps is will be better to name it RemoveExcessFlowOnSwitch?", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505691021", "createdAt": "2020-10-15T16:47:12Z", "author": {"login": "surabujin"}, "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/Gate.java", "diffHunk": "@@ -154,6 +161,32 @@ void listen(ListFlowsRequest data) {\n         }\n     }\n \n+    @KafkaHandler\n+    void listen(ListFlowsOnSwitch data,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTU3Nw==", "bodyText": "2 capital letter in a row, is everithing ok with stylechecks in this package?", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505691577", "createdAt": "2020-10-15T16:48:05Z", "author": {"login": "surabujin"}, "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/Gate.java", "diffHunk": "@@ -171,19 +204,34 @@ void listen(PushSettings data) {\n \n     @KafkaHandler\n     void listen(RemoveFlow data) {\n+        try {\n+            removeFlow(data.getFlowId(), data.getDirection());\n+        } catch (InvalidProtocolBufferException e) {\n+            log.error(\"Marshalling error on {}\", data);\n+        }\n+    }\n+\n+    private void removeFlow(String flowId, FlowDirection direction) throws InvalidProtocolBufferException {\n         Builder builder = CommandPacket.newBuilder();\n         Flow flow = Flow.newBuilder()\n-                .setFlowId(data.getFlowId())\n-                .setDirection(FlowDirection.toBoolean(data.getDirection()))\n+                .setFlowId(flowId)\n+                .setDirection(FlowDirection.toBoolean(direction))\n                 .build();\n         Control.RemoveFlow removeFlow = Control.RemoveFlow.newBuilder().setFlow(flow).build();\n         builder.setType(Type.REMOVE_FLOW);\n         builder.addCommand(Any.pack(removeFlow));\n         CommandPacket packet = builder.build();\n-        try {\n-            zeroMqClient.send(packet);\n-        } catch (InvalidProtocolBufferException e) {\n-            log.error(\"Marshalling error on {}\", data);\n-        }\n+        zeroMqClient.send(packet);\n+    }\n+\n+    private CommandPacket getFlowLIstCommandPacket(@Header(KafkaHeaders.RECEIVED_MESSAGE_KEY) String switchIdKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTg4NQ==", "bodyText": "extra line", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505691885", "createdAt": "2020-10-15T16:48:37Z", "author": {"login": "surabujin"}, "path": "src-java/server42/server42-control/src/test/java/org/openkilda/server42/control/kafka/GateTest.java", "diffHunk": "@@ -157,13 +157,23 @@ public void clearFlowsTest() throws Exception {\n         Headers headers = Headers.builder().correlationId(\"some-correlation-id\").build();\n         ClearFlows clearFlows = ClearFlows.builder().headers(headers).build();\n \n-        gate.listen(clearFlows);\n+        String dpId = \"00:00:1b:45:18:d6:71:5a\";\n+        gate.listen(clearFlows, dpId);\n         CommandPacket commandPacket = getCommandPacket();\n         assertThat(commandPacket.getType()).isEqualTo(Type.CLEAR_FLOWS);\n-        assertThat(commandPacket.getCommandList()).isEmpty();\n+\n+\n+        assertThat(commandPacket.getCommandList()).hasSize(1);\n+        Any command = commandPacket.getCommand(0);\n+        assertThat(command.is(Control.ClearFlowsFilter.class)).isTrue();\n+\n+        Control.ClearFlowsFilter unpack = command.unpack(Control.ClearFlowsFilter.class);\n+        String dstMac = \"1b:45:18:d6:71:5a\";\n+        assertThat(unpack.getDstMac()).isEqualTo(dstMac);\n     }\n \n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwMTQ2Mg==", "bodyText": "As for me simple loop will be better that filter stream 2 times.", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505701462", "createdAt": "2020-10-15T17:03:59Z", "author": {"login": "surabujin"}, "path": "src-java/server42/server42-control-storm-topology/src/main/java/org/openkilda/server42/control/topology/service/RouterService.java", "diffHunk": "@@ -52,4 +58,29 @@ public void handleFlowRttFeatureToggle(Boolean featureEnabled) {\n                     .forEach(s -> carrier.deactivateFlowMonitoringOnSwitch(s.getSwitchId()));\n         }\n     }\n+\n+    /**\n+     * Part of LCM. Sends flow sync messages to FlowHandler or deactivate in case of feature disabled.\n+     */\n+    public void processSync() {\n+        if (isFlowRttFeatureToggle()) {\n+            Collection<SwitchProperties> all = switchPropertiesRepository.findAll();\n+            all.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/3e4592d6b9aadcb16224ae9fe952f4f97bacddfa", "committedDate": "2020-10-13T21:09:10Z", "message": "[Server42] LCM part 1 and 2"}, "afterCommit": {"oid": "6a36527439cf4a787abc647d5407b5c10070f5a8", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/6a36527439cf4a787abc647d5407b5c10070f5a8", "committedDate": "2020-10-19T13:57:08Z", "message": "[Server42] LCM part 1 and 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNDM1Mzgz", "url": "https://github.com/telstra/open-kilda/pull/3783#pullrequestreview-512435383", "createdAt": "2020-10-20T08:04:20Z", "commit": {"oid": "6a36527439cf4a787abc647d5407b5c10070f5a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjk4NjM3", "url": "https://github.com/telstra/open-kilda/pull/3783#pullrequestreview-512698637", "createdAt": "2020-10-20T13:19:49Z", "commit": {"oid": "6a36527439cf4a787abc647d5407b5c10070f5a8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxOTo0OVrOHk8Avg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxOTo0OVrOHk8Avg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ5NDAxNA==", "bodyText": "shoud it become get_flow_endpoint()?", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r508494014", "createdAt": "2020-10-20T13:19:49Z", "author": {"login": "surabujin"}, "path": "src-cpp/server42/src/FlowMetadata.h", "diffHunk": "@@ -0,0 +1,119 @@\n+#ifndef SERVER42_FLOWMETADATA_H\n+#define SERVER42_FLOWMETADATA_H\n+\n+#include <map>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+#include <list>\n+#include <boost/shared_ptr.hpp>\n+\n+#include <boost/multi_index_container.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index/identity.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/mem_fun.hpp>\n+\n+#include \"FlowId.h\"\n+#include \"FlowPool.h\"\n+\n+namespace org::openkilda {\n+\n+    namespace bmi = boost::multi_index;\n+\n+    class FlowMetadata {\n+\n+        flow_endpoint_t flow_endpoint;\n+        std::string dst_mac;\n+        int64_t hash;\n+\n+    public:\n+        FlowMetadata(std::string flow_id, bool direction, std::string dst_mac, int64_t hash)\n+                : dst_mac(std::move(dst_mac)), hash(hash) {\n+\n+            flow_endpoint = org::openkilda::make_flow_endpoint(flow_id, direction);\n+        }\n+\n+        const std::string &get_flow_id() const {\n+\n+            return std::get<int(flow_endpoint_members::flow_id)>(flow_endpoint);\n+        };\n+\n+        const flow_endpoint_t &get_key() const {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a36527439cf4a787abc647d5407b5c10070f5a8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a68e04f7ed1ce3c9b0a44ecb9e36b2298701491c", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/a68e04f7ed1ce3c9b0a44ecb9e36b2298701491c", "committedDate": "2020-10-23T12:17:50Z", "message": "[Server42] LCM part 1 and 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a36527439cf4a787abc647d5407b5c10070f5a8", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/6a36527439cf4a787abc647d5407b5c10070f5a8", "committedDate": "2020-10-19T13:57:08Z", "message": "[Server42] LCM part 1 and 2"}, "afterCommit": {"oid": "a68e04f7ed1ce3c9b0a44ecb9e36b2298701491c", "author": {"user": {"login": "nikitamarchenko", "name": "Nikita Marchenko"}}, "url": "https://github.com/telstra/open-kilda/commit/a68e04f7ed1ce3c9b0a44ecb9e36b2298701491c", "committedDate": "2020-10-23T12:17:50Z", "message": "[Server42] LCM part 1 and 2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3745, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}