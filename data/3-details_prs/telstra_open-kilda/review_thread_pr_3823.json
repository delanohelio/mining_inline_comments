{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTE1NTYz", "number": 3823, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1MDoxMFrOFFDTkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1MjowNFrOFFDXXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQxMzYwOnYy", "diffSide": "RIGHT", "path": "src-java/grpc-speaker/grpc-service/src/main/java/org/openkilda/grpc/speaker/controller/NoviflowController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1MDoxMFrOIFXESA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODozMDo0NlrOIF-yjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTcyMA==", "bodyText": "Rename method param as well.", "url": "https://github.com/telstra/open-kilda/pull/3823#discussion_r542491720", "createdAt": "2020-12-14T15:50:10Z", "author": {"login": "rozdy"}, "path": "src-java/grpc-speaker/grpc-service/src/main/java/org/openkilda/grpc/speaker/controller/NoviflowController.java", "diffHunk": "@@ -129,7 +129,7 @@\n     public CompletableFuture<EnableLogMessagesResponse> enableLogOferrors(\n             @PathVariable(\"switch_address\") String switchAddress,\n             @RequestBody LogOferrorsDto logOferrors) {\n-        return grpcService.enableLogOferror(switchAddress, logOferrors);\n+        return grpcService.enableLogOfError(switchAddress, logOferrors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8d8369480fcb99448c0ef0021b1fa8d3afd5cdf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MjU0MA==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3823#discussion_r543142540", "createdAt": "2020-12-15T08:30:46Z", "author": {"login": "surabujin"}, "path": "src-java/grpc-speaker/grpc-service/src/main/java/org/openkilda/grpc/speaker/controller/NoviflowController.java", "diffHunk": "@@ -129,7 +129,7 @@\n     public CompletableFuture<EnableLogMessagesResponse> enableLogOferrors(\n             @PathVariable(\"switch_address\") String switchAddress,\n             @RequestBody LogOferrorsDto logOferrors) {\n-        return grpcService.enableLogOferror(switchAddress, logOferrors);\n+        return grpcService.enableLogOfError(switchAddress, logOferrors);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTcyMA=="}, "originalCommit": {"oid": "b8d8369480fcb99448c0ef0021b1fa8d3afd5cdf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQyMzMyOnYy", "diffSide": "RIGHT", "path": "src-java/grpc-speaker/grpc-service/src/main/java/org/openkilda/grpc/speaker/client/GrpcSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1MjowNFrOIFXKOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODozMDo1OVrOIF-zCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MzI0MA==", "bodyText": "Can we change Consumer<Void> to Runnable here?", "url": "https://github.com/telstra/open-kilda/pull/3823#discussion_r542493240", "createdAt": "2020-12-14T15:52:04Z", "author": {"login": "rozdy"}, "path": "src-java/grpc-speaker/grpc-service/src/main/java/org/openkilda/grpc/speaker/client/GrpcSession.java", "diffHunk": "@@ -418,9 +395,36 @@ public void shutdown() {\n      * @return {@link CompletableFuture} with operation result.\n      */\n     public CompletableFuture<Optional<PacketInOutStats>> getPacketInOutStats() {\n-        GrpcResponseObserver<PacketInOutStats> observer = new GrpcResponseObserver<>(address, GET_PACKET_IN_OUT_STATS);\n         log.info(\"Getting packet in out stats for switch {}\", address);\n-        stub.showStatsPacketInOut(ShowPacketInOutStats.newBuilder().build(), observer);\n-        return observer.future.thenApply(responses -> responses.stream().findFirst());\n+\n+        GrpcResponseObserver<PacketInOutStats> observer = new GrpcResponseObserver<>(address, GET_PACKET_IN_OUT_STATS);\n+        extendChain(\n+                dummy -> stub.showStatsPacketInOut(ShowPacketInOutStats.newBuilder().build(), observer),\n+                observer.future);\n+        return observer.future\n+                .thenApply(responses -> responses.stream().findFirst());\n+    }\n+\n+    private synchronized void extendChain(Consumer<Void> action, CompletableFuture<?> operation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8d8369480fcb99448c0ef0021b1fa8d3afd5cdf"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MjY2Nw==", "bodyText": "yes, replaced", "url": "https://github.com/telstra/open-kilda/pull/3823#discussion_r543142667", "createdAt": "2020-12-15T08:30:59Z", "author": {"login": "surabujin"}, "path": "src-java/grpc-speaker/grpc-service/src/main/java/org/openkilda/grpc/speaker/client/GrpcSession.java", "diffHunk": "@@ -418,9 +395,36 @@ public void shutdown() {\n      * @return {@link CompletableFuture} with operation result.\n      */\n     public CompletableFuture<Optional<PacketInOutStats>> getPacketInOutStats() {\n-        GrpcResponseObserver<PacketInOutStats> observer = new GrpcResponseObserver<>(address, GET_PACKET_IN_OUT_STATS);\n         log.info(\"Getting packet in out stats for switch {}\", address);\n-        stub.showStatsPacketInOut(ShowPacketInOutStats.newBuilder().build(), observer);\n-        return observer.future.thenApply(responses -> responses.stream().findFirst());\n+\n+        GrpcResponseObserver<PacketInOutStats> observer = new GrpcResponseObserver<>(address, GET_PACKET_IN_OUT_STATS);\n+        extendChain(\n+                dummy -> stub.showStatsPacketInOut(ShowPacketInOutStats.newBuilder().build(), observer),\n+                observer.future);\n+        return observer.future\n+                .thenApply(responses -> responses.stream().findFirst());\n+    }\n+\n+    private synchronized void extendChain(Consumer<Void> action, CompletableFuture<?> operation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MzI0MA=="}, "originalCommit": {"oid": "b8d8369480fcb99448c0ef0021b1fa8d3afd5cdf"}, "originalPosition": 295}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2260, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}