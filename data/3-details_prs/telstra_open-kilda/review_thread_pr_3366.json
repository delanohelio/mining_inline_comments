{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjkwNDAz", "number": 3366, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NzoyNFrODv-uyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTozNjoxMlrODy1Z7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjM3NDQ4OnYy", "diffSide": "RIGHT", "path": "confd/templates/docker-compose/docker-compose.tmpl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NzoyNVrOGCt8xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo0Mzo1MVrOGC1UTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMzE3NA==", "bodyText": "tbh this doesn't look like a mandatory part of the system, thus should be wrapped with {{if not (exists \"/no_grpc_stub\")}} thing", "url": "https://github.com/telstra/open-kilda/pull/3366#discussion_r405503174", "createdAt": "2020-04-08T12:57:25Z", "author": {"login": "rtretyak"}, "path": "confd/templates/docker-compose/docker-compose.tmpl", "diffHunk": "@@ -4,6 +4,21 @@\n version: '2.1'\n services:\n \n+  grpc-stub:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476f531b71b579d35f23b28f3c8f37bcb588f730"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMzg4Nw==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3366#discussion_r405623887", "createdAt": "2020-04-08T15:43:51Z", "author": {"login": "niksv"}, "path": "confd/templates/docker-compose/docker-compose.tmpl", "diffHunk": "@@ -4,6 +4,21 @@\n version: '2.1'\n services:\n \n+  grpc-stub:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMzE3NA=="}, "originalCommit": {"oid": "476f531b71b579d35f23b28f3c8f37bcb588f730"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjMwMzgyOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/DockerHelper.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTozNjoxMlrOGHHEmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoyNDowM1rOGHL0vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTA4Mw==", "bodyText": "this could lead to wrong network finding", "url": "https://github.com/telstra/open-kilda/pull/3366#discussion_r410109083", "createdAt": "2020-04-17T09:36:12Z", "author": {"login": "timofei-durakov"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/DockerHelper.groovy", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.openkilda.functionaltests.helpers\n+\n+import com.spotify.docker.client.DefaultDockerClient\n+import com.spotify.docker.client.DockerClient\n+import com.spotify.docker.client.DockerClient.ListContainersParam\n+import groovy.util.logging.Slf4j\n+\n+@Slf4j\n+class DockerHelper {\n+\n+    DockerClient dockerClient\n+    String networkName\n+\n+    DockerHelper(String host) {\n+        log.debug(\"Configuring docker client\");\n+        if (host == 'localhost') {\n+            dockerClient = DefaultDockerClient.fromEnv().build()\n+        } else {\n+            dockerClient = DefaultDockerClient.fromEnv().uri(host).build()\n+        }\n+        log.debug(\"Connected to Docker Host: $host\")\n+\n+        networkName = getNetworkName()\n+        log.debug(\"Network name: $networkName\")\n+    }\n+\n+    String getContainerIp(String containerName) {\n+        dockerClient.listContainers(ListContainersParam.allContainers()).find {\n+            it.names().contains(\"/\" + containerName)\n+        }.networkSettings().networks()[networkName].ipAddress()\n+    }\n+\n+    void restartContainer(String containerId) {\n+        dockerClient.restartContainer(containerId)\n+    }\n+\n+    void waitContainer(String containerId) {\n+        dockerClient.waitContainer(containerId)\n+    }\n+\n+    private String getNetworkName() {\n+        dockerClient.listNetworks()*.name().find { it.contains('_default')}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c64c8cc39e156bf0fd2db3b9676a26a8066ffdd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4Njk0Mg==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3366#discussion_r410186942", "createdAt": "2020-04-17T12:24:03Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/DockerHelper.groovy", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.openkilda.functionaltests.helpers\n+\n+import com.spotify.docker.client.DefaultDockerClient\n+import com.spotify.docker.client.DockerClient\n+import com.spotify.docker.client.DockerClient.ListContainersParam\n+import groovy.util.logging.Slf4j\n+\n+@Slf4j\n+class DockerHelper {\n+\n+    DockerClient dockerClient\n+    String networkName\n+\n+    DockerHelper(String host) {\n+        log.debug(\"Configuring docker client\");\n+        if (host == 'localhost') {\n+            dockerClient = DefaultDockerClient.fromEnv().build()\n+        } else {\n+            dockerClient = DefaultDockerClient.fromEnv().uri(host).build()\n+        }\n+        log.debug(\"Connected to Docker Host: $host\")\n+\n+        networkName = getNetworkName()\n+        log.debug(\"Network name: $networkName\")\n+    }\n+\n+    String getContainerIp(String containerName) {\n+        dockerClient.listContainers(ListContainersParam.allContainers()).find {\n+            it.names().contains(\"/\" + containerName)\n+        }.networkSettings().networks()[networkName].ipAddress()\n+    }\n+\n+    void restartContainer(String containerId) {\n+        dockerClient.restartContainer(containerId)\n+    }\n+\n+    void waitContainer(String containerId) {\n+        dockerClient.waitContainer(containerId)\n+    }\n+\n+    private String getNetworkName() {\n+        dockerClient.listNetworks()*.name().find { it.contains('_default')}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTA4Mw=="}, "originalCommit": {"oid": "5c64c8cc39e156bf0fd2db3b9676a26a8066ffdd"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1917, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}