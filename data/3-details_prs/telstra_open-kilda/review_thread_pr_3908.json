{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTU4OTkw", "number": 3908, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo1MTo1NFrOFC71SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo1MTo1NFrOFC71SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjIxNzY5OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo1MTo1NFrOICVoRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODoyOTo0MVrOIC9Icg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyMjQzOA==", "bodyText": "I don't like this naming since it is very narrow. Test should describe a certain situation that we are testing, more broad scenario. Right now this looks like a pin-point test that is created to test a specific defect, very low value.\nDescribe a real-life situation/use-case: System detects a 1-way ISL as a Failed ISL -> then as part of this broad test add required verifications", "url": "https://github.com/telstra/open-kilda/pull/3908#discussion_r539322438", "createdAt": "2020-12-09T13:51:54Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -759,13 +759,74 @@ class LinkSpec extends HealthCheckSpecification {\n             antiflap.portUp(isl.srcSwitch.dpId, isl.srcPort)\n             Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n                 def links = northbound.getAllLinks()\n-                assert islUtils.getIslInfo(links, isl.reversed).get().state == IslChangeType.DISCOVERED\n-                assert islUtils.getIslInfo(links, isl).get().state == IslChangeType.DISCOVERED\n+                assert islUtils.getIslInfo(links, isl.reversed).get().state == DISCOVERED\n+                assert islUtils.getIslInfo(links, isl).get().state == DISCOVERED\n             }\n         }\n         database.resetCosts()\n     }\n \n+    @Tidy\n+    def \"The src/dst switches are valid when isl is discovered in one direction only\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74737d2cdfc2ae7db2e090fb8a1d614f8e381a57"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2OTY1MA==", "bodyText": "Make sense.Renamed.", "url": "https://github.com/telstra/open-kilda/pull/3908#discussion_r539969650", "createdAt": "2020-12-10T08:29:41Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -759,13 +759,74 @@ class LinkSpec extends HealthCheckSpecification {\n             antiflap.portUp(isl.srcSwitch.dpId, isl.srcPort)\n             Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n                 def links = northbound.getAllLinks()\n-                assert islUtils.getIslInfo(links, isl.reversed).get().state == IslChangeType.DISCOVERED\n-                assert islUtils.getIslInfo(links, isl).get().state == IslChangeType.DISCOVERED\n+                assert islUtils.getIslInfo(links, isl.reversed).get().state == DISCOVERED\n+                assert islUtils.getIslInfo(links, isl).get().state == DISCOVERED\n             }\n         }\n         database.resetCosts()\n     }\n \n+    @Tidy\n+    def \"The src/dst switches are valid when isl is discovered in one direction only\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyMjQzOA=="}, "originalCommit": {"oid": "74737d2cdfc2ae7db2e090fb8a1d614f8e381a57"}, "originalPosition": 183}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2361, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}