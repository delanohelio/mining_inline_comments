{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjg1MjE1", "number": 3859, "title": "Zero downtime", "bodyText": "", "createdAt": "2020-11-18T15:55:11Z", "url": "https://github.com/telstra/open-kilda/pull/3859", "merged": true, "mergeCommit": {"oid": "b9a673c2d81379a21e1c63fea7cdf80ec064dd0f"}, "closed": true, "closedAt": "2020-12-03T15:31:32Z", "author": {"login": "timofei-durakov"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd0yy1gBqjQwMTI3NjU3NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdikN2LABqjQwNjc4NjU5MTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3288a82c96740f6be9a6d32912442eaf122cc168", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/3288a82c96740f6be9a6d32912442eaf122cc168", "committedDate": "2020-11-18T15:45:29Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "33ff97d9f0b4bf8eb2eddd8a714bab476e770836", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/33ff97d9f0b4bf8eb2eddd8a714bab476e770836", "committedDate": "2020-11-18T21:11:24Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33ff97d9f0b4bf8eb2eddd8a714bab476e770836", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/33ff97d9f0b4bf8eb2eddd8a714bab476e770836", "committedDate": "2020-11-18T21:11:24Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "84cf0502f83c3562287c2946ace489083f5816a2", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/84cf0502f83c3562287c2946ace489083f5816a2", "committedDate": "2020-11-24T10:31:19Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3Mzc5MDEy", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-537379012", "createdAt": "2020-11-24T11:02:33Z", "commit": {"oid": "84cf0502f83c3562287c2946ace489083f5816a2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTowMjozM1rOH47mMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxOTowNVrOH48Nhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ1ODczOA==", "bodyText": "Please use api because it will be needed in versioning", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r529458738", "createdAt": "2020-11-24T11:02:33Z", "author": {"login": "niksv"}, "path": "src-java/blue-green/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+plugins {\n+    id 'java-library'\n+}\n+\n+description = 'Kilda Blue Green'\n+\n+dependencies {\n+    implementation 'com.google.guava:guava'\n+    implementation 'org.apache.commons:commons-lang3'\n+    implementation 'com.esotericsoftware:kryo:3.0.3'\n+\n+    implementation 'org.mapstruct:mapstruct-jdk8'\n+    implementation 'org.mapstruct:mapstruct-processor'\n+\n+    // Conflicts with storm local run over IDE.\n+    implementation ('org.apache.zookeeper:zookeeper:3.4.0') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84cf0502f83c3562287c2946ace489083f5816a2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NDQ1Ng==", "bodyText": "What it received 2 events during waiting?\n\nZK send event1\nwe store it into event field\nZK send event2\nwe store it into event field\nSomeone ask spout to pull message.\nwe send only event2 because we replaced event1 on step 4\n\nI think we need synchronized queue here", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r529464456", "createdAt": "2020-11-24T11:11:48Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperSpout.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifeCycleObserver;\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+import org.openkilda.wfm.AbstractBolt;\n+import org.openkilda.wfm.CommandContext;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.apache.storm.task.TopologyContext;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.topology.base.BaseRichSpout;\n+import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Values;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+@Slf4j\n+public class ZooKeeperSpout extends BaseRichSpout implements LifeCycleObserver {\n+    public static final String BOLT_ID = \"zookeeper.spout\";\n+    public static final String FIELD_ID_LIFECYCLE_EVENT = \"lifecycle.event\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+\n+    private ZkWatchDog watchDog;\n+    private SpoutOutputCollector collector;\n+    private LifecycleEvent event;\n+    private boolean newEvent = false;\n+    private long messageId = 0;\n+\n+\n+    public ZooKeeperSpout(String id, String serviceName, String connectionString) {\n+        this.id = id;\n+        this.serviceName = serviceName;\n+        this.connectionString = connectionString;\n+    }\n+\n+    @Override\n+    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n+        this.collector = collector;\n+        try {\n+            this.watchDog = ZkWatchDog.builder().id(id).serviceName(serviceName)\n+                    .connectionString(connectionString).build();\n+            watchDog.subscribe(this);\n+        } catch (IOException e) {\n+            log.error(\"Failed to init ZooKeeper with connection string: {} received: {} \", connectionString,\n+                    e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void nextTuple() {\n+        if (event != null && newEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84cf0502f83c3562287c2946ace489083f5816a2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NTU2OA==", "bodyText": "should event and newEvent be volatile or have syncronized access because we have 2 threads here (one for handle() and one for nextTupple())?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r529465568", "createdAt": "2020-11-24T11:13:36Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperSpout.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifeCycleObserver;\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+import org.openkilda.wfm.AbstractBolt;\n+import org.openkilda.wfm.CommandContext;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.apache.storm.task.TopologyContext;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.topology.base.BaseRichSpout;\n+import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Values;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+@Slf4j\n+public class ZooKeeperSpout extends BaseRichSpout implements LifeCycleObserver {\n+    public static final String BOLT_ID = \"zookeeper.spout\";\n+    public static final String FIELD_ID_LIFECYCLE_EVENT = \"lifecycle.event\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+\n+    private ZkWatchDog watchDog;\n+    private SpoutOutputCollector collector;\n+    private LifecycleEvent event;\n+    private boolean newEvent = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84cf0502f83c3562287c2946ace489083f5816a2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NzQ2NQ==", "bodyText": "nit: 2 empty lines", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r529467465", "createdAt": "2020-11-24T11:16:49Z", "author": {"login": "niksv"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkClient.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@SuperBuilder\n+@Slf4j\n+public abstract class ZkClient implements Watcher {\n+    private static final String ROOT = \"/\";\n+    private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n+\n+    protected String id;\n+    protected String serviceName;\n+    protected ZooKeeper zookeeper;\n+    private final String connectionString;\n+    private final int sessionTimeout;\n+\n+    public ZkClient(String id, String serviceName, String connectionString,\n+                    int sessionTimeout) throws IOException {\n+        if (sessionTimeout == 0) {\n+            sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n+        }\n+        this.serviceName = serviceName;\n+        this.id = id;\n+        this.zookeeper = getZk();\n+        this.connectionString = connectionString;\n+        this.sessionTimeout = sessionTimeout;\n+    }\n+\n+    void initWatch() {\n+\n+    }\n+\n+    String getPaths(String... paths) {\n+        return Paths.get(ROOT, paths).toString();\n+    }\n+\n+    boolean refreshConnection(KeeperState state) throws IOException {\n+        if (state == KeeperState.Disconnected || state == KeeperState.Expired) {\n+            zookeeper = getZk();\n+            initWatch();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    protected ZooKeeper getZk() throws IOException {\n+        return new ZooKeeper(connectionString, sessionTimeout, this);\n+    }\n+\n+    protected void ensureZNode(String... path) throws KeeperException, InterruptedException {\n+        String nodePath = getPaths(path);\n+        if (zookeeper.exists(nodePath, false) == null) {\n+            try {\n+                zookeeper.create(nodePath, \"\".getBytes(),\n+                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            } catch (Exception e) {\n+                // pass\n+            }\n+        }\n+        if (zookeeper.exists(nodePath, false) == null) {\n+            String message = String.format(\"Zk node %s still does not exists\", nodePath);\n+            log.error(message);\n+            throw new IllegalStateException(message);\n+        }\n+    }\n+\n+    void validateNodes() throws KeeperException, InterruptedException {\n+        ensureZNode(serviceName);\n+        ensureZNode(serviceName, id);\n+    }\n+\n+}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84cf0502f83c3562287c2946ace489083f5816a2"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2ODgwNw==", "bodyText": "nit: empty lines", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r529468807", "createdAt": "2020-11-24T11:19:05Z", "author": {"login": "niksv"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder\n+    public ZkWatchDog(String id, String serviceName, String connectionString,\n+                      int sessionTimeout, Signal signal) throws IOException {\n+        super(id, serviceName, connectionString, sessionTimeout);\n+\n+        signalPath = getPaths(serviceName, id, SIGNAL);\n+        if (signal == null) {\n+            signal = Signal.NONE;\n+        }\n+        this.signal = signal;\n+        initWatch();\n+    }\n+\n+    @Override\n+    void validateNodes() throws KeeperException, InterruptedException {\n+        super.validateNodes();\n+        ensureZNode(serviceName, id, SIGNAL);\n+    }\n+\n+\n+    @VisibleForTesting\n+    void checkSignal() throws KeeperException, InterruptedException {\n+        zookeeper.getData(signalPath, this, this, null);\n+    }\n+\n+    @Override\n+    void initWatch() {\n+        try {\n+            validateNodes();\n+            checkSignal();\n+        } catch (KeeperException e) {\n+            log.error(e.getMessage(), e);\n+        } catch (InterruptedException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void subscribe(LifeCycleObserver observer) {\n+        observers.add(observer);\n+    }\n+\n+    @Override\n+    public void unsubscribe(LifeCycleObserver observer) {\n+        if (observers.contains(observer)) {\n+            observers.remove(observer);\n+        }\n+    }\n+\n+    @Override\n+    public void process(WatchedEvent event) {\n+        log.info(\"Received event: {}\", event);\n+        try {\n+            if (!refreshConnection(event.getState()) && signalPath.equals(event.getPath())) {\n+                checkSignal();\n+            }\n+        } catch (IOException e) {\n+            log.error(\"Failed to read zk event: {}\", e.getMessage(), e);\n+        } catch (InterruptedException e) {\n+            log.error(\"Zk event interrupted: {}\", e.getMessage(), e);\n+        } catch (KeeperException e) {\n+            log.error(\"Zk keeper error: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n+        log.debug(\"Received result on path: {}\", path);\n+        if (signalPath.equals(path) && data != null && data.length > 0) {\n+            String signalString = new String(data);\n+            try {\n+                signal = Signal.valueOf(signalString);\n+                notifyObservers();\n+            } catch (Exception e) {\n+                log.error(\"Received unknown signal: {}\", signalString, e);\n+            }\n+        }\n+    }\n+\n+    protected void notifyObservers() {\n+        for (LifeCycleObserver observer : observers) {\n+            observer.handle(signal);\n+        }\n+    }\n+\n+}\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84cf0502f83c3562287c2946ace489083f5816a2"}, "originalPosition": 131}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84cf0502f83c3562287c2946ace489083f5816a2", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/84cf0502f83c3562287c2946ace489083f5816a2", "committedDate": "2020-11-24T10:31:19Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "fac6383b43aec597d8607f1267ed966396651cc0", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/fac6383b43aec597d8607f1267ed966396651cc0", "committedDate": "2020-11-25T07:34:26Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDE3OTQy", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-538417942", "createdAt": "2020-11-25T11:50:24Z", "commit": {"oid": "fac6383b43aec597d8607f1267ed966396651cc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDI5NTUx", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-538429551", "createdAt": "2020-11-25T12:06:11Z", "commit": {"oid": "fac6383b43aec597d8607f1267ed966396651cc0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjowNjoxMVrOH5wb1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjowNjoxMVrOH5wb1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyNDQzNw==", "bodyText": "Please put this at the end of the constructor. Or pass parameters as arguments. Otherwise, we get NPE.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r530324437", "createdAt": "2020-11-25T12:06:11Z", "author": {"login": "dpoltavets"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkClient.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@SuperBuilder\n+@Slf4j\n+public abstract class ZkClient implements Watcher {\n+    private static final String ROOT = \"/\";\n+    private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n+\n+    protected String id;\n+    protected String serviceName;\n+    protected ZooKeeper zookeeper;\n+    private final String connectionString;\n+    private final int sessionTimeout;\n+\n+    public ZkClient(String id, String serviceName, String connectionString,\n+                    int sessionTimeout) throws IOException {\n+        if (sessionTimeout == 0) {\n+            sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n+        }\n+        this.serviceName = serviceName;\n+        this.id = id;\n+        this.zookeeper = getZk();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac6383b43aec597d8607f1267ed966396651cc0"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fac6383b43aec597d8607f1267ed966396651cc0", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/fac6383b43aec597d8607f1267ed966396651cc0", "committedDate": "2020-11-25T07:34:26Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "4eebe147fb735f540492706fb599c88f904c9ac7", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/4eebe147fb735f540492706fb599c88f904c9ac7", "committedDate": "2020-11-25T12:11:14Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDM1ODkw", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-538435890", "createdAt": "2020-11-25T12:15:14Z", "commit": {"oid": "4eebe147fb735f540492706fb599c88f904c9ac7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDQ4MzYz", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-538448363", "createdAt": "2020-11-25T12:32:22Z", "commit": {"oid": "4eebe147fb735f540492706fb599c88f904c9ac7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4eebe147fb735f540492706fb599c88f904c9ac7", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/4eebe147fb735f540492706fb599c88f904c9ac7", "committedDate": "2020-11-25T12:11:14Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "f9d3eae6b522cad71a278bcef6bce4fc1361a339", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/f9d3eae6b522cad71a278bcef6bce4fc1361a339", "committedDate": "2020-11-26T06:44:17Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9d3eae6b522cad71a278bcef6bce4fc1361a339", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/f9d3eae6b522cad71a278bcef6bce4fc1361a339", "committedDate": "2020-11-26T06:44:17Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "41efcd4f747c16e14d9bac4289de4b5b298d152d", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/41efcd4f747c16e14d9bac4289de4b5b298d152d", "committedDate": "2020-11-26T06:51:34Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41efcd4f747c16e14d9bac4289de4b5b298d152d", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/41efcd4f747c16e14d9bac4289de4b5b298d152d", "committedDate": "2020-11-26T06:51:34Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/a80705d91d6096ba7643d905a16de1f81ca824ef", "committedDate": "2020-11-27T11:01:17Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTQ3NDQ3", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-539947447", "createdAt": "2020-11-27T12:34:35Z", "commit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjozNDozNlrOH684RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjo1OTozNFrOH69kOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NjkwMQ==", "bodyText": "It's counter or control?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r531576901", "createdAt": "2020-11-27T12:34:36Z", "author": {"login": "rozdy"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/TopologyState.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+\n+import java.util.UUID;\n+\n+@Data\n+@Builder\n+public class TopologyState {\n+    private UUID uuid;\n+    private long cntr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3OTg1OQ==", "bodyText": "Why do we need double increment for message id here?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r531579859", "createdAt": "2020-11-27T12:40:58Z", "author": {"login": "rozdy"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperSpout.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifeCycleObserver;\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n+import org.openkilda.bluegreen.ZkWatchDog;\n+import org.openkilda.wfm.AbstractBolt;\n+import org.openkilda.wfm.CommandContext;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.apache.storm.task.TopologyContext;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.topology.base.BaseRichSpout;\n+import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Values;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+@Slf4j\n+public class ZooKeeperSpout extends BaseRichSpout implements LifeCycleObserver {\n+    public static final String BOLT_ID = \"zookeeper.spout\";\n+    public static final String FIELD_ID_LIFECYCLE_EVENT = \"lifecycle.event\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+    private Queue<Signal> signals;\n+\n+    private ZkWatchDog watchDog;\n+    private SpoutOutputCollector collector;\n+    private long messageId = 0;\n+\n+\n+    public ZooKeeperSpout(String id, String serviceName, String connectionString) {\n+        this.id = id;\n+        this.serviceName = serviceName;\n+        this.connectionString = connectionString;\n+    }\n+\n+    @Override\n+    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n+        this.collector = collector;\n+        this.signals = new ConcurrentLinkedQueue<>();\n+        try {\n+            this.watchDog = ZkWatchDog.builder().id(id).serviceName(serviceName)\n+                    .connectionString(connectionString).build();\n+            watchDog.subscribe(this);\n+        } catch (IOException e) {\n+            log.error(\"Failed to init ZooKeeper with connection string: {} received: {} \", connectionString,\n+                    e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void nextTuple() {\n+        Signal signal = signals.poll();\n+        if (signal != null) {\n+            LifecycleEvent event = LifecycleEvent.builder()\n+                    .signal(signal)\n+                    .uuid(UUID.randomUUID())\n+                    .messageId(messageId++).build();\n+            collector.emit(new Values(event, new CommandContext()), messageId++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MDc4Mw==", "bodyText": "set a set -> a set", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r531580783", "createdAt": "2020-11-27T12:43:03Z", "author": {"login": "rozdy"}, "path": "src-java/blue-green/README.md", "diffHunk": "@@ -0,0 +1,3 @@\n+# OpenKilda Blue Green Deployment Helper\n+\n+This module holds set a set of helper classes to provide 0 downtime deployment via Zookeeper.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NTAyMg==", "bodyText": "Have you tried Curator framework instead of raw ZK client? https://curator.apache.org/", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r531585022", "createdAt": "2020-11-27T12:52:36Z", "author": {"login": "rozdy"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkClient.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@SuperBuilder\n+@Slf4j\n+public abstract class ZkClient implements Watcher {\n+    private static final String ROOT = \"/\";\n+    private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n+\n+    protected String id;\n+    protected String serviceName;\n+    protected ZooKeeper zookeeper;\n+    private final String connectionString;\n+    private final int sessionTimeout;\n+\n+    public ZkClient(String id, String serviceName, String connectionString,\n+                    int sessionTimeout) throws IOException {\n+        if (sessionTimeout == 0) {\n+            sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n+        }\n+        this.serviceName = serviceName;\n+        this.id = id;\n+        this.connectionString = connectionString;\n+        this.sessionTimeout = sessionTimeout;\n+        this.zookeeper = getZk();\n+    }\n+\n+    void initWatch() {\n+\n+    }\n+\n+    String getPaths(String... paths) {\n+        return Paths.get(ROOT, paths).toString();\n+    }\n+\n+    boolean refreshConnection(KeeperState state) throws IOException {\n+        if (state == KeeperState.Disconnected || state == KeeperState.Expired) {\n+            zookeeper = getZk();\n+            initWatch();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    protected ZooKeeper getZk() throws IOException {\n+        return new ZooKeeper(connectionString, sessionTimeout, this);\n+    }\n+\n+    protected void ensureZNode(String... path) throws KeeperException, InterruptedException {\n+        String nodePath = getPaths(path);\n+        if (zookeeper.exists(nodePath, false) == null) {\n+            try {\n+                zookeeper.create(nodePath, \"\".getBytes(),\n+                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NTk2Mg==", "bodyText": "Please use active++ for similarity", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r531585962", "createdAt": "2020-11-27T12:54:45Z", "author": {"login": "rozdy"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkStateTracker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.UUID;\n+\n+@Slf4j\n+public class ZkStateTracker {\n+    private ZkWriter zooKeeperWriter;\n+    UUID shutdownUuid;\n+    UUID startUuid;\n+    int active;\n+\n+    public ZkStateTracker(ZkWriter zooKeeperWriter) {\n+        this.zooKeeperWriter = zooKeeperWriter;\n+    }\n+\n+    /**\n+     * Process new lifecycle event.\n+     */\n+    public void processLifecycleEvent(LifecycleEvent event) {\n+        if (Signal.START == event.getSignal()) {\n+            shutdownUuid = null;\n+            handleStart(event);\n+        } else if (Signal.SHUTDOWN == event.getSignal()) {\n+            handleShutdown(event);\n+            startUuid = null;\n+        }\n+        zooKeeperWriter.setState(active);\n+    }\n+\n+    private void handleStart(LifecycleEvent event) {\n+        if (startUuid != null) {\n+            if (startUuid.equals(event.getUuid())) {\n+                active++;\n+\n+            } else {\n+                startUuid = event.getUuid();\n+                active = 1;\n+            }\n+        } else {\n+            startUuid = event.getUuid();\n+            active += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NjMzMg==", "bodyText": "Add more details to error message please", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r531586332", "createdAt": "2020-11-27T12:55:37Z", "author": {"login": "rozdy"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkStateTracker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.UUID;\n+\n+@Slf4j\n+public class ZkStateTracker {\n+    private ZkWriter zooKeeperWriter;\n+    UUID shutdownUuid;\n+    UUID startUuid;\n+    int active;\n+\n+    public ZkStateTracker(ZkWriter zooKeeperWriter) {\n+        this.zooKeeperWriter = zooKeeperWriter;\n+    }\n+\n+    /**\n+     * Process new lifecycle event.\n+     */\n+    public void processLifecycleEvent(LifecycleEvent event) {\n+        if (Signal.START == event.getSignal()) {\n+            shutdownUuid = null;\n+            handleStart(event);\n+        } else if (Signal.SHUTDOWN == event.getSignal()) {\n+            handleShutdown(event);\n+            startUuid = null;\n+        }\n+        zooKeeperWriter.setState(active);\n+    }\n+\n+    private void handleStart(LifecycleEvent event) {\n+        if (startUuid != null) {\n+            if (startUuid.equals(event.getUuid())) {\n+                active++;\n+\n+            } else {\n+                startUuid = event.getUuid();\n+                active = 1;\n+            }\n+        } else {\n+            startUuid = event.getUuid();\n+            active += 1;\n+        }\n+    }\n+\n+    private void handleShutdown(LifecycleEvent event) {\n+        if (shutdownUuid != null) {\n+            if (shutdownUuid.equals(event.getUuid())) {\n+                active--;\n+            } else {\n+                log.error(\"new uuid\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NzM1Mw==", "bodyText": "You can use pipe for exceptions here", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r531587353", "createdAt": "2020-11-27T12:57:52Z", "author": {"login": "rozdy"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder\n+    public ZkWatchDog(String id, String serviceName, String connectionString,\n+                      int sessionTimeout, Signal signal) throws IOException {\n+        super(id, serviceName, connectionString, sessionTimeout);\n+\n+        signalPath = getPaths(serviceName, id, SIGNAL);\n+        if (signal == null) {\n+            signal = Signal.NONE;\n+        }\n+        this.signal = signal;\n+        initWatch();\n+    }\n+\n+    @Override\n+    void validateNodes() throws KeeperException, InterruptedException {\n+        super.validateNodes();\n+        ensureZNode(serviceName, id, SIGNAL);\n+    }\n+\n+\n+    @VisibleForTesting\n+    void checkSignal() throws KeeperException, InterruptedException {\n+        zookeeper.getData(signalPath, this, this, null);\n+    }\n+\n+    @Override\n+    void initWatch() {\n+        try {\n+            validateNodes();\n+            checkSignal();\n+        } catch (KeeperException e) {\n+            log.error(e.getMessage(), e);\n+        } catch (InterruptedException e) {\n+            log.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4ODE1NQ==", "bodyText": "This check isn't required", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r531588155", "createdAt": "2020-11-27T12:59:34Z", "author": {"login": "rozdy"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder\n+    public ZkWatchDog(String id, String serviceName, String connectionString,\n+                      int sessionTimeout, Signal signal) throws IOException {\n+        super(id, serviceName, connectionString, sessionTimeout);\n+\n+        signalPath = getPaths(serviceName, id, SIGNAL);\n+        if (signal == null) {\n+            signal = Signal.NONE;\n+        }\n+        this.signal = signal;\n+        initWatch();\n+    }\n+\n+    @Override\n+    void validateNodes() throws KeeperException, InterruptedException {\n+        super.validateNodes();\n+        ensureZNode(serviceName, id, SIGNAL);\n+    }\n+\n+\n+    @VisibleForTesting\n+    void checkSignal() throws KeeperException, InterruptedException {\n+        zookeeper.getData(signalPath, this, this, null);\n+    }\n+\n+    @Override\n+    void initWatch() {\n+        try {\n+            validateNodes();\n+            checkSignal();\n+        } catch (KeeperException e) {\n+            log.error(e.getMessage(), e);\n+        } catch (InterruptedException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void subscribe(LifeCycleObserver observer) {\n+        observers.add(observer);\n+    }\n+\n+    @Override\n+    public void unsubscribe(LifeCycleObserver observer) {\n+        if (observers.contains(observer)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 87}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/a80705d91d6096ba7643d905a16de1f81ca824ef", "committedDate": "2020-11-27T11:01:17Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/0aaa49782d66ca1b52627f652714a690402abb07", "committedDate": "2020-11-28T07:54:53Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNzE2NTI1", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-540716525", "createdAt": "2020-11-30T09:12:24Z", "commit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTkxMzk4", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-541191398", "createdAt": "2020-11-30T18:43:32Z", "commit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo0MzozMlrOH8Ipmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1Mzo0NlrOH8JBKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxODMzMQ==", "bodyText": "we need to double check that before release on prod", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r532818331", "createdAt": "2020-11-30T18:43:32Z", "author": {"login": "nikitamarchenko"}, "path": "docker/zookeeper/zookeeper-conf/zoo.cfg", "diffHunk": "@@ -3,4 +3,4 @@ initLimit=10\n syncLimit=5\n dataDir=/data/zookeeper\n clientPort=2181\n-maxClientCnxns=200\n+maxClientCnxns=800", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxOTI0OA==", "bodyText": "prefer to up level to error", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r532819248", "createdAt": "2020-11-30T18:45:06Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/AbstractBolt.java", "diffHunk": "@@ -104,6 +109,18 @@ protected void dispatch(Tuple input) throws Exception {\n \n     protected abstract void handleInput(Tuple input) throws Exception;\n \n+    protected void handleLifeCycleEvent(LifecycleEvent event) {\n+        if (Signal.START.equals(event.getSignal())) {\n+            active = true;\n+            emit(ZkStreams.ZK.toString(), currentTuple, new Values(event, commandContext));\n+        } else if (Signal.SHUTDOWN.equals(event.getSignal())) {\n+            active = false;\n+            emit(ZkStreams.ZK.toString(), currentTuple, new Values(event, commandContext));\n+        } else {\n+            log.info(\"Unsupported signal received: {}\", event.getSignal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMDgzMw==", "bodyText": "log null as error", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r532820833", "createdAt": "2020-11-30T18:47:39Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperBolt.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.ZkStateTracker;\n+import org.openkilda.bluegreen.ZkWriter;\n+import org.openkilda.wfm.AbstractBolt;\n+\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.zookeeper.KeeperException;\n+\n+import java.io.IOException;\n+\n+public class ZooKeeperBolt extends AbstractBolt {\n+    public static final String BOLT_ID = \"zookeeper.bolt\";\n+    public static final String FIELD_ID_STATE = \"lifecycle.state\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+    private ZkWriter zkWriter;\n+    private ZkStateTracker zkStateTracker;\n+\n+    public ZooKeeperBolt(String id, String serviceName, String connectionString) {\n+        this.id = id;\n+        this.serviceName = serviceName;\n+        this.connectionString = connectionString;\n+    }\n+\n+    @Override\n+    protected void handleInput(Tuple input) throws Exception {\n+        try {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_STATE);\n+            if (event != null) {\n+                zkStateTracker.processLifecycleEvent(event);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMTc0Mw==", "bodyText": "do we plan reconnect it?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r532821743", "createdAt": "2020-11-30T18:49:16Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperBolt.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.ZkStateTracker;\n+import org.openkilda.bluegreen.ZkWriter;\n+import org.openkilda.wfm.AbstractBolt;\n+\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.zookeeper.KeeperException;\n+\n+import java.io.IOException;\n+\n+public class ZooKeeperBolt extends AbstractBolt {\n+    public static final String BOLT_ID = \"zookeeper.bolt\";\n+    public static final String FIELD_ID_STATE = \"lifecycle.state\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+    private ZkWriter zkWriter;\n+    private ZkStateTracker zkStateTracker;\n+\n+    public ZooKeeperBolt(String id, String serviceName, String connectionString) {\n+        this.id = id;\n+        this.serviceName = serviceName;\n+        this.connectionString = connectionString;\n+    }\n+\n+    @Override\n+    protected void handleInput(Tuple input) throws Exception {\n+        try {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_STATE);\n+            if (event != null) {\n+                zkStateTracker.processLifecycleEvent(event);\n+            }\n+\n+        } catch (Exception e) {\n+            log.error(\"failed to process event: {}\", e.getMessage(), e);\n+        }\n+\n+    }\n+\n+    @Override\n+    protected void init() {\n+        try {\n+            zkWriter = ZkWriter.builder().id(id).serviceName(serviceName)\n+                .connectionString(connectionString).build();\n+            zkStateTracker = new ZkStateTracker(zkWriter);\n+        } catch (IOException | InterruptedException | KeeperException e) {\n+            log.error(\"Failed to init ZooKeeper with connection string: {}, received: {} \", connectionString,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNDM2Mw==", "bodyText": "add error log here", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r532824363", "createdAt": "2020-11-30T18:53:46Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkClient.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@SuperBuilder\n+@Slf4j\n+public abstract class ZkClient implements Watcher {\n+    private static final String ROOT = \"/\";\n+    private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n+\n+    protected String id;\n+    protected String serviceName;\n+    protected ZooKeeper zookeeper;\n+    private final String connectionString;\n+    private final int sessionTimeout;\n+\n+    public ZkClient(String id, String serviceName, String connectionString,\n+                    int sessionTimeout) throws IOException {\n+        if (sessionTimeout == 0) {\n+            sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n+        }\n+        this.serviceName = serviceName;\n+        this.id = id;\n+        this.connectionString = connectionString;\n+        this.sessionTimeout = sessionTimeout;\n+        this.zookeeper = getZk();\n+    }\n+\n+    void initWatch() {\n+\n+    }\n+\n+    String getPaths(String... paths) {\n+        return Paths.get(ROOT, paths).toString();\n+    }\n+\n+    boolean refreshConnection(KeeperState state) throws IOException {\n+        if (state == KeeperState.Disconnected || state == KeeperState.Expired) {\n+            zookeeper = getZk();\n+            initWatch();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    protected ZooKeeper getZk() throws IOException {\n+        return new ZooKeeper(connectionString, sessionTimeout, this);\n+    }\n+\n+    protected void ensureZNode(String... path) throws KeeperException, InterruptedException {\n+        String nodePath = getPaths(path);\n+        if (zookeeper.exists(nodePath, false) == null) {\n+            try {\n+                zookeeper.create(nodePath, \"\".getBytes(),\n+                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            } catch (Exception e) {\n+                // pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNTI4Nzc1", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-541528775", "createdAt": "2020-12-01T06:47:06Z", "commit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo0NzowNlrOH8aPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo0NzowNlrOH8aPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNjYxMA==", "bodyText": "If you will get any exception in notifyObservers(); you will log (for example)\nReceived unknown signal: START\"\nBut START is a valid signal", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r533106610", "createdAt": "2020-12-01T06:47:06Z", "author": {"login": "niksv"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder\n+    public ZkWatchDog(String id, String serviceName, String connectionString,\n+                      int sessionTimeout, Signal signal) throws IOException {\n+        super(id, serviceName, connectionString, sessionTimeout);\n+\n+        signalPath = getPaths(serviceName, id, SIGNAL);\n+        if (signal == null) {\n+            signal = Signal.NONE;\n+        }\n+        this.signal = signal;\n+        initWatch();\n+    }\n+\n+    @Override\n+    void validateNodes() throws KeeperException, InterruptedException {\n+        super.validateNodes();\n+        ensureZNode(serviceName, id, SIGNAL);\n+    }\n+\n+\n+    @VisibleForTesting\n+    void checkSignal() throws KeeperException, InterruptedException {\n+        zookeeper.getData(signalPath, this, this, null);\n+    }\n+\n+    @Override\n+    void initWatch() {\n+        try {\n+            validateNodes();\n+            checkSignal();\n+        } catch (KeeperException | InterruptedException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void subscribe(LifeCycleObserver observer) {\n+        observers.add(observer);\n+    }\n+\n+    @Override\n+    public void unsubscribe(LifeCycleObserver observer) {\n+        if (observers.contains(observer)) {\n+            observers.remove(observer);\n+        }\n+    }\n+\n+    @Override\n+    public void process(WatchedEvent event) {\n+        log.info(\"Received event: {}\", event);\n+        try {\n+            if (!refreshConnection(event.getState()) && signalPath.equals(event.getPath())) {\n+                checkSignal();\n+            }\n+        } catch (IOException e) {\n+            log.error(\"Failed to read zk event: {}\", e.getMessage(), e);\n+        } catch (InterruptedException e) {\n+            log.error(\"Zk event interrupted: {}\", e.getMessage(), e);\n+        } catch (KeeperException e) {\n+            log.error(\"Zk keeper error: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n+        log.debug(\"Received result on path: {}\", path);\n+        if (signalPath.equals(path) && data != null && data.length > 0) {\n+            String signalString = new String(data);\n+            try {\n+                signal = Signal.valueOf(signalString);\n+                notifyObservers();\n+            } catch (Exception e) {\n+                log.error(\"Received unknown signal: {}\", signalString, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07"}, "originalPosition": 115}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0aaa49782d66ca1b52627f652714a690402abb07", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/0aaa49782d66ca1b52627f652714a690402abb07", "committedDate": "2020-11-28T07:54:53Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/3b3d88730b21113ea03d970f574d740f317346b7", "committedDate": "2020-12-01T12:08:31Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjY5ODMy", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-542669832", "createdAt": "2020-12-02T09:57:54Z", "commit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjAyMDk1", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-543602095", "createdAt": "2020-12-03T06:23:09Z", "commit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODYxNzAy", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-543861702", "createdAt": "2020-12-03T11:31:28Z", "commit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTozMToyOFrOH-WH1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTo0MDoxN1rOH-WpaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzNjIxNA==", "bodyText": "You are breaking stream responsibilities. In your implementation, the code emitting event in the stream do not relate with the code responsible for creating that stream with specific name and set of fields.\nDelegate message emmitting into abstract method or define/create required stream(s) into this abstract bolt.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535136214", "createdAt": "2020-12-03T11:31:28Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/AbstractBolt.java", "diffHunk": "@@ -104,6 +109,18 @@ protected void dispatch(Tuple input) throws Exception {\n \n     protected abstract void handleInput(Tuple input) throws Exception;\n \n+    protected void handleLifeCycleEvent(LifecycleEvent event) {\n+        if (Signal.START.equals(event.getSignal())) {\n+            active = true;\n+            emit(ZkStreams.ZK.toString(), currentTuple, new Values(event, commandContext));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzNzc1MA==", "bodyText": "Is it supposed to call AbstractBolt.handleLifeCycleEvent or it's overloaded version? If so, then routing must be done inside AbstractBolt.dispatch.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535137750", "createdAt": "2020-12-03T11:32:58Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/hubandspoke/HubBolt.java", "diffHunk": "@@ -57,14 +57,24 @@ public HubBolt(Config config) {\n \n     @Override\n     protected void handleInput(Tuple input) throws Exception {\n-        if (hubConfig.getRequestSenderComponent().equals(input.getSourceComponent())) {\n+        if (input.getSourceComponent().equals(hubConfig.getLifeCycleEventComponent())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0NDgwOA==", "bodyText": "em... will it really work in case of one the catcher exception (IOException | InterruptedException | KeeperException)? I see NPE here.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535144808", "createdAt": "2020-12-03T11:40:17Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperBolt.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.ZkStateTracker;\n+import org.openkilda.bluegreen.ZkWriter;\n+import org.openkilda.wfm.AbstractBolt;\n+\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.zookeeper.KeeperException;\n+\n+import java.io.IOException;\n+\n+public class ZooKeeperBolt extends AbstractBolt {\n+    public static final String BOLT_ID = \"zookeeper.bolt\";\n+    public static final String FIELD_ID_STATE = \"lifecycle.state\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+    private ZkWriter zkWriter;\n+    private ZkStateTracker zkStateTracker;\n+\n+    public ZooKeeperBolt(String id, String serviceName, String connectionString) {\n+        this.id = id;\n+        this.serviceName = serviceName;\n+        this.connectionString = connectionString;\n+    }\n+\n+    @Override\n+    protected void handleInput(Tuple input) throws Exception {\n+        if (zkWriter == null) {\n+            initZk();\n+        }\n+        try {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_STATE);\n+            if (event != null) {\n+                zkStateTracker.processLifecycleEvent(event);\n+            } else {\n+                log.error(\"Received null value as a lifecycle-event\");\n+            }\n+\n+        } catch (Exception e) {\n+            log.error(\"Failed to process event: {}\", e.getMessage(), e);\n+        }\n+\n+    }\n+\n+    @Override\n+    protected void init() {\n+        initZk();\n+    }\n+\n+    private void initZk() {\n+        try {\n+            zkWriter = ZkWriter.builder().id(id).serviceName(serviceName)\n+                    .connectionString(connectionString).build();\n+        } catch (IOException | InterruptedException | KeeperException e) {\n+            log.error(\"Failed to init ZooKeeper with connection string: {}, received: {} \", connectionString,\n+                    e.getMessage(), e);\n+        }\n+        zkStateTracker = new ZkStateTracker(zkWriter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODcwMDM4", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-543870038", "createdAt": "2020-12-03T11:42:51Z", "commit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTo0Mjo1MVrOH-W0Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjo0ODo0OVrOH-aBxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0NzU4Ng==", "bodyText": "It must be transient.\nAnd zkStateTracker too.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535147586", "createdAt": "2020-12-03T11:42:51Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperBolt.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.ZkStateTracker;\n+import org.openkilda.bluegreen.ZkWriter;\n+import org.openkilda.wfm.AbstractBolt;\n+\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.zookeeper.KeeperException;\n+\n+import java.io.IOException;\n+\n+public class ZooKeeperBolt extends AbstractBolt {\n+    public static final String BOLT_ID = \"zookeeper.bolt\";\n+    public static final String FIELD_ID_STATE = \"lifecycle.state\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+    private ZkWriter zkWriter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0OTEwOA==", "bodyText": "You check the availability of zkWriter but use zkStateTracker only. You must check the availability of zkStateTracker or both of them.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535149108", "createdAt": "2020-12-03T11:44:21Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperBolt.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.ZkStateTracker;\n+import org.openkilda.bluegreen.ZkWriter;\n+import org.openkilda.wfm.AbstractBolt;\n+\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.zookeeper.KeeperException;\n+\n+import java.io.IOException;\n+\n+public class ZooKeeperBolt extends AbstractBolt {\n+    public static final String BOLT_ID = \"zookeeper.bolt\";\n+    public static final String FIELD_ID_STATE = \"lifecycle.state\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+    private ZkWriter zkWriter;\n+    private ZkStateTracker zkStateTracker;\n+\n+    public ZooKeeperBolt(String id, String serviceName, String connectionString) {\n+        this.id = id;\n+        this.serviceName = serviceName;\n+        this.connectionString = connectionString;\n+    }\n+\n+    @Override\n+    protected void handleInput(Tuple input) throws Exception {\n+        if (zkWriter == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE1MzUzOQ==", "bodyText": "Add comment somewhere about the class purpose. I didn't get that it is something like KafkaBolt (but for zookeeper) at first.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535153539", "createdAt": "2020-12-03T11:48:50Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/zk/ZooKeeperBolt.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.zk;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.ZkStateTracker;\n+import org.openkilda.bluegreen.ZkWriter;\n+import org.openkilda.wfm.AbstractBolt;\n+\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+import org.apache.storm.tuple.Tuple;\n+import org.apache.zookeeper.KeeperException;\n+\n+import java.io.IOException;\n+\n+public class ZooKeeperBolt extends AbstractBolt {\n+    public static final String BOLT_ID = \"zookeeper.bolt\";\n+    public static final String FIELD_ID_STATE = \"lifecycle.state\";\n+\n+    public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n+    private String id;\n+    private String serviceName;\n+    private String connectionString;\n+    private ZkWriter zkWriter;\n+    private ZkStateTracker zkStateTracker;\n+\n+    public ZooKeeperBolt(String id, String serviceName, String connectionString) {\n+        this.id = id;\n+        this.serviceName = serviceName;\n+        this.connectionString = connectionString;\n+    }\n+\n+    @Override\n+    protected void handleInput(Tuple input) throws Exception {\n+        if (zkWriter == null) {\n+            initZk();\n+        }\n+        try {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_STATE);\n+            if (event != null) {\n+                zkStateTracker.processLifecycleEvent(event);\n+            } else {\n+                log.error(\"Received null value as a lifecycle-event\");\n+            }\n+\n+        } catch (Exception e) {\n+            log.error(\"Failed to process event: {}\", e.getMessage(), e);\n+        }\n+\n+    }\n+\n+    @Override\n+    protected void init() {\n+        initZk();\n+    }\n+\n+    private void initZk() {\n+        try {\n+            zkWriter = ZkWriter.builder().id(id).serviceName(serviceName)\n+                    .connectionString(connectionString).build();\n+        } catch (IOException | InterruptedException | KeeperException e) {\n+            log.error(\"Failed to init ZooKeeper with connection string: {}, received: {} \", connectionString,\n+                    e.getMessage(), e);\n+        }\n+        zkStateTracker = new ZkStateTracker(zkWriter);\n+    }\n+\n+    @Override\n+    public void declareOutputFields(OutputFieldsDeclarer declarer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE2OTEyMA==", "bodyText": "Will we have this message in ELK?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535169120", "createdAt": "2020-12-03T12:06:17Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "diffHunk": "@@ -97,10 +102,11 @@ protected AbstractTopology(LaunchEnvironment env, Class<T> topologyConfigClass)\n \n         topologyConfig = configurationProvider.getConfiguration(topologyConfigClass);\n         kafkaConfig = configurationProvider.getConfiguration(KafkaConfig.class);\n-\n+        zookeeperConfig = configurationProvider.getConfiguration(ZookeeperConfig.class);\n         logger.debug(\"Topology built {}: kafka={}, parallelism={}, workers={}\",\n                 topologyName, kafkaConfig.getHosts(), topologyConfig.getParallelism(),\n                 topologyConfig.getWorkers());\n+        logger.info(\"Starting topology {} in {} mode\", topologyName, topologyConfig.getBlueGreenMode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3MzAzMg==", "bodyText": "Why we need it?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535173032", "createdAt": "2020-12-03T12:10:12Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/WatchDog.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+public interface WatchDog {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3ODcwMg==", "bodyText": "exists + create - classical race condition.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535178702", "createdAt": "2020-12-03T12:15:40Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkClient.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@SuperBuilder\n+@Slf4j\n+public abstract class ZkClient implements Watcher {\n+    private static final String ROOT = \"/\";\n+    private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n+\n+    protected String id;\n+    protected String serviceName;\n+    protected ZooKeeper zookeeper;\n+    private final String connectionString;\n+    private final int sessionTimeout;\n+\n+    public ZkClient(String id, String serviceName, String connectionString,\n+                    int sessionTimeout) throws IOException {\n+        if (sessionTimeout == 0) {\n+            sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n+        }\n+        this.serviceName = serviceName;\n+        this.id = id;\n+        this.connectionString = connectionString;\n+        this.sessionTimeout = sessionTimeout;\n+        this.zookeeper = getZk();\n+    }\n+\n+    void initWatch() {\n+\n+    }\n+\n+    String getPaths(String... paths) {\n+        return Paths.get(ROOT, paths).toString();\n+    }\n+\n+    boolean refreshConnection(KeeperState state) throws IOException {\n+        if (state == KeeperState.Disconnected || state == KeeperState.Expired) {\n+            zookeeper = getZk();\n+            initWatch();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    protected ZooKeeper getZk() throws IOException {\n+        return new ZooKeeper(connectionString, sessionTimeout, this);\n+    }\n+\n+    protected void ensureZNode(String... path) throws KeeperException, InterruptedException {\n+        String nodePath = getPaths(path);\n+        if (zookeeper.exists(nodePath, false) == null) {\n+            try {\n+                zookeeper.create(nodePath, \"\".getBytes(),\n+                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NTAyMg=="}, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4MjAzOA==", "bodyText": "Our style check does not allow 2 capital letter in a row... so it or do not work for this module or have different/incorrect settings.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535182038", "createdAt": "2020-12-03T12:19:47Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkClient.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@SuperBuilder\n+@Slf4j\n+public abstract class ZkClient implements Watcher {\n+    private static final String ROOT = \"/\";\n+    private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n+\n+    protected String id;\n+    protected String serviceName;\n+    protected ZooKeeper zookeeper;\n+    private final String connectionString;\n+    private final int sessionTimeout;\n+\n+    public ZkClient(String id, String serviceName, String connectionString,\n+                    int sessionTimeout) throws IOException {\n+        if (sessionTimeout == 0) {\n+            sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n+        }\n+        this.serviceName = serviceName;\n+        this.id = id;\n+        this.connectionString = connectionString;\n+        this.sessionTimeout = sessionTimeout;\n+        this.zookeeper = getZk();\n+    }\n+\n+    void initWatch() {\n+\n+    }\n+\n+    String getPaths(String... paths) {\n+        return Paths.get(ROOT, paths).toString();\n+    }\n+\n+    boolean refreshConnection(KeeperState state) throws IOException {\n+        if (state == KeeperState.Disconnected || state == KeeperState.Expired) {\n+            zookeeper = getZk();\n+            initWatch();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    protected ZooKeeper getZk() throws IOException {\n+        return new ZooKeeper(connectionString, sessionTimeout, this);\n+    }\n+\n+    protected void ensureZNode(String... path) throws KeeperException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4NDYxNQ==", "bodyText": "Extremely confusing error message. I can't imagine what it supposed to mean.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535184615", "createdAt": "2020-12-03T12:23:50Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkStateTracker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.UUID;\n+\n+@Slf4j\n+public class ZkStateTracker {\n+    private ZkWriter zooKeeperWriter;\n+    UUID shutdownUuid;\n+    UUID startUuid;\n+    int active;\n+\n+    public ZkStateTracker(ZkWriter zooKeeperWriter) {\n+        this.zooKeeperWriter = zooKeeperWriter;\n+    }\n+\n+    /**\n+     * Process new lifecycle event.\n+     */\n+    public void processLifecycleEvent(LifecycleEvent event) {\n+        if (Signal.START == event.getSignal()) {\n+            shutdownUuid = null;\n+            handleStart(event);\n+        } else if (Signal.SHUTDOWN == event.getSignal()) {\n+            handleShutdown(event);\n+            startUuid = null;\n+        }\n+        zooKeeperWriter.setState(active);\n+    }\n+\n+    private void handleStart(LifecycleEvent event) {\n+        if (startUuid != null) {\n+            if (startUuid.equals(event.getUuid())) {\n+                active++;\n+\n+            } else {\n+                startUuid = event.getUuid();\n+                active = 1;\n+            }\n+        } else {\n+            startUuid = event.getUuid();\n+            active++;\n+        }\n+    }\n+\n+    private void handleShutdown(LifecycleEvent event) {\n+        if (shutdownUuid != null) {\n+            if (shutdownUuid.equals(event.getUuid())) {\n+                active--;\n+            } else {\n+                log.error(\"Received new uuid: {}, expected: {}\", event.getUuid(), shutdownUuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4NTAyMQ==", "bodyText": "Is it allowed to become negative?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535185021", "createdAt": "2020-12-03T12:24:26Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkStateTracker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.bluegreen;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.UUID;\n+\n+@Slf4j\n+public class ZkStateTracker {\n+    private ZkWriter zooKeeperWriter;\n+    UUID shutdownUuid;\n+    UUID startUuid;\n+    int active;\n+\n+    public ZkStateTracker(ZkWriter zooKeeperWriter) {\n+        this.zooKeeperWriter = zooKeeperWriter;\n+    }\n+\n+    /**\n+     * Process new lifecycle event.\n+     */\n+    public void processLifecycleEvent(LifecycleEvent event) {\n+        if (Signal.START == event.getSignal()) {\n+            shutdownUuid = null;\n+            handleStart(event);\n+        } else if (Signal.SHUTDOWN == event.getSignal()) {\n+            handleShutdown(event);\n+            startUuid = null;\n+        }\n+        zooKeeperWriter.setState(active);\n+    }\n+\n+    private void handleStart(LifecycleEvent event) {\n+        if (startUuid != null) {\n+            if (startUuid.equals(event.getUuid())) {\n+                active++;\n+\n+            } else {\n+                startUuid = event.getUuid();\n+                active = 1;\n+            }\n+        } else {\n+            startUuid = event.getUuid();\n+            active++;\n+        }\n+    }\n+\n+    private void handleShutdown(LifecycleEvent event) {\n+        if (shutdownUuid != null) {\n+            if (shutdownUuid.equals(event.getUuid())) {\n+                active--;\n+            } else {\n+                log.error(\"Received new uuid: {}, expected: {}\", event.getUuid(), shutdownUuid);\n+            }\n+        } else {\n+            shutdownUuid = event.getUuid();\n+            active--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4NjIxNQ==", "bodyText": "From lombok docs for SuperBuilder:\nAll classes in the hierarchy must be annotated with @SuperBuilder.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535186215", "createdAt": "2020-12-03T12:26:21Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4Njk1Ng==", "bodyText": "Why for you allow to not fill any number of constructor arguments (while only one argument checks that it have meaningful value)?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535186956", "createdAt": "2020-12-03T12:27:30Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4ODk2MA==", "bodyText": "Rearrange initWatch() calls to be a part of successful ZK connection processing. Now... it called at least in each(?) constructor of ZkClient and in some way during reconnects.\nPS Maybe it would be renamed in something like postConnect.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535188960", "createdAt": "2020-12-03T12:31:03Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder\n+    public ZkWatchDog(String id, String serviceName, String connectionString,\n+                      int sessionTimeout, Signal signal) throws IOException {\n+        super(id, serviceName, connectionString, sessionTimeout);\n+\n+        signalPath = getPaths(serviceName, id, SIGNAL);\n+        if (signal == null) {\n+            signal = Signal.NONE;\n+        }\n+        this.signal = signal;\n+        initWatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5MDE3MA==", "bodyText": "may be waitSignal()?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535190170", "createdAt": "2020-12-03T12:33:00Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder\n+    public ZkWatchDog(String id, String serviceName, String connectionString,\n+                      int sessionTimeout, Signal signal) throws IOException {\n+        super(id, serviceName, connectionString, sessionTimeout);\n+\n+        signalPath = getPaths(serviceName, id, SIGNAL);\n+        if (signal == null) {\n+            signal = Signal.NONE;\n+        }\n+        this.signal = signal;\n+        initWatch();\n+    }\n+\n+    @Override\n+    void validateNodes() throws KeeperException, InterruptedException {\n+        super.validateNodes();\n+        ensureZNode(serviceName, id, SIGNAL);\n+    }\n+\n+\n+    @VisibleForTesting\n+    void checkSignal() throws KeeperException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5NDUyMg==", "bodyText": "As far as I understand it sleeps into checkSignal call... what should happen when we exit this \"wait\" or when we exit initWatch (by happy or by error path)?..\nLooks extremely messy, can we move all processing into process method?", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535194522", "createdAt": "2020-12-03T12:40:04Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder\n+    public ZkWatchDog(String id, String serviceName, String connectionString,\n+                      int sessionTimeout, Signal signal) throws IOException {\n+        super(id, serviceName, connectionString, sessionTimeout);\n+\n+        signalPath = getPaths(serviceName, id, SIGNAL);\n+        if (signal == null) {\n+            signal = Signal.NONE;\n+        }\n+        this.signal = signal;\n+        initWatch();\n+    }\n+\n+    @Override\n+    void validateNodes() throws KeeperException, InterruptedException {\n+        super.validateNodes();\n+        ensureZNode(serviceName, id, SIGNAL);\n+    }\n+\n+\n+    @VisibleForTesting\n+    void checkSignal() throws KeeperException, InterruptedException {\n+        zookeeper.getData(signalPath, this, this, null);\n+    }\n+\n+    @Override\n+    void initWatch() {\n+        try {\n+            validateNodes();\n+            checkSignal();\n+        } catch (KeeperException e) {\n+            log.error(e.getMessage(), e);\n+        } catch (InterruptedException e) {\n+            log.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NzM1Mw=="}, "originalCommit": {"oid": "a80705d91d6096ba7643d905a16de1f81ca824ef"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5NTU2NA==", "bodyText": "Merge all these exception handlers - all of them do the same (exact issue will be visible via logger exception instance).", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535195564", "createdAt": "2020-12-03T12:41:38Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/ZkWatchDog.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.bluegreen;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.Builder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.data.Stat;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Slf4j\n+public class ZkWatchDog extends ZkClient implements WatchDog, DataCallback {\n+\n+    private static final String SIGNAL = \"signal\";\n+    @VisibleForTesting\n+    protected String signalPath;\n+    private Signal signal;\n+\n+    @VisibleForTesting\n+    Set<LifeCycleObserver> observers = new HashSet<>();\n+\n+    @Builder\n+    public ZkWatchDog(String id, String serviceName, String connectionString,\n+                      int sessionTimeout, Signal signal) throws IOException {\n+        super(id, serviceName, connectionString, sessionTimeout);\n+\n+        signalPath = getPaths(serviceName, id, SIGNAL);\n+        if (signal == null) {\n+            signal = Signal.NONE;\n+        }\n+        this.signal = signal;\n+        initWatch();\n+    }\n+\n+    @Override\n+    void validateNodes() throws KeeperException, InterruptedException {\n+        super.validateNodes();\n+        ensureZNode(serviceName, id, SIGNAL);\n+    }\n+\n+\n+    @VisibleForTesting\n+    void checkSignal() throws KeeperException, InterruptedException {\n+        zookeeper.getData(signalPath, this, this, null);\n+    }\n+\n+    @Override\n+    void initWatch() {\n+        try {\n+            validateNodes();\n+            checkSignal();\n+        } catch (KeeperException | InterruptedException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void subscribe(LifeCycleObserver observer) {\n+        observers.add(observer);\n+    }\n+\n+    @Override\n+    public void unsubscribe(LifeCycleObserver observer) {\n+        if (observers.contains(observer)) {\n+            observers.remove(observer);\n+        }\n+    }\n+\n+    @Override\n+    public void process(WatchedEvent event) {\n+        log.info(\"Received event: {}\", event);\n+        try {\n+            if (!refreshConnection(event.getState()) && signalPath.equals(event.getPath())) {\n+                checkSignal();\n+            }\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5OTY4Nw==", "bodyText": "Why you do not add a corresponding argument here? Because of the builder, it can be added without change of the caller side.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535199687", "createdAt": "2020-12-03T12:48:02Z", "author": {"login": "surabujin"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/bolts/FlowCreateHubBolt.java", "diffHunk": "@@ -172,7 +172,7 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {\n         public FlowCreateConfig(String requestSenderComponent, String workerComponent, int timeoutMs, boolean autoAck,\n                                 int flowCreationRetriesLimit, int pathAllocationRetriesLimit,\n                                 int pathAllocationRetryDelay, int speakerCommandRetriesLimit) {\n-            super(requestSenderComponent, workerComponent, timeoutMs, autoAck);\n+            super(requestSenderComponent, workerComponent, null, timeoutMs, autoAck);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwMDE5OQ==", "bodyText": "It is not actually a host... this is more URL than a host.", "url": "https://github.com/telstra/open-kilda/pull/3859#discussion_r535200199", "createdAt": "2020-12-03T12:48:49Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-configuration/src/main/java/org/openkilda/config/ZookeeperConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.config;\n+\n+import com.sabre.oss.conf4j.annotation.Configuration;\n+import com.sabre.oss.conf4j.annotation.Key;\n+\n+@Configuration\n+@Key(\"zookeeper\")\n+public interface ZookeeperConfig {\n+    @Key(\"hosts\")\n+    String getHosts();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MDE4MDI2", "url": "https://github.com/telstra/open-kilda/pull/3859#pullrequestreview-544018026", "createdAt": "2020-12-03T14:38:12Z", "commit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b3d88730b21113ea03d970f574d740f317346b7", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/3b3d88730b21113ea03d970f574d740f317346b7", "committedDate": "2020-12-01T12:08:31Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "de79546ea68d46a67c7bf69026c17aebfc18b64a", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/de79546ea68d46a67c7bf69026c17aebfc18b64a", "committedDate": "2020-12-03T14:39:17Z", "message": "Shared storm components for zero downtime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "242ad1f4237be3359cb85a98952f74ffff065dc1", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/242ad1f4237be3359cb85a98952f74ffff065dc1", "committedDate": "2020-12-03T14:41:54Z", "message": "Blue-Green library for kilda"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de79546ea68d46a67c7bf69026c17aebfc18b64a", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/de79546ea68d46a67c7bf69026c17aebfc18b64a", "committedDate": "2020-12-03T14:39:17Z", "message": "Shared storm components for zero downtime"}, "afterCommit": {"oid": "242ad1f4237be3359cb85a98952f74ffff065dc1", "author": {"user": {"login": "timofei-durakov", "name": "Timofey Durakov"}}, "url": "https://github.com/telstra/open-kilda/commit/242ad1f4237be3359cb85a98952f74ffff065dc1", "committedDate": "2020-12-03T14:41:54Z", "message": "Blue-Green library for kilda"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3766, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}