{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MjA2NTk3", "number": 3521, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0NTowMVrOECKPTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDo0MjozMVrOEC6B9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzAwMzY0OnYy", "diffSide": "RIGHT", "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0NTowMVrOGech_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMjo0M1rOGeeRKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NzkxNg==", "bodyText": "What if we have the same bandwidths. Shouldn't we then compare by creation time?", "url": "https://github.com/telstra/open-kilda/pull/3521#discussion_r434577916", "createdAt": "2020-06-03T13:45:01Z", "author": {"login": "dpoltavets"}, "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java", "diffHunk": "@@ -228,15 +230,31 @@ public int compare(FlowThrottlingData throttlingDataA, FlowThrottlingData thrott\n             int priorityB = throttlingDataB.getPriority() == null ? defaultFlowPriority : throttlingDataB.getPriority();\n             Instant timeCreateA = throttlingDataA.getTimeCreate();\n             Instant timeCreateB = throttlingDataB.getTimeCreate();\n+            PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();\n+            PathComputationStrategy pathComputationStrategyB = throttlingDataB.getPathComputationStrategy();\n \n-            if (priorityA == priorityB && (timeCreateA != null || timeCreateB != null)) {\n-                if (timeCreateA == null) {\n-                    return -1;\n+            if (priorityA == priorityB) {\n+                if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH\n+                        && pathComputationStrategyB == COST_AND_AVAILABLE_BANDWIDTH) {\n+                    return Long.compare(throttlingDataB.getBandwidth(), throttlingDataA.getBandwidth());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12df6fbe479093a1f199e39f8e0ba71ed859431a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNjM3OA==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3521#discussion_r434606378", "createdAt": "2020-06-03T14:22:43Z", "author": {"login": "rozdy"}, "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java", "diffHunk": "@@ -228,15 +230,31 @@ public int compare(FlowThrottlingData throttlingDataA, FlowThrottlingData thrott\n             int priorityB = throttlingDataB.getPriority() == null ? defaultFlowPriority : throttlingDataB.getPriority();\n             Instant timeCreateA = throttlingDataA.getTimeCreate();\n             Instant timeCreateB = throttlingDataB.getTimeCreate();\n+            PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();\n+            PathComputationStrategy pathComputationStrategyB = throttlingDataB.getPathComputationStrategy();\n \n-            if (priorityA == priorityB && (timeCreateA != null || timeCreateB != null)) {\n-                if (timeCreateA == null) {\n-                    return -1;\n+            if (priorityA == priorityB) {\n+                if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH\n+                        && pathComputationStrategyB == COST_AND_AVAILABLE_BANDWIDTH) {\n+                    return Long.compare(throttlingDataB.getBandwidth(), throttlingDataA.getBandwidth());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NzkxNg=="}, "originalCommit": {"oid": "12df6fbe479093a1f199e39f8e0ba71ed859431a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDgzMzgxOnYy", "diffSide": "RIGHT", "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDo0MjozMVrOGfpjjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozMTowOFrOGfw-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzOTg4Nw==", "bodyText": "As for me it should be separate comparator joined to existing via thenComparing.", "url": "https://github.com/telstra/open-kilda/pull/3521#discussion_r435839887", "createdAt": "2020-06-05T10:42:31Z", "author": {"login": "surabujin"}, "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java", "diffHunk": "@@ -228,15 +230,35 @@ public int compare(FlowThrottlingData throttlingDataA, FlowThrottlingData thrott\n             int priorityB = throttlingDataB.getPriority() == null ? defaultFlowPriority : throttlingDataB.getPriority();\n             Instant timeCreateA = throttlingDataA.getTimeCreate();\n             Instant timeCreateB = throttlingDataB.getTimeCreate();\n+            PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e03f04e6b41cc40fd2b3d7952c4dfb3803b907"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2MTQwNg==", "bodyText": "Reworked", "url": "https://github.com/telstra/open-kilda/pull/3521#discussion_r435961406", "createdAt": "2020-06-05T14:31:08Z", "author": {"login": "rozdy"}, "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java", "diffHunk": "@@ -228,15 +230,35 @@ public int compare(FlowThrottlingData throttlingDataA, FlowThrottlingData thrott\n             int priorityB = throttlingDataB.getPriority() == null ? defaultFlowPriority : throttlingDataB.getPriority();\n             Instant timeCreateA = throttlingDataA.getTimeCreate();\n             Instant timeCreateB = throttlingDataB.getTimeCreate();\n+            PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzOTg4Nw=="}, "originalCommit": {"oid": "36e03f04e6b41cc40fd2b3d7952c4dfb3803b907"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1852, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}