{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NzkyNjAx", "number": 3226, "title": "Add func tests for ARP connected devices", "bodyText": "", "createdAt": "2020-02-20T14:37:59Z", "url": "https://github.com/telstra/open-kilda/pull/3226", "merged": true, "mergeCommit": {"oid": "087580ad86f608afe81e3acaa0927e7c94df218a"}, "closed": true, "closedAt": "2020-03-06T09:46:06Z", "author": {"login": "rtretyak"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGa3PlAFqTM2MjQzMTgzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKo_c5ABqjMxMDA1ODgwNDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDMxODM5", "url": "https://github.com/telstra/open-kilda/pull/3226#pullrequestreview-362431839", "createdAt": "2020-02-21T07:04:27Z", "commit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzowNDoyN1rOFstX3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzo0MjoyNFrOFsuDPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyNTA1Mw==", "bodyText": "According to code here must be NOVIFLOW_PUSH_POP_VXLAN feature", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382425053", "createdAt": "2020-02-21T07:04:27Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -84,49 +105,53 @@ class SwitchHelper {\n         if (swProps.multiTable) {\n             multiTableRules = [MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE, MULTITABLE_INGRESS_DROP_COOKIE,\n                     MULTITABLE_POST_INGRESS_DROP_COOKIE, MULTITABLE_EGRESS_PASS_THROUGH_COOKIE,\n-                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE]\n+                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE,\n+                    ARP_POST_INGRESS_COOKIE, ARP_POST_INGRESS_ONE_SWITCH_COOKIE]\n             if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNjE1OA==", "bodyText": "what will happen if some rules are missed on the switch?\nFor example\nactualHexCookie = [1,2]\nexpectedHexCookie = [1,2,3]\nwill condition (actualHexCookie - expectedHexCookie).empty be false positive in this case", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382436158", "createdAt": "2020-02-21T07:42:24Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -164,13 +189,13 @@ class SwitchHelper {\n         Wrappers.wait(Constants.RULES_INSTALLATION_TIME) {\n             def actualHexCookie = []\n             for (long cookie : northbound.getSwitchRules(sw.dpId).flowEntries*.cookie) {\n-                actualHexCookie.add(Cookie.decode(cookie).toString())\n+                actualHexCookie.add(decode(cookie).toString())\n             }\n             def expectedHexCookie = []\n             for (long cookie : sw.defaultCookies) {\n-                expectedHexCookie.add(Cookie.decode(cookie).toString())\n+                expectedHexCookie.add(decode(cookie).toString())\n             }\n-            assert actualHexCookie.sort() == expectedHexCookie.sort()\n+            assert (actualHexCookie - expectedHexCookie).empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4"}, "originalPosition": 124}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/1f1066ec4f8e6313f8d3969f9827de59526219f4", "committedDate": "2020-02-20T14:36:54Z", "message": "Add func tests for ARP connected devices"}, "afterCommit": {"oid": "6be18e84afa2aefe5163693b93dc45e5b352db7e", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/6be18e84afa2aefe5163693b93dc45e5b352db7e", "committedDate": "2020-02-21T11:28:01Z", "message": "Add func tests for ARP connected devices"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6be18e84afa2aefe5163693b93dc45e5b352db7e", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/6be18e84afa2aefe5163693b93dc45e5b352db7e", "committedDate": "2020-02-21T11:28:01Z", "message": "Add func tests for ARP connected devices"}, "afterCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/0b97059c39d080b6caa44a3060f1566eab452d65", "committedDate": "2020-02-21T11:29:03Z", "message": "Add func tests for ARP connected devices"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTcwNjYx", "url": "https://github.com/telstra/open-kilda/pull/3226#pullrequestreview-362570661", "createdAt": "2020-02-21T11:36:41Z", "commit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozNjo0MVrOFs0JTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTo0MjoyOFrOFs0RHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjAxMg==", "bodyText": "nit: not quite accurate name switchLldpRules because we add ARP rules to this list", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382536012", "createdAt": "2020-02-21T11:36:41Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -84,49 +106,53 @@ class SwitchHelper {\n         if (swProps.multiTable) {\n             multiTableRules = [MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE, MULTITABLE_INGRESS_DROP_COOKIE,\n                     MULTITABLE_POST_INGRESS_DROP_COOKIE, MULTITABLE_EGRESS_PASS_THROUGH_COOKIE,\n-                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE]\n-            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n-                multiTableRules.add(LLDP_POST_INGRESS_VXLAN_COOKIE)\n+                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE,\n+                    ARP_POST_INGRESS_COOKIE, ARP_POST_INGRESS_ONE_SWITCH_COOKIE]\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_PUSH_POP_VXLAN)) {\n+                multiTableRules.addAll([LLDP_POST_INGRESS_VXLAN_COOKIE, ARP_POST_INGRESS_VXLAN_COOKIE])\n             }\n             northbound.getLinks(sw.dpId, null, null, null).each {\n                 if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n-                    multiTableRules.add(Cookie.encodeIslVxlanEgress(it.source.portNo))\n-                    multiTableRules.add(Cookie.encodeIslVxlanTransit(it.source.portNo))\n+                    multiTableRules.add(encodeIslVxlanEgress(it.source.portNo))\n+                    multiTableRules.add(encodeIslVxlanTransit(it.source.portNo))\n                 }\n-                multiTableRules.add(Cookie.encodeIslVlanEgress(it.source.portNo))\n+                multiTableRules.add(encodeIslVlanEgress(it.source.portNo))\n             }\n             northbound.getSwitchFlows(sw.dpId).each {\n                 if (it.source.datapath.equals(sw.dpId)) {\n-                    multiTableRules.add(Cookie.encodeIngressRulePassThrough(it.source.portId))\n+                    multiTableRules.add(encodeIngressRulePassThrough(it.source.portId))\n                     if (swProps.switchLldp || it.source.detectConnectedDevices.lldp) {\n-                        switchLldpRules.add(Cookie.encodeLldpInputCustomer(it.source.portId))\n+                        switchLldpRules.add(encodeLldpInputCustomer(it.source.portId))\n                     }\n                 }\n                 if (it.destination.datapath.equals(sw.dpId)) {\n-                    multiTableRules.add(Cookie.encodeIngressRulePassThrough(it.destination.portId))\n+                    multiTableRules.add(encodeIngressRulePassThrough(it.destination.portId))\n                     if (swProps.switchLldp || it.destination.detectConnectedDevices.lldp) {\n-                        switchLldpRules.add(Cookie.encodeLldpInputCustomer(it.destination.portId))\n+                        switchLldpRules.add(encodeLldpInputCustomer(it.destination.portId))\n                     }\n                 }\n             }\n         }\n         if (swProps.switchLldp) {\n             switchLldpRules.addAll([LLDP_INPUT_PRE_DROP_COOKIE, LLDP_TRANSIT_COOKIE, LLDP_INGRESS_COOKIE])\n         }\n+        if (swProps.switchArp) {\n+            switchLldpRules.addAll([ARP_INPUT_PRE_DROP_COOKIE, ARP_TRANSIT_COOKIE, ARP_INGRESS_COOKIE])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzODAxMw==", "bodyText": "Will be false positive in next case:\n\nswitch is in multiTable mode\nchange switch mode to single table\nFor some reasons all rules were NOT reinstalled.\n\nExpected result:\nAssertion failed\nActual result\nAssert is OK because:\nSingle table rules are a subset of multi table rules (see line 143)\nso in our case actualHexCookie = [singleTableRules + excess multi table rules]\nexpectedHexCookies = [singleTableRules]\nthat is why actualHexCookie. containsInAnyOrder(expectedHexCookie.toArray()) is OK", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382538013", "createdAt": "2020-02-21T11:42:28Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -164,13 +190,13 @@ class SwitchHelper {\n         Wrappers.wait(Constants.RULES_INSTALLATION_TIME) {\n             def actualHexCookie = []\n             for (long cookie : northbound.getSwitchRules(sw.dpId).flowEntries*.cookie) {\n-                actualHexCookie.add(Cookie.decode(cookie).toString())\n+                actualHexCookie.add(decode(cookie).toString())\n             }\n             def expectedHexCookie = []\n             for (long cookie : sw.defaultCookies) {\n-                expectedHexCookie.add(Cookie.decode(cookie).toString())\n+                expectedHexCookie.add(decode(cookie).toString())\n             }\n-            assert actualHexCookie.sort() == expectedHexCookie.sort()\n+            assertThat actualHexCookie, containsInAnyOrder(expectedHexCookie.toArray())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/0b97059c39d080b6caa44a3060f1566eab452d65", "committedDate": "2020-02-21T11:29:03Z", "message": "Add func tests for ARP connected devices"}, "afterCommit": {"oid": "18ff4559d727d523ee0f5da3873d0f80eba662cb", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/18ff4559d727d523ee0f5da3873d0f80eba662cb", "committedDate": "2020-02-21T11:55:28Z", "message": "Add func tests for ARP connected devices"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTcxMTIw", "url": "https://github.com/telstra/open-kilda/pull/3226#pullrequestreview-362571120", "createdAt": "2020-02-21T11:37:43Z", "commit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozNzo0M1rOFs0Klw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTo0MTowMFrOFs0PCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjM0Mw==", "bodyText": "2020", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382536343", "createdAt": "2020-02-21T11:37:43Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/traffexam/model/ArpData.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/* Copyright 2019 Telstra Open Source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNzQ4MA==", "bodyText": "How about sending just swProps instead of three parameters?", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382537480", "createdAt": "2020-02-21T11:41:00Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/DefaultRulesValidationSpec.groovy", "diffHunk": "@@ -41,7 +55,50 @@ class DefaultRulesValidationSpec extends HealthCheckSpecification {\n             rules.proper.sort() == sw.defaultCookies.sort()\n         }\n \n-        where: \"Run for all unique switches\"\n-        sw << getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+        cleanup: \"Restore original switch props\"\n+        switchHelper.updateSwitchProperties(sw, originalProps)\n+\n+        where: \"Run for all combinations of unique switches and switch modes\"\n+        [swProps, sw] <<\n+                [[\n+                    [\n+                        multiTable: false,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+\n+                    [\n+                        multiTable: true,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+                    [\n+                        multiTable: true,\n+                        switchLldp: true,\n+                        switchArp: true\n+                    ]\n+                ], getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+                ].combinations().findAll { Map swProp, Switch _sw ->\n+                    //filter out combinations where we pick non-multitable switch and do multitable switch props\n+                    !(swProp.multiTable && !_sw.features.contains(SwitchFeature.MULTI_TABLE))\n+                }\n+        propsDescr = getDescr(swProps.multiTable, swProps.switchLldp, swProps.switchArp)\n+    }\n+\n+    String getDescr(boolean multitable, boolean lldp, boolean arp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNjc0NDEz", "url": "https://github.com/telstra/open-kilda/pull/3226#pullrequestreview-362674413", "createdAt": "2020-02-21T14:39:53Z", "commit": {"oid": "18ff4559d727d523ee0f5da3873d0f80eba662cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18ff4559d727d523ee0f5da3873d0f80eba662cb", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/18ff4559d727d523ee0f5da3873d0f80eba662cb", "committedDate": "2020-02-21T11:55:28Z", "message": "Add func tests for ARP connected devices"}, "afterCommit": {"oid": "61801943926768ea09125ac1390b590efa288155", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/61801943926768ea09125ac1390b590efa288155", "committedDate": "2020-02-21T15:04:39Z", "message": "Add func tests for ARP connected devices"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61801943926768ea09125ac1390b590efa288155", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/61801943926768ea09125ac1390b590efa288155", "committedDate": "2020-02-21T15:04:39Z", "message": "Add func tests for ARP connected devices"}, "afterCommit": {"oid": "c9e850c2ee2aa265781e9f4de2e0a127ee4c9960", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/c9e850c2ee2aa265781e9f4de2e0a127ee4c9960", "committedDate": "2020-02-24T09:22:55Z", "message": "Add func tests for ARP connected devices"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9e850c2ee2aa265781e9f4de2e0a127ee4c9960", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/c9e850c2ee2aa265781e9f4de2e0a127ee4c9960", "committedDate": "2020-02-24T09:22:55Z", "message": "Add func tests for ARP connected devices"}, "afterCommit": {"oid": "684f8fc04d03339faa74b4f3be5113c6ac12becf", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/684f8fc04d03339faa74b4f3be5113c6ac12becf", "committedDate": "2020-03-02T13:36:02Z", "message": "Add func tests for ARP connected devices"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Nzc3MjQ5", "url": "https://github.com/telstra/open-kilda/pull/3226#pullrequestreview-367777249", "createdAt": "2020-03-03T08:24:35Z", "commit": {"oid": "684f8fc04d03339faa74b4f3be5113c6ac12becf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fb3230c9aaf8315aca2321e4de7a2b6364619cc", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/9fb3230c9aaf8315aca2321e4de7a2b6364619cc", "committedDate": "2020-03-05T10:30:30Z", "message": "Add func tests for ARP connected devices"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "684f8fc04d03339faa74b4f3be5113c6ac12becf", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/684f8fc04d03339faa74b4f3be5113c6ac12becf", "committedDate": "2020-03-02T13:36:02Z", "message": "Add func tests for ARP connected devices"}, "afterCommit": {"oid": "9fb3230c9aaf8315aca2321e4de7a2b6364619cc", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/9fb3230c9aaf8315aca2321e4de7a2b6364619cc", "committedDate": "2020-03-05T10:30:30Z", "message": "Add func tests for ARP connected devices"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3655, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}