{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NzkyNjAx", "number": 3226, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzowNDoyN1rODhyE4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTo0MjoyOFrODh2fmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzUwMDQ4OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzowNDoyN1rOFstX3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTowNzowMFrOFswAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyNTA1Mw==", "bodyText": "According to code here must be NOVIFLOW_PUSH_POP_VXLAN feature", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382425053", "createdAt": "2020-02-21T07:04:27Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -84,49 +105,53 @@ class SwitchHelper {\n         if (swProps.multiTable) {\n             multiTableRules = [MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE, MULTITABLE_INGRESS_DROP_COOKIE,\n                     MULTITABLE_POST_INGRESS_DROP_COOKIE, MULTITABLE_EGRESS_PASS_THROUGH_COOKIE,\n-                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE]\n+                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE,\n+                    ARP_POST_INGRESS_COOKIE, ARP_POST_INGRESS_ONE_SWITCH_COOKIE]\n             if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2ODIzNQ==", "bodyText": "Yeah, I know. Fixed it in https://github.com/telstra/open-kilda/pull/3092/files but not here. Will fix it here too", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382468235", "createdAt": "2020-02-21T09:07:00Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -84,49 +105,53 @@ class SwitchHelper {\n         if (swProps.multiTable) {\n             multiTableRules = [MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE, MULTITABLE_INGRESS_DROP_COOKIE,\n                     MULTITABLE_POST_INGRESS_DROP_COOKIE, MULTITABLE_EGRESS_PASS_THROUGH_COOKIE,\n-                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE]\n+                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE,\n+                    ARP_POST_INGRESS_COOKIE, ARP_POST_INGRESS_ONE_SWITCH_COOKIE]\n             if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyNTA1Mw=="}, "originalCommit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzU3NDQ2OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzo0MjoyNFrOFsuDPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMToyODoyNVrOFsz9LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNjE1OA==", "bodyText": "what will happen if some rules are missed on the switch?\nFor example\nactualHexCookie = [1,2]\nexpectedHexCookie = [1,2,3]\nwill condition (actualHexCookie - expectedHexCookie).empty be false positive in this case", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382436158", "createdAt": "2020-02-21T07:42:24Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -164,13 +189,13 @@ class SwitchHelper {\n         Wrappers.wait(Constants.RULES_INSTALLATION_TIME) {\n             def actualHexCookie = []\n             for (long cookie : northbound.getSwitchRules(sw.dpId).flowEntries*.cookie) {\n-                actualHexCookie.add(Cookie.decode(cookie).toString())\n+                actualHexCookie.add(decode(cookie).toString())\n             }\n             def expectedHexCookie = []\n             for (long cookie : sw.defaultCookies) {\n-                expectedHexCookie.add(Cookie.decode(cookie).toString())\n+                expectedHexCookie.add(decode(cookie).toString())\n             }\n-            assert actualHexCookie.sort() == expectedHexCookie.sort()\n+            assert (actualHexCookie - expectedHexCookie).empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2ODU5MQ==", "bodyText": "very true, thx. Will fix this", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382468591", "createdAt": "2020-02-21T09:07:52Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -164,13 +189,13 @@ class SwitchHelper {\n         Wrappers.wait(Constants.RULES_INSTALLATION_TIME) {\n             def actualHexCookie = []\n             for (long cookie : northbound.getSwitchRules(sw.dpId).flowEntries*.cookie) {\n-                actualHexCookie.add(Cookie.decode(cookie).toString())\n+                actualHexCookie.add(decode(cookie).toString())\n             }\n             def expectedHexCookie = []\n             for (long cookie : sw.defaultCookies) {\n-                expectedHexCookie.add(Cookie.decode(cookie).toString())\n+                expectedHexCookie.add(decode(cookie).toString())\n             }\n-            assert actualHexCookie.sort() == expectedHexCookie.sort()\n+            assert (actualHexCookie - expectedHexCookie).empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNjE1OA=="}, "originalCommit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzMjkwOQ==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382532909", "createdAt": "2020-02-21T11:28:25Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -164,13 +189,13 @@ class SwitchHelper {\n         Wrappers.wait(Constants.RULES_INSTALLATION_TIME) {\n             def actualHexCookie = []\n             for (long cookie : northbound.getSwitchRules(sw.dpId).flowEntries*.cookie) {\n-                actualHexCookie.add(Cookie.decode(cookie).toString())\n+                actualHexCookie.add(decode(cookie).toString())\n             }\n             def expectedHexCookie = []\n             for (long cookie : sw.defaultCookies) {\n-                expectedHexCookie.add(Cookie.decode(cookie).toString())\n+                expectedHexCookie.add(decode(cookie).toString())\n             }\n-            assert actualHexCookie.sort() == expectedHexCookie.sort()\n+            assert (actualHexCookie - expectedHexCookie).empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNjE1OA=="}, "originalCommit": {"oid": "1f1066ec4f8e6313f8d3969f9827de59526219f4"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODIxMTYxOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozNjo0MVrOFs0JTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjoxODoxOFrOFs1G5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjAxMg==", "bodyText": "nit: not quite accurate name switchLldpRules because we add ARP rules to this list", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382536012", "createdAt": "2020-02-21T11:36:41Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -84,49 +106,53 @@ class SwitchHelper {\n         if (swProps.multiTable) {\n             multiTableRules = [MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE, MULTITABLE_INGRESS_DROP_COOKIE,\n                     MULTITABLE_POST_INGRESS_DROP_COOKIE, MULTITABLE_EGRESS_PASS_THROUGH_COOKIE,\n-                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE]\n-            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n-                multiTableRules.add(LLDP_POST_INGRESS_VXLAN_COOKIE)\n+                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE,\n+                    ARP_POST_INGRESS_COOKIE, ARP_POST_INGRESS_ONE_SWITCH_COOKIE]\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_PUSH_POP_VXLAN)) {\n+                multiTableRules.addAll([LLDP_POST_INGRESS_VXLAN_COOKIE, ARP_POST_INGRESS_VXLAN_COOKIE])\n             }\n             northbound.getLinks(sw.dpId, null, null, null).each {\n                 if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n-                    multiTableRules.add(Cookie.encodeIslVxlanEgress(it.source.portNo))\n-                    multiTableRules.add(Cookie.encodeIslVxlanTransit(it.source.portNo))\n+                    multiTableRules.add(encodeIslVxlanEgress(it.source.portNo))\n+                    multiTableRules.add(encodeIslVxlanTransit(it.source.portNo))\n                 }\n-                multiTableRules.add(Cookie.encodeIslVlanEgress(it.source.portNo))\n+                multiTableRules.add(encodeIslVlanEgress(it.source.portNo))\n             }\n             northbound.getSwitchFlows(sw.dpId).each {\n                 if (it.source.datapath.equals(sw.dpId)) {\n-                    multiTableRules.add(Cookie.encodeIngressRulePassThrough(it.source.portId))\n+                    multiTableRules.add(encodeIngressRulePassThrough(it.source.portId))\n                     if (swProps.switchLldp || it.source.detectConnectedDevices.lldp) {\n-                        switchLldpRules.add(Cookie.encodeLldpInputCustomer(it.source.portId))\n+                        switchLldpRules.add(encodeLldpInputCustomer(it.source.portId))\n                     }\n                 }\n                 if (it.destination.datapath.equals(sw.dpId)) {\n-                    multiTableRules.add(Cookie.encodeIngressRulePassThrough(it.destination.portId))\n+                    multiTableRules.add(encodeIngressRulePassThrough(it.destination.portId))\n                     if (swProps.switchLldp || it.destination.detectConnectedDevices.lldp) {\n-                        switchLldpRules.add(Cookie.encodeLldpInputCustomer(it.destination.portId))\n+                        switchLldpRules.add(encodeLldpInputCustomer(it.destination.portId))\n                     }\n                 }\n             }\n         }\n         if (swProps.switchLldp) {\n             switchLldpRules.addAll([LLDP_INPUT_PRE_DROP_COOKIE, LLDP_TRANSIT_COOKIE, LLDP_INGRESS_COOKIE])\n         }\n+        if (swProps.switchArp) {\n+            switchLldpRules.addAll([ARP_INPUT_PRE_DROP_COOKIE, ARP_TRANSIT_COOKIE, ARP_INGRESS_COOKIE])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MTc4Mg==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382551782", "createdAt": "2020-02-21T12:18:18Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -84,49 +106,53 @@ class SwitchHelper {\n         if (swProps.multiTable) {\n             multiTableRules = [MULTITABLE_PRE_INGRESS_PASS_THROUGH_COOKIE, MULTITABLE_INGRESS_DROP_COOKIE,\n                     MULTITABLE_POST_INGRESS_DROP_COOKIE, MULTITABLE_EGRESS_PASS_THROUGH_COOKIE,\n-                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE]\n-            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n-                multiTableRules.add(LLDP_POST_INGRESS_VXLAN_COOKIE)\n+                    MULTITABLE_TRANSIT_DROP_COOKIE, LLDP_POST_INGRESS_COOKIE, LLDP_POST_INGRESS_ONE_SWITCH_COOKIE,\n+                    ARP_POST_INGRESS_COOKIE, ARP_POST_INGRESS_ONE_SWITCH_COOKIE]\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_PUSH_POP_VXLAN)) {\n+                multiTableRules.addAll([LLDP_POST_INGRESS_VXLAN_COOKIE, ARP_POST_INGRESS_VXLAN_COOKIE])\n             }\n             northbound.getLinks(sw.dpId, null, null, null).each {\n                 if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n-                    multiTableRules.add(Cookie.encodeIslVxlanEgress(it.source.portNo))\n-                    multiTableRules.add(Cookie.encodeIslVxlanTransit(it.source.portNo))\n+                    multiTableRules.add(encodeIslVxlanEgress(it.source.portNo))\n+                    multiTableRules.add(encodeIslVxlanTransit(it.source.portNo))\n                 }\n-                multiTableRules.add(Cookie.encodeIslVlanEgress(it.source.portNo))\n+                multiTableRules.add(encodeIslVlanEgress(it.source.portNo))\n             }\n             northbound.getSwitchFlows(sw.dpId).each {\n                 if (it.source.datapath.equals(sw.dpId)) {\n-                    multiTableRules.add(Cookie.encodeIngressRulePassThrough(it.source.portId))\n+                    multiTableRules.add(encodeIngressRulePassThrough(it.source.portId))\n                     if (swProps.switchLldp || it.source.detectConnectedDevices.lldp) {\n-                        switchLldpRules.add(Cookie.encodeLldpInputCustomer(it.source.portId))\n+                        switchLldpRules.add(encodeLldpInputCustomer(it.source.portId))\n                     }\n                 }\n                 if (it.destination.datapath.equals(sw.dpId)) {\n-                    multiTableRules.add(Cookie.encodeIngressRulePassThrough(it.destination.portId))\n+                    multiTableRules.add(encodeIngressRulePassThrough(it.destination.portId))\n                     if (swProps.switchLldp || it.destination.detectConnectedDevices.lldp) {\n-                        switchLldpRules.add(Cookie.encodeLldpInputCustomer(it.destination.portId))\n+                        switchLldpRules.add(encodeLldpInputCustomer(it.destination.portId))\n                     }\n                 }\n             }\n         }\n         if (swProps.switchLldp) {\n             switchLldpRules.addAll([LLDP_INPUT_PRE_DROP_COOKIE, LLDP_TRANSIT_COOKIE, LLDP_INGRESS_COOKIE])\n         }\n+        if (swProps.switchArp) {\n+            switchLldpRules.addAll([ARP_INPUT_PRE_DROP_COOKIE, ARP_TRANSIT_COOKIE, ARP_INGRESS_COOKIE])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjAxMg=="}, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODIxMzU2OnYy", "diffSide": "RIGHT", "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/traffexam/model/ArpData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozNzo0M1rOFs0Klw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTozNzo0M1rOFs0Klw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNjM0Mw==", "bodyText": "2020", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382536343", "createdAt": "2020-02-21T11:37:43Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/traffexam/model/ArpData.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/* Copyright 2019 Telstra Open Source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODIyMDc2OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/DefaultRulesValidationSpec.groovy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTo0MTowMFrOFs0PCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo0NDoyOFrOFs3SnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNzQ4MA==", "bodyText": "How about sending just swProps instead of three parameters?", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382537480", "createdAt": "2020-02-21T11:41:00Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/DefaultRulesValidationSpec.groovy", "diffHunk": "@@ -41,7 +55,50 @@ class DefaultRulesValidationSpec extends HealthCheckSpecification {\n             rules.proper.sort() == sw.defaultCookies.sort()\n         }\n \n-        where: \"Run for all unique switches\"\n-        sw << getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+        cleanup: \"Restore original switch props\"\n+        switchHelper.updateSwitchProperties(sw, originalProps)\n+\n+        where: \"Run for all combinations of unique switches and switch modes\"\n+        [swProps, sw] <<\n+                [[\n+                    [\n+                        multiTable: false,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+\n+                    [\n+                        multiTable: true,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+                    [\n+                        multiTable: true,\n+                        switchLldp: true,\n+                        switchArp: true\n+                    ]\n+                ], getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+                ].combinations().findAll { Map swProp, Switch _sw ->\n+                    //filter out combinations where we pick non-multitable switch and do multitable switch props\n+                    !(swProp.multiTable && !_sw.features.contains(SwitchFeature.MULTI_TABLE))\n+                }\n+        propsDescr = getDescr(swProps.multiTable, swProps.switchLldp, swProps.switchArp)\n+    }\n+\n+    String getDescr(boolean multitable, boolean lldp, boolean arp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDU2Nw==", "bodyText": "Any arguments?", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382550567", "createdAt": "2020-02-21T12:14:58Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/DefaultRulesValidationSpec.groovy", "diffHunk": "@@ -41,7 +55,50 @@ class DefaultRulesValidationSpec extends HealthCheckSpecification {\n             rules.proper.sort() == sw.defaultCookies.sort()\n         }\n \n-        where: \"Run for all unique switches\"\n-        sw << getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+        cleanup: \"Restore original switch props\"\n+        switchHelper.updateSwitchProperties(sw, originalProps)\n+\n+        where: \"Run for all combinations of unique switches and switch modes\"\n+        [swProps, sw] <<\n+                [[\n+                    [\n+                        multiTable: false,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+\n+                    [\n+                        multiTable: true,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+                    [\n+                        multiTable: true,\n+                        switchLldp: true,\n+                        switchArp: true\n+                    ]\n+                ], getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+                ].combinations().findAll { Map swProp, Switch _sw ->\n+                    //filter out combinations where we pick non-multitable switch and do multitable switch props\n+                    !(swProp.multiTable && !_sw.features.contains(SwitchFeature.MULTI_TABLE))\n+                }\n+        propsDescr = getDescr(swProps.multiTable, swProps.switchLldp, swProps.switchArp)\n+    }\n+\n+    String getDescr(boolean multitable, boolean lldp, boolean arp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNzQ4MA=="}, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2NDc4NA==", "bodyText": "All passed parameters can be taken from the same object.\nSo, I strongly believe it is easier to pass an object only.\nIn addition you don't need to remember the correct order of passed arguments.", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382564784", "createdAt": "2020-02-21T12:51:34Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/DefaultRulesValidationSpec.groovy", "diffHunk": "@@ -41,7 +55,50 @@ class DefaultRulesValidationSpec extends HealthCheckSpecification {\n             rules.proper.sort() == sw.defaultCookies.sort()\n         }\n \n-        where: \"Run for all unique switches\"\n-        sw << getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+        cleanup: \"Restore original switch props\"\n+        switchHelper.updateSwitchProperties(sw, originalProps)\n+\n+        where: \"Run for all combinations of unique switches and switch modes\"\n+        [swProps, sw] <<\n+                [[\n+                    [\n+                        multiTable: false,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+\n+                    [\n+                        multiTable: true,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+                    [\n+                        multiTable: true,\n+                        switchLldp: true,\n+                        switchArp: true\n+                    ]\n+                ], getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+                ].combinations().findAll { Map swProp, Switch _sw ->\n+                    //filter out combinations where we pick non-multitable switch and do multitable switch props\n+                    !(swProp.multiTable && !_sw.features.contains(SwitchFeature.MULTI_TABLE))\n+                }\n+        propsDescr = getDescr(swProps.multiTable, swProps.switchLldp, swProps.switchArp)\n+    }\n+\n+    String getDescr(boolean multitable, boolean lldp, boolean arp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNzQ4MA=="}, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NzU0OQ==", "bodyText": "My thought process is: Your option is 'not safe'. You have to 'remember' the key names and do not get any suggestions from the IDE. It is not type-safe as well. I prefer not to spread dynamic code across the place and get rid of it as soon as possible, since any typo will only be caught during runtime.\nI understand that we pass the same map to the test itself, but I would happily use custom classes(like ConnectedDeviceTestData in ConnectedDevicesSpec) if it didn't require additional coding. And I would be happy to pass a strongly-typed object here as a param. I would also may have considered using map if we had too many params to pass(but its only 3 here).\nSo you gave only 1 argument: ' you don't need remember the order of passed arguments'. Nobody have to 'remember' it, it is the method signature, order will always be suggested by the IDE..unlike remembering keys of your map.\nDon't get me wrong, I see your suggestion as an option and don't think its bad, but unless you give more arguments I don't see real reasons to change current code. It's just different", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382587549", "createdAt": "2020-02-21T13:44:28Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/switches/DefaultRulesValidationSpec.groovy", "diffHunk": "@@ -41,7 +55,50 @@ class DefaultRulesValidationSpec extends HealthCheckSpecification {\n             rules.proper.sort() == sw.defaultCookies.sort()\n         }\n \n-        where: \"Run for all unique switches\"\n-        sw << getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+        cleanup: \"Restore original switch props\"\n+        switchHelper.updateSwitchProperties(sw, originalProps)\n+\n+        where: \"Run for all combinations of unique switches and switch modes\"\n+        [swProps, sw] <<\n+                [[\n+                    [\n+                        multiTable: false,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+\n+                    [\n+                        multiTable: true,\n+                        switchLldp: false,\n+                        switchArp: false\n+                    ],\n+                    [\n+                        multiTable: true,\n+                        switchLldp: true,\n+                        switchArp: true\n+                    ]\n+                ], getTopology().getActiveSwitches().unique { activeSw -> activeSw.description }\n+                ].combinations().findAll { Map swProp, Switch _sw ->\n+                    //filter out combinations where we pick non-multitable switch and do multitable switch props\n+                    !(swProp.multiTable && !_sw.features.contains(SwitchFeature.MULTI_TABLE))\n+                }\n+        propsDescr = getDescr(swProps.multiTable, swProps.switchLldp, swProps.switchArp)\n+    }\n+\n+    String getDescr(boolean multitable, boolean lldp, boolean arp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzNzQ4MA=="}, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODIyNDI0OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTo0MjoyOFrOFs0RHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjowMzowNFrOFs0wTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzODAxMw==", "bodyText": "Will be false positive in next case:\n\nswitch is in multiTable mode\nchange switch mode to single table\nFor some reasons all rules were NOT reinstalled.\n\nExpected result:\nAssertion failed\nActual result\nAssert is OK because:\nSingle table rules are a subset of multi table rules (see line 143)\nso in our case actualHexCookie = [singleTableRules + excess multi table rules]\nexpectedHexCookies = [singleTableRules]\nthat is why actualHexCookie. containsInAnyOrder(expectedHexCookie.toArray()) is OK", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382538013", "createdAt": "2020-02-21T11:42:28Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -164,13 +190,13 @@ class SwitchHelper {\n         Wrappers.wait(Constants.RULES_INSTALLATION_TIME) {\n             def actualHexCookie = []\n             for (long cookie : northbound.getSwitchRules(sw.dpId).flowEntries*.cookie) {\n-                actualHexCookie.add(Cookie.decode(cookie).toString())\n+                actualHexCookie.add(decode(cookie).toString())\n             }\n             def expectedHexCookie = []\n             for (long cookie : sw.defaultCookies) {\n-                expectedHexCookie.add(Cookie.decode(cookie).toString())\n+                expectedHexCookie.add(decode(cookie).toString())\n             }\n-            assert actualHexCookie.sort() == expectedHexCookie.sort()\n+            assertThat actualHexCookie, containsInAnyOrder(expectedHexCookie.toArray())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU0MDU5MQ==", "bodyText": "Even though the matcher is called 'contains..', it does a full match and will complain in both cases if actual is bigger than expected or expected is bigger than actual.", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382540591", "createdAt": "2020-02-21T11:49:24Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -164,13 +190,13 @@ class SwitchHelper {\n         Wrappers.wait(Constants.RULES_INSTALLATION_TIME) {\n             def actualHexCookie = []\n             for (long cookie : northbound.getSwitchRules(sw.dpId).flowEntries*.cookie) {\n-                actualHexCookie.add(Cookie.decode(cookie).toString())\n+                actualHexCookie.add(decode(cookie).toString())\n             }\n             def expectedHexCookie = []\n             for (long cookie : sw.defaultCookies) {\n-                expectedHexCookie.add(Cookie.decode(cookie).toString())\n+                expectedHexCookie.add(decode(cookie).toString())\n             }\n-            assert actualHexCookie.sort() == expectedHexCookie.sort()\n+            assertThat actualHexCookie, containsInAnyOrder(expectedHexCookie.toArray())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzODAxMw=="}, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU0NTk5OA==", "bodyText": "okay", "url": "https://github.com/telstra/open-kilda/pull/3226#discussion_r382545998", "createdAt": "2020-02-21T12:03:04Z", "author": {"login": "niksv"}, "path": "src-java/testing/functional-tests/src/main/groovy/org/openkilda/functionaltests/helpers/SwitchHelper.groovy", "diffHunk": "@@ -164,13 +190,13 @@ class SwitchHelper {\n         Wrappers.wait(Constants.RULES_INSTALLATION_TIME) {\n             def actualHexCookie = []\n             for (long cookie : northbound.getSwitchRules(sw.dpId).flowEntries*.cookie) {\n-                actualHexCookie.add(Cookie.decode(cookie).toString())\n+                actualHexCookie.add(decode(cookie).toString())\n             }\n             def expectedHexCookie = []\n             for (long cookie : sw.defaultCookies) {\n-                expectedHexCookie.add(Cookie.decode(cookie).toString())\n+                expectedHexCookie.add(decode(cookie).toString())\n             }\n-            assert actualHexCookie.sort() == expectedHexCookie.sort()\n+            assertThat actualHexCookie, containsInAnyOrder(expectedHexCookie.toArray())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzODAxMw=="}, "originalCommit": {"oid": "0b97059c39d080b6caa44a3060f1566eab452d65"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1990, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}