{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2ODU1NzE3", "number": 3144, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzozNzoyMlrODgZHSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyODoyN1rODhzJkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjkyNDg4OnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/test/java/org/openkilda/wfm/topology/connecteddevices/service/PacketServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzozNzoyMlrOFqkruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzo0NTo0NVrOFqk89g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4NTUyOA==", "bodyText": "Why do you need this sleep?", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r380185528", "createdAt": "2020-02-17T13:37:22Z", "author": {"login": "rozdy"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/test/java/org/openkilda/wfm/topology/connecteddevices/service/PacketServiceTest.java", "diffHunk": "@@ -130,6 +135,20 @@ public void testHandleLldpDataDifferentTimeOnUpdate() throws InterruptedExceptio\n         assertNotEquals(devices.iterator().next().getTimeFirstSeen(), devices.iterator().next().getTimeLastSeen());\n     }\n \n+    @Test\n+    public void testHandleArpDataDifferentTimeOnUpdate() throws InterruptedException {\n+        // create\n+        packetService.handleArpData(createArpInfoData());\n+\n+        Thread.sleep(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dff2f42523cf9e0ea0606862cae5d79babcee52f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4OTk0Mg==", "bodyText": "this test checks that create and update operations has different timestams. MessageData class (parent of ArpInfoData) sets timestamp in constructor by System.currentTImeMills(). Some time this test is too fast and timestamp in create and update requests are equal. to guarantee different timestamp I added sleep(10) here", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r380189942", "createdAt": "2020-02-17T13:45:45Z", "author": {"login": "niksv"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/test/java/org/openkilda/wfm/topology/connecteddevices/service/PacketServiceTest.java", "diffHunk": "@@ -130,6 +135,20 @@ public void testHandleLldpDataDifferentTimeOnUpdate() throws InterruptedExceptio\n         assertNotEquals(devices.iterator().next().getTimeFirstSeen(), devices.iterator().next().getTimeLastSeen());\n     }\n \n+    @Test\n+    public void testHandleArpDataDifferentTimeOnUpdate() throws InterruptedException {\n+        // create\n+        packetService.handleArpData(createArpInfoData());\n+\n+        Thread.sleep(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4NTUyOA=="}, "originalCommit": {"oid": "dff2f42523cf9e0ea0606862cae5d79babcee52f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzY3MDA2OnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNTo0NlrOFsu9vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNTo0NlrOFsu9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MTEzNQ==", "bodyText": "Can we figure out which packet here, LLDP or ARP? If we can, then it would be better to log more accurate information.", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r382451135", "createdAt": "2020-02-21T08:25:46Z", "author": {"login": "dpoltavets"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "diffHunk": "@@ -94,28 +103,60 @@ public void handleLldpData(LldpInfoData data) {\n         });\n     }\n \n-    private FlowRelatedData findFlowRelatedData(LldpInfoData data) {\n-        if (data.getCookie() == LLDP_POST_INGRESS_COOKIE) {\n+    /**\n+     * Handle Arp info data.\n+     */\n+    public void handleArpData(ArpInfoData data) {\n+        transactionManager.doInTransaction(() -> {\n+\n+            FlowRelatedData flowRelatedData = findFlowRelatedData(data);\n+            if (flowRelatedData == null) {\n+                return;\n+            }\n+\n+            SwitchConnectedDevice device = getOrBuildArpDevice(data, flowRelatedData.originalVlan);\n+\n+            if (device == null) {\n+                return;\n+            }\n+\n+            device.setTimeLastSeen(Instant.ofEpochMilli(data.getTimestamp()));\n+            device.setFlowId(flowRelatedData.flowId);\n+            device.setSource(flowRelatedData.source);\n+\n+            switchConnectedDeviceRepository.createOrUpdate(device);\n+        });\n+    }\n+\n+    private FlowRelatedData findFlowRelatedData(ConnectedDevicePacketBase data) {\n+        long cookie = data.getCookie();\n+        if (cookie == LLDP_POST_INGRESS_COOKIE\n+                || cookie == ARP_POST_INGRESS_COOKIE) {\n             return findFlowRelatedDataForVlanFlow(data);\n-        } else if (data.getCookie() == LLDP_POST_INGRESS_VXLAN_COOKIE) {\n+        } else if (cookie == LLDP_POST_INGRESS_VXLAN_COOKIE\n+                || cookie == ARP_POST_INGRESS_VXLAN_COOKIE) {\n             return findFlowRelatedDataForVxlanFlow(data);\n-        } else if (data.getCookie() == LLDP_POST_INGRESS_ONE_SWITCH_COOKIE) {\n+        } else if (cookie == LLDP_POST_INGRESS_ONE_SWITCH_COOKIE\n+                || cookie == ARP_POST_INGRESS_ONE_SWITCH_COOKIE) {\n             return findFlowRelatedDataForOneSwitchFlow(data);\n-        } else if (data.getCookie() == LLDP_INPUT_PRE_DROP_COOKIE\n-                || data.getCookie() == LLDP_INGRESS_COOKIE\n-                || data.getCookie() == LLDP_TRANSIT_COOKIE) {\n+        } else if (cookie == LLDP_INPUT_PRE_DROP_COOKIE\n+                || cookie == LLDP_INGRESS_COOKIE\n+                || cookie == LLDP_TRANSIT_COOKIE\n+                || cookie == ARP_INPUT_PRE_DROP_COOKIE\n+                || cookie == ARP_INGRESS_COOKIE\n+                || cookie == ARP_TRANSIT_COOKIE) {\n             int vlan = data.getVlans().isEmpty() ? 0 : data.getVlans().get(0);\n             return new FlowRelatedData(vlan, null, null);\n         }\n-        log.warn(\"Got LLDP packet from unknown rule with cookie {}. Switch {}, port {}, vlans {}\",\n+        log.warn(\"Got LLDP or ARP packet from unknown rule with cookie {}. Switch {}, port {}, vlans {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0f38851ba9d7e586ddf1d0047504d7bd9c801e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzY3MzkxOnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNzoyM1rOFsvABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNzoyM1rOFsvABw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MTcxOQ==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r382451719", "createdAt": "2020-02-21T08:27:23Z", "author": {"login": "dpoltavets"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "diffHunk": "@@ -94,28 +103,60 @@ public void handleLldpData(LldpInfoData data) {\n         });\n     }\n \n-    private FlowRelatedData findFlowRelatedData(LldpInfoData data) {\n-        if (data.getCookie() == LLDP_POST_INGRESS_COOKIE) {\n+    /**\n+     * Handle Arp info data.\n+     */\n+    public void handleArpData(ArpInfoData data) {\n+        transactionManager.doInTransaction(() -> {\n+\n+            FlowRelatedData flowRelatedData = findFlowRelatedData(data);\n+            if (flowRelatedData == null) {\n+                return;\n+            }\n+\n+            SwitchConnectedDevice device = getOrBuildArpDevice(data, flowRelatedData.originalVlan);\n+\n+            if (device == null) {\n+                return;\n+            }\n+\n+            device.setTimeLastSeen(Instant.ofEpochMilli(data.getTimestamp()));\n+            device.setFlowId(flowRelatedData.flowId);\n+            device.setSource(flowRelatedData.source);\n+\n+            switchConnectedDeviceRepository.createOrUpdate(device);\n+        });\n+    }\n+\n+    private FlowRelatedData findFlowRelatedData(ConnectedDevicePacketBase data) {\n+        long cookie = data.getCookie();\n+        if (cookie == LLDP_POST_INGRESS_COOKIE\n+                || cookie == ARP_POST_INGRESS_COOKIE) {\n             return findFlowRelatedDataForVlanFlow(data);\n-        } else if (data.getCookie() == LLDP_POST_INGRESS_VXLAN_COOKIE) {\n+        } else if (cookie == LLDP_POST_INGRESS_VXLAN_COOKIE\n+                || cookie == ARP_POST_INGRESS_VXLAN_COOKIE) {\n             return findFlowRelatedDataForVxlanFlow(data);\n-        } else if (data.getCookie() == LLDP_POST_INGRESS_ONE_SWITCH_COOKIE) {\n+        } else if (cookie == LLDP_POST_INGRESS_ONE_SWITCH_COOKIE\n+                || cookie == ARP_POST_INGRESS_ONE_SWITCH_COOKIE) {\n             return findFlowRelatedDataForOneSwitchFlow(data);\n-        } else if (data.getCookie() == LLDP_INPUT_PRE_DROP_COOKIE\n-                || data.getCookie() == LLDP_INGRESS_COOKIE\n-                || data.getCookie() == LLDP_TRANSIT_COOKIE) {\n+        } else if (cookie == LLDP_INPUT_PRE_DROP_COOKIE\n+                || cookie == LLDP_INGRESS_COOKIE\n+                || cookie == LLDP_TRANSIT_COOKIE\n+                || cookie == ARP_INPUT_PRE_DROP_COOKIE\n+                || cookie == ARP_INGRESS_COOKIE\n+                || cookie == ARP_TRANSIT_COOKIE) {\n             int vlan = data.getVlans().isEmpty() ? 0 : data.getVlans().get(0);\n             return new FlowRelatedData(vlan, null, null);\n         }\n-        log.warn(\"Got LLDP packet from unknown rule with cookie {}. Switch {}, port {}, vlans {}\",\n+        log.warn(\"Got LLDP or ARP packet from unknown rule with cookie {}. Switch {}, port {}, vlans {}\",\n                 data.getCookie(), data.getSwitchId(), data.getPortNumber(), data.getVlans());\n         return null;\n     }\n \n     @VisibleForTesting\n-    FlowRelatedData findFlowRelatedDataForVlanFlow(LldpInfoData data) {\n+    FlowRelatedData findFlowRelatedDataForVlanFlow(ConnectedDevicePacketBase data) {\n         if (data.getVlans().isEmpty()) {\n-            log.warn(\"Got LLDP packet without transit VLAN: {}\", data);\n+            log.warn(\"Got LLDP or ARP packet without transit VLAN: {}\", data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0f38851ba9d7e586ddf1d0047504d7bd9c801e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzY3NDIyOnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNzozMlrOFsvAOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNzozMlrOFsvAOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MTc3MQ==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r382451771", "createdAt": "2020-02-21T08:27:32Z", "author": {"login": "dpoltavets"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "diffHunk": "@@ -145,14 +186,14 @@ FlowRelatedData findFlowRelatedDataForVlanFlow(LldpInfoData data) {\n                 return new FlowRelatedData(flow.getDestVlan(), flow.getFlowId(), false);\n             }\n         } else {\n-            log.warn(\"Got LLDP packet from Flow {} on non-src/non-dst switch {}. Transit vlan: {}\",\n+            log.warn(\"Got LLDP or ARP packet from Flow {} on non-src/non-dst switch {}. Transit vlan: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0f38851ba9d7e586ddf1d0047504d7bd9c801e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzY3NDc4OnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNzo0NVrOFsvAkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNzo0NVrOFsvAkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MTg1OA==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r382451858", "createdAt": "2020-02-21T08:27:45Z", "author": {"login": "dpoltavets"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "diffHunk": "@@ -165,14 +206,14 @@ FlowRelatedData findFlowRelatedDataForVxlanFlow(LldpInfoData data) {\n         } else if (data.getSwitchId().equals(flow.getDestSwitch().getSwitchId())) {\n             return new FlowRelatedData(inputVlan, flow.getFlowId(), false);\n         } else {\n-            log.warn(\"Got LLDP packet from Flow {} on non-src/non-dst switch {}. Port number {}, input vlan {}\",\n+            log.warn(\"Got LLDP or ARP packet from Flow {} on non-src/non-dst switch {}. Port number {}, input vlan {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0f38851ba9d7e586ddf1d0047504d7bd9c801e"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzY3NTMzOnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNzo1OFrOFsvA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNzo1OFrOFsvA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MTkzMg==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r382451932", "createdAt": "2020-02-21T08:27:58Z", "author": {"login": "dpoltavets"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "diffHunk": "@@ -184,7 +225,7 @@ FlowRelatedData findFlowRelatedDataForOneSwitchFlow(LldpInfoData data) {\n         }\n \n         if (!flow.isOneSwitchFlow()) {\n-            log.warn(\"Found NOT one switch flow {} by SwitchId {}, port number {}, vlan {} from LLDP packet\",\n+            log.warn(\"Found NOT one switch flow {} by SwitchId {}, port number {}, vlan {} from LLDP or ARP packet\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0f38851ba9d7e586ddf1d0047504d7bd9c801e"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzY3NTkyOnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyODoxM1rOFsvBMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyODoxM1rOFsvBMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MjAxOA==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r382452018", "createdAt": "2020-02-21T08:28:13Z", "author": {"login": "dpoltavets"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "diffHunk": "@@ -251,7 +292,7 @@ private FlowRelatedData getOneSwitchOnePortFlowRelatedData(\n                 return new FlowRelatedData(flow.getDestVlan(), flow.getFlowId(), false);\n             }\n         }\n-        log.warn(\"Got LLDP data for one switch one Flow with unknown output vlan {}. Flow {} Data {}\",\n+        log.warn(\"Got LLDP or ARP data for one switch one Flow with unknown output vlan {}. Flow {} Data {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0f38851ba9d7e586ddf1d0047504d7bd9c801e"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzY3NjIxOnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyODoyMlrOFsvBWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyODoyMlrOFsvBWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MjA1Ng==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r382452056", "createdAt": "2020-02-21T08:28:22Z", "author": {"login": "dpoltavets"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "diffHunk": "@@ -282,7 +323,7 @@ private Flow getFlowBySwitchIdPortAndVlan(SwitchId switchId, int portNumber, int\n             if (fullPortFlow.isPresent()) {\n                 return fullPortFlow.get();\n             } else {\n-                log.warn(\"Couldn't find Flow for LLDP packet on endpoint: Switch {}, port {}, vlan {}\",\n+                log.warn(\"Couldn't find Flow for LLDP or ARP packet on endpoint: Switch {}, port {}, vlan {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0f38851ba9d7e586ddf1d0047504d7bd9c801e"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzY3NjM0OnYy", "diffSide": "RIGHT", "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyODoyN1rOFsvBcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyODoyN1rOFsvBcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MjA4MA==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3144#discussion_r382452080", "createdAt": "2020-02-21T08:28:27Z", "author": {"login": "dpoltavets"}, "path": "src-java/connecteddevices-topology/connecteddevices-storm-topology/src/main/java/org/openkilda/wfm/topology/connecteddevices/service/PacketService.java", "diffHunk": "@@ -301,14 +342,14 @@ private Flow getFlowBySwitchIdInPortAndOutVlan(SwitchId switchId, int inPort, in\n             if (fullPortFlow.isPresent()) {\n                 return fullPortFlow.get();\n             } else {\n-                log.warn(\"Couldn't find Flow for LLDP packet by: Switch {}, InPort {}, OutVlan {}\",\n+                log.warn(\"Couldn't find Flow for LLDP or ARP packet by: Switch {}, InPort {}, OutVlan {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0f38851ba9d7e586ddf1d0047504d7bd9c801e"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2092, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}