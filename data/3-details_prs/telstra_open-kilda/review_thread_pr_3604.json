{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MzIxNjg5", "number": 3604, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowNjowMVrOEMZjxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDozMzowOVrOEQ_QvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDM3MTI3OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/DiscoveryBfdMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowNjowMVrOGue_ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowNjowMVrOGue_ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NTUyMw==", "bodyText": "I think it can be replaced by\nreturn discoveryData.stream().allMatch(IslEndpointBfdStatus::isEnabled);", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r451395523", "createdAt": "2020-07-08T09:06:01Z", "author": {"login": "niksv"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/DiscoveryBfdMonitor.java", "diffHunk": "@@ -88,4 +88,19 @@ public void actualUpdate(IslFsmEvent event, IslFsmContext context) {\n     public void actualFlush(Endpoint endpoint, Isl persistentView) {\n         // there is no BFD related fields in ISL\n     }\n+\n+    /**\n+     * Returns true if BFD is enabled, otherwise returns false.\n+     */\n+    public boolean bfdIsEnabled() {\n+        boolean isEnabled = true;\n+\n+        for (Iterator<IslEndpointBfdStatus> it = discoveryData.stream().iterator(); it.hasNext(); ) {\n+            IslEndpointBfdStatus entry = it.next();\n+\n+            isEnabled &= entry.isEnabled();\n+        }\n+\n+        return isEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzMxNDM4OnYy", "diffSide": "RIGHT", "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoxMzoyM1rOGv1BVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNDo0M1rOGxSvRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwNDk1MA==", "bodyText": "Terrible naming. Guest meaning of discovery.timeout and discovery.failed.interval... For discovery.timeout you have at least hint in the comment above. Need more clear way (can't suggest any, because do not understand the meaning of this option now).\nSame issue with discovery.bfd.active.interval.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452804950", "createdAt": "2020-07-10T12:13:23Z", "author": {"login": "surabujin"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -80,6 +80,8 @@ logger.level = INFO\n # - discovery.keep.removed.isl - how long should we store/remember in minutes isl endpoints.\n #   it is mainly used for defining whether isl is moved or not\n discovery.interval = {{ getv \"/kilda_discovery_interval\" }}\n+discovery.failed.interval = {{ getv \"/kilda_discovery_failed_interval\" }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDQyMQ==", "bodyText": "Names have been changed and description has been added", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454340421", "createdAt": "2020-07-14T13:04:43Z", "author": {"login": "dpoltavets"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -80,6 +80,8 @@ logger.level = INFO\n # - discovery.keep.removed.isl - how long should we store/remember in minutes isl endpoints.\n #   it is mainly used for defining whether isl is moved or not\n discovery.interval = {{ getv \"/kilda_discovery_interval\" }}\n+discovery.failed.interval = {{ getv \"/kilda_discovery_failed_interval\" }}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwNDk1MA=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzMyODg4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/DiscoveryBfdMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoxODoxN1rOGv1Juw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNDo1MFrOGxSvkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwNzA5OQ==", "bodyText": "em... is the evaluateStatus do the same? You can call it from here and \"resolve\" Optional to make the simple boolean results.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452807099", "createdAt": "2020-07-10T12:18:17Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/DiscoveryBfdMonitor.java", "diffHunk": "@@ -88,4 +88,19 @@ public void actualUpdate(IslFsmEvent event, IslFsmContext context) {\n     public void actualFlush(Endpoint endpoint, Isl persistentView) {\n         // there is no BFD related fields in ISL\n     }\n+\n+    /**\n+     * Returns true if BFD is enabled, otherwise returns false.\n+     */\n+    public boolean bfdIsEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDQ5Ng==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454340496", "createdAt": "2020-07-14T13:04:50Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/DiscoveryBfdMonitor.java", "diffHunk": "@@ -88,4 +88,19 @@ public void actualUpdate(IslFsmEvent event, IslFsmContext context) {\n     public void actualFlush(Endpoint endpoint, Isl persistentView) {\n         // there is no BFD related fields in ISL\n     }\n+\n+    /**\n+     * Returns true if BFD is enabled, otherwise returns false.\n+     */\n+    public boolean bfdIsEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwNzA5OQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzM0MjA5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyMjo0NlrOGv1RiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNTowMVrOGxSwAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwOTA5Nw==", "bodyText": "...\nmake a \"dedicated\" field for DiscoveryBfdMonitor into IslFsm. Put DiscoveryBfdMonitor instance into monitorsByPriority and int this dedicatedfield (same instance i.e. you will have only one instance of DiscoveryBfdMonitor). So you will have a clear obvious way to operate with DiscoveryBfdMonitor from any point in code.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452809097", "createdAt": "2020-07-10T12:22:46Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -153,19 +157,31 @@ public void operationalEnter(IslFsmState from, IslFsmState to, IslFsmEvent event\n \n     public void operationalExit(IslFsmState from, IslFsmState to, IslFsmEvent event, IslFsmContext context) {\n         bfdManager.disable(context.getOutput());\n+        bfdSlowDiscoveryManager.disable(context.getOutput());\n     }\n \n     public void updateMonitorsAction(IslFsmState from, IslFsmState to, IslFsmEvent event, IslFsmContext context) {\n         boolean isSyncRequired = false;\n+        boolean bfdIsEnabled = false;\n         for (DiscoveryMonitor<?> entry : monitorsByPriority) {\n             isSyncRequired |= entry.update(event, context);\n+\n+            if (entry instanceof DiscoveryBfdMonitor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDYwOA==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454340608", "createdAt": "2020-07-14T13:05:01Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -153,19 +157,31 @@ public void operationalEnter(IslFsmState from, IslFsmState to, IslFsmEvent event\n \n     public void operationalExit(IslFsmState from, IslFsmState to, IslFsmEvent event, IslFsmContext context) {\n         bfdManager.disable(context.getOutput());\n+        bfdSlowDiscoveryManager.disable(context.getOutput());\n     }\n \n     public void updateMonitorsAction(IslFsmState from, IslFsmState to, IslFsmEvent event, IslFsmContext context) {\n         boolean isSyncRequired = false;\n+        boolean bfdIsEnabled = false;\n         for (DiscoveryMonitor<?> entry : monitorsByPriority) {\n             isSyncRequired |= entry.update(event, context);\n+\n+            if (entry instanceof DiscoveryBfdMonitor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwOTA5Nw=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzM1NDg0OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNjo1OVrOGv1ZVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNTowOVrOGxSwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTA5NQ==", "bodyText": "You produce a lot of bfdSlowDiscoveryManager.enable notifications now. This is not critical, but not optimal... also it can cause unexpected race conditions on the consumer side. If this code will be placed inside } else if (isSyncRequired) { - it will solve this issue (one more check will be required inside usableEnter to cover all possible scenarios).", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452811095", "createdAt": "2020-07-10T12:26:59Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -153,19 +157,31 @@ public void operationalEnter(IslFsmState from, IslFsmState to, IslFsmEvent event\n \n     public void operationalExit(IslFsmState from, IslFsmState to, IslFsmEvent event, IslFsmContext context) {\n         bfdManager.disable(context.getOutput());\n+        bfdSlowDiscoveryManager.disable(context.getOutput());\n     }\n \n     public void updateMonitorsAction(IslFsmState from, IslFsmState to, IslFsmEvent event, IslFsmContext context) {\n         boolean isSyncRequired = false;\n+        boolean bfdIsEnabled = false;\n         for (DiscoveryMonitor<?> entry : monitorsByPriority) {\n             isSyncRequired |= entry.update(event, context);\n+\n+            if (entry instanceof DiscoveryBfdMonitor) {\n+                bfdIsEnabled = ((DiscoveryBfdMonitor) entry).bfdIsEnabled();\n+            }\n         }\n \n         if (evaluateStatus()) {\n             fireBecomeStateEvent(context);\n         } else if (isSyncRequired) {\n             fire(IslFsmEvent._FLUSH);\n         }\n+\n+        if (bfdIsEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDY5OQ==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454340699", "createdAt": "2020-07-14T13:05:09Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -153,19 +157,31 @@ public void operationalEnter(IslFsmState from, IslFsmState to, IslFsmEvent event\n \n     public void operationalExit(IslFsmState from, IslFsmState to, IslFsmEvent event, IslFsmContext context) {\n         bfdManager.disable(context.getOutput());\n+        bfdSlowDiscoveryManager.disable(context.getOutput());\n     }\n \n     public void updateMonitorsAction(IslFsmState from, IslFsmState to, IslFsmEvent event, IslFsmContext context) {\n         boolean isSyncRequired = false;\n+        boolean bfdIsEnabled = false;\n         for (DiscoveryMonitor<?> entry : monitorsByPriority) {\n             isSyncRequired |= entry.update(event, context);\n+\n+            if (entry instanceof DiscoveryBfdMonitor) {\n+                bfdIsEnabled = ((DiscoveryBfdMonitor) entry).bfdIsEnabled();\n+            }\n         }\n \n         if (evaluateStatus()) {\n             fireBecomeStateEvent(context);\n         } else if (isSyncRequired) {\n             fire(IslFsmEvent._FLUSH);\n         }\n+\n+        if (bfdIsEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTA5NQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzM5OTMwOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IIslCarrier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0MTozOFrOGv10RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNToxOFrOGxSw1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNzk4OA==", "bodyText": "Why for you make strict connection relation between BFD and \"slowDiscovery\" (still bad name... this is not whole discovery, this is only one kind of discovery... we already use term 'poll' or 'discovery poll' for this packet out/in process so we should try to reuse this term here) mode? You are switching poll` mode. Yes you use BFD status as a trigger for this switch, but there is no any other connections between these processes. Perhaps there will be more tirggers or we will change it from BFD to some other.\nI am trying to say - you need a name for new poll mode. And based on this name you can build API that manages this mode.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452817988", "createdAt": "2020-07-10T12:41:38Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IIslCarrier.java", "diffHunk": "@@ -32,4 +32,8 @@\n     void islDefaultRulesInstall(Endpoint source, Endpoint destination);\n \n     void islDefaultRulesDelete(Endpoint source, Endpoint destination);\n+\n+    void bfdSlowDiscoveryEnableRequest(Endpoint endpoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDgyMQ==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454340821", "createdAt": "2020-07-14T13:05:18Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IIslCarrier.java", "diffHunk": "@@ -32,4 +32,8 @@\n     void islDefaultRulesInstall(Endpoint source, Endpoint destination);\n \n     void islDefaultRulesDelete(Endpoint source, Endpoint destination);\n+\n+    void bfdSlowDiscoveryEnableRequest(Endpoint endpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNzk4OA=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQwNTgwOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IUniIslCarrier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0MzozNFrOGv14Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNToyN1rOGxSxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxODk1NQ==", "bodyText": "One more time - not discovery - discoveryPoll or simple poll or some other name for this mode, that includes term 'poll'.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452818955", "createdAt": "2020-07-10T12:43:34Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IUniIslCarrier.java", "diffHunk": "@@ -36,4 +36,8 @@ void notifyIslUp(Endpoint endpoint, IslReference reference,\n     void notifyIslRoundTripStatus(IslReference reference, RoundTripStatus roundTripStatus);\n \n     void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus status);\n+\n+    void slowDiscoveryEnableRequest(Endpoint endpoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDg5OQ==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454340899", "createdAt": "2020-07-14T13:05:27Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IUniIslCarrier.java", "diffHunk": "@@ -36,4 +36,8 @@ void notifyIslUp(Endpoint endpoint, IslReference reference,\n     void notifyIslRoundTripStatus(IslReference reference, RoundTripStatus roundTripStatus);\n \n     void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus status);\n+\n+    void slowDiscoveryEnableRequest(Endpoint endpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxODk1NQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQzNjM0OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo1Mjo1NlrOGv2KpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNTozNlrOGxSxfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMzcxNg==", "bodyText": "else if ?", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452823716", "createdAt": "2020-07-10T12:52:56Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -140,6 +146,9 @@ private void handleDiscoveryFail(Endpoint endpoint, IslDownReason downReason) {\n         if (isIslReferenceUsable(reference)) {\n             carrier.notifyIslDown(endpoint, reference, downReason);\n         }\n+        if (reference.isIncomplete()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDk4OQ==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454340989", "createdAt": "2020-07-14T13:05:36Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -140,6 +146,9 @@ private void handleDiscoveryFail(Endpoint endpoint, IslDownReason downReason) {\n         if (isIslReferenceUsable(reference)) {\n             carrier.notifyIslDown(endpoint, reference, downReason);\n         }\n+        if (reference.isIncomplete()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMzcxNg=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ1MzkzOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo1ODoxNlrOGv2VdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNjoxNFrOGxSzCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyNjQ4NA==", "bodyText": "I would like to have one object that represents each UnitIsl entry. Up till now, the IslReference was enough, but now you need to create some object to store IslRefence and this \"poll-mode-state\".", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452826484", "createdAt": "2020-07-10T12:58:16Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -32,6 +32,7 @@\n @Slf4j\n public class NetworkUniIslService {\n     private final Map<Endpoint, IslReference> endpointData = new HashMap<>();\n+    private final Map<Endpoint, Boolean> slowDiscoveryEnabled = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MTM4Nw==", "bodyText": "This map has been removed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454341387", "createdAt": "2020-07-14T13:06:14Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -32,6 +32,7 @@\n @Slf4j\n public class NetworkUniIslService {\n     private final Map<Endpoint, IslReference> endpointData = new HashMap<>();\n+    private final Map<Endpoint, Boolean> slowDiscoveryEnabled = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyNjQ4NA=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ2Njk4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzowMjowN1rOGv2dbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNjozM1rOGxSz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyODUyNA==", "bodyText": "You don't need it here... here is a \"normal\" not fist discovery poll notification proxied into ISL. You need to produce such mode switching only on \"isl\" changes... i.e. somewhere below line 87 endpointData.put(endpoint, effectiveReference);.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452828524", "createdAt": "2020-07-10T13:02:07Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -66,6 +68,7 @@ public void uniIslDiscovery(Endpoint endpoint, IslInfoData speakerDiscoveryEvent\n         IslDataHolder islData = new IslDataHolder(speakerDiscoveryEvent);\n         if (reference.equals(effectiveReference)) {\n             carrier.notifyIslUp(endpoint, reference, islData);\n+            sendSlowDiscoveryDisableRequest(endpoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MTU4NQ==", "bodyText": "Removed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454341585", "createdAt": "2020-07-14T13:06:33Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -66,6 +68,7 @@ public void uniIslDiscovery(Endpoint endpoint, IslInfoData speakerDiscoveryEvent\n         IslDataHolder islData = new IslDataHolder(speakerDiscoveryEvent);\n         if (reference.equals(effectiveReference)) {\n             carrier.notifyIslUp(endpoint, reference, islData);\n+            sendSlowDiscoveryDisableRequest(endpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyODUyNA=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ3OTIzOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzowNTo0NVrOGv2k1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNjo1NlrOGxS0zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMDQyMw==", "bodyText": "... why direct set, not via sendSlowDiscoveryDisableRequest(endpoint) wrapper?", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r452830423", "createdAt": "2020-07-10T13:05:45Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -77,10 +80,12 @@ public void uniIslDiscovery(Endpoint endpoint, IslInfoData speakerDiscoveryEvent\n \n         if (!effectiveReference.isSelfLoop()) {\n             carrier.notifyIslUp(endpoint, effectiveReference, islData);\n+            sendSlowDiscoveryDisableRequest(endpoint);\n         } else {\n             log.error(\"Self looped ISL discovery received: {}\", effectiveReference);\n         }\n         endpointData.put(endpoint, effectiveReference);\n+        slowDiscoveryEnabled.putIfAbsent(endpoint, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MTgzOA==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454341838", "createdAt": "2020-07-14T13:06:56Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -77,10 +80,12 @@ public void uniIslDiscovery(Endpoint endpoint, IslInfoData speakerDiscoveryEvent\n \n         if (!effectiveReference.isSelfLoop()) {\n             carrier.notifyIslUp(endpoint, effectiveReference, islData);\n+            sendSlowDiscoveryDisableRequest(endpoint);\n         } else {\n             log.error(\"Self looped ISL discovery received: {}\", effectiveReference);\n         }\n         endpointData.put(endpoint, effectiveReference);\n+        slowDiscoveryEnabled.putIfAbsent(endpoint, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMDQyMw=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODE2MDI0OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODozNDowMVrOGweZtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDozODozOVrOGyuITQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MjkzNQ==", "bodyText": "You must produce at leas \"info\" level log message informing about poll mode change for specific endpoint.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453482935", "createdAt": "2020-07-13T08:34:01Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,75 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery flag request.\n+     */\n+    public void updateSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MTk0Nw==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454341947", "createdAt": "2020-07-14T13:07:04Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,75 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery flag request.\n+     */\n+    public void updateSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MjkzNQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzNzc3Mw==", "bodyText": "Be more specific - log.info(\"Discovery poll mode for endpoint {} update - slow mode requested({}), endpoint, context)...", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455837773", "createdAt": "2020-07-16T14:38:39Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,75 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery flag request.\n+     */\n+    public void updateSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MjkzNQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODE2MTYyOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODozNDoxOVrOGweafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNzoxMFrOGxS1dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MzEzNA==", "bodyText": "Same issue with logs here.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453483134", "createdAt": "2020-07-13T08:34:19Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,75 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery flag request.\n+     */\n+    public void updateSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowDiscoveryEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateBfdSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} for BFD enabled case request for {}\",\n+                isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MjAwNg==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454342006", "createdAt": "2020-07-14T13:07:10Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,75 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery flag request.\n+     */\n+    public void updateSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowDiscoveryEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateBfdSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} for BFD enabled case request for {}\",\n+                isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MzEzNA=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODE2MjkxOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODozNDozOVrOGwebQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowOTo1MFrOGxS77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MzMyOA==", "bodyText": "Is true here means that \"slow-poll-discovery-mode\" is activated or deactivated? Why we are forcing new discovery requests to emit here? And why it is done for all inflight requests? I.e. you are forsing new discovery requests for all endpoints, not only endpoint mentioned into this update.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453483328", "createdAt": "2020-07-13T08:34:39Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,75 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery flag request.\n+     */\n+    public void updateSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowDiscoveryEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateBfdSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} for BFD enabled case request for {}\",\n+                isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().bfdSlowDiscoveryEnabled(isEnabled).build());\n+\n+        if (!isEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MzY2Mg==", "bodyText": "Added comment. This is used to restart discovery using default interval value when BFD is turned off.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454343662", "createdAt": "2020-07-14T13:09:50Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,75 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery flag request.\n+     */\n+    public void updateSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowDiscoveryEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateBfdSlowDiscoveryFlag(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.debug(\"Watch-list service receive update slow discovery flag to {} for BFD enabled case request for {}\",\n+                isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().bfdSlowDiscoveryEnabled(isEnabled).build());\n+\n+        if (!isEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MzMyOA=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODIzNDIyOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/BfdSlowDiscoveryManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1MDo1OFrOGwfEyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMToxOFrOGxS_cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5Mzk2Mw==", "bodyText": "BfdManager utility was created as an attempt to not include into IslFsm \"generic\" method used from the service layer. There is 2 point where we need to manage BFD state - the first is IslFsm and the second is NetworkIslService. So need to add bfd management methods inside IslFsm (bad from FSM point of view) or make some other ... tool. That how BfdManager apper.\nThere is no any reason to make BfdSlowDiscoveryManager. So you should merge it inside BfdManager or perform corresponding discovery-poll-mode change request from IslFsm.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453493963", "createdAt": "2020-07-13T08:50:58Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/BfdSlowDiscoveryManager.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.network.storm.bolt.isl;\n+\n+import org.openkilda.wfm.share.model.IslReference;\n+import org.openkilda.wfm.topology.network.service.IIslCarrier;\n+\n+public class BfdSlowDiscoveryManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NDU2MQ==", "bodyText": "It has been merged with BfdManager", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454344561", "createdAt": "2020-07-14T13:11:18Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/BfdSlowDiscoveryManager.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.network.storm.bolt.isl;\n+\n+import org.openkilda.wfm.share.model.IslReference;\n+import org.openkilda.wfm.topology.network.service.IIslCarrier;\n+\n+public class BfdSlowDiscoveryManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5Mzk2Mw=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI0NDgwOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/BfdSlowDiscoveryManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1Mzo0MlrOGwfLUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMTo1NlrOGxTBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTYzNQ==", "bodyText": "em... bad/unexpected place to filter requests... sender and consumer do not know anything about it. The most correct solution - the consumer must be ready to repeated requests.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453495635", "createdAt": "2020-07-13T08:53:42Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/BfdSlowDiscoveryManager.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.network.storm.bolt.isl;\n+\n+import org.openkilda.wfm.share.model.IslReference;\n+import org.openkilda.wfm.topology.network.service.IIslCarrier;\n+\n+public class BfdSlowDiscoveryManager {\n+    private final IslReference reference;\n+\n+    private boolean lastCommandIsEnable;\n+\n+    public BfdSlowDiscoveryManager(IslReference reference) {\n+        this.reference = reference;\n+    }\n+\n+    /**\n+     * Send enable slow discovery request in case when BFD becomes active.\n+     */\n+    public void enable(IIslCarrier carrier) {\n+        if (!lastCommandIsEnable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NDk2NA==", "bodyText": "This filter has been removed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454344964", "createdAt": "2020-07-14T13:11:56Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/BfdSlowDiscoveryManager.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.network.storm.bolt.isl;\n+\n+import org.openkilda.wfm.share.model.IslReference;\n+import org.openkilda.wfm.topology.network.service.IIslCarrier;\n+\n+public class BfdSlowDiscoveryManager {\n+    private final IslReference reference;\n+\n+    private boolean lastCommandIsEnable;\n+\n+    public BfdSlowDiscoveryManager(IslReference reference) {\n+        this.reference = reference;\n+    }\n+\n+    /**\n+     * Send enable slow discovery request in case when BFD becomes active.\n+     */\n+    public void enable(IIslCarrier carrier) {\n+        if (!lastCommandIsEnable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTYzNQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI1MTg0OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1NToyNlrOGwfPng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMjowNlrOGxTBXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NjczNA==", "bodyText": "use '-' insdead ot '.'... The '.' is used for common suffixes - '.encoder', '.decoder' etc and ... only into spout/bolt names, not stream names.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453496734", "createdAt": "2020-07-13T08:55:26Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -75,6 +78,10 @@\n     public static final Fields STREAM_SPEAKER_RULES_FIELDS = new Fields(\n             KafkaEncoder.FIELD_ID_KEY, FIELD_ID_COMMAND, FIELD_ID_CONTEXT);\n \n+    public static final String STREAM_WATCH_LIST_ID = \"watch.list\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTA1NA==", "bodyText": "Renamed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454345054", "createdAt": "2020-07-14T13:12:06Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -75,6 +78,10 @@\n     public static final Fields STREAM_SPEAKER_RULES_FIELDS = new Fields(\n             KafkaEncoder.FIELD_ID_KEY, FIELD_ID_COMMAND, FIELD_ID_CONTEXT);\n \n+    public static final String STREAM_WATCH_LIST_ID = \"watch.list\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NjczNA=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI2NzkxOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1OToxOFrOGwfZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMjozMFrOGxTCVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5OTE4OQ==", "bodyText": "Perhaps we can have enabled/disabled as an argument?", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453499189", "createdAt": "2020-07-13T08:59:18Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -164,6 +172,16 @@ public void islDefaultRulesDelete(Endpoint source, Endpoint destination) {\n                 new SpeakerRulesIslRemoveCommand(keyFactory.next(), source, destination)));\n     }\n \n+    @Override\n+    public void bfdSlowDiscoveryEnableRequest(Endpoint endpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTMwMg==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454345302", "createdAt": "2020-07-14T13:12:30Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -164,6 +172,16 @@ public void islDefaultRulesDelete(Endpoint source, Endpoint destination) {\n                 new SpeakerRulesIslRemoveCommand(keyFactory.next(), source, destination)));\n     }\n \n+    @Override\n+    public void bfdSlowDiscoveryEnableRequest(Endpoint endpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5OTE4OQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI4MjgyOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowMjoyMFrOGwfhuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMjozOVrOGxTCuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMTM2OQ==", "bodyText": "... incorrect pattern usage. The makeSomethingTuple provide API to format tuple for specific stream. These methods are responsible for correct fields ordering and correct value types into produced tuples.\nYou don't have a \"watcher-list-bfd-slow-dicovery\" stream.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453501369", "createdAt": "2020-07-13T09:02:20Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -182,6 +200,11 @@ private Values makeStatusUpdateTuple(IslStatusUpdateNotification payload) {\n         return new Values(null, payload, getCommandContext());\n     }\n \n+    private Values makeWatchListBfdSlowDiscoveryTuple(Endpoint endpoint, boolean enableSlowDiscovery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTQwMw==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454345403", "createdAt": "2020-07-14T13:12:39Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -182,6 +200,11 @@ private Values makeStatusUpdateTuple(IslStatusUpdateNotification payload) {\n         return new Values(null, payload, getCommandContext());\n     }\n \n+    private Values makeWatchListBfdSlowDiscoveryTuple(Endpoint endpoint, boolean enableSlowDiscovery) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMTM2OQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI4NTY4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowMjo1OFrOGwfjVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMjo0OVrOGxTDEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMTc4Mw==", "bodyText": "same about '.' usage", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453501783", "createdAt": "2020-07-13T09:02:58Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "diffHunk": "@@ -51,9 +53,15 @@\n     public static final String FIELD_ID_ISL_SOURCE = SpeakerRouter.FIELD_ID_ISL_SOURCE;\n     public static final String FIELD_ID_ISL_DEST = SpeakerRouter.FIELD_ID_ISL_DEST;\n     public static final String FIELD_ID_COMMAND = SpeakerRouter.FIELD_ID_COMMAND;\n+    public static final String FIELD_ID_DATAPATH = PortHandler.FIELD_ID_DATAPATH;\n+    public static final String FIELD_ID_PORT_NUMBER = PortHandler.FIELD_ID_PORT_NUMBER;\n \n     public static final Fields STREAM_FIELDS = SpeakerRouter.STREAM_ISL_FIELDS;\n \n+    public static final String STREAM_WATCH_LIST_ID = \"watch.list\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTQ5MQ==", "bodyText": "Renamed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454345491", "createdAt": "2020-07-14T13:12:49Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "diffHunk": "@@ -51,9 +53,15 @@\n     public static final String FIELD_ID_ISL_SOURCE = SpeakerRouter.FIELD_ID_ISL_SOURCE;\n     public static final String FIELD_ID_ISL_DEST = SpeakerRouter.FIELD_ID_ISL_DEST;\n     public static final String FIELD_ID_COMMAND = SpeakerRouter.FIELD_ID_COMMAND;\n+    public static final String FIELD_ID_DATAPATH = PortHandler.FIELD_ID_DATAPATH;\n+    public static final String FIELD_ID_PORT_NUMBER = PortHandler.FIELD_ID_PORT_NUMBER;\n \n     public static final Fields STREAM_FIELDS = SpeakerRouter.STREAM_ISL_FIELDS;\n \n+    public static final String STREAM_WATCH_LIST_ID = \"watch.list\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMTc4Mw=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI4Nzg5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowMzoyOFrOGwfknw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMjo1NVrOGxTDWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMjExMQ==", "bodyText": "Same about streams.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453502111", "createdAt": "2020-07-13T09:03:28Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "diffHunk": "@@ -122,11 +130,26 @@ public void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus\n         emit(getCurrentTuple(), makeDefaultTuple(new IslBfdStatusUpdateCommand(endpoint, reference, status)));\n     }\n \n+    @Override\n+    public void slowDiscoveryEnableRequest(Endpoint endpoint) {\n+        emit(STREAM_WATCH_LIST_ID, getCurrentTuple(), makeWatchListSlowDiscoveryTuple(endpoint, true));\n+    }\n+\n+    @Override\n+    public void slowDiscoveryDisableRequest(Endpoint endpoint) {\n+        emit(STREAM_WATCH_LIST_ID, getCurrentTuple(), makeWatchListSlowDiscoveryTuple(endpoint, false));\n+    }\n+\n     private Values makeDefaultTuple(IslCommand command) {\n         IslReference reference = command.getReference();\n         return new Values(reference.getSource(), reference.getDest(), command, getCommandContext());\n     }\n \n+    private Values makeWatchListSlowDiscoveryTuple(Endpoint endpoint, boolean enableSlowDiscovery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTU2MQ==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454345561", "createdAt": "2020-07-14T13:12:55Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "diffHunk": "@@ -122,11 +130,26 @@ public void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus\n         emit(getCurrentTuple(), makeDefaultTuple(new IslBfdStatusUpdateCommand(endpoint, reference, status)));\n     }\n \n+    @Override\n+    public void slowDiscoveryEnableRequest(Endpoint endpoint) {\n+        emit(STREAM_WATCH_LIST_ID, getCurrentTuple(), makeWatchListSlowDiscoveryTuple(endpoint, true));\n+    }\n+\n+    @Override\n+    public void slowDiscoveryDisableRequest(Endpoint endpoint) {\n+        emit(STREAM_WATCH_LIST_ID, getCurrentTuple(), makeWatchListSlowDiscoveryTuple(endpoint, false));\n+    }\n+\n     private Values makeDefaultTuple(IslCommand command) {\n         IslReference reference = command.getReference();\n         return new Values(reference.getSource(), reference.getDest(), command, getCommandContext());\n     }\n \n+    private Values makeWatchListSlowDiscoveryTuple(Endpoint endpoint, boolean enableSlowDiscovery) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMjExMQ=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI5NjA4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowNToyN1rOGwfpXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMzowNFrOGxTDww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMzMyNA==", "bodyText": "Same question about enabled/disabled argument.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r453503324", "createdAt": "2020-07-13T09:05:27Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "diffHunk": "@@ -122,11 +130,26 @@ public void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus\n         emit(getCurrentTuple(), makeDefaultTuple(new IslBfdStatusUpdateCommand(endpoint, reference, status)));\n     }\n \n+    @Override\n+    public void slowDiscoveryEnableRequest(Endpoint endpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTY2Nw==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r454345667", "createdAt": "2020-07-14T13:13:04Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "diffHunk": "@@ -122,11 +130,26 @@ public void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus\n         emit(getCurrentTuple(), makeDefaultTuple(new IslBfdStatusUpdateCommand(endpoint, reference, status)));\n     }\n \n+    @Override\n+    public void slowDiscoveryEnableRequest(Endpoint endpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMzMyNA=="}, "originalCommit": {"oid": "b2eb2746c9ee06246b320884bc2a1673b3787f7f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzIwMTAwOnYy", "diffSide": "RIGHT", "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoxMTo0MFrOGys3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxMDoxNVrOGzQjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNjk5MA==", "bodyText": "I propose the following poll mode names:\n\ngeneric - current discovery mode (minimal delay)\nexhausted - (no discovery response for N requests)\nauxiliary - (link health provided by some other than discovery poll mechanism)\n\nThe problem with slow and unhurried terms - they both define relative time units, but you can't guess which one of them is bigger. Because we must not make any promises about which one of these delays must be bigger, we should avoid any time unit (especially relative) in mode names.\nPS This is just a proposition.\nPSS There are no \"ticks\" into network topology now. Now it is used time-based units everywhere.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455816990", "createdAt": "2020-07-16T14:11:40Z", "author": {"login": "surabujin"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -72,6 +72,10 @@ logger.level = INFO\n #######\n # Discovery\n # - discovery.interval = how many bolt ticks(1 tick per second) between ISL discovery / health checks, starts from 0\n+# - discovery.slow.poll.interval = how many ticks (1 tick per second) between sending a discovery packet in case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMTcwMQ==", "bodyText": "I like your proposal. Names have been fixed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456401701", "createdAt": "2020-07-17T12:10:15Z", "author": {"login": "dpoltavets"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -72,6 +72,10 @@ logger.level = INFO\n #######\n # Discovery\n # - discovery.interval = how many bolt ticks(1 tick per second) between ISL discovery / health checks, starts from 0\n+# - discovery.slow.poll.interval = how many ticks (1 tick per second) between sending a discovery packet in case", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNjk5MA=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzI0MjI4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoyMDoyMVrOGytQeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxMDoyM1rOGzQjYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyMzQ4MA==", "bodyText": "bfd monitor ... bfd is enabled... too many \"bfd\", as for me. isEnabled() ... no isOperational() should be enoug.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455823480", "createdAt": "2020-07-16T14:20:21Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -165,6 +169,10 @@ public void updateMonitorsAction(IslFsmState from, IslFsmState to, IslFsmEvent e\n             fireBecomeStateEvent(context);\n         } else if (isSyncRequired) {\n             fire(IslFsmEvent._FLUSH);\n+\n+            if (discoveryBfdMonitor.bfdIsEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMTc2MA==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456401760", "createdAt": "2020-07-17T12:10:23Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -165,6 +169,10 @@ public void updateMonitorsAction(IslFsmState from, IslFsmState to, IslFsmEvent e\n             fireBecomeStateEvent(context);\n         } else if (isSyncRequired) {\n             fire(IslFsmEvent._FLUSH);\n+\n+            if (discoveryBfdMonitor.bfdIsEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyMzQ4MA=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzI1MDkxOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoyMjoxNlrOGytVug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxMDo0NlrOGzQj6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyNDgyNg==", "bodyText": "No... the idea here is to reset internal monitor state (ISL can reenter operational state), so you must not use any global monitor instances, you must create all of them here.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455824826", "createdAt": "2020-07-16T14:22:16Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -135,7 +138,7 @@ public void operationalEnter(IslFsmState from, IslFsmState to, IslFsmEvent event\n         monitorsByPriority = ImmutableList.of(\n                 new DiscoveryMovedMonitor(reference),\n                 new DiscoveryPortStatusMonitor(reference),\n-                new DiscoveryBfdMonitor(reference),\n+                discoveryBfdMonitor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMTg5OA==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456401898", "createdAt": "2020-07-17T12:10:46Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -135,7 +138,7 @@ public void operationalEnter(IslFsmState from, IslFsmState to, IslFsmEvent event\n         monitorsByPriority = ImmutableList.of(\n                 new DiscoveryMovedMonitor(reference),\n                 new DiscoveryPortStatusMonitor(reference),\n-                new DiscoveryBfdMonitor(reference),\n+                discoveryBfdMonitor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyNDgyNg=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzI4MzA0OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkIslService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoyOToxNlrOGytpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxMTozM1rOGzQlRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyOTk0OQ==", "bodyText": "I have doubts regarding this call here - bfdManager.disable(carrier) will trigger BFD removal process and at the end, it will trigger bfdManager.disableUnhurriedPoll inside IslFsm in managed manner... This call here is a \"fire and forget\" approach... it should work in most cases, but in some cases, it can lead to extremely unexpected results.\nCan we try to not put it here?", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455829949", "createdAt": "2020-07-16T14:29:16Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkIslService.java", "diffHunk": "@@ -176,6 +176,7 @@ public void bfdEnableDisable(IslReference reference, IslBfdFlagUpdated payload)\n             bfdManager.enable(carrier);\n         } else {\n             bfdManager.disable(carrier);\n+            bfdManager.disableUnhurriedPoll(carrier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMjI0NQ==", "bodyText": "You are right. This call has been removed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456402245", "createdAt": "2020-07-17T12:11:33Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkIslService.java", "diffHunk": "@@ -176,6 +176,7 @@ public void bfdEnableDisable(IslReference reference, IslBfdFlagUpdated payload)\n             bfdManager.enable(carrier);\n         } else {\n             bfdManager.disable(carrier);\n+            bfdManager.disableUnhurriedPoll(carrier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyOTk0OQ=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzMwMzg2OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDozMjozNFrOGyt1qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxMzo1MFrOGzQpSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzMzAwMw==", "bodyText": "... is just one fail response enough to switch endpoint into \"slow\" poll mode? I thought there should be series of time window without response for this.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455833003", "createdAt": "2020-07-16T14:32:34Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -139,6 +140,8 @@ private void handleDiscoveryFail(Endpoint endpoint, IslDownReason downReason) {\n         IslReference reference = lookupEndpointData(endpoint);\n         if (isIslReferenceUsable(reference)) {\n             carrier.notifyIslDown(endpoint, reference, downReason);\n+        } else if (reference.isIncomplete()) {\n+            carrier.slowPollUpdateRequest(endpoint, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMzI3Mg==", "bodyText": "This is enough for our case (for ports not belonging to ISL). This has been tested and works as expected.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456403272", "createdAt": "2020-07-17T12:13:50Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkUniIslService.java", "diffHunk": "@@ -139,6 +140,8 @@ private void handleDiscoveryFail(Endpoint endpoint, IslDownReason downReason) {\n         IslReference reference = lookupEndpointData(endpoint);\n         if (isIslReferenceUsable(reference)) {\n             carrier.notifyIslDown(endpoint, reference, downReason);\n+        } else if (reference.isIncomplete()) {\n+            carrier.slowPollUpdateRequest(endpoint, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzMzAwMw=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzM3MDkwOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo0Njo0MFrOGyufPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxNDo1N1rOGzQrYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0MzY0NA==", "bodyText": "Perhaps we should stop doing anything if there is no such endpoint in our endpoints map?", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455843644", "createdAt": "2020-07-16T14:46:40Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,74 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateSlowPoll(Endpoint endpoint, boolean isEnabled) {\n+        log.info(\"Watch-list service receive update slow poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowPollEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateUnhurriedPoll(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.info(\"Watch-list service receive update unhurried poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMzgwOQ==", "bodyText": "Yes, we should not. Added additional check.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456403809", "createdAt": "2020-07-17T12:14:57Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,74 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateSlowPoll(Endpoint endpoint, boolean isEnabled) {\n+        log.info(\"Watch-list service receive update slow poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowPollEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateUnhurriedPoll(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.info(\"Watch-list service receive update unhurried poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0MzY0NA=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzM3NzQ0OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo0ODowMlrOGyujVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxMToyNFrOG0LjkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NDY5NA==", "bodyText": "define some method capable to calculate timeout from endpoint or EndpointContext instance.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455844694", "createdAt": "2020-07-16T14:48:02Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,74 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateSlowPoll(Endpoint endpoint, boolean isEnabled) {\n+        log.info(\"Watch-list service receive update slow poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowPollEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateUnhurriedPoll(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.info(\"Watch-list service receive update unhurried poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().unhurriedPollEnabled(isEnabled).build());\n+\n+        if (!isEnabled) { // when another mechanism used to determine ISL status is disabled\n+            for (Set<Endpoint> e : timeouts.values()) {\n+                e.remove(endpoint);\n+            }\n+\n+            carrier.discoveryRequest(endpoint, currentTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMzk2NQ==", "bodyText": "This method has been added.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456403965", "createdAt": "2020-07-17T12:15:17Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,74 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateSlowPoll(Endpoint endpoint, boolean isEnabled) {\n+        log.info(\"Watch-list service receive update slow poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowPollEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateUnhurriedPoll(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.info(\"Watch-list service receive update unhurried poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().unhurriedPollEnabled(isEnabled).build());\n+\n+        if (!isEnabled) { // when another mechanism used to determine ISL status is disabled\n+            for (Set<Endpoint> e : timeouts.values()) {\n+                e.remove(endpoint);\n+            }\n+\n+            carrier.discoveryRequest(endpoint, currentTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NDY5NA=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2ODQ2NQ==", "bodyText": "Why you are doing such timeout's reset during switch from auxiliary to generic mode, but don't do for exhausted to generic?", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457368465", "createdAt": "2020-07-20T13:11:24Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,74 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateSlowPoll(Endpoint endpoint, boolean isEnabled) {\n+        log.info(\"Watch-list service receive update slow poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowPollEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateUnhurriedPoll(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.info(\"Watch-list service receive update unhurried poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().unhurriedPollEnabled(isEnabled).build());\n+\n+        if (!isEnabled) { // when another mechanism used to determine ISL status is disabled\n+            for (Set<Endpoint> e : timeouts.values()) {\n+                e.remove(endpoint);\n+            }\n+\n+            carrier.discoveryRequest(endpoint, currentTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NDY5NA=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzM4NDQxOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo0OToyN1rOGyunew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxODoxNVrOGzQxGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NTc1NQ==", "bodyText": "Why we are not doing same actions on disabling \"slow\" mode?", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455845755", "createdAt": "2020-07-16T14:49:27Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,74 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateSlowPoll(Endpoint endpoint, boolean isEnabled) {\n+        log.info(\"Watch-list service receive update slow poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowPollEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateUnhurriedPoll(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.info(\"Watch-list service receive update unhurried poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().unhurriedPollEnabled(isEnabled).build());\n+\n+        if (!isEnabled) { // when another mechanism used to determine ISL status is disabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwNTI3Mg==", "bodyText": "This is not necessary for our case (for ports not belonging to ISL). If we need to use this mode for other cases, it is not difficult to fix it.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456405272", "createdAt": "2020-07-17T12:18:15Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,74 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateSlowPoll(Endpoint endpoint, boolean isEnabled) {\n+        log.info(\"Watch-list service receive update slow poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().slowPollEnabled(isEnabled).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateUnhurriedPoll(Endpoint endpoint, boolean isEnabled, long currentTime) {\n+        log.info(\"Watch-list service receive update unhurried poll flag to {} request for {}\", isEnabled, endpoint);\n+        endpoints.computeIfPresent(endpoint, (e, endpointContext) ->\n+                endpointContext.toBuilder().unhurriedPollEnabled(isEnabled).build());\n+\n+        if (!isEnabled) { // when another mechanism used to determine ISL status is disabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NTc1NQ=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzM5NDQ2OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1MTozMFrOGyutbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxODozNlrOGzQxsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NzI3Ng==", "bodyText": "(nip) As for me WatchListEntry is a more suitable name.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455847276", "createdAt": "2020-07-16T14:51:30Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -104,4 +162,20 @@ public void tick() {\n     private long now() {\n         return System.nanoTime();\n     }\n+\n+    private void addTimeouts(Set<Endpoint> renew, long key) {\n+        if (!renew.isEmpty()) {\n+            timeouts.computeIfAbsent(key, mappingFunction -> new HashSet<>())\n+                    .addAll(renew);\n+        }\n+    }\n+\n+    @Getter\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    @Builder(toBuilder = true)\n+    private static class EndpointContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwNTQyNQ==", "bodyText": "Renamed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456405425", "createdAt": "2020-07-17T12:18:36Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -104,4 +162,20 @@ public void tick() {\n     private long now() {\n         return System.nanoTime();\n     }\n+\n+    private void addTimeouts(Set<Endpoint> renew, long key) {\n+        if (!renew.isEmpty()) {\n+            timeouts.computeIfAbsent(key, mappingFunction -> new HashSet<>())\n+                    .addAll(renew);\n+        }\n+    }\n+\n+    @Getter\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    @Builder(toBuilder = true)\n+    private static class EndpointContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NzI3Ng=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzQxNTQ5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1NTo1MlrOGyu6jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxOTo1OVrOGzQ0JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MDYzOQ==", "bodyText": "Check for possible loops produced by this stream. Perhaps we must not tie it to getCurrentTuple().", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455850639", "createdAt": "2020-07-16T14:55:52Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -164,6 +172,12 @@ public void islDefaultRulesDelete(Endpoint source, Endpoint destination) {\n                 new SpeakerRulesIslRemoveCommand(keyFactory.next(), source, destination)));\n     }\n \n+    @Override\n+    public void unhurriedPollUpdateRequest(Endpoint endpoint, boolean enableUnhurriedPoll) {\n+        WatchListCommand command = new WatchListUnhurriedPollUpdateCommand(endpoint, enableUnhurriedPoll);\n+        emit(STREAM_POLL_ID, getCurrentTuple(), makePollTuple(command));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwNjA1Mg==", "bodyText": "This anchor has been removed in this place.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456406052", "createdAt": "2020-07-17T12:19:59Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -164,6 +172,12 @@ public void islDefaultRulesDelete(Endpoint source, Endpoint destination) {\n                 new SpeakerRulesIslRemoveCommand(keyFactory.next(), source, destination)));\n     }\n \n+    @Override\n+    public void unhurriedPollUpdateRequest(Endpoint endpoint, boolean enableUnhurriedPoll) {\n+        WatchListCommand command = new WatchListUnhurriedPollUpdateCommand(endpoint, enableUnhurriedPoll);\n+        emit(STREAM_POLL_ID, getCurrentTuple(), makePollTuple(command));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MDYzOQ=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzQxODExOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1NjoyNlrOGyu8Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoyMDowNVrOGzQ0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MTA0Nw==", "bodyText": "Same here, regarding loops.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r455851047", "createdAt": "2020-07-16T14:56:26Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "diffHunk": "@@ -122,11 +130,22 @@ public void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus\n         emit(getCurrentTuple(), makeDefaultTuple(new IslBfdStatusUpdateCommand(endpoint, reference, status)));\n     }\n \n+    @Override\n+    public void slowPollUpdateRequest(Endpoint endpoint, boolean enableSlowPoll) {\n+        WatchListCommand command = new WatchListSlowPollUpdateCommand(endpoint, enableSlowPoll);\n+        emit(STREAM_POLL_ID, getCurrentTuple(), makePollTuple(command));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwNjA5MQ==", "bodyText": "This anchor has been removed in this place.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r456406091", "createdAt": "2020-07-17T12:20:05Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/uniisl/UniIslHandler.java", "diffHunk": "@@ -122,11 +130,22 @@ public void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus\n         emit(getCurrentTuple(), makeDefaultTuple(new IslBfdStatusUpdateCommand(endpoint, reference, status)));\n     }\n \n+    @Override\n+    public void slowPollUpdateRequest(Endpoint endpoint, boolean enableSlowPoll) {\n+        WatchListCommand command = new WatchListSlowPollUpdateCommand(endpoint, enableSlowPoll);\n+        emit(STREAM_POLL_ID, getCurrentTuple(), makePollTuple(command));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MTA0Nw=="}, "originalCommit": {"oid": "785cc3fb673246d46793331531dfad310d2fb104"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzc0ODcyOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo0MDoxM1rOG0KJZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyMjoyOFrOG0rWIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NTM4MQ==", "bodyText": "It is definitely excess.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457345381", "createdAt": "2020-07-20T12:40:13Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -112,6 +113,8 @@ public IslFsm(Clock clock, PersistenceManager persistenceManager, NetworkTopolog\n         this.reference = reference;\n         this.bfdManager = bfdManager;\n \n+        this.discoveryBfdMonitor = new DiscoveryBfdMonitor(reference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4OTMxNA==", "bodyText": "Removed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457889314", "createdAt": "2020-07-21T07:22:28Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -112,6 +113,8 @@ public IslFsm(Clock clock, PersistenceManager persistenceManager, NetworkTopolog\n         this.reference = reference;\n         this.bfdManager = bfdManager;\n \n+        this.discoveryBfdMonitor = new DiscoveryBfdMonitor(reference);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NTM4MQ=="}, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzc3NjY5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo0NTowMFrOG0KYHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyNDowMVrOG0rZNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0OTE1MQ==", "bodyText": "I would like to make something like:\nboolean isBfdOperationalNow = discoveryBfdMonitor.isOperational():\n// ... update monitros status\nif (!isBfdOperationalNow && discoveryBfdMonitor.isOperational()) {  // on top level, not inside `isSyncrequired` branch\n    // emit swict poll mode request\n}\n\nThe current approarch will work too. But there are a lot of cases when monitors will want to sync it state into DB. And on each such event starting at the moment when BFD become operational you will produce poll mode change request. It is not bad, but it is excess and it is relatively easy way to avoid it.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457349151", "createdAt": "2020-07-20T12:45:00Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -165,6 +170,10 @@ public void updateMonitorsAction(IslFsmState from, IslFsmState to, IslFsmEvent e\n             fireBecomeStateEvent(context);\n         } else if (isSyncRequired) {\n             fire(IslFsmEvent._FLUSH);\n+\n+            if (discoveryBfdMonitor.isOperational()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MDEwMg==", "bodyText": "Good point. Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457890102", "createdAt": "2020-07-21T07:24:01Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -165,6 +170,10 @@ public void updateMonitorsAction(IslFsmState from, IslFsmState to, IslFsmEvent e\n             fireBecomeStateEvent(context);\n         } else if (isSyncRequired) {\n             fire(IslFsmEvent._FLUSH);\n+\n+            if (discoveryBfdMonitor.isOperational()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0OTE1MQ=="}, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzgxODI5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo1MzoxMVrOG0KwUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyNDozMFrOG0raEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NTM0Ng==", "bodyText": "Why it is here? updateMonitorsAction(...) should handle all cases. Is there any specific cases not covered there?", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457355346", "createdAt": "2020-07-20T12:53:11Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -225,6 +234,10 @@ public void usableEnter(IslFsmState from, IslFsmState to, IslFsmEvent event, Isl\n         flushTransaction();\n         sendBfdEnable(context.getOutput());\n \n+        if (discoveryBfdMonitor.isOperational()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MDMyMw==", "bodyText": "Removed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457890323", "createdAt": "2020-07-21T07:24:30Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -225,6 +234,10 @@ public void usableEnter(IslFsmState from, IslFsmState to, IslFsmEvent event, Isl\n         flushTransaction();\n         sendBfdEnable(context.getOutput());\n \n+        if (discoveryBfdMonitor.isOperational()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NTM0Ng=="}, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzgzMzAyOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IIslCarrier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo1NjowOFrOG0K4ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyNDozOVrOG0rabA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NzUwNw==", "bodyText": "may we call it auxiliaryPollModeUpdateRequest ? Because we change the poll mode, not poll itself.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457357507", "createdAt": "2020-07-20T12:56:08Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IIslCarrier.java", "diffHunk": "@@ -32,4 +32,6 @@\n     void islDefaultRulesInstall(Endpoint source, Endpoint destination);\n \n     void islDefaultRulesDelete(Endpoint source, Endpoint destination);\n+\n+    void auxiliaryPollUpdateRequest(Endpoint endpoint, boolean enableAuxiliaryPoll);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MDQxMg==", "bodyText": "Renamed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457890412", "createdAt": "2020-07-21T07:24:39Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IIslCarrier.java", "diffHunk": "@@ -32,4 +32,6 @@\n     void islDefaultRulesInstall(Endpoint source, Endpoint destination);\n \n     void islDefaultRulesDelete(Endpoint source, Endpoint destination);\n+\n+    void auxiliaryPollUpdateRequest(Endpoint endpoint, boolean enableAuxiliaryPoll);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NzUwNw=="}, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzgzNTg0OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IUniIslCarrier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo1Njo0MFrOG0K6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyNDo0M1rOG0rajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1Nzg5MQ==", "bodyText": "same here - it is poll mode.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457357891", "createdAt": "2020-07-20T12:56:40Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IUniIslCarrier.java", "diffHunk": "@@ -36,4 +36,6 @@ void notifyIslUp(Endpoint endpoint, IslReference reference,\n     void notifyIslRoundTripStatus(IslReference reference, RoundTripStatus roundTripStatus);\n \n     void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus status);\n+\n+    void exhaustedPollUpdateRequest(Endpoint endpoint, boolean enableExhaustedPoll);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MDQ0NQ==", "bodyText": "Renamed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457890445", "createdAt": "2020-07-21T07:24:43Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/IUniIslCarrier.java", "diffHunk": "@@ -36,4 +36,6 @@ void notifyIslUp(Endpoint endpoint, IslReference reference,\n     void notifyIslRoundTripStatus(IslReference reference, RoundTripStatus roundTripStatus);\n \n     void notifyBfdStatus(Endpoint endpoint, IslReference reference, BfdStatus status);\n+\n+    void exhaustedPollUpdateRequest(Endpoint endpoint, boolean enableExhaustedPoll);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1Nzg5MQ=="}, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzk1ODU5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoyMDo1NVrOG0MAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyNDo1NVrOG0ra-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NTg5Mw==", "bodyText": "You can reuse calculateTimeout() method here if you replace sets renewGeneric, renewExhausted and renewAuxiliary with map Map<Endpoint, WatchListEntry> renew. Benefits from here - single point of responsibility for delay calculation i.e. only calculateTimeout() will know how to do it and only it will need to be changed when the set of poll modes will be updated.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457375893", "createdAt": "2020-07-20T13:20:55Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,72 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateExhaustedPoll(Endpoint endpoint, boolean enable) {\n+        log.info(\"Discovery poll mode for endpoint {} update - exhausted mode requested (enable: '{}')\",\n+                endpoint, enable);\n+        endpoints.computeIfPresent(endpoint,\n+                (e, watchListEntry) -> watchListEntry.toBuilder().exhaustedPollEnabled(enable).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateAuxiliaryPoll(Endpoint endpoint, boolean enable, long currentTime) {\n+        log.info(\"Discovery poll mode for endpoint {} update - auxiliary mode requested (enable: '{}')\",\n+                endpoint, enable);\n+        WatchListEntry watchListEntry = endpoints.computeIfPresent(endpoint,\n+                (e, listEntry) -> listEntry.toBuilder().auxiliaryPollEnabled(enable).build());\n+\n+        if (watchListEntry != null && !enable) { // when another mechanism used to determine ISL status is disabled\n+            for (Set<Endpoint> e : timeouts.values()) {\n+                e.remove(endpoint);\n+            }\n+\n+            carrier.discoveryRequest(endpoint, currentTime);\n+            addTimeouts(Collections.singleton(endpoint), currentTime + calculateTimeout(endpoint));\n+        }\n+    }\n+\n+    /**\n+     * Handle update slow discovery flag request for BFD enabled case.\n+     */\n+    public void updateAuxiliaryPoll(Endpoint endpoint, boolean enable) {\n+        updateAuxiliaryPoll(endpoint, enable, now());\n+    }\n+\n     /**\n      * Consume timer tick.\n      */\n-    public void tick(long tickTime) {\n+    @VisibleForTesting\n+    void tick(long tickTime) {\n         SortedMap<Long, Set<Endpoint>> range = timeouts.subMap(0L, tickTime + 1);\n         if (!range.isEmpty()) {\n-            HashSet<Endpoint> renew = new HashSet<>();\n+            Set<Endpoint> renewGeneric = new HashSet<>();\n+            Set<Endpoint> renewExhausted = new HashSet<>();\n+            Set<Endpoint> renewAuxiliary = new HashSet<>();\n+\n             for (Set<Endpoint> e : range.values()) {\n                 for (Endpoint ee : e) {\n-                    if (endpoints.contains(ee)) {\n+                    WatchListEntry watchListEntry = endpoints.get(ee);\n+                    if (watchListEntry != null) {\n                         carrier.discoveryRequest(ee, tickTime);\n-                        renew.add(ee);\n+\n+                        if (watchListEntry.isAuxiliaryPollEnabled()) {\n+                            renewAuxiliary.add(ee);\n+                        } else if (watchListEntry.isExhaustedPollEnabled()) {\n+                            renewExhausted.add(ee);\n+                        } else {\n+                            renewGeneric.add(ee);\n+                        }\n                     }\n                 }\n             }\n             range.clear();\n-            if (!renew.isEmpty()) {\n-                long key = tickTime + tickPeriod;\n-                timeouts.computeIfAbsent(key, mappingFunction -> new HashSet<>())\n-                        .addAll(renew);\n-            }\n+\n+            addTimeouts(renewGeneric, tickTime + genericTickPeriod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MDU1Mw==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457890553", "createdAt": "2020-07-21T07:24:55Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +84,72 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    /**\n+     * Handle update slow discovery poll flag request.\n+     */\n+    public void updateExhaustedPoll(Endpoint endpoint, boolean enable) {\n+        log.info(\"Discovery poll mode for endpoint {} update - exhausted mode requested (enable: '{}')\",\n+                endpoint, enable);\n+        endpoints.computeIfPresent(endpoint,\n+                (e, watchListEntry) -> watchListEntry.toBuilder().exhaustedPollEnabled(enable).build());\n+    }\n+\n+    @VisibleForTesting\n+    void updateAuxiliaryPoll(Endpoint endpoint, boolean enable, long currentTime) {\n+        log.info(\"Discovery poll mode for endpoint {} update - auxiliary mode requested (enable: '{}')\",\n+                endpoint, enable);\n+        WatchListEntry watchListEntry = endpoints.computeIfPresent(endpoint,\n+                (e, listEntry) -> listEntry.toBuilder().auxiliaryPollEnabled(enable).build());\n+\n+        if (watchListEntry != null && !enable) { // when another mechanism used to determine ISL status is disabled\n+            for (Set<Endpoint> e : timeouts.values()) {\n+                e.remove(endpoint);\n+            }\n+\n+            carrier.discoveryRequest(endpoint, currentTime);\n+            addTimeouts(Collections.singleton(endpoint), currentTime + calculateTimeout(endpoint));\n+        }\n+    }\n+\n+    /**\n+     * Handle update slow discovery flag request for BFD enabled case.\n+     */\n+    public void updateAuxiliaryPoll(Endpoint endpoint, boolean enable) {\n+        updateAuxiliaryPoll(endpoint, enable, now());\n+    }\n+\n     /**\n      * Consume timer tick.\n      */\n-    public void tick(long tickTime) {\n+    @VisibleForTesting\n+    void tick(long tickTime) {\n         SortedMap<Long, Set<Endpoint>> range = timeouts.subMap(0L, tickTime + 1);\n         if (!range.isEmpty()) {\n-            HashSet<Endpoint> renew = new HashSet<>();\n+            Set<Endpoint> renewGeneric = new HashSet<>();\n+            Set<Endpoint> renewExhausted = new HashSet<>();\n+            Set<Endpoint> renewAuxiliary = new HashSet<>();\n+\n             for (Set<Endpoint> e : range.values()) {\n                 for (Endpoint ee : e) {\n-                    if (endpoints.contains(ee)) {\n+                    WatchListEntry watchListEntry = endpoints.get(ee);\n+                    if (watchListEntry != null) {\n                         carrier.discoveryRequest(ee, tickTime);\n-                        renew.add(ee);\n+\n+                        if (watchListEntry.isAuxiliaryPollEnabled()) {\n+                            renewAuxiliary.add(ee);\n+                        } else if (watchListEntry.isExhaustedPollEnabled()) {\n+                            renewExhausted.add(ee);\n+                        } else {\n+                            renewGeneric.add(ee);\n+                        }\n                     }\n                 }\n             }\n             range.clear();\n-            if (!renew.isEmpty()) {\n-                long key = tickTime + tickPeriod;\n-                timeouts.computeIfAbsent(key, mappingFunction -> new HashSet<>())\n-                        .addAll(renew);\n-            }\n+\n+            addTimeouts(renewGeneric, tickTime + genericTickPeriod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NTg5Mw=="}, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDAxNzkyOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzozMDozOFrOG0Miog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyNTowM1rOG0rbSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4NDYxMA==", "bodyText": "Add a comment describing why we do not link produced tuple to the current tuple i.e. why we do not use the anchor. Without the comment, someone can think this is a typo/mistake.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457384610", "createdAt": "2020-07-20T13:30:38Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -164,6 +172,12 @@ public void islDefaultRulesDelete(Endpoint source, Endpoint destination) {\n                 new SpeakerRulesIslRemoveCommand(keyFactory.next(), source, destination)));\n     }\n \n+    @Override\n+    public void auxiliaryPollUpdateRequest(Endpoint endpoint, boolean enableAuxiliaryPoll) {\n+        WatchListCommand command = new WatchListAuxiliaryPollUpdateCommand(endpoint, enableAuxiliaryPoll);\n+        emit(STREAM_POLL_ID, makePollTuple(command));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MDYzMw==", "bodyText": "Added.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r457890633", "createdAt": "2020-07-21T07:25:03Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/isl/IslHandler.java", "diffHunk": "@@ -164,6 +172,12 @@ public void islDefaultRulesDelete(Endpoint source, Endpoint destination) {\n                 new SpeakerRulesIslRemoveCommand(keyFactory.next(), source, destination)));\n     }\n \n+    @Override\n+    public void auxiliaryPollUpdateRequest(Endpoint endpoint, boolean enableAuxiliaryPoll) {\n+        WatchListCommand command = new WatchListAuxiliaryPollUpdateCommand(endpoint, enableAuxiliaryPoll);\n+        emit(STREAM_POLL_ID, makePollTuple(command));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4NDYxMA=="}, "originalCommit": {"oid": "419e2e16e14221fe8575cd1841e22e805294cd22"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQ4MzI5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDozMDo0NVrOG1ciWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDo0NDoxNFrOG1c9Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5NTI1Ng==", "bodyText": "You need to do it only if renew.put(enpoint, watchlistEntry) == null now you can produce 2 request for single endpoint.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r458695256", "createdAt": "2020-07-22T10:30:45Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +83,59 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    @VisibleForTesting\n+    void updateExhaustedPollMode(Endpoint endpoint, boolean enable, long currentTime) {\n+        log.info(\"Discovery poll mode for endpoint {} update - exhausted mode requested (enable: '{}')\",\n+                endpoint, enable);\n+        WatchListEntry watchListEntry = endpoints.computeIfPresent(endpoint,\n+                (e, listEntry) -> listEntry.toBuilder().exhaustedPollEnabled(enable).build());\n+\n+        if (watchListEntry != null && !enable) { // when ISL belonging to this endpoint was found\n+            reloadEndpointTimeout(endpoint, currentTime);\n+        }\n+    }\n+\n+    public void updateExhaustedPollMode(Endpoint endpoint, boolean enable) {\n+        updateExhaustedPollMode(endpoint, enable, now());\n+    }\n+\n+    @VisibleForTesting\n+    void updateAuxiliaryPollMode(Endpoint endpoint, boolean enable, long currentTime) {\n+        log.info(\"Discovery poll mode for endpoint {} update - auxiliary mode requested (enable: '{}')\",\n+                endpoint, enable);\n+        WatchListEntry watchListEntry = endpoints.computeIfPresent(endpoint,\n+                (e, listEntry) -> listEntry.toBuilder().auxiliaryPollEnabled(enable).build());\n+\n+        if (watchListEntry != null && !enable) { // when another mechanism used to determine ISL status is disabled\n+            reloadEndpointTimeout(endpoint, currentTime);\n+        }\n+    }\n+\n+    public void updateAuxiliaryPollMode(Endpoint endpoint, boolean enable) {\n+        updateAuxiliaryPollMode(endpoint, enable, now());\n+    }\n+\n     /**\n      * Consume timer tick.\n      */\n-    public void tick(long tickTime) {\n+    @VisibleForTesting\n+    void tick(long tickTime) {\n         SortedMap<Long, Set<Endpoint>> range = timeouts.subMap(0L, tickTime + 1);\n         if (!range.isEmpty()) {\n-            HashSet<Endpoint> renew = new HashSet<>();\n-            for (Set<Endpoint> e : range.values()) {\n-                for (Endpoint ee : e) {\n-                    if (endpoints.contains(ee)) {\n-                        carrier.discoveryRequest(ee, tickTime);\n-                        renew.add(ee);\n+            Map<Endpoint, WatchListEntry> renew = new HashMap<>();\n+\n+            for (Set<Endpoint> endpointSet : range.values()) {\n+                for (Endpoint endpoint : endpointSet) {\n+                    WatchListEntry watchListEntry = endpoints.get(endpoint);\n+                    if (watchListEntry != null) {\n+                        carrier.discoveryRequest(endpoint, tickTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe926d59a4b1bfa6a7a617345198a36ab7650f7"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcwMjA5MQ==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r458702091", "createdAt": "2020-07-22T10:44:14Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -73,27 +83,59 @@ public void removeWatch(Endpoint endpoint) {\n         endpoints.remove(endpoint);\n     }\n \n+    @VisibleForTesting\n+    void updateExhaustedPollMode(Endpoint endpoint, boolean enable, long currentTime) {\n+        log.info(\"Discovery poll mode for endpoint {} update - exhausted mode requested (enable: '{}')\",\n+                endpoint, enable);\n+        WatchListEntry watchListEntry = endpoints.computeIfPresent(endpoint,\n+                (e, listEntry) -> listEntry.toBuilder().exhaustedPollEnabled(enable).build());\n+\n+        if (watchListEntry != null && !enable) { // when ISL belonging to this endpoint was found\n+            reloadEndpointTimeout(endpoint, currentTime);\n+        }\n+    }\n+\n+    public void updateExhaustedPollMode(Endpoint endpoint, boolean enable) {\n+        updateExhaustedPollMode(endpoint, enable, now());\n+    }\n+\n+    @VisibleForTesting\n+    void updateAuxiliaryPollMode(Endpoint endpoint, boolean enable, long currentTime) {\n+        log.info(\"Discovery poll mode for endpoint {} update - auxiliary mode requested (enable: '{}')\",\n+                endpoint, enable);\n+        WatchListEntry watchListEntry = endpoints.computeIfPresent(endpoint,\n+                (e, listEntry) -> listEntry.toBuilder().auxiliaryPollEnabled(enable).build());\n+\n+        if (watchListEntry != null && !enable) { // when another mechanism used to determine ISL status is disabled\n+            reloadEndpointTimeout(endpoint, currentTime);\n+        }\n+    }\n+\n+    public void updateAuxiliaryPollMode(Endpoint endpoint, boolean enable) {\n+        updateAuxiliaryPollMode(endpoint, enable, now());\n+    }\n+\n     /**\n      * Consume timer tick.\n      */\n-    public void tick(long tickTime) {\n+    @VisibleForTesting\n+    void tick(long tickTime) {\n         SortedMap<Long, Set<Endpoint>> range = timeouts.subMap(0L, tickTime + 1);\n         if (!range.isEmpty()) {\n-            HashSet<Endpoint> renew = new HashSet<>();\n-            for (Set<Endpoint> e : range.values()) {\n-                for (Endpoint ee : e) {\n-                    if (endpoints.contains(ee)) {\n-                        carrier.discoveryRequest(ee, tickTime);\n-                        renew.add(ee);\n+            Map<Endpoint, WatchListEntry> renew = new HashMap<>();\n+\n+            for (Set<Endpoint> endpointSet : range.values()) {\n+                for (Endpoint endpoint : endpointSet) {\n+                    WatchListEntry watchListEntry = endpoints.get(endpoint);\n+                    if (watchListEntry != null) {\n+                        carrier.discoveryRequest(endpoint, tickTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5NTI1Ng=="}, "originalCommit": {"oid": "cfe926d59a4b1bfa6a7a617345198a36ab7650f7"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQ5MTQ5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDozMzowOVrOG1cnUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDo0NDoyNFrOG1c9eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5NjUyOA==", "bodyText": "It will be better if we key will be renamed in something like timeoutAt.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r458696528", "createdAt": "2020-07-22T10:33:09Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -104,4 +146,40 @@ public void tick() {\n     private long now() {\n         return System.nanoTime();\n     }\n+\n+    private void addTimeout(Endpoint endpoint, long key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe926d59a4b1bfa6a7a617345198a36ab7650f7"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcwMjIwMg==", "bodyText": "Renamed.", "url": "https://github.com/telstra/open-kilda/pull/3604#discussion_r458702202", "createdAt": "2020-07-22T10:44:24Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatchListService.java", "diffHunk": "@@ -104,4 +146,40 @@ public void tick() {\n     private long now() {\n         return System.nanoTime();\n     }\n+\n+    private void addTimeout(Endpoint endpoint, long key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5NjUyOA=="}, "originalCommit": {"oid": "cfe926d59a4b1bfa6a7a617345198a36ab7650f7"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1911, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}