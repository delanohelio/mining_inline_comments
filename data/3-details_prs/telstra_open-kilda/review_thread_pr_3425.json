{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMDM2NjY0", "number": 3425, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0NzozNlrOD3815w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NzoxNVrOD39Dwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk1MTExOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/SwapEndpointSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0NzozNlrOGOfxUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0NzozNlrOGOfxUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1Mzc3OQ==", "bodyText": "if swPair is not found then this test will be failed\nprobably would be better to use  assumeTrue", "url": "https://github.com/telstra/open-kilda/pull/3425#discussion_r417853779", "createdAt": "2020-04-30T08:47:36Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/SwapEndpointSpec.groovy", "diffHunk": "@@ -1142,6 +1142,76 @@ switches\"() {\n         ]\n     }\n \n+    def \"System reverts both flows if fails during rule installation when swapping endpoints\"() {\n+        given: \"Two flows with different src switches and same dst\"\n+        def swPair1\n+        def swPair2 = topologyHelper.switchPairs.find { second ->\n+            swPair1 = topologyHelper.switchPairs.find { first ->\n+                first.src != second.src && first.dst == second.dst\n+            }\n+        }\n+        assert swPair1\n+        assert swPair2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69b066610162e09beeb0bcbe65f6c0af9176f64"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk2MDUxOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/SwapEndpointSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1MDoxNlrOGOf3hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1MDoxNlrOGOf3hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTM2NA==", "bodyText": "@Tidy ?", "url": "https://github.com/telstra/open-kilda/pull/3425#discussion_r417855364", "createdAt": "2020-04-30T08:50:16Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/SwapEndpointSpec.groovy", "diffHunk": "@@ -1142,6 +1142,76 @@ switches\"() {\n         ]\n     }\n \n+    def \"System reverts both flows if fails during rule installation when swapping endpoints\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69b066610162e09beeb0bcbe65f6c0af9176f64"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk3ODIwOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/SwapEndpointSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NToxMVrOGOgDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NToxMVrOGOgDKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1ODM0Ng==", "bodyText": "500 InternalServerError\nis it expected ?\nit seems to be an issue", "url": "https://github.com/telstra/open-kilda/pull/3425#discussion_r417858346", "createdAt": "2020-04-30T08:55:11Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/SwapEndpointSpec.groovy", "diffHunk": "@@ -1142,6 +1142,76 @@ switches\"() {\n         ]\n     }\n \n+    def \"System reverts both flows if fails during rule installation when swapping endpoints\"() {\n+        given: \"Two flows with different src switches and same dst\"\n+        def swPair1\n+        def swPair2 = topologyHelper.switchPairs.find { second ->\n+            swPair1 = topologyHelper.switchPairs.find { first ->\n+                first.src != second.src && first.dst == second.dst\n+            }\n+        }\n+        assert swPair1\n+        assert swPair2\n+        def flow1 = flowHelperV2.randomFlow(swPair1).tap {\n+            it.source.portNumber = getFreePort(swPair1.src, [swPair2.src])\n+        }\n+        def flow2 = flowHelperV2.randomFlow(swPair2).tap {\n+            it.source.portNumber = getFreePort(swPair2.src, [swPair1.src])\n+        }\n+        flowHelperV2.addFlow(flow1)\n+        flowHelperV2.addFlow(flow2)\n+\n+        when: \"Try to swap flow src endoints, but flow1 src switch does not respond\"\n+        def blockData = switchHelper.knockoutSwitch(swPair1.src, mgmtFlManager)\n+        database.setSwitchStatus(swPair1.src.dpId, SwitchStatus.ACTIVE)\n+        northbound.swapFlowEndpoint(new SwapFlowPayload(flow1.flowId, flow2.source, flow1.destination),\n+                new SwapFlowPayload(flow2.flowId, flow1.source, flow2.destination))\n+\n+        then: \"Receive error response\"\n+        def exc = thrown(HttpServerErrorException)\n+        exc.rawStatusCode == 500", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69b066610162e09beeb0bcbe65f6c0af9176f64"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk4NjU4OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/SwapEndpointSpec.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NzoxNVrOGOgIRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NzoxNVrOGOgIRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1OTY1Mw==", "bodyText": "delete -> Delete", "url": "https://github.com/telstra/open-kilda/pull/3425#discussion_r417859653", "createdAt": "2020-04-30T08:57:15Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/SwapEndpointSpec.groovy", "diffHunk": "@@ -1142,6 +1142,76 @@ switches\"() {\n         ]\n     }\n \n+    def \"System reverts both flows if fails during rule installation when swapping endpoints\"() {\n+        given: \"Two flows with different src switches and same dst\"\n+        def swPair1\n+        def swPair2 = topologyHelper.switchPairs.find { second ->\n+            swPair1 = topologyHelper.switchPairs.find { first ->\n+                first.src != second.src && first.dst == second.dst\n+            }\n+        }\n+        assert swPair1\n+        assert swPair2\n+        def flow1 = flowHelperV2.randomFlow(swPair1).tap {\n+            it.source.portNumber = getFreePort(swPair1.src, [swPair2.src])\n+        }\n+        def flow2 = flowHelperV2.randomFlow(swPair2).tap {\n+            it.source.portNumber = getFreePort(swPair2.src, [swPair1.src])\n+        }\n+        flowHelperV2.addFlow(flow1)\n+        flowHelperV2.addFlow(flow2)\n+\n+        when: \"Try to swap flow src endoints, but flow1 src switch does not respond\"\n+        def blockData = switchHelper.knockoutSwitch(swPair1.src, mgmtFlManager)\n+        database.setSwitchStatus(swPair1.src.dpId, SwitchStatus.ACTIVE)\n+        northbound.swapFlowEndpoint(new SwapFlowPayload(flow1.flowId, flow2.source, flow1.destination),\n+                new SwapFlowPayload(flow2.flowId, flow1.source, flow2.destination))\n+\n+        then: \"Receive error response\"\n+        def exc = thrown(HttpServerErrorException)\n+        exc.rawStatusCode == 500\n+        def error = exc.responseBodyAsString.to(MessageError)\n+        error.errorMessage == \"Could not swap endpoints\"\n+        error.errorDescription == sprintf(\"Reverted flows: [%s, %s]\", flow2.flowId, flow1.flowId)\n+\n+        and: \"First flow is reverted to Down\"\n+        Wrappers.wait(PATH_INSTALLATION_TIME) {\n+            assert northboundV2.getFlowStatus(flow1.flowId).status == FlowState.DOWN\n+        }\n+        with(northboundV2.getFlow(flow1.flowId)) {\n+            source == flow1.source\n+            destination == flow1.destination\n+        }\n+\n+        and: \"Second flow is reverted to UP\"\n+        Wrappers.wait(PATH_INSTALLATION_TIME) {\n+            assert northboundV2.getFlowStatus(flow2.flowId).status == FlowState.UP\n+        }\n+        with(northboundV2.getFlow(flow2.flowId)) {\n+            source == flow2.source\n+            destination == flow2.destination\n+        }\n+\n+        when: \"delete both flows\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69b066610162e09beeb0bcbe65f6c0af9176f64"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1950, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}