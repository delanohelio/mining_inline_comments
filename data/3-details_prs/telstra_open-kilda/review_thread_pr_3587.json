{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDIxNjY2", "number": 3587, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxOTo1OFrOEMK9Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1NTowOVrOEM7qJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTk3ODgyOnYy", "diffSide": "RIGHT", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxOTo1OFrOGuIR5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjo0ODo0NVrOGuaVyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMzMzMw==", "bodyText": "excess single quote at the end of the sentence -.-", "url": "https://github.com/telstra/open-kilda/pull/3587#discussion_r451023333", "createdAt": "2020-07-07T17:19:58Z", "author": {"login": "rtretyak"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -647,12 +647,18 @@ private FlowPathPayload buildFlowPathPayload(List<FlowPathDto> paths, String flo\n     @Override\n     public CompletableFuture<List<FlowEventPayload>> listFlowEvents(String flowId,\n                                                                     long timestampFrom,\n-                                                                    long timestampTo) {\n+                                                                    long timestampTo, int maxCount) {\n+        if (maxCount < 1) {\n+            throw new MessageException(RequestCorrelationId.getId(), System.currentTimeMillis(),\n+                    ErrorType.PARAMETERS_INVALID, format(\"Invalid `max_count` argument '%s'.\", maxCount),\n+                    \"`max_count` argument must be positive.'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042664d6bfb5b23cea65dc636ec3dd52cfe6e1d9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxOTI0MA==", "bodyText": "will fix", "url": "https://github.com/telstra/open-kilda/pull/3587#discussion_r451319240", "createdAt": "2020-07-08T06:48:45Z", "author": {"login": "niksv"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/FlowServiceImpl.java", "diffHunk": "@@ -647,12 +647,18 @@ private FlowPathPayload buildFlowPathPayload(List<FlowPathDto> paths, String flo\n     @Override\n     public CompletableFuture<List<FlowEventPayload>> listFlowEvents(String flowId,\n                                                                     long timestampFrom,\n-                                                                    long timestampTo) {\n+                                                                    long timestampTo, int maxCount) {\n+        if (maxCount < 1) {\n+            throw new MessageException(RequestCorrelationId.getId(), System.currentTimeMillis(),\n+                    ErrorType.PARAMETERS_INVALID, format(\"Invalid `max_count` argument '%s'.\", maxCount),\n+                    \"`max_count` argument must be positive.'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMzMzMw=="}, "originalCommit": {"oid": "042664d6bfb5b23cea65dc636ec3dd52cfe6e1d9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTE4MjI1OnYy", "diffSide": "RIGHT", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v1/FlowController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0Mjo0NVrOGvNbwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoyNTo1NFrOGvToIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NjM1Mw==", "bodyText": "Per RFC, HttpStatus.PARTIAL_CONTENT is returned only if Range header is passed. In out case we should return 200 OK.", "url": "https://github.com/telstra/open-kilda/pull/3587#discussion_r452156353", "createdAt": "2020-07-09T11:42:45Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v1/FlowController.java", "diffHunk": "@@ -328,18 +332,42 @@ public void invalidateFlowCache() {\n      */\n     @ApiOperation(value = \"Gets history for flow\", response = FlowEventPayload.class, responseContainer = \"List\")\n     @GetMapping(path = \"/{flow_id}/history\")\n-    @ResponseStatus(HttpStatus.OK)\n-    public CompletableFuture<List<FlowEventPayload>> getHistory(\n+    public ResponseEntity<List<FlowEventPayload>> getHistory(\n             @PathVariable(\"flow_id\") String flowId,\n-            @ApiParam(value = \"default: the day before timeTo.\", required = false)\n+            @ApiParam(value = \"default: 0 (1 January 1970 00:00:00).\", required = false)\n             @RequestParam(value = \"timeFrom\", required = false) Optional<Long> optionalTimeFrom,\n             @ApiParam(value = \"default: now.\", required = false)\n-            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo) {\n+            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo,\n+            @ApiParam(value = \"Return at most N latest records. \"\n+                    + \"Default: if `timeFrom` or/and `timeTo` parameters are presented default value of \"\n+                    + \"`maxCount` is infinite (all records in time interval will be returned). \"\n+                    + \"Otherwise default value of `maxCount` will be equal to 100. In This case response will contain \"\n+                    + \"header 'Content-Range' and have status 206 (Partial Content).\")\n+            @RequestParam(value = \"max_count\", required = false) Optional<Integer> optionalMaxCount) {\n+        int maxCount = optionalMaxCount.orElseGet(() -> {\n+            if (optionalTimeFrom.isPresent() || optionalTimeTo.isPresent()) {\n+                return Integer.MAX_VALUE;\n+            } else {\n+                return DEFAULT_MAX_HISTORY_RECORD_COUNT;\n+            }\n+        });\n+\n         Long timeTo = optionalTimeTo.orElseGet(() -> Instant.now().getEpochSecond());\n-        Long timeFrom = optionalTimeFrom.orElseGet(\n-                () -> Instant.ofEpochSecond(timeTo).minus(1, ChronoUnit.DAYS).getEpochSecond()\n-        );\n-        return flowService.listFlowEvents(flowId, timeFrom, timeTo);\n+        Long timeFrom = optionalTimeFrom.orElse(0L);\n+        List<FlowEventPayload> events = flowService.listFlowEvents(flowId, timeFrom, timeTo, maxCount).join();\n+\n+        HttpStatus responseStatus = HttpStatus.OK;\n+        HttpHeaders headers = new HttpHeaders();\n+\n+        if (!optionalMaxCount.isPresent() && !optionalTimeFrom.isPresent() && !optionalTimeTo.isPresent()) {\n+            // if request has no parameters we assume that default value of `maxCount` is 100. To indicate that response\n+            // may contain not all of history records \"Content-Range\" header will be added to response.\n+            // Also Response status will be set to 206 (Partial Content)\n+            int count = Math.min(DEFAULT_MAX_HISTORY_RECORD_COUNT, events.size()) - 1;\n+            headers.add(HttpHeaders.CONTENT_RANGE, format(\"event 0-%d/*\", count));\n+            responseStatus = HttpStatus.PARTIAL_CONTENT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f20ff3dc4c43eb7f67279f391edf45dda157194"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NzgyNg==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3587#discussion_r452257826", "createdAt": "2020-07-09T14:25:54Z", "author": {"login": "niksv"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v1/FlowController.java", "diffHunk": "@@ -328,18 +332,42 @@ public void invalidateFlowCache() {\n      */\n     @ApiOperation(value = \"Gets history for flow\", response = FlowEventPayload.class, responseContainer = \"List\")\n     @GetMapping(path = \"/{flow_id}/history\")\n-    @ResponseStatus(HttpStatus.OK)\n-    public CompletableFuture<List<FlowEventPayload>> getHistory(\n+    public ResponseEntity<List<FlowEventPayload>> getHistory(\n             @PathVariable(\"flow_id\") String flowId,\n-            @ApiParam(value = \"default: the day before timeTo.\", required = false)\n+            @ApiParam(value = \"default: 0 (1 January 1970 00:00:00).\", required = false)\n             @RequestParam(value = \"timeFrom\", required = false) Optional<Long> optionalTimeFrom,\n             @ApiParam(value = \"default: now.\", required = false)\n-            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo) {\n+            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo,\n+            @ApiParam(value = \"Return at most N latest records. \"\n+                    + \"Default: if `timeFrom` or/and `timeTo` parameters are presented default value of \"\n+                    + \"`maxCount` is infinite (all records in time interval will be returned). \"\n+                    + \"Otherwise default value of `maxCount` will be equal to 100. In This case response will contain \"\n+                    + \"header 'Content-Range' and have status 206 (Partial Content).\")\n+            @RequestParam(value = \"max_count\", required = false) Optional<Integer> optionalMaxCount) {\n+        int maxCount = optionalMaxCount.orElseGet(() -> {\n+            if (optionalTimeFrom.isPresent() || optionalTimeTo.isPresent()) {\n+                return Integer.MAX_VALUE;\n+            } else {\n+                return DEFAULT_MAX_HISTORY_RECORD_COUNT;\n+            }\n+        });\n+\n         Long timeTo = optionalTimeTo.orElseGet(() -> Instant.now().getEpochSecond());\n-        Long timeFrom = optionalTimeFrom.orElseGet(\n-                () -> Instant.ofEpochSecond(timeTo).minus(1, ChronoUnit.DAYS).getEpochSecond()\n-        );\n-        return flowService.listFlowEvents(flowId, timeFrom, timeTo);\n+        Long timeFrom = optionalTimeFrom.orElse(0L);\n+        List<FlowEventPayload> events = flowService.listFlowEvents(flowId, timeFrom, timeTo, maxCount).join();\n+\n+        HttpStatus responseStatus = HttpStatus.OK;\n+        HttpHeaders headers = new HttpHeaders();\n+\n+        if (!optionalMaxCount.isPresent() && !optionalTimeFrom.isPresent() && !optionalTimeTo.isPresent()) {\n+            // if request has no parameters we assume that default value of `maxCount` is 100. To indicate that response\n+            // may contain not all of history records \"Content-Range\" header will be added to response.\n+            // Also Response status will be set to 206 (Partial Content)\n+            int count = Math.min(DEFAULT_MAX_HISTORY_RECORD_COUNT, events.size()) - 1;\n+            headers.add(HttpHeaders.CONTENT_RANGE, format(\"event 0-%d/*\", count));\n+            responseStatus = HttpStatus.PARTIAL_CONTENT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NjM1Mw=="}, "originalCommit": {"oid": "9f20ff3dc4c43eb7f67279f391edf45dda157194"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTg2NTM3OnYy", "diffSide": "RIGHT", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v1/FlowController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDozNTo1NFrOGvUEQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo0MjoxN1rOGvUWlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2NTAyNQ==", "bodyText": "Let's use more generic units - \"items\" (instead of \"event\")", "url": "https://github.com/telstra/open-kilda/pull/3587#discussion_r452265025", "createdAt": "2020-07-09T14:35:54Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v1/FlowController.java", "diffHunk": "@@ -328,18 +332,39 @@ public void invalidateFlowCache() {\n      */\n     @ApiOperation(value = \"Gets history for flow\", response = FlowEventPayload.class, responseContainer = \"List\")\n     @GetMapping(path = \"/{flow_id}/history\")\n-    @ResponseStatus(HttpStatus.OK)\n-    public CompletableFuture<List<FlowEventPayload>> getHistory(\n+    public ResponseEntity<List<FlowEventPayload>> getHistory(\n             @PathVariable(\"flow_id\") String flowId,\n-            @ApiParam(value = \"default: the day before timeTo.\", required = false)\n+            @ApiParam(value = \"default: 0 (1 January 1970 00:00:00).\", required = false)\n             @RequestParam(value = \"timeFrom\", required = false) Optional<Long> optionalTimeFrom,\n             @ApiParam(value = \"default: now.\", required = false)\n-            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo) {\n+            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo,\n+            @ApiParam(value = \"Return at most N latest records. \"\n+                    + \"Default: if `timeFrom` or/and `timeTo` parameters are presented default value of \"\n+                    + \"`maxCount` is infinite (all records in time interval will be returned). \"\n+                    + \"Otherwise default value of `maxCount` will be equal to 100. In This case response will contain \"\n+                    + \"header 'Content-Range'.\")\n+            @RequestParam(value = \"max_count\", required = false) Optional<Integer> optionalMaxCount) {\n+        int maxCount = optionalMaxCount.orElseGet(() -> {\n+            if (optionalTimeFrom.isPresent() || optionalTimeTo.isPresent()) {\n+                return Integer.MAX_VALUE;\n+            } else {\n+                return DEFAULT_MAX_HISTORY_RECORD_COUNT;\n+            }\n+        });\n+\n         Long timeTo = optionalTimeTo.orElseGet(() -> Instant.now().getEpochSecond());\n-        Long timeFrom = optionalTimeFrom.orElseGet(\n-                () -> Instant.ofEpochSecond(timeTo).minus(1, ChronoUnit.DAYS).getEpochSecond()\n-        );\n-        return flowService.listFlowEvents(flowId, timeFrom, timeTo);\n+        Long timeFrom = optionalTimeFrom.orElse(0L);\n+        List<FlowEventPayload> events = flowService.listFlowEvents(flowId, timeFrom, timeTo, maxCount).join();\n+\n+        HttpHeaders headers = new HttpHeaders();\n+\n+        if (!optionalMaxCount.isPresent() && !optionalTimeFrom.isPresent() && !optionalTimeTo.isPresent()) {\n+            // if request has no parameters we assume that default value of `maxCount` is 100. To indicate that response\n+            // may contain not all of history records \"Content-Range\" header will be added to response.\n+            int count = Math.min(DEFAULT_MAX_HISTORY_RECORD_COUNT, events.size()) - 1;\n+            headers.add(HttpHeaders.CONTENT_RANGE, format(\"event 0-%d/*\", count));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3580dcb1e5b782984bfa536724e05692c3a38b94"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2OTcxNw==", "bodyText": "fixex", "url": "https://github.com/telstra/open-kilda/pull/3587#discussion_r452269717", "createdAt": "2020-07-09T14:42:17Z", "author": {"login": "niksv"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v1/FlowController.java", "diffHunk": "@@ -328,18 +332,39 @@ public void invalidateFlowCache() {\n      */\n     @ApiOperation(value = \"Gets history for flow\", response = FlowEventPayload.class, responseContainer = \"List\")\n     @GetMapping(path = \"/{flow_id}/history\")\n-    @ResponseStatus(HttpStatus.OK)\n-    public CompletableFuture<List<FlowEventPayload>> getHistory(\n+    public ResponseEntity<List<FlowEventPayload>> getHistory(\n             @PathVariable(\"flow_id\") String flowId,\n-            @ApiParam(value = \"default: the day before timeTo.\", required = false)\n+            @ApiParam(value = \"default: 0 (1 January 1970 00:00:00).\", required = false)\n             @RequestParam(value = \"timeFrom\", required = false) Optional<Long> optionalTimeFrom,\n             @ApiParam(value = \"default: now.\", required = false)\n-            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo) {\n+            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo,\n+            @ApiParam(value = \"Return at most N latest records. \"\n+                    + \"Default: if `timeFrom` or/and `timeTo` parameters are presented default value of \"\n+                    + \"`maxCount` is infinite (all records in time interval will be returned). \"\n+                    + \"Otherwise default value of `maxCount` will be equal to 100. In This case response will contain \"\n+                    + \"header 'Content-Range'.\")\n+            @RequestParam(value = \"max_count\", required = false) Optional<Integer> optionalMaxCount) {\n+        int maxCount = optionalMaxCount.orElseGet(() -> {\n+            if (optionalTimeFrom.isPresent() || optionalTimeTo.isPresent()) {\n+                return Integer.MAX_VALUE;\n+            } else {\n+                return DEFAULT_MAX_HISTORY_RECORD_COUNT;\n+            }\n+        });\n+\n         Long timeTo = optionalTimeTo.orElseGet(() -> Instant.now().getEpochSecond());\n-        Long timeFrom = optionalTimeFrom.orElseGet(\n-                () -> Instant.ofEpochSecond(timeTo).minus(1, ChronoUnit.DAYS).getEpochSecond()\n-        );\n-        return flowService.listFlowEvents(flowId, timeFrom, timeTo);\n+        Long timeFrom = optionalTimeFrom.orElse(0L);\n+        List<FlowEventPayload> events = flowService.listFlowEvents(flowId, timeFrom, timeTo, maxCount).join();\n+\n+        HttpHeaders headers = new HttpHeaders();\n+\n+        if (!optionalMaxCount.isPresent() && !optionalTimeFrom.isPresent() && !optionalTimeTo.isPresent()) {\n+            // if request has no parameters we assume that default value of `maxCount` is 100. To indicate that response\n+            // may contain not all of history records \"Content-Range\" header will be added to response.\n+            int count = Math.min(DEFAULT_MAX_HISTORY_RECORD_COUNT, events.size()) - 1;\n+            headers.add(HttpHeaders.CONTENT_RANGE, format(\"event 0-%d/*\", count));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2NTAyNQ=="}, "originalCommit": {"oid": "3580dcb1e5b782984bfa536724e05692c3a38b94"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk1ODE0OnYy", "diffSide": "RIGHT", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v1/FlowController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1NTowOVrOGvU9aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1NTowOVrOGvU9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3OTY1Ng==", "bodyText": "I'd return this header ONLY in cases when we have in database more records than DEFAULT_MAX_HISTORY_RECORD_COUNT.", "url": "https://github.com/telstra/open-kilda/pull/3587#discussion_r452279656", "createdAt": "2020-07-09T14:55:09Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v1/FlowController.java", "diffHunk": "@@ -328,18 +332,39 @@ public void invalidateFlowCache() {\n      */\n     @ApiOperation(value = \"Gets history for flow\", response = FlowEventPayload.class, responseContainer = \"List\")\n     @GetMapping(path = \"/{flow_id}/history\")\n-    @ResponseStatus(HttpStatus.OK)\n-    public CompletableFuture<List<FlowEventPayload>> getHistory(\n+    public ResponseEntity<List<FlowEventPayload>> getHistory(\n             @PathVariable(\"flow_id\") String flowId,\n-            @ApiParam(value = \"default: the day before timeTo.\", required = false)\n+            @ApiParam(value = \"default: 0 (1 January 1970 00:00:00).\", required = false)\n             @RequestParam(value = \"timeFrom\", required = false) Optional<Long> optionalTimeFrom,\n             @ApiParam(value = \"default: now.\", required = false)\n-            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo) {\n+            @RequestParam(value = \"timeTo\", required = false) Optional<Long> optionalTimeTo,\n+            @ApiParam(value = \"Return at most N latest records. \"\n+                    + \"Default: if `timeFrom` or/and `timeTo` parameters are presented default value of \"\n+                    + \"`maxCount` is infinite (all records in time interval will be returned). \"\n+                    + \"Otherwise default value of `maxCount` will be equal to 100. In This case response will contain \"\n+                    + \"header 'Content-Range'.\")\n+            @RequestParam(value = \"max_count\", required = false) Optional<Integer> optionalMaxCount) {\n+        int maxCount = optionalMaxCount.orElseGet(() -> {\n+            if (optionalTimeFrom.isPresent() || optionalTimeTo.isPresent()) {\n+                return Integer.MAX_VALUE;\n+            } else {\n+                return DEFAULT_MAX_HISTORY_RECORD_COUNT;\n+            }\n+        });\n+\n         Long timeTo = optionalTimeTo.orElseGet(() -> Instant.now().getEpochSecond());\n-        Long timeFrom = optionalTimeFrom.orElseGet(\n-                () -> Instant.ofEpochSecond(timeTo).minus(1, ChronoUnit.DAYS).getEpochSecond()\n-        );\n-        return flowService.listFlowEvents(flowId, timeFrom, timeTo);\n+        Long timeFrom = optionalTimeFrom.orElse(0L);\n+        List<FlowEventPayload> events = flowService.listFlowEvents(flowId, timeFrom, timeTo, maxCount).join();\n+\n+        HttpHeaders headers = new HttpHeaders();\n+\n+        if (!optionalMaxCount.isPresent() && !optionalTimeFrom.isPresent() && !optionalTimeTo.isPresent()) {\n+            // if request has no parameters we assume that default value of `maxCount` is 100. To indicate that response\n+            // may contain not all of history records \"Content-Range\" header will be added to response.\n+            int count = Math.min(DEFAULT_MAX_HISTORY_RECORD_COUNT, events.size()) - 1;\n+            headers.add(HttpHeaders.CONTENT_RANGE, format(\"items 0-%d/*\", count));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fbc11a834de040f92bbae1ed3d6b53d6d2185c"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1898, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}