{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTc0NjM3", "number": 3946, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTo1Njo0MlrOFJuz4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxOToxNTozOFrOFQIMLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzQ4NDQ5OnYy", "diffSide": "RIGHT", "path": "docker/db-migration/migrations/001-rework-flow-multitable-flag.yaml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTo1Njo0MlrOIMLg1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxODo0NjoxMVrOIV0Nkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0MjQ1NA==", "bodyText": "Do we really need index here?", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r549642454", "createdAt": "2020-12-29T09:56:42Z", "author": {"login": "surabujin"}, "path": "docker/db-migration/migrations/001-rework-flow-multitable-flag.yaml", "diffHunk": "@@ -0,0 +1,50 @@\n+---\n+databaseChangeLog:\n+  - changeSet:\n+      id: tag\n+      author: rozdy\n+      changes:\n+        - tagDatabase:\n+            tag: 001-rework-flow-multitable-flag\n+  - changeSet:\n+      id: add_new_flow_path_properties\n+      author: rozdy\n+      changes:\n+        - sql: \"CREATE PROPERTY flow_path.src_with_multi_table IF NOT EXISTS BOOLEAN\"\n+        - sql: \"CREATE PROPERTY flow_path.dst_with_multi_table IF NOT EXISTS BOOLEAN\"\n+        - sql: \"CREATE INDEX flow_path.src_with_multi_table NOTUNIQUE_HASH_INDEX\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3MTUwNA==", "bodyText": "Currently we have index on corresponding properties on flow. Probably they were added for performance reasons. @sergii-iakovenko, is it true?", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r550271504", "createdAt": "2020-12-30T17:34:00Z", "author": {"login": "rozdy"}, "path": "docker/db-migration/migrations/001-rework-flow-multitable-flag.yaml", "diffHunk": "@@ -0,0 +1,50 @@\n+---\n+databaseChangeLog:\n+  - changeSet:\n+      id: tag\n+      author: rozdy\n+      changes:\n+        - tagDatabase:\n+            tag: 001-rework-flow-multitable-flag\n+  - changeSet:\n+      id: add_new_flow_path_properties\n+      author: rozdy\n+      changes:\n+        - sql: \"CREATE PROPERTY flow_path.src_with_multi_table IF NOT EXISTS BOOLEAN\"\n+        - sql: \"CREATE PROPERTY flow_path.dst_with_multi_table IF NOT EXISTS BOOLEAN\"\n+        - sql: \"CREATE INDEX flow_path.src_with_multi_table NOTUNIQUE_HASH_INDEX\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0MjQ1NA=="}, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc0NjQ1MQ==", "bodyText": "Right, Flow and PathSegment have indexes on src_with_multi_table and dst_with_multi_table properties. But I'm not the author of them.\nThere's usage of the indexes in https://github.com/telstra/open-kilda/blob/develop/src-java/kilda-persistence-tinkerpop/src/main/java/org/openkilda/persistence/ferma/repositories/FermaFlowRepository.java#L213", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r559746451", "createdAt": "2021-01-18T18:46:11Z", "author": {"login": "sergii-iakovenko"}, "path": "docker/db-migration/migrations/001-rework-flow-multitable-flag.yaml", "diffHunk": "@@ -0,0 +1,50 @@\n+---\n+databaseChangeLog:\n+  - changeSet:\n+      id: tag\n+      author: rozdy\n+      changes:\n+        - tagDatabase:\n+            tag: 001-rework-flow-multitable-flag\n+  - changeSet:\n+      id: add_new_flow_path_properties\n+      author: rozdy\n+      changes:\n+        - sql: \"CREATE PROPERTY flow_path.src_with_multi_table IF NOT EXISTS BOOLEAN\"\n+        - sql: \"CREATE PROPERTY flow_path.dst_with_multi_table IF NOT EXISTS BOOLEAN\"\n+        - sql: \"CREATE INDEX flow_path.src_with_multi_table NOTUNIQUE_HASH_INDEX\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0MjQ1NA=="}, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUwMTI4OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowPathBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowNDoxNVrOIMLqHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzozNDoxMVrOIMx6TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NDgzMA==", "bodyText": "According to code that fills switchProperties - it is possible to have no switch properties object by some existing switchId... and as result, you will throw NPE here.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r549644830", "createdAt": "2020-12-29T10:04:15Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowPathBuilder.java", "diffHunk": "@@ -153,6 +151,8 @@ public FlowPath buildFlowPath(Flow flow, PathResources pathResources, Path path,\n                 .bandwidth(flow.getBandwidth())\n                 .ignoreBandwidth(flow.isIgnoreBandwidth() || forceToIgnoreBandwidth)\n                 .latency(path.getLatency())\n+                .srcWithMultiTable(switchProperties.get(srcSwitch.getSwitchId()).isMultiTable())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3MTU2NQ==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r550271565", "createdAt": "2020-12-30T17:34:11Z", "author": {"login": "rozdy"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowPathBuilder.java", "diffHunk": "@@ -153,6 +151,8 @@ public FlowPath buildFlowPath(Flow flow, PathResources pathResources, Path path,\n                 .bandwidth(flow.getBandwidth())\n                 .ignoreBandwidth(flow.isIgnoreBandwidth() || forceToIgnoreBandwidth)\n                 .latency(path.getLatency())\n+                .srcWithMultiTable(switchProperties.get(srcSwitch.getSwitchId()).isMultiTable())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NDgzMA=="}, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUxMjkwOnYy", "diffSide": "LEFT", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/RemoveOldRulesAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowODo1MFrOIMLwlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzozNDoxOVrOIMx6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjQ4Nw==", "bodyText": "copy & paste is evil - you can move this chunk in parent class.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r549646487", "createdAt": "2020-12-29T10:08:50Z", "author": {"login": "surabujin"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/RemoveOldRulesAction.java", "diffHunk": "@@ -57,27 +57,35 @@ protected void perform(State from, State to, Event event, FlowUpdateContext cont\n \n         Collection<FlowSegmentRequestFactory> factories = new ArrayList<>();\n \n-        Flow flow = RequestedFlowMapper.INSTANCE.toFlow(stateMachine.getOriginalFlow());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3MTYwMA==", "bodyText": "Reworked.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r550271600", "createdAt": "2020-12-30T17:34:19Z", "author": {"login": "rozdy"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/RemoveOldRulesAction.java", "diffHunk": "@@ -57,27 +57,35 @@ protected void perform(State from, State to, Event event, FlowUpdateContext cont\n \n         Collection<FlowSegmentRequestFactory> factories = new ArrayList<>();\n \n-        Flow flow = RequestedFlowMapper.INSTANCE.toFlow(stateMachine.getOriginalFlow());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjQ4Nw=="}, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUxODk2OnYy", "diffSide": "LEFT", "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowDestAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxMTo0N1rOIML0Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzozNDozNlrOIMx6xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NzM5NQ==", "bodyText": "I would like to keep this getter (with replaced body), you have all required objects to extract it.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r549647395", "createdAt": "2020-12-29T10:11:47Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowDestAdapter.java", "diffHunk": "@@ -36,11 +41,6 @@ public FlowEndpoint getEndpoint() {\n                 trackConnectedDevices.isDstArp() || trackConnectedDevices.isDstSwitchArp());\n     }\n \n-    @Override\n-    public boolean isMultiTableSegment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3MTY4NQ==", "bodyText": "Reworked.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r550271685", "createdAt": "2020-12-30T17:34:36Z", "author": {"login": "rozdy"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowDestAdapter.java", "diffHunk": "@@ -36,11 +41,6 @@ public FlowEndpoint getEndpoint() {\n                 trackConnectedDevices.isDstArp() || trackConnectedDevices.isDstSwitchArp());\n     }\n \n-    @Override\n-    public boolean isMultiTableSegment() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NzM5NQ=="}, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUyNTgwOnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowDestAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxNDozOFrOIML30Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzozNToyNVrOIMx7wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0ODMzNw==", "bodyText": "It ruins the original idea - now you can't have getters like isPrimaryEgressPath.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r549648337", "createdAt": "2020-12-29T10:14:38Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowDestAdapter.java", "diffHunk": "@@ -18,13 +18,18 @@\n import org.openkilda.model.DetectConnectedDevices;\n import org.openkilda.model.Flow;\n import org.openkilda.model.FlowEndpoint;\n+import org.openkilda.model.FlowPath;\n import org.openkilda.model.PathId;\n \n import lombok.NonNull;\n \n public class FlowDestAdapter extends FlowSideAdapter {\n     public FlowDestAdapter(Flow flow) {\n-        super(flow);\n+        super(flow, flow.getForwardPath());\n+    }\n+\n+    public FlowDestAdapter(Flow flow, FlowPath flowPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3MTkzNw==", "bodyText": "Original idea restored. Multitable related properties removed from adapters.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r550271937", "createdAt": "2020-12-30T17:35:25Z", "author": {"login": "rozdy"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowDestAdapter.java", "diffHunk": "@@ -18,13 +18,18 @@\n import org.openkilda.model.DetectConnectedDevices;\n import org.openkilda.model.Flow;\n import org.openkilda.model.FlowEndpoint;\n+import org.openkilda.model.FlowPath;\n import org.openkilda.model.PathId;\n \n import lombok.NonNull;\n \n public class FlowDestAdapter extends FlowSideAdapter {\n     public FlowDestAdapter(Flow flow) {\n-        super(flow);\n+        super(flow, flow.getForwardPath());\n+    }\n+\n+    public FlowDestAdapter(Flow flow, FlowPath flowPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0ODMzNw=="}, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUzMTM3OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowSideAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxNzowOFrOIML66w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxNzowOFrOIML66w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0OTEzMQ==", "bodyText": "... extremely messy. And it based on the excess pathPath field. Bad idea, as for me.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r549649131", "createdAt": "2020-12-29T10:17:08Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowSideAdapter.java", "diffHunk": "@@ -45,41 +47,45 @@ public static FlowSideAdapter makeIngressAdapter(Flow flow, FlowPath path) {\n      */\n     public static FlowSideAdapter makeEgressAdapter(Flow flow, FlowPath path) {\n         if (path.getCookie().getDirection() == FlowPathDirection.FORWARD) {\n-            return new FlowDestAdapter(flow);\n+            return new FlowDestAdapter(flow, path);\n         } else {\n-            return new FlowSourceAdapter(flow);\n+            return new FlowSourceAdapter(flow, path);\n         }\n     }\n \n     /**\n      * Determine flow side by switchId and produce corresponding side-adapter.\n      */\n-    public static FlowSideAdapter makeAdapter(SwitchId switchId, Flow flow) {\n+    public static FlowSideAdapter makeAdapter(SwitchId switchId, Flow flow, FlowPath flowPath) {\n         if (flow.isOneSwitchFlow()) {\n             throw new IllegalArgumentException(\"Unable to determine flow side for one-switch-flow by switch endpoint\");\n         } else if (switchId.equals(flow.getSrcSwitchId())) {\n-            return new FlowSourceAdapter(flow);\n+            return new FlowSourceAdapter(flow, flowPath);\n         } else if (switchId.equals(flow.getDestSwitchId())) {\n-            return new FlowDestAdapter(flow);\n+            return new FlowDestAdapter(flow, flowPath);\n         } else {\n             throw new IllegalArgumentException(String.format(\n                     \"Unable to map switch %s on any flow side of %s\", switchId, flow));\n         }\n     }\n \n-    protected FlowSideAdapter(Flow flow) {\n+    protected FlowSideAdapter(Flow flow, FlowPath flowPath) {\n         this.flow = flow;\n+        this.flowPath = flowPath;\n     }\n \n     public abstract FlowEndpoint getEndpoint();\n \n-    public abstract boolean isMultiTableSegment();\n-\n     public abstract boolean isDetectConnectedDevicesLldp();\n \n     public abstract boolean isDetectConnectedDevicesArp();\n \n     public abstract boolean isPrimaryEgressPath(@NonNull PathId pathId);\n \n     public abstract boolean isLooped();\n+\n+    public boolean isMultiTableSegment() {\n+        return getEndpoint().getSwitchId().equals(flowPath.getSrcSwitchId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzU0MTc4OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowSideAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoyMjoxN1rOIMMA5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoyMjoxN1rOIMMA5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDY2MA==", "bodyText": "You must not make such (that this is a forward path) assumptions. At least you must make more checks.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r549650660", "createdAt": "2020-12-29T10:22:17Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/adapter/FlowSideAdapter.java", "diffHunk": "@@ -45,41 +47,45 @@ public static FlowSideAdapter makeIngressAdapter(Flow flow, FlowPath path) {\n      */\n     public static FlowSideAdapter makeEgressAdapter(Flow flow, FlowPath path) {\n         if (path.getCookie().getDirection() == FlowPathDirection.FORWARD) {\n-            return new FlowDestAdapter(flow);\n+            return new FlowDestAdapter(flow, path);\n         } else {\n-            return new FlowSourceAdapter(flow);\n+            return new FlowSourceAdapter(flow, path);\n         }\n     }\n \n     /**\n      * Determine flow side by switchId and produce corresponding side-adapter.\n      */\n-    public static FlowSideAdapter makeAdapter(SwitchId switchId, Flow flow) {\n+    public static FlowSideAdapter makeAdapter(SwitchId switchId, Flow flow, FlowPath flowPath) {\n         if (flow.isOneSwitchFlow()) {\n             throw new IllegalArgumentException(\"Unable to determine flow side for one-switch-flow by switch endpoint\");\n         } else if (switchId.equals(flow.getSrcSwitchId())) {\n-            return new FlowSourceAdapter(flow);\n+            return new FlowSourceAdapter(flow, flowPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1d3d907eaf5331c2bbcb174a9a0f9c748a9614"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDI1NzExOnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/service/SpeakerFlowSegmentRequestBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDoyMjoxMVrOIUV6kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNDoxMTo1N1rOIUd2Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIwMTQ5MQ==", "bodyText": "Why direct request via path object? As for me, request via flowSide is more flexible.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r558201491", "createdAt": "2021-01-15T10:22:11Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/service/SpeakerFlowSegmentRequestBuilder.java", "diffHunk": "@@ -277,11 +277,11 @@ private FlowSegmentRequestFactory makeIngressSegmentRequest(\n         return IngressFlowSegmentRequestFactory.builder()\n                 .messageContext(messageContext)\n                 .metadata(makeMetadata(path, ensureEqualMultiTableFlag(\n-                        flowSide.isMultiTableSegment(), segmentSide.isMultiTable(),\n-                        String.format(\"First flow(id:%s, path:%s) segment and flow level multi-table flag values are \"\n-                                              + \"incompatible to each other - flow(%s) != segment(%s)\",\n+                        path.isSrcWithMultiTable(), segmentSide.isMultiTable(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55bd7fd2a2f0d11930ef8cae22adfef805d1da2b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMzMTQzMA==", "bodyText": "Because I removed multitable-related info from adapter level. After this changes flow may have multiple paths with different multitable mode on the same endpoint so from flow level we can't get this info in a simple way.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r558331430", "createdAt": "2021-01-15T14:11:57Z", "author": {"login": "rozdy"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/service/SpeakerFlowSegmentRequestBuilder.java", "diffHunk": "@@ -277,11 +277,11 @@ private FlowSegmentRequestFactory makeIngressSegmentRequest(\n         return IngressFlowSegmentRequestFactory.builder()\n                 .messageContext(messageContext)\n                 .metadata(makeMetadata(path, ensureEqualMultiTableFlag(\n-                        flowSide.isMultiTableSegment(), segmentSide.isMultiTable(),\n-                        String.format(\"First flow(id:%s, path:%s) segment and flow level multi-table flag values are \"\n-                                              + \"incompatible to each other - flow(%s) != segment(%s)\",\n+                        path.isSrcWithMultiTable(), segmentSide.isMultiTable(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIwMTQ5MQ=="}, "originalCommit": {"oid": "55bd7fd2a2f0d11930ef8cae22adfef805d1da2b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDU1NzI3OnYy", "diffSide": "RIGHT", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/BaseFlowRuleRemovalAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxOToxNTozOFrOIV03wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNlQxNTozNDoyMFrOIsrq7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc1NzI0OA==", "bodyText": "By design and implementation, BaseFlowRuleRemovalAction is supposed to be used with any FSM which extends FlowProcessingFsm. But this method requires FlowPathSwappingFsm to be provided. Can we align with initial design?", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r559757248", "createdAt": "2021-01-18T19:15:38Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/BaseFlowRuleRemovalAction.java", "diffHunk": "@@ -235,4 +238,16 @@ protected PathContext buildPathContextForRemovalIngressOnly(SwitchId switchId) {\n                 .server42MacAddress(switchProperties.getServer42MacAddress())\n                 .build();\n     }\n+\n+    protected Flow getOriginalFlowWithPaths(FlowPathSwappingFsm stateMachine, RequestedFlow originalFlow) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55bd7fd2a2f0d11930ef8cae22adfef805d1da2b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzcyMzc1OQ==", "bodyText": "Reworked.", "url": "https://github.com/telstra/open-kilda/pull/3946#discussion_r583723759", "createdAt": "2021-02-26T15:34:20Z", "author": {"login": "rozdy"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/BaseFlowRuleRemovalAction.java", "diffHunk": "@@ -235,4 +238,16 @@ protected PathContext buildPathContextForRemovalIngressOnly(SwitchId switchId) {\n                 .server42MacAddress(switchProperties.getServer42MacAddress())\n                 .build();\n     }\n+\n+    protected Flow getOriginalFlowWithPaths(FlowPathSwappingFsm stateMachine, RequestedFlow originalFlow) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc1NzI0OA=="}, "originalCommit": {"oid": "55bd7fd2a2f0d11930ef8cae22adfef805d1da2b"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2210, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}