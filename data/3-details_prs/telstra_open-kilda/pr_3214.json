{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTgzNzk5", "number": 3214, "title": "add test for isl alive confirmation via round trip latency", "bodyText": "", "createdAt": "2020-02-17T15:03:04Z", "url": "https://github.com/telstra/open-kilda/pull/3214", "merged": true, "mergeCommit": {"oid": "1504cd162ae2a9ac50a42b389d1379f5254de4d5"}, "closed": true, "closedAt": "2020-03-06T09:55:41Z", "author": {"login": "andriidovhan"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFO2vdABqjMwNDQxMDQwMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK7FDzgBqjMxMDQyODY1OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf70909d50213ad8b68fba1e052accb0738a80b9", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/cf70909d50213ad8b68fba1e052accb0738a80b9", "committedDate": "2020-02-17T15:01:18Z", "message": "add test for isl alive confirmation via round trip latency"}, "afterCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/fd21a4b2668c6779998368d188fbc2c85fa20b67", "committedDate": "2020-02-17T15:13:57Z", "message": "add test for isl alive confirmation via round trip latency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODEyODA5", "url": "https://github.com/telstra/open-kilda/pull/3214#pullrequestreview-359812809", "createdAt": "2020-02-17T15:23:38Z", "commit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyMzozOFrOFqoKfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTozNToxNFrOFqoioQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MjU1OQ==", "bodyText": "Remove 'noviflow' from everywhere.\n\nIt is not because the switch is noviflow, it is because we use round trip latency to determine the isl state\nWhen looking for switch, look at the switch features in order to determine whether the switch supports round trip latency (it can be an OVS switch in the future). The switch feature name which is used by system now is NOVIFLOW_COPY_FIELD", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r380242559", "createdAt": "2020-02-17T15:23:38Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -651,6 +654,50 @@ class LinkSpec extends HealthCheckSpecification {\n         getIsl().srcSwitch.dpId | getIsl().srcPort | getIsl().dstSwitch.dpId | null      | \"dst_port\"\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"An ISL between noviflow switches doesn't go down when one switch is DEACTIVATED\"(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDgxNA==", "bodyText": "all  round trip latency isls", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r380244814", "createdAt": "2020-02-17T15:27:44Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -651,6 +654,50 @@ class LinkSpec extends HealthCheckSpecification {\n         getIsl().srcSwitch.dpId | getIsl().srcPort | getIsl().dstSwitch.dpId | null      | \"dst_port\"\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"An ISL between noviflow switches doesn't go down when one switch is DEACTIVATED\"(){\n+        given: \"A noviflow switch\"\n+        def swToDeactivate = topology.activeSwitches.find { it.noviflow }\n+\n+        when: \"Deactivate the src switch\"\n+        def relatedIsl = topology.getRelatedIsls(swToDeactivate)\n+        def nonNoviflowIsl = relatedIsl.find { !it.dstSwitch.noviflow }\n+\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def IsSwDeactivated = true\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All ISLs are still DISCOVERED because the system uses round trip latency for ISL alive confirmation\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NTM0MQ==", "bodyText": "Why use timed loop here?", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r380245341", "createdAt": "2020-02-17T15:28:49Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -651,6 +654,50 @@ class LinkSpec extends HealthCheckSpecification {\n         getIsl().srcSwitch.dpId | getIsl().srcPort | getIsl().dstSwitch.dpId | null      | \"dst_port\"\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"An ISL between noviflow switches doesn't go down when one switch is DEACTIVATED\"(){\n+        given: \"A noviflow switch\"\n+        def swToDeactivate = topology.activeSwitches.find { it.noviflow }\n+\n+        when: \"Deactivate the src switch\"\n+        def relatedIsl = topology.getRelatedIsls(swToDeactivate)\n+        def nonNoviflowIsl = relatedIsl.find { !it.dstSwitch.noviflow }\n+\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def IsSwDeactivated = true\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All ISLs are still DISCOVERED because the system uses round trip latency for ISL alive confirmation\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        // make sure that ISLs are not in FAILED status after timeout\n+        Wrappers.timedLoop(WAIT_OFFSET / 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NTg1Nw==", "bodyText": "eachParallel. Or assert the whole loop rather than each isl", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r380245857", "createdAt": "2020-02-17T15:29:50Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -651,6 +654,50 @@ class LinkSpec extends HealthCheckSpecification {\n         getIsl().srcSwitch.dpId | getIsl().srcPort | getIsl().dstSwitch.dpId | null      | \"dst_port\"\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"An ISL between noviflow switches doesn't go down when one switch is DEACTIVATED\"(){\n+        given: \"A noviflow switch\"\n+        def swToDeactivate = topology.activeSwitches.find { it.noviflow }\n+\n+        when: \"Deactivate the src switch\"\n+        def relatedIsl = topology.getRelatedIsls(swToDeactivate)\n+        def nonNoviflowIsl = relatedIsl.find { !it.dstSwitch.noviflow }\n+\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def IsSwDeactivated = true\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All ISLs are still DISCOVERED because the system uses round trip latency for ISL alive confirmation\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        // make sure that ISLs are not in FAILED status after timeout\n+        Wrappers.timedLoop(WAIT_OFFSET / 2) {\n+            withPool {\n+                (relatedIsl - nonNoviflowIsl).everyParallel { link ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NzMzMw==", "bodyText": "This is a bit misleading. You can have a situation when you pick a switch that do not have non-noviflow neighbors. In this case your test will state that it checked that All ISLs where at least one switch is not Noviflow are FAILED, but in fact it will skip this check", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r380247333", "createdAt": "2020-02-17T15:32:38Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -651,6 +654,50 @@ class LinkSpec extends HealthCheckSpecification {\n         getIsl().srcSwitch.dpId | getIsl().srcPort | getIsl().dstSwitch.dpId | null      | \"dst_port\"\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"An ISL between noviflow switches doesn't go down when one switch is DEACTIVATED\"(){\n+        given: \"A noviflow switch\"\n+        def swToDeactivate = topology.activeSwitches.find { it.noviflow }\n+\n+        when: \"Deactivate the src switch\"\n+        def relatedIsl = topology.getRelatedIsls(swToDeactivate)\n+        def nonNoviflowIsl = relatedIsl.find { !it.dstSwitch.noviflow }\n+\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def IsSwDeactivated = true\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All ISLs are still DISCOVERED because the system uses round trip latency for ISL alive confirmation\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        // make sure that ISLs are not in FAILED status after timeout\n+        Wrappers.timedLoop(WAIT_OFFSET / 2) {\n+            withPool {\n+                (relatedIsl - nonNoviflowIsl).everyParallel { link ->\n+                    assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+                }\n+            }\n+        }\n+\n+        and: \"All ISLs where at least one switch is not Noviflow are FAILED\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NzYzNQ==", "bodyText": "camelCase", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r380247635", "createdAt": "2020-02-17T15:33:10Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -651,6 +654,50 @@ class LinkSpec extends HealthCheckSpecification {\n         getIsl().srcSwitch.dpId | getIsl().srcPort | getIsl().dstSwitch.dpId | null      | \"dst_port\"\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"An ISL between noviflow switches doesn't go down when one switch is DEACTIVATED\"(){\n+        given: \"A noviflow switch\"\n+        def swToDeactivate = topology.activeSwitches.find { it.noviflow }\n+\n+        when: \"Deactivate the src switch\"\n+        def relatedIsl = topology.getRelatedIsls(swToDeactivate)\n+        def nonNoviflowIsl = relatedIsl.find { !it.dstSwitch.noviflow }\n+\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def IsSwDeactivated = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0ODczNw==", "bodyText": "I'm surprised that no other tests required any refactoring. There should be tests that check that ISLs go to failed status when a switch fails. And they should become broken now", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r380248737", "createdAt": "2020-02-17T15:35:14Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/LinkSpec.groovy", "diffHunk": "@@ -651,6 +654,50 @@ class LinkSpec extends HealthCheckSpecification {\n         getIsl().srcSwitch.dpId | getIsl().srcPort | getIsl().dstSwitch.dpId | null      | \"dst_port\"\n     }\n \n+    @Tidy\n+    @Tags(HARDWARE)\n+    def \"An ISL between noviflow switches doesn't go down when one switch is DEACTIVATED\"(){\n+        given: \"A noviflow switch\"\n+        def swToDeactivate = topology.activeSwitches.find { it.noviflow }\n+\n+        when: \"Deactivate the src switch\"\n+        def relatedIsl = topology.getRelatedIsls(swToDeactivate)\n+        def nonNoviflowIsl = relatedIsl.find { !it.dstSwitch.noviflow }\n+\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def IsSwDeactivated = true\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All ISLs are still DISCOVERED because the system uses round trip latency for ISL alive confirmation\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        // make sure that ISLs are not in FAILED status after timeout\n+        Wrappers.timedLoop(WAIT_OFFSET / 2) {\n+            withPool {\n+                (relatedIsl - nonNoviflowIsl).everyParallel { link ->\n+                    assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+                }\n+            }\n+        }\n+\n+        and: \"All ISLs where at least one switch is not Noviflow are FAILED\"\n+        withPool {\n+            nonNoviflowIsl.everyParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        IsSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd21a4b2668c6779998368d188fbc2c85fa20b67", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/fd21a4b2668c6779998368d188fbc2c85fa20b67", "committedDate": "2020-02-17T15:13:57Z", "message": "add test for isl alive confirmation via round trip latency"}, "afterCommit": {"oid": "538efa12f47a33742be375be15505f8a8613641d", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/538efa12f47a33742be375be15505f8a8613641d", "committedDate": "2020-02-18T08:28:21Z", "message": "add test for isl alive confirmation via round trip latency"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "538efa12f47a33742be375be15505f8a8613641d", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/538efa12f47a33742be375be15505f8a8613641d", "committedDate": "2020-02-18T08:28:21Z", "message": "add test for isl alive confirmation via round trip latency"}, "afterCommit": {"oid": "489a8932e2c3471d56a27a819c63e512aa802364", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/489a8932e2c3471d56a27a819c63e512aa802364", "committedDate": "2020-02-18T10:52:46Z", "message": "add missing tags"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "489a8932e2c3471d56a27a819c63e512aa802364", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/489a8932e2c3471d56a27a819c63e512aa802364", "committedDate": "2020-02-18T10:52:46Z", "message": "add missing tags"}, "afterCommit": {"oid": "59fe1b0fb880f2bbd45c381917b9ed3dab7ba1ac", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/59fe1b0fb880f2bbd45c381917b9ed3dab7ba1ac", "committedDate": "2020-02-18T14:19:01Z", "message": "add missing tags"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59fe1b0fb880f2bbd45c381917b9ed3dab7ba1ac", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/59fe1b0fb880f2bbd45c381917b9ed3dab7ba1ac", "committedDate": "2020-02-18T14:19:01Z", "message": "add missing tags"}, "afterCommit": {"oid": "33fa596ac772a398c87f24ca5d4097d88d47bf4c", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/33fa596ac772a398c87f24ca5d4097d88d47bf4c", "committedDate": "2020-02-21T13:48:17Z", "message": "fix URL for blocking fl via lab-api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33fa596ac772a398c87f24ca5d4097d88d47bf4c", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/33fa596ac772a398c87f24ca5d4097d88d47bf4c", "committedDate": "2020-02-21T13:48:17Z", "message": "fix URL for blocking fl via lab-api"}, "afterCommit": {"oid": "8d422889040f2d12ce56cd646ff85c1aa832a66c", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/8d422889040f2d12ce56cd646ff85c1aa832a66c", "committedDate": "2020-02-24T14:30:36Z", "message": "fix URL for blocking fl via lab-api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d422889040f2d12ce56cd646ff85c1aa832a66c", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/8d422889040f2d12ce56cd646ff85c1aa832a66c", "committedDate": "2020-02-24T14:30:36Z", "message": "fix URL for blocking fl via lab-api"}, "afterCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/3352f59996d79923feb1f2db3a39d8e1aed4d8b0", "committedDate": "2020-02-24T14:34:34Z", "message": "fix URL for blocking fl via lab-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDM0Nzc1", "url": "https://github.com/telstra/open-kilda/pull/3214#pullrequestreview-363434775", "createdAt": "2020-02-24T14:38:08Z", "commit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDozODowOVrOFti25g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToyNzoyMFrOFtktsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMwMTM1MA==", "bodyText": "Reason looks unrelated", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383301350", "createdAt": "2020-02-24T14:38:09Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -500,6 +501,62 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n     }\n \n     @Tidy\n+    @Tags(HARDWARE)\n+    def \"Flow in 'UP' status is not rerouted after switchUp event\"() {\n+        given: \"Two active neighboring switches which support round trip latency\"\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            swP.paths.findAll { path ->\n+                path.size() == 2 && pathHelper.getInvolvedSwitches(path).every {\n+                    it.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+            }\n+        } ?: assumeTrue(\"No suiting switches found for the first flow\", false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMwMTU5Ng==", "bodyText": "remove", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383301596", "createdAt": "2020-02-24T14:38:32Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -500,6 +501,62 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n     }\n \n     @Tidy\n+    @Tags(HARDWARE)\n+    def \"Flow in 'UP' status is not rerouted after switchUp event\"() {\n+        given: \"Two active neighboring switches which support round trip latency\"\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            swP.paths.findAll { path ->\n+                path.size() == 2 && pathHelper.getInvolvedSwitches(path).every {\n+                    it.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+            }\n+        } ?: assumeTrue(\"No suiting switches found for the first flow\", false)\n+\n+        and: \"A flow on the given switch pair\"\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flowHelperV2.addFlow(flow)\n+        println(flow.flowId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMwMjM3MQ==", "bodyText": "Ok, but it is not the reason to use isl discovery timeout while waiting. It is not related. Hardcode a separate timeout", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383302371", "createdAt": "2020-02-24T14:39:44Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -500,6 +501,62 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n     }\n \n     @Tidy\n+    @Tags(HARDWARE)\n+    def \"Flow in 'UP' status is not rerouted after switchUp event\"() {\n+        given: \"Two active neighboring switches which support round trip latency\"\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            swP.paths.findAll { path ->\n+                path.size() == 2 && pathHelper.getInvolvedSwitches(path).every {\n+                    it.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+            }\n+        } ?: assumeTrue(\"No suiting switches found for the first flow\", false)\n+\n+        and: \"A flow on the given switch pair\"\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flowHelperV2.addFlow(flow)\n+        println(flow.flowId)\n+\n+        when: \"Deactivate the src switch\"\n+        def swToDeactivate = switchPair.src\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMwNDA0Mw==", "bodyText": "really required only if lockKeeper.reviveSwitch(swToDeactivate) happen", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383304043", "createdAt": "2020-02-24T14:42:31Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/AutoRerouteV2Spec.groovy", "diffHunk": "@@ -500,6 +501,62 @@ class AutoRerouteV2Spec extends HealthCheckSpecification {\n     }\n \n     @Tidy\n+    @Tags(HARDWARE)\n+    def \"Flow in 'UP' status is not rerouted after switchUp event\"() {\n+        given: \"Two active neighboring switches which support round trip latency\"\n+        def switchPair = topologyHelper.getAllNeighboringSwitchPairs().find { swP ->\n+            swP.paths.findAll { path ->\n+                path.size() == 2 && pathHelper.getInvolvedSwitches(path).every {\n+                    it.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+            }\n+        } ?: assumeTrue(\"No suiting switches found for the first flow\", false)\n+\n+        and: \"A flow on the given switch pair\"\n+        def flow = flowHelperV2.randomFlow(switchPair)\n+        flowHelperV2.addFlow(flow)\n+        println(flow.flowId)\n+\n+        when: \"Deactivate the src switch\"\n+        def swToDeactivate = switchPair.src\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"Flow is UP\"\n+        northbound.getFlowStatus(flow.flowId).status == FlowState.UP\n+\n+        when: \"Activate the src switch\"\n+        lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+        isSwDeactivated = false\n+\n+        then: \"System doesn't try to reroute the flow on the switchUp event because flow is already in UP state\"\n+        Wrappers.timedLoop(rerouteDelay + WAIT_OFFSET / 2) {\n+            assert northbound.getFlowHistory(flow.flowId).findAll { it.action == \"Flow rerouting\" }.empty\n+        }\n+\n+        cleanup:\n+        flow && flowHelperV2.deleteFlow(flow.flowId)\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(WAIT_OFFSET) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMwOTQ0OQ==", "bodyText": "same", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383309449", "createdAt": "2020-02-24T14:51:22Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMDk2Ng==", "bodyText": "I think it's better to first wait for failed ISLs, and then show that round-trip ISLs remain discovered on the other hand. Also, this will allow you to sleep for less time and then use wait, instead of sleeping for too long.", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383310966", "createdAt": "2020-02-24T14:53:48Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMTc3MA==", "bodyText": "when: \"Deactivate the switch\"\nthen: \"All round trip latency ISLs are still DISCOVERED\n\nNot clear steps as for me. If you use word 'still', please mention that you waited for timeout time, or add wait as a separate step", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383311770", "createdAt": "2020-02-24T14:55:09Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNDM1NQ==", "bodyText": "same. still related to what?", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383314355", "createdAt": "2020-02-24T14:59:05Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNTY2OA==", "bodyText": "why you oversleep if you can wait?", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383315668", "createdAt": "2020-02-24T15:01:14Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNjYxNg==", "bodyText": "I'm not sure that I like the scenario. Isn't it better to simultaneously knockout 2 switches? The part that proves that ISL will remain DISCOVERED when 1 side is down is already covered in previous test, while simultaneous knockout may be an edge case (consult with Dmitriy)", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383316616", "createdAt": "2020-02-24T15:02:45Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isDstSwDeactivated && lockKeeper.reviveSwitch(dstSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMjUxOA==", "bodyText": "I don't think that we should call it 'Deactivate the switch' in these scenarios. Deactivating the switch may be understood as if the switch actually became down. In these scenarios it is very important that we actually lose connection to switch, but the switch itself remains operable.", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383322518", "createdAt": "2020-02-24T15:12:50Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMzYxNg==", "bodyText": "Is it mandatory to verify this again and again? It is actually a very time-consuming verification", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383323616", "createdAt": "2020-02-24T15:14:37Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isDstSwDeactivated && lockKeeper.reviveSwitch(dstSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the src switch is DEACTIVATED and round trip latency rule is removed \\\n+on the dst switch\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        and: \"Round trip status is ACTIVE for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        when: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNDE4MQ==", "bodyText": "don't sleep. use wait.", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383324181", "createdAt": "2020-02-24T15:15:31Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isDstSwDeactivated && lockKeeper.reviveSwitch(dstSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the src switch is DEACTIVATED and round trip latency rule is removed \\\n+on the dst switch\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        and: \"Round trip status is ACTIVE for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        when: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status for forward direction is not available and ACTIVE in reverse direction\"\n+        !database.getIslRoundTripStatus(roundTripIsl)\n+        database.getIslRoundTripStatus(roundTripIsl.reversed) == IslStatus.ACTIVE\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        def isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        then: \"The round trip latecny ISL is FAILED\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNTAwMQ==", "bodyText": "why? Also don't really understand what are you testing here if you will again remove this rule on next step", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383325001", "createdAt": "2020-02-24T15:16:48Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isDstSwDeactivated && lockKeeper.reviveSwitch(dstSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the src switch is DEACTIVATED and round trip latency rule is removed \\\n+on the dst switch\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        and: \"Round trip status is ACTIVE for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        when: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status for forward direction is not available and ACTIVE in reverse direction\"\n+        !database.getIslRoundTripStatus(roundTripIsl)\n+        database.getIslRoundTripStatus(roundTripIsl.reversed) == IslStatus.ACTIVE\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        def isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        then: \"The round trip latecny ISL is FAILED\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        and: \"Round trip status is not available for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert !database.getIslRoundTripStatus(isl)\n+        }\n+\n+        when: \"Install ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = false\n+        Wrappers.wait(RULES_INSTALLATION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+\n+        then: \"The round trip ISL is still FAILED\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNjMxMA==", "bodyText": "switch", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383326310", "createdAt": "2020-02-24T15:18:53Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isDstSwDeactivated && lockKeeper.reviveSwitch(dstSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the src switch is DEACTIVATED and round trip latency rule is removed \\\n+on the dst switch\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        and: \"Round trip status is ACTIVE for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        when: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status for forward direction is not available and ACTIVE in reverse direction\"\n+        !database.getIslRoundTripStatus(roundTripIsl)\n+        database.getIslRoundTripStatus(roundTripIsl.reversed) == IslStatus.ACTIVE\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        def isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        then: \"The round trip latecny ISL is FAILED\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        and: \"Round trip status is not available for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert !database.getIslRoundTripStatus(isl)\n+        }\n+\n+        when: \"Install ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = false\n+        Wrappers.wait(RULES_INSTALLATION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+\n+        then: \"The round trip ISL is still FAILED\"\n+        //ISL will be in the FAILED state until gets any discovery packet\n+        sleep((discoveryInterval + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch again\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        and: \"Activate the src switches\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNzE0OA==", "bodyText": "Why do you expect it to be active in both directions if you removed the RTL rule on L194 and never installed it back?", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383327148", "createdAt": "2020-02-24T15:20:16Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isDstSwDeactivated && lockKeeper.reviveSwitch(dstSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the src switch is DEACTIVATED and round trip latency rule is removed \\\n+on the dst switch\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        and: \"Round trip status is ACTIVE for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        when: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status for forward direction is not available and ACTIVE in reverse direction\"\n+        !database.getIslRoundTripStatus(roundTripIsl)\n+        database.getIslRoundTripStatus(roundTripIsl.reversed) == IslStatus.ACTIVE\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        def isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        then: \"The round trip latecny ISL is FAILED\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        and: \"Round trip status is not available for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert !database.getIslRoundTripStatus(isl)\n+        }\n+\n+        when: \"Install ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = false\n+        Wrappers.wait(RULES_INSTALLATION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+\n+        then: \"The round trip ISL is still FAILED\"\n+        //ISL will be in the FAILED state until gets any discovery packet\n+        sleep((discoveryInterval + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch again\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        and: \"Activate the src switches\"\n+        lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+        isSrcSwDeactivated = false\n+\n+        then: \"Round trip isl is DISCOVERED again\"\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status is available again for the given ISL in both directions\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMTAzNQ==", "bodyText": "I don't understand the purpose of this test. The situation with 'missing RTL rule' is already like maximum strange. Ok, got 1 strange test for it. But this is a second test which does not test anything new over the  \"A round trip latency ISL goes down when the src switch is DEACTIVATED and round trip latency rule is removed \\ on the dst switch\". So I'm kinda confused by what is being tested here again", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383331035", "createdAt": "2020-02-24T15:26:23Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isDstSwDeactivated && lockKeeper.reviveSwitch(dstSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the src switch is DEACTIVATED and round trip latency rule is removed \\\n+on the dst switch\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        and: \"Round trip status is ACTIVE for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        when: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status for forward direction is not available and ACTIVE in reverse direction\"\n+        !database.getIslRoundTripStatus(roundTripIsl)\n+        database.getIslRoundTripStatus(roundTripIsl.reversed) == IslStatus.ACTIVE\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        def isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        then: \"The round trip latecny ISL is FAILED\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        and: \"Round trip status is not available for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert !database.getIslRoundTripStatus(isl)\n+        }\n+\n+        when: \"Install ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = false\n+        Wrappers.wait(RULES_INSTALLATION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+\n+        then: \"The round trip ISL is still FAILED\"\n+        //ISL will be in the FAILED state until gets any discovery packet\n+        sleep((discoveryInterval + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch again\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        and: \"Activate the src switches\"\n+        lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+        isSrcSwDeactivated = false\n+\n+        then: \"Round trip isl is DISCOVERED again\"\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status is available again for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isRoundTripRuleDeleted && northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the switch supports round trip but rule for this purpose is not installed\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        def isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        and: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        when: \"Install ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = false\n+        Wrappers.wait(RULES_INSTALLATION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+\n+        then: \"The round trip latency ISL is still FAILED\"\n+        //ISL will be in the FAILED state until gets any discovery packet\n+        sleep((discoveryInterval + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isRoundTripRuleDeleted && northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMTc2MQ==", "bodyText": "Review all the sleeps. Remove unrequired sleeps, reduce the amount of duplicated time-consuming verifications.", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383331761", "createdAt": "2020-02-24T15:27:20Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,287 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch is DEACTIVATED\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Deactivate the switch\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"All round trip latency ISLs are still DISCOVERED (the system uses round trip latency \\\n+for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        withPool {\n+            roundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.DISCOVERED\n+            }\n+        }\n+\n+        and: \"All non round trip latency ISLs are FAILED\"\n+        withPool {\n+            nonRoundTripIsls.eachParallel { link ->\n+                assert northbound.getLink(link).state == IslChangeType.FAILED\n+            }\n+        }\n+\n+        cleanup:\n+        isSwDeactivated && lockKeeper.reviveSwitch(swToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when both switches are DEACTIVATED\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSwToDeactivate = roundTripIsl.dstSwitch\n+\n+        when: \"Deactivate the src switch\"\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        when: \"Deactivate the dst switch\"\n+        lockKeeper.knockoutSwitch(dstSwToDeactivate)\n+        def isDstSwDeactivated = true\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED (because round_trip_status is not available in DB for current ISL \\\n+on both switches)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isDstSwDeactivated && lockKeeper.reviveSwitch(dstSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getSwitch(dstSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the src switch is DEACTIVATED and round trip latency rule is removed \\\n+on the dst switch\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        and: \"Round trip status is ACTIVE for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        when: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip ISL is still DISCOVERED (the system uses round trip latency for ISL alive confirmation)\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status for forward direction is not available and ACTIVE in reverse direction\"\n+        !database.getIslRoundTripStatus(roundTripIsl)\n+        database.getIslRoundTripStatus(roundTripIsl.reversed) == IslStatus.ACTIVE\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        def isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        then: \"The round trip latecny ISL is FAILED\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        and: \"Round trip status is not available for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert !database.getIslRoundTripStatus(isl)\n+        }\n+\n+        when: \"Install ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = false\n+        Wrappers.wait(RULES_INSTALLATION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+\n+        then: \"The round trip ISL is still FAILED\"\n+        //ISL will be in the FAILED state until gets any discovery packet\n+        sleep((discoveryInterval + WAIT_OFFSET / 2) * 1000 as long)\n+        northbound.getLink(roundTripIsl).state == IslChangeType.FAILED\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch again\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        and: \"Activate the src switches\"\n+        lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+        isSrcSwDeactivated = false\n+\n+        then: \"Round trip isl is DISCOVERED again\"\n+        northbound.getLink(roundTripIsl).state == IslChangeType.DISCOVERED\n+\n+        and: \"Round trip status is available again for the given ISL in both directions\"\n+        [roundTripIsl, roundTripIsl.reversed].each { isl ->\n+            assert database.getIslRoundTripStatus(isl) == IslStatus.ACTIVE\n+        }\n+\n+        cleanup:\n+        isSrcSwDeactivated && lockKeeper.reviveSwitch(srcSwToDeactivate)\n+        isRoundTripRuleDeleted && northbound.installSwitchRules(dstSw.dpId, InstallRulesAction.INSTALL_ROUND_TRIP_LATENCY)\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.ACTIVATED\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.DISCOVERED\n+            }.size() == topology.islsForActiveSwitches.size() * 2\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.empty\n+        }\n+    }\n+\n+    @Tidy\n+    def \"A round trip latency ISL goes down when the switch supports round trip but rule for this purpose is not installed\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl\n+        def srcSwToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsl = topology.getRelatedIsls(sw).find {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsl\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable link\", false)\n+        def dstSw = roundTripIsl.dstSwitch\n+\n+        when: \"Delete ROUND_TRIP_LATENCY_RULE_COOKIE on the dst switch\"\n+        northbound.deleteSwitchRules(dstSw.dpId, DeleteRulesAction.REMOVE_ROUND_TRIP_LATENCY)\n+        def isRoundTripRuleDeleted = true\n+        Wrappers.wait(RULES_DELETION_TIME) {\n+            assert northbound.validateSwitch(dstSw.dpId).rules.missing.size() == 1\n+        }\n+\n+        and: \"Deactivate the src switch\"\n+        lockKeeper.knockoutSwitch(srcSwToDeactivate)\n+        def isSrcSwDeactivated = true\n+        // it takes more time to DEACTIVATE a switch via the 'knockoutSwitch' method on the stage env\n+        Wrappers.wait(discoveryTimeout + WAIT_OFFSET) {\n+            assert northbound.getSwitch(srcSwToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        then: \"The round trip latency ISL is FAILED\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0"}, "originalPosition": 261}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3352f59996d79923feb1f2db3a39d8e1aed4d8b0", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/3352f59996d79923feb1f2db3a39d8e1aed4d8b0", "committedDate": "2020-02-24T14:34:34Z", "message": "fix URL for blocking fl via lab-api"}, "afterCommit": {"oid": "4cc37f2557e9e5e6a6acc46679b0f58cc2ead9da", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/4cc37f2557e9e5e6a6acc46679b0f58cc2ead9da", "committedDate": "2020-02-25T10:53:33Z", "message": "fix URL for blocking fl via lab-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDYxMjE3", "url": "https://github.com/telstra/open-kilda/pull/3214#pullrequestreview-364061217", "createdAt": "2020-02-25T11:14:59Z", "commit": {"oid": "4cc37f2557e9e5e6a6acc46679b0f58cc2ead9da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxNDo1OVrOFuCNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxNDo1OVrOFuCNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNTEwOQ==", "bodyText": "still don't understand the  + WAIT_OFFSET / 2 thing. why not sleep for discoveryTimeout and then use wait in order to wait for FAILED status.?", "url": "https://github.com/telstra/open-kilda/pull/3214#discussion_r383815109", "createdAt": "2020-02-25T11:14:59Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.openkilda.functionaltests.spec.links\n+\n+import static groovyx.gpars.GParsPool.withPool\n+import static org.junit.Assume.assumeTrue\n+import static org.openkilda.functionaltests.extension.tags.Tag.HARDWARE\n+import static org.openkilda.testing.Constants.RULES_DELETION_TIME\n+import static org.openkilda.testing.Constants.RULES_INSTALLATION_TIME\n+import static org.openkilda.testing.Constants.WAIT_OFFSET\n+\n+import org.openkilda.functionaltests.HealthCheckSpecification\n+import org.openkilda.functionaltests.extension.failfast.Tidy\n+import org.openkilda.functionaltests.extension.tags.Tags\n+import org.openkilda.functionaltests.helpers.Wrappers\n+import org.openkilda.messaging.command.switches.DeleteRulesAction\n+import org.openkilda.messaging.command.switches.InstallRulesAction\n+import org.openkilda.messaging.info.event.IslChangeType\n+import org.openkilda.messaging.info.event.SwitchChangeType\n+import org.openkilda.model.IslStatus\n+import org.openkilda.model.SwitchFeature\n+import org.openkilda.testing.model.topology.TopologyDefinition.Isl\n+\n+import spock.lang.See\n+\n+@Tags(HARDWARE)\n+// virtual env doesn't support round trip latency\n+@See(\"https://github.com/telstra/open-kilda/tree/develop/docs/design/network-discovery\")\n+class RoundTripIslSpec extends HealthCheckSpecification {\n+\n+    /*we need this variable because it takes more time to DEACTIVATE a switch\n+    via the 'knockoutSwitch' method on the stage env*/\n+    Integer customWaitOffset = WAIT_OFFSET * 4\n+\n+    @Tidy\n+    def \"A round trip latency ISL doesn't go down when one switch lose connection to FL\"() {\n+        given: \"A switch with/without round trip latency ISLs\"\n+        def roundTripIsls\n+        def nonRoundTripIsls\n+        def swToDeactivate = topology.activeSwitches.find { sw ->\n+            if (sw.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)) {\n+                roundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                nonRoundTripIsls = topology.getRelatedIsls(sw).findAll {\n+                    !it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+                }\n+                roundTripIsls && nonRoundTripIsls\n+            }\n+        } ?: assumeTrue(\"Wasn't able to find a switch with suitable links\", false)\n+\n+        when: \"Simulate connection lose between the switch and FL, the switch becomes DEACTIVATED and remains operable\"\n+        lockKeeper.knockoutSwitch(swToDeactivate)\n+        def isSwDeactivated = true\n+        Wrappers.wait(customWaitOffset) {\n+            assert northbound.getSwitch(swToDeactivate.dpId).state == SwitchChangeType.DEACTIVATED\n+        }\n+\n+        and: \"Wait discoveryTimeout\"\n+        sleep((discoveryTimeout + WAIT_OFFSET / 2) * 1000 as long)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc37f2557e9e5e6a6acc46679b0f58cc2ead9da"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4cc37f2557e9e5e6a6acc46679b0f58cc2ead9da", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/4cc37f2557e9e5e6a6acc46679b0f58cc2ead9da", "committedDate": "2020-02-25T10:53:33Z", "message": "fix URL for blocking fl via lab-api"}, "afterCommit": {"oid": "b90a2a6e33cb0007bdbc73bb97d8c6efdfe5fe89", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/b90a2a6e33cb0007bdbc73bb97d8c6efdfe5fe89", "committedDate": "2020-02-25T12:09:37Z", "message": "fix URL for blocking fl via lab-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjI3MjEw", "url": "https://github.com/telstra/open-kilda/pull/3214#pullrequestreview-364227210", "createdAt": "2020-02-25T15:21:47Z", "commit": {"oid": "b90a2a6e33cb0007bdbc73bb97d8c6efdfe5fe89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b90a2a6e33cb0007bdbc73bb97d8c6efdfe5fe89", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/b90a2a6e33cb0007bdbc73bb97d8c6efdfe5fe89", "committedDate": "2020-02-25T12:09:37Z", "message": "fix URL for blocking fl via lab-api"}, "afterCommit": {"oid": "56c943444698b8e415ed62c4f8a7d11420431fff", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/56c943444698b8e415ed62c4f8a7d11420431fff", "committedDate": "2020-03-02T11:53:12Z", "message": "fix URL for blocking fl via lab-api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56c943444698b8e415ed62c4f8a7d11420431fff", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/56c943444698b8e415ed62c4f8a7d11420431fff", "committedDate": "2020-03-02T11:53:12Z", "message": "fix URL for blocking fl via lab-api"}, "afterCommit": {"oid": "ac38602ca163ac4230452fa3c6471a8e9b72bc25", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/ac38602ca163ac4230452fa3c6471a8e9b72bc25", "committedDate": "2020-03-03T13:17:56Z", "message": "ignore test \"Able to delete an active switch with active ISLs if using force delete\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac38602ca163ac4230452fa3c6471a8e9b72bc25", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/ac38602ca163ac4230452fa3c6471a8e9b72bc25", "committedDate": "2020-03-03T13:17:56Z", "message": "ignore test \"Able to delete an active switch with active ISLs if using force delete\""}, "afterCommit": {"oid": "91a4ba7a3f847bccc41ff396e78c734557708169", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/91a4ba7a3f847bccc41ff396e78c734557708169", "committedDate": "2020-03-03T13:17:56Z", "message": "fix URL for blocking fl via lab-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df369c1fb9f2a14f31c01936bb36d2eabb41bdf", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/7df369c1fb9f2a14f31c01936bb36d2eabb41bdf", "committedDate": "2020-03-06T07:34:59Z", "message": "add test for isl alive confirmation via round trip latency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e123d065427cb3b152a7e9a0f2fa40529f82977e", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/e123d065427cb3b152a7e9a0f2fa40529f82977e", "committedDate": "2020-03-06T07:34:59Z", "message": "add missing tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3108425f6918d7e773255d7370839c701d94f5a", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/f3108425f6918d7e773255d7370839c701d94f5a", "committedDate": "2020-03-06T07:34:59Z", "message": "fix URL for blocking fl via lab-api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91a4ba7a3f847bccc41ff396e78c734557708169", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/91a4ba7a3f847bccc41ff396e78c734557708169", "committedDate": "2020-03-03T13:17:56Z", "message": "fix URL for blocking fl via lab-api"}, "afterCommit": {"oid": "f3108425f6918d7e773255d7370839c701d94f5a", "author": {"user": {"login": "andriidovhan", "name": "AndriiDovhan"}}, "url": "https://github.com/telstra/open-kilda/commit/f3108425f6918d7e773255d7370839c701d94f5a", "committedDate": "2020-03-06T07:34:59Z", "message": "fix URL for blocking fl via lab-api"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3715, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}