{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MzI5NTIw", "number": 3635, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowMTo1NlrOEOmChw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODozMzoyNFrOEPBzZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzM4NzU5OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudSpec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowMTo1NlrOGx1CBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyODo0OVrOGx-H3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwMjI3OA==", "bodyText": "Wait inside wait? I don't really get it. Either change how waitForIslStatus works or remove it and do a common wait for isls without islUtils.waitForIslStatus", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r454902278", "createdAt": "2020-07-15T09:01:56Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudSpec.groovy", "diffHunk": "@@ -730,7 +730,9 @@ class FlowCrudSpec extends HealthCheckSpecification {\n         def newIsl = islUtils.replug(isl, false, notConnectedIsl, true, true)\n \n         islUtils.waitForIslStatus([isl, isl.reversed], MOVED)\n-        islUtils.waitForIslStatus([newIsl, newIsl.reversed], DISCOVERED)\n+        Wrappers.wait(discoveryFailedInterval + WAIT_OFFSET) {\n+            islUtils.waitForIslStatus([newIsl, newIsl.reversed], DISCOVERED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1MTIzMQ==", "bodyText": "agree, my bad(", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r455051231", "createdAt": "2020-07-15T13:28:49Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudSpec.groovy", "diffHunk": "@@ -730,7 +730,9 @@ class FlowCrudSpec extends HealthCheckSpecification {\n         def newIsl = islUtils.replug(isl, false, notConnectedIsl, true, true)\n \n         islUtils.waitForIslStatus([isl, isl.reversed], MOVED)\n-        islUtils.waitForIslStatus([newIsl, newIsl.reversed], DISCOVERED)\n+        Wrappers.wait(discoveryFailedInterval + WAIT_OFFSET) {\n+            islUtils.waitForIslStatus([newIsl, newIsl.reversed], DISCOVERED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwMjI3OA=="}, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzM5NTU3OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowNDoxM1rOGx1HFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1OTo0N1rOGx_gkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwMzU3Mg==", "bodyText": "Default traffgen port may change, it is configurable. Instead of doing such an assumption you should get switch ports and find a port without isl", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r454903572", "createdAt": "2020-07-15T09:04:13Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "diffHunk": "@@ -86,4 +88,26 @@ class CheckLoggingSpec extends HealthCheckSpecification {\n                     \"Storm should generate a warning message about not being able to find the flow\"\n         }\n     }\n+\n+    def \"Check push discovery package logging\"() {\n+        given: \"Two port(with/without ISL)\"\n+        def sw = topology.activeTraffGens*.switchConnected.first()\n+        def portWithIsl = topology.getRelatedIsls(sw).first().srcPort\n+        def portWithoutIsl = 10 //default port for traffgen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3MzkzNw==", "bodyText": "agree, fixed", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r455073937", "createdAt": "2020-07-15T13:59:47Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "diffHunk": "@@ -86,4 +88,26 @@ class CheckLoggingSpec extends HealthCheckSpecification {\n                     \"Storm should generate a warning message about not being able to find the flow\"\n         }\n     }\n+\n+    def \"Check push discovery package logging\"() {\n+        given: \"Two port(with/without ISL)\"\n+        def sw = topology.activeTraffGens*.switchConnected.first()\n+        def portWithIsl = topology.getRelatedIsls(sw).first().srcPort\n+        def portWithoutIsl = 10 //default port for traffgen", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwMzU3Mg=="}, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQwNjA1OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowNzoxNlrOGx1N0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDowNzowOFrOGzNXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNTI5Ng==", "bodyText": "the '60' number should be bind to the actual config", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r454905296", "createdAt": "2020-07-15T09:07:16Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "diffHunk": "@@ -86,4 +88,26 @@ class CheckLoggingSpec extends HealthCheckSpecification {\n                     \"Storm should generate a warning message about not being able to find the flow\"\n         }\n     }\n+\n+    def \"Check push discovery package logging\"() {\n+        given: \"Two port(with/without ISL)\"\n+        def sw = topology.activeTraffGens*.switchConnected.first()\n+        def portWithIsl = topology.getRelatedIsls(sw).first().srcPort\n+        def portWithoutIsl = 10 //default port for traffgen\n+\n+        when: \"Retrieve logs for port with ISL for last 1 minute\"\n+        def result\n+\n+        then: \"There should be 1 message of push discovery for port without ISL and more than 1 for port with ISL\"\n+        Wrappers.wait(discoveryFailedInterval + WAIT_OFFSET) {\n+            result = elastic.getLogs(new ElasticQueryBuilder().setTags(KildaTags.FLOODLIGHT)\n+                    .setLevel(\"INFO\").setTimeRange(60).build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3MTU3MA==", "bodyText": "this number is described in the when block description (1 minute)", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r455071570", "createdAt": "2020-07-15T13:56:42Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "diffHunk": "@@ -86,4 +88,26 @@ class CheckLoggingSpec extends HealthCheckSpecification {\n                     \"Storm should generate a warning message about not being able to find the flow\"\n         }\n     }\n+\n+    def \"Check push discovery package logging\"() {\n+        given: \"Two port(with/without ISL)\"\n+        def sw = topology.activeTraffGens*.switchConnected.first()\n+        def portWithIsl = topology.getRelatedIsls(sw).first().srcPort\n+        def portWithoutIsl = 10 //default port for traffgen\n+\n+        when: \"Retrieve logs for port with ISL for last 1 minute\"\n+        def result\n+\n+        then: \"There should be 1 message of push discovery for port without ISL and more than 1 for port with ISL\"\n+        Wrappers.wait(discoveryFailedInterval + WAIT_OFFSET) {\n+            result = elastic.getLogs(new ElasticQueryBuilder().setTags(KildaTags.FLOODLIGHT)\n+                    .setLevel(\"INFO\").setTimeRange(60).build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNTI5Ng=="}, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyMDkzMw==", "bodyText": "if discovery.slow.poll.interval is changed to 59 instead of 60, then you can potentially see 2 push discovery messages for down port in the last 60 seconds", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r455620933", "createdAt": "2020-07-16T08:38:29Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "diffHunk": "@@ -86,4 +88,26 @@ class CheckLoggingSpec extends HealthCheckSpecification {\n                     \"Storm should generate a warning message about not being able to find the flow\"\n         }\n     }\n+\n+    def \"Check push discovery package logging\"() {\n+        given: \"Two port(with/without ISL)\"\n+        def sw = topology.activeTraffGens*.switchConnected.first()\n+        def portWithIsl = topology.getRelatedIsls(sw).first().srcPort\n+        def portWithoutIsl = 10 //default port for traffgen\n+\n+        when: \"Retrieve logs for port with ISL for last 1 minute\"\n+        def result\n+\n+        then: \"There should be 1 message of push discovery for port without ISL and more than 1 for port with ISL\"\n+        Wrappers.wait(discoveryFailedInterval + WAIT_OFFSET) {\n+            result = elastic.getLogs(new ElasticQueryBuilder().setTags(KildaTags.FLOODLIGHT)\n+                    .setLevel(\"INFO\").setTimeRange(60).build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNTI5Ng=="}, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTQ3Mg==", "bodyText": "This test can  be unstable, it was deleted.", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r456349472", "createdAt": "2020-07-17T10:07:08Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "diffHunk": "@@ -86,4 +88,26 @@ class CheckLoggingSpec extends HealthCheckSpecification {\n                     \"Storm should generate a warning message about not being able to find the flow\"\n         }\n     }\n+\n+    def \"Check push discovery package logging\"() {\n+        given: \"Two port(with/without ISL)\"\n+        def sw = topology.activeTraffGens*.switchConnected.first()\n+        def portWithIsl = topology.getRelatedIsls(sw).first().srcPort\n+        def portWithoutIsl = 10 //default port for traffgen\n+\n+        when: \"Retrieve logs for port with ISL for last 1 minute\"\n+        def result\n+\n+        then: \"There should be 1 message of push discovery for port without ISL and more than 1 for port with ISL\"\n+        Wrappers.wait(discoveryFailedInterval + WAIT_OFFSET) {\n+            result = elastic.getLogs(new ElasticQueryBuilder().setTags(KildaTags.FLOODLIGHT)\n+                    .setLevel(\"INFO\").setTimeRange(60).build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNTI5Ng=="}, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQxMzMyOnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowOToxN1rOGx1Sgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoyMzo0NVrOGyAldg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNjQ5OQ==", "bodyText": "can this number be calculated based of discovery interval and requested timerange?", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r454906499", "createdAt": "2020-07-15T09:09:17Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "diffHunk": "@@ -86,4 +88,26 @@ class CheckLoggingSpec extends HealthCheckSpecification {\n                     \"Storm should generate a warning message about not being able to find the flow\"\n         }\n     }\n+\n+    def \"Check push discovery package logging\"() {\n+        given: \"Two port(with/without ISL)\"\n+        def sw = topology.activeTraffGens*.switchConnected.first()\n+        def portWithIsl = topology.getRelatedIsls(sw).first().srcPort\n+        def portWithoutIsl = 10 //default port for traffgen\n+\n+        when: \"Retrieve logs for port with ISL for last 1 minute\"\n+        def result\n+\n+        then: \"There should be 1 message of push discovery for port without ISL and more than 1 for port with ISL\"\n+        Wrappers.wait(discoveryFailedInterval + WAIT_OFFSET) {\n+            result = elastic.getLogs(new ElasticQueryBuilder().setTags(KildaTags.FLOODLIGHT)\n+                    .setLevel(\"INFO\").setTimeRange(60).build())\n+            assert result.hits.hits.findAll { hit ->\n+                hit.source.message.toLowerCase().contains(pushDiscoveryMsg(\"$sw.dpId-$portWithoutIsl\"))\n+            }.size() == 1\n+            assert result.hits.hits.findAll { hit ->\n+                hit.source.message.toLowerCase().contains(pushDiscoveryMsg(\"$sw.dpId-$portWithIsl\"))\n+            }.size() > 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MTU3NA==", "bodyText": "I tried to do it, but I had no luck\nI mean I see needed amount of logs in kibana, but can't get them by elastic.getLogs(new ElasticQueryBuilder().setTags(KildaTags.FLOODLIGHT).setLevel(\"INFO\").setTimeRange(60).build())", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r455091574", "createdAt": "2020-07-15T14:23:45Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/logging/CheckLoggingSpec.groovy", "diffHunk": "@@ -86,4 +88,26 @@ class CheckLoggingSpec extends HealthCheckSpecification {\n                     \"Storm should generate a warning message about not being able to find the flow\"\n         }\n     }\n+\n+    def \"Check push discovery package logging\"() {\n+        given: \"Two port(with/without ISL)\"\n+        def sw = topology.activeTraffGens*.switchConnected.first()\n+        def portWithIsl = topology.getRelatedIsls(sw).first().srcPort\n+        def portWithoutIsl = 10 //default port for traffgen\n+\n+        when: \"Retrieve logs for port with ISL for last 1 minute\"\n+        def result\n+\n+        then: \"There should be 1 message of push discovery for port without ISL and more than 1 for port with ISL\"\n+        Wrappers.wait(discoveryFailedInterval + WAIT_OFFSET) {\n+            result = elastic.getLogs(new ElasticQueryBuilder().setTags(KildaTags.FLOODLIGHT)\n+                    .setLevel(\"INFO\").setTimeRange(60).build())\n+            assert result.hits.hits.findAll { hit ->\n+                hit.source.message.toLowerCase().contains(pushDiscoveryMsg(\"$sw.dpId-$portWithoutIsl\"))\n+            }.size() == 1\n+            assert result.hits.hits.findAll { hit ->\n+                hit.source.message.toLowerCase().contains(pushDiscoveryMsg(\"$sw.dpId-$portWithIsl\"))\n+            }.size() > 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNjQ5OQ=="}, "originalCommit": {"oid": "e2a589d88f10f57f20bfc2e0ac4c7240e5a2cd22"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTkzNjM3OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/IslMinPortSpeedSpec.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODozMzoyNFrOGygtuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTo0ODozNVrOGzMxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxNzk3OQ==", "bodyText": "it is cleaner to use northbound.getLink here to ask for 1 certain isl. islUtils.getIslInfo(it) will dump all isls twice", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r455617979", "createdAt": "2020-07-16T08:33:24Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/IslMinPortSpeedSpec.groovy", "diffHunk": "@@ -38,7 +38,9 @@ class IslMinPortSpeedSpec extends HealthCheckSpecification {\n         when: \"Replug one end of the connected link to the destination switch(isl.srcSwitchId -> newDst.srcSwitchId)\"\n         def newIsl = islUtils.replug(isl, false, newDst, true, true)\n \n-        islUtils.waitForIslStatus([newIsl, newIsl.reversed], DISCOVERED)\n+        Wrappers.wait(discoverySlowPollInterval + WAIT_OFFSET) {\n+            [newIsl, newIsl.reversed].each { assert islUtils.getIslInfo(it).get().state == DISCOVERED }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0f0f2d1ffaba5e1596fd1c9f90ca279e27409dc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzOTg2Mg==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3635#discussion_r456339862", "createdAt": "2020-07-17T09:48:35Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/IslMinPortSpeedSpec.groovy", "diffHunk": "@@ -38,7 +38,9 @@ class IslMinPortSpeedSpec extends HealthCheckSpecification {\n         when: \"Replug one end of the connected link to the destination switch(isl.srcSwitchId -> newDst.srcSwitchId)\"\n         def newIsl = islUtils.replug(isl, false, newDst, true, true)\n \n-        islUtils.waitForIslStatus([newIsl, newIsl.reversed], DISCOVERED)\n+        Wrappers.wait(discoverySlowPollInterval + WAIT_OFFSET) {\n+            [newIsl, newIsl.reversed].each { assert islUtils.getIslInfo(it).get().state == DISCOVERED }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxNzk3OQ=="}, "originalCommit": {"oid": "a0f0f2d1ffaba5e1596fd1c9f90ca279e27409dc"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1776, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}