{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNDg5MjI0", "number": 3863, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzozOToxNFrOE_n3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzowNjowMVrOFIAXCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQ4ODcwOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzozOToxNFrOH9bUXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1NDozOVrOIKTuhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3Mjc2NQ==", "bodyText": "I think we do not need emit() here because we already send tuple to ZkBolt in handleLifeCycleEvent()", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r534172765", "createdAt": "2020-12-02T13:39:14Z", "author": {"login": "niksv"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -97,12 +102,20 @@\n     public static final String STREAM_BFD_WORKER_ID = \"worker\";\n     public static final Fields STREAM_BFD_WORKER_FIELDS = new Fields(FIELD_ID_KEY, FIELD_ID_INPUT, FIELD_ID_CONTEXT);\n \n+    public static final String STREAM_ZOOKEEPER_ID = ZkStreams.ZK.toString();\n+    public static final Fields STREAM_ZOOKEEPER_FIELDS = new Fields(ZooKeeperBolt.FIELD_ID_STATE,\n+            ZooKeeperBolt.FIELD_ID_CONTEXT);\n+\n     @Override\n     protected void handleInput(Tuple input) throws Exception {\n         String source = input.getSourceComponent();\n         if (ComponentId.INPUT_SPEAKER.toString().equals(source)) {\n             Message message = pullValue(input, FIELD_ID_INPUT, Message.class);\n             speakerMessage(input, message);\n+        } else if (ComponentId.INPUT_ZOOKEEPER.toString().equals(source)) {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_LIFECYCLE_EVENT);\n+            handleLifeCycleEvent(event);\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef8c90b05df30806eb38592f63ecac787dbdfabd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY3OTg3Ng==", "bodyText": "Removed.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547679876", "createdAt": "2020-12-23T05:54:39Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -97,12 +102,20 @@\n     public static final String STREAM_BFD_WORKER_ID = \"worker\";\n     public static final Fields STREAM_BFD_WORKER_FIELDS = new Fields(FIELD_ID_KEY, FIELD_ID_INPUT, FIELD_ID_CONTEXT);\n \n+    public static final String STREAM_ZOOKEEPER_ID = ZkStreams.ZK.toString();\n+    public static final Fields STREAM_ZOOKEEPER_FIELDS = new Fields(ZooKeeperBolt.FIELD_ID_STATE,\n+            ZooKeeperBolt.FIELD_ID_CONTEXT);\n+\n     @Override\n     protected void handleInput(Tuple input) throws Exception {\n         String source = input.getSourceComponent();\n         if (ComponentId.INPUT_SPEAKER.toString().equals(source)) {\n             Message message = pullValue(input, FIELD_ID_INPUT, Message.class);\n             speakerMessage(input, message);\n+        } else if (ComponentId.INPUT_ZOOKEEPER.toString().equals(source)) {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_LIFECYCLE_EVENT);\n+            handleLifeCycleEvent(event);\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3Mjc2NQ=="}, "originalCommit": {"oid": "ef8c90b05df30806eb38592f63ecac787dbdfabd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjA2OTExOnYy", "diffSide": "RIGHT", "path": "confd/vars/main.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODozNTo0NVrOIDuX2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODozNTo0NVrOIDuX2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc3NjQwOQ==", "bodyText": "Why we have per service default run-id (server42-control-run-id vs server42-stats-run-id)? It can prevent communication between services on system start. Or this is the goal?", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r540776409", "createdAt": "2020-12-11T08:35:45Z", "author": {"login": "surabujin"}, "path": "confd/vars/main.yaml", "diffHunk": "@@ -176,10 +176,14 @@ kilda_server42_control_switch_to_vlan_1003: \"1003=00:00:00:00:00:00:00:03\"\n \n kilda_server42_control_kafka_group_id: \"server42-control\"\n kilda_server42_control_zeromq_connection_host: \"tcp://server42-server-stub.pendev:5555\"\n+kilda_server42_control_component_name: \"server42-control\"\n+kilda_server42_control_run_id: \"server42-control-run-id\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjY2ODc2OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1ODozMFrOIDzvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwMDowMjozMVrOIdN1-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NDMzMA==", "bodyText": "We already have topology name. Why for we need one more it's variant? I mean that our usual topology name can differ from zk-topology-name it will increase tangledness. If it is going to always match with the existing name, why we need one more place defining this name?", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r540864330", "createdAt": "2020-12-11T10:58:30Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -404,6 +433,23 @@ private void historyBolt(TopologyBuilder topology, int scaleFactor) {\n                 .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_HISTORY_ID);\n     }\n \n+    private void zookeeperBolt(TopologyBuilder topology) {\n+        ZooKeeperBolt zooKeeperBolt = new ZooKeeperBolt(topologyConfig.getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        topology.setBolt(ComponentId.ZOOKEEPER_OUTPUT.toString(), zooKeeperBolt, 1)\n+                .shuffleGrouping(SpeakerRouter.BOLT_ID, SpeakerRouter.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(WatcherHandler.BOLT_ID, WatcherHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(WatchListHandler.BOLT_ID, WatchListHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(DecisionMakerHandler.BOLT_ID, DecisionMakerHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(NetworkHistory.BOLT_ID, NetworkHistory.STREAM_ZOOKEEPER_ID);\n+    }\n+\n+    @Override\n+    protected String getZkTopoName() {\n+        return \"network\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MDYxNA==", "bodyText": "Removed. getTopologyName() method is used now.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547680614", "createdAt": "2020-12-23T05:55:39Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -404,6 +433,23 @@ private void historyBolt(TopologyBuilder topology, int scaleFactor) {\n                 .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_HISTORY_ID);\n     }\n \n+    private void zookeeperBolt(TopologyBuilder topology) {\n+        ZooKeeperBolt zooKeeperBolt = new ZooKeeperBolt(topologyConfig.getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        topology.setBolt(ComponentId.ZOOKEEPER_OUTPUT.toString(), zooKeeperBolt, 1)\n+                .shuffleGrouping(SpeakerRouter.BOLT_ID, SpeakerRouter.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(WatcherHandler.BOLT_ID, WatcherHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(WatchListHandler.BOLT_ID, WatchListHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(DecisionMakerHandler.BOLT_ID, DecisionMakerHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(NetworkHistory.BOLT_ID, NetworkHistory.STREAM_ZOOKEEPER_ID);\n+    }\n+\n+    @Override\n+    protected String getZkTopoName() {\n+        return \"network\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NDMzMA=="}, "originalCommit": {"oid": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzUwNjQyNw==", "bodyText": "+1. We definitely need to unify topology ids, names, etc. BTW, keep in mind that on topology submission the topology name can be overwritten.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r567506427", "createdAt": "2021-02-01T00:02:31Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -404,6 +433,23 @@ private void historyBolt(TopologyBuilder topology, int scaleFactor) {\n                 .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_HISTORY_ID);\n     }\n \n+    private void zookeeperBolt(TopologyBuilder topology) {\n+        ZooKeeperBolt zooKeeperBolt = new ZooKeeperBolt(topologyConfig.getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        topology.setBolt(ComponentId.ZOOKEEPER_OUTPUT.toString(), zooKeeperBolt, 1)\n+                .shuffleGrouping(SpeakerRouter.BOLT_ID, SpeakerRouter.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(WatcherHandler.BOLT_ID, WatcherHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(WatchListHandler.BOLT_ID, WatchListHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(DecisionMakerHandler.BOLT_ID, DecisionMakerHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(NetworkHistory.BOLT_ID, NetworkHistory.STREAM_ZOOKEEPER_ID);\n+    }\n+\n+    @Override\n+    protected String getZkTopoName() {\n+        return \"network\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NDMzMA=="}, "originalCommit": {"oid": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjY4NTk2OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowMjozMlrOIDz4sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1NzoxNVrOIKT2hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NjczOQ==", "bodyText": "Do we really need to pass getConfig().getBlueGreenMode() ? buildKafkaSpout (and any other methods of AbstractTopology) have access to getConfig() method and know enough about return value to make getConfig().getBlueGreenMode().", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r540866739", "createdAt": "2020-12-11T11:02:32Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -133,21 +139,30 @@ private void coordinator(TopologyBuilder topology) {\n                 .fieldsGrouping(SwitchManagerWorker.BOLT_ID, CoordinatorBolt.INCOME_STREAM, keyGrouping);\n     }\n \n+    private void zookeeperSpout(TopologyBuilder topology) {\n+        ZooKeeperSpout zooKeeperSpout = new ZooKeeperSpout(getConfig().getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        topology.setSpout(ComponentId.INPUT_ZOOKEEPER.toString(), zooKeeperSpout, 1);\n+    }\n+\n     private void inputSpeaker(TopologyBuilder topology, int scaleFactor) {\n         KafkaSpout<String, Message> spout = buildKafkaSpout(\n-                kafkaTopics.getTopoDiscoTopic(), ComponentId.INPUT_SPEAKER.toString());\n+                kafkaTopics.getTopoDiscoTopic(), ComponentId.INPUT_SPEAKER.toString(),\n+                getZkTopoName(), getConfig().getBlueGreenMode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MTkyNw==", "bodyText": "This will be fixed when the COMMON_COMPONENT is no longer needed.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547681927", "createdAt": "2020-12-23T05:57:15Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -133,21 +139,30 @@ private void coordinator(TopologyBuilder topology) {\n                 .fieldsGrouping(SwitchManagerWorker.BOLT_ID, CoordinatorBolt.INCOME_STREAM, keyGrouping);\n     }\n \n+    private void zookeeperSpout(TopologyBuilder topology) {\n+        ZooKeeperSpout zooKeeperSpout = new ZooKeeperSpout(getConfig().getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        topology.setSpout(ComponentId.INPUT_ZOOKEEPER.toString(), zooKeeperSpout, 1);\n+    }\n+\n     private void inputSpeaker(TopologyBuilder topology, int scaleFactor) {\n         KafkaSpout<String, Message> spout = buildKafkaSpout(\n-                kafkaTopics.getTopoDiscoTopic(), ComponentId.INPUT_SPEAKER.toString());\n+                kafkaTopics.getTopoDiscoTopic(), ComponentId.INPUT_SPEAKER.toString(),\n+                getZkTopoName(), getConfig().getBlueGreenMode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NjczOQ=="}, "originalCommit": {"oid": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjcwMzMzOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowNjo1NlrOID0Crg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowNjo1NlrOID0Crg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTI5NA==", "bodyText": "... so network ... untill START signal can't initialize itself. It will not read DB objects and it will not receive network dumps from flrouter.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r540869294", "createdAt": "2020-12-11T11:06:56Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -220,7 +237,9 @@ private void speakerRulesRouter(TopologyBuilder topology, int scaleFactor) {\n \n     private void networkHistory(TopologyBuilder topology) {\n         NetworkHistory spout = new NetworkHistory(persistenceManager);\n-        topology.setSpout(NetworkHistory.SPOUT_ID, spout, 1);\n+        // Parallelism of this bolt Must be 1 to do not read History twice\n+        topology.setBolt(NetworkHistory.BOLT_ID, spout, 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzA3MDU5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDo1Njo0OFrOIFK8-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1NzozNFrOIKT3hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5MzI0MA==", "bodyText": "bolt -> BOLT_ID\nspout -> SPOUT_ID\n?", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542293240", "createdAt": "2020-12-14T10:56:48Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -130,19 +135,28 @@ private void coordinator(TopologyBuilder topology) {\n                 .fieldsGrouping(SwitchManagerWorker.BOLT_ID, CoordinatorBolt.INCOME_STREAM, keyGrouping);\n     }\n \n+    private void zookeeperSpout(TopologyBuilder topology) {\n+        ZooKeeperSpout zooKeeperSpout = new ZooKeeperSpout(getConfig().getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        declareSpout(topology, zooKeeperSpout, ZooKeeperSpout.BOLT_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MjE4MA==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547682180", "createdAt": "2020-12-23T05:57:34Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -130,19 +135,28 @@ private void coordinator(TopologyBuilder topology) {\n                 .fieldsGrouping(SwitchManagerWorker.BOLT_ID, CoordinatorBolt.INCOME_STREAM, keyGrouping);\n     }\n \n+    private void zookeeperSpout(TopologyBuilder topology) {\n+        ZooKeeperSpout zooKeeperSpout = new ZooKeeperSpout(getConfig().getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        declareSpout(topology, zooKeeperSpout, ZooKeeperSpout.BOLT_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5MzI0MA=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzEyMDU3OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowODoxM1rOIFLY0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1ODozMFrOIKT6Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMDM2OQ==", "bodyText": "You have declared Zookeeper spout as ZooKeeperSpout.BOLT_ID but all stream refer it as ComponentId.INPUT_ZOOKEEPER.toString(). Looks incorrect.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542300369", "createdAt": "2020-12-14T11:08:13Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -213,7 +229,8 @@ private void speakerRulesRouter(TopologyBuilder topology) {\n \n     private void networkHistory(TopologyBuilder topology) {\n         NetworkHistory spout = new NetworkHistory(persistenceManager);\n-        declareSpout(topology, spout, NetworkHistory.SPOUT_ID);\n+        declareBolt(topology, spout, NetworkHistory.BOLT_ID)\n+                .allGrouping(ComponentId.INPUT_ZOOKEEPER.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4Mjg2Ng==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547682866", "createdAt": "2020-12-23T05:58:30Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -213,7 +229,8 @@ private void speakerRulesRouter(TopologyBuilder topology) {\n \n     private void networkHistory(TopologyBuilder topology) {\n         NetworkHistory spout = new NetworkHistory(persistenceManager);\n-        declareSpout(topology, spout, NetworkHistory.SPOUT_ID);\n+        declareBolt(topology, spout, NetworkHistory.BOLT_ID)\n+                .allGrouping(ComponentId.INPUT_ZOOKEEPER.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMDM2OQ=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzEzMTYyOnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkDecisionMakerService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxMDo0M1rOIFLfEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1ODo1M1rOIKT7cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMTk3MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542301971", "createdAt": "2020-12-14T11:10:43Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkDecisionMakerService.java", "diffHunk": "@@ -85,8 +87,13 @@ void failed(Endpoint endpoint, long packetId, long currentTime) {\n         controllerExecutor.fire(decisionMakerFsm, DecisionMakerFsmEvent.FAIL, context);\n     }\n \n+    /**\n+     * .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MzE4NQ==", "bodyText": "Docs were added.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547683185", "createdAt": "2020-12-23T05:58:53Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkDecisionMakerService.java", "diffHunk": "@@ -85,8 +87,13 @@ void failed(Endpoint endpoint, long packetId, long currentTime) {\n         controllerExecutor.fire(decisionMakerFsm, DecisionMakerFsmEvent.FAIL, context);\n     }\n \n+    /**\n+     * .", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMTk3MQ=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzEzOTY2OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatcherService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxMjo0NlrOIFLjnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1OTo0NFrOIKT9zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMzEzNQ==", "bodyText": "timeoutAction called only from tick(...).", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542303135", "createdAt": "2020-12-14T11:12:46Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatcherService.java", "diffHunk": "@@ -206,14 +213,24 @@ private void timeoutAction(Packet packet) {\n         if (confirmedPackets.remove(packet)) {\n             log.debug(\"Detect discovery packet lost sent via {} id:{} task:{}\",\n                       packet.endpoint, packet.packetNo, taskId);\n-            carrier.discoveryFailed(packet.getEndpoint(), packet.packetNo, now());\n+            if (active) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4Mzc5MA==", "bodyText": "This condition has been removed.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547683790", "createdAt": "2020-12-23T05:59:44Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatcherService.java", "diffHunk": "@@ -206,14 +213,24 @@ private void timeoutAction(Packet packet) {\n         if (confirmedPackets.remove(packet)) {\n             log.debug(\"Detect discovery packet lost sent via {} id:{} task:{}\",\n                       packet.endpoint, packet.packetNo, taskId);\n-            carrier.discoveryFailed(packet.getEndpoint(), packet.packetNo, now());\n+            if (active) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMzEzNQ=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzE3MDA5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxOTo1OFrOIFL03g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjowMDowOVrOIKT_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNzU1MA==", "bodyText": "It is mostly copy of org.openkilda.wfm.AbstractBolt#handleLifeCycleEvent. If AbstactBolt will define activate / deactivate methods we can use them into successor bolts.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542307550", "createdAt": "2020-12-14T11:19:58Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java", "diffHunk": "@@ -71,6 +82,19 @@ private void handleTimer(Tuple input) {\n         service.tick();\n     }\n \n+    private void handleLifeCycleEvent(Tuple input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NDExMQ==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547684111", "createdAt": "2020-12-23T06:00:09Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java", "diffHunk": "@@ -71,6 +82,19 @@ private void handleTimer(Tuple input) {\n         service.tick();\n     }\n \n+    private void handleLifeCycleEvent(Tuple input) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNzU1MA=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzIyMjU5OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTozMjo1N1rOIFMSow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjowMDoxNFrOIKT_VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNTE3MQ==", "bodyText": "super.init() ?", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542315171", "createdAt": "2020-12-14T11:32:57Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java", "diffHunk": "@@ -13,72 +13,95 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.network.storm.spout;\n+package org.openkilda.wfm.topology.network.storm.bolt.history;\n \n+import static org.openkilda.wfm.share.zk.ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n import org.openkilda.model.SwitchId;\n import org.openkilda.persistence.PersistenceManager;\n-import org.openkilda.persistence.context.PersistenceContextRequired;\n import org.openkilda.wfm.AbstractBolt;\n import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.share.zk.ZkStreams;\n+import org.openkilda.wfm.share.zk.ZooKeeperBolt;\n import org.openkilda.wfm.topology.network.model.facts.HistoryFacts;\n import org.openkilda.wfm.topology.network.service.ISwitchPrepopulateCarrier;\n import org.openkilda.wfm.topology.network.service.NetworkHistoryService;\n import org.openkilda.wfm.topology.network.storm.ComponentId;\n import org.openkilda.wfm.topology.network.storm.bolt.speaker.SpeakerRouter;\n import org.openkilda.wfm.topology.network.storm.bolt.sw.command.SwitchHistoryCommand;\n \n-import org.apache.storm.spout.SpoutOutputCollector;\n-import org.apache.storm.task.TopologyContext;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.storm.topology.OutputFieldsDeclarer;\n-import org.apache.storm.topology.base.BaseRichSpout;\n import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Tuple;\n import org.apache.storm.tuple.Values;\n \n-import java.util.Map;\n-\n-public class NetworkHistory extends BaseRichSpout implements ISwitchPrepopulateCarrier {\n-    public static final String SPOUT_ID = ComponentId.NETWORK_HISTORY.toString();\n+@Slf4j\n+public class NetworkHistory extends AbstractBolt implements ISwitchPrepopulateCarrier {\n+    public static final String BOLT_ID = ComponentId.NETWORK_HISTORY.toString();\n \n     public static final String FIELD_ID_DATAPATH = SpeakerRouter.FIELD_ID_DATAPATH;\n     public static final String FIELD_ID_PAYLOAD = \"switch-init\";\n     public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n \n     public static final Fields STREAM_FIELDS = new Fields(FIELD_ID_DATAPATH, FIELD_ID_PAYLOAD, FIELD_ID_CONTEXT);\n \n+    public static final String STREAM_ZOOKEEPER_ID = ZkStreams.ZK.toString();\n+    public static final Fields STREAM_ZOOKEEPER_FIELDS = new Fields(ZooKeeperBolt.FIELD_ID_STATE,\n+            ZooKeeperBolt.FIELD_ID_CONTEXT);\n+\n     private final PersistenceManager persistenceManager;\n \n     private transient NetworkHistoryService service;\n-    private transient SpoutOutputCollector output;\n-\n-    private final CommandContext rootContext = new CommandContext();\n-\n-    private boolean workDone = false;\n \n     public NetworkHistory(PersistenceManager persistenceManager) {\n         this.persistenceManager = persistenceManager;\n     }\n \n     @Override\n-    @PersistenceContextRequired(requiresNew = true)\n-    public void nextTuple() {\n-        if (workDone) {\n-            org.apache.storm.utils.Utils.sleep(1L);\n-            return;\n+    protected void handleInput(Tuple input) throws Exception {\n+        if (ComponentId.INPUT_ZOOKEEPER.toString().equals(input.getSourceComponent())) {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_LIFECYCLE_EVENT);\n+            handleLifeCycleEvent(event);\n+        } else {\n+            unhandledInput(input);\n         }\n-        workDone = true;\n+    }\n \n-        service.applyHistory();\n+    @Override\n+    protected void handleLifeCycleEvent(LifecycleEvent event) {\n+        log.info(\"Handling life cycle event {}\", event);\n+        if (Signal.START.equals(event.getSignal())) {\n+            final boolean currentActive = active;\n+            active = true;\n+            emit(ZkStreams.ZK.toString(), getCurrentTuple(), new Values(event, getCommandContext()));\n+\n+            if (!currentActive) {\n+                // Every new START signal will cause history reading\n+                log.info(\"Allying history events\");\n+                service.applyHistory();\n+            } else {\n+                log.info(\"Skip history events\");\n+            }\n+        } else if (Signal.SHUTDOWN.equals(event.getSignal())) {\n+            active = false;\n+            emit(ZkStreams.ZK.toString(), getCurrentTuple(), new Values(event, getCommandContext()));\n+        } else {\n+            log.info(\"Unsupported signal received: {}\", event.getSignal());\n+        }\n     }\n \n     @Override\n-    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n-        output = collector;\n+    protected void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NDE4MA==", "bodyText": "Added.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547684180", "createdAt": "2020-12-23T06:00:14Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java", "diffHunk": "@@ -13,72 +13,95 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.network.storm.spout;\n+package org.openkilda.wfm.topology.network.storm.bolt.history;\n \n+import static org.openkilda.wfm.share.zk.ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n import org.openkilda.model.SwitchId;\n import org.openkilda.persistence.PersistenceManager;\n-import org.openkilda.persistence.context.PersistenceContextRequired;\n import org.openkilda.wfm.AbstractBolt;\n import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.share.zk.ZkStreams;\n+import org.openkilda.wfm.share.zk.ZooKeeperBolt;\n import org.openkilda.wfm.topology.network.model.facts.HistoryFacts;\n import org.openkilda.wfm.topology.network.service.ISwitchPrepopulateCarrier;\n import org.openkilda.wfm.topology.network.service.NetworkHistoryService;\n import org.openkilda.wfm.topology.network.storm.ComponentId;\n import org.openkilda.wfm.topology.network.storm.bolt.speaker.SpeakerRouter;\n import org.openkilda.wfm.topology.network.storm.bolt.sw.command.SwitchHistoryCommand;\n \n-import org.apache.storm.spout.SpoutOutputCollector;\n-import org.apache.storm.task.TopologyContext;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.storm.topology.OutputFieldsDeclarer;\n-import org.apache.storm.topology.base.BaseRichSpout;\n import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Tuple;\n import org.apache.storm.tuple.Values;\n \n-import java.util.Map;\n-\n-public class NetworkHistory extends BaseRichSpout implements ISwitchPrepopulateCarrier {\n-    public static final String SPOUT_ID = ComponentId.NETWORK_HISTORY.toString();\n+@Slf4j\n+public class NetworkHistory extends AbstractBolt implements ISwitchPrepopulateCarrier {\n+    public static final String BOLT_ID = ComponentId.NETWORK_HISTORY.toString();\n \n     public static final String FIELD_ID_DATAPATH = SpeakerRouter.FIELD_ID_DATAPATH;\n     public static final String FIELD_ID_PAYLOAD = \"switch-init\";\n     public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n \n     public static final Fields STREAM_FIELDS = new Fields(FIELD_ID_DATAPATH, FIELD_ID_PAYLOAD, FIELD_ID_CONTEXT);\n \n+    public static final String STREAM_ZOOKEEPER_ID = ZkStreams.ZK.toString();\n+    public static final Fields STREAM_ZOOKEEPER_FIELDS = new Fields(ZooKeeperBolt.FIELD_ID_STATE,\n+            ZooKeeperBolt.FIELD_ID_CONTEXT);\n+\n     private final PersistenceManager persistenceManager;\n \n     private transient NetworkHistoryService service;\n-    private transient SpoutOutputCollector output;\n-\n-    private final CommandContext rootContext = new CommandContext();\n-\n-    private boolean workDone = false;\n \n     public NetworkHistory(PersistenceManager persistenceManager) {\n         this.persistenceManager = persistenceManager;\n     }\n \n     @Override\n-    @PersistenceContextRequired(requiresNew = true)\n-    public void nextTuple() {\n-        if (workDone) {\n-            org.apache.storm.utils.Utils.sleep(1L);\n-            return;\n+    protected void handleInput(Tuple input) throws Exception {\n+        if (ComponentId.INPUT_ZOOKEEPER.toString().equals(input.getSourceComponent())) {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_LIFECYCLE_EVENT);\n+            handleLifeCycleEvent(event);\n+        } else {\n+            unhandledInput(input);\n         }\n-        workDone = true;\n+    }\n \n-        service.applyHistory();\n+    @Override\n+    protected void handleLifeCycleEvent(LifecycleEvent event) {\n+        log.info(\"Handling life cycle event {}\", event);\n+        if (Signal.START.equals(event.getSignal())) {\n+            final boolean currentActive = active;\n+            active = true;\n+            emit(ZkStreams.ZK.toString(), getCurrentTuple(), new Values(event, getCommandContext()));\n+\n+            if (!currentActive) {\n+                // Every new START signal will cause history reading\n+                log.info(\"Allying history events\");\n+                service.applyHistory();\n+            } else {\n+                log.info(\"Skip history events\");\n+            }\n+        } else if (Signal.SHUTDOWN.equals(event.getSignal())) {\n+            active = false;\n+            emit(ZkStreams.ZK.toString(), getCurrentTuple(), new Values(event, getCommandContext()));\n+        } else {\n+            log.info(\"Unsupported signal received: {}\", event.getSignal());\n+        }\n     }\n \n     @Override\n-    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n-        output = collector;\n+    protected void init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNTE3MQ=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzIyNTA4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTozMzo0M1rOIFMUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjowMDozNlrOIKUAdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNTU2MQ==", "bodyText": "It should have the suffix Handler because it is bolt now.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542315561", "createdAt": "2020-12-14T11:33:43Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java", "diffHunk": "@@ -13,72 +13,95 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.network.storm.spout;\n+package org.openkilda.wfm.topology.network.storm.bolt.history;\n \n+import static org.openkilda.wfm.share.zk.ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n import org.openkilda.model.SwitchId;\n import org.openkilda.persistence.PersistenceManager;\n-import org.openkilda.persistence.context.PersistenceContextRequired;\n import org.openkilda.wfm.AbstractBolt;\n import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.share.zk.ZkStreams;\n+import org.openkilda.wfm.share.zk.ZooKeeperBolt;\n import org.openkilda.wfm.topology.network.model.facts.HistoryFacts;\n import org.openkilda.wfm.topology.network.service.ISwitchPrepopulateCarrier;\n import org.openkilda.wfm.topology.network.service.NetworkHistoryService;\n import org.openkilda.wfm.topology.network.storm.ComponentId;\n import org.openkilda.wfm.topology.network.storm.bolt.speaker.SpeakerRouter;\n import org.openkilda.wfm.topology.network.storm.bolt.sw.command.SwitchHistoryCommand;\n \n-import org.apache.storm.spout.SpoutOutputCollector;\n-import org.apache.storm.task.TopologyContext;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.storm.topology.OutputFieldsDeclarer;\n-import org.apache.storm.topology.base.BaseRichSpout;\n import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Tuple;\n import org.apache.storm.tuple.Values;\n \n-import java.util.Map;\n-\n-public class NetworkHistory extends BaseRichSpout implements ISwitchPrepopulateCarrier {\n-    public static final String SPOUT_ID = ComponentId.NETWORK_HISTORY.toString();\n+@Slf4j\n+public class NetworkHistory extends AbstractBolt implements ISwitchPrepopulateCarrier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NDQ3MA==", "bodyText": "Suffix has been added", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547684470", "createdAt": "2020-12-23T06:00:36Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java", "diffHunk": "@@ -13,72 +13,95 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.network.storm.spout;\n+package org.openkilda.wfm.topology.network.storm.bolt.history;\n \n+import static org.openkilda.wfm.share.zk.ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n import org.openkilda.model.SwitchId;\n import org.openkilda.persistence.PersistenceManager;\n-import org.openkilda.persistence.context.PersistenceContextRequired;\n import org.openkilda.wfm.AbstractBolt;\n import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.share.zk.ZkStreams;\n+import org.openkilda.wfm.share.zk.ZooKeeperBolt;\n import org.openkilda.wfm.topology.network.model.facts.HistoryFacts;\n import org.openkilda.wfm.topology.network.service.ISwitchPrepopulateCarrier;\n import org.openkilda.wfm.topology.network.service.NetworkHistoryService;\n import org.openkilda.wfm.topology.network.storm.ComponentId;\n import org.openkilda.wfm.topology.network.storm.bolt.speaker.SpeakerRouter;\n import org.openkilda.wfm.topology.network.storm.bolt.sw.command.SwitchHistoryCommand;\n \n-import org.apache.storm.spout.SpoutOutputCollector;\n-import org.apache.storm.task.TopologyContext;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.storm.topology.OutputFieldsDeclarer;\n-import org.apache.storm.topology.base.BaseRichSpout;\n import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Tuple;\n import org.apache.storm.tuple.Values;\n \n-import java.util.Map;\n-\n-public class NetworkHistory extends BaseRichSpout implements ISwitchPrepopulateCarrier {\n-    public static final String SPOUT_ID = ComponentId.NETWORK_HISTORY.toString();\n+@Slf4j\n+public class NetworkHistory extends AbstractBolt implements ISwitchPrepopulateCarrier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNTU2MQ=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzI0NjQ4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTozOTowOFrOIFMgsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjowMzowM1rOIKUIRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxODc3MA==", "bodyText": "I would like to put this filter \"closer\" to the handleInput... We can wrap the whole handleInput in this condition if we move zookeeper stream routing inside the dispatch method... or allow AbstractBolt to do it for us.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542318770", "createdAt": "2020-12-14T11:39:08Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -113,10 +126,12 @@ private void speakerMessage(Tuple input, Message message) throws PipelineExcepti\n     }\n \n     private void proxySpeaker(Tuple input, Message message) throws PipelineException {\n-        if (message instanceof InfoMessage) {\n-            proxySpeaker(input, ((InfoMessage) message).getData());\n-        } else {\n-            log.error(\"Do not proxy speaker message - unexpected message type \\\"{}\\\"\", message.getClass());\n+        if (active) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NjQ3MA==", "bodyText": "We can not wrap the whole handleInput in this condition, because sometimes we wait for responses and have to handle them.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547686470", "createdAt": "2020-12-23T06:03:03Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -113,10 +126,12 @@ private void speakerMessage(Tuple input, Message message) throws PipelineExcepti\n     }\n \n     private void proxySpeaker(Tuple input, Message message) throws PipelineException {\n-        if (message instanceof InfoMessage) {\n-            proxySpeaker(input, ((InfoMessage) message).getData());\n-        } else {\n-            log.error(\"Do not proxy speaker message - unexpected message type \\\"{}\\\"\", message.getClass());\n+        if (active) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxODc3MA=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzI2Mzc4OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTo0Mzo0MVrOIFMqqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjowMzoxM1rOIKUI2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyMTMyMw==", "bodyText": "%s -> {}\nI don't know how many times this chunk is copy-pasted, but definitely, there are some more of them.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542321323", "createdAt": "2020-12-14T11:43:41Z", "author": {"login": "surabujin"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java", "diffHunk": "@@ -71,6 +82,19 @@ private void handleTimer(Tuple input) {\n         service.tick();\n     }\n \n+    private void handleLifeCycleEvent(Tuple input) {\n+        LifecycleEvent event = (LifecycleEvent) input.getValueByField(ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT);\n+        if (event.getSignal().equals(Signal.SHUTDOWN)) {\n+            service.deactivate();\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n+        } else if (event.getSignal().equals(Signal.START)) {\n+            service.activate();\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n+        } else {\n+            log.info(\"Received signal info %s\", event.getSignal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NjYxNw==", "bodyText": "Fixed", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547686617", "createdAt": "2020-12-23T06:03:13Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java", "diffHunk": "@@ -71,6 +82,19 @@ private void handleTimer(Tuple input) {\n         service.tick();\n     }\n \n+    private void handleLifeCycleEvent(Tuple input) {\n+        LifecycleEvent event = (LifecycleEvent) input.getValueByField(ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT);\n+        if (event.getSignal().equals(Signal.SHUTDOWN)) {\n+            service.deactivate();\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n+        } else if (event.getSignal().equals(Signal.START)) {\n+            service.activate();\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n+        } else {\n+            log.info(\"Received signal info %s\", event.getSignal());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyMTMyMw=="}, "originalCommit": {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTM4ODI1OnYy", "diffSide": "RIGHT", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkAntiFlapService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzowNjowMVrOIJsxIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjowNDoyOVrOIKUMzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTU2OA==", "bodyText": "why are all of these active by default?", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547041568", "createdAt": "2020-12-22T03:06:01Z", "author": {"login": "timofei-durakov"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkAntiFlapService.java", "diffHunk": "@@ -39,6 +39,8 @@\n     private final IAntiFlapCarrier carrier;\n     private final AntiFlapFsm.Config config;\n \n+    private boolean active = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "101cdff191d1ef00d5ff27f5a6e44680343912ec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NzYyOQ==", "bodyText": "This was the old approach. Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547687629", "createdAt": "2020-12-23T06:04:29Z", "author": {"login": "dpoltavets"}, "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkAntiFlapService.java", "diffHunk": "@@ -39,6 +39,8 @@\n     private final IAntiFlapCarrier carrier;\n     private final AntiFlapFsm.Config config;\n \n+    private boolean active = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTU2OA=="}, "originalCommit": {"oid": "101cdff191d1ef00d5ff27f5a6e44680343912ec"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2301, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}