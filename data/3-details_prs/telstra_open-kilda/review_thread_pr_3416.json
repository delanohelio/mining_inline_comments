{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MzA5ODQw", "number": 3416, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoxMToxNVrOD2jCwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoxMToxNVrOD2jCwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTIzODQyOnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/model/SpeakerRequestBuildContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoxMToxNVrOGMWYLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoxNjo0MFrOGMWmdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwMjczNA==", "bodyText": "I am not sure that this is a good idea. It is easy to forget in what state we were and in what state we will be after this operation. For me, an explicit constructor is better. And instead of this method, call the constructor to get a new instance.", "url": "https://github.com/telstra/open-kilda/pull/3416#discussion_r415602734", "createdAt": "2020-04-27T08:11:15Z", "author": {"login": "dpoltavets"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/model/SpeakerRequestBuildContext.java", "diffHunk": "@@ -25,10 +25,28 @@\n @AllArgsConstructor\n @EqualsAndHashCode\n public class SpeakerRequestBuildContext {\n-    private boolean removeCustomerPortRule;\n-    private boolean removeOppositeCustomerPortRule;\n-    private boolean removeCustomerPortLldpRule;\n-    private boolean removeOppositeCustomerPortLldpRule;\n-    private boolean removeCustomerPortArpRule;\n-    private boolean removeOppositeCustomerPortArpRule;\n+    public static final SpeakerRequestBuildContext EMPTY = SpeakerRequestBuildContext.builder()\n+            .forward(PathContext.builder().build())\n+            .reverse(PathContext.builder().build())\n+            .build();\n+\n+    private PathContext forward;\n+    private PathContext reverse;\n+\n+    /**\n+     * Swap forward and reverse PathContext.\n+     */\n+    public void swap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e292f7bacfb18f77ba31aab2cfe3305d3fa1bf0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwNjM4OA==", "bodyText": "okay", "url": "https://github.com/telstra/open-kilda/pull/3416#discussion_r415606388", "createdAt": "2020-04-27T08:16:40Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/model/SpeakerRequestBuildContext.java", "diffHunk": "@@ -25,10 +25,28 @@\n @AllArgsConstructor\n @EqualsAndHashCode\n public class SpeakerRequestBuildContext {\n-    private boolean removeCustomerPortRule;\n-    private boolean removeOppositeCustomerPortRule;\n-    private boolean removeCustomerPortLldpRule;\n-    private boolean removeOppositeCustomerPortLldpRule;\n-    private boolean removeCustomerPortArpRule;\n-    private boolean removeOppositeCustomerPortArpRule;\n+    public static final SpeakerRequestBuildContext EMPTY = SpeakerRequestBuildContext.builder()\n+            .forward(PathContext.builder().build())\n+            .reverse(PathContext.builder().build())\n+            .build();\n+\n+    private PathContext forward;\n+    private PathContext reverse;\n+\n+    /**\n+     * Swap forward and reverse PathContext.\n+     */\n+    public void swap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwMjczNA=="}, "originalCommit": {"oid": "1e292f7bacfb18f77ba31aab2cfe3305d3fa1bf0"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1947, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}