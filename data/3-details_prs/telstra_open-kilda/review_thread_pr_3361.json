{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzIzNzQ3", "number": 3361, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozMTowMlrODuNn-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0MDowNVrOD8iUlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg0MzEzOnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/payload/flow/FlowEndpointPayload.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozMTowMlrOGAFmbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo1ODowOVrOGBerjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NDk0Mw==", "bodyText": "empty line", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r402744943", "createdAt": "2020-04-03T05:31:02Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/payload/flow/FlowEndpointPayload.java", "diffHunk": "@@ -64,35 +72,22 @@\n     public FlowEndpointPayload(@JsonProperty(\"switch-id\") SwitchId switchId,\n                                @JsonProperty(\"port-id\") Integer portId,\n                                @JsonProperty(\"vlan-id\") Integer vlanId,\n+                               @JsonProperty(\"inner-vlan-id\") Integer innerVlanId,\n                                @JsonProperty(\"detect-connected-devices\")\n                                            DetectConnectedDevicesPayload detectConnectedDevices) {\n         super(switchId, portId);\n         setVlanId(vlanId);\n+        setInnerVlanId(innerVlanId);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "162ca92ab0be1f5294bf029a3b4374d21d2b327c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwNDQzMA==", "bodyText": "em... it looks natural there... removed.", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r404204430", "createdAt": "2020-04-06T15:58:09Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/payload/flow/FlowEndpointPayload.java", "diffHunk": "@@ -64,35 +72,22 @@\n     public FlowEndpointPayload(@JsonProperty(\"switch-id\") SwitchId switchId,\n                                @JsonProperty(\"port-id\") Integer portId,\n                                @JsonProperty(\"vlan-id\") Integer vlanId,\n+                               @JsonProperty(\"inner-vlan-id\") Integer innerVlanId,\n                                @JsonProperty(\"detect-connected-devices\")\n                                            DetectConnectedDevicesPayload detectConnectedDevices) {\n         super(switchId, portId);\n         setVlanId(vlanId);\n+        setInnerVlanId(innerVlanId);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NDk0Mw=="}, "originalCommit": {"oid": "162ca92ab0be1f5294bf029a3b4374d21d2b327c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg0NDM4OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/payload/flow/FlowEndpointPayload.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozMTo1MVrOGAFnJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMDowM1rOGBexeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NTEyNg==", "bodyText": "please add inner vlan into toString() and into hashCode()", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r402745126", "createdAt": "2020-04-03T05:31:51Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/payload/flow/FlowEndpointPayload.java", "diffHunk": "@@ -149,4 +144,15 @@ public String toString() {\n                 .add(\"detect-connected-devices\", detectConnectedDevices)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "162ca92ab0be1f5294bf029a3b4374d21d2b327c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwNTk0Ng==", "bodyText": "done", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r404205946", "createdAt": "2020-04-06T16:00:03Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/payload/flow/FlowEndpointPayload.java", "diffHunk": "@@ -149,4 +144,15 @@ public String toString() {\n                 .add(\"detect-connected-devices\", detectConnectedDevices)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NTEyNg=="}, "originalCommit": {"oid": "162ca92ab0be1f5294bf029a3b4374d21d2b327c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDEzODIzOnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/model/FlowDto.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMzowNzowOFrOGJhP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNzowOFrOGNyyHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYzNTEwMQ==", "bodyText": "Should we declare \"src_inner_vlan\" and \"dst_inner_vlan\" using a wrapper class instead of the primitive to allow setting null values?", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r412635101", "createdAt": "2020-04-22T03:07:08Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/model/FlowDto.java", "diffHunk": "@@ -299,7 +309,7 @@ public FlowDto(String flowId,\n                 sourcePort,\n                 destinationPort,\n                 sourceVlan,\n-                destinationVlan,\n+                destinationVlan, 0, 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6266bb43f051e1b9ec1761d3f40bdcc13e25649f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNjcwMw==", "bodyText": "0 is invalid VLAN id value, so we can use primitives here (at least it allow us to not add a lot of null checks).", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r417116703", "createdAt": "2020-04-29T07:27:08Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/model/FlowDto.java", "diffHunk": "@@ -299,7 +309,7 @@ public FlowDto(String flowId,\n                 sourcePort,\n                 destinationPort,\n                 sourceVlan,\n-                destinationVlan,\n+                destinationVlan, 0, 0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYzNTEwMQ=="}, "originalCommit": {"oid": "6266bb43f051e1b9ec1761d3f40bdcc13e25649f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDM1NzY4OnYy", "diffSide": "RIGHT", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoyNToyN1rOGU-MfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODowNDozN1rOGVQnmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MzcwOA==", "bodyText": "You mix 2 concat practice here, implicit use of StringBuilder and string.format. Chose one.", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r424643708", "createdAt": "2020-05-13T18:25:27Z", "author": {"login": "nikitamarchenko"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowEndpoint.java", "diffHunk": "@@ -16,48 +16,109 @@\n package org.openkilda.model;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Builder;\n import lombok.EqualsAndHashCode;\n-import lombok.ToString;\n import lombok.Value;\n \n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n @Value\n-@ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class FlowEndpoint extends NetworkEndpoint {\n     @JsonProperty(\"outer_vlan_id\")\n-    private final int vlanId;\n+    private final int outerVlanId;\n+\n+    @JsonProperty(\"inner_vlan_id\")\n+    private final int innerVlanId;\n \n     @JsonProperty(\"track_lldp_connected_devices\")\n     private final boolean trackLldpConnectedDevices;\n \n     @JsonProperty(\"track_arp_connected_devices\")\n     private final boolean trackArpConnectedDevices;\n \n-    public FlowEndpoint(SwitchId switchId, Integer portNumber) {\n+    public FlowEndpoint(SwitchId switchId, int portNumber) {\n         this(switchId, portNumber, 0);\n     }\n \n-    public FlowEndpoint(SwitchId switchId, Integer portNumber, int vlanId) {\n-        this(switchId, portNumber, vlanId, false, false);\n+    public FlowEndpoint(SwitchId switchId, int portNumber, int outerVlanId) {\n+        this(switchId, portNumber, outerVlanId, 0, false, false);\n+    }\n+\n+    public FlowEndpoint(SwitchId switchId, int portNumber, int outerVlanId, int innerVlanId) {\n+        this(switchId, portNumber, outerVlanId, innerVlanId, false, false);\n     }\n \n     @JsonCreator\n     @Builder(toBuilder = true)\n     public FlowEndpoint(\n             @JsonProperty(\"switch_id\") SwitchId switchId,\n             @JsonProperty(\"port_number\") Integer portNumber,\n-            @JsonProperty(\"outer_vlan_id\") int vlanId,\n+            @JsonProperty(\"outer_vlan_id\") int outerVlanId,\n+            @JsonProperty(\"inner_vlan_id\") int innerVlanId,\n             @JsonProperty(\"track_lldp_connected_devices\") boolean trackLldpConnectedDevices,\n             @JsonProperty(\"track_arp_connected_devices\") boolean trackArpConnectedDevices) {\n         super(switchId, portNumber);\n-        this.vlanId = vlanId;\n+\n         this.trackLldpConnectedDevices = trackLldpConnectedDevices;\n         this.trackArpConnectedDevices = trackArpConnectedDevices;\n+\n+        // normalize VLANs representation\n+        List<Integer> vlanStack = makeVlanStack(innerVlanId, outerVlanId);\n+        if (1 < vlanStack.size()) {\n+            this.outerVlanId = vlanStack.get(1);\n+            this.innerVlanId = vlanStack.get(0);\n+        } else if (!vlanStack.isEmpty()) {\n+            this.outerVlanId = vlanStack.get(0);\n+            this.innerVlanId = 0;\n+        } else {\n+            this.outerVlanId = 0;\n+            this.innerVlanId = 0;\n+        }\n+    }\n+\n+    @JsonIgnore\n+    public List<Integer> getVlanStack() {\n+        return makeVlanStack(innerVlanId, outerVlanId);\n+    }\n+\n+    /**\n+     * Scan provided sequence for valid VLAN IDs and return them as a list.\n+     */\n+    public static List<Integer> makeVlanStack(Integer... sequence) {\n+        return Stream.of(sequence)\n+                .filter(FlowEndpoint::isVlanIdSet)\n+                .collect(Collectors.toList());\n     }\n \n     public static boolean isVlanIdSet(Integer vlanId) {\n         return vlanId != null && 0 < vlanId;\n     }\n+\n+    @Override\n+    public String toString() {\n+        String view = String.format(\"switchId=\\\"%s\\\" port=%d\", switchId, portNumber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a223d5fa8958168af322cce02842d1bd1258c2b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0NTU2Mw==", "bodyText": "Done.", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r424945563", "createdAt": "2020-05-14T08:04:37Z", "author": {"login": "surabujin"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowEndpoint.java", "diffHunk": "@@ -16,48 +16,109 @@\n package org.openkilda.model;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Builder;\n import lombok.EqualsAndHashCode;\n-import lombok.ToString;\n import lombok.Value;\n \n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n @Value\n-@ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class FlowEndpoint extends NetworkEndpoint {\n     @JsonProperty(\"outer_vlan_id\")\n-    private final int vlanId;\n+    private final int outerVlanId;\n+\n+    @JsonProperty(\"inner_vlan_id\")\n+    private final int innerVlanId;\n \n     @JsonProperty(\"track_lldp_connected_devices\")\n     private final boolean trackLldpConnectedDevices;\n \n     @JsonProperty(\"track_arp_connected_devices\")\n     private final boolean trackArpConnectedDevices;\n \n-    public FlowEndpoint(SwitchId switchId, Integer portNumber) {\n+    public FlowEndpoint(SwitchId switchId, int portNumber) {\n         this(switchId, portNumber, 0);\n     }\n \n-    public FlowEndpoint(SwitchId switchId, Integer portNumber, int vlanId) {\n-        this(switchId, portNumber, vlanId, false, false);\n+    public FlowEndpoint(SwitchId switchId, int portNumber, int outerVlanId) {\n+        this(switchId, portNumber, outerVlanId, 0, false, false);\n+    }\n+\n+    public FlowEndpoint(SwitchId switchId, int portNumber, int outerVlanId, int innerVlanId) {\n+        this(switchId, portNumber, outerVlanId, innerVlanId, false, false);\n     }\n \n     @JsonCreator\n     @Builder(toBuilder = true)\n     public FlowEndpoint(\n             @JsonProperty(\"switch_id\") SwitchId switchId,\n             @JsonProperty(\"port_number\") Integer portNumber,\n-            @JsonProperty(\"outer_vlan_id\") int vlanId,\n+            @JsonProperty(\"outer_vlan_id\") int outerVlanId,\n+            @JsonProperty(\"inner_vlan_id\") int innerVlanId,\n             @JsonProperty(\"track_lldp_connected_devices\") boolean trackLldpConnectedDevices,\n             @JsonProperty(\"track_arp_connected_devices\") boolean trackArpConnectedDevices) {\n         super(switchId, portNumber);\n-        this.vlanId = vlanId;\n+\n         this.trackLldpConnectedDevices = trackLldpConnectedDevices;\n         this.trackArpConnectedDevices = trackArpConnectedDevices;\n+\n+        // normalize VLANs representation\n+        List<Integer> vlanStack = makeVlanStack(innerVlanId, outerVlanId);\n+        if (1 < vlanStack.size()) {\n+            this.outerVlanId = vlanStack.get(1);\n+            this.innerVlanId = vlanStack.get(0);\n+        } else if (!vlanStack.isEmpty()) {\n+            this.outerVlanId = vlanStack.get(0);\n+            this.innerVlanId = 0;\n+        } else {\n+            this.outerVlanId = 0;\n+            this.innerVlanId = 0;\n+        }\n+    }\n+\n+    @JsonIgnore\n+    public List<Integer> getVlanStack() {\n+        return makeVlanStack(innerVlanId, outerVlanId);\n+    }\n+\n+    /**\n+     * Scan provided sequence for valid VLAN IDs and return them as a list.\n+     */\n+    public static List<Integer> makeVlanStack(Integer... sequence) {\n+        return Stream.of(sequence)\n+                .filter(FlowEndpoint::isVlanIdSet)\n+                .collect(Collectors.toList());\n     }\n \n     public static boolean isVlanIdSet(Integer vlanId) {\n         return vlanId != null && 0 < vlanId;\n     }\n+\n+    @Override\n+    public String toString() {\n+        String view = String.format(\"switchId=\\\"%s\\\" port=%d\", switchId, portNumber);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MzcwOA=="}, "originalCommit": {"oid": "8a223d5fa8958168af322cce02842d1bd1258c2b"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODAzNDc3OnYy", "diffSide": "RIGHT", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/mapper/RequestedFlowIncrementalMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0MDowNVrOGViUyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0MDowNVrOGViUyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzNTY1OQ==", "bodyText": "nit: it's more common to have the target as the last argument. https://mapstruct.org/documentation/stable/reference/html/", "url": "https://github.com/telstra/open-kilda/pull/3361#discussion_r425235659", "createdAt": "2020-05-14T15:40:05Z", "author": {"login": "sergii-iakovenko"}, "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/mapper/RequestedFlowIncrementalMapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.flowhs.mapper;\n+\n+import org.openkilda.model.FlowEndpoint;\n+import org.openkilda.wfm.topology.flowhs.model.RequestedFlow;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.MappingTarget;\n+import org.mapstruct.ReportingPolicy;\n+import org.mapstruct.factory.Mappers;\n+\n+@Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n+public abstract class RequestedFlowIncrementalMapper {\n+    public static final RequestedFlowIncrementalMapper INSTANCE = Mappers.getMapper(\n+            RequestedFlowIncrementalMapper.class);\n+\n+    @Mapping(source = \"switchId\", target = \"srcSwitch\")\n+    @Mapping(source = \"portNumber\", target = \"srcPort\")\n+    @Mapping(source = \"outerVlanId\", target = \"srcVlan\")\n+    @Mapping(source = \"innerVlanId\", target = \"srcInnerVlan\")\n+    public abstract void mapSource(@MappingTarget RequestedFlow target, FlowEndpoint endpoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b993e68681c3756aa14f6f4ae42d728927f7ab"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1916, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}