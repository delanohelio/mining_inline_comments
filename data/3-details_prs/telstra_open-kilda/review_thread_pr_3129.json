{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MTI1MTM0", "number": 3129, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNToyMzo0MVrODa6pAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDoxOToyN1rODblkGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTUwMzM4OnYy", "diffSide": "RIGHT", "path": "services/src/floodlight-service/floodlight-api/src/main/java/org/openkilda/floodlight/api/request/IngressFlowSegmentBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNToyMzo0MVrOFiGlfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo0Nzo0MFrOFic4vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwMzgwNg==", "bodyText": "I'd recommend to encapsulate such flags into a separate structure and re-use it in corresponding requests/factories/commands. This will simplify future changes - affecting the only structure, not dozens of classes.", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371303806", "createdAt": "2020-01-27T15:23:41Z", "author": {"login": "sergii-iakovenko"}, "path": "services/src/floodlight-service/floodlight-api/src/main/java/org/openkilda/floodlight/api/request/IngressFlowSegmentBase.java", "diffHunk": "@@ -45,14 +45,19 @@\n     @JsonProperty(\"remove_customer_port_shared_catch_rule\")\n     protected final boolean removeCustomerPortSharedCatchRule;\n \n+    @JsonProperty(\"remove_customer_port_shared_lldp_catch_rule\")\n+    protected final boolean removeCustomerPortSharedLldpCatchRule;\n+\n     IngressFlowSegmentBase(\n             MessageContext context, UUID commandId, FlowSegmentMetadata metadata, @NonNull FlowEndpoint endpoint,\n-            MeterConfig meterConfig, @NonNull SwitchId egressSwitchId, boolean removeCustomerPortSharedCatchRule) {\n+            MeterConfig meterConfig, @NonNull SwitchId egressSwitchId, boolean removeCustomerPortSharedCatchRule,\n+            boolean removeCustomerPortSharedLldpCatchRule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2OTE4MA==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371669180", "createdAt": "2020-01-28T08:47:40Z", "author": {"login": "niksv"}, "path": "services/src/floodlight-service/floodlight-api/src/main/java/org/openkilda/floodlight/api/request/IngressFlowSegmentBase.java", "diffHunk": "@@ -45,14 +45,19 @@\n     @JsonProperty(\"remove_customer_port_shared_catch_rule\")\n     protected final boolean removeCustomerPortSharedCatchRule;\n \n+    @JsonProperty(\"remove_customer_port_shared_lldp_catch_rule\")\n+    protected final boolean removeCustomerPortSharedLldpCatchRule;\n+\n     IngressFlowSegmentBase(\n             MessageContext context, UUID commandId, FlowSegmentMetadata metadata, @NonNull FlowEndpoint endpoint,\n-            MeterConfig meterConfig, @NonNull SwitchId egressSwitchId, boolean removeCustomerPortSharedCatchRule) {\n+            MeterConfig meterConfig, @NonNull SwitchId egressSwitchId, boolean removeCustomerPortSharedCatchRule,\n+            boolean removeCustomerPortSharedLldpCatchRule) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwMzgwNg=="}, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTU4NzUxOnYy", "diffSide": "RIGHT", "path": "services/src/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/OfFlowDumpProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNTo0NDozN1rOFiHYuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTowMToxNVrOFidSQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNjkyMw==", "bodyText": "Are you sure that we won't have duplicates by tableId? The previous implementation handles it using Hashmap.", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371316923", "createdAt": "2020-01-27T15:44:37Z", "author": {"login": "sergii-iakovenko"}, "path": "services/src/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/OfFlowDumpProducer.java", "diffHunk": "@@ -48,16 +47,17 @@\n     public OfFlowDumpProducer(MessageContext context, IOFSwitch sw, List<OFFlowMod> expectedFlows) {\n         swId = sw.getId();\n \n-        HashMap<TableId, DumpSelector> targetTables = new HashMap<>();\n+        List<DumpSelector> dumpSelectors = new ArrayList<>();\n         for (OFFlowMod entry : expectedFlows) {\n             TableId tableId = entry.getTableId();  // can be null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3NTcxMg==", "bodyText": "Let me describe the problem.\nDump selector has 2 fields: cookie and table id. So during getting rules from switch we will get only 1 rule. So in generally we are getting 1 rule from each table.\npreviously it was OK. But now we installing 2+ rules to one table. (for example shared LLDP rule and shared customer rule will be installed in table_0).\nSo now we have 2 dumpselectors:\n\nDumpSelector(table_0, customer_cookie)\nDumpSelector(table_0, lldp_cookie)\n\nthe second one will rewrite the first in hash map.\nThat is why I need a list.", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371675712", "createdAt": "2020-01-28T09:01:15Z", "author": {"login": "niksv"}, "path": "services/src/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/OfFlowDumpProducer.java", "diffHunk": "@@ -48,16 +47,17 @@\n     public OfFlowDumpProducer(MessageContext context, IOFSwitch sw, List<OFFlowMod> expectedFlows) {\n         swId = sw.getId();\n \n-        HashMap<TableId, DumpSelector> targetTables = new HashMap<>();\n+        List<DumpSelector> dumpSelectors = new ArrayList<>();\n         for (OFFlowMod entry : expectedFlows) {\n             TableId tableId = entry.getTableId();  // can be null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNjkyMw=="}, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTYxODI2OnYy", "diffSide": "RIGHT", "path": "services/src/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/command/flow/ingress/of/IngressFlowModFactoryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNTo1MjoyMlrOFiHsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNTozOToyNlrOFjNGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyMTg3MA==", "bodyText": "Why do you require OFInstructionGotoTable as an argument if only the tableId is used in the method?", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371321870", "createdAt": "2020-01-27T15:52:22Z", "author": {"login": "sergii-iakovenko"}, "path": "services/src/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/command/flow/ingress/of/IngressFlowModFactoryTest.java", "diffHunk": "@@ -111,7 +112,7 @@ public void makeCustomerPortSharedCatchInstallMessage() {\n \n     // --- verify methods\n \n-    protected void verifyGoToTableInstruction(OFFlowMod message, TableId tableId) {\n+    protected void verifyGoToTableInstruction(Optional<OFInstructionGotoTable> expected, OFFlowMod message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3NjY5Mw==", "bodyText": "Because also I used expected.isPresent() to understand do we expect goTableInstraction or it should not be presented in instruction list", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371676693", "createdAt": "2020-01-28T09:03:17Z", "author": {"login": "niksv"}, "path": "services/src/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/command/flow/ingress/of/IngressFlowModFactoryTest.java", "diffHunk": "@@ -111,7 +112,7 @@ public void makeCustomerPortSharedCatchInstallMessage() {\n \n     // --- verify methods\n \n-    protected void verifyGoToTableInstruction(OFFlowMod message, TableId tableId) {\n+    protected void verifyGoToTableInstruction(Optional<OFInstructionGotoTable> expected, OFFlowMod message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyMTg3MA=="}, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ1OTAyOA==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r372459028", "createdAt": "2020-01-29T15:39:26Z", "author": {"login": "niksv"}, "path": "services/src/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/command/flow/ingress/of/IngressFlowModFactoryTest.java", "diffHunk": "@@ -111,7 +112,7 @@ public void makeCustomerPortSharedCatchInstallMessage() {\n \n     // --- verify methods\n \n-    protected void verifyGoToTableInstruction(OFFlowMod message, TableId tableId) {\n+    protected void verifyGoToTableInstruction(Optional<OFInstructionGotoTable> expected, OFFlowMod message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyMTg3MA=="}, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTY4MDA4OnYy", "diffSide": "RIGHT", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjowNzo0OFrOFiISYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjowOTowMlrOFiisow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzMTY4MQ==", "bodyText": "I don't think this method is appropriate for such a generic action class. Please, consider introducing another base action class.", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371331681", "createdAt": "2020-01-27T16:07:48Z", "author": {"login": "sergii-iakovenko"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java", "diffHunk": "@@ -101,4 +106,26 @@ protected boolean isRemoveCustomerPortSharedCatchRule(String flowId,\n \n         return flowIds.size() == 1 && flowIds.iterator().next().equals(flowId);\n     }\n+\n+    protected boolean isRemoveCustomerPortSharedLldpCatchRule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2NDM4Nw==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371764387", "createdAt": "2020-01-28T12:09:02Z", "author": {"login": "niksv"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java", "diffHunk": "@@ -101,4 +106,26 @@ protected boolean isRemoveCustomerPortSharedCatchRule(String flowId,\n \n         return flowIds.size() == 1 && flowIds.iterator().next().equals(flowId);\n     }\n+\n+    protected boolean isRemoveCustomerPortSharedLldpCatchRule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzMTY4MQ=="}, "originalCommit": {"oid": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjUzNTk1OnYy", "diffSide": "RIGHT", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/RevertNewRulesAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDoxOToyN1rOFjJ-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTo0Mzo0NVrOFmP2CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwNzg0Mw==", "bodyText": "Is it a copy of the method in RemoveOldRulesAction?", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r372407843", "createdAt": "2020-01-29T14:19:27Z", "author": {"login": "sergii-iakovenko"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/RevertNewRulesAction.java", "diffHunk": "@@ -92,4 +94,21 @@ protected void perform(State from, State to, Event event, FlowUpdateContext cont\n         stateMachine.saveActionToHistory(\n                 \"Commands for removing new rules and re-installing original ingress rule have been sent\");\n     }\n+\n+    private SpeakerRequestBuildContext getSpeakerRequestBuildContext(FlowUpdateFsm stateMachine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5477d6ca3487494af82ec10f8c1ef714b11ba54d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0OTgwMQ==", "bodyText": "moved to common method", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r375649801", "createdAt": "2020-02-06T05:43:45Z", "author": {"login": "niksv"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/RevertNewRulesAction.java", "diffHunk": "@@ -92,4 +94,21 @@ protected void perform(State from, State to, Event event, FlowUpdateContext cont\n         stateMachine.saveActionToHistory(\n                 \"Commands for removing new rules and re-installing original ingress rule have been sent\");\n     }\n+\n+    private SpeakerRequestBuildContext getSpeakerRequestBuildContext(FlowUpdateFsm stateMachine) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwNzg0Mw=="}, "originalCommit": {"oid": "5477d6ca3487494af82ec10f8c1ef714b11ba54d"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2067, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}