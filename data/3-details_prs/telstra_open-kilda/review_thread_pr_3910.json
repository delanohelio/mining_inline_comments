{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NTI0MTU2", "number": 3910, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1NTo0NFrOFDajqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToxMDo0M1rOFDa91g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTI1MTYwOnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/DeserializationErrorMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1NTo0NFrOIDDXcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwOTowODoyM1rOILagXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MTc5NQ==", "bodyText": "too abstract", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r540071795", "createdAt": "2020-12-10T10:55:44Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/DeserializationErrorMessage.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/* Copyright 2017 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.error;\n+\n+import static org.openkilda.messaging.Utils.CORRELATION_ID;\n+import static org.openkilda.messaging.Utils.PAYLOAD;\n+import static org.openkilda.messaging.Utils.TIMESTAMP;\n+\n+import org.openkilda.bluegreen.kafka.DeserializationError;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@JsonSerialize\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class DeserializationErrorMessage extends ErrorMessage implements DeserializationError {\n+\n+    @JsonCreator\n+    public DeserializationErrorMessage(@JsonProperty(PAYLOAD) final ErrorData data,\n+                                       @JsonProperty(TIMESTAMP) final long timestamp,\n+                                       @JsonProperty(CORRELATION_ID) final String correlationId) {\n+        super(data, timestamp, correlationId);\n+    }\n+\n+    @Override\n+    public String getDeserializationErrorMessage() {\n+        return String.format(\"ErrorData: %s, timestamp: %d, correlationId %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzOTUxNg==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r548839516", "createdAt": "2020-12-25T09:08:23Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/DeserializationErrorMessage.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/* Copyright 2017 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.error;\n+\n+import static org.openkilda.messaging.Utils.CORRELATION_ID;\n+import static org.openkilda.messaging.Utils.PAYLOAD;\n+import static org.openkilda.messaging.Utils.TIMESTAMP;\n+\n+import org.openkilda.bluegreen.kafka.DeserializationError;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@JsonSerialize\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class DeserializationErrorMessage extends ErrorMessage implements DeserializationError {\n+\n+    @JsonCreator\n+    public DeserializationErrorMessage(@JsonProperty(PAYLOAD) final ErrorData data,\n+                                       @JsonProperty(TIMESTAMP) final long timestamp,\n+                                       @JsonProperty(CORRELATION_ID) final String correlationId) {\n+        super(data, timestamp, correlationId);\n+    }\n+\n+    @Override\n+    public String getDeserializationErrorMessage() {\n+        return String.format(\"ErrorData: %s, timestamp: %d, correlationId %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MTc5NQ=="}, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTI1MzI4OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/DeserializationErrorAbstractMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1NjowOFrOIDDYdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwOTowOTozM1rOILahHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MjA1Mg==", "bodyText": "too abstract", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r540072052", "createdAt": "2020-12-10T10:56:08Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/DeserializationErrorAbstractMessage.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.error;\n+\n+import org.openkilda.bluegreen.kafka.DeserializationError;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+public class DeserializationErrorAbstractMessage extends ErrorAbstractMessage implements DeserializationError {\n+\n+    public DeserializationErrorAbstractMessage(String errorMessage, String errorDescription) {\n+        super(errorMessage, errorDescription);\n+    }\n+\n+    @Override\n+    public String getDeserializationErrorMessage() {\n+        return String.format(\"Error message: %s, Error description: %s\", getErrorMessage(), getErrorDescription());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzOTcxMQ==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r548839711", "createdAt": "2020-12-25T09:09:33Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/DeserializationErrorAbstractMessage.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.error;\n+\n+import org.openkilda.bluegreen.kafka.DeserializationError;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+public class DeserializationErrorAbstractMessage extends ErrorAbstractMessage implements DeserializationError {\n+\n+    public DeserializationErrorAbstractMessage(String errorMessage, String errorDescription) {\n+        super(errorMessage, errorDescription);\n+    }\n+\n+    @Override\n+    public String getDeserializationErrorMessage() {\n+        return String.format(\"Error message: %s, Error description: %s\", getErrorMessage(), getErrorDescription());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MjA1Mg=="}, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTI1NzA3OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/ErrorAbstractMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1Njo0OFrOIDDadA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwOToxNzo0NVrOILamQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MjU2NA==", "bodyText": "Better remove/replace @Value", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r540072564", "createdAt": "2020-12-10T10:56:48Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/ErrorAbstractMessage.java", "diffHunk": "@@ -20,12 +20,14 @@\n \n import lombok.EqualsAndHashCode;\n import lombok.Value;\n+import lombok.experimental.NonFinal;\n \n /**\n  * Class represents error abstract message.\n  */\n @Value\n @EqualsAndHashCode(callSuper = false)\n+@NonFinal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MTAyNA==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r548841024", "createdAt": "2020-12-25T09:17:45Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/error/ErrorAbstractMessage.java", "diffHunk": "@@ -20,12 +20,14 @@\n \n import lombok.EqualsAndHashCode;\n import lombok.Value;\n+import lombok.experimental.NonFinal;\n \n /**\n  * Class represents error abstract message.\n  */\n @Value\n @EqualsAndHashCode(callSuper = false)\n+@NonFinal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MjU2NA=="}, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTI2Mjc1OnYy", "diffSide": "RIGHT", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/DeserializationErrorInfoData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1Nzo1OVrOIDDdmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwOToxNzo1MlrOILamTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MzM3MA==", "bodyText": "too abstract", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r540073370", "createdAt": "2020-12-10T10:57:59Z", "author": {"login": "surabujin"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/DeserializationErrorInfoData.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.info;\n+\n+import org.openkilda.bluegreen.kafka.DeserializationError;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+public class DeserializationErrorInfoData extends ErrorInfoData implements DeserializationError {\n+\n+    public DeserializationErrorInfoData(String errorMessage, String errorDescription) {\n+        super(errorMessage, errorDescription);\n+    }\n+\n+    @Override\n+    public String getDeserializationErrorMessage() {\n+        return String.format(\"Error message: %s, Error description: %s\", getErrorMessage(), getErrorDescription());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MTAzNw==", "bodyText": "fixed", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r548841037", "createdAt": "2020-12-25T09:17:52Z", "author": {"login": "niksv"}, "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/DeserializationErrorInfoData.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.info;\n+\n+import org.openkilda.bluegreen.kafka.DeserializationError;\n+\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+public class DeserializationErrorInfoData extends ErrorInfoData implements DeserializationError {\n+\n+    public DeserializationErrorInfoData(String errorMessage, String errorDescription) {\n+        super(errorMessage, errorDescription);\n+    }\n+\n+    @Override\n+    public String getDeserializationErrorMessage() {\n+        return String.format(\"Error message: %s, Error description: %s\", getErrorMessage(), getErrorDescription());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MzM3MA=="}, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTMxODYyOnYy", "diffSide": "RIGHT", "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningConsumerInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToxMDo0M1rOIDD9ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwOToyOTo0MlrOILauDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4MTU3MQ==", "bodyText": "Why are you analyzing data here?\nIf this record have passed checkRecordVersion() it will be seen to main code and it will / should react property. You do not report anything if record do not pass checkRecordVersion()... I can't say right now is it correct or not.", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r540081571", "createdAt": "2020-12-10T11:10:43Z", "author": {"login": "surabujin"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningConsumerInterceptor.java", "diffHunk": "@@ -61,6 +63,12 @@ public VersioningConsumerInterceptor() {\n             for (ConsumerRecord<K, V> record : records.records(partition)) {\n                 if (checkRecordVersion(record)) {\n                     filteredRecords.add(record);\n+\n+                    if (record.value() instanceof DeserializationError) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MzAyMA==", "bodyText": "let me describe the problem. We have 2 versions of kilda: blue and green.\nFor example we added/deleted/changed new field in some message in green version.\nHere is the problem: kafka firstly deserialize a message and only then run interceptor and check version.\nit mean that messages with different kilda will log deserialization error.\nHow we can fix it? just by changing log level because such messaged are false posotive.\nBut what if we really have a deserialization problem inside one Kilda version. For example green network sent to green router some invalid message? we will just miss error log.\nSo I added this analyzation here to log error ONLY for messaged with right kafka version. Because messages with wrong kafka version will have false positive errors.", "url": "https://github.com/telstra/open-kilda/pull/3910#discussion_r548843020", "createdAt": "2020-12-25T09:29:42Z", "author": {"login": "niksv"}, "path": "src-java/blue-green/src/main/java/org/openkilda/bluegreen/kafka/interceptors/VersioningConsumerInterceptor.java", "diffHunk": "@@ -61,6 +63,12 @@ public VersioningConsumerInterceptor() {\n             for (ConsumerRecord<K, V> record : records.records(partition)) {\n                 if (checkRecordVersion(record)) {\n                     filteredRecords.add(record);\n+\n+                    if (record.value() instanceof DeserializationError) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4MTU3MQ=="}, "originalCommit": {"oid": "a370d26afb2d567f57e31d06d08b6ce8ed9eaa95"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2173, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}