{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1ODc5ODky", "number": 3138, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo1MDo0NlrODZ4Z0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDozMToyN1rODaH0Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDY1MTA3OnYy", "diffSide": "RIGHT", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo1MDo0NlrOFghLJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo1MDo0NlrOFghLJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MjI3Ng==", "bodyText": "Why not to use computeIfAbsent method with Node::fromSwitch function?", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r369642276", "createdAt": "2020-01-22T15:50:46Z", "author": {"login": "rozdy"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -77,7 +80,12 @@ public void addLink(Isl isl, boolean errorOnDuplicates) {\n     }\n \n     private Node getOrInitSwitch(Switch sw) {\n-        return switches.computeIfAbsent(sw.getSwitchId(), Node::fromSwitchId);\n+        Node node = switches.get(sw.getSwitchId());\n+        if (node == null) {\n+            node = Node.fromSwitch(sw);\n+            switches.put(sw.getSwitchId(), node);\n+        }\n+        return node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd8af87c74af2f9689b42566663f212d90e9c9c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDY3MjgwOnYy", "diffSide": "RIGHT", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo1NjowN1rOFghYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo1NjowN1rOFghYjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0NTcxMQ==", "bodyText": "Maybe rework foreach to for with explicit counter?", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r369645711", "createdAt": "2020-01-22T15:56:07Z", "author": {"login": "rozdy"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +121,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() == 1) {\n+            return;\n+        }\n+        int c = 0;\n+        Set<String> allocatedPopSet = new HashSet<>();\n+\n+        for (PathSegment ps : segments) {\n+            if (c == 0) {\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            } else if (c == segments.size() - 1) {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            } else {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            }\n+            c++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd8af87c74af2f9689b42566663f212d90e9c9c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDY4OTE5OnYy", "diffSide": "RIGHT", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMDoxNFrOFghi2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMToyMzowMFrOFgrcrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODM0Ng==", "bodyText": "I think we need some combination of this method and old processDiversitySegments without pops method. Should we try to create diverse path through already used pops if no \"unused\" pops are available? Maybe add separate PopDiversityGroupUseCounter and related diversity.pop.cost param?", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r369648346", "createdAt": "2020-01-22T16:00:14Z", "author": {"login": "rozdy"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +121,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() == 1) {\n+            return;\n+        }\n+        int c = 0;\n+        Set<String> allocatedPopSet = new HashSet<>();\n+\n+        for (PathSegment ps : segments) {\n+            if (c == 0) {\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            } else if (c == segments.size() - 1) {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            } else {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            }\n+            c++;\n+        }\n+        for (Edge edge : edges) {\n+            String srcPop = edge.getSrcSwitch().getPop();\n+            if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n+                edge.increaseDiversityGroupUseCounter();\n+                continue;\n+            }\n+            String dstPop = edge.getDestSwitch().getPop();\n+            if (dstPop != null && allocatedPopSet.contains(dstPop)) {\n+                edge.increaseDiversityGroupUseCounter();\n+                continue;\n+            }\n+        }\n+\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd8af87c74af2f9689b42566663f212d90e9c9c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMDYwNg==", "bodyText": "I think it makes sense, and overall we should use both strategies at the same time. I introduced new param for config and add new counter for edge, it will also mitigate an issues when there are no PoPs in db yet. good catch", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r369810606", "createdAt": "2020-01-22T21:23:00Z", "author": {"login": "timofei-durakov"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +121,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() == 1) {\n+            return;\n+        }\n+        int c = 0;\n+        Set<String> allocatedPopSet = new HashSet<>();\n+\n+        for (PathSegment ps : segments) {\n+            if (c == 0) {\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            } else if (c == segments.size() - 1) {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            } else {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            }\n+            c++;\n+        }\n+        for (Edge edge : edges) {\n+            String srcPop = edge.getSrcSwitch().getPop();\n+            if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n+                edge.increaseDiversityGroupUseCounter();\n+                continue;\n+            }\n+            String dstPop = edge.getDestSwitch().getPop();\n+            if (dstPop != null && allocatedPopSet.contains(dstPop)) {\n+                edge.increaseDiversityGroupUseCounter();\n+                continue;\n+            }\n+        }\n+\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODM0Ng=="}, "originalCommit": {"oid": "5dd8af87c74af2f9689b42566663f212d90e9c9c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzE3NTI3OnYy", "diffSide": "RIGHT", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDozMTowNVrOFg5eWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDo1NzozM1rOFg6OcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDQwOQ==", "bodyText": "nit: allocatedPopSet -> allocatedPops or transitPops", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r370040409", "createdAt": "2020-01-23T10:31:05Z", "author": {"login": "rozdy"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +118,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() <= 1) {\n+            return;\n+        }\n+\n+        Set<String> allocatedPopSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc16e59d2a4276c8aacde79d9bdaba141091185"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MjcyMQ==", "bodyText": "fixed as we discussed offline", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r370052721", "createdAt": "2020-01-23T10:57:33Z", "author": {"login": "timofei-durakov"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +118,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() <= 1) {\n+            return;\n+        }\n+\n+        Set<String> allocatedPopSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDQwOQ=="}, "originalCommit": {"oid": "6fc16e59d2a4276c8aacde79d9bdaba141091185"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzE3NjQ2OnYy", "diffSide": "RIGHT", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDozMToyOFrOFg5fDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDo1ODoxNVrOFg6Puw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDU5MA==", "bodyText": "nit: this continue is redundant.", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r370040590", "createdAt": "2020-01-23T10:31:28Z", "author": {"login": "rozdy"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +118,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() <= 1) {\n+            return;\n+        }\n+\n+        Set<String> allocatedPopSet = new HashSet<>();\n+\n+        for (int i = 0; i < segments.size(); i++) {\n+            PathSegment ps = segments.get(i);\n+            if (i == 0) {\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            } else if (i == segments.size() - 1) {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            } else {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            }\n+        }\n+        for (Edge edge : edges) {\n+            String srcPop = edge.getSrcSwitch().getPop();\n+            if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n+                edge.increaseDiversityGroupPerPopUseCounter();\n+                continue;\n+            }\n+            String dstPop = edge.getDestSwitch().getPop();\n+            if (dstPop != null && allocatedPopSet.contains(dstPop)) {\n+                edge.increaseDiversityGroupPerPopUseCounter();\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc16e59d2a4276c8aacde79d9bdaba141091185"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MzA1MQ==", "bodyText": "it was added intentionally so in case of upcoming changes it won't be forgotten", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r370053051", "createdAt": "2020-01-23T10:58:15Z", "author": {"login": "timofei-durakov"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +118,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() <= 1) {\n+            return;\n+        }\n+\n+        Set<String> allocatedPopSet = new HashSet<>();\n+\n+        for (int i = 0; i < segments.size(); i++) {\n+            PathSegment ps = segments.get(i);\n+            if (i == 0) {\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            } else if (i == segments.size() - 1) {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            } else {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            }\n+        }\n+        for (Edge edge : edges) {\n+            String srcPop = edge.getSrcSwitch().getPop();\n+            if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n+                edge.increaseDiversityGroupPerPopUseCounter();\n+                continue;\n+            }\n+            String dstPop = edge.getDestSwitch().getPop();\n+            if (dstPop != null && allocatedPopSet.contains(dstPop)) {\n+                edge.increaseDiversityGroupPerPopUseCounter();\n+                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDU5MA=="}, "originalCommit": {"oid": "6fc16e59d2a4276c8aacde79d9bdaba141091185"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2085, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}