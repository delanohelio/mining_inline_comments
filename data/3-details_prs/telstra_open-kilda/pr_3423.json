{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5OTU1OTU1", "number": 3423, "title": "Bitfield numberic enum types safe access", "bodyText": "Provide save interface for bit fields represented as enum types.", "createdAt": "2020-04-28T08:13:37Z", "url": "https://github.com/telstra/open-kilda/pull/3423", "merged": true, "mergeCommit": {"oid": "bf3575d427755bf38c4228ec1552f58479e54a18"}, "closed": true, "closedAt": "2020-04-28T12:37:58Z", "author": {"login": "surabujin"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb_GbugH2gAyNDA5OTU1OTU1OjhiYzYxOWQ2NWU3ZWQ0Njc4Y2EwOTMzODE1ZDFmMjg2NmQ0NjNmODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccAhopAFqTQwMTY2MjAwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8bc619d65e7ed4678ca0933815d1f2866d463f83", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/8bc619d65e7ed4678ca0933815d1f2866d463f83", "committedDate": "2020-04-28T07:53:05Z", "message": "Bitfield numberic enum types safe access\n\nProvide save interface for bit fields represented as enum types."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNjIyNDIx", "url": "https://github.com/telstra/open-kilda/pull/3423#pullrequestreview-401622421", "createdAt": "2020-04-28T08:43:07Z", "commit": {"oid": "8bc619d65e7ed4678ca0933815d1f2866d463f83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNjI1Mzky", "url": "https://github.com/telstra/open-kilda/pull/3423#pullrequestreview-401625392", "createdAt": "2020-04-28T08:46:51Z", "commit": {"oid": "8bc619d65e7ed4678ca0933815d1f2866d463f83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODo0Njo1MVrOGNJgRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODo0Njo1MVrOGNJgRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ0MDM5MA==", "bodyText": "I don't like idea having Safe method here, why not to change existing one?", "url": "https://github.com/telstra/open-kilda/pull/3423#discussion_r416440390", "createdAt": "2020-04-28T08:46:51Z", "author": {"login": "timofei-durakov"}, "path": "src-java/kilda-model/src/main/java/org/openkilda/model/ServiceCookie.java", "diffHunk": "@@ -63,7 +65,18 @@ public void validate() throws InvalidCookieException {\n \n     // TODO - replace existing meter-id generation approach\n     public MeterId getMeterId() {\n-        return new MeterId(getServiceTag().getValue());\n+        return new MeterId(getField(SERVICE_TAG_FIELD));\n+    }\n+\n+    /**\n+     * Extract and return \"service tag\" field is save way (return empty {@link Optional} object if tag is invalid).\n+     */\n+    public Optional<ServiceCookieTag> getServiceTagSafe() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bc619d65e7ed4678ca0933815d1f2866d463f83"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNjYyMDAx", "url": "https://github.com/telstra/open-kilda/pull/3423#pullrequestreview-401662001", "createdAt": "2020-04-28T09:32:42Z", "commit": {"oid": "8bc619d65e7ed4678ca0933815d1f2866d463f83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3631, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}