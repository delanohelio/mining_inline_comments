{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTgzMTI5", "number": 3149, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo0MDowMVrODbNH_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoxMToxM1rODchwIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODUzMTgxOnYy", "diffSide": "RIGHT", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo0MDowMVrOFijgQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo0NjoxOFrOFinp0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3NzYwMQ==", "bodyText": "strategyIsLMaxLatency", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r371777601", "createdAt": "2020-01-28T12:40:01Z", "author": {"login": "niksv"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,43 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());\n \n         }).orElseThrow(() -> new FlowNotFoundException(flow.getFlowId()));\n+\n+        if (updateFlowResult.isNeedRerouteFlow()) {\n+            Flow updatedFlow = updateFlowResult.getUpdatedFlow().getFlow();\n+            Set<PathId> pathIds = new HashSet<>(updatedFlow.getFlowPathIds());\n+            carrier.sendRerouteRequest(Collections.singletonMap(updatedFlow.getFlowId(), pathIds),\n+                    updateFlowResult.getRerouteReason());\n+        }\n+\n+        return updateFlowResult.getUpdatedFlow();\n+    }\n+\n+    @VisibleForTesting\n+    UpdateFlowResult.UpdateFlowResultBuilder prepareFlowUpdateResult(FlowDto flowDto, Flow flow) {\n+        boolean changedStrategy = flowDto.getPathComputationStrategy() != null\n+                && !flowDto.getPathComputationStrategy().equals(flow.getPathComputationStrategy());\n+        boolean changedMaxLatency = flowDto.getMaxLatency() != null\n+                && !flowDto.getMaxLatency().equals(flow.getMaxLatency());\n+        boolean strategyIsMaxLatency = flowDto.getPathComputationStrategy() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1e8ae7680a707a64051ddc634f12f8bd25f0d94"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxMDg1Nw==", "bodyText": "noooooooo", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r371810857", "createdAt": "2020-01-28T13:47:55Z", "author": {"login": "rtretyak"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,43 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());\n \n         }).orElseThrow(() -> new FlowNotFoundException(flow.getFlowId()));\n+\n+        if (updateFlowResult.isNeedRerouteFlow()) {\n+            Flow updatedFlow = updateFlowResult.getUpdatedFlow().getFlow();\n+            Set<PathId> pathIds = new HashSet<>(updatedFlow.getFlowPathIds());\n+            carrier.sendRerouteRequest(Collections.singletonMap(updatedFlow.getFlowId(), pathIds),\n+                    updateFlowResult.getRerouteReason());\n+        }\n+\n+        return updateFlowResult.getUpdatedFlow();\n+    }\n+\n+    @VisibleForTesting\n+    UpdateFlowResult.UpdateFlowResultBuilder prepareFlowUpdateResult(FlowDto flowDto, Flow flow) {\n+        boolean changedStrategy = flowDto.getPathComputationStrategy() != null\n+                && !flowDto.getPathComputationStrategy().equals(flow.getPathComputationStrategy());\n+        boolean changedMaxLatency = flowDto.getMaxLatency() != null\n+                && !flowDto.getMaxLatency().equals(flow.getMaxLatency());\n+        boolean strategyIsMaxLatency = flowDto.getPathComputationStrategy() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3NzYwMQ=="}, "originalCommit": {"oid": "d1e8ae7680a707a64051ddc634f12f8bd25f0d94"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg0NTU4Ng==", "bodyText": "oh. my bad. your name is correct", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r371845586", "createdAt": "2020-01-28T14:46:18Z", "author": {"login": "niksv"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,43 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());\n \n         }).orElseThrow(() -> new FlowNotFoundException(flow.getFlowId()));\n+\n+        if (updateFlowResult.isNeedRerouteFlow()) {\n+            Flow updatedFlow = updateFlowResult.getUpdatedFlow().getFlow();\n+            Set<PathId> pathIds = new HashSet<>(updatedFlow.getFlowPathIds());\n+            carrier.sendRerouteRequest(Collections.singletonMap(updatedFlow.getFlowId(), pathIds),\n+                    updateFlowResult.getRerouteReason());\n+        }\n+\n+        return updateFlowResult.getUpdatedFlow();\n+    }\n+\n+    @VisibleForTesting\n+    UpdateFlowResult.UpdateFlowResultBuilder prepareFlowUpdateResult(FlowDto flowDto, Flow flow) {\n+        boolean changedStrategy = flowDto.getPathComputationStrategy() != null\n+                && !flowDto.getPathComputationStrategy().equals(flow.getPathComputationStrategy());\n+        boolean changedMaxLatency = flowDto.getMaxLatency() != null\n+                && !flowDto.getMaxLatency().equals(flow.getMaxLatency());\n+        boolean strategyIsMaxLatency = flowDto.getPathComputationStrategy() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3NzYwMQ=="}, "originalCommit": {"oid": "d1e8ae7680a707a64051ddc634f12f8bd25f0d94"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODU3NTUxOnYy", "diffSide": "RIGHT", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1NToxMFrOFij7Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjo0ODozMFrOFi-EfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NDQ1NA==", "bodyText": "it could be simplified\n boolean strategyIsMaxLatency = \n    PathComputationStrategy.MAX_LATENCY.equals(flowDto.getPathComputationStrategy())\n    || flowDto.getPathComputationStrategy() == null \n    && PathComputationStrategy.MAX_LATENCY.equals(flow.getPathComputationStrategy())", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r371784454", "createdAt": "2020-01-28T12:55:10Z", "author": {"login": "niksv"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,43 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());\n \n         }).orElseThrow(() -> new FlowNotFoundException(flow.getFlowId()));\n+\n+        if (updateFlowResult.isNeedRerouteFlow()) {\n+            Flow updatedFlow = updateFlowResult.getUpdatedFlow().getFlow();\n+            Set<PathId> pathIds = new HashSet<>(updatedFlow.getFlowPathIds());\n+            carrier.sendRerouteRequest(Collections.singletonMap(updatedFlow.getFlowId(), pathIds),\n+                    updateFlowResult.getRerouteReason());\n+        }\n+\n+        return updateFlowResult.getUpdatedFlow();\n+    }\n+\n+    @VisibleForTesting\n+    UpdateFlowResult.UpdateFlowResultBuilder prepareFlowUpdateResult(FlowDto flowDto, Flow flow) {\n+        boolean changedStrategy = flowDto.getPathComputationStrategy() != null\n+                && !flowDto.getPathComputationStrategy().equals(flow.getPathComputationStrategy());\n+        boolean changedMaxLatency = flowDto.getMaxLatency() != null\n+                && !flowDto.getMaxLatency().equals(flow.getMaxLatency());\n+        boolean strategyIsMaxLatency = flowDto.getPathComputationStrategy() != null\n+                && flowDto.getPathComputationStrategy().equals(PathComputationStrategy.MAX_LATENCY)\n+                || flowDto.getPathComputationStrategy() == null && flow.getPathComputationStrategy() != null\n+                && flow.getPathComputationStrategy().equals(PathComputationStrategy.MAX_LATENCY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1e8ae7680a707a64051ddc634f12f8bd25f0d94"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMjg2MA==", "bodyText": "Fixed.", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r372212860", "createdAt": "2020-01-29T06:48:30Z", "author": {"login": "dpoltavets"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,43 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());\n \n         }).orElseThrow(() -> new FlowNotFoundException(flow.getFlowId()));\n+\n+        if (updateFlowResult.isNeedRerouteFlow()) {\n+            Flow updatedFlow = updateFlowResult.getUpdatedFlow().getFlow();\n+            Set<PathId> pathIds = new HashSet<>(updatedFlow.getFlowPathIds());\n+            carrier.sendRerouteRequest(Collections.singletonMap(updatedFlow.getFlowId(), pathIds),\n+                    updateFlowResult.getRerouteReason());\n+        }\n+\n+        return updateFlowResult.getUpdatedFlow();\n+    }\n+\n+    @VisibleForTesting\n+    UpdateFlowResult.UpdateFlowResultBuilder prepareFlowUpdateResult(FlowDto flowDto, Flow flow) {\n+        boolean changedStrategy = flowDto.getPathComputationStrategy() != null\n+                && !flowDto.getPathComputationStrategy().equals(flow.getPathComputationStrategy());\n+        boolean changedMaxLatency = flowDto.getMaxLatency() != null\n+                && !flowDto.getMaxLatency().equals(flow.getMaxLatency());\n+        boolean strategyIsMaxLatency = flowDto.getPathComputationStrategy() != null\n+                && flowDto.getPathComputationStrategy().equals(PathComputationStrategy.MAX_LATENCY)\n+                || flowDto.getPathComputationStrategy() == null && flow.getPathComputationStrategy() != null\n+                && flow.getPathComputationStrategy().equals(PathComputationStrategy.MAX_LATENCY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NDQ1NA=="}, "originalCommit": {"oid": "d1e8ae7680a707a64051ddc634f12f8bd25f0d94"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODYyNTkxOnYy", "diffSide": "RIGHT", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoxMTozOFrOFikZfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNToyNjo1MFrOFi8_hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5MjI1NA==", "bodyText": "I'm not sure about pathIds. I guess we must get pathIds for reroute from original flow.", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r371792254", "createdAt": "2020-01-28T13:11:38Z", "author": {"login": "niksv"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,43 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());\n \n         }).orElseThrow(() -> new FlowNotFoundException(flow.getFlowId()));\n+\n+        if (updateFlowResult.isNeedRerouteFlow()) {\n+            Flow updatedFlow = updateFlowResult.getUpdatedFlow().getFlow();\n+            Set<PathId> pathIds = new HashSet<>(updatedFlow.getFlowPathIds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1e8ae7680a707a64051ddc634f12f8bd25f0d94"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NTIwNQ==", "bodyText": "This flow update does not affect the flow paths at this point.", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r372195205", "createdAt": "2020-01-29T05:26:50Z", "author": {"login": "dpoltavets"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,43 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());\n \n         }).orElseThrow(() -> new FlowNotFoundException(flow.getFlowId()));\n+\n+        if (updateFlowResult.isNeedRerouteFlow()) {\n+            Flow updatedFlow = updateFlowResult.getUpdatedFlow().getFlow();\n+            Set<PathId> pathIds = new HashSet<>(updatedFlow.getFlowPathIds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5MjI1NA=="}, "originalCommit": {"oid": "d1e8ae7680a707a64051ddc634f12f8bd25f0d94"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM5NzE0OnYy", "diffSide": "RIGHT", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoxMToxM1rOFknKwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoxNzozMVrOFknQGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNDc4NQ==", "bodyText": "I think you need to add saving of getPathComputationStrategy() into currentFlow. like in lines 20 and 283", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r373934785", "createdAt": "2020-02-03T06:11:13Z", "author": {"login": "niksv"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,42 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95ad6d4dc28b6a768c7700bcece82efc59c59ee"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNjE1Mw==", "bodyText": "Saving of getPathComputationStrategy() is added here: #3036", "url": "https://github.com/telstra/open-kilda/pull/3149#discussion_r373936153", "createdAt": "2020-02-03T06:17:31Z", "author": {"login": "dpoltavets"}, "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/nbworker/services/FlowOperationsService.java", "diffHunk": "@@ -279,9 +288,42 @@ public UnidirectionalFlow updateFlow(FlowDto flow) throws FlowNotFoundException\n \n             flowRepository.createOrUpdate(currentFlow);\n \n-            return Optional.of(forwardFlow);\n+            return Optional.of(result.updatedFlow(forwardFlow).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNDc4NQ=="}, "originalCommit": {"oid": "b95ad6d4dc28b6a768c7700bcece82efc59c59ee"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2103, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}