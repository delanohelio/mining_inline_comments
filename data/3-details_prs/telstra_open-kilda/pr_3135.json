{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1Njk4OTQx", "number": 3135, "title": "Added MAX_LATENCY PCE strategy.", "bodyText": "", "createdAt": "2020-01-22T07:08:43Z", "url": "https://github.com/telstra/open-kilda/pull/3135", "merged": true, "mergeCommit": {"oid": "2a9ba797a70c2e962b95b2795e10256a3779898d"}, "closed": true, "closedAt": "2020-03-02T08:34:45Z", "author": {"login": "dpoltavets"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8wwNQgFqTM0NjM4OTY1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJnfV-ABqjMwODY1NDYwNDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Mzg5NjUx", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-346389651", "createdAt": "2020-01-22T07:38:29Z", "commit": {"oid": "12298d554ac15b6efe0a48a977bf6cc4ae6ab9ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Mzg5NzY0", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-346389764", "createdAt": "2020-01-22T07:38:47Z", "commit": {"oid": "12298d554ac15b6efe0a48a977bf6cc4ae6ab9ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12298d554ac15b6efe0a48a977bf6cc4ae6ab9ef", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/12298d554ac15b6efe0a48a977bf6cc4ae6ab9ef", "committedDate": "2020-01-21T12:31:16Z", "message": "Added MAX_LATENCY PCE strategy."}, "afterCommit": {"oid": "7fc66966fefe86fe74b7bfdd48a2e1f8ee36f213", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/7fc66966fefe86fe74b7bfdd48a2e1f8ee36f213", "committedDate": "2020-01-22T07:40:20Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7fc66966fefe86fe74b7bfdd48a2e1f8ee36f213", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/7fc66966fefe86fe74b7bfdd48a2e1f8ee36f213", "committedDate": "2020-01-22T07:40:20Z", "message": "Added MAX_LATENCY PCE strategy."}, "afterCommit": {"oid": "97335b57d136a498112eb81c01d92cd13e5f2943", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/97335b57d136a498112eb81c01d92cd13e5f2943", "committedDate": "2020-01-22T08:14:44Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDA2MTU2", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-346406156", "createdAt": "2020-01-22T08:18:33Z", "commit": {"oid": "97335b57d136a498112eb81c01d92cd13e5f2943"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NjY3NDgx", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-346667481", "createdAt": "2020-01-22T15:17:41Z", "commit": {"oid": "97335b57d136a498112eb81c01d92cd13e5f2943"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToxNzo0MVrOFgf5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozNDoyNFrOFggixg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyMTQwMA==", "bodyText": "Pair of ordered lists that represents forward path from start to end and reverse one\nCorrect javadoc for previous method also, please.", "url": "https://github.com/telstra/open-kilda/pull/3135#discussion_r369621400", "createdAt": "2020-01-22T15:17:41Z", "author": {"login": "rozdy"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/finder/PathFinder.java", "diffHunk": "@@ -39,6 +39,16 @@\n                                                    WeightFunction weightFunction)\n             throws UnroutableFlowException;\n \n+    /**\n+     * Finds a path whose weight is less than maxWeight and as close to maxWeight as possible.\n+     *\n+     * @return an ordered list that represents the path from start to end, or an empty list if no path found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97335b57d136a498112eb81c01d92cd13e5f2943"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMTk0Mg==", "bodyText": "Algorithm with max weight is very similar to previous one. Maybe we can generalize it using different weight shift and path weight comparison functions to avoid code duplication?", "url": "https://github.com/telstra/open-kilda/pull/3135#discussion_r369631942", "createdAt": "2020-01-22T15:34:24Z", "author": {"login": "rozdy"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/finder/BestWeightAndShortestPathFinder.java", "diffHunk": "@@ -286,6 +305,69 @@ private void restoreEdge(Edge edge) {\n         return (bestPath != null) ? bestPath.parentPath : new LinkedList<>();\n     }\n \n+    /**\n+     * Finds a path whose weight is less than maxWeight and as close to maxWeight as possible.\n+     *\n+     * @return An ordered list that represents the path from start to end, or an empty list\n+     */\n+    private List<Edge> getPath(Node start, Node end, WeightFunction weightFunction, long maxWeight) {\n+        long bestWeight = Long.MAX_VALUE;\n+        SearchNode bestPath = null;\n+\n+        Deque<SearchNode> toVisit = new LinkedList<>();\n+        Map<Node, SearchNode> visited = new HashMap<>();\n+\n+        toVisit.add(new SearchNode(weightFunction, start, allowedDepth, 0, emptyList()));\n+\n+        while (!toVisit.isEmpty()) {\n+            SearchNode current = toVisit.pop();\n+\n+            // Leave if the path contains this node\n+            if (current.containsSwitch(current.dstSw.getSwitchId())) {\n+                continue;\n+            }\n+\n+            // Shift the current weight relative to maxWeight\n+            long shiftedCurrentWeight = Math.abs(maxWeight - current.parentWeight);\n+\n+            // Determine if this node is the destination node.\n+            if (current.dstSw.equals(end)) {\n+                // We found the destination\n+                if (shiftedCurrentWeight < bestWeight && current.parentWeight < maxWeight) {\n+                    // We found a best path. If we don't get here, then the entire graph will be\n+                    // searched until we run out of nodes or the depth is reached.\n+                    bestWeight = shiftedCurrentWeight;\n+                    bestPath = current;\n+                }\n+                // We found dest, no need to keep processing\n+                continue;\n+            }\n+\n+            // Stop processing entirely if we've gone too far, or over maxWeight\n+            if (current.allowedDepth <= 0 || current.parentWeight > maxWeight) {\n+                continue;\n+            }\n+\n+            // Otherwise, if we've been here before, see if this path is better\n+            SearchNode prior = visited.get(current.dstSw);\n+            if (prior != null && shiftedCurrentWeight >= Math.abs(maxWeight - prior.parentWeight)) {\n+                continue;\n+            }\n+\n+            // Either this is the first time, or this one has less weight .. either way, this node should\n+            // be the one in the visited list\n+            visited.put(current.dstSw, current);\n+\n+            // At this stage .. haven't found END, haven't gone too deep, and we are not over weight.\n+            // So, add the outbound isls.\n+            current.dstSw.getOutgoingLinks().stream()\n+                    .sorted(Comparator.comparing(edge -> edge.getDestSwitch().getSwitchId()))\n+                    .forEach(edge -> toVisit.add(current.addNode(edge)));\n+        }\n+\n+        return (bestPath != null) ? bestPath.parentPath : new LinkedList<>();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97335b57d136a498112eb81c01d92cd13e5f2943"}, "originalPosition": 105}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97335b57d136a498112eb81c01d92cd13e5f2943", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/97335b57d136a498112eb81c01d92cd13e5f2943", "committedDate": "2020-01-22T08:14:44Z", "message": "Added MAX_LATENCY PCE strategy."}, "afterCommit": {"oid": "fb52f0ef5af1de5dac793b24ef37dccbf2760af1", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/fb52f0ef5af1de5dac793b24ef37dccbf2760af1", "committedDate": "2020-01-23T11:33:00Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjQ3NzUx", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-347247751", "createdAt": "2020-01-23T12:07:22Z", "commit": {"oid": "fb52f0ef5af1de5dac793b24ef37dccbf2760af1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb52f0ef5af1de5dac793b24ef37dccbf2760af1", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/fb52f0ef5af1de5dac793b24ef37dccbf2760af1", "committedDate": "2020-01-23T11:33:00Z", "message": "Added MAX_LATENCY PCE strategy."}, "afterCommit": {"oid": "704b7ffc18ac14165fdea675e7b4499d9618fdb4", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/704b7ffc18ac14165fdea675e7b4499d9618fdb4", "committedDate": "2020-01-24T08:28:49Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODE2MzI3", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-347816327", "createdAt": "2020-01-24T08:57:46Z", "commit": {"oid": "704b7ffc18ac14165fdea675e7b4499d9618fdb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODo1Nzo0NlrOFhXM3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODo1Nzo0NlrOFhXM3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyNzQ1Mg==", "bodyText": "here must be current.parentWeight >= maxWeight", "url": "https://github.com/telstra/open-kilda/pull/3135#discussion_r370527452", "createdAt": "2020-01-24T08:57:46Z", "author": {"login": "niksv"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/finder/BestWeightAndShortestPathFinder.java", "diffHunk": "@@ -286,6 +305,82 @@ private void restoreEdge(Edge edge) {\n         return (bestPath != null) ? bestPath.parentPath : new LinkedList<>();\n     }\n \n+    private List<Edge> getPath(Node start, Node end, WeightFunction weightFunction, long maxWeight) {\n+        SearchNode desiredPath = getDesiredPath(start, end, weightFunction, maxWeight);\n+        SearchNode desiredReversePath = getDesiredPath(end, start, weightFunction, maxWeight);\n+\n+        if (desiredReversePath != null) {\n+            if (desiredPath == null || desiredReversePath.parentWeight > desiredPath.parentWeight) {\n+                desiredPath = desiredReversePath;\n+            }\n+        }\n+\n+        return (desiredPath != null) ? desiredPath.parentPath : new LinkedList<>();\n+    }\n+\n+    /**\n+     * Finds a path whose weight is less than maxWeight and as close to maxWeight as possible.\n+     *\n+     * @return A pair of ordered lists that represents the path from start to end, or an empty list\n+     */\n+    private SearchNode getDesiredPath(Node start, Node end, WeightFunction weightFunction, long maxWeight) {\n+        long desiredWeight = Long.MAX_VALUE;\n+        SearchNode desiredPath = null;\n+\n+        Deque<SearchNode> toVisit = new LinkedList<>();\n+        Map<Node, SearchNode> visited = new HashMap<>();\n+\n+        toVisit.add(new SearchNode(weightFunction, start, allowedDepth, 0, emptyList()));\n+\n+        while (!toVisit.isEmpty()) {\n+            SearchNode current = toVisit.pop();\n+\n+            // Leave if the path contains this node\n+            if (current.containsSwitch(current.dstSw.getSwitchId())) {\n+                continue;\n+            }\n+\n+            // Shift the current weight relative to maxWeight\n+            long shiftedCurrentWeight = Math.abs(maxWeight - current.parentWeight);\n+\n+            // Determine if this node is the destination node.\n+            if (current.dstSw.equals(end)) {\n+                // We found the destination\n+                if (shiftedCurrentWeight < desiredWeight && current.parentWeight < maxWeight) {\n+                    // We found a best path. If we don't get here, then the entire graph will be\n+                    // searched until we run out of nodes or the depth is reached.\n+                    desiredWeight = shiftedCurrentWeight;\n+                    desiredPath = current;\n+                }\n+                // We found dest, no need to keep processing\n+                continue;\n+            }\n+\n+            // Stop processing entirely if we've gone too far, or over maxWeight\n+            if (current.allowedDepth <= 0 || current.parentWeight > maxWeight) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "704b7ffc18ac14165fdea675e7b4499d9618fdb4"}, "originalPosition": 105}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "704b7ffc18ac14165fdea675e7b4499d9618fdb4", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/704b7ffc18ac14165fdea675e7b4499d9618fdb4", "committedDate": "2020-01-24T08:28:49Z", "message": "Added MAX_LATENCY PCE strategy."}, "afterCommit": {"oid": "ef35092b26935953e80ab6a3cc7ce9634d08ee04", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/ef35092b26935953e80ab6a3cc7ce9634d08ee04", "committedDate": "2020-01-24T09:44:55Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODQxNDEx", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-347841411", "createdAt": "2020-01-24T09:46:20Z", "commit": {"oid": "ef35092b26935953e80ab6a3cc7ce9634d08ee04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODcyOTE2", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-347872916", "createdAt": "2020-01-24T10:43:12Z", "commit": {"oid": "ef35092b26935953e80ab6a3cc7ce9634d08ee04"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0MzoxMlrOFhZ62Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0MzoxMlrOFhZ62Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MTk5Mw==", "bodyText": "Javadoc return section is outdated.", "url": "https://github.com/telstra/open-kilda/pull/3135#discussion_r370571993", "createdAt": "2020-01-24T10:43:12Z", "author": {"login": "rozdy"}, "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/finder/BestWeightAndShortestPathFinder.java", "diffHunk": "@@ -286,6 +305,82 @@ private void restoreEdge(Edge edge) {\n         return (bestPath != null) ? bestPath.parentPath : new LinkedList<>();\n     }\n \n+    private List<Edge> getPath(Node start, Node end, WeightFunction weightFunction, long maxWeight) {\n+        SearchNode desiredPath = getDesiredPath(start, end, weightFunction, maxWeight);\n+        SearchNode desiredReversePath = getDesiredPath(end, start, weightFunction, maxWeight);\n+\n+        if (desiredReversePath != null) {\n+            if (desiredPath == null || desiredReversePath.parentWeight > desiredPath.parentWeight) {\n+                desiredPath = desiredReversePath;\n+            }\n+        }\n+\n+        return (desiredPath != null) ? desiredPath.parentPath : new LinkedList<>();\n+    }\n+\n+    /**\n+     * Finds a path whose weight is less than maxWeight and as close to maxWeight as possible.\n+     *\n+     * @return A pair of ordered lists that represents the path from start to end, or an empty list\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef35092b26935953e80ab6a3cc7ce9634d08ee04"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef35092b26935953e80ab6a3cc7ce9634d08ee04", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/ef35092b26935953e80ab6a3cc7ce9634d08ee04", "committedDate": "2020-01-24T09:44:55Z", "message": "Added MAX_LATENCY PCE strategy."}, "afterCommit": {"oid": "35bc5ddc2377813fc903d5f41cfe3d22e751550f", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/35bc5ddc2377813fc903d5f41cfe3d22e751550f", "committedDate": "2020-01-24T10:53:59Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODgxNjQ4", "url": "https://github.com/telstra/open-kilda/pull/3135#pullrequestreview-347881648", "createdAt": "2020-01-24T10:59:33Z", "commit": {"oid": "ef35092b26935953e80ab6a3cc7ce9634d08ee04"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowMToyOFrOFhaXvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowMToyOFrOFhaXvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3OTM4OA==", "bodyText": "I genuinely do not understand the narrative of these tests. How do you compare cheapness to deepness in test names?", "url": "https://github.com/telstra/open-kilda/pull/3135#discussion_r370579388", "createdAt": "2020-01-24T11:01:28Z", "author": {"login": "rtretyak"}, "path": "services/src/kilda-pce/src/test/java/org/openkilda/pce/finder/BestWeightAndShortestPathFinderTest.java", "diffHunk": "@@ -135,6 +135,71 @@ public void shouldChooseCheaperWithSameDepth() throws  UnroutableFlowException {\n         assertEquals(SWITCH_ID_3, rpath.get(0).getDestSwitch().getSwitchId());\n     }\n \n+    @Test\n+    public void shouldChooseCheaperOverTooDeepMaxWeightStrategy() throws  UnroutableFlowException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35bc5ddc2377813fc903d5f41cfe3d22e751550f"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35bc5ddc2377813fc903d5f41cfe3d22e751550f", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/35bc5ddc2377813fc903d5f41cfe3d22e751550f", "committedDate": "2020-01-24T10:53:59Z", "message": "Added MAX_LATENCY PCE strategy."}, "afterCommit": {"oid": "bc9372531d8b0a3e72baa346d153511d301ce572", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/bc9372531d8b0a3e72baa346d153511d301ce572", "committedDate": "2020-01-27T06:33:14Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc9372531d8b0a3e72baa346d153511d301ce572", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/bc9372531d8b0a3e72baa346d153511d301ce572", "committedDate": "2020-01-27T06:33:14Z", "message": "Added MAX_LATENCY PCE strategy."}, "afterCommit": {"oid": "f8509e569c20608a5e249b6819e0ba94d984fad7", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/f8509e569c20608a5e249b6819e0ba94d984fad7", "committedDate": "2020-01-27T09:56:55Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2eceb71448b68db431b1d13911841cd29c197b38", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/2eceb71448b68db431b1d13911841cd29c197b38", "committedDate": "2020-01-27T15:22:47Z", "message": "Merge pull request #3145 from telstra/max-latency-pce-strategy-tests\n\nAdd tests for MAX_LATENCY PCE strategy"}, "afterCommit": {"oid": "c80f8237d5b0afdc4ea4baea456e5ddfdfc088f3", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/c80f8237d5b0afdc4ea4baea456e5ddfdfc088f3", "committedDate": "2020-02-10T08:23:32Z", "message": "Add tests for MAX_LATENCY PCE strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8b1d6c9191eaa5aa1c6fbcf4917b0ae070d4b96", "author": {"user": {"login": "dpoltavets", "name": "Dmitriy Poltavets"}}, "url": "https://github.com/telstra/open-kilda/commit/f8b1d6c9191eaa5aa1c6fbcf4917b0ae070d4b96", "committedDate": "2020-03-02T06:07:11Z", "message": "Added MAX_LATENCY PCE strategy."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "236cb9f5a6745b29aa4186bfeb631ae11f2b3243", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/236cb9f5a6745b29aa4186bfeb631ae11f2b3243", "committedDate": "2020-03-02T06:07:13Z", "message": "Add tests for MAX_LATENCY PCE strategy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c80f8237d5b0afdc4ea4baea456e5ddfdfc088f3", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/c80f8237d5b0afdc4ea4baea456e5ddfdfc088f3", "committedDate": "2020-02-10T08:23:32Z", "message": "Add tests for MAX_LATENCY PCE strategy"}, "afterCommit": {"oid": "236cb9f5a6745b29aa4186bfeb631ae11f2b3243", "author": {"user": {"login": "rtretyak", "name": "Roman Tretiak"}}, "url": "https://github.com/telstra/open-kilda/commit/236cb9f5a6745b29aa4186bfeb631ae11f2b3243", "committedDate": "2020-03-02T06:07:13Z", "message": "Add tests for MAX_LATENCY PCE strategy"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3690, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}