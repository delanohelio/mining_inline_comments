{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MDc3NDM0", "number": 3544, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo1MDoyM1rOEF7Crw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1Mjo0NFrOEGFhfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQ1Njc5OnYy", "diffSide": "RIGHT", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/grpc/GrpcBaseSpecification.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo1MDoyM1rOGkZvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1NjoxNVrOGkq9xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMzY5OA==", "bodyText": "You can use spaceship(v1 <=> v2) operator", "url": "https://github.com/telstra/open-kilda/pull/3544#discussion_r440823698", "createdAt": "2020-06-16T12:50:23Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/grpc/GrpcBaseSpecification.groovy", "diffHunk": "@@ -36,9 +36,33 @@ class GrpcBaseSpecification extends HealthCheckSpecification {\n                     false, \"of_version\", \"manufacturer\", \"hardware\", \"software\", \"serial_number\") as List\n         } else {\n             northbound.activeSwitches.findAll {\n-                def matcher = it.description =~ /NW[0-9]+.([0-9].[0-9])/\n-                return matcher && matcher[0][1] >= \"2.7\"\n+                it.manufacturer.toLowerCase().contains(\"noviflow\") &&\n+                        compareNoviVersions(it.software, \"500.2.7\") >= 0\n             }.unique { [it.hardware, it.software] }\n         }\n     }\n+\n+    /**\n+     * Compare 2 version strings. Must have equal amount of number groups, e.g. 500.0.0.1 and 49.555.45.0\n+     * @return '1' if v1 > v2, '-1' if v1 < v2, '0' if equal\n+     */\n+    int compareNoviVersions(String v1, String v2) {\n+        def pattern = /\\d+/\n+        def v1Matcher = v1 =~ pattern\n+        def v2Matcher = v2 =~ pattern\n+        if (!v1Matcher || !v2Matcher || v1Matcher.size() != v2Matcher.size()) {\n+            throw new RuntimeException(\"Unable to compare given version strings: $v1 and $v2\")\n+        }\n+        def v1Numbers = v1Matcher.collect { it[0] }\n+        def v2Numbers = v2Matcher.collect { it[0] }\n+        for (int i = 0; i < v1Numbers.size(); i++) {\n+            if (v1Numbers[i] > v2Numbers[i]) {\n+                return 1\n+            } else if (v1Numbers[i] < v2Numbers[i]) {\n+                return -1\n+            }\n+        }\n+        return 0\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05eef7190cbeed9d6a41ca62a25cc4778475b5bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MjEwMQ==", "bodyText": "to achieve what result? v1 and v2 are strings, I don't need to compare strings, I need to compare versions.\n\"500.2.12\" <=> \"500.2.7\" == -1\nbut compareNoviVersions(\"500.2.12\", \"500.2.7\") == 1", "url": "https://github.com/telstra/open-kilda/pull/3544#discussion_r440952101", "createdAt": "2020-06-16T15:41:33Z", "author": {"login": "rtretyak"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/grpc/GrpcBaseSpecification.groovy", "diffHunk": "@@ -36,9 +36,33 @@ class GrpcBaseSpecification extends HealthCheckSpecification {\n                     false, \"of_version\", \"manufacturer\", \"hardware\", \"software\", \"serial_number\") as List\n         } else {\n             northbound.activeSwitches.findAll {\n-                def matcher = it.description =~ /NW[0-9]+.([0-9].[0-9])/\n-                return matcher && matcher[0][1] >= \"2.7\"\n+                it.manufacturer.toLowerCase().contains(\"noviflow\") &&\n+                        compareNoviVersions(it.software, \"500.2.7\") >= 0\n             }.unique { [it.hardware, it.software] }\n         }\n     }\n+\n+    /**\n+     * Compare 2 version strings. Must have equal amount of number groups, e.g. 500.0.0.1 and 49.555.45.0\n+     * @return '1' if v1 > v2, '-1' if v1 < v2, '0' if equal\n+     */\n+    int compareNoviVersions(String v1, String v2) {\n+        def pattern = /\\d+/\n+        def v1Matcher = v1 =~ pattern\n+        def v2Matcher = v2 =~ pattern\n+        if (!v1Matcher || !v2Matcher || v1Matcher.size() != v2Matcher.size()) {\n+            throw new RuntimeException(\"Unable to compare given version strings: $v1 and $v2\")\n+        }\n+        def v1Numbers = v1Matcher.collect { it[0] }\n+        def v2Numbers = v2Matcher.collect { it[0] }\n+        for (int i = 0; i < v1Numbers.size(); i++) {\n+            if (v1Numbers[i] > v2Numbers[i]) {\n+                return 1\n+            } else if (v1Numbers[i] < v2Numbers[i]) {\n+                return -1\n+            }\n+        }\n+        return 0\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMzY5OA=="}, "originalCommit": {"oid": "05eef7190cbeed9d6a41ca62a25cc4778475b5bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNTg2Mw==", "bodyText": "agree, this operator doesn't work well with string", "url": "https://github.com/telstra/open-kilda/pull/3544#discussion_r441105863", "createdAt": "2020-06-16T19:56:15Z", "author": {"login": "andriidovhan"}, "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/grpc/GrpcBaseSpecification.groovy", "diffHunk": "@@ -36,9 +36,33 @@ class GrpcBaseSpecification extends HealthCheckSpecification {\n                     false, \"of_version\", \"manufacturer\", \"hardware\", \"software\", \"serial_number\") as List\n         } else {\n             northbound.activeSwitches.findAll {\n-                def matcher = it.description =~ /NW[0-9]+.([0-9].[0-9])/\n-                return matcher && matcher[0][1] >= \"2.7\"\n+                it.manufacturer.toLowerCase().contains(\"noviflow\") &&\n+                        compareNoviVersions(it.software, \"500.2.7\") >= 0\n             }.unique { [it.hardware, it.software] }\n         }\n     }\n+\n+    /**\n+     * Compare 2 version strings. Must have equal amount of number groups, e.g. 500.0.0.1 and 49.555.45.0\n+     * @return '1' if v1 > v2, '-1' if v1 < v2, '0' if equal\n+     */\n+    int compareNoviVersions(String v1, String v2) {\n+        def pattern = /\\d+/\n+        def v1Matcher = v1 =~ pattern\n+        def v2Matcher = v2 =~ pattern\n+        if (!v1Matcher || !v2Matcher || v1Matcher.size() != v2Matcher.size()) {\n+            throw new RuntimeException(\"Unable to compare given version strings: $v1 and $v2\")\n+        }\n+        def v1Numbers = v1Matcher.collect { it[0] }\n+        def v2Numbers = v2Matcher.collect { it[0] }\n+        for (int i = 0; i < v1Numbers.size(); i++) {\n+            if (v1Numbers[i] > v2Numbers[i]) {\n+                return 1\n+            } else if (v1Numbers[i] < v2Numbers[i]) {\n+                return -1\n+            }\n+        }\n+        return 0\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMzY5OA=="}, "originalCommit": {"oid": "05eef7190cbeed9d6a41ca62a25cc4778475b5bd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODE3NDA3OnYy", "diffSide": "RIGHT", "path": "src-java/projectfloodlight/openflowj/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1Mjo0NFrOGkq2zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozODoxOFrOGk5cyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNDA3OA==", "bodyText": "what's wrong with that?", "url": "https://github.com/telstra/open-kilda/pull/3544#discussion_r441104078", "createdAt": "2020-06-16T19:52:44Z", "author": {"login": "andriidovhan"}, "path": "src-java/projectfloodlight/openflowj/build.gradle", "diffHunk": "@@ -46,9 +46,9 @@ task generateSources(type: Exec, dependsOn: cloneLoxigenRepo) {\n         commandLine 'make', 'java'\n     }\n     else {\n-        def uid = new UnixSystem().getUid()\n-        def gid = new UnixSystem().getGid()\n-        commandLine 'docker', 'run', '--rm', '-v', \"$workingDir:$workingDir\", '-w', \"$workingDir\", '-u', \"$uid:$gid\", 'kilda/base-ubuntu', 'make', 'java'\n+//        def uid = new UnixSystem().getUid()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60de6a108590877fed3fe607ed3423c4b97eb3ee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MzE3Ng==", "bodyText": "ops, accidentally committed from my windows machine -_-\nreverted changes in this file", "url": "https://github.com/telstra/open-kilda/pull/3544#discussion_r441343176", "createdAt": "2020-06-17T07:38:18Z", "author": {"login": "rtretyak"}, "path": "src-java/projectfloodlight/openflowj/build.gradle", "diffHunk": "@@ -46,9 +46,9 @@ task generateSources(type: Exec, dependsOn: cloneLoxigenRepo) {\n         commandLine 'make', 'java'\n     }\n     else {\n-        def uid = new UnixSystem().getUid()\n-        def gid = new UnixSystem().getGid()\n-        commandLine 'docker', 'run', '--rm', '-v', \"$workingDir:$workingDir\", '-w', \"$workingDir\", '-u', \"$uid:$gid\", 'kilda/base-ubuntu', 'make', 'java'\n+//        def uid = new UnixSystem().getUid()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNDA3OA=="}, "originalCommit": {"oid": "60de6a108590877fed3fe607ed3423c4b97eb3ee"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1873, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}