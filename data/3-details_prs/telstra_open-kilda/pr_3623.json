{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDU4MDUx", "number": 3623, "title": "Simultaneous switch availability in multimple regions", "bodyText": "", "createdAt": "2020-07-10T14:01:44Z", "url": "https://github.com/telstra/open-kilda/pull/3623", "merged": true, "mergeCommit": {"oid": "dc06b9a6117620b97d5567213f8c7400e977df3f"}, "closed": true, "closedAt": "2020-08-11T12:47:11Z", "author": {"login": "surabujin"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2sxYOgBqjM1NjQzOTk4ODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc90V9tgFqTQ2NDk0NDIxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15d03ce74bb19c07ac6ac6f469718e642a84b1e3", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/15d03ce74bb19c07ac6ac6f469718e642a84b1e3", "committedDate": "2020-07-17T20:24:07Z", "message": "(wip)"}, "afterCommit": {"oid": "a213912cf06b17ba0808710c961546f1fb72eb0c", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/a213912cf06b17ba0808710c961546f1fb72eb0c", "committedDate": "2020-07-20T07:42:38Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a213912cf06b17ba0808710c961546f1fb72eb0c", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/a213912cf06b17ba0808710c961546f1fb72eb0c", "committedDate": "2020-07-20T07:42:38Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "a4283e121836df48f808812db1122cdc689af0de", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/a4283e121836df48f808812db1122cdc689af0de", "committedDate": "2020-07-20T09:11:33Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4283e121836df48f808812db1122cdc689af0de", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/a4283e121836df48f808812db1122cdc689af0de", "committedDate": "2020-07-20T09:11:33Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "30f790a049a075f62eb513546bb3ffaa0d258be8", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/30f790a049a075f62eb513546bb3ffaa0d258be8", "committedDate": "2020-07-29T08:43:25Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30f790a049a075f62eb513546bb3ffaa0d258be8", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/30f790a049a075f62eb513546bb3ffaa0d258be8", "committedDate": "2020-07-29T08:43:25Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "c600f66fd6a4b0a1e022fcee495fbe9eb527ca8f", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/c600f66fd6a4b0a1e022fcee495fbe9eb527ca8f", "committedDate": "2020-07-30T11:30:16Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c600f66fd6a4b0a1e022fcee495fbe9eb527ca8f", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/c600f66fd6a4b0a1e022fcee495fbe9eb527ca8f", "committedDate": "2020-07-30T11:30:16Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "d117bb0fda486ea31d2c22b56ac26ce974ac9a49", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/d117bb0fda486ea31d2c22b56ac26ce974ac9a49", "committedDate": "2020-07-30T12:14:24Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d117bb0fda486ea31d2c22b56ac26ce974ac9a49", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/d117bb0fda486ea31d2c22b56ac26ce974ac9a49", "committedDate": "2020-07-30T12:14:24Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "2dfa8f7b0bd223abc40b8c113a0d42b36b450862", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/2dfa8f7b0bd223abc40b8c113a0d42b36b450862", "committedDate": "2020-07-30T15:43:00Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dfa8f7b0bd223abc40b8c113a0d42b36b450862", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/2dfa8f7b0bd223abc40b8c113a0d42b36b450862", "committedDate": "2020-07-30T15:43:00Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "e43b2dd2d0cc486729cd3768876af3a24899c63c", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/e43b2dd2d0cc486729cd3768876af3a24899c63c", "committedDate": "2020-07-31T06:15:17Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e43b2dd2d0cc486729cd3768876af3a24899c63c", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/e43b2dd2d0cc486729cd3768876af3a24899c63c", "committedDate": "2020-07-31T06:15:17Z", "message": "Support for multiple simultaneousswitch to controller connections\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce", "committedDate": "2020-07-31T06:34:54Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTE2NzUw", "url": "https://github.com/telstra/open-kilda/pull/3623#pullrequestreview-459916750", "createdAt": "2020-08-03T10:24:07Z", "commit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyNDowN1rOG60RMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTozMzoxN1rOG62EjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjk2Mw==", "bodyText": "Closing bracket is missing", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464326963", "createdAt": "2020-08-03T10:24:07Z", "author": {"login": "rozdy"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java", "diffHunk": "@@ -271,8 +269,22 @@ private void handleCommand(CommandMessage message) {\n             doRemoveIslDefaultRule(message);\n         } else if (data instanceof DumpGroupsRequest) {\n             doDumpGroupsRequest(message);\n+        } else if (data instanceof BroadcastWrapper) {\n+            handleBroadcastCommand(message, (BroadcastWrapper) data);\n         } else {\n-            logger.error(\"Unable to handle '{}' request - handler not found.\", data);\n+            handlerNotFound(data);\n+        }\n+    }\n+\n+    private void handleBroadcastCommand(CommandMessage message, BroadcastWrapper wrapper) {\n+        CommandData payload = wrapper.getPayload();\n+        if (payload instanceof PortsCommandData) {\n+            doPortsCommandDataRequest(wrapper.getScope(), (PortsCommandData) payload, message.getCorrelationId());\n+        } else if (payload instanceof ConnectModeRequest) {\n+            // FIXME(surabujin) - caller do not expect multiple responses(from multiple regions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw==", "bodyText": "I don't like boolean readWriteMode. Either change to enum or rename to something like writeAllowedMode.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464331603", "createdAt": "2020-08-03T10:34:28Z", "author": {"login": "rozdy"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNDYxMQ==", "bodyText": "Consider renaming to \"switch mapping expire delay\".", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464334611", "createdAt": "2020-08-03T10:41:41Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/FloodlightRouterTopologyConfig.java", "diffHunk": "@@ -43,4 +43,8 @@\n     @Default(\"1\")\n     @Converter(StringToSetConverter.class)\n     Set<String> getFloodlightRegions();\n+\n+    @Key(\"floodlight.switch.mapping.remove.delay.seconds\")\n+    @Default(\"900\")\n+    Long getSwitchMappingRemoveDelay();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzODQ4Nw==", "bodyText": "Why don't use pullValue here?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464338487", "createdAt": "2020-08-03T10:50:34Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/bolts/RegionTrackerBolt.java", "diffHunk": "@@ -150,79 +126,69 @@ private void handleTick() {\n         }\n     }\n \n-    private void handleInput(Tuple input) {\n-        String sourceComponent = input.getSourceComponent();\n-        Message message = (Message) input.getValueByField(AbstractTopology.MESSAGE_FIELD);\n+    private void handleNetworkNotification(Tuple input) {\n+        String stream = input.getSourceStreamId();\n+        if (SpeakerToNetworkProxyBolt.STREAM_ALIVE_EVIDENCE_ID.equals(stream)) {\n+            handleAliveEvidenceNotification(input);\n+        } else if (SpeakerToNetworkProxyBolt.STREAM_REGION_NOTIFICATION_ID.equals(stream)) {\n+            handleRegionNotification(input);\n+        } else {\n+            unhandledInput(input);\n+        }\n+    }\n \n-        // setup correct command context\n-        commandContext = new CommandContext(message);\n+    private void handleAliveEvidenceNotification(Tuple input) {\n+        String region = input.getStringByField(SpeakerToNetworkProxyBolt.FIELD_ID_REGION);\n+        long timestamp = input.getLongByField(SpeakerToNetworkProxyBolt.FIELD_ID_TIMESTAMP);\n \n-        switch (sourceComponent) {\n-            case ComponentType.KILDA_TOPO_DISCO_REPLY_BOLT:\n-                routerService.processSpeakerDiscoResponse(this, message);\n-                break;\n-            default:\n-                log.error(\"Unknown input stream handled: {}\", sourceComponent);\n-                break;\n-        }\n+        floodlightTracker.handleAliveEvidence(region, timestamp);\n     }\n \n-    private void setupTuple(Tuple input) {\n-        currentTuple = input;\n-        commandContext = new CommandContext();\n+    private void handleRegionNotification(Tuple input) {\n+        String region = input.getStringByField(SpeakerToNetworkProxyBolt.FIELD_ID_REGION);\n+        InfoData payload = (InfoData) input.getValueByField(SpeakerToNetworkProxyBolt.FIELD_ID_PAYLOAD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MDU2Ng==", "bodyText": "As I can see not only discovery notifications may be suppressed here.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464340566", "createdAt": "2020-08-03T10:55:17Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/bolts/SpeakerToControllerProxyBolt.java", "diffHunk": "@@ -41,8 +69,79 @@ protected void handleInput(Tuple input) throws Exception {\n         proxy(key, payload);\n     }\n \n-    protected void proxy(String key, Object payload) {\n-        getOutput().emit(getCurrentTuple(), makeDefaultTuple(key, payload));\n+    private void handleSwitchMappingUpdate(Tuple input) throws PipelineException {\n+        RegionMappingUpdate update = pullValue(input, SwitchMonitorBolt.FIELD_ID_PAYLOAD, RegionMappingUpdate.class);\n+        switchMapping.update(update);\n+    }\n+\n+    private void proxy(String key, Object value) {\n+        if (value instanceof InfoMessage) {\n+            proxyInfoMessage(key, (InfoMessage) value);\n+        } else {\n+            proxyOther(key, value);\n+        }\n+    }\n+\n+    protected void proxyInfoMessage(String key, InfoMessage envelope) {\n+        InfoData payload = envelope.getData();\n+        if (payload instanceof IslInfoData) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslInfoData) payload);\n+        } else if (payload instanceof PortInfoData) {\n+            proxyOnlyIfActiveRegion(key, envelope, (PortInfoData) payload);\n+        } else if (payload instanceof IslOneWayLatency) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslOneWayLatency) payload);\n+        } else if (payload instanceof IslBaseLatency) {\n+            proxyOnlyIfActiveRegion(key, envelope, (IslBaseLatency) payload);\n+        } else if (payload instanceof ConnectedDevicePacketBase) {\n+            proxyOnlyIfActiveRegion(key, envelope, (ConnectedDevicePacketBase) payload);\n+        } else {\n+            proxyOther(key, envelope);\n+        }\n+    }\n+\n+    protected void proxyOther(String key, Object value) {\n+        getOutput().emit(getCurrentTuple(), makeDefaultTuple(key, value));\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslInfoData payload) {\n+        SwitchId switchId = payload.getDestination().getSwitchId();\n+        proxyOnlyIfActiveRegion(key, envelope, switchId);\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, PortInfoData payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslOneWayLatency payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getDstSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, IslBaseLatency payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSrcSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, ConnectedDevicePacketBase payload) {\n+        proxyOnlyIfActiveRegion(key, envelope, payload.getSwitchId());\n+    }\n+\n+    private void proxyOnlyIfActiveRegion(String key, InfoMessage envelope, SwitchId switchId) {\n+        switchMapping.lookupReadWriteRegion(switchId).ifPresent(activeRegion -> {\n+            String region = envelope.getRegion();\n+            if (Objects.equals(activeRegion, region)) {\n+                proxyOther(key, envelope);\n+            } else {\n+                log.debug(\n+                        \"Suppress discovery notification {} (received via region \\\"{}\\\" while active region is \\\"{}\\\")\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MjQ0Ng==", "bodyText": "The same naming issue. Rename to writeAllowedMode.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464352446", "createdAt": "2020-08-03T11:23:51Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/model/RegionMappingUpdate.java", "diffHunk": "@@ -13,14 +13,15 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.floodlightrouter.service;\n+package org.openkilda.wfm.topology.floodlightrouter.model;\n \n import org.openkilda.model.SwitchId;\n \n import lombok.Value;\n \n @Value\n-public class SwitchMapping {\n+public class RegionMappingUpdate {\n     private SwitchId switchId;\n     private String region;\n+    private boolean readWriteMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1NDAxOA==", "bodyText": "os -> is", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464354018", "createdAt": "2020-08-03T11:27:17Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/service/monitor/SwitchConnectMonitor.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.floodlightrouter.service.monitor;\n+\n+import org.openkilda.messaging.info.InfoData;\n+import org.openkilda.messaging.info.discovery.NetworkDumpSwitchData;\n+import org.openkilda.messaging.info.event.SwitchInfoData;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.wfm.topology.floodlightrouter.model.RegionMappingUpdate;\n+import org.openkilda.wfm.topology.floodlightrouter.service.SwitchMonitorCarrier;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public abstract class SwitchConnectMonitor {\n+    protected final SwitchMonitorCarrier carrier;\n+    private final Clock clock;\n+    protected final SwitchId switchId;\n+\n+    protected final Set<String> availableInRegions = new HashSet<>();\n+    private String activeRegion = null;\n+\n+    /**\n+     * Last time when connection was marked as unavailable. Caller must use {@code isAvailable()} result to detect\n+     * is connection now available or not.\n+     */\n+    @Getter\n+    private Instant becomeUnavailableAt;\n+\n+    public SwitchConnectMonitor(SwitchMonitorCarrier carrier, Clock clock, SwitchId switchId) {\n+        this.carrier = carrier;\n+        this.clock = clock;\n+        this.switchId = switchId;\n+\n+        // connection os not active yet... so it is inactive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1NjQ5Mg==", "bodyText": "Rename here too.", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r464356492", "createdAt": "2020-08-03T11:33:17Z", "author": {"login": "rozdy"}, "path": "src-java/floodlightrouter-topology/floodlightrouter-storm-topology/src/main/java/org/openkilda/wfm/topology/floodlightrouter/service/monitor/SwitchConnectMonitor.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.floodlightrouter.service.monitor;\n+\n+import org.openkilda.messaging.info.InfoData;\n+import org.openkilda.messaging.info.discovery.NetworkDumpSwitchData;\n+import org.openkilda.messaging.info.event.SwitchInfoData;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.wfm.topology.floodlightrouter.model.RegionMappingUpdate;\n+import org.openkilda.wfm.topology.floodlightrouter.service.SwitchMonitorCarrier;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public abstract class SwitchConnectMonitor {\n+    protected final SwitchMonitorCarrier carrier;\n+    private final Clock clock;\n+    protected final SwitchId switchId;\n+\n+    protected final Set<String> availableInRegions = new HashSet<>();\n+    private String activeRegion = null;\n+\n+    /**\n+     * Last time when connection was marked as unavailable. Caller must use {@code isAvailable()} result to detect\n+     * is connection now available or not.\n+     */\n+    @Getter\n+    private Instant becomeUnavailableAt;\n+\n+    public SwitchConnectMonitor(SwitchMonitorCarrier carrier, Clock clock, SwitchId switchId) {\n+        this.carrier = carrier;\n+        this.clock = clock;\n+        this.switchId = switchId;\n+\n+        // connection os not active yet... so it is inactive\n+        becomeUnavailableAt = clock.instant();\n+    }\n+\n+    /**\n+     * Handle switch status notification.\n+     */\n+    public boolean handleSwitchStatusNotification(SwitchInfoData notification, String region) {\n+        ensureSwitchIdMatch(notification.getSwitchId());\n+\n+        if (isConnectNotification(notification)) {\n+            handleConnect(notification, region);\n+        } else if (isDisconnectNotification(notification)) {\n+            handleDisconnect(notification, region);\n+        } else {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Handle region offline notification.\n+     */\n+    public void handleRegionOfflineNotification(String region) {\n+        if (availableInRegions.remove(region)) {\n+            handleAvailableRegionsSetUpdate();\n+            if (availableInRegions.isEmpty()) {\n+                becomeUnavailableDueToRegionOffline();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Handle network dump response.\n+     */\n+    public void handleNetworkDumpResponse(NetworkDumpSwitchData switchData, String region) {\n+        ensureSwitchIdMatch(switchData.getSwitchId());\n+\n+        boolean availableNow = isAvailable();\n+        handleConnect(switchData, region);\n+        if (availableNow && Objects.equals(activeRegion, region)) {\n+            // proxy network dump for active region only\n+            carrier.switchStatusUpdateNotification(switchId, switchData);\n+        }\n+    }\n+\n+    public boolean isAvailable() {\n+        return ! availableInRegions.isEmpty();\n+    }\n+\n+    protected void handleConnect(InfoData notification, String region) {\n+        if (availableInRegions.add(region)) {\n+            if (availableInRegions.size() == 1) {\n+                becomeAvailable(notification, region);\n+            }\n+            handleAvailableRegionsSetUpdate();\n+        }\n+    }\n+\n+    protected void handleDisconnect(SwitchInfoData notification, String region) {\n+        if (availableInRegions.remove(region)) {\n+            handleAvailableRegionsSetUpdate();\n+            if (availableInRegions.isEmpty()) {\n+                becomeUnavailable(notification);\n+            }\n+        }\n+    }\n+\n+    protected void becomeAvailable(InfoData notification, String region) {\n+        activeRegion = region;\n+        log.info(\"Set {} active region for {} to \\\"{}\\\"\", formatConnectMode(), switchId, activeRegion);\n+\n+        carrier.regionUpdateNotification(new RegionMappingUpdate(switchId, activeRegion, isReadWriteMode()));\n+        carrier.switchStatusUpdateNotification(switchId, notification);\n+    }\n+\n+    protected void becomeUnavailable(InfoData notification) {\n+        becomeUnavailableAt = clock.instant();\n+        activeRegion = null;\n+        log.info(\"There is no any {} available regions for {} - switch is unavailable\", formatConnectMode(), switchId);\n+\n+        carrier.regionUpdateNotification(new RegionMappingUpdate(switchId, null, isReadWriteMode()));\n+        carrier.switchStatusUpdateNotification(switchId, notification);\n+    }\n+\n+    protected abstract void becomeUnavailableDueToRegionOffline();\n+\n+    protected void handleAvailableRegionsSetUpdate() {\n+        log.info(\n+                \"List of {} availability zones for {} has changed to: {}\",\n+                formatConnectMode(), switchId, formatAvailableRegionsSet());\n+        if (!availableInRegions.contains(activeRegion) && !availableInRegions.isEmpty()) {\n+            swapActiveRegion();\n+        }\n+    }\n+\n+    protected void ensureSwitchIdMatch(SwitchId affectedSwitchId) {\n+        if (!switchId.equals(affectedSwitchId)) {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Got status update notification for wrong switch %s, can process notification only for %s\",\n+                    affectedSwitchId, switchId));\n+        }\n+    }\n+\n+    protected abstract boolean isReadWriteMode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 161}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce", "committedDate": "2020-07-31T06:34:54Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "c8423c760734553acaf07ea95ac4d1c01f5fd5ab", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/c8423c760734553acaf07ea95ac4d1c01f5fd5ab", "committedDate": "2020-08-03T16:43:13Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjM1Mzg2", "url": "https://github.com/telstra/open-kilda/pull/3623#pullrequestreview-460635386", "createdAt": "2020-08-04T09:10:42Z", "commit": {"oid": "c8423c760734553acaf07ea95ac4d1c01f5fd5ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8423c760734553acaf07ea95ac4d1c01f5fd5ab", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/c8423c760734553acaf07ea95ac4d1c01f5fd5ab", "committedDate": "2020-08-03T16:43:13Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3", "committedDate": "2020-08-05T12:32:50Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTk0OTcw", "url": "https://github.com/telstra/open-kilda/pull/3623#pullrequestreview-463194970", "createdAt": "2020-08-07T10:08:56Z", "commit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDowODo1N1rOG9URjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo1MDoyM1rOG-DDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0ODQ5NA==", "bodyText": "readWriteMode is very hard to understand, if the main focus in this pair of modes in write permissions, why not to call it writeMode of type boolean", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r466948494", "createdAt": "2020-08-07T10:08:57Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/info/discovery/NetworkDumpSwitchData.java", "diffHunk": "@@ -38,9 +40,19 @@\n     @JsonProperty(value = \"switch_record\", required = true)\n     private SpeakerSwitchView switchView;\n \n+    @JsonProperty(\"read_write_mode\")\n+    private boolean readWriteMode;\n+\n     @JsonCreator\n     public NetworkDumpSwitchData(\n-            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView) {\n+            @JsonProperty(\"switch_record\") @NonNull SpeakerSwitchView switchView,\n+            @JsonProperty(\"read_write_mode\") boolean readWriteMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTYwMw=="}, "originalCommit": {"oid": "0e61b76ca8093f27ca2b5d3d079cb1d993e5a6ce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjU0MQ==", "bodyText": "why all these are changed?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467712541", "createdAt": "2020-08-10T06:42:26Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-modules/src/main/resources/floodlightkilda.properties.example", "diffHunk": "@@ -59,24 +63,31 @@ net.floodlightcontroller.topology.TopologyManager.pathMetric=latency\n net.floodlightcontroller.topology.TopologyManager.maxPathsToCompute=3\n #org.openkilda.floodlight.KildaCore.command-processor-workers-count = 4\n #org.openkilda.floodlight.KildaCore.command-processor-workers-limit = 32\n-#org.openkilda.floodlight.KildaCore.command-processor-deferred-requests-limit = 8\n+org.openkilda.floodlight.KildaCore.command-processor-deferred-requests-limit = 64\n #org.openkilda.floodlight.KildaCore.command-processor-idle-workers-keep-alive-seconds = 300\n-#org.openkilda.floodlight.KildaCore.flow-ping-magic-src-mac-address=00:26:E1:FF:FF:FE\n-org.openkilda.floodlight.KildaCore.server42-upd-port-offset=5000\n org.openkilda.floodlight.KafkaChannel.environment-naming-prefix=\n org.openkilda.floodlight.KafkaChannel.bootstrap-servers=kafka.pendev:9092\n #org.openkilda.floodlight.KafkaChannel.heart-beat-interval=1\n-#org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-executors=10\n-#org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-disco-executors=10\n+org.openkilda.floodlight.kafka.KafkaMessageCollector.consumer-executors=20", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDE4Mg==", "bodyText": "why is this commented, not removed?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467714182", "createdAt": "2020-08-10T06:47:45Z", "author": {"login": "timofei-durakov"}, "path": "src-java/base-topology/base-storm-topology/src/release/resources/topology.properties.example", "diffHunk": "@@ -102,6 +102,7 @@ floodlight.alive.timeout = 10\n floodlight.alive.interval = 2\n message.blacklist.timeout = 180\n floodlight.regions = 1\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDI2NA==", "bodyText": "why is this commented, not removed?", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467714264", "createdAt": "2020-08-10T06:48:01Z", "author": {"login": "timofei-durakov"}, "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -96,6 +96,7 @@ floodlight.alive.timeout = {{ getv \"/kilda_floodlight_alive_timeout\" }}\n floodlight.alive.interval = {{ getv \"/kilda_floodlight_alive_interval\" }}\n message.blacklist.timeout = {{ getv \"/kilda_message_blacklist_timeout\" }}\n floodlight.regions = {{ getv \"/kilda_floodlight_regions\" }}\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDQ2MQ==", "bodyText": "could you please add a java doc why this wrapper is needed, it will help", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467714461", "createdAt": "2020-08-10T06:48:45Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/BroadcastWrapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.command;\n+\n+import org.openkilda.model.SwitchId;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+import java.util.Set;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = false)\n+public class BroadcastWrapper extends CommandData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNTAxMw==", "bodyText": "why not switches? scope is too abstract:-p", "url": "https://github.com/telstra/open-kilda/pull/3623#discussion_r467715013", "createdAt": "2020-08-10T06:50:23Z", "author": {"login": "timofei-durakov"}, "path": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/BroadcastWrapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.command;\n+\n+import org.openkilda.model.SwitchId;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+import java.util.Set;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = false)\n+public class BroadcastWrapper extends CommandData {\n+    @JsonProperty(\"scope\")\n+    private Set<SwitchId> scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/3f9c22aa3c74b234404ae131d1d9ddb5c7a102f3", "committedDate": "2020-08-05T12:32:50Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "56108b947232aabccf944e3bcd9953197fe7abb6", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/56108b947232aabccf944e3bcd9953197fe7abb6", "committedDate": "2020-08-11T08:11:46Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89f8cbfb984b67e1292c4bea1e81bff5fe814942", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/89f8cbfb984b67e1292c4bea1e81bff5fe814942", "committedDate": "2020-08-11T10:14:12Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56108b947232aabccf944e3bcd9953197fe7abb6", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/56108b947232aabccf944e3bcd9953197fe7abb6", "committedDate": "2020-08-11T08:11:46Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}, "afterCommit": {"oid": "89f8cbfb984b67e1292c4bea1e81bff5fe814942", "author": {"user": {"login": "surabujin", "name": "Dmitriy Bogun"}}, "url": "https://github.com/telstra/open-kilda/commit/89f8cbfb984b67e1292c4bea1e81bff5fe814942", "committedDate": "2020-08-11T10:14:12Z", "message": "Support multiple simultaneous FL connections from a single switch\n\nFloodlightRouter topology monitor switch connections to the speakers. It\nthack \"active\" connection/region accordnig to the data reported from\nspeaker (connection/disconnect events) and to the region alive status\nproduced by floodlightrouter itself.\n\nSo requests will be routed into active region. This region tracked on\nper switch level i.e. each switch have own active region. Active region\nchanged only on switch disconnect event (for this region) or on region\ndisconnect/unavailability."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0OTQ0MjEw", "url": "https://github.com/telstra/open-kilda/pull/3623#pullrequestreview-464944210", "createdAt": "2020-08-11T10:34:32Z", "commit": {"oid": "89f8cbfb984b67e1292c4bea1e81bff5fe814942"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3535, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}