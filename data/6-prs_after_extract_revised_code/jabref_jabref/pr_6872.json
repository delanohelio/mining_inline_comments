{"pr_number": 6872, "pr_title": "Add multi-sentence title formatting to sentence case and title case", "pr_createdAt": "2020-09-04T20:47:22Z", "pr_url": "https://github.com/JabRef/jabref/pull/6872", "timeline": [{"oid": "c29cfb1e58bc459b235fbc9f9ff4793b1c1dac8b", "url": "https://github.com/JabRef/jabref/commit/c29cfb1e58bc459b235fbc9f9ff4793b1c1dac8b", "message": "Add multi-sentence title formatting to sentence case and title case", "committedDate": "2020-09-04T20:34:32Z", "type": "commit"}, {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "url": "https://github.com/JabRef/jabref/commit/d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "message": "fix checkstyle issues", "committedDate": "2020-09-08T16:38:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4Nzc3Ng==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491687776", "bodyText": "Here, the power of Java streams can be used: (then, one does not need the hack deleteCharAt.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> sentences = StringUtil.getStringAsSentences(input);\n          \n          \n            \n                    return StringUtil.getStringAsSentences(input)\n          \n          \n            \n                              .stream()\n          \n          \n            \n                              .map(sentence -> new LowerCaseFormatter().format(sentence))\n          \n          \n            \n                              .map(lowerCase -> new Title(lowerCase))\n          \n          \n            \n                              .map(title -> {\n          \n          \n            \n                                  title.getFirstWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n                                  return title;\n          \n          \n            \n                              })\n          \n          \n            \n                              .map(title -> title.toString())\n          \n          \n            \n                              .collect(Collectors.joining(\" \"));", "author": "koppor", "createdAt": "2020-09-20T12:39:48Z", "path": "src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java", "diffHunk": "@@ -20,11 +23,17 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(new LowerCaseFormatter().format(input));\n+        List<String> sentences = StringUtil.getStringAsSentences(input);", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a9ff15e508caab4dce607bf652cf4ea6a855921", "chunk": "diff --git a/src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java b/src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java\nindex 4969ba503..5f73c4839 100644\n--- a/src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java\n+++ b/src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java\n\n@@ -23,17 +23,16 @@ public class SentenceCaseFormatter extends Formatter {\n      */\n     @Override\n     public String format(String input) {\n-        List<String> sentences = StringUtil.getStringAsSentences(input);\n-        StringBuilder result = new StringBuilder();\n-        for (String sentence : sentences) {\n-            Title title = new Title(new LowerCaseFormatter().format(sentence));\n-\n-            title.getWords().stream().findFirst().ifPresent(Word::toUpperFirst);\n-\n-            result.append(title.toString() + \" \");\n-        }\n-        result.deleteCharAt(result.length() - 1);\n-        return result.toString();\n+        return StringUtil.getStringAsSentences(input)\n+                .stream()\n+                .map(new LowerCaseFormatter()::format)\n+                .map(Title::new)\n+                .map(title -> {\n+                    title.getFirstWord().ifPresent(Word::toUpperFirst);\n+                    return title;\n+                })\n+                .map(Object::toString)\n+                .collect(Collectors.joining(\" \"));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NzgzOQ==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491687839", "bodyText": "This relies on the fact that toUpperFirst modifies the underlying object. This is a design of our Word class. It is OK for me now.", "author": "koppor", "createdAt": "2020-09-20T12:40:22Z", "path": "src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java", "diffHunk": "@@ -20,11 +23,17 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(new LowerCaseFormatter().format(input));\n+        List<String> sentences = StringUtil.getStringAsSentences(input);\n+        StringBuilder result = new StringBuilder();\n+        for (String sentence : sentences) {\n+            Title title = new Title(new LowerCaseFormatter().format(sentence));\n \n-        title.getWords().stream().findFirst().ifPresent(Word::toUpperFirst);\n+            title.getWords().stream().findFirst().ifPresent(Word::toUpperFirst);", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a9ff15e508caab4dce607bf652cf4ea6a855921", "chunk": "diff --git a/src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java b/src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java\nindex 4969ba503..5f73c4839 100644\n--- a/src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java\n+++ b/src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java\n\n@@ -23,17 +23,16 @@ public class SentenceCaseFormatter extends Formatter {\n      */\n     @Override\n     public String format(String input) {\n-        List<String> sentences = StringUtil.getStringAsSentences(input);\n-        StringBuilder result = new StringBuilder();\n-        for (String sentence : sentences) {\n-            Title title = new Title(new LowerCaseFormatter().format(sentence));\n-\n-            title.getWords().stream().findFirst().ifPresent(Word::toUpperFirst);\n-\n-            result.append(title.toString() + \" \");\n-        }\n-        result.deleteCharAt(result.length() - 1);\n-        return result.toString();\n+        return StringUtil.getStringAsSentences(input)\n+                .stream()\n+                .map(new LowerCaseFormatter()::format)\n+                .map(Title::new)\n+                .map(title -> {\n+                    title.getFirstWord().ifPresent(Word::toUpperFirst);\n+                    return title;\n+                })\n+                .map(Object::toString)\n+                .collect(Collectors.joining(\" \"));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODA4Nw==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688087", "bodyText": "Also stream magic here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> sentences = StringUtil.getStringAsSentences(input);\n          \n          \n            \n                    return StringUtil\n          \n          \n            \n                            .getStringAsSentences(input)\n          \n          \n            \n                            .stream()\n          \n          \n            \n                            .map(sentence -> {\n          \n          \n            \n                                Title title = new Title(sentence);\n          \n          \n            \n                                title.getWords().stream().filter(Word::isSmallerWord).forEach(Word::toLowerCase);\n          \n          \n            \n                                title.getWords().stream().filter(Word::isLargerWord).forEach(Word::toUpperFirst);\n          \n          \n            \n            \n          \n          \n            \n                                title.getFirstWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n                                title.getLastWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n            \n          \n          \n            \n                                for (int i = 0; i < (title.getWords().size() - 2); i++) {\n          \n          \n            \n                                    if (title.getWords().get(i).endsWithColon()) {\n          \n          \n            \n                                        title.getWords().get(i + 1).toUpperFirst();\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                                return title.toString();\n          \n          \n            \n                            })\n          \n          \n            \n                            .collect(Collectors.joining(\" \"));", "author": "koppor", "createdAt": "2020-09-20T12:43:39Z", "path": "src/main/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatter.java", "diffHunk": "@@ -22,21 +25,26 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(input);\n+        List<String> sentences = StringUtil.getStringAsSentences(input);", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a9ff15e508caab4dce607bf652cf4ea6a855921", "chunk": "diff --git a/src/main/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatter.java b/src/main/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatter.java\nindex 8c5d8fa19..eb6795301 100644\n--- a/src/main/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatter.java\n+++ b/src/main/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatter.java\n\n@@ -25,26 +25,31 @@ public class TitleCaseFormatter extends Formatter {\n      */\n     @Override\n     public String format(String input) {\n-        List<String> sentences = StringUtil.getStringAsSentences(input);\n-        StringBuilder result = new StringBuilder();\n-        for (String sentence : sentences) {\n-            Title title = new Title(sentence);\n-\n-            title.getWords().stream().filter(Word::isSmallerWord).forEach(Word::toLowerCase);\n-            title.getWords().stream().filter(Word::isLargerWord).forEach(Word::toUpperFirst);\n-\n-            title.getFirstWord().ifPresent(Word::toUpperFirst);\n-            title.getLastWord().ifPresent(Word::toUpperFirst);\n-\n-            for (int i = 0; i < (title.getWords().size() - 2); i++) {\n-                if (title.getWords().get(i).endsWithColon()) {\n-                    title.getWords().get(i + 1).toUpperFirst();\n-                }\n-            }\n-            result.append(title.toString() + \" \");\n-        }\n-        result.deleteCharAt(result.length() - 1);\n-        return result.toString();\n+        return StringUtil.getStringAsSentences(input)\n+                .stream()\n+                .map(sentence -> {\n+                    Title title = new Title(sentence);\n+                    \n+                    title.getWords().stream().filter(Word::isSmallerWord).forEach(Word::toLowerCase);\n+                    \n+                    title.getWords().stream().filter(Word::isLargerWord).forEach(Word::toUpperFirst);\n+                    \n+                    \n+                    title.getFirstWord().ifPresent(Word::toUpperFirst);\n+                    \n+                    title.getLastWord().ifPresent(Word::toUpperFirst);\n+                    \n+                    for (int i = 0; i < (title.getWords().size() - 2); i++) {\n+                        if (title.getWords().get(i).endsWithColon()) {\n+                            \n+                            title.getWords().get(i + 1).toUpperFirst();\n+                        \n+                        }\n+                    }\n+                    \n+                    return title.toString();\n+                })\n+                .collect(Collectors.joining(\" \"));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODkyOQ==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688929", "bodyText": "Could yo add some comment on the Regex? I think, it is:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");\n          \n          \n            \n                    // A sentence ends with a .?!;, but not in the case of \"Mr.\", \"Ms.\", \"Mrs.\", \"Dr.\", \"st.\", \"jr.\", \"co.\", \"inc.\", and \"ltd.\"\n          \n          \n            \n                    Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");", "author": "koppor", "createdAt": "2020-09-20T12:54:30Z", "path": "src/main/java/org/jabref/model/strings/StringUtil.java", "diffHunk": "@@ -720,6 +720,14 @@ public static String capitalizeFirst(String toCapitalize) {\n         return Arrays.asList(text.split(\"[\\\\s,;]+\"));\n     }\n \n+    /**\n+     * Returns a list of sentences contained in the given text.\n+     */\n+    public static List<String> getStringAsSentences(String text) {\n+        Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODk2Mg==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688962", "bodyText": "Please group mr, ms, and mrs together", "author": "koppor", "createdAt": "2020-09-20T12:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a9ff15e508caab4dce607bf652cf4ea6a855921", "chunk": "diff --git a/src/main/java/org/jabref/model/strings/StringUtil.java b/src/main/java/org/jabref/model/strings/StringUtil.java\nindex ec328a16a..2a5257ab1 100644\n--- a/src/main/java/org/jabref/model/strings/StringUtil.java\n+++ b/src/main/java/org/jabref/model/strings/StringUtil.java\n\n@@ -724,7 +724,8 @@ public class StringUtil {\n      * Returns a list of sentences contained in the given text.\n      */\n     public static List<String> getStringAsSentences(String text) {\n-        Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");\n+        // A sentence ends with a .?!;, but not in the case of \"Mr.\", \"Ms.\", \"Mrs.\", \"Dr.\", \"st.\", \"jr.\", \"co.\", \"inc.\", and \"ltd.\"\n+        Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm](([Rr]|[Rr][Ss])|[Ss])\\\\.|[Dd][Rr]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");\n         return Arrays.asList(splitTextPattern.split(text));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5MTI0Mw==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491691243", "bodyText": "While you are on it, I propose to rewrite to parameterized tests:\npackage org.jabref.logic.formatter.casechanger;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}\n */\npublic class SentenceCaseFormatterTest {\n\n    private SentenceCaseFormatter formatter = new SentenceCaseFormatter();\n\n    private static Stream<Arguments> testData() {\n        return Stream.of(\n                Arguments.of(\"Upper first\", \"upper First\"),\n                Arguments.of(\"Upper first\", \"uPPER FIRST\"),\n                Arguments.of(\"Upper {NOT} first\", \"upper {NOT} FIRST\"),\n                Arguments.of(\"Upper {N}ot first\", \"upper {N}OT FIRST\"),\n                Arguments.of(\"Whose music? A sociology of musical language\",\n                        \"Whose music? a sociology of musical language\"),\n                Arguments.of(\"Bibliographic software. A comparison.\",\n                        \"bibliographic software. a comparison.\"),\n                Arguments.of(\"England\u2019s monitor; The history of the separation\",\n                        \"England\u2019s Monitor; the History of the Separation\"),\n                Arguments.of(\"Dr. schultz: a dentist turned bounty hunter.\",\n                        \"Dr. schultz: a dentist turned bounty hunter.\"),\n                Arguments.of(\"Example case. {EXCLUDED SENTENCE.}\",\n                        \"Example case. {EXCLUDED SENTENCE.}\"),\n                Arguments.of(\"I have {Aa} dream\", new SentenceCaseFormatter().getExampleInput())\n        );\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"testData\")\n    public void test(String expected, String input) {\n        assertEquals(expected, formatter.format(input));\n    }\n}\nOK, the descriptions are lost. Maybe, the description could be added as first paramter to the test method.", "author": "koppor", "createdAt": "2020-09-20T13:23:01Z", "path": "src/test/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatterTest.java", "diffHunk": "@@ -25,6 +25,36 @@ public void test() {\n         assertEquals(\"Upper {N}ot first\", formatter.format(\"upper {N}OT FIRST\"));\n     }\n \n+    @Test", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "338e03afc2b10d909088b00154dbf51b0f8d676b", "chunk": "diff --git a/src/test/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatterTest.java b/src/test/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatterTest.java\nindex a7daf0255..02d90aff4 100644\n--- a/src/test/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatterTest.java\n+++ b/src/test/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatterTest.java\n\n@@ -10,53 +13,30 @@ import static org.junit.jupiter.api.Assertions.assertEquals;\n  */\n public class SentenceCaseFormatterTest {\n \n-    private SentenceCaseFormatter formatter;\n-\n-    @BeforeEach\n-    public void setUp() {\n-        formatter = new SentenceCaseFormatter();\n-    }\n-\n-    @Test\n-    public void test() {\n-        assertEquals(\"Upper first\", formatter.format(\"upper First\"));\n-        assertEquals(\"Upper first\", formatter.format(\"uPPER FIRST\"));\n-        assertEquals(\"Upper {NOT} first\", formatter.format(\"upper {NOT} FIRST\"));\n-        assertEquals(\"Upper {N}ot first\", formatter.format(\"upper {N}OT FIRST\"));\n-    }\n-\n-    @Test\n-    public void secondSentenceAfterQuestionMarkGetsCapitalized() {\n-        assertEquals(\"Whose music? A sociology of musical language\",\n-                     formatter.format(\"Whose music? a sociology of musical language\"));\n-    }\n-\n-    @Test\n-    public void testSimpleTwoSentenceTitle() {\n-        assertEquals(\"Bibliographic software. A comparison.\",\n-                     formatter.format(\"bibliographic software. a comparison.\"));\n-    }\n-\n-    @Test\n-    public void sentenceAfterSemicolonGetsCapitalized() {\n-        assertEquals(\"England\u2019s monitor; The history of the separation\",\n-                     formatter.format(\"England\u2019s Monitor; the History of the Separation\"));\n-    }\n-\n-    @Test\n-    public void commonAbbreviationIsNotTreatedAsSeperateSentence() {\n-        assertEquals(\"Dr. schultz: a dentist turned bounty hunter.\",\n-                     formatter.format(\"Dr. schultz: a dentist turned bounty hunter.\"));\n-    }\n-\n-    @Test\n-    public void secondSentenceInBracketsIsLeftUnchanged() {\n-        assertEquals(\"Example case. {EXCLUDED SENTENCE.}\",\n-                     formatter.format(\"Example case. {EXCLUDED SENTENCE.}\"));\n-    }\n-\n-    @Test\n-    public void formatExample() {\n-        assertEquals(\"I have {Aa} dream\", formatter.format(formatter.getExampleInput()));\n+    private final SentenceCaseFormatter formatter = new SentenceCaseFormatter();\n+\n+    private static Stream<Arguments> testData() {\n+        return Stream.of(\n+                Arguments.of(\"Upper first\", \"upper First\"),\n+                Arguments.of(\"Upper first\", \"uPPER FIRST\"),\n+                Arguments.of(\"Upper {NOT} first\", \"upper {NOT} FIRST\"),\n+                Arguments.of(\"Upper {N}ot first\", \"upper {N}OT FIRST\"),\n+                Arguments.of(\"Whose music? A sociology of musical language\",\n+                    \"Whose music? a sociology of musical language\"),\n+                Arguments.of(\"Bibliographic software. A comparison.\",\n+                    \"bibliographic software. a comparison.\"),\n+                Arguments.of(\"England\u2019s monitor; The history of the separation\",\n+                    \"England\u2019s Monitor; the History of the Separation\"),\n+                Arguments.of(\"Dr. schultz: a dentist turned bounty hunter.\",\n+                    \"Dr. schultz: a dentist turned bounty hunter.\"),\n+                Arguments.of(\"Example case. {EXCLUDED SENTENCE.}\",\n+                    \"Example case. {EXCLUDED SENTENCE.}\"),\n+                Arguments.of(\"I have {Aa} dream\", new SentenceCaseFormatter().getExampleInput()));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n+    public void test(String expected, String input) {\n+        assertEquals(expected, formatter.format(input));\n     }\n }\n"}}, {"oid": "4a9ff15e508caab4dce607bf652cf4ea6a855921", "url": "https://github.com/JabRef/jabref/commit/4a9ff15e508caab4dce607bf652cf4ea6a855921", "message": "refactor sentence case and title case format method, add additional info to ADR", "committedDate": "2020-09-21T14:46:37Z", "type": "commit"}, {"oid": "338e03afc2b10d909088b00154dbf51b0f8d676b", "url": "https://github.com/JabRef/jabref/commit/338e03afc2b10d909088b00154dbf51b0f8d676b", "message": "refactor titlecase and sentencecase tests", "committedDate": "2020-09-22T09:37:22Z", "type": "commit"}, {"oid": "f9f05a93bf6cbf694a7b305bff3d4f833b812909", "url": "https://github.com/JabRef/jabref/commit/f9f05a93bf6cbf694a7b305bff3d4f833b812909", "message": "fix checkstyle issues", "committedDate": "2020-09-23T10:37:35Z", "type": "commit"}, {"oid": "856c4a7a68d0be38f9f3b519415e14ccc4fa5160", "url": "https://github.com/JabRef/jabref/commit/856c4a7a68d0be38f9f3b519415e14ccc4fa5160", "message": "fix checkstyle issues", "committedDate": "2020-09-23T11:05:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MDMxMA==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r493580310", "bodyText": "Is there a reason why these tests are commented out?", "author": "Siedlerchr", "createdAt": "2020-09-23T13:21:12Z", "path": "src/test/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatterTest.java", "diffHunk": "@@ -10,8 +13,43 @@\n  */\n public class TitleCaseFormatterTest {\n \n-    private TitleCaseFormatter formatter;\n+    private final TitleCaseFormatter formatter = new TitleCaseFormatter();\n+\n+    private static Stream<Arguments> testData() {\n+        return Stream.of(\n+                Arguments.of(\"Upper Each First\", \"upper each first\"),\n+                Arguments.of(\"Upper Each First\", \"upper eACH first\"),\n+                Arguments.of(\"An Upper Each First And\", \"an upper each first and\"),\n+                Arguments.of(\"An Upper Each First And\", \"an upper each first AND\"),\n+                Arguments.of(\"An Upper Each of the and First And\",\n+                             \"an upper each of the and first and\"),\n+                Arguments.of(\"An Upper Each of the and First And\",\n+                             \"an upper each of the AND first and\"),\n+                Arguments.of(\"An Upper Each of: The and First And\",\n+                             \"an upper each of: the and first and\"),\n+                Arguments.of(\"An Upper First with and without {CURLY} {brackets}\",\n+                             \"AN UPPER FIRST WITH AND WITHOUT {CURLY} {brackets}\"),\n+                Arguments.of(\"An Upper First with {A}nd without {C}urly {b}rackets\",\n+                             \"AN UPPER FIRST WITH {A}ND WITHOUT {C}URLY {b}rackets\"),\n+                Arguments.of(\"{b}rackets {b}rac{K}ets Brack{E}ts\",\n+                             \"{b}RaCKeTS {b}RaC{K}eTS bRaCK{E}ts\"),\n+                Arguments.of(\"Two Experiences Designing for Effective Security\",\n+                             \"Two experiences designing for effective security\"),\n+                Arguments.of(\"Bibliographic Software. A Comparison.\",\n+                             \"bibliographic software. a comparison.\"),\n+                Arguments.of(\"Bibliographic Software. {A COMPARISON.}\",\n+                             \"bibliographic software. {A COMPARISON.}\"),\n+                Arguments.of(\"{BPMN} Conformance in Open Source Engines\",\n+                             new TitleCaseFormatter().getExampleInput()));\n+    }\n \n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n+    public void test(String expected, String input) {\n+        assertEquals(expected, formatter.format(input));\n+    }\n+\n+    /*", "originalCommit": "856c4a7a68d0be38f9f3b519415e14ccc4fa5160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2ODE1Mg==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r493668152", "bodyText": "They are redundant as I already added them as parameterized tests but I didn't know if I should delete them yet since they contain the descriptions of the tests.", "author": "tmrd993", "createdAt": "2020-09-23T15:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MjQ4NQ==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r493682485", "bodyText": "Then just remove them. I think it's clear from the arguments what is tested", "author": "Siedlerchr", "createdAt": "2020-09-23T15:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MDMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "9237d0743d1cfba6275bc5ac7fe1682231a98577", "chunk": "diff --git a/src/test/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatterTest.java b/src/test/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatterTest.java\nindex 15122d2d8..3d0ffe87e 100644\n--- a/src/test/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatterTest.java\n+++ b/src/test/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatterTest.java\n\n@@ -48,91 +48,4 @@ public class TitleCaseFormatterTest {\n     public void test(String expected, String input) {\n         assertEquals(expected, formatter.format(input));\n     }\n-\n-    /*\n-    @BeforeEach\n-    public void setUp() {\n-        formatter = new TitleCaseFormatter();\n-    }\n-\n-    @Test\n-    public void eachFirstLetterIsUppercased() {\n-        assertEquals(\"Upper Each First\", formatter.format(\"upper each first\"));\n-    }\n-\n-    @Test\n-    public void eachFirstLetterIsUppercasedAndOthersLowercased() {\n-        assertEquals(\"Upper Each First\", formatter.format(\"upper eACH first\"));\n-    }\n-\n-    @Test\n-    public void eachFirstLetterIsUppercasedAndATralingAndIsAlsoUppercased() {\n-        assertEquals(\"An Upper Each First And\", formatter.format(\"an upper each first and\"));\n-    }\n-\n-    @Test\n-    public void eachFirstLetterIsUppercasedAndATralingAndIsAlsoCorrectlyCased() {\n-        assertEquals(\"An Upper Each First And\", formatter.format(\"an upper each first AND\"));\n-    }\n-\n-    @Test\n-    public void eachFirstLetterIsUppercasedButIntermediateAndsAreKeptLowercase() {\n-        assertEquals(\"An Upper Each of the and First And\",\n-                formatter.format(\"an upper each of the and first and\"));\n-    }\n-\n-    @Test\n-    public void eachFirstLetterIsUppercasedButIntermediateAndsArePutLowercase() {\n-        assertEquals(\"An Upper Each of the and First And\",\n-                formatter.format(\"an upper each of the AND first and\"));\n-    }\n-\n-    @Test\n-    public void theAfterColonGetsCapitalized() {\n-        assertEquals(\"An Upper Each of: The and First And\",\n-                formatter.format(\"an upper each of: the and first and\"));\n-    }\n-\n-    @Test\n-    public void completeWordsInCurlyBracketsIsLeftUnchanged() {\n-        assertEquals(\"An Upper First with and without {CURLY} {brackets}\",\n-                formatter.format(\"AN UPPER FIRST WITH AND WITHOUT {CURLY} {brackets}\"));\n-    }\n-\n-    @Test\n-    public void lettersInCurlyBracketsIsLeftUnchanged() {\n-        assertEquals(\"An Upper First with {A}nd without {C}urly {b}rackets\",\n-                formatter.format(\"AN UPPER FIRST WITH {A}ND WITHOUT {C}URLY {b}rackets\"));\n-    }\n-\n-    @Test\n-    public void intraWordLettersInCurlyBracketsIsLeftUnchanged() {\n-        assertEquals(\"{b}rackets {b}rac{K}ets Brack{E}ts\",\n-                formatter.format(\"{b}RaCKeTS {b}RaC{K}eTS bRaCK{E}ts\"));\n-    }\n-\n-    @Test\n-    public void testTwoExperiencesTitle() {\n-        assertEquals(\n-                \"Two Experiences Designing for Effective Security\",\n-                formatter.format(\"Two experiences designing for effective security\"));\n-    }\n-\n-    @Test\n-    public void testSimpleTwoSentenceTitle() {\n-        assertEquals(\"Bibliographic Software. A Comparison.\",\n-                     formatter.format(\"bibliographic software. a comparison.\"));\n-    }\n-\n-    @Test\n-    public void secondSentenceInBracketsIsLeftUnchanged() {\n-        assertEquals(\"Bibliographic Software. {A COMPARISON.}\",\n-                     formatter.format(\"bibliographic software. {A COMPARISON.}\"));\n-    }\n-\n-    @Test\n-    public void formatExample() {\n-        assertEquals(\"{BPMN} Conformance in Open Source Engines\", formatter.format(formatter.getExampleInput()));\n-    }\n-    */\n }\n"}}, {"oid": "9237d0743d1cfba6275bc5ac7fe1682231a98577", "url": "https://github.com/JabRef/jabref/commit/9237d0743d1cfba6275bc5ac7fe1682231a98577", "message": "remove redundant test cases", "committedDate": "2020-09-23T15:55:00Z", "type": "commit"}]}