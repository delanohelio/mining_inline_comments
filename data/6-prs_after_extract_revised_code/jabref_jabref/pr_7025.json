{"pr_number": 7025, "pr_title": "add Cleanup for copying over physcial review article id as the page n\u2026", "pr_createdAt": "2020-10-18T13:36:00Z", "pr_url": "https://github.com/JabRef/jabref/pull/7025", "timeline": [{"oid": "c9b528436d212d3223f8dbea248a360598b111b6", "url": "https://github.com/JabRef/jabref/commit/c9b528436d212d3223f8dbea248a360598b111b6", "message": "add Cleanup for copying over physcial review article id as the page number", "committedDate": "2020-10-18T13:29:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE2OTIwMA==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507169200", "bodyText": "Since this is only used for the DOI fetcher, I would suggest to add this functionality as a private class method in DoiFetcher instead of a new class.", "author": "tobiasdiez", "createdAt": "2020-10-18T14:25:34Z", "path": "src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.jabref.logic.cleanup;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.model.FieldChange;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+/**\n+ * adds the article ID of a journal as the page count, but only if the page field is empty\n+ */\n+public class PageFieldCleanup implements CleanupJob {", "originalCommit": "c9b528436d212d3223f8dbea248a360598b111b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3856f25edd2d53f3b10fdaeeee4e926b6279f135", "chunk": "diff --git a/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java b/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java\ndeleted file mode 100644\nindex 034318086..000000000\n--- a/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-package org.jabref.logic.cleanup;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.jabref.model.FieldChange;\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.entry.field.StandardField;\n-\n-/**\n- * adds the article ID of a journal as the page count, but only if the page field is empty\n- */\n-public class PageFieldCleanup implements CleanupJob {\n-\n-    @Override\n-    public List<FieldChange> cleanup(BibEntry entry) {\n-        List<FieldChange> changes = new ArrayList<>();\n-        Optional<String> doiAsString = entry.getField(StandardField.DOI);\n-\n-        if (doiAsString.isPresent() && !entry.hasField(StandardField.PAGES)) {\n-            String articleId = new String();\n-            int index = doiAsString.get().length() - 1;\n-            while (Character.isDigit(doiAsString.get().charAt(index))) {\n-                articleId = doiAsString.get().charAt(index--) + articleId;\n-            }\n-            entry.setField(StandardField.PAGES, articleId);\n-            FieldChange change = new FieldChange(entry, StandardField.PAGES, \"\", articleId);\n-            changes.add(change);\n-        }\n-\n-        return changes;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE2OTQ5MA==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507169490", "bodyText": "Since this issue only concerns articles from Physical Review, I would suggest to use a regex based on the format outlined in #7019 (comment). In particular, make sure it only applies to doi's to Physical Review, and not all dois ending on some number.", "author": "tobiasdiez", "createdAt": "2020-10-18T14:27:23Z", "path": "src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.jabref.logic.cleanup;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.model.FieldChange;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+/**\n+ * adds the article ID of a journal as the page count, but only if the page field is empty\n+ */\n+public class PageFieldCleanup implements CleanupJob {\n+\n+    @Override\n+    public List<FieldChange> cleanup(BibEntry entry) {\n+        List<FieldChange> changes = new ArrayList<>();\n+        Optional<String> doiAsString = entry.getField(StandardField.DOI);\n+\n+        if (doiAsString.isPresent() && !entry.hasField(StandardField.PAGES)) {\n+            String articleId = new String();\n+            int index = doiAsString.get().length() - 1;\n+            while (Character.isDigit(doiAsString.get().charAt(index))) {", "originalCommit": "c9b528436d212d3223f8dbea248a360598b111b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3856f25edd2d53f3b10fdaeeee4e926b6279f135", "chunk": "diff --git a/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java b/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java\ndeleted file mode 100644\nindex 034318086..000000000\n--- a/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-package org.jabref.logic.cleanup;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.jabref.model.FieldChange;\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.entry.field.StandardField;\n-\n-/**\n- * adds the article ID of a journal as the page count, but only if the page field is empty\n- */\n-public class PageFieldCleanup implements CleanupJob {\n-\n-    @Override\n-    public List<FieldChange> cleanup(BibEntry entry) {\n-        List<FieldChange> changes = new ArrayList<>();\n-        Optional<String> doiAsString = entry.getField(StandardField.DOI);\n-\n-        if (doiAsString.isPresent() && !entry.hasField(StandardField.PAGES)) {\n-            String articleId = new String();\n-            int index = doiAsString.get().length() - 1;\n-            while (Character.isDigit(doiAsString.get().charAt(index))) {\n-                articleId = doiAsString.get().charAt(index--) + articleId;\n-            }\n-            entry.setField(StandardField.PAGES, articleId);\n-            FieldChange change = new FieldChange(entry, StandardField.PAGES, \"\", articleId);\n-            changes.add(change);\n-        }\n-\n-        return changes;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE2ODEwNg==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507168106", "bodyText": "I would simply use a substring with lastIndexOf(.) to the the part after the last dot.\nhttps://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/String.html#lastIndexOf(java.lang.String)", "author": "Siedlerchr", "createdAt": "2020-10-18T14:22:53Z", "path": "src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.jabref.logic.cleanup;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.model.FieldChange;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+/**\n+ * adds the article ID of a journal as the page count, but only if the page field is empty\n+ */\n+public class PageFieldCleanup implements CleanupJob {\n+\n+    @Override\n+    public List<FieldChange> cleanup(BibEntry entry) {\n+        List<FieldChange> changes = new ArrayList<>();\n+        Optional<String> doiAsString = entry.getField(StandardField.DOI);\n+\n+        if (doiAsString.isPresent() && !entry.hasField(StandardField.PAGES)) {\n+            String articleId = new String();\n+            int index = doiAsString.get().length() - 1;", "originalCommit": "c9b528436d212d3223f8dbea248a360598b111b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3856f25edd2d53f3b10fdaeeee4e926b6279f135", "chunk": "diff --git a/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java b/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java\ndeleted file mode 100644\nindex 034318086..000000000\n--- a/src/main/java/org/jabref/logic/cleanup/PageFieldCleanup.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-package org.jabref.logic.cleanup;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.jabref.model.FieldChange;\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.entry.field.StandardField;\n-\n-/**\n- * adds the article ID of a journal as the page count, but only if the page field is empty\n- */\n-public class PageFieldCleanup implements CleanupJob {\n-\n-    @Override\n-    public List<FieldChange> cleanup(BibEntry entry) {\n-        List<FieldChange> changes = new ArrayList<>();\n-        Optional<String> doiAsString = entry.getField(StandardField.DOI);\n-\n-        if (doiAsString.isPresent() && !entry.hasField(StandardField.PAGES)) {\n-            String articleId = new String();\n-            int index = doiAsString.get().length() - 1;\n-            while (Character.isDigit(doiAsString.get().charAt(index))) {\n-                articleId = doiAsString.get().charAt(index--) + articleId;\n-            }\n-            entry.setField(StandardField.PAGES, articleId);\n-            FieldChange change = new FieldChange(entry, StandardField.PAGES, \"\", articleId);\n-            changes.add(change);\n-        }\n-\n-        return changes;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDA2Mw==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507170063", "bodyText": "This is not a good idea to put it here, because it would be called for every type of DOI, and the APS are only a very specific subset.\nI would suggest adding it as a CleanupPreset Step:\nhttps://github.com/JabRef/jabref/blob/1b35f8cb0040fdfb515974e78532598f07e11af2/src/main/java/org/jabref/logic/cleanup/CleanupPreset.java\nand also adding it to the Cleanup Dialog maybe as Move article id to pages? (APS).", "author": "Siedlerchr", "createdAt": "2020-10-18T14:31:45Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -89,6 +90,7 @@ public String getName() {\n     }\n \n     private void doPostCleanup(BibEntry entry) {\n+        new PageFieldCleanup().cleanup(entry);", "originalCommit": "c9b528436d212d3223f8dbea248a360598b111b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4OTQzNg==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507189436", "bodyText": "I do think it's the right place, the DOI fetcher is not returning the right/full information, so we improve this here. Of course, you are right and the extraction should only be applied for DOI's from APS (see my comment above).", "author": "tobiasdiez", "createdAt": "2020-10-18T17:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3856f25edd2d53f3b10fdaeeee4e926b6279f135", "chunk": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\nindex 6afb54c9e..e27b2f1e1 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\n\n@@ -90,7 +99,6 @@ public class DoiFetcher implements IdBasedFetcher, EntryBasedFetcher {\n     }\n \n     private void doPostCleanup(BibEntry entry) {\n-        new PageFieldCleanup().cleanup(entry);\n         new FieldFormatterCleanup(StandardField.PAGES, new NormalizePagesFormatter()).cleanup(entry);\n         new FieldFormatterCleanup(StandardField.URL, new ClearFormatter()).cleanup(entry);\n     }\n"}}, {"oid": "3856f25edd2d53f3b10fdaeeee4e926b6279f135", "url": "https://github.com/JabRef/jabref/commit/3856f25edd2d53f3b10fdaeeee4e926b6279f135", "message": "remove PageFieldCleanup, add private methods to DoiFetcher", "committedDate": "2020-10-19T08:27:45Z", "type": "commit"}, {"oid": "342cacbcad2c6f9a425e1b9accce0fa6485ce0e3", "url": "https://github.com/JabRef/jabref/commit/342cacbcad2c6f9a425e1b9accce0fa6485ce0e3", "message": "remove comment from DoiFetcherTest", "committedDate": "2020-10-19T08:30:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNTA5NA==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507605094", "bodyText": "I am thinking if it would make sense to check for the strig \"phys\" as well?\nIt's better to etract the Pattern to a static string, otherwise you won't get the advantages", "author": "Siedlerchr", "createdAt": "2020-10-19T09:31:43Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -123,4 +133,18 @@ private void doPostCleanup(BibEntry entry) {\n \n         return agency;\n     }\n+\n+    private void setPageCountToArticleId(BibEntry entry, String doiAsString) {\n+        String articleId = doiAsString.substring(doiAsString.lastIndexOf('.') + 1);\n+        entry.setField(StandardField.PAGES, articleId);\n+    }\n+\n+    private boolean isAPSJournal(BibEntry entry, String doiAsString) {\n+        if (!entry.getType().equals(StandardEntryType.Article)) {\n+            return false;\n+        }\n+        Pattern apsJournalSuffixPattern = Pattern.compile(\"([\\\\w]+\\\\.)([\\\\w]+\\\\.)([\\\\w]+)\");", "originalCommit": "342cacbcad2c6f9a425e1b9accce0fa6485ce0e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwOTMxMg==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507609312", "bodyText": "Can we be sure that every Physical Review journal contains that string? For example, this aps doi doesn't contain the string \"phys\". https://doi.org/10.1103/PRXQuantum.1.010001\nHere is a list of all journals\nhttps://journals.aps.org/browse", "author": "tmrd993", "createdAt": "2020-10-19T09:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MTQxMQ==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507751411", "bodyText": "I think the best is to check for the string/number 10.1103/  It seems all DOIs from APS are prefixed with that.\nOtherwise the regex is too broad and would capture a lot of non related things and would create invalid data", "author": "Siedlerchr", "createdAt": "2020-10-19T13:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NDc1NQ==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r507754755", "bodyText": "In that case, a regex isn't really needed because in the string 10.1103, 1103 denotes the organization (APS in this case). That's really all that has to be checked if I am not mistaken.", "author": "tmrd993", "createdAt": "2020-10-19T13:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NjgxOA==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r508056818", "bodyText": "I still would use the regex as you can test that the doi is of the right format, so that you really know that the last number is the page number. And it's also a bit easier to understand than the manual parsing using isDigit", "author": "tobiasdiez", "createdAt": "2020-10-19T20:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MjA0MA==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r508082040", "bodyText": "So we\n\nuse the organization id to check if the entry is an aps journal\nuse the regex to check if the doi is of the right format (https://doi.org/10.1103/[journal].[volume].[articleID])\nset the page field if 1 and 2 are true", "author": "tmrd993", "createdAt": "2020-10-19T21:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNTA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "e69989a44c5c15b1ac75a95d1cd585f786eb6a72", "chunk": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\nindex e27b2f1e1..64bc738bf 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\n\n@@ -143,8 +144,7 @@ public class DoiFetcher implements IdBasedFetcher, EntryBasedFetcher {\n         if (!entry.getType().equals(StandardEntryType.Article)) {\n             return false;\n         }\n-        Pattern apsJournalSuffixPattern = Pattern.compile(\"([\\\\w]+\\\\.)([\\\\w]+\\\\.)([\\\\w]+)\");\n-        String suffix = doiAsString.substring(doiAsString.lastIndexOf('/') + 1);\n-        return apsJournalSuffixPattern.matcher(suffix).matches();\n+        String organizationId = doiAsString.substring(doiAsString.indexOf('.') + 1, doiAsString.indexOf('/'));\n+        return organizationId.equals(APS_JOURNAL_ORG_DOI_ID);\n     }\n }\n"}}, {"oid": "e69989a44c5c15b1ac75a95d1cd585f786eb6a72", "url": "https://github.com/JabRef/jabref/commit/e69989a44c5c15b1ac75a95d1cd585f786eb6a72", "message": "replace regex with substring and string comparison", "committedDate": "2020-10-19T14:02:49Z", "type": "commit"}, {"oid": "1779e423bdff56193830f9d777ddf88c1cc5c760", "url": "https://github.com/JabRef/jabref/commit/1779e423bdff56193830f9d777ddf88c1cc5c760", "message": "fix checkstyle issues", "committedDate": "2020-10-19T14:10:14Z", "type": "commit"}, {"oid": "37042695c9688a96b7ec128942eaeef42a5f8171", "url": "https://github.com/JabRef/jabref/commit/37042695c9688a96b7ec128942eaeef42a5f8171", "message": "fix checkstyle issues", "committedDate": "2020-10-19T14:13:26Z", "type": "commit"}, {"oid": "1853df7c6f4a5ee7ebf4c01d4e436e045009a55e", "url": "https://github.com/JabRef/jabref/commit/1853df7c6f4a5ee7ebf4c01d4e436e045009a55e", "message": "add regex to check aps doi format", "committedDate": "2020-10-20T09:04:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzODkzNg==", "url": "https://github.com/JabRef/jabref/pull/7025#discussion_r508338936", "bodyText": "move that line one as well to  private static final then it's good !", "author": "Siedlerchr", "createdAt": "2020-10-20T09:13:03Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -141,11 +143,14 @@ private void setPageCountToArticleId(BibEntry entry, String doiAsString) {\n         entry.setField(StandardField.PAGES, articleId);\n     }\n \n+    // checks if the entry is an APS journal by comparing the organization id and the suffix format\n     private boolean isAPSJournal(BibEntry entry, String doiAsString) {\n         if (!entry.getType().equals(StandardEntryType.Article)) {\n             return false;\n         }\n+        Pattern apsSuffixPattern = Pattern.compile(APS_SUFFIX);", "originalCommit": "1853df7c6f4a5ee7ebf4c01d4e436e045009a55e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "983962f3c2fa72dcaa0543b7caddfdf45db5dfcf", "chunk": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\nindex bee371260..617c09858 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java\n\n@@ -148,9 +149,8 @@ public class DoiFetcher implements IdBasedFetcher, EntryBasedFetcher {\n         if (!entry.getType().equals(StandardEntryType.Article)) {\n             return false;\n         }\n-        Pattern apsSuffixPattern = Pattern.compile(APS_SUFFIX);\n         String suffix = doiAsString.substring(doiAsString.lastIndexOf('/') + 1);\n         String organizationId = doiAsString.substring(doiAsString.indexOf('.') + 1, doiAsString.indexOf('/'));\n-        return organizationId.equals(APS_JOURNAL_ORG_DOI_ID) && apsSuffixPattern.matcher(suffix).matches();\n+        return organizationId.equals(APS_JOURNAL_ORG_DOI_ID) && APS_SUFFIX_PATTERN.matcher(suffix).matches();\n     }\n }\n"}}, {"oid": "983962f3c2fa72dcaa0543b7caddfdf45db5dfcf", "url": "https://github.com/JabRef/jabref/commit/983962f3c2fa72dcaa0543b7caddfdf45db5dfcf", "message": "move suffix pattern to private static field", "committedDate": "2020-10-20T09:42:02Z", "type": "commit"}, {"oid": "a1fe707781c1e05282d06ca043a0bb61d9fa3367", "url": "https://github.com/JabRef/jabref/commit/a1fe707781c1e05282d06ca043a0bb61d9fa3367", "message": "add changelog entry", "committedDate": "2020-10-20T10:13:38Z", "type": "commit"}, {"oid": "593c86d4537bcd8f0a70197a02d3bbee47f5ab9c", "url": "https://github.com/JabRef/jabref/commit/593c86d4537bcd8f0a70197a02d3bbee47f5ab9c", "message": "add issue link to changelog entry", "committedDate": "2020-10-20T10:15:19Z", "type": "commit"}, {"oid": "a1fdf3e9d99e81ef4c405d4411875475d2332d7e", "url": "https://github.com/JabRef/jabref/commit/a1fdf3e9d99e81ef4c405d4411875475d2332d7e", "message": "Merge branch 'master' into add-cleanup-for-replacing-page-number-with-article-id", "committedDate": "2020-10-20T10:27:12Z", "type": "commit"}]}