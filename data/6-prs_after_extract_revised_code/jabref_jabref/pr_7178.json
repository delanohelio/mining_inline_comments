{"pr_number": 7178, "pr_title": "Fix newly added entry not synced to db", "pr_createdAt": "2020-12-11T18:39:15Z", "pr_url": "https://github.com/JabRef/jabref/pull/7178", "timeline": [{"oid": "c883e8da80caf46560a34254eb753bbb9bc03310", "url": "https://github.com/JabRef/jabref/commit/c883e8da80caf46560a34254eb753bbb9bc03310", "message": "Fix newly added entry not synced to db\n\n\nNewly added entries have empty fields; don't update the field table to prevent SQL Exception\nFix shared entry not found by id\nuse left outer join for this", "committedDate": "2020-12-11T18:38:56Z", "type": "commit"}, {"oid": "7317104c3f7a94890b33bdc720fff8ef722b66e3", "url": "https://github.com/JabRef/jabref/commit/7317104c3f7a94890b33bdc720fff8ef722b66e3", "message": "fix checkstyle", "committedDate": "2020-12-11T18:45:50Z", "type": "commit"}, {"oid": "ae37d4bf391295f07319b5dd84ca8071717b9062", "url": "https://github.com/JabRef/jabref/commit/ae37d4bf391295f07319b5dd84ca8071717b9062", "message": "fix wording", "committedDate": "2020-12-11T18:46:41Z", "type": "commit"}, {"oid": "c6d01b355cf919ac1c75339ae743a4d71be80747", "url": "https://github.com/JabRef/jabref/commit/c6d01b355cf919ac1c75339ae743a4d71be80747", "message": "Merge remote-tracking branch 'upstream/master' into sharedDbInsert\n\n* upstream/master:\n  Disable SLR in UI until #7126 is merged (#7179)", "committedDate": "2020-12-13T13:36:06Z", "type": "commit"}, {"oid": "503670a7193e0835ed9318fff53cbc252aa7661f", "url": "https://github.com/JabRef/jabref/commit/503670a7193e0835ed9318fff53cbc252aa7661f", "message": "add tests for fix", "committedDate": "2020-12-13T13:37:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxNjM0MA==", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542016340", "bodyText": "Isn't this always an empty list (as expected entry is empty)?", "author": "tobiasdiez", "createdAt": "2020-12-13T22:07:38Z", "path": "src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java", "diffHunk": "@@ -95,6 +95,37 @@ void testInsertEntry() throws SQLException {\n         assertEquals(expectedFieldMap, actualFieldMap);\n     }\n \n+    @Test\n+    void testInsertEntryWithEmptyFields() throws SQLException {\n+        BibEntry expectedEntry = new BibEntry(StandardEntryType.Article);\n+\n+        dbmsProcessor.insertEntry(expectedEntry);\n+\n+        BibEntry emptyEntry = getBibEntryExample();\n+        emptyEntry.getSharedBibEntryData().setSharedID(1);\n+        dbmsProcessor.insertEntry(emptyEntry); // does not insert, due to same sharedID.\n+\n+        Map<String, String> actualFieldMap = new HashMap<>();\n+\n+        try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n+            assertTrue(entryResultSet.next());\n+            assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n+            assertEquals(\"article\", entryResultSet.getString(\"TYPE\"));\n+            assertEquals(1, entryResultSet.getInt(\"VERSION\"));\n+            assertFalse(entryResultSet.next());\n+\n+            try (ResultSet fieldResultSet = selectFrom(\"FIELD\", dbmsConnection, dbmsProcessor)) {\n+                while (fieldResultSet.next()) {\n+                    actualFieldMap.put(fieldResultSet.getString(\"NAME\"), fieldResultSet.getString(\"VALUE\"));\n+                }\n+            }\n+        }\n+\n+        Map<String, String> expectedFieldMap = expectedEntry.getFieldMap().entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getName(), Map.Entry::getValue));", "originalCommit": "503670a7193e0835ed9318fff53cbc252aa7661f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxODY5Mw==", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542018693", "bodyText": "Hm, seems like I need to adapt the queries a bit. Didn't think about this,\nI should check for the shared entry id to be present.", "author": "Siedlerchr", "createdAt": "2020-12-13T22:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxNjM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMDU2MQ==", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542020561", "bodyText": "To be honest, I've no idea what the test is doing. You add an empty entry, then some other completely unrelated entry, and then compare against the empty entry again.", "author": "tobiasdiez", "createdAt": "2020-12-13T22:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxNjM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "33f11a64c8aaf5248a334c9a61d4df49a92cf4e0", "chunk": "diff --git a/src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java b/src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java\nindex dc12cb4de8..abc597cb18 100644\n--- a/src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java\n+++ b/src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java\n\n@@ -101,12 +101,6 @@ class DBMSProcessorTest {\n \n         dbmsProcessor.insertEntry(expectedEntry);\n \n-        BibEntry emptyEntry = getBibEntryExample();\n-        emptyEntry.getSharedBibEntryData().setSharedID(1);\n-        dbmsProcessor.insertEntry(emptyEntry); // does not insert, due to same sharedID.\n-\n-        Map<String, String> actualFieldMap = new HashMap<>();\n-\n         try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n             assertTrue(entryResultSet.next());\n             assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxNjUwOA==", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542016508", "bodyText": "why is this then necessary?", "author": "tobiasdiez", "createdAt": "2020-12-13T22:08:40Z", "path": "src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java", "diffHunk": "@@ -95,6 +95,37 @@ void testInsertEntry() throws SQLException {\n         assertEquals(expectedFieldMap, actualFieldMap);\n     }\n \n+    @Test\n+    void testInsertEntryWithEmptyFields() throws SQLException {\n+        BibEntry expectedEntry = new BibEntry(StandardEntryType.Article);\n+\n+        dbmsProcessor.insertEntry(expectedEntry);\n+\n+        BibEntry emptyEntry = getBibEntryExample();\n+        emptyEntry.getSharedBibEntryData().setSharedID(1);\n+        dbmsProcessor.insertEntry(emptyEntry); // does not insert, due to same sharedID.", "originalCommit": "503670a7193e0835ed9318fff53cbc252aa7661f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f11a64c8aaf5248a334c9a61d4df49a92cf4e0", "chunk": "diff --git a/src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java b/src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java\nindex dc12cb4de8..abc597cb18 100644\n--- a/src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java\n+++ b/src/test/java/org/jabref/logic/shared/DBMSProcessorTest.java\n\n@@ -101,12 +101,6 @@ class DBMSProcessorTest {\n \n         dbmsProcessor.insertEntry(expectedEntry);\n \n-        BibEntry emptyEntry = getBibEntryExample();\n-        emptyEntry.getSharedBibEntryData().setSharedID(1);\n-        dbmsProcessor.insertEntry(emptyEntry); // does not insert, due to same sharedID.\n-\n-        Map<String, String> actualFieldMap = new HashMap<>();\n-\n         try (ResultSet entryResultSet = selectFrom(\"ENTRY\", dbmsConnection, dbmsProcessor)) {\n             assertTrue(entryResultSet.next());\n             assertEquals(1, entryResultSet.getInt(\"SHARED_ID\"));\n"}}, {"oid": "33f11a64c8aaf5248a334c9a61d4df49a92cf4e0", "url": "https://github.com/JabRef/jabref/commit/33f11a64c8aaf5248a334c9a61d4df49a92cf4e0", "message": "adjust test", "committedDate": "2020-12-14T18:23:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2Njg5OA==", "url": "https://github.com/JabRef/jabref/pull/7178#discussion_r542666898", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                         .append(\" left outer join \")\n          \n          \n            \n                         // Handle special case if entry does not have any fields (yet)\n          \n          \n            \n                         .append(\" left outer join \")", "author": "koppor", "createdAt": "2020-12-14T19:14:53Z", "path": "src/main/java/org/jabref/logic/shared/DBMSProcessor.java", "diffHunk": "@@ -493,7 +499,7 @@ public void removeEntries(List<BibEntry> bibEntries) {\n              .append(\"F.\").append(escape(\"VALUE\"))\n              .append(\" FROM \")\n              .append(escape(\"ENTRY\"))\n-             .append(\" inner join \")\n+             .append(\" left outer join \")", "originalCommit": "33f11a64c8aaf5248a334c9a61d4df49a92cf4e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c3358406b14fefcacb1d67bcdd48ae264ceb541", "chunk": "diff --git a/src/main/java/org/jabref/logic/shared/DBMSProcessor.java b/src/main/java/org/jabref/logic/shared/DBMSProcessor.java\nindex 9b73f38455..ec364110a9 100644\n--- a/src/main/java/org/jabref/logic/shared/DBMSProcessor.java\n+++ b/src/main/java/org/jabref/logic/shared/DBMSProcessor.java\n\n@@ -499,6 +499,7 @@ public abstract class DBMSProcessor {\n              .append(\"F.\").append(escape(\"VALUE\"))\n              .append(\" FROM \")\n              .append(escape(\"ENTRY\"))\n+             // Handle special case if entry does not have any fields (yet)\n              .append(\" left outer join \")\n              .append(escape(\"FIELD\"))\n              .append(\" F on \")\n"}}, {"oid": "3c3358406b14fefcacb1d67bcdd48ae264ceb541", "url": "https://github.com/JabRef/jabref/commit/3c3358406b14fefcacb1d67bcdd48ae264ceb541", "message": "Update src/main/java/org/jabref/logic/shared/DBMSProcessor.java", "committedDate": "2020-12-14T19:16:29Z", "type": "commit"}]}