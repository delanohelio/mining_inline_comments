{"pr_number": 7073, "pr_title": "Fixes exception in preview using regexp search and regexp search without specified field", "pr_createdAt": "2020-11-04T18:34:58Z", "pr_url": "https://github.com/JabRef/jabref/pull/7073", "timeline": [{"oid": "b7e755211c4898f7e6de2b8fb2824cb38106ecbe", "url": "https://github.com/JabRef/jabref/commit/b7e755211c4898f7e6de2b8fb2824cb38106ecbe", "message": "Fix JavaScript regexp creation", "committedDate": "2020-11-04T18:30:17Z", "type": "commit"}, {"oid": "b32d381899dfb096735ece25bf933cc2fa7c82e2", "url": "https://github.com/JabRef/jabref/commit/b32d381899dfb096735ece25bf933cc2fa7c82e2", "message": "Fix GrammarBasedSearchRule with regexp", "committedDate": "2020-11-06T20:44:27Z", "type": "commit"}, {"oid": "128b41fd3d19986be66dc4772293df712f10ef08", "url": "https://github.com/JabRef/jabref/commit/128b41fd3d19986be66dc4772293df712f10ef08", "message": "Fix JavaScript regex creation", "committedDate": "2020-11-06T21:05:02Z", "type": "commit"}, {"oid": "4429ea1ae9f9ed6059a88e4362cb2e9ee96f9fea", "url": "https://github.com/JabRef/jabref/commit/4429ea1ae9f9ed6059a88e4362cb2e9ee96f9fea", "message": "Readability improvement?", "committedDate": "2020-11-06T21:18:12Z", "type": "commit"}, {"oid": "7abe68296b2ab88dcd9d8702c495ac936ea10835", "url": "https://github.com/JabRef/jabref/commit/7abe68296b2ab88dcd9d8702c495ac936ea10835", "message": "Add missed negation", "committedDate": "2020-11-06T21:31:56Z", "type": "commit"}, {"oid": "979fa6e40b55e5c2d01bb55a8f13d71b7e85b9da", "url": "https://github.com/JabRef/jabref/commit/979fa6e40b55e5c2d01bb55a8f13d71b7e85b9da", "message": "Fix JavaScript regex pattern", "committedDate": "2020-11-06T21:45:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNzcyNg==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r519027726", "bodyText": "Since / terminates the JavaScript regexp, it should be escaped. The issue with using new RegExp is that you will have to escape the string terminator instead, so it is more code without any benefit that I am aware of.", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-11-06T22:02:24Z", "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -144,7 +144,7 @@ private void highlightSearchPattern() {\n                     \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n                             \"markInstance.unmark({\" +\n                             \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern + \"/gmi);\" +\n+                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"/\", \"\\\\\\\\/\") + \"/gmi);\" +", "originalCommit": "979fa6e40b55e5c2d01bb55a8f13d71b7e85b9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b77fcaafa0216fef42212be775c99b603d860856", "chunk": "diff --git a/src/main/java/org/jabref/gui/preview/PreviewViewer.java b/src/main/java/org/jabref/gui/preview/PreviewViewer.java\nindex 491768d1dd..8f6f91364d 100644\n--- a/src/main/java/org/jabref/gui/preview/PreviewViewer.java\n+++ b/src/main/java/org/jabref/gui/preview/PreviewViewer.java\n\n@@ -144,7 +144,7 @@ public class PreviewViewer extends ScrollPane implements InvalidationListener {\n                     \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n                             \"markInstance.unmark({\" +\n                             \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"/\", \"\\\\\\\\/\") + \"/gmi);\" +\n+                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +\n                             \"    }\" +\n                             \"  });\"\n             );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyODExMQ==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r519028111", "bodyText": "@Siedlerchr perhaps the if solution is better here? This might be too frivolous application of the DRY principle.", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-11-06T22:03:38Z", "path": "src/main/java/org/jabref/model/search/rules/GrammarBasedSearchRule.java", "diffHunk": "@@ -232,7 +232,7 @@ public Boolean visitComparison(SearchParser.ComparisonContext context) {\n             if (fieldDescriptor.isPresent()) {\n                 return comparison(fieldDescriptor.get().getText(), ComparisonOperator.build(context.operator.getText()), right);\n             } else {\n-                return new ContainBasedSearchRule(caseSensitive).applyRule(right, entry);\n+                return SearchRules.getSearchRule(caseSensitive, regex).applyRule(right, entry);", "originalCommit": "979fa6e40b55e5c2d01bb55a8f13d71b7e85b9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0Mjc2MA==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r519042760", "bodyText": "Doesn't really matter in this case, think it's okay. Didn't think about this way.", "author": "Siedlerchr", "createdAt": "2020-11-06T22:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyODExMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b77fcaafa0216fef42212be775c99b603d860856", "url": "https://github.com/JabRef/jabref/commit/b77fcaafa0216fef42212be775c99b603d860856", "message": "Fix only replacing unescaped forward slashes", "committedDate": "2020-11-08T21:54:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzU5OA==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520357598", "bodyText": "Would it be possible to extract this as constant (and thus documenting why this replacement is done)?", "author": "koppor", "createdAt": "2020-11-10T07:58:02Z", "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -144,7 +144,7 @@ private void highlightSearchPattern() {\n                     \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n                             \"markInstance.unmark({\" +\n                             \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern + \"/gmi);\" +\n+                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +", "originalCommit": "b77fcaafa0216fef42212be775c99b603d860856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MjIzNw==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520572237", "bodyText": "Sure. I just need to get JDK 15 going for those text blocks X)\nI keep getting some errors with my setup.", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-11-10T13:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3NjMyOA==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520576328", "bodyText": "@k3KAW8Pnf7mkmdSMPHz27 Source level is still jdk14, the textblock function is still preview. We only use jdk15  for compiling the jpackage stuff. (except for windows, where jdk14 is still required due to a jdk jpackage bug)", "author": "Siedlerchr", "createdAt": "2020-11-10T13:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MzAxOA==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520583018", "bodyText": "That explains \ud83d\ude01", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-11-10T14:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "07bd8cc3e534be23c22d336ad8aa85f3a767762b", "chunk": "diff --git a/src/main/java/org/jabref/gui/preview/PreviewViewer.java b/src/main/java/org/jabref/gui/preview/PreviewViewer.java\nindex 8f6f91364d..020a8643c3 100644\n--- a/src/main/java/org/jabref/gui/preview/PreviewViewer.java\n+++ b/src/main/java/org/jabref/gui/preview/PreviewViewer.java\n\n@@ -137,23 +145,26 @@ public class PreviewViewer extends ScrollPane implements InvalidationListener {\n     }\n \n     private void highlightSearchPattern() {\n+        String callbackForUnmark = \"\";\n         if (searchHighlightPattern.isPresent()) {\n-            String pattern = searchHighlightPattern.get().pattern();\n-\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark({\" +\n-                            \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +\n-                            \"    }\" +\n-                            \"  });\"\n-            );\n-        } else {\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark()\"\n-            );\n+            String javaScriptRegex = createJavaScriptRegex(searchHighlightPattern.get());\n+            callbackForUnmark = String.format(JS_MARK_REG_EXP_CALLBACK, javaScriptRegex);\n         }\n+        String unmarkInstance = String.format(JS_UNMARK_WITH_CALLBACK, callbackForUnmark);\n+        previewView.getEngine().executeScript(unmarkInstance);\n+    }\n+\n+    /**\n+     * Returns the String representation of a JavaScript regex object. The method does not take into account differences between the regex implementations in Java and JavaScript.\n+     *\n+     * @param regex Java regex to print as a JavaScript regex\n+     * @return JavaScript regex object\n+     */\n+    private static String createJavaScriptRegex(Pattern regex) {\n+        String pattern = regex.pattern();\n+        // Create a JavaScript regex using the forward slash pattern\n+        pattern = UNESCAPED_FORWARD_SLASH.matcher(pattern).replaceAll(\"\\\\\\\\/\");\n+        return \"/\" + pattern + \"/gmi\";\n     }\n \n     public void setLayout(PreviewLayout newLayout) {\n"}}, {"oid": "07bd8cc3e534be23c22d336ad8aa85f3a767762b", "url": "https://github.com/JabRef/jabref/commit/07bd8cc3e534be23c22d336ad8aa85f3a767762b", "message": "Extract String constants", "committedDate": "2020-11-10T16:20:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NjY2MA==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520696660", "bodyText": "@koppor\n\nWould it be possible to extract this as constant (and thus documenting why this replacement is done)?\n\nI noticed that I misunderstood you. I have extracted the String constants (as well) and hopefully improved readability. I don't think I should be more explicit regarding the forward slash replacement, unless I also link to how to use a JavaScript regex literal (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions). Perhaps I should add this link?", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-11-10T16:26:41Z", "path": "src/main/java/org/jabref/gui/preview/PreviewViewer.java", "diffHunk": "@@ -137,23 +145,26 @@ public void setTheme(Theme theme) {\n     }\n \n     private void highlightSearchPattern() {\n+        String callbackForUnmark = \"\";\n         if (searchHighlightPattern.isPresent()) {\n-            String pattern = searchHighlightPattern.get().pattern();\n-\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark({\" +\n-                            \"  done: function(){\" +\n-                            \"    markInstance.markRegExp(/\" + pattern.replaceAll(\"(?<!\\\\\\\\)/\", \"\\\\\\\\/\") + \"/gmi);\" +\n-                            \"    }\" +\n-                            \"  });\"\n-            );\n-        } else {\n-            previewView.getEngine().executeScript(\n-                    \"var markInstance = new Mark(document.getElementById(\\\"content\\\"));\" +\n-                            \"markInstance.unmark()\"\n-            );\n+            String javaScriptRegex = createJavaScriptRegex(searchHighlightPattern.get());\n+            callbackForUnmark = String.format(JS_MARK_REG_EXP_CALLBACK, javaScriptRegex);\n         }\n+        String unmarkInstance = String.format(JS_UNMARK_WITH_CALLBACK, callbackForUnmark);\n+        previewView.getEngine().executeScript(unmarkInstance);\n+    }\n+\n+    /**\n+     * Returns the String representation of a JavaScript regex object. The method does not take into account differences between the regex implementations in Java and JavaScript.\n+     *\n+     * @param regex Java regex to print as a JavaScript regex\n+     * @return JavaScript regex object\n+     */\n+    private static String createJavaScriptRegex(Pattern regex) {\n+        String pattern = regex.pattern();\n+        // Create a JavaScript regex using the forward slash pattern\n+        pattern = UNESCAPED_FORWARD_SLASH.matcher(pattern).replaceAll(\"\\\\\\\\/\");\n+        return \"/\" + pattern + \"/gmi\";", "originalCommit": "07bd8cc3e534be23c22d336ad8aa85f3a767762b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NTcwOQ==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520865709", "bodyText": "Yes, I like links in the code. Even if there are opinions that they might oudate. Neverthless, 1 good link is better than 0 links", "author": "koppor", "createdAt": "2020-11-10T20:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NjY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NjYyMg==", "url": "https://github.com/JabRef/jabref/pull/7073#discussion_r520946622", "bodyText": "Well, I compromised and added the link I believe is the least likely to get outdated \ud83d\ude1b", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-11-10T23:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NjY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "474c26c8c7da6c93a3635a45d3734122acce7084", "chunk": "diff --git a/src/main/java/org/jabref/gui/preview/PreviewViewer.java b/src/main/java/org/jabref/gui/preview/PreviewViewer.java\nindex 020a8643c3..f00fc1e5b8 100644\n--- a/src/main/java/org/jabref/gui/preview/PreviewViewer.java\n+++ b/src/main/java/org/jabref/gui/preview/PreviewViewer.java\n\n@@ -162,7 +162,8 @@ public class PreviewViewer extends ScrollPane implements InvalidationListener {\n      */\n     private static String createJavaScriptRegex(Pattern regex) {\n         String pattern = regex.pattern();\n-        // Create a JavaScript regex using the forward slash pattern\n+        // Create a JavaScript regular expression literal (https://ecma-international.org/ecma-262/10.0/index.html#sec-literals-regular-expression-literals)\n+        // Forward slashes are reserved to delimit the regular expression body. Hence, they must be escaped.\n         pattern = UNESCAPED_FORWARD_SLASH.matcher(pattern).replaceAll(\"\\\\\\\\/\");\n         return \"/\" + pattern + \"/gmi\";\n     }\n"}}, {"oid": "e33328d23e5c53ba6c2d0be97953192f836be5e8", "url": "https://github.com/JabRef/jabref/commit/e33328d23e5c53ba6c2d0be97953192f836be5e8", "message": "Fix codestyle", "committedDate": "2020-11-10T19:02:24Z", "type": "commit"}, {"oid": "ba1964bfc73eb186adbac3ae53eeff09d37a32f7", "url": "https://github.com/JabRef/jabref/commit/ba1964bfc73eb186adbac3ae53eeff09d37a32f7", "message": "Remove unused local variable", "committedDate": "2020-11-10T23:31:42Z", "type": "commit"}, {"oid": "474c26c8c7da6c93a3635a45d3734122acce7084", "url": "https://github.com/JabRef/jabref/commit/474c26c8c7da6c93a3635a45d3734122acce7084", "message": "Add comments to the regular expression literal", "committedDate": "2020-11-10T23:44:15Z", "type": "commit"}, {"oid": "9abbed2e953261edbc2307f736d6b5b17ab0931e", "url": "https://github.com/JabRef/jabref/commit/9abbed2e953261edbc2307f736d6b5b17ab0931e", "message": "Add test for GrammarBasedSearchRule", "committedDate": "2020-11-13T13:01:57Z", "type": "commit"}]}