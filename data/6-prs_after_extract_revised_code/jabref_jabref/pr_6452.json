{"pr_number": 6452, "pr_title": "Enforce LeftCurly rule", "pr_createdAt": "2020-05-08T23:33:26Z", "pr_url": "https://github.com/JabRef/jabref/pull/6452", "timeline": [{"oid": "2316530a9d41346ed730d23e5fcf25f193ed7af5", "url": "https://github.com/JabRef/jabref/commit/2316530a9d41346ed730d23e5fcf25f193ed7af5", "message": "Enforce LeftCurly rule", "committedDate": "2020-05-08T23:22:09Z", "type": "commit"}, {"oid": "7cc592b5d5efee26c053b1baae40ae4384610297", "url": "https://github.com/JabRef/jabref/commit/7cc592b5d5efee26c053b1baae40ae4384610297", "message": "Fix checkstyle", "committedDate": "2020-05-09T01:27:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxNjM4Ng==", "url": "https://github.com/JabRef/jabref/pull/6452#discussion_r422516386", "bodyText": "Minor point: Did you do this manually or via your code editor? The previous version was better in my opinion.", "author": "tobiasdiez", "createdAt": "2020-05-09T16:25:41Z", "path": "src/main/java/org/jabref/gui/fieldeditors/FieldEditorFX.java", "diffHunk": "@@ -25,11 +25,13 @@ default boolean childIsFocused() {\n \n     /**\n      * Returns relative size of the field editor in terms of display space.\n-     *\n-     * A value of 1 means that the editor gets exactly as much space as all other regular editors.\n-     * A value of 2 means that the editor gets twice as much space as regular editors.\n+     * <p>\n+     * A value of 1 means that the editor gets exactly as much space as all other regular editors. A value of 2 means", "originalCommit": "7cc592b5d5efee26c053b1baae40ae4384610297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0MDIyMg==", "url": "https://github.com/JabRef/jabref/pull/6452#discussion_r422640222", "bodyText": "InteliJ autoformat. I added an additional \nIt renders now as: (pressed Ctrl+Q)\n\nBefore, it rendered as", "author": "koppor", "createdAt": "2020-05-10T12:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxNjM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "73f8ceb3dd45e5a6fea68554ba63b0741c5791e2", "chunk": "diff --git a/src/main/java/org/jabref/gui/fieldeditors/FieldEditorFX.java b/src/main/java/org/jabref/gui/fieldeditors/FieldEditorFX.java\nindex 0c7debc699..f8fafb6780 100644\n--- a/src/main/java/org/jabref/gui/fieldeditors/FieldEditorFX.java\n+++ b/src/main/java/org/jabref/gui/fieldeditors/FieldEditorFX.java\n\n@@ -26,8 +26,9 @@ public interface FieldEditorFX {\n     /**\n      * Returns relative size of the field editor in terms of display space.\n      * <p>\n-     * A value of 1 means that the editor gets exactly as much space as all other regular editors. A value of 2 means\n-     * that the editor gets twice as much space as regular editors.\n+     * A value of 1 means that the editor gets exactly as much space as all other regular editors.\n+     * <p>\n+     * A value of 2 means that the editor gets twice as much space as regular editors.\n      *\n      * @return the relative weight of the editor in terms of display space\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxNjQ3Ng==", "url": "https://github.com/JabRef/jabref/pull/6452#discussion_r422516476", "bodyText": "same here, why the added line break?", "author": "tobiasdiez", "createdAt": "2020-05-09T16:26:22Z", "path": "src/main/java/org/jabref/gui/maintable/MainTableColumnModel.java", "diffHunk": "@@ -99,7 +99,8 @@ public MainTableColumnModel(Type type, String qualifier) {\n     }\n \n     /**\n-     * This is used by the preferences dialog, to initialize available basic icon columns, the user can add to the table.\n+     * This is used by the preferences dialog, to initialize available basic icon columns, the user can add to the", "originalCommit": "7cc592b5d5efee26c053b1baae40ae4384610297", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73f8ceb3dd45e5a6fea68554ba63b0741c5791e2", "chunk": "diff --git a/src/main/java/org/jabref/gui/maintable/MainTableColumnModel.java b/src/main/java/org/jabref/gui/maintable/MainTableColumnModel.java\nindex d344e8f148..cb1bd9fa11 100644\n--- a/src/main/java/org/jabref/gui/maintable/MainTableColumnModel.java\n+++ b/src/main/java/org/jabref/gui/maintable/MainTableColumnModel.java\n\n@@ -99,8 +99,7 @@ public class MainTableColumnModel {\n     }\n \n     /**\n-     * This is used by the preferences dialog, to initialize available basic icon columns, the user can add to the\n-     * table.\n+     * This is used by the preferences dialog, to initialize available basic icon columns, the user can add to the table.\n      *\n      * @param type the {@code MainTableColumnModel.Type} of the column, e.g. \"GROUPS\" or \"LINKED_IDENTIFIER\"\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxNjYxNg==", "url": "https://github.com/JabRef/jabref/pull/6452#discussion_r422516616", "bodyText": "...", "author": "tobiasdiez", "createdAt": "2020-05-09T16:27:39Z", "path": "src/main/java/org/jabref/gui/preferences/PreviewTabViewModel.java", "diffHunk": "@@ -297,9 +299,8 @@ public void resetDefaultLayout() {\n     }\n \n     /**\n-     * XML-Syntax-Highlighting for RichTextFX-Codearea created by (c) Carlos Martins (github: @cemartins)\n-     * License: BSD-2-Clause\n-     * see https://github.com/FXMisc/RichTextFX/blob/master/LICENSE and:\n+     * XML-Syntax-Highlighting for RichTextFX-Codearea created by (c) Carlos Martins (github: @cemartins) License:", "originalCommit": "7cc592b5d5efee26c053b1baae40ae4384610297", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73f8ceb3dd45e5a6fea68554ba63b0741c5791e2", "chunk": "diff --git a/src/main/java/org/jabref/gui/preferences/PreviewTabViewModel.java b/src/main/java/org/jabref/gui/preferences/PreviewTabViewModel.java\nindex 1aebf2d6c8..c168f8ef2a 100644\n--- a/src/main/java/org/jabref/gui/preferences/PreviewTabViewModel.java\n+++ b/src/main/java/org/jabref/gui/preferences/PreviewTabViewModel.java\n\n@@ -299,9 +299,13 @@ public class PreviewTabViewModel implements PreferenceTabViewModel {\n     }\n \n     /**\n-     * XML-Syntax-Highlighting for RichTextFX-Codearea created by (c) Carlos Martins (github: @cemartins) License:\n-     * BSD-2-Clause see https://github.com/FXMisc/RichTextFX/blob/master/LICENSE and:\n-     * https://github.com/FXMisc/RichTextFX/blob/master/richtextfx-demos/README.md#xml-editor\n+     * XML-Syntax-Highlighting for RichTextFX-Codearea created by (c) Carlos Martins (github:\n+     * <a href=\"https://github.com/cmartins\">@cemartins</a>)\n+     * <p>\n+     * License: <a href=\"https://github.com/FXMisc/RichTextFX/blob/master/LICENSE\">BSD-2-Clause</a>\n+     * <p>\n+     * See also\n+     * <a href=\"https://github.com/FXMisc/RichTextFX/blob/master/richtextfx-demos/README.md#xml-editor\">https://github.com/FXMisc/RichTextFX/blob/master/richtextfx-demos/README.md#xml-editor</a>\n      *\n      * @param text to parse and highlight\n      * @return highlighted span for codeArea\n"}}, {"oid": "4604c682c81be6ff9cbdb60edbefecc5dd3042bf", "url": "https://github.com/JabRef/jabref/commit/4604c682c81be6ff9cbdb60edbefecc5dd3042bf", "message": "Add \"including tests\" to the Checkstyle configuration", "committedDate": "2020-05-10T12:44:26Z", "type": "commit"}, {"oid": "73f8ceb3dd45e5a6fea68554ba63b0741c5791e2", "url": "https://github.com/JabRef/jabref/commit/73f8ceb3dd45e5a6fea68554ba63b0741c5791e2", "message": "Change maximum columns to 140 characters", "committedDate": "2020-05-10T13:35:12Z", "type": "commit"}, {"oid": "061edc6504583d02ebdc7d90db3d1b69a60085d0", "url": "https://github.com/JabRef/jabref/commit/061edc6504583d02ebdc7d90db3d1b69a60085d0", "message": "Display \"warning\" line at columnn 120", "committedDate": "2020-05-10T13:46:57Z", "type": "commit"}, {"oid": "54c238c1156a28ca89eeef1e0b02d8d5b6718df8", "url": "https://github.com/JabRef/jabref/commit/54c238c1156a28ca89eeef1e0b02d8d5b6718df8", "message": "Add line length check (140 characters)", "committedDate": "2020-05-10T13:49:54Z", "type": "commit"}, {"oid": "10eeaa282fdfcd65d40b73ec6a01e636a95d0898", "url": "https://github.com/JabRef/jabref/commit/10eeaa282fdfcd65d40b73ec6a01e636a95d0898", "message": "Also wrap single statements", "committedDate": "2020-05-10T13:59:43Z", "type": "commit"}, {"oid": "59938a9606b3cce2013a799028564c2af3fdf75d", "url": "https://github.com/JabRef/jabref/commit/59938a9606b3cce2013a799028564c2af3fdf75d", "message": "Hard limit for line length: 500", "committedDate": "2020-05-10T13:59:58Z", "type": "commit"}, {"oid": "dfde19f1a700671b0fe542bc851119e3f9cd8386", "url": "https://github.com/JabRef/jabref/commit/dfde19f1a700671b0fe542bc851119e3f9cd8386", "message": "Reformat all code (and adapt codestyle to match existing code)\n\n- Array initializers have to be separated by space\n- Space in single-line enums", "committedDate": "2020-05-10T17:15:57Z", "type": "commit"}, {"oid": "30de8ad4c89004b9aa3e8920f1cbe69f1e5c2ed8", "url": "https://github.com/JabRef/jabref/commit/30de8ad4c89004b9aa3e8920f1cbe69f1e5c2ed8", "message": "Fix checkstyle.xml", "committedDate": "2020-05-10T17:16:07Z", "type": "commit"}, {"oid": "1d18d5c5b69466822606e3db7cbef53f29ef67a6", "url": "https://github.com/JabRef/jabref/commit/1d18d5c5b69466822606e3db7cbef53f29ef67a6", "message": "Disable LineLength check", "committedDate": "2020-05-10T17:27:13Z", "type": "commit"}, {"oid": "fd543ea40b53bda99f64d039f60a14d551bfc30c", "url": "https://github.com/JabRef/jabref/commit/fd543ea40b53bda99f64d039f60a14d551bfc30c", "message": "Merge remote-tracking branch 'origin/master' into improve-checkstyle", "committedDate": "2020-05-10T17:27:36Z", "type": "commit"}, {"oid": "de6c1af34601fb3ee646f2b0454392e938091543", "url": "https://github.com/JabRef/jabref/commit/de6c1af34601fb3ee646f2b0454392e938091543", "message": "Try to disable hard wrap", "committedDate": "2020-05-12T05:12:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MTY3Nw==", "url": "https://github.com/JabRef/jabref/pull/6452#discussion_r423481677", "bodyText": "Here", "author": "tobiasdiez", "createdAt": "2020-05-12T06:05:43Z", "path": "src/main/java/org/jabref/cli/JabRefCLI.java", "diffHunk": "@@ -164,73 +164,73 @@ private static Options getOptions() {\n \n         options.addOption(Option.builder(\"i\").\n                 longOpt(\"import\").\n-                desc(String.format(\"%s: '%s'\", Localization.lang(\"Import file\"), \"-i library.bib\")).\n-                hasArg().\n-                argName(\"FILE[,FORMAT]\").\n-                build());\n+                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Import file\"), \"-i library.bib\")).\n+                                        hasArg().", "originalCommit": "de6c1af34601fb3ee646f2b0454392e938091543", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6297200617d59e3cf48b2e1decf614cffa9b7b3", "chunk": "diff --git a/src/main/java/org/jabref/cli/JabRefCLI.java b/src/main/java/org/jabref/cli/JabRefCLI.java\nindex 41b8c595f5..167875b322 100644\n--- a/src/main/java/org/jabref/cli/JabRefCLI.java\n+++ b/src/main/java/org/jabref/cli/JabRefCLI.java\n\n@@ -162,75 +162,85 @@ public class JabRefCLI {\n         // The \"-console\" option is handled by the install4j launcher\n         options.addOption(null, \"console\", false, Localization.lang(\"Show console output (only when the launcher is used)\"));\n \n-        options.addOption(Option.builder(\"i\").\n-                longOpt(\"import\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Import file\"), \"-i library.bib\")).\n-                                        hasArg().\n-                                        argName(\"FILE[,FORMAT]\").\n-                                        build());\n-\n-        options.addOption(Option.builder().\n-                longOpt(\"importToOpen\").\n-                                        desc(Localization.lang(\"Same as --import, but will be imported to the opened tab\")).\n-                                        hasArg().\n-                                        argName(\"FILE[,FORMAT]\").\n-                                        build());\n-\n-        options.addOption(Option.builder(\"ib\").\n-                longOpt(\"importBibtex\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Import BibTeX\"), \"-ib @article{entry}\")).\n-                                        hasArg().\n-                                        argName(\"BIBTEXT_STRING\").\n-                                        build());\n-\n-        options.addOption(Option.builder(\"o\").\n-                longOpt(\"output\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Export an input to a file\"), \"-i db.bib -o db.htm,html\")).\n-                                        hasArg().\n-                                        argName(\"FILE[,FORMAT]\").\n-                                        build());\n-\n-        options.addOption(Option.builder(\"m\").\n-                longOpt(\"exportMatches\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Matching\"), \"-i db.bib -m author=Newton,search.htm,html\")).\n-                                        hasArg().\n-                                        argName(\"QUERY,FILE[,FORMAT]\").\n-                                        build());\n-\n-        options.addOption(Option.builder(\"f\").\n-                longOpt(\"fetch\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Run fetcher\"), \"-f Medline/PubMed:cancer\")).\n-                                        hasArg().\n-                                        argName(\"FETCHER:QUERY\").\n-                                        build());\n-\n-        options.addOption(Option.builder(\"a\").\n-                longOpt(\"aux\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Sublibrary from AUX to BibTeX\"), \"-a thesis.aux,new.bib\")).\n-                                        hasArg().\n-                                        argName(\"FILE[.aux],FILE[.bib] FILE\").\n-                                        build());\n-\n-        options.addOption(Option.builder(\"x\").\n-                longOpt(\"prexp\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Export preferences to a file\"), \"-x prefs.xml\")).\n-                                        hasArg().\n-                                        argName(\"[FILE]\").\n-                                        build());\n-\n-        options.addOption(Option.builder(\"p\").\n-                longOpt(\"primp\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Import preferences from a file\"), \"-p prefs.xml\")).\n-                                        hasArg().\n-                                        argName(\"[FILE]\").\n-                                        build());\n-\n-        options.addOption(Option.builder(\"d\").\n-                longOpt(\"prdef\").\n-                                        desc(String.format(\"%s: '%s'\", Localization.lang(\"Reset preferences\"), \"-d mainFontSize,newline' or '-d all\")).\n-                                        hasArg().\n-                                        argName(\"KEY1[,KEY2][,KEYn] | all\").\n-                                        build());\n+        options.addOption(Option\n+                .builder(\"i\")\n+                .longOpt(\"import\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Import file\"), \"-i library.bib\"))\n+                .hasArg()\n+                .argName(\"FILE[,FORMAT]\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder()\n+                .longOpt(\"importToOpen\")\n+                .desc(Localization.lang(\"Same as --import, but will be imported to the opened tab\"))\n+                .hasArg()\n+                .argName(\"FILE[,FORMAT]\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder(\"ib\")\n+                .longOpt(\"importBibtex\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Import BibTeX\"), \"-ib @article{entry}\"))\n+                .hasArg()\n+                .argName(\"BIBTEXT_STRING\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder(\"o\")\n+                .longOpt(\"output\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Export an input to a file\"), \"-i db.bib -o db.htm,html\"))\n+                .hasArg()\n+                .argName(\"FILE[,FORMAT]\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder(\"m\")\n+                .longOpt(\"exportMatches\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Matching\"), \"-i db.bib -m author=Newton,search.htm,html\"))\n+                .hasArg()\n+                .argName(\"QUERY,FILE[,FORMAT]\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder(\"f\")\n+                .longOpt(\"fetch\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Run fetcher\"), \"-f Medline/PubMed:cancer\"))\n+                .hasArg()\n+                .argName(\"FETCHER:QUERY\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder(\"a\")\n+                .longOpt(\"aux\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Sublibrary from AUX to BibTeX\"), \"-a thesis.aux,new.bib\"))\n+                .hasArg()\n+                .argName(\"FILE[.aux],FILE[.bib] FILE\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder(\"x\")\n+                .longOpt(\"prexp\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Export preferences to a file\"), \"-x prefs.xml\"))\n+                .hasArg()\n+                .argName(\"[FILE]\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder(\"p\")\n+                .longOpt(\"primp\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Import preferences from a file\"), \"-p prefs.xml\"))\n+                .hasArg()\n+                .argName(\"[FILE]\")\n+                .build());\n+\n+        options.addOption(Option\n+                .builder(\"d\")\n+                .longOpt(\"prdef\")\n+                .desc(String.format(\"%s: '%s'\", Localization.lang(\"Reset preferences\"), \"-d mainFontSize,newline' or '-d all\"))\n+                .hasArg()\n+                .argName(\"KEY1[,KEY2][,KEYn] | all\")\n+                .build());\n \n         return options;\n     }\n"}}, {"oid": "bb283737ad7dcbd5bf656d11658c7ea89e43eba1", "url": "https://github.com/JabRef/jabref/commit/bb283737ad7dcbd5bf656d11658c7ea89e43eba1", "message": "Merge remote-tracking branch 'origin/master' into improve-checkstyle\n\n# Conflicts:\n#\tsrc/main/java/org/jabref/gui/DialogService.java\n#\tsrc/main/java/org/jabref/gui/StateManager.java", "committedDate": "2020-05-13T04:53:32Z", "type": "commit"}, {"oid": "a6297200617d59e3cf48b2e1decf614cffa9b7b3", "url": "https://github.com/JabRef/jabref/commit/a6297200617d59e3cf48b2e1decf614cffa9b7b3", "message": "Reformat JabRef CLI (rearrangte the . (dot))", "committedDate": "2020-05-13T04:58:16Z", "type": "commit"}]}