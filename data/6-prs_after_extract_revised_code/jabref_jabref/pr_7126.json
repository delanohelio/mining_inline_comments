{"pr_number": 7126, "pr_title": "Change format for study definition to yaml", "pr_createdAt": "2020-11-26T19:45:27Z", "pr_url": "https://github.com/JabRef/jabref/pull/7126", "timeline": [{"oid": "554f2f6a81ffe3b5a0c89923f2cd86238dd0a059", "url": "https://github.com/JabRef/jabref/commit/554f2f6a81ffe3b5a0c89923f2cd86238dd0a059", "message": "Change format for study definition to yaml and adapt tests\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-26T19:38:38Z", "type": "commit"}, {"oid": "7728417467b8c48eaa428b5cb67ac6452d40577c", "url": "https://github.com/JabRef/jabref/commit/7728417467b8c48eaa428b5cb67ac6452d40577c", "message": "Add unversioned files\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-26T20:17:06Z", "type": "commit"}, {"oid": "7728417467b8c48eaa428b5cb67ac6452d40577c", "url": "https://github.com/JabRef/jabref/commit/7728417467b8c48eaa428b5cb67ac6452d40577c", "message": "Add unversioned files\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-26T20:17:06Z", "type": "forcePushed"}, {"oid": "8ed74424402402bfc486b6048b3d610f7eb30e3d", "url": "https://github.com/JabRef/jabref/commit/8ed74424402402bfc486b6048b3d610f7eb30e3d", "message": "Remove unneeded enabled flags\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-26T20:19:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyNzY2MA==", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532227660", "bodyText": "I'm a bit undecided about this, but what do you think about simply Query? Or StudyQuery? Entry is a bit confusing with BibEntry etc.", "author": "tobiasdiez", "createdAt": "2020-11-29T15:46:56Z", "path": "src/main/java/org/jabref/model/study/QueryEntry.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.jabref.model.study;\n+\n+public class QueryEntry {", "originalCommit": "8ed74424402402bfc486b6048b3d610f7eb30e3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyODQwMA==", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532228400", "bodyText": "Similarily to above, maybe one can reuse the ComplexQuery here (with jackson parser directly giving a complex query back)?", "author": "tobiasdiez", "createdAt": "2020-11-29T15:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyNzY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "3b3c6c4f5cc9b566e0e42ddb5184bd92c27e5c05", "chunk": "diff --git a/src/main/java/org/jabref/model/study/QueryEntry.java b/src/main/java/org/jabref/model/study/StudyQuery.java\nsimilarity index 86%\nrename from src/main/java/org/jabref/model/study/QueryEntry.java\nrename to src/main/java/org/jabref/model/study/StudyQuery.java\nindex 837606a88..ae5a42b07 100644\n--- a/src/main/java/org/jabref/model/study/QueryEntry.java\n+++ b/src/main/java/org/jabref/model/study/StudyQuery.java\n\n@@ -1,16 +1,16 @@\n package org.jabref.model.study;\n \n-public class QueryEntry {\n+public class StudyQuery {\n     private String query;\n \n-    public QueryEntry(String query) {\n+    public StudyQuery(String query) {\n         this.query = query;\n     }\n \n     /**\n      * Used for Jackson deserialization\n      */\n-    public QueryEntry() {\n+    public StudyQuery() {\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyODIxNQ==", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532228215", "bodyText": "Can you use this converter already during parsing with jackson, so that a study already contains a list of fetcher, making the class LibraryEntry obsolete?", "author": "tobiasdiez", "createdAt": "2020-11-29T15:51:24Z", "path": "src/main/java/org/jabref/logic/crawler/LibraryEntryToFetcherConverter.java", "diffHunk": "@@ -8,19 +8,16 @@\n import org.jabref.logic.importer.ImportFormatPreferences;\n import org.jabref.logic.importer.SearchBasedFetcher;\n import org.jabref.logic.importer.WebFetchers;\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.entry.field.UnknownField;\n-\n-import static org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryType.LIBRARY_ENTRY;\n+import org.jabref.model.study.LibraryEntry;\n \n /**\n  * Converts library entries from the given study into their corresponding fetchers.\n  */\n class LibraryEntryToFetcherConverter {\n-    private final List<BibEntry> libraryEntries;\n+    private final List<LibraryEntry> libraryEntries;", "originalCommit": "8ed74424402402bfc486b6048b3d610f7eb30e3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b3c6c4f5cc9b566e0e42ddb5184bd92c27e5c05", "chunk": "diff --git a/src/main/java/org/jabref/logic/crawler/LibraryEntryToFetcherConverter.java b/src/main/java/org/jabref/logic/crawler/StudyDatabaseToFetcherConverter.java\nsimilarity index 80%\nrename from src/main/java/org/jabref/logic/crawler/LibraryEntryToFetcherConverter.java\nrename to src/main/java/org/jabref/logic/crawler/StudyDatabaseToFetcherConverter.java\nindex 35e3742a9..a5b51854c 100644\n--- a/src/main/java/org/jabref/logic/crawler/LibraryEntryToFetcherConverter.java\n+++ b/src/main/java/org/jabref/logic/crawler/StudyDatabaseToFetcherConverter.java\n\n@@ -8,16 +8,16 @@ import java.util.stream.Collectors;\n import org.jabref.logic.importer.ImportFormatPreferences;\n import org.jabref.logic.importer.SearchBasedFetcher;\n import org.jabref.logic.importer.WebFetchers;\n-import org.jabref.model.study.LibraryEntry;\n+import org.jabref.model.study.StudyDatabase;\n \n /**\n  * Converts library entries from the given study into their corresponding fetchers.\n  */\n-class LibraryEntryToFetcherConverter {\n-    private final List<LibraryEntry> libraryEntries;\n+class StudyDatabaseToFetcherConverter {\n+    private final List<StudyDatabase> libraryEntries;\n     private final ImportFormatPreferences importFormatPreferences;\n \n-    public LibraryEntryToFetcherConverter(List<LibraryEntry> libraryEntries, ImportFormatPreferences importFormatPreferences) {\n+    public StudyDatabaseToFetcherConverter(List<StudyDatabase> libraryEntries, ImportFormatPreferences importFormatPreferences) {\n         this.libraryEntries = libraryEntries;\n         this.importFormatPreferences = importFormatPreferences;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyODQ1OQ==", "url": "https://github.com/JabRef/jabref/pull/7126#discussion_r532228459", "bodyText": "Objects.hashcode is your friend ;-)", "author": "tobiasdiez", "createdAt": "2020-11-29T15:53:14Z", "path": "src/main/java/org/jabref/model/study/Study.java", "diffHunk": "@@ -1,98 +1,133 @@\n package org.jabref.model.study;\n \n import java.time.LocalDate;\n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.entry.field.UnknownField;\n \n /**\n  * This class represents a scientific study.\n  *\n  * This class defines all aspects of a scientific study relevant to the application. It is a proxy for the file based study definition.\n  */\n public class Study {\n-    private static final String SEARCH_QUERY_FIELD_NAME = \"query\";\n+    private List<String> authors;\n+    private String studyName;\n+    private LocalDate lastSearchDate;\n+    private List<String> researchQuestions;\n+    private List<QueryEntry> queries;\n+    private List<LibraryEntry> libraries;\n \n-    private final BibEntry studyEntry;\n-    private final List<BibEntry> queryEntries;\n-    private final List<BibEntry> libraryEntries;\n+    public Study(List<String> authors, String studyName, List<String> researchQuestions, List<QueryEntry> queryEntries, List<LibraryEntry> libraries) {\n+        this.authors = authors;\n+        this.studyName = studyName;\n+        this.researchQuestions = researchQuestions;\n+        this.queries = queryEntries;\n+        this.libraries = libraries;\n+    }\n \n-    public Study(BibEntry studyEntry, List<BibEntry> queryEntries, List<BibEntry> libraryEntries) {\n-        this.studyEntry = studyEntry;\n-        this.queryEntries = queryEntries;\n-        this.libraryEntries = libraryEntries;\n+    /**\n+     * Used for Jackson deserialization\n+     */\n+    public Study() {\n     }\n \n-    public List<BibEntry> getAllEntries() {\n-        List<BibEntry> allEntries = new ArrayList<>();\n-        allEntries.add(studyEntry);\n-        allEntries.addAll(queryEntries);\n-        allEntries.addAll(libraryEntries);\n-        return allEntries;\n+    public List<String> getAuthors() {\n+        return authors;\n     }\n \n-    /**\n-     * Returns all query strings\n-     *\n-     * @return List of all queries as Strings.\n-     */\n-    public List<String> getSearchQueryStrings() {\n-        return queryEntries.parallelStream()\n-                           .map(bibEntry -> bibEntry.getField(new UnknownField(SEARCH_QUERY_FIELD_NAME)))\n-                           .filter(Optional::isPresent)\n-                           .map(Optional::get)\n-                           .collect(Collectors.toList());\n+    public void setAuthors(List<String> authors) {\n+        this.authors = authors;\n     }\n \n-    /**\n-     * This method returns the SearchQuery entries.\n-     * This is required when the BibKey of the search term entry is required in combination with the search query (e.g.\n-     * for the creation of the study repository structure).\n-     */\n-    public List<BibEntry> getSearchQueryEntries() {\n-        return queryEntries;\n+    public List<QueryEntry> getQueries() {\n+        return queries;\n     }\n \n-    /**\n-     * Returns a meta data entry of the first study entry found in the study definition file of the provided type.\n-     *\n-     * @param metaDataField The type of requested meta-data\n-     * @return returns the requested meta data type of the first found study entry\n-     * @throws IllegalArgumentException If the study file does not contain a study entry.\n-     */\n-    public Optional<String> getStudyMetaDataField(StudyMetaDataField metaDataField) throws IllegalArgumentException {\n-        return studyEntry.getField(metaDataField.toField());\n+    public void setQueries(List<QueryEntry> queries) {\n+        this.queries = queries;\n+    }\n+\n+    public LocalDate getLastSearchDate() {\n+        return lastSearchDate;\n     }\n \n-    /**\n-     * Sets the lastSearchDate field of the study entry\n-     *\n-     * @param date date the last time a search was conducted\n-     */\n     public void setLastSearchDate(LocalDate date) {\n-        studyEntry.setField(StudyMetaDataField.STUDY_LAST_SEARCH.toField(), date.toString());\n+        lastSearchDate = date;\n     }\n \n-    /**\n-     * Extracts all active LibraryEntries from the BibEntries.\n-     *\n-     * @return List of BibEntries of type Library\n-     * @throws IllegalArgumentException If a transformation from Library entry to LibraryDefinition fails\n-     */\n-    public List<BibEntry> getActiveLibraryEntries() throws IllegalArgumentException {\n-        return libraryEntries\n-                .parallelStream()\n-                .filter(bibEntry -> {\n-                    // If enabled is not defined, the fetcher is active.\n-                    return bibEntry.getField(new UnknownField(\"enabled\"))\n-                                   .map(enabled -> enabled.equals(\"true\"))\n-                                   .orElse(true);\n-                })\n-                .collect(Collectors.toList());\n+    public List<LibraryEntry> getLibraries() {\n+        return libraries;\n+    }\n+\n+    public void setLibraries(List<LibraryEntry> libraries) {\n+        this.libraries = libraries;\n+    }\n+\n+    public String getStudyName() {\n+        return studyName;\n+    }\n+\n+    public void setStudyName(String studyName) {\n+        this.studyName = studyName;\n+    }\n+\n+    public List<String> getResearchQuestions() {\n+        return researchQuestions;\n+    }\n+\n+    public void setResearchQuestions(List<String> researchQuestions) {\n+        this.researchQuestions = researchQuestions;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Study{\" +\n+                \"authors=\" + authors +\n+                \", studyName='\" + studyName + '\\'' +\n+                \", lastSearchDate=\" + lastSearchDate +\n+                \", researchQuestions=\" + researchQuestions +\n+                \", queries=\" + queries +\n+                \", libraries=\" + libraries +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        Study study = (Study) o;\n+\n+        if (getAuthors() != null ? !getAuthors().equals(study.getAuthors()) : study.getAuthors() != null) {\n+            return false;\n+        }\n+        if (getStudyName() != null ? !getStudyName().equals(study.getStudyName()) : study.getStudyName() != null) {\n+            return false;\n+        }\n+        if (getLastSearchDate() != null ? !getLastSearchDate().equals(study.getLastSearchDate()) : study.getLastSearchDate() != null) {\n+            return false;\n+        }\n+        if (getResearchQuestions() != null ? !getResearchQuestions().equals(study.getResearchQuestions()) : study.getResearchQuestions() != null) {\n+            return false;\n+        }\n+        if (getQueries() != null ? !getQueries().equals(study.getQueries()) : study.getQueries() != null) {\n+            return false;\n+        }\n+        return getLibraries() != null ? getLibraries().equals(study.getLibraries()) : study.getLibraries() == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = getAuthors() != null ? getAuthors().hashCode() : 0;", "originalCommit": "8ed74424402402bfc486b6048b3d610f7eb30e3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b3c6c4f5cc9b566e0e42ddb5184bd92c27e5c05", "chunk": "diff --git a/src/main/java/org/jabref/model/study/Study.java b/src/main/java/org/jabref/model/study/Study.java\nindex 420cab01f..382268ce3 100644\n--- a/src/main/java/org/jabref/model/study/Study.java\n+++ b/src/main/java/org/jabref/model/study/Study.java\n\n@@ -2,26 +2,34 @@ package org.jabref.model.study;\n \n import java.time.LocalDate;\n import java.util.List;\n+import java.util.Objects;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n /**\n  * This class represents a scientific study.\n  *\n  * This class defines all aspects of a scientific study relevant to the application. It is a proxy for the file based study definition.\n  */\n+\n+@JsonPropertyOrder({\"authors\", \"title\", \"last-search-date\", \"research-questions\", \"queries\", \"databases\"})\n public class Study {\n     private List<String> authors;\n-    private String studyName;\n+    private String title;\n+    @JsonProperty(\"last-search-date\")\n     private LocalDate lastSearchDate;\n+    @JsonProperty(\"research-questions\")\n     private List<String> researchQuestions;\n-    private List<QueryEntry> queries;\n-    private List<LibraryEntry> libraries;\n+    private List<StudyQuery> queries;\n+    private List<StudyDatabase> databases;\n \n-    public Study(List<String> authors, String studyName, List<String> researchQuestions, List<QueryEntry> queryEntries, List<LibraryEntry> libraries) {\n+    public Study(List<String> authors, String title, List<String> researchQuestions, List<StudyQuery> queryEntries, List<StudyDatabase> databases) {\n         this.authors = authors;\n-        this.studyName = studyName;\n+        this.title = title;\n         this.researchQuestions = researchQuestions;\n         this.queries = queryEntries;\n-        this.libraries = libraries;\n+        this.databases = databases;\n     }\n \n     /**\n"}}, {"oid": "3b3c6c4f5cc9b566e0e42ddb5184bd92c27e5c05", "url": "https://github.com/JabRef/jabref/commit/3b3c6c4f5cc9b566e0e42ddb5184bd92c27e5c05", "message": "Rename LibraryEntry.java to StudyDatabase.java and QueryEntry.java to StudyQuery.java\nUse hyphenated names in the yaml file\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-29T17:24:17Z", "type": "commit"}, {"oid": "4b699d669f962e3cc90d4788e5cbadbabf0acfa2", "url": "https://github.com/JabRef/jabref/commit/4b699d669f962e3cc90d4788e5cbadbabf0acfa2", "message": "Merge remote-tracking branch 'upstream/master' into replace-study-bib-with-yaml", "committedDate": "2020-11-29T17:28:20Z", "type": "commit"}, {"oid": "0c99960dcfe7c41d3516b5138a93c6d1ea5e81fa", "url": "https://github.com/JabRef/jabref/commit/0c99960dcfe7c41d3516b5138a93c6d1ea5e81fa", "message": "Update ADR\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-30T15:16:09Z", "type": "commit"}, {"oid": "e0dd2e61fda8b20e9e7eff878af28453f3a3d840", "url": "https://github.com/JabRef/jabref/commit/e0dd2e61fda8b20e9e7eff878af28453f3a3d840", "message": "Merge remote-tracking branch 'upstream/master' into replace-study-bib-with-yaml", "committedDate": "2020-11-30T15:17:07Z", "type": "commit"}, {"oid": "1fdd202190105faff5c845c339387caaff491173", "url": "https://github.com/JabRef/jabref/commit/1fdd202190105faff5c845c339387caaff491173", "message": "Update docs/adr/0018-use-Jackson-to-parse-study-yml.md\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-12-01T07:00:43Z", "type": "commit"}, {"oid": "a0e1c07221a7bda79bc80f27b95006669df7f6a5", "url": "https://github.com/JabRef/jabref/commit/a0e1c07221a7bda79bc80f27b95006669df7f6a5", "message": "Update docs/adr/0018-use-Jackson-to-parse-study-yml.md\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-12-01T07:00:55Z", "type": "commit"}, {"oid": "76bc7d02b7cb6e6954e65195bf0d1a9dcb1dccd4", "url": "https://github.com/JabRef/jabref/commit/76bc7d02b7cb6e6954e65195bf0d1a9dcb1dccd4", "message": "Apply suggestions from code review\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-12-01T07:01:43Z", "type": "commit"}, {"oid": "9e4f1a0a5fdc19b7024a8a1bd1f5bbc640049a6b", "url": "https://github.com/JabRef/jabref/commit/9e4f1a0a5fdc19b7024a8a1bd1f5bbc640049a6b", "message": "Fix crawler test\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-12-01T07:39:47Z", "type": "commit"}, {"oid": "cb449f1ac49579a9d45be1fb3b9710a5aa146183", "url": "https://github.com/JabRef/jabref/commit/cb449f1ac49579a9d45be1fb3b9710a5aa146183", "message": "Merge branch 'replace-study-bib-with-yaml' of https://github.com/DominikVoigt/jabref into replace-study-bib-with-yaml", "committedDate": "2020-12-01T07:40:23Z", "type": "commit"}, {"oid": "0e7e7a6e25f2f8fe7a5b98bf0c55641b18468ceb", "url": "https://github.com/JabRef/jabref/commit/0e7e7a6e25f2f8fe7a5b98bf0c55641b18468ceb", "message": "Fix crawler test\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-12-01T08:08:10Z", "type": "commit"}, {"oid": "0d861c81fc05c44f07b804a8ca15a4cd30670220", "url": "https://github.com/JabRef/jabref/commit/0d861c81fc05c44f07b804a8ca15a4cd30670220", "message": "Add some links to ADR 0018\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-12-01T09:01:20Z", "type": "commit"}, {"oid": "fcabebb9ba10e041af94051a4790b0eedd89ff9d", "url": "https://github.com/JabRef/jabref/commit/fcabebb9ba10e041af94051a4790b0eedd89ff9d", "message": "Add indent for readability\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-12-01T16:17:39Z", "type": "commit"}, {"oid": "20a80e7244961631c753aec5e5377110613c49aa", "url": "https://github.com/JabRef/jabref/commit/20a80e7244961631c753aec5e5377110613c49aa", "message": "Merge remote-tracking branch 'upstream/master' into replace-study-bib-with-yaml", "committedDate": "2020-12-06T20:49:42Z", "type": "commit"}, {"oid": "c0f734f0867f46c485297ddee6c12a4afca1e29a", "url": "https://github.com/JabRef/jabref/commit/c0f734f0867f46c485297ddee6c12a4afca1e29a", "message": "Update docs/adr/0018-use-Jackson-to-parse-study-yml.md\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-12-06T22:24:50Z", "type": "commit"}, {"oid": "8c2320b3a721bcc2255b638a37375ca47b309812", "url": "https://github.com/JabRef/jabref/commit/8c2320b3a721bcc2255b638a37375ca47b309812", "message": "Add main module to gradle build\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-12-06T22:26:55Z", "type": "commit"}, {"oid": "832cdb69249d02d1cd3e8b228aa0c118dbc787ad", "url": "https://github.com/JabRef/jabref/commit/832cdb69249d02d1cd3e8b228aa0c118dbc787ad", "message": "Merge branch 'replace-study-bib-with-yaml' of https://github.com/DominikVoigt/jabref into replace-study-bib-with-yaml", "committedDate": "2020-12-06T22:27:24Z", "type": "commit"}, {"oid": "37bfa5269148ac39aa591dd2f4ff5cbabf75a465", "url": "https://github.com/JabRef/jabref/commit/37bfa5269148ac39aa591dd2f4ff5cbabf75a465", "message": "Remove duplicate links\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-12-06T23:01:00Z", "type": "commit"}, {"oid": "86a25b41fe9f75b16561412eee0bb68b4ab5f6c0", "url": "https://github.com/JabRef/jabref/commit/86a25b41fe9f75b16561412eee0bb68b4ab5f6c0", "message": "Merge remote-tracking branch 'upstream/master' into replace-study-bib-with-yaml", "committedDate": "2020-12-15T07:59:02Z", "type": "commit"}, {"oid": "a92215d053d696fe7def0ff7fc0ba8b9d9394091", "url": "https://github.com/JabRef/jabref/commit/a92215d053d696fe7def0ff7fc0ba8b9d9394091", "message": "Merge upstream/master into current branch.", "committedDate": "2021-01-22T15:11:40Z", "type": "commit"}, {"oid": "4736a34d245f82732fb437bab69f31f85d125492", "url": "https://github.com/JabRef/jabref/commit/4736a34d245f82732fb437bab69f31f85d125492", "message": "Fix checkstyle issue", "committedDate": "2021-01-22T15:37:06Z", "type": "commit"}, {"oid": "4a564b3694ccd396a9be1573031fe163704257bc", "url": "https://github.com/JabRef/jabref/commit/4a564b3694ccd396a9be1573031fe163704257bc", "message": "correct casing", "committedDate": "2021-01-26T19:45:57Z", "type": "commit"}]}