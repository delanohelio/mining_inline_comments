{"pr_number": 6174, "pr_title": "Fix overwritting downloaded files with same name", "pr_createdAt": "2020-03-25T07:15:01Z", "pr_url": "https://github.com/JabRef/jabref/pull/6174", "timeline": [{"oid": "10ee0efac0798947943dbc7d913212b7527adac7", "url": "https://github.com/JabRef/jabref/commit/10ee0efac0798947943dbc7d913212b7527adac7", "message": "resolved style checks", "committedDate": "2020-03-25T09:01:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDI2Ng==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397820266", "bodyText": "Please put that into an else path in the if of line 91. (Declaring the variables here is OK). I find it hard if the contents of the variables are overwritten: The default case is that there is an extension.", "author": "koppor", "createdAt": "2020-03-25T12:37:02Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "155fbe396c18b01139f87f845f76daa124ea5492", "chunk": "diff --git a/src/main/java/org/jabref/logic/util/io/FileNameHandler.java b/src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\nsimilarity index 53%\nrename from src/main/java/org/jabref/logic/util/io/FileNameHandler.java\nrename to src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\nindex 8a43ee3598..33733a3a90 100644\n--- a/src/main/java/org/jabref/logic/util/io/FileNameHandler.java\n+++ b/src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\n\n@@ -71,41 +67,7 @@ public class FileNameHandler {\n         return cleanName.toString().trim();\n     }\n \n-    /**\n-     * Returns an absolute path to a file which does not match with any existing file names\n-     *\n-     * @param targetDirectory The directory in which file name should be unique\n-     * @param fileName Suggested name for the file\n-     * @return a file-name such that it does not match any existing files in targetDirectory.\n-     * */\n-    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n-        String absoluteName = targetDirectory.resolve(fileName)\n-                                            .toString();\n-\n-        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n-\n-        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n-        String extensionSuffix = \"\";\n-        String fileNameWithoutExtension = fileName;\n-\n-        if (extensionOptional.isPresent()) {\n-            extensionSuffix = '.' + extensionOptional.get();\n-            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n-        }\n-\n-        Path absolutePath = Paths.get(absoluteName);\n-        String newFileName = fileName;\n-\n-        for (int counter = 1; Files.exists(absolutePath); ++counter) {\n-            newFileName = fileNameWithoutExtension +\n-                            \" (\" + counter + \")\" +\n-                            extensionSuffix;\n-            absolutePath = targetDirectory.resolve(newFileName);\n-        }\n-        return newFileName;\n-    }\n-\n     private static boolean isCharLegal(char c) {\n-        return Arrays.binarySearch(FileNameHandler.ILLEGAL_CHARS, c) < 0;\n+        return Arrays.binarySearch(FileNameCleaner.ILLEGAL_CHARS, c) < 0;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDc5OA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397820798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int counter = 1; Files.exists(absolutePath); ++counter) {\n          \n          \n            \n                    for (int counter = 1; Files.exists(absolutePath); counter++) {\n          \n      \n    \n    \n  \n\n++ at the end to be inline with the usual i++.", "author": "koppor", "createdAt": "2020-03-25T12:37:53Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMTI5Mg==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397821292", "bodyText": "After thinking longer, please rewrite to a while loop. Not testing for the counter in the test of a for loop is uncommon. Thus, hard to read when maintaining the code.", "author": "koppor", "createdAt": "2020-03-25T12:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "155fbe396c18b01139f87f845f76daa124ea5492", "chunk": "diff --git a/src/main/java/org/jabref/logic/util/io/FileNameHandler.java b/src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\nsimilarity index 53%\nrename from src/main/java/org/jabref/logic/util/io/FileNameHandler.java\nrename to src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\nindex 8a43ee3598..33733a3a90 100644\n--- a/src/main/java/org/jabref/logic/util/io/FileNameHandler.java\n+++ b/src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\n\n@@ -71,41 +67,7 @@ public class FileNameHandler {\n         return cleanName.toString().trim();\n     }\n \n-    /**\n-     * Returns an absolute path to a file which does not match with any existing file names\n-     *\n-     * @param targetDirectory The directory in which file name should be unique\n-     * @param fileName Suggested name for the file\n-     * @return a file-name such that it does not match any existing files in targetDirectory.\n-     * */\n-    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n-        String absoluteName = targetDirectory.resolve(fileName)\n-                                            .toString();\n-\n-        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n-\n-        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n-        String extensionSuffix = \"\";\n-        String fileNameWithoutExtension = fileName;\n-\n-        if (extensionOptional.isPresent()) {\n-            extensionSuffix = '.' + extensionOptional.get();\n-            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n-        }\n-\n-        Path absolutePath = Paths.get(absoluteName);\n-        String newFileName = fileName;\n-\n-        for (int counter = 1; Files.exists(absolutePath); ++counter) {\n-            newFileName = fileNameWithoutExtension +\n-                            \" (\" + counter + \")\" +\n-                            extensionSuffix;\n-            absolutePath = targetDirectory.resolve(newFileName);\n-        }\n-        return newFileName;\n-    }\n-\n     private static boolean isCharLegal(char c) {\n-        return Arrays.binarySearch(FileNameHandler.ILLEGAL_CHARS, c) < 0;\n+        return Arrays.binarySearch(FileNameCleaner.ILLEGAL_CHARS, c) < 0;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMjI3OA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397822278", "bodyText": "No need for that variable. Can be tesed in the while condition.", "author": "koppor", "createdAt": "2020-03-25T12:40:43Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {\n+            newFileName = fileNameWithoutExtension +\n+                            \" (\" + counter + \")\" +\n+                            extensionSuffix;\n+            absolutePath = targetDirectory.resolve(newFileName);", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "155fbe396c18b01139f87f845f76daa124ea5492", "chunk": "diff --git a/src/main/java/org/jabref/logic/util/io/FileNameHandler.java b/src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\nsimilarity index 53%\nrename from src/main/java/org/jabref/logic/util/io/FileNameHandler.java\nrename to src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\nindex 8a43ee3598..33733a3a90 100644\n--- a/src/main/java/org/jabref/logic/util/io/FileNameHandler.java\n+++ b/src/main/java/org/jabref/logic/util/io/FileNameCleaner.java\n\n@@ -71,41 +67,7 @@ public class FileNameHandler {\n         return cleanName.toString().trim();\n     }\n \n-    /**\n-     * Returns an absolute path to a file which does not match with any existing file names\n-     *\n-     * @param targetDirectory The directory in which file name should be unique\n-     * @param fileName Suggested name for the file\n-     * @return a file-name such that it does not match any existing files in targetDirectory.\n-     * */\n-    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n-        String absoluteName = targetDirectory.resolve(fileName)\n-                                            .toString();\n-\n-        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n-\n-        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n-        String extensionSuffix = \"\";\n-        String fileNameWithoutExtension = fileName;\n-\n-        if (extensionOptional.isPresent()) {\n-            extensionSuffix = '.' + extensionOptional.get();\n-            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n-        }\n-\n-        Path absolutePath = Paths.get(absoluteName);\n-        String newFileName = fileName;\n-\n-        for (int counter = 1; Files.exists(absolutePath); ++counter) {\n-            newFileName = fileNameWithoutExtension +\n-                            \" (\" + counter + \")\" +\n-                            extensionSuffix;\n-            absolutePath = targetDirectory.resolve(newFileName);\n-        }\n-        return newFileName;\n-    }\n-\n     private static boolean isCharLegal(char c) {\n-        return Arrays.binarySearch(FileNameHandler.ILLEGAL_CHARS, c) < 0;\n+        return Arrays.binarySearch(FileNameCleaner.ILLEGAL_CHARS, c) < 0;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMjY2MA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397822660", "bodyText": "Please include that in the assertEquals directly.", "author": "koppor", "createdAt": "2020-03-25T12:41:27Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n+        String dummyFile1 = \"default.txt\";\n+        String dummyFile2 = \"default (1).txt\";\n+        String expectedFileName = \"default (2).txt\";", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "155fbe396c18b01139f87f845f76daa124ea5492", "chunk": "diff --git a/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java b/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java\ndeleted file mode 100644\nindex 3023835ebd..0000000000\n--- a/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-package org.jabref.logic.util.io;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.io.TempDir;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class FileNameHandlerTest {\n-\n-    @Test\n-    public void testCleanFileName() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n-        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanDirectoryName() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n-        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n-        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanDirectoryNameForWindows() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n-        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n-        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanCurlyBracesAsWell() {\n-        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n-    }\n-\n-    @Test\n-    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n-        String dummyFile1 = \"default.txt\";\n-        String dummyFile2 = \"default (1).txt\";\n-        String expectedFileName = \"default (2).txt\";\n-\n-        Files.createFile(tempDirectory.resolve(dummyFile1));\n-        Files.createFile(tempDirectory.resolve(dummyFile2));\n-\n-        String outputFileName = FileNameHandler.getNonOverWritingFileName(tempDirectory, \"default.txt\");\n-        assertEquals(expectedFileName, outputFileName);\n-\n-        Files.delete(tempDirectory.resolve(dummyFile1));\n-        Files.delete(tempDirectory.resolve(dummyFile2));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNTg5Nw==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397825897", "bodyText": "Please introduce Path dummyFile1 variable. In both usages of dummyFileX, you are resulting the name using the same path.", "author": "koppor", "createdAt": "2020-03-25T12:47:07Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n+        String dummyFile1 = \"default.txt\";", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "155fbe396c18b01139f87f845f76daa124ea5492", "chunk": "diff --git a/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java b/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java\ndeleted file mode 100644\nindex 3023835ebd..0000000000\n--- a/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-package org.jabref.logic.util.io;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.io.TempDir;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class FileNameHandlerTest {\n-\n-    @Test\n-    public void testCleanFileName() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n-        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanDirectoryName() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n-        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n-        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanDirectoryNameForWindows() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n-        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n-        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanCurlyBracesAsWell() {\n-        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n-    }\n-\n-    @Test\n-    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n-        String dummyFile1 = \"default.txt\";\n-        String dummyFile2 = \"default (1).txt\";\n-        String expectedFileName = \"default (2).txt\";\n-\n-        Files.createFile(tempDirectory.resolve(dummyFile1));\n-        Files.createFile(tempDirectory.resolve(dummyFile2));\n-\n-        String outputFileName = FileNameHandler.getNonOverWritingFileName(tempDirectory, \"default.txt\");\n-        assertEquals(expectedFileName, outputFileName);\n-\n-        Files.delete(tempDirectory.resolve(dummyFile1));\n-        Files.delete(tempDirectory.resolve(dummyFile2));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNjU0NQ==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397826545", "bodyText": "Good to have a test. - Could you add two more:\n\nOne for a non existing file\nOne for just one file existing\n\nI know, these are trivial. - Nevertheless, if someone touches your code, even the trivial ones are tested then (and there could something go wrong)", "author": "koppor", "createdAt": "2020-03-25T12:48:16Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "155fbe396c18b01139f87f845f76daa124ea5492", "chunk": "diff --git a/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java b/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java\ndeleted file mode 100644\nindex 3023835ebd..0000000000\n--- a/src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-package org.jabref.logic.util.io;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.io.TempDir;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class FileNameHandlerTest {\n-\n-    @Test\n-    public void testCleanFileName() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n-        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanDirectoryName() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n-        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n-        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanDirectoryNameForWindows() {\n-        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n-        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n-        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n-    }\n-\n-    @Test\n-    public void testCleanCurlyBracesAsWell() {\n-        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n-    }\n-\n-    @Test\n-    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n-        String dummyFile1 = \"default.txt\";\n-        String dummyFile2 = \"default (1).txt\";\n-        String expectedFileName = \"default (2).txt\";\n-\n-        Files.createFile(tempDirectory.resolve(dummyFile1));\n-        Files.createFile(tempDirectory.resolve(dummyFile2));\n-\n-        String outputFileName = FileNameHandler.getNonOverWritingFileName(tempDirectory, \"default.txt\");\n-        assertEquals(expectedFileName, outputFileName);\n-\n-        Files.delete(tempDirectory.resolve(dummyFile1));\n-        Files.delete(tempDirectory.resolve(dummyFile2));\n-    }\n-}\n"}}, {"oid": "155fbe396c18b01139f87f845f76daa124ea5492", "url": "https://github.com/JabRef/jabref/commit/155fbe396c18b01139f87f845f76daa124ea5492", "message": "fixes #6068\n\n- fixed downloading file with same name\n- updated changelog", "committedDate": "2020-03-25T15:19:44Z", "type": "commit"}, {"oid": "155fbe396c18b01139f87f845f76daa124ea5492", "url": "https://github.com/JabRef/jabref/commit/155fbe396c18b01139f87f845f76daa124ea5492", "message": "fixes #6068\n\n- fixed downloading file with same name\n- updated changelog", "committedDate": "2020-03-25T15:19:44Z", "type": "forcePushed"}, {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138", "url": "https://github.com/JabRef/jabref/commit/1bfb77914faef877a82d00d91090ec703b9e8138", "message": "code check style", "committedDate": "2020-03-25T16:38:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzYyNg==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667626", "bodyText": "Please remove this comment.", "author": "tobiasdiez", "createdAt": "2020-03-28T14:20:52Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+//        String absoluteName = targetDirectory.resolve(fileName)", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "838539c9094a18d70e869b252a7f0731706e90fd", "chunk": "diff --git a/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java b/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\nindex 595530d094..3d2f0fe475 100644\n--- a/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\n+++ b/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\n\n@@ -7,15 +7,13 @@ import java.util.Optional;\n public class FileNameUniqueness {\n \n     /**\n-     * Returns an absolute path to a file which does not match with any existing file names\n+     * Returns a file-name such that it does not match any existing files in targetDirectory\n      *\n      * @param targetDirectory The directory in which file name should be unique\n      * @param fileName Suggested name for the file\n      * @return a file-name such that it does not match any existing files in targetDirectory.\n      * */\n     public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n-//        String absoluteName = targetDirectory.resolve(fileName)\n-//                .toString();\n \n         Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzYzNw==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667637", "bodyText": "This one as well.", "author": "tobiasdiez", "createdAt": "2020-03-28T14:21:03Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+//        String absoluteName = targetDirectory.resolve(fileName)\n+//                .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix;\n+        String fileNameWithoutExtension;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+        else {\n+            extensionSuffix = \"\";\n+            fileNameWithoutExtension = fileName;\n+        }\n+\n+//        Path absolutePath = Paths.get(absoluteName);", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "838539c9094a18d70e869b252a7f0731706e90fd", "chunk": "diff --git a/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java b/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\nindex 595530d094..3d2f0fe475 100644\n--- a/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\n+++ b/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\n\n@@ -7,15 +7,13 @@ import java.util.Optional;\n public class FileNameUniqueness {\n \n     /**\n-     * Returns an absolute path to a file which does not match with any existing file names\n+     * Returns a file-name such that it does not match any existing files in targetDirectory\n      *\n      * @param targetDirectory The directory in which file name should be unique\n      * @param fileName Suggested name for the file\n      * @return a file-name such that it does not match any existing files in targetDirectory.\n      * */\n     public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n-//        String absoluteName = targetDirectory.resolve(fileName)\n-//                .toString();\n \n         Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzgzOA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667838", "bodyText": "Is there a need to have the temporary directory as a variable as well as an argument? I would prefer if all tests use the same format (either variable or either paramater)", "author": "tobiasdiez", "createdAt": "2020-03-28T14:23:19Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class FileNameUniquenessTest {\n+\n+    @TempDir\n+    protected Path tempDir;\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "838539c9094a18d70e869b252a7f0731706e90fd", "chunk": "diff --git a/src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java b/src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java\nindex 15c82187a3..5e331870a4 100644\n--- a/src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java\n+++ b/src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java\n\n@@ -16,15 +16,14 @@ public class FileNameUniquenessTest {\n     protected Path tempDir;\n \n     @Test\n-    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {\n+    public void testGetNonOverWritingFileNameReturnsSameName() throws IOException {\n \n         assertFalse(\n-                Files.exists(tempDirectory.resolve(\"sameFile.txt\"))\n+                Files.exists(tempDir.resolve(\"sameFile.txt\"))\n         );\n \n-        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDirectory, \"sameFile.txt\");\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDir, \"sameFile.txt\");\n         assertEquals(\"sameFile.txt\", outputFileName);\n-\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2Nzk2NQ==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667965", "bodyText": "The description seems to be off as no absolute path is returned but only the file name, right?", "author": "tobiasdiez", "createdAt": "2020-03-28T14:24:11Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "838539c9094a18d70e869b252a7f0731706e90fd", "chunk": "diff --git a/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java b/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\nindex 595530d094..3d2f0fe475 100644\n--- a/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\n+++ b/src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java\n\n@@ -7,15 +7,13 @@ import java.util.Optional;\n public class FileNameUniqueness {\n \n     /**\n-     * Returns an absolute path to a file which does not match with any existing file names\n+     * Returns a file-name such that it does not match any existing files in targetDirectory\n      *\n      * @param targetDirectory The directory in which file name should be unique\n      * @param fileName Suggested name for the file\n      * @return a file-name such that it does not match any existing files in targetDirectory.\n      * */\n     public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n-//        String absoluteName = targetDirectory.resolve(fileName)\n-//                .toString();\n \n         Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2ODA2MA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399668060", "bodyText": "Deleting the file shouldn't be necessary as the TempDir should take care of this.", "author": "tobiasdiez", "createdAt": "2020-03-28T14:25:00Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class FileNameUniquenessTest {\n+\n+    @TempDir\n+    protected Path tempDir;\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {\n+\n+        assertFalse(\n+                Files.exists(tempDirectory.resolve(\"sameFile.txt\"))\n+        );\n+\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDirectory, \"sameFile.txt\");\n+        assertEquals(\"sameFile.txt\", outputFileName);\n+\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueNameOver1Conflict() throws IOException {\n+        Path dummyFilePath1 = tempDir.resolve(\"differentFile.txt\");\n+\n+        Files.createFile(dummyFilePath1);\n+\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDir, \"differentFile.txt\");\n+        assertEquals(\"differentFile (1).txt\", outputFileName);\n+\n+        Files.delete(dummyFilePath1);", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "838539c9094a18d70e869b252a7f0731706e90fd", "chunk": "diff --git a/src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java b/src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java\nindex 15c82187a3..5e331870a4 100644\n--- a/src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java\n+++ b/src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java\n\n@@ -16,15 +16,14 @@ public class FileNameUniquenessTest {\n     protected Path tempDir;\n \n     @Test\n-    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {\n+    public void testGetNonOverWritingFileNameReturnsSameName() throws IOException {\n \n         assertFalse(\n-                Files.exists(tempDirectory.resolve(\"sameFile.txt\"))\n+                Files.exists(tempDir.resolve(\"sameFile.txt\"))\n         );\n \n-        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDirectory, \"sameFile.txt\");\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDir, \"sameFile.txt\");\n         assertEquals(\"sameFile.txt\", outputFileName);\n-\n     }\n \n     @Test\n"}}, {"oid": "838539c9094a18d70e869b252a7f0731706e90fd", "url": "https://github.com/JabRef/jabref/commit/838539c9094a18d70e869b252a7f0731706e90fd", "message": "Remove commented code and refactor", "committedDate": "2020-03-28T15:03:02Z", "type": "commit"}]}