{"pr_number": 7145, "pr_title": "Add IdBasedSearchFetcher to jstor", "pr_createdAt": "2020-11-30T14:27:16Z", "pr_url": "https://github.com/JabRef/jabref/pull/7145", "timeline": [{"oid": "620c361f46c54f71791dbbac34265a03f1cf7956", "url": "https://github.com/JabRef/jabref/commit/620c361f46c54f71791dbbac34265a03f1cf7956", "message": "Merge pull request #2 from JabRef/master\n\nupdate fork", "committedDate": "2020-10-17T06:14:42Z", "type": "commit"}, {"oid": "b31b51eed56f08c4809aa4b3b78c76589982a8dc", "url": "https://github.com/JabRef/jabref/commit/b31b51eed56f08c4809aa4b3b78c76589982a8dc", "message": "Merge pull request #3 from JabRef/master\n\nUpdate", "committedDate": "2020-11-25T07:49:14Z", "type": "commit"}, {"oid": "39b1ce4685d026256296ea01ba361df0106fd941", "url": "https://github.com/JabRef/jabref/commit/39b1ce4685d026256296ea01ba361df0106fd941", "message": "add IdBasedParserFetcher to Jstor", "committedDate": "2020-11-30T14:24:22Z", "type": "commit"}, {"oid": "288c2aa8d5eafcb3233ee24641061cd796a28dfc", "url": "https://github.com/JabRef/jabref/commit/288c2aa8d5eafcb3233ee24641061cd796a28dfc", "message": "~fixing checkstyle erros", "committedDate": "2020-11-30T14:33:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2NDYyOQ==", "url": "https://github.com/JabRef/jabref/pull/7145#discussion_r532664629", "bodyText": "What did you had to change relative to the standard implementation?", "author": "tobiasdiez", "createdAt": "2020-11-30T15:06:05Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "diffHunk": "@@ -82,6 +84,46 @@ public URL getURLForQuery(ComplexSearchQuery query) throws URISyntaxException, M\n         return uriBuilder.build().toURL();\n     }\n \n+    @Override\n+    public URL getUrlForIdentifier(String identifier) throws FetcherException {\n+        String start = \"https://www.jstor.org/citation/text/\";\n+        if (identifier.startsWith(\"http\")) {\n+            identifier = identifier.replace(\"https://www.jstor.org/stable\", \"\");\n+            identifier = identifier.replace(\"http://www.jstor.org/stable\", \"\");\n+        }\n+        identifier = identifier.replaceAll(URL_QUERY_REGEX, \"\");\n+\n+        try {\n+            if (identifier.contains(\"/\")) {\n+                // if identifier links to a entry with a valid doi\n+                return new URL(start + identifier);\n+            }\n+            // else use default doi start.\n+            return new URL(start + \"10.2307/\" + identifier);\n+        } catch (IOException e) {\n+            throw new FetcherException(\"could not construct url for jstor\", e);\n+        }\n+    }\n+\n+    // overwriting default behaviour as that seems to always results in a 403", "originalCommit": "288c2aa8d5eafcb3233ee24641061cd796a28dfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczODE5OQ==", "url": "https://github.com/JabRef/jabref/pull/7145#discussion_r532738199", "bodyText": "getParser was already written to only work for search so I simply overwrote this method to use a bibtex parser.\nI did have another look at the code, removed this part and added the required logic to getParser.", "author": "joethei", "createdAt": "2020-11-30T16:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2NDYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e248249b6d4880849ccf59920c905551269ee8d", "chunk": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java\nindex 37bac4b5b..6315e708c 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java\n\n@@ -105,40 +109,30 @@ public class JstorFetcher implements SearchBasedParserFetcher, FulltextFetcher,\n         }\n     }\n \n-    // overwriting default behaviour as that seems to always results in a 403\n-    @Override\n-    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n-        if (identifier.isBlank()) {\n-            return Optional.empty();\n-        }\n-        BibtexParser parser = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor());\n-        List<BibEntry> entries = null;\n-        try {\n-            entries = parser.parseEntries(getUrlForIdentifier(identifier).openStream());\n-        } catch (ParseException | IOException e) {\n-            e.printStackTrace();\n-        }\n-        if (entries == null || entries.size() != 1) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(entries.get(0));\n-    }\n-\n     @Override\n     public Parser getParser() {\n         return inputStream -> {\n+            BibtexParser parser = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor());\n+            String text = new BufferedReader(\n+                    new InputStreamReader(inputStream, StandardCharsets.UTF_8)).lines().collect(Collectors.joining());\n+\n+            // does the input stream contain bibtex ?\n+            if (text.startsWith(\"@\")) {\n+                return parser.parseEntries(text);\n+            }\n+            // input stream contains html\n             List<BibEntry> entries;\n             try {\n                 Document doc = Jsoup.parse(inputStream, null, HOST);\n-                List<Element> elements = doc.body().getElementsByClass(\"cite-this-item\");\n+\n                 StringBuilder stringBuilder = new StringBuilder();\n+                List<Element> elements = doc.body().getElementsByClass(\"cite-this-item\");\n                 for (Element element : elements) {\n                     String id = element.attr(\"href\").replace(\"citation/info/\", \"\");\n \n                     String data = new URLDownload(CITE_HOST + id).asString();\n                     stringBuilder.append(data);\n                 }\n-                BibtexParser parser = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor());\n                 entries = new ArrayList<>(parser.parseEntries(stringBuilder.toString()));\n             } catch (IOException e) {\n                 throw new ParseException(\"Could not download data from jstor.org\", e);\n"}}, {"oid": "1e248249b6d4880849ccf59920c905551269ee8d", "url": "https://github.com/JabRef/jabref/commit/1e248249b6d4880849ccf59920c905551269ee8d", "message": "changing code to not override performSearchById", "committedDate": "2020-11-30T16:41:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNDY3OA==", "url": "https://github.com/JabRef/jabref/pull/7145#discussion_r533104678", "bodyText": "Why did you overwrite this?", "author": "DominikVoigt", "createdAt": "2020-12-01T06:42:31Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/JstorFetcher.java", "diffHunk": "@@ -133,4 +169,9 @@ public String getName() {\n     public TrustLevel getTrustLevel() {\n         return TrustLevel.META_SEARCH;\n     }\n+\n+    @Override\n+    public void doPostCleanup(BibEntry entry) {\n+        // do nothing\n+    }", "originalCommit": "1e248249b6d4880849ccf59920c905551269ee8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODAyMQ==", "url": "https://github.com/JabRef/jabref/pull/7145#discussion_r533118021", "bodyText": "as both SearchBased and IdBased Fetchers have a doPostCleanup default impl, the compiler is not sure which one to call", "author": "joethei", "createdAt": "2020-12-01T07:18:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNDY3OA=="}], "type": "inlineReview", "revised_code": null}]}