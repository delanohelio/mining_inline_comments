{"pr_number": 6258, "pr_title": "Fix inspire fetcher", "pr_createdAt": "2020-04-06T16:59:10Z", "pr_url": "https://github.com/JabRef/jabref/pull/6258", "timeline": [{"oid": "bac8bcfe302a0a8dfed0b479ee98331e14bf9afb", "url": "https://github.com/JabRef/jabref/commit/bac8bcfe302a0a8dfed0b479ee98331e14bf9afb", "message": "Fix inspire fetcher\n\nUse application/x-bibtex header\nFixes #6229", "committedDate": "2020-04-06T16:58:52Z", "type": "commit"}, {"oid": "1244d7dce579408bfa369b4c8b459dc455022687", "url": "https://github.com/JabRef/jabref/commit/1244d7dce579408bfa369b4c8b459dc455022687", "message": "update changelog", "committedDate": "2020-04-06T17:00:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjI3Mw==", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404962273", "bodyText": "Instead of copy-pasting the method, I would extract new URLDownload(getURLForQuery(query)).asInputStream() from https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java#L58 to a new default method, which you then can overwrite here.", "author": "tobiasdiez", "createdAt": "2020-04-07T16:52:12Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -59,33 +56,38 @@ public String getName() {\n     @Override\n     public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException, FetcherException {\n         URIBuilder uriBuilder = new URIBuilder(INSPIRE_HOST);\n-        uriBuilder.addParameter(\"p\", query); // Query\n-        //uriBuilder.addParameter(\"jrec\", \"1\"); // Start index (not needed at the moment)\n-        uriBuilder.addParameter(\"rg\", \"100\"); // Should return up to 100 items (instead of default 25)\n-        uriBuilder.addParameter(\"of\", \"hx\"); // BibTeX format\n+        uriBuilder.addParameter(\"q\", query); // Query\n         return uriBuilder.build().toURL();\n     }\n \n     @Override\n-    public Parser getParser() {\n-        // Inspire returns the BibTeX result embedded in HTML\n-        // So we extract the BibTeX string from the <pre>bibtex</pre> tags and pass the content to the BibTeX parser\n-        return inputStream -> {\n-            String response = new BufferedReader(new InputStreamReader(inputStream)).lines().collect(Collectors.joining(OS.NEWLINE));\n+    public List<BibEntry> performSearch(String query) throws FetcherException {\n+        if (StringUtil.isBlank(query)) {", "originalCommit": "1244d7dce579408bfa369b4c8b459dc455022687", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b503afe46d269344af4f44da7846a2222091aea0", "chunk": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\nindex aec86c2205..e8b953531d 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\n\n@@ -61,33 +55,10 @@ public class INSPIREFetcher implements SearchBasedParserFetcher {\n     }\n \n     @Override\n-    public List<BibEntry> performSearch(String query) throws FetcherException {\n-        if (StringUtil.isBlank(query)) {\n-            return Collections.emptyList();\n-        }\n-\n-        try {\n-            URLDownload download = new URLDownload(getURLForQuery(query));\n-            download.addHeader(\"Accept\", MediaTypes.APPLICATION_BIBTEX);\n-\n-            try (InputStream stream = download.asInputStream()) {\n-                List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n-\n-                // Post-cleanup\n-                fetchedEntries.forEach(this::doPostCleanup);\n-\n-                return fetchedEntries;\n-            }\n-\n-        } catch (URISyntaxException e) {\n-            throw new FetcherException(\"Search URI is malformed\", e);\n-        } catch (IOException e) {\n-            // TODO: Catch HTTP Response 401/403 errors and report that user has no rights to access resource\n-            throw new FetcherException(\"A network error occurred\", e);\n-        } catch (ParseException e) {\n-            throw new FetcherException(\"An internal parser error occurred\", e);\n-        }\n-\n+    public URLDownload getUrlDownload(String query) throws MalformedURLException, FetcherException, URISyntaxException {\n+        URLDownload download = new URLDownload(getURLForQuery(query));\n+        download.addHeader(\"Accept\", MediaTypes.APPLICATION_BIBTEX);\n+        return download;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjUwNw==", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404962507", "bodyText": "there is no paging support (start + size) for the new interface?", "author": "tobiasdiez", "createdAt": "2020-04-07T16:52:32Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -59,33 +56,38 @@ public String getName() {\n     @Override\n     public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException, FetcherException {\n         URIBuilder uriBuilder = new URIBuilder(INSPIRE_HOST);\n-        uriBuilder.addParameter(\"p\", query); // Query\n-        //uriBuilder.addParameter(\"jrec\", \"1\"); // Start index (not needed at the moment)\n-        uriBuilder.addParameter(\"rg\", \"100\"); // Should return up to 100 items (instead of default 25)\n-        uriBuilder.addParameter(\"of\", \"hx\"); // BibTeX format\n+        uriBuilder.addParameter(\"q\", query); // Query", "originalCommit": "1244d7dce579408bfa369b4c8b459dc455022687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDczNw==", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404970737", "bodyText": "The json api has support for it, but when calling with the bibtex header not.", "author": "Siedlerchr", "createdAt": "2020-04-07T17:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMjEzMQ==", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r408002131", "bodyText": "On my end &size=10&page=2 seems to works fine as of today, not sure about a week ago.", "author": "larsgw", "createdAt": "2020-04-14T09:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMTE0NQ==", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r408011145", "bodyText": "Indeed, this seems to work. I will create a follow up PR", "author": "Siedlerchr", "createdAt": "2020-04-14T09:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "b503afe46d269344af4f44da7846a2222091aea0", "chunk": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\nindex aec86c2205..e8b953531d 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\n\n@@ -61,33 +55,10 @@ public class INSPIREFetcher implements SearchBasedParserFetcher {\n     }\n \n     @Override\n-    public List<BibEntry> performSearch(String query) throws FetcherException {\n-        if (StringUtil.isBlank(query)) {\n-            return Collections.emptyList();\n-        }\n-\n-        try {\n-            URLDownload download = new URLDownload(getURLForQuery(query));\n-            download.addHeader(\"Accept\", MediaTypes.APPLICATION_BIBTEX);\n-\n-            try (InputStream stream = download.asInputStream()) {\n-                List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n-\n-                // Post-cleanup\n-                fetchedEntries.forEach(this::doPostCleanup);\n-\n-                return fetchedEntries;\n-            }\n-\n-        } catch (URISyntaxException e) {\n-            throw new FetcherException(\"Search URI is malformed\", e);\n-        } catch (IOException e) {\n-            // TODO: Catch HTTP Response 401/403 errors and report that user has no rights to access resource\n-            throw new FetcherException(\"A network error occurred\", e);\n-        } catch (ParseException e) {\n-            throw new FetcherException(\"An internal parser error occurred\", e);\n-        }\n-\n+    public URLDownload getUrlDownload(String query) throws MalformedURLException, FetcherException, URISyntaxException {\n+        URLDownload download = new URLDownload(getURLForQuery(query));\n+        download.addHeader(\"Accept\", MediaTypes.APPLICATION_BIBTEX);\n+        return download;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2Mjk1Mw==", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404962953", "bodyText": "Could you please include the link to the documentation of the new api as well.", "author": "tobiasdiez", "createdAt": "2020-04-07T16:53:10Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java", "diffHunk": "@@ -1,49 +1,46 @@\n package org.jabref.logic.importer.fetcher;\n \n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URISyntaxException;\n import java.net.URL;\n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n import org.jabref.logic.formatter.bibtexfields.ClearFormatter;\n import org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter;\n import org.jabref.logic.help.HelpFile;\n import org.jabref.logic.importer.FetcherException;\n import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.logic.importer.ParseException;\n import org.jabref.logic.importer.Parser;\n import org.jabref.logic.importer.SearchBasedParserFetcher;\n import org.jabref.logic.importer.fileformat.BibtexParser;\n-import org.jabref.logic.util.OS;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n import org.jabref.model.cleanup.FieldFormatterCleanup;\n import org.jabref.model.entry.BibEntry;\n import org.jabref.model.entry.field.StandardField;\n import org.jabref.model.entry.field.UnknownField;\n+import org.jabref.model.strings.StringUtil;\n import org.jabref.model.util.DummyFileUpdateMonitor;\n \n import org.apache.http.client.utils.URIBuilder;\n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n-import org.jsoup.select.Elements;\n \n /**\n  * Fetches data from the INSPIRE database.\n  *\n- * @implNote We just use the normal search interface since it provides direct BibTeX export while the API (http://inspirehep.net/info/hep/api) currently only supports JSON and XML\n  */\n public class INSPIREFetcher implements SearchBasedParserFetcher {\n \n-    private static final String INSPIRE_HOST = \"https://inspirehep.net/search\";\n+    private static final String INSPIRE_HOST = \"https://inspirehep.net/api/literature/\";", "originalCommit": "1244d7dce579408bfa369b4c8b459dc455022687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwNDg0NQ==", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r407704845", "bodyText": "There is not yet any documentation avaiable. I contacted INSPIRE hep team.", "author": "Siedlerchr", "createdAt": "2020-04-13T20:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2Mjk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b503afe46d269344af4f44da7846a2222091aea0", "chunk": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\nindex aec86c2205..e8b953531d 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/INSPIREFetcher.java\n\n@@ -1,12 +1,8 @@\n package org.jabref.logic.importer.fetcher;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URISyntaxException;\n import java.net.URL;\n-import java.util.Collections;\n-import java.util.List;\n import java.util.Optional;\n \n import org.jabref.logic.formatter.bibtexfields.ClearFormatter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MzI0Mg==", "url": "https://github.com/JabRef/jabref/pull/6258#discussion_r404963242", "bodyText": "Is this related to this fix?", "author": "tobiasdiez", "createdAt": "2020-04-07T16:53:36Z", "path": "src/main/java/org/jabref/logic/openoffice/OOUtil.java", "diffHunk": "@@ -227,7 +227,7 @@ public static void insertTextAtCurrentLocation(XText text, XTextCursor cursor, S\n         } */\n         if (formatting.contains(Formatting.SUBSCRIPT)) {\n             xCursorProps.setPropertyValue(CHAR_ESCAPEMENT,\n-                    (byte) -101);\n+                    (byte) -33);", "originalCommit": "1244d7dce579408bfa369b4c8b459dc455022687", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b503afe46d269344af4f44da7846a2222091aea0", "chunk": "diff --git a/src/main/java/org/jabref/logic/openoffice/OOUtil.java b/src/main/java/org/jabref/logic/openoffice/OOUtil.java\nindex 1d90008480..d3798b943a 100644\n--- a/src/main/java/org/jabref/logic/openoffice/OOUtil.java\n+++ b/src/main/java/org/jabref/logic/openoffice/OOUtil.java\n\n@@ -227,7 +227,7 @@ public class OOUtil {\n         } */\n         if (formatting.contains(Formatting.SUBSCRIPT)) {\n             xCursorProps.setPropertyValue(CHAR_ESCAPEMENT,\n-                    (byte) -33);\n+                    (byte) -101);\n             xCursorProps.setPropertyValue(CHAR_ESCAPEMENT_HEIGHT,\n                     (byte) 58);\n         } else if (formatting.contains(Formatting.SUPERSCRIPT)) {\n"}}, {"oid": "4d578611b39f13856efbdfd71e3141e3a377c9f5", "url": "https://github.com/JabRef/jabref/commit/4d578611b39f13856efbdfd71e3141e3a377c9f5", "message": "Merge remote-tracking branch 'upstream/master' into inspireFetcher\n\n* upstream/master: (23 commits)\n  Bump junit-vintage-engine from 5.6.1 to 5.6.2 (#6276)\n  Number of items found in ImportEntriesDialog (#6248)\n  Fix dependency label\n  Bump flexmark-ext-gfm-strikethrough from 0.61.0 to 0.61.6 (#6273)\n  Bump unirest-java from 3.7.01 to 3.7.02 (#6275)\n  Bump junit-platform-launcher from 1.6.1 to 1.6.2 (#6279)\n  Bump flexmark-ext-gfm-tasklist from 0.61.0 to 0.61.6 (#6278)\n  Bump junit-jupiter from 5.6.1 to 5.6.2 (#6274)\n  Bump flexmark from 0.61.0 to 0.61.6 (#6280)\n  Bump classgraph from 4.8.68 to 4.8.69 (#6277)\n  Bump org.beryx.jlink from 2.17.4 to 2.17.5 (#6281)\n  Improve performance (#6270)\n  Improve calculation of matched entries upon change (#6268)\n  Fix sort by priority (#6222) (#6265)\n  Squashed 'src/main/resources/csl-styles/' changes from 88726cb64d..db54e5655d\n  Use https everywhere\n  Entry editor: Add more tooltips and wrap tooltips if necessary (#6239)\n  JDK14 switch - and checkstyle skipping (#6250)\n  Bump postgresql from 42.2.11 to 42.2.12 (#6254)\n  Bump unirest-java from 3.7.00 to 3.7.01 (#6253)\n  ...", "committedDate": "2020-04-13T19:35:37Z", "type": "commit"}, {"oid": "b503afe46d269344af4f44da7846a2222091aea0", "url": "https://github.com/JabRef/jabref/commit/b503afe46d269344af4f44da7846a2222091aea0", "message": "extract urldownload method for easier overwriting\nrevert not related changes", "committedDate": "2020-04-13T20:17:48Z", "type": "commit"}, {"oid": "c600a584230935deedaba4bfa926a08cc940c162", "url": "https://github.com/JabRef/jabref/commit/c600a584230935deedaba4bfa926a08cc940c162", "message": "Merge branch 'master' into inspireFetcher", "committedDate": "2020-04-13T20:34:23Z", "type": "commit"}, {"oid": "8a366c5089769cdff0c518a16d8d18d89c93474d", "url": "https://github.com/JabRef/jabref/commit/8a366c5089769cdff0c518a16d8d18d89c93474d", "message": "Merge branch 'master' into inspireFetcher", "committedDate": "2020-04-14T07:14:05Z", "type": "commit"}]}