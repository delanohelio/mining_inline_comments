{"pr_number": 7007, "pr_title": "Support for exporting to YAML format", "pr_createdAt": "2020-10-12T14:35:17Z", "pr_url": "https://github.com/JabRef/jabref/pull/7007", "timeline": [{"oid": "6da7c052d50fd183b544dd6db660b41526dcaca6", "url": "https://github.com/JabRef/jabref/commit/6da7c052d50fd183b544dd6db660b41526dcaca6", "message": "added support for exporting CSL in YAML format.", "committedDate": "2020-10-12T12:48:54Z", "type": "commit"}, {"oid": "4c40d595ef5834959679c67afd81d7915fa2b804", "url": "https://github.com/JabRef/jabref/commit/4c40d595ef5834959679c67afd81d7915fa2b804", "message": "added changes in Changelog", "committedDate": "2020-10-12T14:36:33Z", "type": "commit"}, {"oid": "9b1538661137df2b5eaac91abb5c6627689e2174", "url": "https://github.com/JabRef/jabref/commit/9b1538661137df2b5eaac91abb5c6627689e2174", "message": "Merge branch 'master' into yaml-exporter", "committedDate": "2020-10-12T14:37:34Z", "type": "commit"}, {"oid": "048259336f0a8b8d2a427a1c0f708f294e416245", "url": "https://github.com/JabRef/jabref/commit/048259336f0a8b8d2a427a1c0f708f294e416245", "message": "Update CHANGELOG.md", "committedDate": "2020-10-12T14:45:48Z", "type": "commit"}, {"oid": "34545cb81ed1be05e76b166e59a89d22f3e5dd8d", "url": "https://github.com/JabRef/jabref/commit/34545cb81ed1be05e76b166e59a89d22f3e5dd8d", "message": "remove one trailing space", "committedDate": "2020-10-12T17:17:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNTAwMA==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r503525000", "bodyText": "Not sure why a lower case i is used, although all the other @param fields start with a capital letter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param deleteBlankLines  if blank lines should be removed (default: false)\n          \n          \n            \n                 * @param deleteBlankLines  If blank lines should be removed (default: false)", "author": "koppor", "createdAt": "2020-10-12T20:49:35Z", "path": "src/main/java/org/jabref/logic/exporter/TemplateExporter.java", "diffHunk": "@@ -112,27 +100,33 @@ public TemplateExporter(String displayName, String consoleName, String lfFileNam\n     }\n \n     /**\n-     * Initialize another export format based on templates stored in dir with\n-     * layoutFile lfFilename.\n-     * The display name is automatically derived from the FileType\n+     * Initialize another export format based on templates stored in dir with layoutFile lfFilename.\n      *\n+     * @param displayName       Name to display to the user.\n      * @param consoleName       Name to call this format in the console.\n      * @param lfFileName        Name of the main layout file.\n      * @param directory         Directory in which to find the layout file.\n      * @param extension         Should contain the . (for instance .txt).\n      * @param layoutPreferences Preferences for layout\n      * @param savePreferences   Preferences for saving\n-     * @param deleteBlankLines  If blank lines should be remove (default: false)\n+     * @param deleteBlankLines  if blank lines should be removed (default: false)", "originalCommit": "34545cb81ed1be05e76b166e59a89d22f3e5dd8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "977bc6e1a1a40ba5ce249d94f3afa7373fd168cb", "chunk": "diff --git a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\nindex df6fc29ef..1efcf37ff 100644\n--- a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n+++ b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n\n@@ -109,7 +109,7 @@ public class TemplateExporter extends Exporter {\n      * @param extension         Should contain the . (for instance .txt).\n      * @param layoutPreferences Preferences for layout\n      * @param savePreferences   Preferences for saving\n-     * @param deleteBlankLines  if blank lines should be removed (default: false)\n+     * @param deleteBlankLines  If blank lines should be removed (default: false)\n      */\n     public TemplateExporter(String displayName, String consoleName, String lfFileName, String directory, FileType extension,\n                             LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences, boolean deleteBlankLines) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNjQ4OQ==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r503526489", "bodyText": "Double check: Does this work on Windows and Linux equally well? Mayybe OS.NEW_LINE should be used?", "author": "koppor", "createdAt": "2020-10-12T20:52:55Z", "path": "src/main/java/org/jabref/logic/exporter/TemplateExporter.java", "diffHunk": "@@ -278,8 +269,12 @@ public void export(final BibDatabaseContext databaseContext, final Path file,\n                 // Write the entry\n                 if (layout != null) {\n                     if (deleteBlankLines) {\n-                        String withoutBlankLines = BLANK_LINE_MATCHER.matcher(layout.doLayout(entry, databaseContext.getDatabase())).replaceAll(\"\");\n-                        ps.write(withoutBlankLines);\n+                        String[] lines = layout.doLayout(entry, databaseContext.getDatabase()).split(\"\\n\");", "originalCommit": "34545cb81ed1be05e76b166e59a89d22f3e5dd8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNzAzNQ==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r503527035", "bodyText": "The alternative implementation could have been to update the regular expression. I am really not sure why it stopped working.", "author": "koppor", "createdAt": "2020-10-12T20:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNjQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMTQxMg==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r503731412", "bodyText": "Interestingly enough when using OS.NEW_LINE on Windows its breaks.\nneed to do an test on linux though, currently having problems running my vm.", "author": "joethei", "createdAt": "2020-10-13T07:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNjQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNzQxMg==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r503737412", "bodyText": "Maybe it should check both? We don't know which line endings the user has in the template files (if modified)", "author": "Siedlerchr", "createdAt": "2020-10-13T07:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNjQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "58eea460893e275b3dd6e1f70823675d657f3afa", "chunk": "diff --git a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\nindex df6fc29ef..91bdf4508 100644\n--- a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n+++ b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n\n@@ -269,10 +271,10 @@ public class TemplateExporter extends Exporter {\n                 // Write the entry\n                 if (layout != null) {\n                     if (deleteBlankLines) {\n-                        String[] lines = layout.doLayout(entry, databaseContext.getDatabase()).split(\"\\n\");\n+                        String[] lines = layout.doLayout(entry, databaseContext.getDatabase()).split(BLANK_LINE_PATTERN);\n                         for (String line : lines) {\n                             if (!line.isBlank() && !line.isEmpty()) {\n-                                ps.write(line);\n+                                ps.write(line + OS.NEWLINE);\n                             }\n                         }\n                     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNzk2Mg==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r503527962", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BibEntry entry = new BibEntry(StandardEntryType.Article);\n          \n          \n            \n                    entry.withCitationKey(\"test\");\n          \n          \n            \n                    entry.withField(StandardField.AUTHOR, \"Test Author\");\n          \n          \n            \n                    entry.withField(StandardField.TITLE, \"Test Title\");\n          \n          \n            \n                    entry.withField(StandardField.URL, \"http://example.com\");\n          \n          \n            \n                    entry.withField(StandardField.YEAR, \"2020\");\n          \n          \n            \n                    BibEntry entry = new BibEntry(StandardEntryType.Article)\n          \n          \n            \n                      .withCitationKey(\"test\")\n          \n          \n            \n                      .withField(StandardField.AUTHOR, \"Test Author\")\n          \n          \n            \n                      .withField(StandardField.TITLE, \"Test Title\")\n          \n          \n            \n                      .withField(StandardField.URL, \"http://example.com\")\n          \n          \n            \n                      .withField(StandardField.YEAR, \"2020\");", "author": "koppor", "createdAt": "2020-10-12T20:55:56Z", "path": "src/test/java/org/jabref/logic/exporter/YamlExporterTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.jabref.logic.exporter;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.layout.LayoutFormatterPreferences;\n+import org.jabref.logic.xmp.XmpPreferences;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.Answers;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+\n+public class YamlExporterTest {\n+\n+    public Charset charset;\n+    private Exporter yamlExporter;\n+    private BibDatabaseContext databaseContext;\n+\n+    @BeforeEach\n+    public void setUp() throws Exception {\n+        List<TemplateExporter> customFormats = new ArrayList<>();\n+        LayoutFormatterPreferences layoutPreferences = mock(LayoutFormatterPreferences.class, Answers.RETURNS_DEEP_STUBS);\n+        SavePreferences savePreferences = mock(SavePreferences.class);\n+        XmpPreferences xmpPreferences = mock(XmpPreferences.class);\n+        ExporterFactory exporterFactory = ExporterFactory.create(customFormats, layoutPreferences, savePreferences, xmpPreferences);\n+\n+        databaseContext = new BibDatabaseContext();\n+        charset = StandardCharsets.UTF_8;\n+        yamlExporter = exporterFactory.getExporterByName(\"yaml\").get();\n+    }\n+\n+    @Test\n+    public final void exportForNoEntriesWritesNothing(@TempDir Path tempFile) throws Exception {\n+        Path file = tempFile.resolve(\"ThisIsARandomlyNamedFile\");\n+        Files.createFile(file);\n+        yamlExporter.export(databaseContext, tempFile, charset, Collections.emptyList());\n+        assertEquals(Collections.emptyList(), Files.readAllLines(file));\n+    }\n+\n+    @Test\n+    public final void exportCorrectContent(@TempDir Path tempFile) throws Exception {\n+        BibEntry entry = new BibEntry(StandardEntryType.Article);\n+        entry.withCitationKey(\"test\");\n+        entry.withField(StandardField.AUTHOR, \"Test Author\");\n+        entry.withField(StandardField.TITLE, \"Test Title\");\n+        entry.withField(StandardField.URL, \"http://example.com\");\n+        entry.withField(StandardField.YEAR, \"2020\");", "originalCommit": "34545cb81ed1be05e76b166e59a89d22f3e5dd8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd22cba7d32f3b181c18a164c878bf004a7ca7d3", "chunk": "diff --git a/src/test/java/org/jabref/logic/exporter/YamlExporterTest.java b/src/test/java/org/jabref/logic/exporter/YamlExporterTest.java\nindex 563227ead..b1287349b 100644\n--- a/src/test/java/org/jabref/logic/exporter/YamlExporterTest.java\n+++ b/src/test/java/org/jabref/logic/exporter/YamlExporterTest.java\n\n@@ -52,12 +52,12 @@ public class YamlExporterTest {\n \n     @Test\n     public final void exportCorrectContent(@TempDir Path tempFile) throws Exception {\n-        BibEntry entry = new BibEntry(StandardEntryType.Article);\n-        entry.withCitationKey(\"test\");\n-        entry.withField(StandardField.AUTHOR, \"Test Author\");\n-        entry.withField(StandardField.TITLE, \"Test Title\");\n-        entry.withField(StandardField.URL, \"http://example.com\");\n-        entry.withField(StandardField.YEAR, \"2020\");\n+        BibEntry entry = new BibEntry(StandardEntryType.Article)\n+          .withCitationKey(\"test\")\n+          .withField(StandardField.AUTHOR, \"Test Author\")\n+          .withField(StandardField.TITLE, \"Test Title\")\n+          .withField(StandardField.URL, \"http://example.com\")\n+          .withField(StandardField.YEAR, \"2020\");\n \n         Path file = tempFile.resolve(\"RandomFileName\");\n         Files.createFile(file);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyODU5OQ==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r503528599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> lines = new ArrayList<>();\n          \n          \n            \n                    lines.add(\"---\");\n          \n          \n            \n                    lines.add(\"references:\");\n          \n          \n            \n                    lines.add(\"- id: test\");\n          \n          \n            \n                    lines.add(\"  author:\");\n          \n          \n            \n                    lines.add(\"  - literal: \\\"Test Author\\\"\");\n          \n          \n            \n                    lines.add(\"  title: \\\"Test Title\\\"\");\n          \n          \n            \n                    lines.add(\"  issued: 2020\");\n          \n          \n            \n                    lines.add(\"  url: http://example.com\");\n          \n          \n            \n                    lines.add(\"---\");\n          \n          \n            \n                    List<String> lines = List.of(\n          \n          \n            \n                      \"---\",\n          \n          \n            \n                     \"references:\",\n          \n          \n            \n                     \"- id: test\",\n          \n          \n            \n                     \"  author:\",\n          \n          \n            \n                     \"  - literal: \\\"Test Author\\\"\",\n          \n          \n            \n                     \"  title: \\\"Test Title\\\"\",\n          \n          \n            \n                     \"  issued: 2020\",\n          \n          \n            \n                     \"  url: http://example.com\",\n          \n          \n            \n                     \"---\");", "author": "koppor", "createdAt": "2020-10-12T20:57:28Z", "path": "src/test/java/org/jabref/logic/exporter/YamlExporterTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.jabref.logic.exporter;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.layout.LayoutFormatterPreferences;\n+import org.jabref.logic.xmp.XmpPreferences;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.Answers;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+\n+public class YamlExporterTest {\n+\n+    public Charset charset;\n+    private Exporter yamlExporter;\n+    private BibDatabaseContext databaseContext;\n+\n+    @BeforeEach\n+    public void setUp() throws Exception {\n+        List<TemplateExporter> customFormats = new ArrayList<>();\n+        LayoutFormatterPreferences layoutPreferences = mock(LayoutFormatterPreferences.class, Answers.RETURNS_DEEP_STUBS);\n+        SavePreferences savePreferences = mock(SavePreferences.class);\n+        XmpPreferences xmpPreferences = mock(XmpPreferences.class);\n+        ExporterFactory exporterFactory = ExporterFactory.create(customFormats, layoutPreferences, savePreferences, xmpPreferences);\n+\n+        databaseContext = new BibDatabaseContext();\n+        charset = StandardCharsets.UTF_8;\n+        yamlExporter = exporterFactory.getExporterByName(\"yaml\").get();\n+    }\n+\n+    @Test\n+    public final void exportForNoEntriesWritesNothing(@TempDir Path tempFile) throws Exception {\n+        Path file = tempFile.resolve(\"ThisIsARandomlyNamedFile\");\n+        Files.createFile(file);\n+        yamlExporter.export(databaseContext, tempFile, charset, Collections.emptyList());\n+        assertEquals(Collections.emptyList(), Files.readAllLines(file));\n+    }\n+\n+    @Test\n+    public final void exportCorrectContent(@TempDir Path tempFile) throws Exception {\n+        BibEntry entry = new BibEntry(StandardEntryType.Article);\n+        entry.withCitationKey(\"test\");\n+        entry.withField(StandardField.AUTHOR, \"Test Author\");\n+        entry.withField(StandardField.TITLE, \"Test Title\");\n+        entry.withField(StandardField.URL, \"http://example.com\");\n+        entry.withField(StandardField.YEAR, \"2020\");\n+\n+        Path file = tempFile.resolve(\"RandomFileName\");\n+        Files.createFile(file);\n+        yamlExporter.export(databaseContext, file, charset, Collections.singletonList(entry));\n+\n+        List<String> lines = new ArrayList<>();\n+        lines.add(\"---\");\n+        lines.add(\"references:\");\n+        lines.add(\"- id: test\");\n+        lines.add(\"  author:\");\n+        lines.add(\"  - literal: \\\"Test Author\\\"\");\n+        lines.add(\"  title: \\\"Test Title\\\"\");\n+        lines.add(\"  issued: 2020\");\n+        lines.add(\"  url: http://example.com\");\n+        lines.add(\"---\");", "originalCommit": "34545cb81ed1be05e76b166e59a89d22f3e5dd8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd22cba7d32f3b181c18a164c878bf004a7ca7d3", "chunk": "diff --git a/src/test/java/org/jabref/logic/exporter/YamlExporterTest.java b/src/test/java/org/jabref/logic/exporter/YamlExporterTest.java\nindex 563227ead..b1287349b 100644\n--- a/src/test/java/org/jabref/logic/exporter/YamlExporterTest.java\n+++ b/src/test/java/org/jabref/logic/exporter/YamlExporterTest.java\n\n@@ -52,12 +52,12 @@ public class YamlExporterTest {\n \n     @Test\n     public final void exportCorrectContent(@TempDir Path tempFile) throws Exception {\n-        BibEntry entry = new BibEntry(StandardEntryType.Article);\n-        entry.withCitationKey(\"test\");\n-        entry.withField(StandardField.AUTHOR, \"Test Author\");\n-        entry.withField(StandardField.TITLE, \"Test Title\");\n-        entry.withField(StandardField.URL, \"http://example.com\");\n-        entry.withField(StandardField.YEAR, \"2020\");\n+        BibEntry entry = new BibEntry(StandardEntryType.Article)\n+          .withCitationKey(\"test\")\n+          .withField(StandardField.AUTHOR, \"Test Author\")\n+          .withField(StandardField.TITLE, \"Test Title\")\n+          .withField(StandardField.URL, \"http://example.com\")\n+          .withField(StandardField.YEAR, \"2020\");\n \n         Path file = tempFile.resolve(\"RandomFileName\");\n         Files.createFile(file);\n"}}, {"oid": "fd22cba7d32f3b181c18a164c878bf004a7ca7d3", "url": "https://github.com/JabRef/jabref/commit/fd22cba7d32f3b181c18a164c878bf004a7ca7d3", "message": "Update src/test/java/org/jabref/logic/exporter/YamlExporterTest.java\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-10-13T05:31:04Z", "type": "commit"}, {"oid": "27dce7e71ebfbbe9bad655f2c771a78d947cbcc5", "url": "https://github.com/JabRef/jabref/commit/27dce7e71ebfbbe9bad655f2c771a78d947cbcc5", "message": "Update src/test/java/org/jabref/logic/exporter/YamlExporterTest.java\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-10-13T05:31:23Z", "type": "commit"}, {"oid": "977bc6e1a1a40ba5ce249d94f3afa7373fd168cb", "url": "https://github.com/JabRef/jabref/commit/977bc6e1a1a40ba5ce249d94f3afa7373fd168cb", "message": "Update src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-10-13T05:31:41Z", "type": "commit"}, {"oid": "6a38c665fd45643f50e5cb831735215b540c37dd", "url": "https://github.com/JabRef/jabref/commit/6a38c665fd45643f50e5cb831735215b540c37dd", "message": "Merge branch 'master' into yaml-exporter", "committedDate": "2020-10-13T09:23:27Z", "type": "commit"}, {"oid": "58eea460893e275b3dd6e1f70823675d657f3afa", "url": "https://github.com/JabRef/jabref/commit/58eea460893e275b3dd6e1f70823675d657f3afa", "message": "added conversion from bibtex entrytype to csl type\nfixed blank line removal", "committedDate": "2020-10-15T09:18:19Z", "type": "commit"}, {"oid": "55481e5dd8369b6b1931e0616308ade124db4cce", "url": "https://github.com/JabRef/jabref/commit/55481e5dd8369b6b1931e0616308ade124db4cce", "message": "Merge branch 'master' into yaml-exporter", "committedDate": "2020-10-15T11:35:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE5MzcxMQ==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r507193711", "bodyText": "Can you make boolean deleteBlankLines an enum? KEEP_BLANKS or DELETE_BLANKS is way more intuitive as true and false at the caller side.", "author": "calixtus", "createdAt": "2020-10-18T18:04:36Z", "path": "src/main/java/org/jabref/logic/exporter/TemplateExporter.java", "diffHunk": "@@ -112,27 +102,33 @@ public TemplateExporter(String displayName, String consoleName, String lfFileNam\n     }\n \n     /**\n-     * Initialize another export format based on templates stored in dir with\n-     * layoutFile lfFilename.\n-     * The display name is automatically derived from the FileType\n+     * Initialize another export format based on templates stored in dir with layoutFile lfFilename.\n      *\n+     * @param displayName       Name to display to the user.\n      * @param consoleName       Name to call this format in the console.\n      * @param lfFileName        Name of the main layout file.\n      * @param directory         Directory in which to find the layout file.\n      * @param extension         Should contain the . (for instance .txt).\n      * @param layoutPreferences Preferences for layout\n      * @param savePreferences   Preferences for saving\n-     * @param deleteBlankLines  If blank lines should be remove (default: false)\n+     * @param deleteBlankLines  If blank lines should be removed (default: false)\n      */\n-    public TemplateExporter(String consoleName, String lfFileName, String directory, StandardFileType extension, LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences, boolean deleteBlankLines) {\n-        this(consoleName, consoleName, lfFileName, directory, extension, layoutPreferences, savePreferences);\n+    public TemplateExporter(String displayName, String consoleName, String lfFileName, String directory, FileType extension,\n+                            LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences, boolean deleteBlankLines) {", "originalCommit": "55481e5dd8369b6b1931e0616308ade124db4cce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92e45019a6ee094778e716c6b27fad549b8306f8", "chunk": "diff --git a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\nindex 91bdf4508..8825652dc 100644\n--- a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n+++ b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n\n@@ -111,10 +112,11 @@ public class TemplateExporter extends Exporter {\n      * @param extension         Should contain the . (for instance .txt).\n      * @param layoutPreferences Preferences for layout\n      * @param savePreferences   Preferences for saving\n-     * @param deleteBlankLines  If blank lines should be removed (default: false)\n+     * @param blankLineBehaviour how to behave regarding blank lines.\n      */\n     public TemplateExporter(String displayName, String consoleName, String lfFileName, String directory, FileType extension,\n-                            LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences, boolean deleteBlankLines) {\n+                            LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences,\n+                            BlankLineBehaviour blankLineBehaviour) {\n         super(consoleName, displayName, extension);\n         if (Objects.requireNonNull(lfFileName).endsWith(LAYOUT_EXTENSION)) {\n             this.lfFileName = lfFileName.substring(0, lfFileName.length() - LAYOUT_EXTENSION.length());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE5NDgwNQ==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r507194805", "bodyText": "Please wrap the comments after 120 characters, to keep it readable in github", "author": "calixtus", "createdAt": "2020-10-18T18:13:57Z", "path": "src/main/java/org/jabref/logic/exporter/TemplateExporter.java", "diffHunk": "@@ -112,27 +102,33 @@ public TemplateExporter(String displayName, String consoleName, String lfFileNam\n     }\n \n     /**\n-     * Initialize another export format based on templates stored in dir with\n-     * layoutFile lfFilename.\n-     * The display name is automatically derived from the FileType\n+     * Initialize another export format based on templates stored in dir with layoutFile lfFilename.\n      *\n+     * @param displayName       Name to display to the user.\n      * @param consoleName       Name to call this format in the console.\n      * @param lfFileName        Name of the main layout file.\n      * @param directory         Directory in which to find the layout file.\n      * @param extension         Should contain the . (for instance .txt).\n      * @param layoutPreferences Preferences for layout\n      * @param savePreferences   Preferences for saving\n-     * @param deleteBlankLines  If blank lines should be remove (default: false)\n+     * @param deleteBlankLines  If blank lines should be removed (default: false)\n      */\n-    public TemplateExporter(String consoleName, String lfFileName, String directory, StandardFileType extension, LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences, boolean deleteBlankLines) {\n-        this(consoleName, consoleName, lfFileName, directory, extension, layoutPreferences, savePreferences);\n+    public TemplateExporter(String displayName, String consoleName, String lfFileName, String directory, FileType extension,\n+                            LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences, boolean deleteBlankLines) {\n+        super(consoleName, displayName, extension);\n+        if (Objects.requireNonNull(lfFileName).endsWith(LAYOUT_EXTENSION)) {\n+            this.lfFileName = lfFileName.substring(0, lfFileName.length() - LAYOUT_EXTENSION.length());\n+        } else {\n+            this.lfFileName = lfFileName;\n+        }\n+        this.directory = directory;\n+        this.layoutPreferences = layoutPreferences;\n+        this.savePreferences = savePreferences;\n         this.deleteBlankLines = deleteBlankLines;\n     }\n \n     /**\n-     * Indicate whether this is a custom export. A custom export looks for its\n-     * layout files using a normal file path, while a built-in export looks in\n-     * the classpath.\n+     * Indicate whether this is a custom export. A custom export looks for its layout files using a normal file path, while a built-in export looks in the classpath.", "originalCommit": "55481e5dd8369b6b1931e0616308ade124db4cce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92e45019a6ee094778e716c6b27fad549b8306f8", "chunk": "diff --git a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\nindex 91bdf4508..8825652dc 100644\n--- a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n+++ b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n\n@@ -111,10 +112,11 @@ public class TemplateExporter extends Exporter {\n      * @param extension         Should contain the . (for instance .txt).\n      * @param layoutPreferences Preferences for layout\n      * @param savePreferences   Preferences for saving\n-     * @param deleteBlankLines  If blank lines should be removed (default: false)\n+     * @param blankLineBehaviour how to behave regarding blank lines.\n      */\n     public TemplateExporter(String displayName, String consoleName, String lfFileName, String directory, FileType extension,\n-                            LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences, boolean deleteBlankLines) {\n+                            LayoutFormatterPreferences layoutPreferences, SavePreferences savePreferences,\n+                            BlankLineBehaviour blankLineBehaviour) {\n         super(consoleName, displayName, extension);\n         if (Objects.requireNonNull(lfFileName).endsWith(LAYOUT_EXTENSION)) {\n             this.lfFileName = lfFileName.substring(0, lfFileName.length() - LAYOUT_EXTENSION.length());\n"}}, {"oid": "92e45019a6ee094778e716c6b27fad549b8306f8", "url": "https://github.com/JabRef/jabref/commit/92e45019a6ee094778e716c6b27fad549b8306f8", "message": "change deleteBlankLines boolean to use new enum BlankLineBehaviour\nwrap comments correctly", "committedDate": "2020-10-19T14:46:29Z", "type": "commit"}, {"oid": "baf000bf7ba5cc79cc6b9f9f026ad9aec5aa8e9f", "url": "https://github.com/JabRef/jabref/commit/baf000bf7ba5cc79cc6b9f9f026ad9aec5aa8e9f", "message": "Merge branch 'yaml-exporter' of https://github.com/joethei/jabref into yaml-exporter", "committedDate": "2020-10-19T14:48:25Z", "type": "commit"}, {"oid": "12a366a7e5a52bc53b5bb225e098eb7c23886575", "url": "https://github.com/JabRef/jabref/commit/12a366a7e5a52bc53b5bb225e098eb7c23886575", "message": "Update BlankLineBehaviour.java", "committedDate": "2020-10-19T15:15:31Z", "type": "commit"}, {"oid": "0c3636d84113445dc1f09484d1ac8dc1cecf4959", "url": "https://github.com/JabRef/jabref/commit/0c3636d84113445dc1f09484d1ac8dc1cecf4959", "message": "Merge branch 'master' into yaml-exporter", "committedDate": "2020-10-20T16:57:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NjQxNw==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r508846417", "bodyText": "Full JavaDoc \ud83d\ude07\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             this enum represents the behaviour for blank lines in {@link TemplateExporter}\n          \n          \n            \n             * This enum represents the behaviour for blank lines in {@link TemplateExporter}", "author": "koppor", "createdAt": "2020-10-20T21:19:35Z", "path": "src/main/java/org/jabref/logic/exporter/BlankLineBehaviour.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.jabref.logic.exporter;\n+\n+/**\n+ this enum represents the behaviour for blank lines in {@link TemplateExporter}", "originalCommit": "0c3636d84113445dc1f09484d1ac8dc1cecf4959", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1107ed890bb562ca6f5b64f26ae7aecceb6f92d", "chunk": "diff --git a/src/main/java/org/jabref/logic/exporter/BlankLineBehaviour.java b/src/main/java/org/jabref/logic/exporter/BlankLineBehaviour.java\nindex 0e8a5a4c0..96957869a 100644\n--- a/src/main/java/org/jabref/logic/exporter/BlankLineBehaviour.java\n+++ b/src/main/java/org/jabref/logic/exporter/BlankLineBehaviour.java\n\n@@ -1,7 +1,7 @@\n package org.jabref.logic.exporter;\n \n /**\n- this enum represents the behaviour for blank lines in {@link TemplateExporter}\n+ * This enum represents the behaviour for blank lines in {@link TemplateExporter}\n  */\n public enum BlankLineBehaviour {\n     KEEP_BLANKS,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NjY1MA==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r508846650", "bodyText": "Please do not add two empty lines - I wonder why checkstyle did not complain", "author": "koppor", "createdAt": "2020-10-20T21:20:00Z", "path": "src/main/java/org/jabref/logic/exporter/TemplateExporter.java", "diffHunk": "@@ -33,20 +33,14 @@\n  */\n public class TemplateExporter extends Exporter {\n \n+    private static final String BLANK_LINE_PATTERN = \"\\\\r\\\\n|\\\\n\";\n     private static final String LAYOUT_PREFIX = \"/resource/layout/\";\n-\n-    /**\n-     * A regular expression that matches blank lines\n-     *\n-     * ?m activates \"multimode\", which makes ^ match line starts/ends.\n-     * \\\\s simply marks any whitespace character\n-     */\n-    private static final Pattern BLANK_LINE_MATCHER = Pattern.compile(\"(?m)^\\\\s\");\n     private static final String LAYOUT_EXTENSION = \".layout\";\n     private static final String FORMATTERS_EXTENSION = \".formatters\";\n     private static final String BEGIN_INFIX = \".begin\";\n     private static final String END_INFIX = \".end\";\n \n+", "originalCommit": "0c3636d84113445dc1f09484d1ac8dc1cecf4959", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1107ed890bb562ca6f5b64f26ae7aecceb6f92d", "chunk": "diff --git a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\nindex 8825652dc..4e3230e50 100644\n--- a/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n+++ b/src/main/java/org/jabref/logic/exporter/TemplateExporter.java\n\n@@ -40,7 +40,6 @@ public class TemplateExporter extends Exporter {\n     private static final String BEGIN_INFIX = \".begin\";\n     private static final String END_INFIX = \".end\";\n \n-\n     private static final Logger LOGGER = LoggerFactory.getLogger(TemplateExporter.class);\n \n     private final String lfFileName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0ODc2MA==", "url": "https://github.com/JabRef/jabref/pull/7007#discussion_r508848760", "bodyText": "A simple  switch was not possible\n  return switch(value) {\n     case StandardEntryType.Article.getDisplayName() -> \"article\",\n     ...\n     case StandardEntryType.Conference.getDisplayName() -> \"paper-conference\",\n     ...\n     default -> \"no-type\";\n  }", "author": "koppor", "createdAt": "2020-10-20T21:24:18Z", "path": "src/main/java/org/jabref/logic/layout/format/CSLType.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.jabref.logic.layout.format;\n+\n+import java.util.Map;\n+\n+import org.jabref.logic.layout.LayoutFormatter;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+public class CSLType implements LayoutFormatter {\n+\n+    @Override\n+    public String format(String value) {\n+        Map<String, String> map = Map.of(StandardEntryType.Article.getDisplayName(), \"article\",\n+                StandardEntryType.Book.getDisplayName(), \"book\",", "originalCommit": "0c3636d84113445dc1f09484d1ac8dc1cecf4959", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1107ed890bb562ca6f5b64f26ae7aecceb6f92d", "chunk": "diff --git a/src/main/java/org/jabref/logic/layout/format/CSLType.java b/src/main/java/org/jabref/logic/layout/format/CSLType.java\nindex 1507b2bdc..aac863567 100644\n--- a/src/main/java/org/jabref/logic/layout/format/CSLType.java\n+++ b/src/main/java/org/jabref/logic/layout/format/CSLType.java\n\n@@ -1,7 +1,5 @@\n package org.jabref.logic.layout.format;\n \n-import java.util.Map;\n-\n import org.jabref.logic.layout.LayoutFormatter;\n import org.jabref.model.entry.types.StandardEntryType;\n \n"}}, {"oid": "a1107ed890bb562ca6f5b64f26ae7aecceb6f92d", "url": "https://github.com/JabRef/jabref/commit/a1107ed890bb562ca6f5b64f26ae7aecceb6f92d", "message": "small updates", "committedDate": "2020-10-21T08:12:06Z", "type": "commit"}]}