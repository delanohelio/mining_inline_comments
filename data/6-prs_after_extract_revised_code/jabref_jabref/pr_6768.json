{"pr_number": 6768, "pr_title": "Merge identical group color indicators", "pr_createdAt": "2020-08-18T20:02:07Z", "pr_url": "https://github.com/JabRef/jabref/pull/6768", "timeline": [{"oid": "d47c90da4f82ae9e91dfaa0e654b7a8d598c3a02", "url": "https://github.com/JabRef/jabref/commit/d47c90da4f82ae9e91dfaa0e654b7a8d598c3a02", "message": "Merge pull request #1 from JabRef/master\n\nupdata", "committedDate": "2020-05-28T14:06:29Z", "type": "commit"}, {"oid": "2a90c01d2e3e68623fffcbc34b8b46902c9411e4", "url": "https://github.com/JabRef/jabref/commit/2a90c01d2e3e68623fffcbc34b8b46902c9411e4", "message": "Merge pull request #3 from JabRef/master\n\nupdate", "committedDate": "2020-05-31T08:32:02Z", "type": "commit"}, {"oid": "02acf8ed15ac6c285ba7a6403c2bb1e45fd7dc4f", "url": "https://github.com/JabRef/jabref/commit/02acf8ed15ac6c285ba7a6403c2bb1e45fd7dc4f", "message": "Update MainTableColumnFactory.java", "committedDate": "2020-05-31T09:06:53Z", "type": "commit"}, {"oid": "dbee189dfff7917424067d577f5aa6db61f27443", "url": "https://github.com/JabRef/jabref/commit/dbee189dfff7917424067d577f5aa6db61f27443", "message": "Update CHANGELOG.md", "committedDate": "2020-05-31T09:09:48Z", "type": "commit"}, {"oid": "7d1005a802f059d1271993e2237fc1f0314e9c1a", "url": "https://github.com/JabRef/jabref/commit/7d1005a802f059d1271993e2237fc1f0314e9c1a", "message": "Merge branch 'fix-6175' of git://github.com/WangAooa/jabref into WangAooa-fix-6175", "committedDate": "2020-08-18T17:01:18Z", "type": "commit"}, {"oid": "f90531490064281b29921e2df33daffd8b89623f", "url": "https://github.com/JabRef/jabref/commit/f90531490064281b29921e2df33daffd8b89623f", "message": "Finished regarding comments in PR #6491", "committedDate": "2020-08-18T17:28:00Z", "type": "commit"}, {"oid": "59f0ef9fd9ec169c7b700612322d69ca0c49a3cb", "url": "https://github.com/JabRef/jabref/commit/59f0ef9fd9ec169c7b700612322d69ca0c49a3cb", "message": "Refactored for heavy clean up", "committedDate": "2020-08-18T19:51:42Z", "type": "commit"}, {"oid": "ed465ec62ee8efbc7baa2745bf73e64fd318b167", "url": "https://github.com/JabRef/jabref/commit/ed465ec62ee8efbc7baa2745bf73e64fd318b167", "message": "Merge remote-tracking branch 'upstream/master' into WangAooa-fix-6175", "committedDate": "2020-08-18T20:25:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNzI0Mw==", "url": "https://github.com/JabRef/jabref/pull/6768#discussion_r472937243", "bodyText": "I think all the single-line create methods can now be inlined.\nFor the FieldColumn, it might make sense to remove the second argument (as this is also extracted from the columnModel, and thus can be done in the constructor (or maybe move the field parsing to the columnModel and replace the getQualifier by getFields).", "author": "tobiasdiez", "createdAt": "2020-08-19T10:47:47Z", "path": "src/main/java/org/jabref/gui/maintable/columns/MainTableColumnFactory.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.jabref.gui.maintable.columns;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.ReadOnlyObjectWrapper;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Node;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Rectangle;\n+import javafx.scene.text.Text;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.maintable.BibEntryTableViewModel;\n+import org.jabref.gui.maintable.CellFactory;\n+import org.jabref.gui.maintable.ColumnPreferences;\n+import org.jabref.gui.maintable.MainTableColumnModel;\n+import org.jabref.gui.specialfields.SpecialFieldValueViewModel;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.LinkedFile;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.entry.field.FieldFactory;\n+import org.jabref.model.entry.field.SpecialField;\n+import org.jabref.model.groups.AbstractGroup;\n+import org.jabref.model.util.OptionalUtil;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MainTableColumnFactory {\n+\n+    public static final String STYLE_ICON_COLUMN = \"column-icon\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MainTableColumnFactory.class);\n+\n+    private final PreferencesService preferencesService;\n+    private final ColumnPreferences columnPreferences;\n+    private final ExternalFileTypes externalFileTypes;\n+    private final BibDatabaseContext database;\n+    private final CellFactory cellFactory;\n+    private final UndoManager undoManager;\n+    private final DialogService dialogService;\n+\n+    public MainTableColumnFactory(BibDatabaseContext database,\n+                                  PreferencesService preferencesService,\n+                                  ExternalFileTypes externalFileTypes,\n+                                  UndoManager undoManager,\n+                                  DialogService dialogService) {\n+        this.database = Objects.requireNonNull(database);\n+        this.preferencesService = Objects.requireNonNull(preferencesService);\n+        this.columnPreferences = preferencesService.getColumnPreferences();\n+        this.externalFileTypes = Objects.requireNonNull(externalFileTypes);\n+        this.dialogService = dialogService;\n+        this.cellFactory = new CellFactory(externalFileTypes, undoManager);\n+        this.undoManager = undoManager;\n+    }\n+\n+    public List<TableColumn<BibEntryTableViewModel, ?>> createColumns() {\n+        List<TableColumn<BibEntryTableViewModel, ?>> columns = new ArrayList<>();\n+\n+        columnPreferences.getColumns().forEach(column -> {\n+\n+            switch (column.getType()) {\n+                case INDEX:\n+                    columns.add(createIndexColumn(column));\n+                    break;\n+                case GROUPS:\n+                    columns.add(createGroupColumn(column));\n+                    break;\n+                case FILES:\n+                    columns.add(createFilesColumn(column));\n+                    break;\n+                case LINKED_IDENTIFIER:\n+                    columns.add(createIdentifierColumn(column));\n+                    break;\n+                case EXTRAFILE:\n+                    if (!column.getQualifier().isBlank()) {\n+                        columns.add(createExtraFileColumn(column));\n+                    }\n+                    break;\n+                case SPECIALFIELD:\n+                    if (!column.getQualifier().isBlank()) {\n+                        Field field = FieldFactory.parseField(column.getQualifier());\n+                        if (field instanceof SpecialField) {\n+                            columns.add(createSpecialFieldColumn(column));\n+                        } else {\n+                            LOGGER.warn(Localization.lang(\"Special field type %0 is unknown. Using normal column type.\", column.getQualifier()));\n+                            columns.add(createFieldColumn(column));\n+                        }\n+                    }\n+                    break;\n+                default:\n+                case NORMALFIELD:\n+                    if (!column.getQualifier().isBlank()) {\n+                        columns.add(createFieldColumn(column));\n+                    }\n+                    break;\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    static void setExactWidth(TableColumn<?, ?> column, double width) {\n+        column.setMinWidth(width);\n+        column.setPrefWidth(width);\n+        column.setMaxWidth(width);\n+    }\n+\n+    /**\n+     * Creates a column with a continous number\n+     */\n+    private TableColumn<BibEntryTableViewModel, String> createIndexColumn(MainTableColumnModel columnModel) {\n+        TableColumn<BibEntryTableViewModel, String> column = new MainTableColumn<>(columnModel);\n+        Node header = new Text(\"#\");\n+        Tooltip.install(header, new Tooltip(MainTableColumnModel.Type.INDEX.getDisplayName()));\n+        column.setGraphic(header);\n+        column.setStyle(\"-fx-alignment: CENTER-RIGHT;\");\n+        column.setCellValueFactory(cellData -> new ReadOnlyObjectWrapper<>(\n+                String.valueOf(cellData.getTableView().getItems().indexOf(cellData.getValue()) + 1)));\n+        new ValueTableCellFactory<BibEntryTableViewModel, String>()\n+                .withText(text -> text)\n+                .install(column);\n+        column.setSortable(false);\n+        return column;\n+    }\n+\n+    /**\n+     * Creates a column for group color bars.\n+     */\n+    private TableColumn<BibEntryTableViewModel, ?> createGroupColumn(MainTableColumnModel columnModel) {\n+        TableColumn<BibEntryTableViewModel, List<AbstractGroup>> column = new MainTableColumn<>(columnModel);\n+        Node headerGraphic = IconTheme.JabRefIcons.DEFAULT_GROUP_ICON.getGraphicNode();\n+        Tooltip.install(headerGraphic, new Tooltip(Localization.lang(\"Group color\")));\n+        column.setGraphic(headerGraphic);\n+        column.getStyleClass().add(STYLE_ICON_COLUMN);\n+        setExactWidth(column, ColumnPreferences.ICON_COLUMN_WIDTH);\n+        column.setResizable(false);\n+        column.setCellValueFactory(cellData -> cellData.getValue().getMatchedGroups());\n+        new ValueTableCellFactory<BibEntryTableViewModel, List<AbstractGroup>>()\n+                .withGraphic(this::createGroupColorRegion)\n+                .install(column);\n+        column.setStyle(\"-fx-padding: 0 0 0 0;\");\n+        column.setSortable(true);\n+        return column;\n+    }\n+\n+    private Node createGroupColorRegion(BibEntryTableViewModel entry, List<AbstractGroup> matchedGroups) {\n+        List<Color> groupColors = matchedGroups.stream()\n+                                               .flatMap(group -> OptionalUtil.toStream(group.getColor()))\n+                                               .collect(Collectors.toList());\n+\n+        if (!groupColors.isEmpty()) {\n+            HBox container = new HBox();\n+            container.setSpacing(2);\n+            container.setMinWidth(10);\n+            container.setAlignment(Pos.CENTER_LEFT);\n+            container.setPadding(new Insets(0, 2, 0, 2));\n+\n+            groupColors.stream().distinct().forEach(groupColor -> {\n+                Rectangle groupRectangle = new Rectangle();\n+                groupRectangle.getStyleClass().add(\"groupColumnBackground\");\n+                groupRectangle.setWidth(3);\n+                groupRectangle.setHeight(18);\n+                groupRectangle.setFill(groupColor);\n+                groupRectangle.setStrokeWidth(1);\n+                container.getChildren().add(groupRectangle);\n+            });\n+\n+            String matchedGroupsString = matchedGroups.stream()\n+                                                      .distinct()\n+                                                      .map(AbstractGroup::getName)\n+                                                      .collect(Collectors.joining(\", \"));\n+            Tooltip tooltip = new Tooltip(Localization.lang(\"Entry is contained in the following groups:\") + \"\\n\" + matchedGroupsString);\n+            Tooltip.install(container, tooltip);\n+            return container;\n+        }\n+        return new Pane();\n+    }\n+\n+    /**\n+     * Creates a text column to display any standard field.\n+     */\n+    private TableColumn<BibEntryTableViewModel, ?> createFieldColumn(MainTableColumnModel columnModel) {\n+        return new FieldColumn(columnModel, FieldFactory.parseOrFields(columnModel.getQualifier()));", "originalCommit": "ed465ec62ee8efbc7baa2745bf73e64fd318b167", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5MTY3NA==", "url": "https://github.com/JabRef/jabref/pull/6768#discussion_r473091674", "bodyText": "I tried inlining the create* methods, but I realized that this made the constructor very hard to read. I really would prefer to keep the methods, even though they could be removed.\nThe MainTableColumnModel works independently from Field, since it also displays an index column. I moved the FieldFactory.parseOrFields into the FieldColumn-class.", "author": "calixtus", "createdAt": "2020-08-19T14:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNzI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1NTc5Nw==", "url": "https://github.com/JabRef/jabref/pull/6768#discussion_r473155797", "bodyText": "Sounds good to me!", "author": "tobiasdiez", "createdAt": "2020-08-19T16:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNzI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ef3290418a273d31269f73099d5f0da25b55f52a", "chunk": "diff --git a/src/main/java/org/jabref/gui/maintable/columns/MainTableColumnFactory.java b/src/main/java/org/jabref/gui/maintable/MainTableColumnFactory.java\nsimilarity index 93%\nrename from src/main/java/org/jabref/gui/maintable/columns/MainTableColumnFactory.java\nrename to src/main/java/org/jabref/gui/maintable/MainTableColumnFactory.java\nindex ae11f910e..3e69aea9f 100644\n--- a/src/main/java/org/jabref/gui/maintable/columns/MainTableColumnFactory.java\n+++ b/src/main/java/org/jabref/gui/maintable/MainTableColumnFactory.java\n\n@@ -1,4 +1,4 @@\n-package org.jabref.gui.maintable.columns;\n+package org.jabref.gui.maintable;\n \n import java.util.ArrayList;\n import java.util.List;\n"}}, {"oid": "ef3290418a273d31269f73099d5f0da25b55f52a", "url": "https://github.com/JabRef/jabref/commit/ef3290418a273d31269f73099d5f0da25b55f52a", "message": "Refactored for the remarks in PR and a bit more cleanup in MainTable.java", "committedDate": "2020-08-19T14:08:53Z", "type": "commit"}, {"oid": "931a0e8d1959001fdb439778c13b909a72ad1ed7", "url": "https://github.com/JabRef/jabref/commit/931a0e8d1959001fdb439778c13b909a72ad1ed7", "message": "Fixed JavaDoc", "committedDate": "2020-08-19T16:28:37Z", "type": "commit"}]}