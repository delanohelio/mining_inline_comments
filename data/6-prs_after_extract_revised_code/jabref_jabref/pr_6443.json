{"pr_number": 6443, "pr_title": "Implement task progress indicator (and dialog) in the toolbar", "pr_createdAt": "2020-05-07T20:09:32Z", "pr_url": "https://github.com/JabRef/jabref/pull/6443", "timeline": [{"oid": "fdfe0741dc5884a56ab98b1f545b5d37a8f49dfa", "url": "https://github.com/JabRef/jabref/commit/fdfe0741dc5884a56ab98b1f545b5d37a8f49dfa", "message": "First draft of a task progress dialog\n\nImplemented a task progress dialog using a TaskProgressView.\nTasks show up, but without info. Neither the progress nor title and\nmessage are shown.", "committedDate": "2020-05-07T14:38:26Z", "type": "commit"}, {"oid": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5", "url": "https://github.com/JabRef/jabref/commit/6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5", "message": "Added progress indicator in JabRefFrame\n\nThere now i a progress indicator at the rightmost postition of JabRefs\ntoolbar. It shows the average progress of all running background tasks.\nClicking it will show a TaskProgressDialog.\n\nstill looks ugly and the binding to the average progress does not seem\nto be working.", "committedDate": "2020-05-07T20:03:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r421984906", "bodyText": "For the bindings to update, you need to add the list as a dependency (second argument of the createXBinding method). In the case of lists, however, its easier to use EasyBind.combine: https://github.com/TomasMikula/EasyBind#combine-list", "author": "tobiasdiez", "createdAt": "2020-05-08T07:17:42Z", "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -112,4 +118,20 @@ public void setSearchQuery(SearchQuery searchQuery) {\n     public OptionalObjectProperty<Node> focusOwnerProperty() { return focusOwner; }\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n+\n+    public UiThreadObservableList<Task> getBackgroundTasks() {\n+        return backgroundTasks;\n+    }\n+\n+    public void addBackgroundTask(Task backgroundTask) {\n+        this.backgroundTasks.add(backgroundTask);\n+    }\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "originalCommit": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAxNjc2Ng==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422016766", "bodyText": "Aha, that looks useful.\nHowever, I think I am running into some typing issues which I am struggling to resolve.\nWith the library you pointed me to, I wound up with the following:\npublic Binding<Boolean> anyTaskRunningBinding = EasyBind.combine( backgroundTasks, stream -> stream.anyMatch(Task::getProgress) );\nThis gives me an error that it expects a Binding, but gets a MonadicBinding.\nIf I just cast it, I get the following:\nno instance(s) of type variable(s) T exist so that Task conforms to ObservableValue<? extends T>\nI think this is the issue I need to resolve first. As the example in the library works fine, I guess the conversion from MonadicBinding to Binding is then done implicitly, is that correct?\nI struggle solving this because I dont know the type parameter of the tasks I am storing.\nWhen storing, the Task has type V:\nhttps://github.com/btut/jabref/blob/b8834914e5e735abaa7a710216888abe6bf54277/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java#L99-L104\nBut in the list I just use Task:\nhttps://github.com/btut/jabref/blob/b8834914e5e735abaa7a710216888abe6bf54277/src/main/java/org/jabref/gui/StateManager.java#L49\nHow do I need to change the list in order for it to work?", "author": "btut", "createdAt": "2020-05-08T08:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyMTI1Mw==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422021253", "bodyText": "Add the generics to the Task as welll:\n    private final UiThreadObservableList<Task<V>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "author": "Siedlerchr", "createdAt": "2020-05-08T08:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyMjk3Nw==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422022977", "bodyText": "But where would I get the V from in this case?\nCannot resolve symbol 'V'", "author": "btut", "createdAt": "2020-05-08T08:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAzNjE2Mg==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422036162", "bodyText": "I changed it to Task<?> now and now the progress, title and message properties make their way through to the dialogue.\nI still cannot create the bindings for the progress indicator though.", "author": "btut", "createdAt": "2020-05-08T09:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAzNzY3Mw==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422037673", "bodyText": "That change also allows me to use EasyBind's listBind to bind the task list in the view to the task list in StateManager.", "author": "btut", "createdAt": "2020-05-08T09:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0MDgyNQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422040825", "bodyText": "Here is the first peak at a download in the dialogue (which will probably be changed to a popover later). As you can see, the download task has it's title and message set and progress is updated fine. However, there are still a lot of tasks that do not have any details.", "author": "btut", "createdAt": "2020-05-08T09:22:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MTYwMg==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422061602", "bodyText": "Looks good already!\nThere are a lot of tasks which don't concern file downloads and just perform some operations in the background. If you search for all references from backgrond task you probably have to adjust each one to add a meaningful description", "author": "Siedlerchr", "createdAt": "2020-05-08T10:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4ODIxOQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422088219", "bodyText": "I think that should be doable. But before I do that: is it a good idea to have all background tasks listed? Or should we just show downloads? If we go with the first option, I suggest turning off the retain-tasks feature of the task view. Then, all completed tasks will automatically disappear. This way we have less tasks that only ran for a very little time filling up the view.\nI got the bindings to work by storing a list of Property<Task> Instead of Task. That does the trick for the progress indicator. It now is indeterminate when one of the tasks has an indeterminate progress and shows the average progress otherwise (100% if no tasks are running).\nFor some reason, this breaks the task view. Since I now store a list of properties, and not a list of tasks, I cannot bind them directly to the view, so I went back to doing it manually, but that does not seem to work.\nhttps://github.com/btut/jabref/blob/38dd89dce28b72d195de18b848b011532ef1f868/src/main/java/org/jabref/gui/taskprogressmanager/TaskProgressDialog.java#L34-L47", "author": "btut", "createdAt": "2020-05-08T11:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NTE2OQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422095169", "bodyText": "Now I just converted the list of properties back into a list of tasks using EasyBind and the bind that list to the list of tasks in the view (again using EasyBind). Now both the indicator and the dialogue work fine and are updated with the running tasks!", "author": "btut", "createdAt": "2020-05-08T11:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "255a6e491c7ad7da26c5fa761395e9f448aa671b", "chunk": "diff --git a/src/main/java/org/jabref/gui/StateManager.java b/src/main/java/org/jabref/gui/StateManager.java\nindex 68dcb740cf..b8e437e154 100644\n--- a/src/main/java/org/jabref/gui/StateManager.java\n+++ b/src/main/java/org/jabref/gui/StateManager.java\n\n@@ -119,19 +121,21 @@ public class StateManager {\n \n     public Optional<Node> getFocusOwner() { return focusOwner.get(); }\n \n-    public UiThreadObservableList<Task> getBackgroundTasks() {\n+    public UiThreadObservableList<Task<?>> getBackgroundTasks() {\n         return backgroundTasks;\n     }\n \n-    public void addBackgroundTask(Task backgroundTask) {\n+    public void addBackgroundTask(Task<?> backgroundTask) {\n         this.backgroundTasks.add(backgroundTask);\n     }\n-\n-    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(\n-            () -> backgroundTasks.stream().anyMatch(Task::isRunning)\n+/*\n+    public Binding<Boolean> anyTaskRunningBinding = EasyBind.combine(\n+            backgroundTasks,\n+            stream -> stream.anyMatch(Task::getProgress)\n     );\n \n-    public DoubleBinding tasksProgressBinding = Bindings.createDoubleBinding(\n-            () -> backgroundTasks.stream().filter(Task::isRunning).mapToDouble(Task::getProgress).average().orElse(1)\n-    );\n+    public Binding<Double> tasksProgressBinding = (Binding<Double>) EasyBind.combine(\n+            backgroundTasks,\n+            stream -> stream.filter(Task::isRunning).mapToDouble(Task::getProgress)\n+                    .average().orElse(1));*/\n }\n"}}, {"oid": "b8834914e5e735abaa7a710216888abe6bf54277", "url": "https://github.com/JabRef/jabref/commit/b8834914e5e735abaa7a710216888abe6bf54277", "message": "Beautified progressindicator and added localization", "committedDate": "2020-05-08T07:17:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NjgwOA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r421986808", "bodyText": "Instead of using a real dialog, what about using a collapse overlay similar to how it's done in firefox?\nhttps://github.com/controlsfx/controlsfx/wiki/ControlsFX-Features#popover", "author": "tobiasdiez", "createdAt": "2020-05-08T07:22:00Z", "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -921,6 +930,24 @@ private MenuBar createMenu() {\n         return menu;\n     }\n \n+    private ProgressIndicator createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator(1);\n+        indicator.progressProperty().bind(stateManager.tasksProgressBinding);\n+\n+        indicator.setOnMouseClicked(new EventHandler<MouseEvent>() {\n+            @Override\n+            public void handle(MouseEvent event) {\n+                TaskProgressDialog taskProgressDialog = new TaskProgressDialog();", "originalCommit": "6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAxNjk2MA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422016960", "bodyText": "Uh fancy! I'll look into it!", "author": "btut", "createdAt": "2020-05-08T08:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNjEyMw==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422136123", "bodyText": "That looks much better! Great idea!", "author": "btut", "createdAt": "2020-05-08T13:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NjgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "255a6e491c7ad7da26c5fa761395e9f448aa671b", "chunk": "diff --git a/src/main/java/org/jabref/gui/JabRefFrame.java b/src/main/java/org/jabref/gui/JabRefFrame.java\nindex daabfe6abf..fd57232bb0 100644\n--- a/src/main/java/org/jabref/gui/JabRefFrame.java\n+++ b/src/main/java/org/jabref/gui/JabRefFrame.java\n\n@@ -930,22 +932,30 @@ public class JabRefFrame extends BorderPane {\n         return menu;\n     }\n \n-    private ProgressIndicator createTaskIndicator() {\n-        ProgressIndicator indicator = new ProgressIndicator(1);\n-        indicator.progressProperty().bind(stateManager.tasksProgressBinding);\n+    private Group createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator();\n+        indicator.getStyleClass().setAll(\"progress-indicator\");\n+        //indicator.progressProperty().bind(stateManager.tasksProgressBinding);\n \n-        indicator.setOnMouseClicked(new EventHandler<MouseEvent>() {\n-            @Override\n-            public void handle(MouseEvent event) {\n-                TaskProgressDialog taskProgressDialog = new TaskProgressDialog();\n-                // @TODO add localization\n-                taskProgressDialog.setTitle(\"Task progress\");\n-                Window dialogWindow = taskProgressDialog.getDialogPane().getScene().getWindow();\n-                dialogWindow.setOnCloseRequest(windowEvent -> dialogWindow.hide());\n-                taskProgressDialog.showAndWait();\n+        /*\n+        The label of the indicator cannot be removed with styling. Therefore,\n+        hide it and clip it to a square of (width x width) each time width is updated.\n+         */\n+        indicator.widthProperty().addListener((observable, oldValue, newValue) -> {\n+            if(newValue.doubleValue()>0){\n+                Rectangle clip=new Rectangle(newValue.doubleValue(),newValue.doubleValue());\n+                indicator.setClip(clip);\n             }\n         });\n-        return indicator;\n+\n+        indicator.setOnMouseClicked(event -> {\n+            TaskProgressDialog taskProgressDialog = new TaskProgressDialog();\n+            taskProgressDialog.setTitle(Localization.lang(\"Background Tasks\"));\n+            Window dialogWindow = taskProgressDialog.getDialogPane().getScene().getWindow();\n+            dialogWindow.setOnCloseRequest(windowEvent -> dialogWindow.hide());\n+            taskProgressDialog.showAndWait();\n+        });\n+        return new Group(indicator);\n     }\n \n     public void addParserResult(ParserResult parserResult, boolean focusPanel) {\n"}}, {"oid": "255a6e491c7ad7da26c5fa761395e9f448aa671b", "url": "https://github.com/JabRef/jabref/commit/255a6e491c7ad7da26c5fa761395e9f448aa671b", "message": "Changed to Task<?> in the Tasklist.\n\nThis makes the view work with download tasks for example. Most other\ntasks are still shown without title, message (because none are set) and\nprogress.\nAlso, there are a lot of tasks somehow.\n\nThe progress indicator in the main view still does not work as I can't\nget the bindings to work.", "committedDate": "2020-05-08T09:17:37Z", "type": "commit"}, {"oid": "38dd89dce28b72d195de18b848b011532ef1f868", "url": "https://github.com/JabRef/jabref/commit/38dd89dce28b72d195de18b848b011532ef1f868", "message": "Resolved typing issues for bindings\n\nThe progress indicator is now successfully bound to the list of tasks.\nHowever, tasks do not show up in the dialogue any more.", "committedDate": "2020-05-08T11:14:42Z", "type": "commit"}, {"oid": "1b2aaa6cbe51571c83bc5b65e5a9c99047b03ba5", "url": "https://github.com/JabRef/jabref/commit/1b2aaa6cbe51571c83bc5b65e5a9c99047b03ba5", "message": "Converted list of Properties to tasks for listbind\n\nWhen using ObjectProperties in the list of tasks, we can use EasyBind to\nconvert the list into a list of tasks which in turn can be bound to the\nlist of tasks in the view.\n\nWith this, the basic functionality works. There is a progress indicator\nin the toolbar that shows the average progress of all running background\ntasks. It is indeterminate if any task has indeterminate progress and\nshows 100% if no tasks are running.\n\nClicking it opens an overview of all running tasks and their progress.\n\nCurrently, there are many tasks running all the time. The only tasks\nthat were adapted for this to be pretty are the download tasks, and they\nare also still missing an icon.", "committedDate": "2020-05-08T11:33:42Z", "type": "commit"}, {"oid": "baf9bd0e7d55de96a74d1dbc12df604a4ef5c997", "url": "https://github.com/JabRef/jabref/commit/baf9bd0e7d55de96a74d1dbc12df604a4ef5c997", "message": "New Tasks are first in the list", "committedDate": "2020-05-08T11:45:47Z", "type": "commit"}, {"oid": "40a8febeeff1e5f8aa760144ac7ec514dabe16f2", "url": "https://github.com/JabRef/jabref/commit/40a8febeeff1e5f8aa760144ac7ec514dabe16f2", "message": "Use a PopOver instead of a dialog", "committedDate": "2020-05-08T13:15:07Z", "type": "commit"}, {"oid": "cac989b24af0df0e18f35063d9866a94fbe47623", "url": "https://github.com/JabRef/jabref/commit/cac989b24af0df0e18f35063d9866a94fbe47623", "message": "Only show download tasks", "committedDate": "2020-05-08T14:08:14Z", "type": "commit"}, {"oid": "8f525b8a2956070f1cb92ed2848df6ea776db342", "url": "https://github.com/JabRef/jabref/commit/8f525b8a2956070f1cb92ed2848df6ea776db342", "message": "Better messages for download tasks\n\nThese are shorter and therefore the task progress view does not need a\nhorizontal scroll bar.", "committedDate": "2020-05-08T14:13:04Z", "type": "commit"}, {"oid": "c877431d429a2436316912568ef154e10dad65cb", "url": "https://github.com/JabRef/jabref/commit/c877431d429a2436316912568ef154e10dad65cb", "message": "Type Witnesses are not needed any more.", "committedDate": "2020-05-08T14:36:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422519262", "bodyText": "What's the reason to wrap the tasks around in a ObjectProperty? It should also work without this wrapper. If there were problems with the updates, you might need to add an \"extractor\" to the observableArrayList which specifies that the list should update if the underlying data changes (in this case probably the progress of the task).", "author": "tobiasdiez", "createdAt": "2020-05-09T16:52:27Z", "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +48,7 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());", "originalCommit": "8f525b8a2956070f1cb92ed2848df6ea776db342", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyMjU4NA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422522584", "bodyText": "I'm confused. I though EasyBind's combineList takes care of updating the observable when the progress updates? From the doc:\n\nTurns an observable list of observable values into a single observable value. The resulting observable value is updated when elements are added or removed to or from the list, as well as when element values change.\n\nI had to turn it into a list of ObjectProperty because that's what EasyBind's combineList expects, but I guess it then only registers changes of the ObjectProperty, not the task.\nSo to update upon progress changes, I need to tell the list that I am interested in the progress by defining an extractor. I found some code online working with extractors, so I think I should be able to implement that.", "author": "btut", "createdAt": "2020-05-09T17:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNDI3MQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422524271", "bodyText": "Yes, combineList takes updates into account but for this the elements have to observable themselves. For example, if ObservableList<ObservableDoubleValue> is a list containing the progress property of each task.", "author": "tobiasdiez", "createdAt": "2020-05-09T17:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNDcxMA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422524710", "bodyText": "Thanks for the hints. This works!", "author": "btut", "createdAt": "2020-05-09T17:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyOTIwMQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422529201", "bodyText": "About the ObjectProperty wrapping issue. I tried changing it back just to see what happens, and I still get the same error for the bindings:\n\nno instance(s) of type variable(s) T exist so that Task<?> conforms to ObservableValue<? extends T>\n\nI think that the combine method only works on lists of observables.\nIf I create the binding with Bindings.createDoubleBinding, it does not update.", "author": "btut", "createdAt": "2020-05-09T18:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUzMTQ0NA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422531444", "bodyText": "So\npublic Binding<Double> tasksProgressBinding = Bindings.createDoubleBinding(\n            backgroundTasks.filter(Task::isRunning).mapToDouble(Task::getProgress).average().orElse(1), backgroundTasks);`\ndoesn't work?", "author": "tobiasdiez", "createdAt": "2020-05-09T18:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUzNDA5MQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422534091", "bodyText": "Actually, it does (except for some minor mistakes in your code).\nI did not put the list name (backgroundTasks) as a second argument. Does that mean that the binding would have worked ONLY on the extractor? So adding and removing does not update the value, but a change in the progress would have? Or why else do we need to pass the list as a second argument?", "author": "btut", "createdAt": "2020-05-09T19:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MjkyMQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422542921", "bodyText": "The second argument specifies the observables that the function (the first argument) depends on. That is, every time these observables change, the function is called and the binding is updated with the new value. If you don't specify any observables in the second argument, then the binding is never updated.", "author": "tobiasdiez", "createdAt": "2020-05-09T20:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MzEyNg==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422543126", "bodyText": "Oh that makes sense! Thanks for explaining!", "author": "btut", "createdAt": "2020-05-09T20:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxOTI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1ad95986b8e081369939e920e1a219eb1d76627b", "chunk": "diff --git a/src/main/java/org/jabref/gui/StateManager.java b/src/main/java/org/jabref/gui/StateManager.java\nindex 3737e0f56b..8f68065a18 100644\n--- a/src/main/java/org/jabref/gui/StateManager.java\n+++ b/src/main/java/org/jabref/gui/StateManager.java\n\n@@ -48,7 +46,9 @@ public class StateManager {\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n-    private final UiThreadObservableList<ObjectProperty<Task<?>>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());\n+    private final ObservableList<ObjectProperty<Task<?>>> backgroundTasks = FXCollections.observableArrayList(taskProperty -> {\n+        return new Observable[] { taskProperty.get().progressProperty()};\n+    });\n \n     public StateManager() {\n         activeGroups.bind(Bindings.valueAt(selectedGroups, activeDatabase.orElse(null)));\n"}}, {"oid": "1ad95986b8e081369939e920e1a219eb1d76627b", "url": "https://github.com/JabRef/jabref/commit/1ad95986b8e081369939e920e1a219eb1d76627b", "message": "Added extractor to task list", "committedDate": "2020-05-09T17:42:16Z", "type": "commit"}, {"oid": "cd4e38e8b41e90960cac721da22a18b4ce942c3a", "url": "https://github.com/JabRef/jabref/commit/cd4e38e8b41e90960cac721da22a18b4ce942c3a", "message": "Made anyTaskRunningBinding public\n\nFor consistency with other variables", "committedDate": "2020-05-09T18:10:20Z", "type": "commit"}, {"oid": "23f8cf053f8203a9785b8beecde015d51c6b98aa", "url": "https://github.com/JabRef/jabref/commit/23f8cf053f8203a9785b8beecde015d51c6b98aa", "message": "Removed ObjectProperty wrapping", "committedDate": "2020-05-09T19:06:16Z", "type": "commit"}, {"oid": "4628c3dcb0b234025046ecfad6acd3d4aceddd2b", "url": "https://github.com/JabRef/jabref/commit/4628c3dcb0b234025046ecfad6acd3d4aceddd2b", "message": "NOT WORKING: quit dialogue", "committedDate": "2020-05-09T19:10:33Z", "type": "commit"}, {"oid": "90ff19e47b4a7182e7a159471f097d4fc19d0350", "url": "https://github.com/JabRef/jabref/commit/90ff19e47b4a7182e7a159471f097d4fc19d0350", "message": "Cleanup", "committedDate": "2020-05-09T19:11:57Z", "type": "commit"}, {"oid": "62d7c142724573bdc5e65b1187c72f37ee401d7d", "url": "https://github.com/JabRef/jabref/commit/62d7c142724573bdc5e65b1187c72f37ee401d7d", "message": "Fix in dialog service\n\nMake showProgressDialogAndWait actually not only show but also wait.", "committedDate": "2020-05-09T19:16:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTAxOQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422551019", "bodyText": "Just a wild guess, could it be that actually all tasks are finished, because the TaskExectutor is already shutdown?", "author": "tobiasdiez", "createdAt": "2020-05-09T21:55:54Z", "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.gui;\n+\n+import javafx.concurrent.Task;\n+import org.jabref.logic.l10n.Localization;\n+\n+import java.util.List;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public void showAndWait(StateManager stateManager) {\n+        if (stateManager.anyTaskRunningBinding.getValue()) {\n+            Task<Void> waitForBackgroundtasksFinished = new Task<Void>() {\n+                @Override\n+                protected Void call() throws Exception {\n+                    System.out.println(\"THREAD STARTED\");\n+                    while (stateManager.anyTaskRunningBinding.getValue()) {", "originalCommit": "62d7c142724573bdc5e65b1187c72f37ee401d7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTgzNA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422551834", "bodyText": "I added some logs in JabRefMain's stop method, it is run after the dialogue is already gone.", "author": "btut", "createdAt": "2020-05-09T22:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9f4493ac5ff446be297570667ed88f18b0562b0", "chunk": "diff --git a/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java b/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java\nindex ccb0d40f6a..77524f2cb8 100644\n--- a/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java\n+++ b/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java\n\n@@ -1,9 +1,13 @@\n package org.jabref.gui;\n \n-import javafx.concurrent.Task;\n+import javafx.scene.control.*;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+import org.controlsfx.control.TaskProgressView;\n+import org.fxmisc.easybind.EasyBind;\n import org.jabref.logic.l10n.Localization;\n \n-import java.util.List;\n+import java.util.Optional;\n \n /**\n  * Dialog shown when closing of application needs to wait for some background tasks.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTA4OQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422551089", "bodyText": "Add a log statement here as well to make sure that the progress dialog does indeed wait?", "author": "tobiasdiez", "createdAt": "2020-05-09T21:56:40Z", "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.gui;\n+\n+import javafx.concurrent.Task;\n+import org.jabref.logic.l10n.Localization;\n+\n+import java.util.List;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public void showAndWait(StateManager stateManager) {\n+        if (stateManager.anyTaskRunningBinding.getValue()) {\n+            Task<Void> waitForBackgroundtasksFinished = new Task<Void>() {\n+                @Override\n+                protected Void call() throws Exception {\n+                    System.out.println(\"THREAD STARTED\");\n+                    while (stateManager.anyTaskRunningBinding.getValue()) {\n+                        System.out.println(\"updated value to \" + stateManager.tasksProgressBinding.getValue());\n+                        updateProgress(stateManager.tasksProgressBinding.getValue(), 1);\n+                        if (isCancelled()) {\n+                            return null;\n+                        } else {\n+                            Thread.sleep(100);\n+                        }\n+                    }\n+                    return null;\n+                }\n+            };\n+\n+            Thread th = new Thread(waitForBackgroundtasksFinished);\n+            th.setDaemon(true);\n+            th.start();\n+\n+            dialogService.showProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish\") + \"...\",\n+                    waitForBackgroundtasksFinished\n+            );", "originalCommit": "62d7c142724573bdc5e65b1187c72f37ee401d7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MjAwOA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422552008", "bodyText": "I currently have a log message after the loop to see whether the isCancelled property or my tasks-running property caused the stop. I now also put a log message where you suggested, just after the wait. They are exectued in the correct order. So yes, the wait does work, but the task exits too early.", "author": "btut", "createdAt": "2020-05-09T22:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MjY0Mw==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422552643", "bodyText": "I now also get a warning about the binding:\n\nMay 10, 2020 12:02:50 AM javafx.beans.binding.Bindings$1 computeValue\nWARNING: Exception while evaluating binding\njava.lang.IllegalStateException: Task must only be used from the FX Application Thread\nat javafx.graphics/javafx.concurrent.Task.checkThread(Task.java:1220)\nat javafx.graphics/javafx.concurrent.Task.isRunning(Task.java:987)\nat java.base/java.util.stream.MatchOps$1MatchSink.accept(MatchOps.java:90)\nat java.base/java.util.AbstractList$RandomAccessSpliterator.tryAdvance(AbstractList.java:706)\nat java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:127)\nat java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:502)\nat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:488)\nat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\nat java.base/java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230)\nat java.base/java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196)\nat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\nat java.base/java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:528)\nat org.jabref/org.jabref.gui.StateManager.lambda$new$1(StateManager.java:132)\nat javafx.base/javafx.beans.binding.Bindings$1.computeValue(Bindings.java:157)\nat javafx.base/javafx.beans.binding.BooleanBinding.get(BooleanBinding.java:155)\nat org.jabref/org.jabref.gui.WaitForBackgroundtasksFinishedDialog$1.call(WaitForBackgroundtasksFinishedDialog.java:28)\nat org.jabref/org.jabref.gui.WaitForBackgroundtasksFinishedDialog$1.call(WaitForBackgroundtasksFinishedDialog.java:24)\nat javafx.graphics/javafx.concurrent.Task$TaskCallable.call(Task.java:1425)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat java.base/java.lang.Thread.run(Thread.java:832)\n\nI tried to run the task on the Javafx thread by using:\nDefaultTaskExecutor.runInJavaFXThread(waitForBackgroundtasksFinished);\nThe loop is then run more often (I guess until the download is finished), but the gui is frozen because of the task.", "author": "btut", "createdAt": "2020-05-09T22:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMjIxOQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422632219", "bodyText": "The problem was that the extractor I added to the task list in StateManager did not include the isRunning property. It still did not run perfectly and was not pretty, therefore I moved to a custom dialog which works fine.", "author": "btut", "createdAt": "2020-05-10T11:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9f4493ac5ff446be297570667ed88f18b0562b0", "chunk": "diff --git a/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java b/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java\nindex ccb0d40f6a..77524f2cb8 100644\n--- a/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java\n+++ b/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java\n\n@@ -1,9 +1,13 @@\n package org.jabref.gui;\n \n-import javafx.concurrent.Task;\n+import javafx.scene.control.*;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+import org.controlsfx.control.TaskProgressView;\n+import org.fxmisc.easybind.EasyBind;\n import org.jabref.logic.l10n.Localization;\n \n-import java.util.List;\n+import java.util.Optional;\n \n /**\n  * Dialog shown when closing of application needs to wait for some background tasks.\n"}}, {"oid": "008d55e652d04a4d73b40df19098d66abfebd4b5", "url": "https://github.com/JabRef/jabref/commit/008d55e652d04a4d73b40df19098d66abfebd4b5", "message": "Add extractor for isRunning", "committedDate": "2020-05-10T11:08:52Z", "type": "commit"}, {"oid": "a9f4493ac5ff446be297570667ed88f18b0562b0", "url": "https://github.com/JabRef/jabref/commit/a9f4493ac5ff446be297570667ed88f18b0562b0", "message": "More informative (and working) quit dialog\n\nThe dialog that is shown when the user quits JabRef during ongoing\nbackground tasks now shows which background tasks are still running.\n\nWhen all of them complete or the user chooses to quit anyway, JabRef\nquits.\n\nThe user can also cancel the dialog. In that case, the dialog closes and\nJobRef remains running.", "committedDate": "2020-05-10T11:31:36Z", "type": "commit"}, {"oid": "66ac31675dc099ba793ec7450f7d6dc85b25068d", "url": "https://github.com/JabRef/jabref/commit/66ac31675dc099ba793ec7450f7d6dc85b25068d", "message": "Added graphics callback", "committedDate": "2020-05-10T12:08:06Z", "type": "commit"}, {"oid": "e9a717693827c6ceb8c9d2ad9f30cfdf8d107c44", "url": "https://github.com/JabRef/jabref/commit/e9a717693827c6ceb8c9d2ad9f30cfdf8d107c44", "message": "Fixed some style issues\n\nThere are still some ImportOrder errors though where I can see no issue.", "committedDate": "2020-05-10T13:44:52Z", "type": "commit"}, {"oid": "d7442cc2247772b6e54bcb68cea947a5a2a604bc", "url": "https://github.com/JabRef/jabref/commit/d7442cc2247772b6e54bcb68cea947a5a2a604bc", "message": "Registered the save task as background task\n\nThis makes the dialog that pops up if background tasks are running wait\nfor pending saves.", "committedDate": "2020-05-10T14:10:04Z", "type": "commit"}, {"oid": "5defe3e467f83c2ce86407fd998c093f78a7a519", "url": "https://github.com/JabRef/jabref/commit/5defe3e467f83c2ce86407fd998c093f78a7a519", "message": "Revert \"Registered the save task as background task\"\n\nThis reverts commit d7442cc2247772b6e54bcb68cea947a5a2a604bc.", "committedDate": "2020-05-10T14:42:18Z", "type": "commit"}, {"oid": "fba9c70bec3813d8684e79ae21c29b770625a734", "url": "https://github.com/JabRef/jabref/commit/fba9c70bec3813d8684e79ae21c29b770625a734", "message": "Added note on dialog-order upon close", "committedDate": "2020-05-10T14:46:30Z", "type": "commit"}, {"oid": "6a62e6fea391b2845943b976152c634f3cbc5750", "url": "https://github.com/JabRef/jabref/commit/6a62e6fea391b2845943b976152c634f3cbc5750", "message": "Updated changelog", "committedDate": "2020-05-10T14:55:17Z", "type": "commit"}, {"oid": "a97af13c93b3cd32fef6242af5622332765a8727", "url": "https://github.com/JabRef/jabref/commit/a97af13c93b3cd32fef6242af5622332765a8727", "message": "Fixed style", "committedDate": "2020-05-10T15:54:13Z", "type": "commit"}, {"oid": "3ee457171da21a039a29756f37f66c480a132f3c", "url": "https://github.com/JabRef/jabref/commit/3ee457171da21a039a29756f37f66c480a132f3c", "message": "Merge branch 'master' of https://github.com/JabRef/jabref into feature/backgroundProgress", "committedDate": "2020-05-10T15:55:59Z", "type": "commit"}, {"oid": "44d9ca8f0fe2c322d30352a98676851b83649857", "url": "https://github.com/JabRef/jabref/commit/44d9ca8f0fe2c322d30352a98676851b83649857", "message": "Quickfix for resizing indicator when indeterminate\n\nSet the pref-width when the indicator is determinate to keep the\nindeterminate state from making the indicator wider.", "committedDate": "2020-05-11T07:48:06Z", "type": "commit"}, {"oid": "bd2eefd21e6e83b168d324635179b2cca4f18405", "url": "https://github.com/JabRef/jabref/commit/bd2eefd21e6e83b168d324635179b2cca4f18405", "message": "Styled dialog waiting for background tasks", "committedDate": "2020-05-11T07:56:53Z", "type": "commit"}, {"oid": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f", "url": "https://github.com/JabRef/jabref/commit/41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f", "message": "Minor style fix", "committedDate": "2020-05-11T08:37:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MzM1Ng==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422973356", "bodyText": "Also add Background Tasks as tooltip (if supported)?", "author": "tobiasdiez", "createdAt": "2020-05-11T11:28:41Z", "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -921,6 +940,45 @@ private MenuBar createMenu() {\n         return menu;\n     }\n \n+    private Group createTaskIndicator() {\n+        ProgressIndicator indicator = new ProgressIndicator();\n+        indicator.getStyleClass().setAll(\"progress-indicator\");\n+        indicator.progressProperty().bind(stateManager.tasksProgressBinding);", "originalCommit": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4Nzc5OA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422987798", "bodyText": "I actually wanted to do that already, but forgot.", "author": "btut", "createdAt": "2020-05-11T11:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MzM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2MzkzOQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423063939", "bodyText": "cf10859", "author": "btut", "createdAt": "2020-05-11T14:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MzM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d56138bbb629dcd5ffdad9d29d9c7b87d80ba7c2", "chunk": "diff --git a/src/main/java/org/jabref/gui/JabRefFrame.java b/src/main/java/org/jabref/gui/JabRefFrame.java\nindex 339168eb2b..58d061bb9f 100644\n--- a/src/main/java/org/jabref/gui/JabRefFrame.java\n+++ b/src/main/java/org/jabref/gui/JabRefFrame.java\n\n@@ -943,7 +946,7 @@ public class JabRefFrame extends BorderPane {\n     private Group createTaskIndicator() {\n         ProgressIndicator indicator = new ProgressIndicator();\n         indicator.getStyleClass().setAll(\"progress-indicator\");\n-        indicator.progressProperty().bind(stateManager.tasksProgressBinding);\n+        indicator.progressProperty().bind(stateManager.getTasksProgress());\n \n         /*\n         The label of the indicator cannot be removed with styling. Therefore,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTEwNA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422975104", "bodyText": "Please make this fields private and add a public getter method (otherwise code from the outside can change these bindings, which is not what we want). (Maybe also remove the suffix \"Binding\" from the name, but that's a matter of taste).", "author": "tobiasdiez", "createdAt": "2020-05-11T11:32:06Z", "path": "src/main/java/org/jabref/gui/StateManager.java", "diffHunk": "@@ -41,6 +45,17 @@\n     private final OptionalObjectProperty<SearchQuery> activeSearchQuery = OptionalObjectProperty.empty();\n     private final ObservableMap<BibDatabaseContext, IntegerProperty> searchResultMap = FXCollections.observableHashMap();\n     private final OptionalObjectProperty<Node> focusOwner = OptionalObjectProperty.empty();\n+    private final ObservableList<Task<?>> backgroundTasks = FXCollections.observableArrayList(taskProperty -> {\n+        return new Observable[] {taskProperty.progressProperty(), taskProperty.runningProperty()};\n+    });\n+\n+    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(", "originalCommit": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NzkwNQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422987905", "bodyText": "Sure thing!", "author": "btut", "createdAt": "2020-05-11T11:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2NDMzMw==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423064333", "bodyText": "d56138b", "author": "btut", "createdAt": "2020-05-11T14:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "d56138bbb629dcd5ffdad9d29d9c7b87d80ba7c2", "chunk": "diff --git a/src/main/java/org/jabref/gui/StateManager.java b/src/main/java/org/jabref/gui/StateManager.java\nindex b1df37d52b..235a49ec4d 100644\n--- a/src/main/java/org/jabref/gui/StateManager.java\n+++ b/src/main/java/org/jabref/gui/StateManager.java\n\n@@ -49,11 +49,11 @@ public class StateManager {\n         return new Observable[] {taskProperty.progressProperty(), taskProperty.runningProperty()};\n     });\n \n-    public BooleanBinding anyTaskRunningBinding = Bindings.createBooleanBinding(\n+    private BooleanBinding anyTaskRunning = Bindings.createBooleanBinding(\n             () -> backgroundTasks.stream().anyMatch(Task::isRunning), backgroundTasks\n     );\n \n-    public DoubleBinding tasksProgressBinding = Bindings.createDoubleBinding(\n+    private DoubleBinding tasksProgress = Bindings.createDoubleBinding(\n             () -> backgroundTasks.stream().filter(Task::isRunning).mapToDouble(Task::getProgress).average().orElse(1), backgroundTasks\n     );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NzMzNg==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422977336", "bodyText": "https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/DialogService.java#L179 (or the other overload) cannot be used here? I think it would be slightly cleaner to make WaitForBackgroundtasksFinishedDialog a \"real\" dialog (i.e. inherit from Dialog) or even convert it to a proper fxml-based dialog similar to most dialogs.", "author": "tobiasdiez", "createdAt": "2020-05-11T11:36:43Z", "path": "src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.jabref.gui;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.DialogPane;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.ThemeLoader;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+import org.controlsfx.control.TaskProgressView;\n+import org.fxmisc.easybind.EasyBind;\n+\n+/**\n+ * Dialog shown when closing of application needs to wait for some background tasks.\n+ */\n+public class WaitForBackgroundtasksFinishedDialog {\n+\n+    private final DialogService dialogService;\n+\n+    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n+        this.dialogService = dialogService;\n+    }\n+\n+    public boolean showAndWait(StateManager stateManager, ThemeLoader themeLoader, JabRefPreferences preferences) {\n+        TaskProgressView taskProgressView = new TaskProgressView();\n+        EasyBind.listBind(taskProgressView.getTasks(), stateManager.getBackgroundTasks());\n+        taskProgressView.setRetainTasks(false);\n+        taskProgressView.setGraphicFactory(BackgroundTask.iconCallback);\n+\n+        Label message = new Label(Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"));\n+\n+        VBox box = new VBox(taskProgressView, message);\n+\n+        DialogPane contentPane = new DialogPane();\n+        contentPane.setContent(box);\n+\n+        FXDialog alert = new FXDialog(Alert.AlertType.NONE, Localization.lang(\"Please wait...\"));", "originalCommit": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MTE4MA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422991180", "bodyText": "I did use the custom dialogue at the beginning, but it gives no access to the actual javafx dialogue, meaning I cannot hide it on an event. The thing with the JabRef dialogues created by the show*AndWait is that they create the actual javafx dialogue in the method, so they can't be accessed later. I just found the createDialog method which would probably be the best to use here. It creates the dialog and takes care of some styling and such, and then returns the actual dialog which can then be shown and waited for. I'll do that!", "author": "btut", "createdAt": "2020-05-11T12:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NzMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2NTI1NA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423065254", "bodyText": "Is this ok? I tried to follow how showProgressDialogAndWait is implemented.\nff9ce00", "author": "btut", "createdAt": "2020-05-11T14:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NzMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "ff9ce0068d6b80e131826a9138aab3b1f981b00e", "chunk": "diff --git a/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java b/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java\ndeleted file mode 100644\nindex 06360803ee..0000000000\n--- a/src/main/java/org/jabref/gui/WaitForBackgroundtasksFinishedDialog.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package org.jabref.gui;\n-\n-import java.util.Optional;\n-\n-import javafx.scene.control.Alert;\n-import javafx.scene.control.ButtonType;\n-import javafx.scene.control.DialogPane;\n-import javafx.scene.control.Label;\n-import javafx.scene.layout.Region;\n-import javafx.scene.layout.VBox;\n-\n-import org.jabref.gui.util.BackgroundTask;\n-import org.jabref.gui.util.ThemeLoader;\n-import org.jabref.logic.l10n.Localization;\n-import org.jabref.preferences.JabRefPreferences;\n-\n-import org.controlsfx.control.TaskProgressView;\n-import org.fxmisc.easybind.EasyBind;\n-\n-/**\n- * Dialog shown when closing of application needs to wait for some background tasks.\n- */\n-public class WaitForBackgroundtasksFinishedDialog {\n-\n-    private final DialogService dialogService;\n-\n-    public WaitForBackgroundtasksFinishedDialog(DialogService dialogService) {\n-        this.dialogService = dialogService;\n-    }\n-\n-    public boolean showAndWait(StateManager stateManager, ThemeLoader themeLoader, JabRefPreferences preferences) {\n-        TaskProgressView taskProgressView = new TaskProgressView();\n-        EasyBind.listBind(taskProgressView.getTasks(), stateManager.getBackgroundTasks());\n-        taskProgressView.setRetainTasks(false);\n-        taskProgressView.setGraphicFactory(BackgroundTask.iconCallback);\n-\n-        Label message = new Label(Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"));\n-\n-        VBox box = new VBox(taskProgressView, message);\n-\n-        DialogPane contentPane = new DialogPane();\n-        contentPane.setContent(box);\n-\n-        FXDialog alert = new FXDialog(Alert.AlertType.NONE, Localization.lang(\"Please wait...\"));\n-        alert.setDialogPane(contentPane);\n-        alert.getButtonTypes().setAll(ButtonType.YES, ButtonType.CANCEL);\n-        alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);\n-        alert.setResizable(true);\n-        themeLoader.installCss(alert.getDialogPane().getScene(), preferences);\n-\n-        stateManager.anyTaskRunningBinding.addListener((observable, oldValue, newValue) -> {\n-            if (!newValue) {\n-                alert.setResult(ButtonType.YES);\n-                alert.close();\n-            }\n-        });\n-\n-        Dialog<ButtonType> dialog = () -> alert.showAndWait();\n-\n-        Optional<ButtonType> pressedButton = dialogService.showCustomDialogAndWait(dialog);\n-\n-        return pressedButton.isPresent() && pressedButton.get() == ButtonType.YES;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ2OA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422980468", "bodyText": "Why do you prefer a map here instead of adding a new property icon to the BackgroundTask class (so that downloadTask.setIcon(IconTheme.JabRefIcons.DOWNLOAD) works)?", "author": "tobiasdiez", "createdAt": "2020-05-11T11:42:57Z", "path": "src/main/java/org/jabref/gui/util/BackgroundTask.java", "diffHunk": "@@ -27,14 +33,29 @@\n  * @param <V> type of the return value of the task\n  */\n public abstract class BackgroundTask<V> {\n+\n+    public static ImmutableMap<String, Node> iconMap = ImmutableMap.of(", "originalCommit": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MzAwMA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422993000", "bodyText": "That's because the TaskProgressView works on a list of tasks. Tasks have no icon property, therefore one must provide a callback that gets an icon from a task.\nIf BackgroundTask were derived from Task, we could add a property to BackgroundTask. The callback could then check if we have a BackgroundTask at hand and if so, provide the icon stored in a property in BackgroundTask. But BackgroundTask is not derived from Task so this is not possible.\nWe need a key to map from a Task to an Icon.\nI used the title of the task as a key property to map to the icon, so an immutable map seemed like the best way to go.", "author": "btut", "createdAt": "2020-05-11T12:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5ODMyNw==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422998327", "bodyText": "Ok, I see. It's a bit unfortunate but your solution makes sense. I would propose to change the Callback below to a normal method (public static Node getIcon(Task<?> task) which you then use as a callback using BackgroundTask::getIcon) and replace the iconMap by a normal switch statement.", "author": "tobiasdiez", "createdAt": "2020-05-11T12:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2MTkwNQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423061905", "bodyText": "Change to method is easy, but I cannot use a switch, because I would need a constant expression. As I use the title of the task, and there is localization on that, it is not constant.\n396411a", "author": "btut", "createdAt": "2020-05-11T14:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "396411a68cf3a2583cbe367b716d6195f0773cf2", "chunk": "diff --git a/src/main/java/org/jabref/gui/util/BackgroundTask.java b/src/main/java/org/jabref/gui/util/BackgroundTask.java\nindex eb7864003f..2b9e7b65d2 100644\n--- a/src/main/java/org/jabref/gui/util/BackgroundTask.java\n+++ b/src/main/java/org/jabref/gui/util/BackgroundTask.java\n\n@@ -38,14 +37,6 @@ public abstract class BackgroundTask<V> {\n             Localization.lang(\"Downloading\"), IconTheme.JabRefIcons.DOWNLOAD.getGraphicNode()\n     );\n \n-    public static Callback<Task<?>, Node> iconCallback = task -> {\n-        if (BackgroundTask.iconMap.containsKey(task.getTitle())) {\n-            return BackgroundTask.iconMap.get(task.getTitle());\n-        } else {\n-            return null;\n-        }\n-    };\n-\n     private Runnable onRunning;\n     private Consumer<V> onSuccess;\n     private Consumer<Exception> onException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTQxMA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422981410", "bodyText": "We try to remove the Globals class. Is it possible to insert the stateManager via a constructor parameter?", "author": "tobiasdiez", "createdAt": "2020-05-11T11:44:57Z", "path": "src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java", "diffHunk": "@@ -96,7 +97,11 @@ public static void runInJavaFXThread(Runnable runnable) {\n \n     @Override\n     public <V> Future<V> execute(BackgroundTask<V> task) {\n-        return execute(getJavaFXTask(task));\n+        Task<V> javafxTask = getJavaFXTask(task);\n+        if (task.showToUser()) {\n+            Globals.stateManager.addBackgroundTask(javafxTask);", "originalCommit": "41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5Mzg4OA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422993888", "bodyText": "Yes, that should be easy.", "author": "btut", "createdAt": "2020-05-11T12:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NzQ0Ng==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r422997446", "bodyText": "Fixed in 2c9ccea", "author": "btut", "createdAt": "2020-05-11T12:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "2c9ccea66fef2bcc6e68d0fadfdf407b1a0b6262", "chunk": "diff --git a/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java b/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java\nindex ab734e748d..6cbb6b2751 100644\n--- a/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java\n+++ b/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java\n\n@@ -99,7 +106,7 @@ public class DefaultTaskExecutor implements TaskExecutor {\n     public <V> Future<V> execute(BackgroundTask<V> task) {\n         Task<V> javafxTask = getJavaFXTask(task);\n         if (task.showToUser()) {\n-            Globals.stateManager.addBackgroundTask(javafxTask);\n+            stateManager.addBackgroundTask(javafxTask);\n         }\n         return execute(javafxTask);\n     }\n"}}, {"oid": "2c9ccea66fef2bcc6e68d0fadfdf407b1a0b6262", "url": "https://github.com/JabRef/jabref/commit/2c9ccea66fef2bcc6e68d0fadfdf407b1a0b6262", "message": "Removed Globals from DefaultTaskExecutor\n\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422981410", "committedDate": "2020-05-11T12:15:20Z", "type": "commit"}, {"oid": "ff9ce0068d6b80e131826a9138aab3b1f981b00e", "url": "https://github.com/JabRef/jabref/commit/ff9ce0068d6b80e131826a9138aab3b1f981b00e", "message": "Removed WaitForBackgroundtasksFinishedDialog\n\nMore in line with the other JabRef dialogs\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422977336", "committedDate": "2020-05-11T13:21:55Z", "type": "commit"}, {"oid": "d56138bbb629dcd5ffdad9d29d9c7b87d80ba7c2", "url": "https://github.com/JabRef/jabref/commit/d56138bbb629dcd5ffdad9d29d9c7b87d80ba7c2", "message": "Made Bindings in StateManager private\n\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422975104", "committedDate": "2020-05-11T13:24:57Z", "type": "commit"}, {"oid": "cf10859542c790e170866698f57a6fc8a704f7df", "url": "https://github.com/JabRef/jabref/commit/cf10859542c790e170866698f57a6fc8a704f7df", "message": "Added tooltip to progress indicator\n\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422973356", "committedDate": "2020-05-11T13:32:26Z", "type": "commit"}, {"oid": "fcb1d0cc0ec3af744485b4d9321e3a3215c532f1", "url": "https://github.com/JabRef/jabref/commit/fcb1d0cc0ec3af744485b4d9321e3a3215c532f1", "message": "Not working: own styleclass for toolbar progress indicator\n\nTries to address https://github.com/JabRef/jabref/pull/6443#discussion_r422971198", "committedDate": "2020-05-11T13:51:13Z", "type": "commit"}, {"oid": "396411a68cf3a2583cbe367b716d6195f0773cf2", "url": "https://github.com/JabRef/jabref/commit/396411a68cf3a2583cbe367b716d6195f0773cf2", "message": "Changed callback to method in BackgroundTask\n\nAddresses https://github.com/JabRef/jabref/pull/6443#discussion_r422980468", "committedDate": "2020-05-11T13:59:53Z", "type": "commit"}, {"oid": "e24c1418564a9304b9c5172573e9edc9d1036a54", "url": "https://github.com/JabRef/jabref/commit/e24c1418564a9304b9c5172573e9edc9d1036a54", "message": "Fixed progress-indicator styling", "committedDate": "2020-05-12T06:17:26Z", "type": "commit"}, {"oid": "478ee059e5606251361d663b939284f19bc834e4", "url": "https://github.com/JabRef/jabref/commit/478ee059e5606251361d663b939284f19bc834e4", "message": "Improve getIcon method", "committedDate": "2020-05-12T07:38:03Z", "type": "commit"}, {"oid": "0557c678a657e6315dcb2c2c1c98d90b45a76e08", "url": "https://github.com/JabRef/jabref/commit/0557c678a657e6315dcb2c2c1c98d90b45a76e08", "message": "Well, I said hopefully ;-)", "committedDate": "2020-05-12T07:41:04Z", "type": "commit"}, {"oid": "23b7e6947549c1e44488e72c6a55429f55d63032", "url": "https://github.com/JabRef/jabref/commit/23b7e6947549c1e44488e72c6a55429f55d63032", "message": "Revert \"Well, I said hopefully ;-)\"\n\nThis reverts commit 0557c678a657e6315dcb2c2c1c98d90b45a76e08.", "committedDate": "2020-05-12T08:03:21Z", "type": "commit"}, {"oid": "e3ae7963d447e5fad4dc5af0b27384e63d2b82d1", "url": "https://github.com/JabRef/jabref/commit/e3ae7963d447e5fad4dc5af0b27384e63d2b82d1", "message": "Revert \"Improve getIcon method\"\n\nThis reverts commit 478ee059e5606251361d663b939284f19bc834e4.", "committedDate": "2020-05-12T08:03:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0OA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423649148", "bodyText": "This looks odd to me", "author": "Siedlerchr", "createdAt": "2020-05-12T11:06:40Z", "path": "src/main/java/org/jabref/gui/JabRefFrame.java", "diffHunk": "@@ -397,7 +402,22 @@ private void tearDownJabRef(List<String> filenames) {\n      * @return true if the user chose to quit; false otherwise\n      */\n     public boolean quit() {\n-        // First ask if the user really wants to close, if the library has not been saved since last save.\n+        // First ask if the user really wants to close, if there are still background tasks running\n+        /*\n+        It is important to wait for unfinished background tasks before checking if a save-operation is needed, because\n+        the background tasks may make changes themselves that need saving.\n+         */\n+        if (stateManager.getAnyTaskRunning().getValue()) {\n+            if (!(dialogService.showBackgroundProgressDialogAndWait(\n+                    Localization.lang(\"Please wait...\"),\n+                    Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n+                    stateManager\n+            ).orElse(ButtonType.CANCEL) == ButtonType.YES)) {", "originalCommit": "e3ae7963d447e5fad4dc5af0b27384e63d2b82d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTc4NA==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423651784", "bodyText": "Could you please elaborate?\nIf you mean the condition at the end, I just want to make sure that JabRef only exists if the user pressed yes. So if the optional is empty I just put ButtonType.CANCEL so the comparison to YES returns false.\nDo you want me to change this or add a comment? Maybe it would be clearer to store the result in a variable and check for (result.isPresent() && result.get() == ButtonType.YES).", "author": "btut", "createdAt": "2020-05-12T11:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjE0OQ==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423656149", "bodyText": "Yes, I think this is more readable.", "author": "Siedlerchr", "createdAt": "2020-05-12T11:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1ODgxNw==", "url": "https://github.com/JabRef/jabref/pull/6443#discussion_r423658817", "bodyText": "Done 3db3997", "author": "btut", "createdAt": "2020-05-12T11:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "3db399741b0ce098cd930005870bc745cd719c70", "chunk": "diff --git a/src/main/java/org/jabref/gui/JabRefFrame.java b/src/main/java/org/jabref/gui/JabRefFrame.java\nindex 4d79d4b19a..67d9724352 100644\n--- a/src/main/java/org/jabref/gui/JabRefFrame.java\n+++ b/src/main/java/org/jabref/gui/JabRefFrame.java\n\n@@ -408,11 +408,12 @@ public class JabRefFrame extends BorderPane {\n         the background tasks may make changes themselves that need saving.\n          */\n         if (stateManager.getAnyTaskRunning().getValue()) {\n-            if (!(dialogService.showBackgroundProgressDialogAndWait(\n+            Optional<ButtonType> shouldClose = dialogService.showBackgroundProgressDialogAndWait(\n                     Localization.lang(\"Please wait...\"),\n                     Localization.lang(\"Waiting for background tasks to finish. Quit anyway?\"),\n                     stateManager\n-            ).orElse(ButtonType.CANCEL) == ButtonType.YES)) {\n+            );\n+            if (!(shouldClose.isPresent() && shouldClose.get() == ButtonType.YES)) {\n                 return false;\n             }\n         }\n"}}, {"oid": "3db399741b0ce098cd930005870bc745cd719c70", "url": "https://github.com/JabRef/jabref/commit/3db399741b0ce098cd930005870bc745cd719c70", "message": "Improved readability in JabRefFrame", "committedDate": "2020-05-12T11:24:25Z", "type": "commit"}]}