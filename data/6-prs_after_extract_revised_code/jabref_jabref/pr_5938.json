{"pr_number": 5938, "pr_title": "Fix not escaping special characters in search pattern", "pr_createdAt": "2020-02-11T23:12:47Z", "pr_url": "https://github.com/JabRef/jabref/pull/5938", "timeline": [{"oid": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a", "url": "https://github.com/JabRef/jabref/commit/2f6852088012703b2f3a3a0d3e19e88bfe82ae3a", "message": "Fix not escaping special characters in search pattern\n\nfixes #5892\n\n* add method to get search pattern for searched words with escaped\n javascript regexp special characters (for search without regular\n expressions)\n\n* in preview viewer use search pattern with escaped javascript regexp\n special characters", "committedDate": "2020-02-11T23:00:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MzU1Nw==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378083557", "bodyText": "Better is to use an enum here, eg.. EscapMode, with java and javascript as values:\nhttps://www.teamten.com/lawrence/programming/prefer-enums-over-booleans.html", "author": "Siedlerchr", "createdAt": "2020-02-12T07:45:49Z", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -124,6 +127,18 @@ public boolean isRegularExpression() {\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n     public Optional<Pattern> getPatternForWords() {\n+        return joinWordsToPattern(false);\n+    }\n+\n+    // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped for javascript if no regular expression search is enabled\n+    public Optional<Pattern> getJsPatternForWords() {\n+        return joinWordsToPattern(true);\n+    }\n+\n+    /* Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n+     * @param escapeSpecialCharsForJS whether to escape characters in wi for javascript regexp (escaping all special characters) or for java (using \\Q and \\E)\n+     */\n+    private Optional<Pattern> joinWordsToPattern(boolean escapeSpecialCharsForJS) {", "originalCommit": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c2925dcac0f92c9e709d50673dfb3d50f05b4b3", "chunk": "diff --git a/src/main/java/org/jabref/logic/search/SearchQuery.java b/src/main/java/org/jabref/logic/search/SearchQuery.java\nindex 2070e1b70c..e118a9c2a2 100644\n--- a/src/main/java/org/jabref/logic/search/SearchQuery.java\n+++ b/src/main/java/org/jabref/logic/search/SearchQuery.java\n\n@@ -127,18 +143,18 @@ public class SearchQuery implements SearchMatcher {\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n     public Optional<Pattern> getPatternForWords() {\n-        return joinWordsToPattern(false);\n+        return joinWordsToPattern(EscapeMode.JAVA);\n     }\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped for javascript if no regular expression search is enabled\n     public Optional<Pattern> getJsPatternForWords() {\n-        return joinWordsToPattern(true);\n+        return joinWordsToPattern(EscapeMode.JAVASCRIPT);\n     }\n \n-    /* Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n-     * @param escapeSpecialCharsForJS whether to escape characters in wi for javascript regexp (escaping all special characters) or for java (using \\Q and \\E)\n+    /** Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n+     * @param escapeMode method for escaping special characters in wi\n      */\n-    private Optional<Pattern> joinWordsToPattern(boolean escapeSpecialCharsForJS) {\n+    private Optional<Pattern> joinWordsToPattern(EscapeMode escapeMode) {\n         List<String> words = getSearchWords();\n \n         if ((words == null) || words.isEmpty() || words.get(0).isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MzkzOQ==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378083939", "bodyText": "You can use Pattern.compile to gain some performace improvements here", "author": "Siedlerchr", "createdAt": "2020-02-12T07:47:03Z", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -18,6 +18,9 @@\n \n public class SearchQuery implements SearchMatcher {\n \n+    // regexp pattern for escaping special characters in javascript regex\n+    public static final String JAVASCRIPT_ESCAPED_CHARS_PATTERN = \"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\";", "originalCommit": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c2925dcac0f92c9e709d50673dfb3d50f05b4b3", "chunk": "diff --git a/src/main/java/org/jabref/logic/search/SearchQuery.java b/src/main/java/org/jabref/logic/search/SearchQuery.java\nindex 2070e1b70c..e118a9c2a2 100644\n--- a/src/main/java/org/jabref/logic/search/SearchQuery.java\n+++ b/src/main/java/org/jabref/logic/search/SearchQuery.java\n\n@@ -18,8 +18,24 @@ import org.jabref.model.search.rules.SentenceAnalyzer;\n \n public class SearchQuery implements SearchMatcher {\n \n-    // regexp pattern for escaping special characters in javascript regex\n-    public static final String JAVASCRIPT_ESCAPED_CHARS_PATTERN = \"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\";\n+    /**\n+     * Regex pattern for escaping special characters in javascript regular expressions\n+     */\n+    public static final Pattern JAVASCRIPT_ESCAPED_CHARS_PATTERN = Pattern.compile(\"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\");\n+\n+    /**\n+     * Metod for escaping special characters in regular expressions\n+     */\n+    private enum EscapeMode {\n+        /**\n+         * using \\Q and \\E marks\n+         */\n+        JAVA,\n+        /**\n+         * escaping all javascript regex special characters separately\n+         */\n+        JAVASCRIPT\n+    }\n \n     private final String query;\n     private final boolean caseSensitive;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4NDEzOQ==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378084139", "bodyText": "Please extract this to a regular if-else, it's easier to understand on the first look than this chained conditions", "author": "Siedlerchr", "createdAt": "2020-02-12T07:47:41Z", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -133,7 +148,7 @@ public boolean isRegularExpression() {\n         // compile the words to a regular expression in the form (w1)|(w2)|(w3)\n         StringJoiner joiner = new StringJoiner(\")|(\", \"(\", \")\");\n         for (String word : words) {\n-            joiner.add(regularExpression ? word : Pattern.quote(word));\n+            joiner.add(regularExpression ? word : (escapeSpecialCharsForJS ? word.replaceAll(JAVASCRIPT_ESCAPED_CHARS_PATTERN, \"\\\\\\\\$0\") : Pattern.quote(word)));", "originalCommit": "2f6852088012703b2f3a3a0d3e19e88bfe82ae3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c2925dcac0f92c9e709d50673dfb3d50f05b4b3", "chunk": "diff --git a/src/main/java/org/jabref/logic/search/SearchQuery.java b/src/main/java/org/jabref/logic/search/SearchQuery.java\nindex 2070e1b70c..e118a9c2a2 100644\n--- a/src/main/java/org/jabref/logic/search/SearchQuery.java\n+++ b/src/main/java/org/jabref/logic/search/SearchQuery.java\n\n@@ -148,7 +164,19 @@ public class SearchQuery implements SearchMatcher {\n         // compile the words to a regular expression in the form (w1)|(w2)|(w3)\n         StringJoiner joiner = new StringJoiner(\")|(\", \"(\", \")\");\n         for (String word : words) {\n-            joiner.add(regularExpression ? word : (escapeSpecialCharsForJS ? word.replaceAll(JAVASCRIPT_ESCAPED_CHARS_PATTERN, \"\\\\\\\\$0\") : Pattern.quote(word)));\n+            if (regularExpression)\n+                joiner.add(word);\n+            else\n+                switch (escapeMode) {\n+                    case JAVA:\n+                        joiner.add(Pattern.quote(word));\n+                        break;\n+                    case JAVASCRIPT:\n+                        joiner.add(JAVASCRIPT_ESCAPED_CHARS_PATTERN.matcher(word).replaceAll(\"\\\\\\\\$0\"));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unknown special characters escape method: \" + escapeMode);\n+                }\n         }\n         String searchPattern = joiner.toString();\n \n"}}, {"oid": "5c2925dcac0f92c9e709d50673dfb3d50f05b4b3", "url": "https://github.com/JabRef/jabref/commit/5c2925dcac0f92c9e709d50673dfb3d50f05b4b3", "message": "Refactoring and performance improvement\n\n* use enum to specify special characters escape mode\n\n* use compiled regex pattern instead of string", "committedDate": "2020-02-12T14:05:33Z", "type": "commit"}, {"oid": "89c72c05dd881133ee6a667d9c78ec503566cf5a", "url": "https://github.com/JabRef/jabref/commit/89c72c05dd881133ee6a667d9c78ec503566cf5a", "message": "Refactoring: braces in if..else", "committedDate": "2020-02-12T14:26:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNjA0MA==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378316040", "bodyText": "Isn't checkstyle complaining about putting this in two lines? Has no effect, but looks somewhat odd...", "author": "calixtus", "createdAt": "2020-02-12T15:16:28Z", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -133,7 +164,21 @@ public boolean isRegularExpression() {\n         // compile the words to a regular expression in the form (w1)|(w2)|(w3)\n         StringJoiner joiner = new StringJoiner(\")|(\", \"(\", \")\");\n         for (String word : words) {\n-            joiner.add(regularExpression ? word : Pattern.quote(word));\n+            if (regularExpression) {\n+                joiner.add(word);\n+            }\n+            else {", "originalCommit": "89c72c05dd881133ee6a667d9c78ec503566cf5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NTY3NQ==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378495675", "bodyText": "Yeah, it's a mistake, I'll change it. Also looks odd to me. Checkstyle wasn't complaining.", "author": "dawidm", "createdAt": "2020-02-12T20:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNjA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "6f39cbc6b035d5d2c07ba176b95e2b54139fc109", "chunk": "diff --git a/src/main/java/org/jabref/logic/search/SearchQuery.java b/src/main/java/org/jabref/logic/search/SearchQuery.java\nindex 2171a7329c..6d89beb3c4 100644\n--- a/src/main/java/org/jabref/logic/search/SearchQuery.java\n+++ b/src/main/java/org/jabref/logic/search/SearchQuery.java\n\n@@ -166,8 +166,7 @@ public class SearchQuery implements SearchMatcher {\n         for (String word : words) {\n             if (regularExpression) {\n                 joiner.add(word);\n-            }\n-            else {\n+            } else {\n                 switch (escapeMode) {\n                     case JAVA:\n                         joiner.add(Pattern.quote(word));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMjEyOA==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378322128", "bodyText": "IMHO, although \"Js\" is quite obvious, I would reword that to getJavaScriptPatternForWords, since you are creating a new Method just for the sole purpose to make its use more obvious in it's name. So why not go all the way?", "author": "calixtus", "createdAt": "2020-02-12T15:25:38Z", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -124,6 +143,18 @@ public boolean isRegularExpression() {\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n     public Optional<Pattern> getPatternForWords() {\n+        return joinWordsToPattern(EscapeMode.JAVA);\n+    }\n+\n+    // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped for javascript if no regular expression search is enabled\n+    public Optional<Pattern> getJsPatternForWords() {", "originalCommit": "89c72c05dd881133ee6a667d9c78ec503566cf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f39cbc6b035d5d2c07ba176b95e2b54139fc109", "chunk": "diff --git a/src/main/java/org/jabref/logic/search/SearchQuery.java b/src/main/java/org/jabref/logic/search/SearchQuery.java\nindex 2171a7329c..6d89beb3c4 100644\n--- a/src/main/java/org/jabref/logic/search/SearchQuery.java\n+++ b/src/main/java/org/jabref/logic/search/SearchQuery.java\n\n@@ -147,12 +147,12 @@ public class SearchQuery implements SearchMatcher {\n     }\n \n     // Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped for javascript if no regular expression search is enabled\n-    public Optional<Pattern> getJsPatternForWords() {\n+    public Optional<Pattern> getJavaScriptPatternForWords() {\n         return joinWordsToPattern(EscapeMode.JAVASCRIPT);\n     }\n \n     /** Returns a regular expression pattern in the form (w1)|(w2)| ... wi are escaped if no regular expression search is enabled\n-     * @param escapeMode method for escaping special characters in wi\n+     * @param escapeMode the mode of escaping special characters in wi\n      */\n     private Optional<Pattern> joinWordsToPattern(EscapeMode escapeMode) {\n         List<String> words = getSearchWords();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzNzAzNw==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r378437037", "bodyText": "Method", "author": "stefan-kolb", "createdAt": "2020-02-12T18:35:49Z", "path": "src/main/java/org/jabref/logic/search/SearchQuery.java", "diffHunk": "@@ -18,6 +18,25 @@\n \n public class SearchQuery implements SearchMatcher {\n \n+    /**\n+     * Regex pattern for escaping special characters in javascript regular expressions\n+     */\n+    public static final Pattern JAVASCRIPT_ESCAPED_CHARS_PATTERN = Pattern.compile(\"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\");\n+\n+    /**\n+     * Metod for escaping special characters in regular expressions", "originalCommit": "89c72c05dd881133ee6a667d9c78ec503566cf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f39cbc6b035d5d2c07ba176b95e2b54139fc109", "chunk": "diff --git a/src/main/java/org/jabref/logic/search/SearchQuery.java b/src/main/java/org/jabref/logic/search/SearchQuery.java\nindex 2171a7329c..6d89beb3c4 100644\n--- a/src/main/java/org/jabref/logic/search/SearchQuery.java\n+++ b/src/main/java/org/jabref/logic/search/SearchQuery.java\n\n@@ -24,7 +24,7 @@ public class SearchQuery implements SearchMatcher {\n     public static final Pattern JAVASCRIPT_ESCAPED_CHARS_PATTERN = Pattern.compile(\"[\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\/]\");\n \n     /**\n-     * Metod for escaping special characters in regular expressions\n+     * The mode of escaping special characters in regular expressions\n      */\n     private enum EscapeMode {\n         /**\n"}}, {"oid": "6f39cbc6b035d5d2c07ba176b95e2b54139fc109", "url": "https://github.com/JabRef/jabref/commit/6f39cbc6b035d5d2c07ba176b95e2b54139fc109", "message": "Refactoring, minor changes: names, comments", "committedDate": "2020-02-12T22:05:16Z", "type": "commit"}, {"oid": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5", "url": "https://github.com/JabRef/jabref/commit/266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5", "message": "Add tests of escaping special characters in search patterns", "committedDate": "2020-02-14T16:08:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzkxNQ==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r379517915", "bodyText": "I've created tests but I'm not sure about readbility of this approach.", "author": "dawidm", "createdAt": "2020-02-14T16:14:55Z", "path": "src/test/java/org/jabref/logic/search/SearchQueryTest.java", "diffHunk": "@@ -203,4 +203,38 @@ public void testGetPattern() {\n         //We can't directly compare the pattern objects\n         assertEquals(Optional.of(pattern.toString()), result.getPatternForWords().map(Pattern::toString));\n     }\n+\n+    @Test\n+    public void testGetRegexpPattern() {\n+        String queryText = \"[a-c]\\\\d* \\\\d*\";\n+        SearchQuery regexQuery = new SearchQuery(queryText, false, true);\n+        Pattern pattern = Pattern.compile(\"([a-c]\\\\d* \\\\d*)\");\n+        assertEquals(Optional.of(pattern.toString()), regexQuery.getPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testGetRegexpJavascriptPattern() {\n+        String queryText = \"[a-c]\\\\d* \\\\d*\";\n+        SearchQuery regexQuery = new SearchQuery(queryText, false, true);\n+        Pattern pattern = Pattern.compile(\"([a-c]\\\\d* \\\\d*)\");\n+        assertEquals(Optional.of(pattern.toString()), regexQuery.getJavaScriptPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testEscapingInPattern() {\n+        //first word contain all java special regex characters\n+        String queryText = \"<([{\\\\\\\\^-=$!|]})?*+.> word1 word2.\";\n+        SearchQuery textQueryWithSpecialChars = new SearchQuery(queryText, false, false);\n+        String pattern = \"(\\\\Q<([{\\\\^-=$!|]})?*+.>\\\\E)|(\\\\Qword1\\\\E)|(\\\\Qword2.\\\\E)\";\n+        assertEquals(Optional.of(pattern), textQueryWithSpecialChars.getPatternForWords().map(Pattern::toString));\n+    }\n+\n+    @Test\n+    public void testEscapingInJavascriptPattern() {\n+        //first word contain all javascript special regex characters that should be escaped individually in text based search\n+        String queryText = \"([{\\\\\\\\^$|]})?*+./ word1 word2.\";\n+        SearchQuery textQueryWithSpecialChars = new SearchQuery(queryText, false, false);\n+        String pattern = \"(\\\\(\\\\[\\\\{\\\\\\\\\\\\^\\\\$\\\\|\\\\]\\\\}\\\\)\\\\?\\\\*\\\\+\\\\.\\\\/)|(word1)|(word2\\\\.)\";", "originalCommit": "266bfc8029d7f37f41897e4f0d47c7fdcb33bbd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NjUyMA==", "url": "https://github.com/JabRef/jabref/pull/5938#discussion_r379596520", "bodyText": "I know this looks totally crazy with those escaping, but it's fine.", "author": "Siedlerchr", "createdAt": "2020-02-14T19:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzkxNQ=="}], "type": "inlineReview", "revised_code": null}]}