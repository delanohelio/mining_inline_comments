{"pr_number": 1652, "pr_title": "Switch codebase to use FedoraIDs", "pr_createdAt": "2020-03-31T16:08:55Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1652", "timeline": [{"oid": "b17b0fdb7981124f6bcff8aa1d5d690f57b48482", "url": "https://github.com/fcrepo/fcrepo/commit/b17b0fdb7981124f6bcff8aa1d5d690f57b48482", "message": "Switch entire codebase to use FedoraID", "committedDate": "2020-03-31T21:11:56Z", "type": "commit"}, {"oid": "b17b0fdb7981124f6bcff8aa1d5d690f57b48482", "url": "https://github.com/fcrepo/fcrepo/commit/b17b0fdb7981124f6bcff8aa1d5d690f57b48482", "message": "Switch entire codebase to use FedoraID", "committedDate": "2020-03-31T21:11:56Z", "type": "forcePushed"}, {"oid": "42f89628c603bf56e77d992f4e359e3e571b94d7", "url": "https://github.com/fcrepo/fcrepo/commit/42f89628c603bf56e77d992f4e359e3e571b94d7", "message": "Remove unnecessary FedoraID generation", "committedDate": "2020-04-01T13:42:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNDA4Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401624082", "bodyText": "This may as well be private since you have a public static builder.", "author": "pwinckles", "createdAt": "2020-04-01T13:41:46Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -50,24 +53,45 @@\n \n     /**\n      * Basic constructor.\n-     * @param fullId The full identifier.\n+     * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n     public FedoraID(final String fullId) {", "originalCommit": "b17b0fdb7981124f6bcff8aa1d5d690f57b48482", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex 39c2d254d9..c4f5250924 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -56,7 +70,7 @@ public class FedoraID {\n      * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    public FedoraID(final String fullId) {\n+    private FedoraID(final String fullId) {\n         this.fullId = ensurePrefix(fullId);\n         if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n             // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNDYxOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401624618", "bodyText": "It would be nice if the javadoc gave examples of the types of id strings this method is expecting.", "author": "pwinckles", "createdAt": "2020-04-01T13:42:27Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -50,24 +53,45 @@\n \n     /**\n      * Basic constructor.\n-     * @param fullId The full identifier.\n+     * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n     public FedoraID(final String fullId) {\n-        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n-            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n-        }\n-        this.fullId = fullId;\n+        this.fullId = ensurePrefix(fullId);\n         if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n             // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n             this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         }\n         // Carry the path of the request for any exceptions.\n-        this.externalPath = fullId.substring(FEDORA_ID_PREFIX.length());\n+        this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());\n \n         processIdentifier();\n     }\n \n+    /**\n+     * Basic constructor for repository root ID.\n+     */\n+    private FedoraID() {\n+        this(\"\");\n+    }\n+\n+    /**\n+     * Static create method\n+     * @param fullId The ID to use for the FedoraID.\n+     * @return The FedoraID.\n+     */", "originalCommit": "b17b0fdb7981124f6bcff8aa1d5d690f57b48482", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0OTY4NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401649684", "bodyText": "Additionally, because I can't figure out how to leave comments on unchanged lines, I think it'd be nice if distinction between \"fullId\" and \"resourceId\" was documented more clearly (with id examples) in the javadocs for getResourceId and getFullId. Maybe in the addTo methods to? How are they related and why would I use one over the other?", "author": "pwinckles", "createdAt": "2020-04-01T14:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNDYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3MzAxNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401673015", "bodyText": "So the difference is really that getResourceID returns the ID to the actual resource and getFullId is the... full ID from the request.\nSo for a Memento, your full ID is info:fedora/object/fcr:versions/2020040110101 and your resource ID is info:fedora/object.\nHowever for some reason nonRdfSourceDescriptions need their resource Id to contain the fcr:metadata part.\nie. Full ID : info:fedora/object/fcr:metadata/fcr:versions/2020040110101\nResource ID : info:fedora/object/fcr:metadata\nI'm not sure why but I guess it has to do with how the file is stored with and read from the persistence layer.", "author": "whikloj", "createdAt": "2020-04-01T14:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNDYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3Njc0OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401676749", "bodyText": "Yeah, that was my understanding, and that was a great explanation. Something like that should be in the javadoc.", "author": "pwinckles", "createdAt": "2020-04-01T14:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNDYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5MTcwMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401891700", "bodyText": "Added this to the top of the class, I hope that is okay.", "author": "whikloj", "createdAt": "2020-04-01T20:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNDYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex 39c2d254d9..c4f5250924 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -56,7 +70,7 @@ public class FedoraID {\n      * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    public FedoraID(final String fullId) {\n+    private FedoraID(final String fullId) {\n         this.fullId = ensurePrefix(fullId);\n         if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n             // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNTkzNg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401625936", "bodyText": "Why is this needed? The getRoot static builder could just pass \"\" to the standard constructor.", "author": "pwinckles", "createdAt": "2020-04-01T13:44:15Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -50,24 +53,45 @@\n \n     /**\n      * Basic constructor.\n-     * @param fullId The full identifier.\n+     * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n     public FedoraID(final String fullId) {\n-        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n-            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n-        }\n-        this.fullId = fullId;\n+        this.fullId = ensurePrefix(fullId);\n         if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n             // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n             this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         }\n         // Carry the path of the request for any exceptions.\n-        this.externalPath = fullId.substring(FEDORA_ID_PREFIX.length());\n+        this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());\n \n         processIdentifier();\n     }\n \n+    /**\n+     * Basic constructor for repository root ID.\n+     */\n+    private FedoraID() {\n+        this(\"\");\n+    }", "originalCommit": "b17b0fdb7981124f6bcff8aa1d5d690f57b48482", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex 39c2d254d9..c4f5250924 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -56,7 +70,7 @@ public class FedoraID {\n      * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    public FedoraID(final String fullId) {\n+    private FedoraID(final String fullId) {\n         this.fullId = ensurePrefix(fullId);\n         if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n             // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzNjQ5MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401636491", "bodyText": "Maybe there should be a version of FedoarID.create() like the following:\npublic static FedoraID create(String part, String... parts) {\n    // enforce part not blank\n\n    if (parts != null && parts.length > 0) {\n        final var sb = new StringBuilder(part);\n        Arrays.asList(parts).forEach(p -> {\n            appendSlash(sb).append(p);\n        });\n    }\n\n    // Check for trailing slash?\n    // create FedoraID\n}\n\nprivate StringBuilder appendSlash(final StringBuilder sb) {\n    if (sb.charAt(sb.count() - 1) != '/') {\n        sb.append(\"/\");\n    }\n    return sb;\n}\n\n(I wrote that in browser. Probably does not compile.)", "author": "pwinckles", "createdAt": "2020-04-01T13:58:12Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -156,6 +180,56 @@ public String getMementoString() {\n         return mementoDatetimeStr;\n     }\n \n+    /**\n+     * Add a part onto this identifier.\n+     * @param addition The additional string.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToResourceId(final String addition) {\n+        return FedoraID.create(this.getResourceId() + (this.getResourceId().endsWith(\"/\") ? \"\" : \"/\") + addition);", "originalCommit": "b17b0fdb7981124f6bcff8aa1d5d690f57b48482", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex 39c2d254d9..c4f5250924 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -181,21 +189,23 @@ public class FedoraID {\n     }\n \n     /**\n-     * Add a part onto this identifier.\n-     * @param addition The additional string.\n+     * Create a new FedoraID using the resource ID as the base\n+     * @param addition One or more additional strings.\n      * @return new FedoraID for the new identifier.\n      */\n-    public FedoraID addToResourceId(final String addition) {\n-        return FedoraID.create(this.getResourceId() + (this.getResourceId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    public FedoraID addToResourceId(final String... addition) {\n+        final var newId = idBuilder(this.getResourceId(), addition);\n+        return new FedoraID(newId);\n     }\n \n     /**\n-     * Add a part onto this identifier.\n-     * @param addition The additional string.\n+     * Create a new FedoraID using the full ID as the base.\n+     * @param addition One or more additional strings.\n      * @return new FedoraID for the new identifier.\n      */\n-    public FedoraID addToFullId(final String addition) {\n-        return FedoraID.create(this.getFullId() + (this.getFullId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    public FedoraID addToFullId(final String... addition) {\n+        final var newId = idBuilder(this.getFullId(), addition);\n+        return new FedoraID(newId);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzNzg5NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401637895", "bodyText": "Generally, using Objects.equals() is safer. In this case, it's probably impossible for fullId to be null?", "author": "pwinckles", "createdAt": "2020-04-01T14:00:03Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -156,6 +180,56 @@ public String getMementoString() {\n         return mementoDatetimeStr;\n     }\n \n+    /**\n+     * Add a part onto this identifier.\n+     * @param addition The additional string.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToResourceId(final String addition) {\n+        return FedoraID.create(this.getResourceId() + (this.getResourceId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    }\n+\n+    /**\n+     * Add a part onto this identifier.\n+     * @param addition The additional string.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToFullId(final String addition) {\n+        return FedoraID.create(this.getFullId() + (this.getFullId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof FedoraID)) {\n+            return false;\n+        }\n+\n+        final var testObj = (FedoraID) obj;\n+        return testObj.getFullId().equals(this.getFullId());", "originalCommit": "42f89628c603bf56e77d992f4e359e3e571b94d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDA0OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401674048", "bodyText": "It is impossible, but I can change it.", "author": "whikloj", "createdAt": "2020-04-01T14:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzNzg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex 39c2d254d9..c4f5250924 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -181,21 +189,23 @@ public class FedoraID {\n     }\n \n     /**\n-     * Add a part onto this identifier.\n-     * @param addition The additional string.\n+     * Create a new FedoraID using the resource ID as the base\n+     * @param addition One or more additional strings.\n      * @return new FedoraID for the new identifier.\n      */\n-    public FedoraID addToResourceId(final String addition) {\n-        return FedoraID.create(this.getResourceId() + (this.getResourceId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    public FedoraID addToResourceId(final String... addition) {\n+        final var newId = idBuilder(this.getResourceId(), addition);\n+        return new FedoraID(newId);\n     }\n \n     /**\n-     * Add a part onto this identifier.\n-     * @param addition The additional string.\n+     * Create a new FedoraID using the full ID as the base.\n+     * @param addition One or more additional strings.\n      * @return new FedoraID for the new identifier.\n      */\n-    public FedoraID addToFullId(final String addition) {\n-        return FedoraID.create(this.getFullId() + (this.getFullId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    public FedoraID addToFullId(final String... addition) {\n+        final var newId = idBuilder(this.getFullId(), addition);\n+        return new FedoraID(newId);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MDAyMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401640020", "bodyText": "Is this safe? I would have expect a resource id to have been decoded somewhere in the HTTP layer if it needed to be.", "author": "pwinckles", "createdAt": "2020-04-01T14:02:58Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -156,6 +180,56 @@ public String getMementoString() {\n         return mementoDatetimeStr;\n     }\n \n+    /**\n+     * Add a part onto this identifier.\n+     * @param addition The additional string.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToResourceId(final String addition) {\n+        return FedoraID.create(this.getResourceId() + (this.getResourceId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    }\n+\n+    /**\n+     * Add a part onto this identifier.\n+     * @param addition The additional string.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToFullId(final String addition) {\n+        return FedoraID.create(this.getFullId() + (this.getFullId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof FedoraID)) {\n+            return false;\n+        }\n+\n+        final var testObj = (FedoraID) obj;\n+        return testObj.getFullId().equals(this.getFullId());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return (int) getFullId().hashCode();\n+    }\n+\n+    /**\n+     * Ensure the ID has the info:fedora/ prefix.\n+     * @param id the identifier, if null assume repository root (info:fedora/)\n+     * @return the identifier with the info:fedora/ prefix.\n+     */\n+    private static String ensurePrefix(final String id) {\n+        if (id == null) {\n+            return FEDORA_ID_PREFIX;\n+        }\n+        final String decodedId = URLDecoder.decode(id, UTF_8);", "originalCommit": "42f89628c603bf56e77d992f4e359e3e571b94d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2MzQyOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401663429", "bodyText": "I can move it to the HttpIdentifierConverter if you prefer", "author": "whikloj", "createdAt": "2020-04-01T14:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MDAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NzQ1Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401677453", "bodyText": "I think that might be better. I have a fear of decoding strings that shouldn't be decoded.", "author": "pwinckles", "createdAt": "2020-04-01T14:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MDAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex 39c2d254d9..c4f5250924 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -181,21 +189,23 @@ public class FedoraID {\n     }\n \n     /**\n-     * Add a part onto this identifier.\n-     * @param addition The additional string.\n+     * Create a new FedoraID using the resource ID as the base\n+     * @param addition One or more additional strings.\n      * @return new FedoraID for the new identifier.\n      */\n-    public FedoraID addToResourceId(final String addition) {\n-        return FedoraID.create(this.getResourceId() + (this.getResourceId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    public FedoraID addToResourceId(final String... addition) {\n+        final var newId = idBuilder(this.getResourceId(), addition);\n+        return new FedoraID(newId);\n     }\n \n     /**\n-     * Add a part onto this identifier.\n-     * @param addition The additional string.\n+     * Create a new FedoraID using the full ID as the base.\n+     * @param addition One or more additional strings.\n      * @return new FedoraID for the new identifier.\n      */\n-    public FedoraID addToFullId(final String addition) {\n-        return FedoraID.create(this.getFullId() + (this.getFullId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    public FedoraID addToFullId(final String... addition) {\n+        final var newId = idBuilder(this.getFullId(), addition);\n+        return new FedoraID(newId);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1Mjk5MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401652991", "bodyText": "The addTo methods could also be changed to have signatures like FedoarId addTo...(String part, String... parts)", "author": "pwinckles", "createdAt": "2020-04-01T14:20:48Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/BinaryImpl.java", "diffHunk": "@@ -135,7 +137,11 @@ public String getFilename() {\n     @Override\n     public FedoraResource getDescription() {\n         try {\n-            final var descId = getId() + \"/\" + FCR_METADATA;\n+            final FedoraID descId = getFedoraId().addToResourceId(FCR_METADATA);\n+            if (this.isMemento()) {\n+                return resourceFactory.getResource(tx, descId.addToFullId(FCR_VERSIONS + \"/\" +", "originalCommit": "42f89628c603bf56e77d992f4e359e3e571b94d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/BinaryImpl.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/BinaryImpl.java\nindex ef8b02a4f1..f7c2e4b412 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/BinaryImpl.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/BinaryImpl.java\n\n@@ -139,7 +139,7 @@ public class BinaryImpl extends FedoraResourceImpl implements Binary {\n         try {\n             final FedoraID descId = getFedoraId().addToResourceId(FCR_METADATA);\n             if (this.isMemento()) {\n-                return resourceFactory.getResource(tx, descId.addToFullId(FCR_VERSIONS + \"/\" +\n+                return resourceFactory.getResource(tx, descId.addToFullId(FCR_VERSIONS,\n                         this.getMementoDateTimeAsUriString()));\n             }\n             return resourceFactory.getResource(tx, descId);\n"}}, {"oid": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "url": "https://github.com/fcrepo/fcrepo/commit/814bdd59dedff996c19f1a0c4af6fd95c6658c91", "message": "Code review", "committedDate": "2020-04-01T17:59:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwOTcxNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401809717", "bodyText": "Isn't this the same as return FedoraID.create(this.getResourceId(), addition)?", "author": "pwinckles", "createdAt": "2020-04-01T18:06:57Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -181,21 +189,23 @@ public String getMementoString() {\n     }\n \n     /**\n-     * Add a part onto this identifier.\n-     * @param addition The additional string.\n+     * Create a new FedoraID using the resource ID as the base\n+     * @param addition One or more additional strings.\n      * @return new FedoraID for the new identifier.\n      */\n-    public FedoraID addToResourceId(final String addition) {\n-        return FedoraID.create(this.getResourceId() + (this.getResourceId().endsWith(\"/\") ? \"\" : \"/\") + addition);\n+    public FedoraID addToResourceId(final String... addition) {\n+        final var newId = idBuilder(this.getResourceId(), addition);\n+        return new FedoraID(newId);", "originalCommit": "814bdd59dedff996c19f1a0c4af6fd95c6658c91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NjkzOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r401886939", "bodyText": "Sure, I can do that", "author": "whikloj", "createdAt": "2020-04-01T20:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwOTcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "4279d79c3ad1a69ed43538566b0c3a52b009b198", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c4f5250924..061a483d63 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -194,8 +194,7 @@ public class FedoraID {\n      * @return new FedoraID for the new identifier.\n      */\n     public FedoraID addToResourceId(final String... addition) {\n-        final var newId = idBuilder(this.getResourceId(), addition);\n-        return new FedoraID(newId);\n+        return FedoraID.create(this.getResourceId(), addition);\n     }\n \n     /**\n"}}, {"oid": "4279d79c3ad1a69ed43538566b0c3a52b009b198", "url": "https://github.com/fcrepo/fcrepo/commit/4279d79c3ad1a69ed43538566b0c3a52b009b198", "message": "Reuse FedoraID.create()", "committedDate": "2020-04-01T20:28:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDk2Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r402580967", "bodyText": "If we have the FedoraResource, aclResource, why not just call aclResource.getFedoraId()?", "author": "awoods", "createdAt": "2020-04-02T20:08:39Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraAcl.java", "diffHunk": "@@ -138,6 +139,7 @@ public Response createFedoraWebacAcl(@HeaderParam(CONTENT_TYPE) final MediaType\n \n         aclResource = webacAclService.findOrCreate(transaction, path);\n         created = aclResource.isNew();\n+        final FedoraID aclId = FedoraID.create(aclResource.getId());", "originalCommit": "4279d79c3ad1a69ed43538566b0c3a52b009b198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67b6cddf170831f95963f2fc2b3b06ce0622ff82", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraAcl.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraAcl.java\nindex 089c1b5792..25a0b2af24 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraAcl.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraAcl.java\n\n@@ -139,7 +139,7 @@ public class FedoraAcl extends ContentExposingResource {\n \n         aclResource = webacAclService.findOrCreate(transaction, path);\n         created = aclResource.isNew();\n-        final FedoraID aclId = FedoraID.create(aclResource.getId());\n+        final FedoraID aclId = aclResource.getFedoraId();\n \n         final MediaType contentType =\n             requestContentType == null ? RDFMediaType.TURTLE_TYPE : valueOf(getSimpleContentType(requestContentType));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MzI0NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r402583245", "bodyText": "I would suggest we add a helper method. Seeing how the identifierConverter is making the sausage seems fragile and complex.", "author": "awoods", "createdAt": "2020-04-02T20:13:34Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -148,11 +144,11 @@ protected Node asNode(final FedoraResource resource) {\n      */\n     @VisibleForTesting\n     public FedoraResource getResourceFromPath(final String externalPath) {\n-        final String fedoraId = identifierConverter().toInternalId(identifierConverter().toDomain(externalPath));\n-        final Instant memento = extractMemento(externalPath);\n+        final FedoraID fedoraId = FedoraID.create(identifierConverter().toInternalId(identifierConverter()", "originalCommit": "4279d79c3ad1a69ed43538566b0c3a52b009b198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java\nindex 4200fb4284..ec276e8835 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java\n\n@@ -144,8 +140,7 @@ abstract public class FedoraBaseResource extends AbstractResource {\n      */\n     @VisibleForTesting\n     public FedoraResource getResourceFromPath(final String externalPath) {\n-        final FedoraID fedoraId = FedoraID.create(identifierConverter().toInternalId(identifierConverter()\n-                .toDomain(externalPath)));\n+        final FedoraID fedoraId = FedoraID.create(identifierConverter().pathToInternalId(externalPath));\n \n         try {\n             final FedoraResource fedoraResource = resourceFactory.getResource(transaction, fedoraId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4ODk5Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r402588996", "bodyText": "Can also remove the private \"MEMENTO_LABEL_FORMATTER\" at the top of this class:\nhttps://github.com/fcrepo4/fcrepo4/pull/1652/files#diff-3f238be750488e3730daa409a69174b6R64", "author": "awoods", "createdAt": "2020-04-02T20:26:42Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -208,18 +204,6 @@ private String getBaseUrlProperty(final UriInfo uriInfo) {\n         return \"\";\n     }\n \n-    private Instant extractMemento(final String externalPath) {\n-        final var matcher = MEMENTO_PATH_PATTERN.matcher(externalPath);\n-        if (matcher.matches()) {\n-            try {\n-                return Instant.from(VersionService.MEMENTO_LABEL_FORMATTER.parse(matcher.group(1)));", "originalCommit": "4279d79c3ad1a69ed43538566b0c3a52b009b198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5MzA2MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r402593061", "bodyText": "I think we should be able to remove this pre-FedoraID method.", "author": "awoods", "createdAt": "2020-04-02T20:42:30Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java", "diffHunk": "@@ -91,4 +92,13 @@\n      * @return True if it is in the index.\n      */\n     boolean resourceExists(final String txID, final String resourceID);", "originalCommit": "4279d79c3ad1a69ed43538566b0c3a52b009b198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67b6cddf170831f95963f2fc2b3b06ce0622ff82", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\nindex ce8e9ab1ab..da6c0a7dfb 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\n\n@@ -84,15 +84,6 @@ public interface ContainmentIndex {\n      */\n     void rollbackTransaction(final Transaction tx);\n \n-    /**\n-     * Check if the resourceID exists in the containment index. Which should mean it exists.\n-     *\n-     * @param txID The transaction ID or null if not transaction.\n-     * @param resourceID The resource ID.\n-     * @return True if it is in the index.\n-     */\n-    boolean resourceExists(final String txID, final String resourceID);\n-\n     /**\n      * Check if the resourceID exists in the containment index. Which should mean it exists.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5MzUxOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r402593518", "bodyText": "I would be inclined to revisit the method signatures in this interface... lots of String identifiers.", "author": "awoods", "createdAt": "2020-04-02T20:43:56Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n import java.util.stream.Stream;\n \n+import org.fcrepo.kernel.api.identifiers.FedoraID;\n import org.fcrepo.kernel.api.models.FedoraResource;\n \n /**", "originalCommit": "4279d79c3ad1a69ed43538566b0c3a52b009b198", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUyMDg4Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r403520887", "bodyText": "Done", "author": "whikloj", "createdAt": "2020-04-04T21:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5MzUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\nindex ce8e9ab1ab..d1e2015ace 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\n\n@@ -19,7 +19,7 @@ package org.fcrepo.kernel.api;\n \n import java.util.stream.Stream;\n \n-import org.fcrepo.kernel.api.identifiers.FedoraID;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n import org.fcrepo.kernel.api.models.FedoraResource;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMzU0OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r402603548", "bodyText": "It would be nice (in the future) if the parentId were also a FedoraID.", "author": "awoods", "createdAt": "2020-04-02T21:21:51Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java", "diffHunk": "@@ -275,7 +281,7 @@ protected PersistentStorageSession getSession() {\n \n     @Override\n     public FedoraResource getParent() throws PathNotFoundException {\n-        return resourceFactory.getResource(parentId);\n+        return resourceFactory.getResource(FedoraID.create(parentId));", "originalCommit": "4279d79c3ad1a69ed43538566b0c3a52b009b198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java\nindex 70eaa20b21..99c0d8fcf4 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java\n\n@@ -281,7 +281,7 @@ public class FedoraResourceImpl implements FedoraResource {\n \n     @Override\n     public FedoraResource getParent() throws PathNotFoundException {\n-        return resourceFactory.getResource(FedoraID.create(parentId));\n+        return resourceFactory.getResource(FedoraId.create(parentId));\n     }\n \n     @Override\n"}}, {"oid": "67b6cddf170831f95963f2fc2b3b06ce0622ff82", "url": "https://github.com/fcrepo/fcrepo/commit/67b6cddf170831f95963f2fc2b3b06ce0622ff82", "message": "Code review", "committedDate": "2020-04-04T15:44:26Z", "type": "commit"}, {"oid": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "url": "https://github.com/fcrepo/fcrepo/commit/87f07e941e288ae2c9fba556eb107e9faf8e9738", "message": "Helper to go from external uri path to internal ID", "committedDate": "2020-04-04T20:58:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE3MTE2NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404171164", "bodyText": "I wonder if we could rename this method to make it a bit clearer that this is a factory method. createRootID or getRepositoryRootID maybe? On my initial skim i was thinking this was a getter method for retrieving the \"root\" portion of an ID, even though its obviously a static method.", "author": "bbpennel", "createdAt": "2020-04-06T15:14:16Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -50,24 +67,39 @@\n \n     /**\n      * Basic constructor.\n-     * @param fullId The full identifier.\n+     * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    public FedoraID(final String fullId) {\n-        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n-            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n-        }\n-        this.fullId = fullId;\n+    private FedoraID(final String fullId) {\n+        this.fullId = ensurePrefix(fullId);\n         if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n             // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n             this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         }\n         // Carry the path of the request for any exceptions.\n-        this.externalPath = fullId.substring(FEDORA_ID_PREFIX.length());\n+        this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());\n \n         processIdentifier();\n     }\n \n+    /**\n+     * Static create method\n+     * @param fullId The ID to use for the FedoraID.\n+     * @return The FedoraID.\n+     */\n+    public static FedoraID create(final String fullId, final String... additions) {\n+        final var newId = idBuilder(fullId, additions);\n+        return new FedoraID(newId);\n+    }\n+\n+    /**\n+     * Get a FedoraID for repository root.\n+     * @return The FedoraID for repository root.\n+     */\n+    public static FedoraID getRoot() {", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nsimilarity index 87%\nrename from fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nrename to fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nindex 061a483d63..80b941b90e 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\n\n@@ -70,12 +70,9 @@ public class FedoraID {\n      * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    private FedoraID(final String fullId) {\n+    private FedoraId(final String fullId) {\n         this.fullId = ensurePrefix(fullId);\n-        if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n-            // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n-            this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n-        }\n+        this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         // Carry the path of the request for any exceptions.\n         this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4MDQzMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404180433", "bodyText": "mockFedoraID and mockFedoraMementoID don't actually appear to be a mocks, might be good to remove the mock part to avoid confusion.", "author": "bbpennel", "createdAt": "2020-04-06T15:26:08Z", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java", "diffHunk": "@@ -92,25 +104,45 @@\n \n     private ResourceHeadersImpl resourceHeaders;\n \n-    private ResourceFactoryImpl factory;\n-\n     private String fedoraId;\n \n     private String sessionId;\n \n+    private FedoraID rootId = FedoraID.getRoot();\n+\n+    private FedoraID mockFedoraID;", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5ODQzNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404298435", "bodyText": "Yeah, I thought about that and never got back to it.", "author": "whikloj", "createdAt": "2020-04-06T18:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4MDQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java b/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java\nindex 1e449b6ce9..ae93b9ebd1 100644\n--- a/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java\n+++ b/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java\n\n@@ -104,17 +106,17 @@ public class ResourceFactoryImplTest {\n \n     private ResourceHeadersImpl resourceHeaders;\n \n-    private String fedoraId;\n+    private String fedoraIdStr;\n \n     private String sessionId;\n \n-    private FedoraID rootId = FedoraID.getRoot();\n+    private FedoraId rootId = FedoraId.getRepositoryRootId();\n \n-    private FedoraID mockFedoraID;\n+    private FedoraId fedoraId;\n \n-    private String fedoraMementoId;\n+    private String fedoraMementoIdStr;\n \n-    private FedoraID mockFedoraMementoID;\n+    private FedoraId fedoraMementoId;\n \n     @Mock\n     private Transaction mockTx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MjUyMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404192522", "bodyText": "It seems possible that the parts could start/end with more than one slash. Could consolidate this into a regex to trim both ends, something like .replaceAll(\"(^/+|/+$)\", \"\").\nAlternatively, if you want to go into apache commons land, there is  StringUtils.strip(s, \"/\"):\nhttp://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/StringUtils.html#strip-java.lang.String-java.lang.String-", "author": "bbpennel", "createdAt": "2020-04-06T15:42:10Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -156,6 +188,88 @@ public String getMementoString() {\n         return mementoDatetimeStr;\n     }\n \n+    /**\n+     * Create a new FedoraID using the resource ID as the base\n+     * @param addition One or more additional strings.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToResourceId(final String... addition) {\n+        return FedoraID.create(this.getResourceId(), addition);\n+    }\n+\n+    /**\n+     * Create a new FedoraID using the full ID as the base.\n+     * @param addition One or more additional strings.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToFullId(final String... addition) {\n+        return FedoraID.create(this.getFullId(), addition);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof FedoraID)) {\n+            return false;\n+        }\n+\n+        final var testObj = (FedoraID) obj;\n+        return Objects.equals(testObj.getFullId(), this.getFullId());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return getFullId().hashCode();\n+    }\n+\n+    /**\n+     * Takes one or more strings and combines them with /s\n+     * @param firstPart The first part of the id, if blank return a zero length string.\n+     * @param parts Zero or more additional string.\n+     * @return A string of all parts with combined with /s\n+     */\n+    private static String idBuilder(final String firstPart, final String... parts) {\n+        if (firstPart == null) {\n+            return \"\";\n+        }\n+        final String[] allParts = Stream.of(new String[]{firstPart}, parts).flatMap(Stream::of).toArray(String[]::new);\n+        return idBuilder(allParts);\n+    }\n+\n+    /**\n+     * Concatenates all the parts with slashes\n+     * @param parts array of strings\n+     * @return the concatenated string.\n+     */\n+    private static String idBuilder(final String... parts) {\n+        if (parts != null && parts.length > 0) {\n+            final String id = Arrays.stream(parts).map(s -> s.startsWith(\"/\") ? s.substring(1) : s)", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMjc3NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404302775", "bodyText": "I did think about that, but I was thinking that the use of array of strings would be internal to the codebase (as we normally pass in the full ID from the HTTP level). So it would be our bad code that would include multiple slashes. So not stripping them would (hopefully) catch those errors before they got to the code base. I can strip them, just wanted to outline my thought process.", "author": "whikloj", "createdAt": "2020-04-06T18:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MjUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nsimilarity index 87%\nrename from fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nrename to fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nindex 061a483d63..80b941b90e 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\n\n@@ -189,21 +186,32 @@ public class FedoraID {\n     }\n \n     /**\n-     * Create a new FedoraID using the resource ID as the base\n+     * Descriptions are needed to retrieve from the persistence, but otherwise is just an addendum to the binary.\n+     * @return The description ID or null if not a description.\n+     */\n+    public String getDescriptionId() {\n+        if (isDescription()) {\n+            return getResourceId() + \"/\" + FCR_METADATA;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Create a new FedoraId using the resource ID as the base\n      * @param addition One or more additional strings.\n-     * @return new FedoraID for the new identifier.\n+     * @return new FedoraId for the new identifier.\n      */\n-    public FedoraID addToResourceId(final String... addition) {\n-        return FedoraID.create(this.getResourceId(), addition);\n+    public FedoraId addToResourceId(final String... addition) {\n+        return FedoraId.create(this.getResourceId(), addition);\n     }\n \n     /**\n-     * Create a new FedoraID using the full ID as the base.\n+     * Create a new FedoraId using the full ID as the base.\n      * @param addition One or more additional strings.\n-     * @return new FedoraID for the new identifier.\n+     * @return new FedoraId for the new identifier.\n      */\n-    public FedoraID addToFullId(final String... addition) {\n-        return FedoraID.create(this.getFullId(), addition);\n+    public FedoraId addToFullId(final String... addition) {\n+        return FedoraId.create(this.getFullId(), addition);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwMjQ2Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404202462", "bodyText": "A minor thing, but I'm trying to get a sense of the standard in this project for capitalization of acronyms in class names. For the most part, I am seeing camel case used, such as FedoraLdp, FedoraAcl, DefaultRdfStream. The only exception appears to be fcrepo-persistence-ocfl which has a mixture. Camel case is also used for all variable/method names in this class. I'm wondering if it might be most consistent to name the class FedoraId. Just a suggestion though.\nOne other thing, does the parameter need to be the fullId? It seems like we are passing the resource id in some cases.", "author": "bbpennel", "createdAt": "2020-04-06T15:55:25Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -50,24 +67,39 @@\n \n     /**\n      * Basic constructor.\n-     * @param fullId The full identifier.\n+     * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    public FedoraID(final String fullId) {\n-        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n-            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n-        }\n-        this.fullId = fullId;\n+    private FedoraID(final String fullId) {", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNzY5OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404307698", "bodyText": "Not really, you always have to pass in the entire ID. Now for a resource the resourceID == fullID, but if you are at the TimeMap then you HAVE to create the FedoraId with the full id (ie. object1/fcr:versions) or else the FedoraId won't know it is a timemap.", "author": "whikloj", "createdAt": "2020-04-06T18:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwMjQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNDM5MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404334391", "bodyText": "Okay, I was mainly asking about if it was the fullId because one of the addTo methods passes in the resource id, so wanted to double check if the variable name and documentation should declare it as fullId", "author": "bbpennel", "createdAt": "2020-04-06T19:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwMjQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nsimilarity index 87%\nrename from fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nrename to fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nindex 061a483d63..80b941b90e 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\n\n@@ -70,12 +70,9 @@ public class FedoraID {\n      * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    private FedoraID(final String fullId) {\n+    private FedoraId(final String fullId) {\n         this.fullId = ensurePrefix(fullId);\n-        if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n-            // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n-            this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n-        }\n+        this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         // Carry the path of the request for any exceptions.\n         this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwNTgzNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404205834", "bodyText": "Only strip trailing slashes if the ID", "author": "bbpennel", "createdAt": "2020-04-06T15:59:54Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -50,24 +67,39 @@\n \n     /**\n      * Basic constructor.\n-     * @param fullId The full identifier.\n+     * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    public FedoraID(final String fullId) {\n-        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n-            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n-        }\n-        this.fullId = fullId;\n+    private FedoraID(final String fullId) {\n+        this.fullId = ensurePrefix(fullId);\n         if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n             // Only strip trailing slashes the ID is more than the info:fedora/ prefix.", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nsimilarity index 87%\nrename from fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nrename to fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nindex 061a483d63..80b941b90e 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\n\n@@ -70,12 +70,9 @@ public class FedoraID {\n      * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    private FedoraID(final String fullId) {\n+    private FedoraId(final String fullId) {\n         this.fullId = ensurePrefix(fullId);\n-        if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n-            // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n-            this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n-        }\n+        this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         // Carry the path of the request for any exceptions.\n         this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNTc1Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404215752", "bodyText": "I'm wondering about the need for both addToResourceId and addToFullId. The former seems to exclusively be used for adding fcr:metadata to the end of an id at the moment. If its predictable/practical, maybe we could have one method which knows when to start from each variation of the id, rather than leaving it to the rest of the code base to reason it?\nIf it did end up just being addToId, it might be clearer to use language like resolve or resolveId instead. We're using that verb in many other places for specialized concatenation methods, and its also used by core java classes, like Path.", "author": "bbpennel", "createdAt": "2020-04-06T16:13:44Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -156,6 +188,88 @@ public String getMementoString() {\n         return mementoDatetimeStr;\n     }\n \n+    /**\n+     * Create a new FedoraID using the resource ID as the base\n+     * @param addition One or more additional strings.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToResourceId(final String... addition) {", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMzM0Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404313346", "bodyText": "I think I understand what you are saying, but I am unclear on what you are suggesting it looks like.", "author": "whikloj", "createdAt": "2020-04-06T18:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNTc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0MzU4Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404343587", "bodyText": "This partly depends on what you think about another suggestion, further down:\n#1652 (comment)\nBut if we end up keeping fcr:metadata in the fullId, a call to resolveId(String... additions) would inspect the additions. If one of them was fcr:metadata, I believe we would want it to call return FedoraID.create(this.getResourceId(), addition);, otherwise we call return FedoraID.create(this.getFullId(), addition);", "author": "bbpennel", "createdAt": "2020-04-06T19:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNTc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nsimilarity index 87%\nrename from fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nrename to fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nindex 061a483d63..80b941b90e 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\n\n@@ -189,21 +186,32 @@ public class FedoraID {\n     }\n \n     /**\n-     * Create a new FedoraID using the resource ID as the base\n+     * Descriptions are needed to retrieve from the persistence, but otherwise is just an addendum to the binary.\n+     * @return The description ID or null if not a description.\n+     */\n+    public String getDescriptionId() {\n+        if (isDescription()) {\n+            return getResourceId() + \"/\" + FCR_METADATA;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Create a new FedoraId using the resource ID as the base\n      * @param addition One or more additional strings.\n-     * @return new FedoraID for the new identifier.\n+     * @return new FedoraId for the new identifier.\n      */\n-    public FedoraID addToResourceId(final String... addition) {\n-        return FedoraID.create(this.getResourceId(), addition);\n+    public FedoraId addToResourceId(final String... addition) {\n+        return FedoraId.create(this.getResourceId(), addition);\n     }\n \n     /**\n-     * Create a new FedoraID using the full ID as the base.\n+     * Create a new FedoraId using the full ID as the base.\n      * @param addition One or more additional strings.\n-     * @return new FedoraID for the new identifier.\n+     * @return new FedoraId for the new identifier.\n      */\n-    public FedoraID addToFullId(final String... addition) {\n-        return FedoraID.create(this.getFullId(), addition);\n+    public FedoraId addToFullId(final String... addition) {\n+        return FedoraId.create(this.getFullId(), addition);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMTkxMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404221911", "bodyText": "this is the only usage of idBuilder(String... parts), it might make sense to merge these methods. In which case you could also skip over the intermediate array, keeping things streaming through the joining", "author": "bbpennel", "createdAt": "2020-04-06T16:22:48Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -156,6 +188,88 @@ public String getMementoString() {\n         return mementoDatetimeStr;\n     }\n \n+    /**\n+     * Create a new FedoraID using the resource ID as the base\n+     * @param addition One or more additional strings.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToResourceId(final String... addition) {\n+        return FedoraID.create(this.getResourceId(), addition);\n+    }\n+\n+    /**\n+     * Create a new FedoraID using the full ID as the base.\n+     * @param addition One or more additional strings.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToFullId(final String... addition) {\n+        return FedoraID.create(this.getFullId(), addition);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof FedoraID)) {\n+            return false;\n+        }\n+\n+        final var testObj = (FedoraID) obj;\n+        return Objects.equals(testObj.getFullId(), this.getFullId());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return getFullId().hashCode();\n+    }\n+\n+    /**\n+     * Takes one or more strings and combines them with /s\n+     * @param firstPart The first part of the id, if blank return a zero length string.\n+     * @param parts Zero or more additional string.\n+     * @return A string of all parts with combined with /s\n+     */\n+    private static String idBuilder(final String firstPart, final String... parts) {\n+        if (firstPart == null) {\n+            return \"\";\n+        }\n+        final String[] allParts = Stream.of(new String[]{firstPart}, parts).flatMap(Stream::of).toArray(String[]::new);\n+        return idBuilder(allParts);", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nsimilarity index 87%\nrename from fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nrename to fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nindex 061a483d63..80b941b90e 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\n\n@@ -189,21 +186,32 @@ public class FedoraID {\n     }\n \n     /**\n-     * Create a new FedoraID using the resource ID as the base\n+     * Descriptions are needed to retrieve from the persistence, but otherwise is just an addendum to the binary.\n+     * @return The description ID or null if not a description.\n+     */\n+    public String getDescriptionId() {\n+        if (isDescription()) {\n+            return getResourceId() + \"/\" + FCR_METADATA;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Create a new FedoraId using the resource ID as the base\n      * @param addition One or more additional strings.\n-     * @return new FedoraID for the new identifier.\n+     * @return new FedoraId for the new identifier.\n      */\n-    public FedoraID addToResourceId(final String... addition) {\n-        return FedoraID.create(this.getResourceId(), addition);\n+    public FedoraId addToResourceId(final String... addition) {\n+        return FedoraId.create(this.getResourceId(), addition);\n     }\n \n     /**\n-     * Create a new FedoraID using the full ID as the base.\n+     * Create a new FedoraId using the full ID as the base.\n      * @param addition One or more additional strings.\n-     * @return new FedoraID for the new identifier.\n+     * @return new FedoraId for the new identifier.\n      */\n-    public FedoraID addToFullId(final String... addition) {\n-        return FedoraID.create(this.getFullId(), addition);\n+    public FedoraId addToFullId(final String... addition) {\n+        return FedoraId.create(this.getFullId(), addition);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMzYyMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404223622", "bodyText": "it'd be nice if there was a constant for this prefix somewhere, maybe either here or in FedoraTypes before FEDORA_ID_PREFIX", "author": "bbpennel", "createdAt": "2020-04-06T16:25:20Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -156,6 +188,88 @@ public String getMementoString() {\n         return mementoDatetimeStr;\n     }\n \n+    /**\n+     * Create a new FedoraID using the resource ID as the base\n+     * @param addition One or more additional strings.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToResourceId(final String... addition) {\n+        return FedoraID.create(this.getResourceId(), addition);\n+    }\n+\n+    /**\n+     * Create a new FedoraID using the full ID as the base.\n+     * @param addition One or more additional strings.\n+     * @return new FedoraID for the new identifier.\n+     */\n+    public FedoraID addToFullId(final String... addition) {\n+        return FedoraID.create(this.getFullId(), addition);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof FedoraID)) {\n+            return false;\n+        }\n+\n+        final var testObj = (FedoraID) obj;\n+        return Objects.equals(testObj.getFullId(), this.getFullId());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return getFullId().hashCode();\n+    }\n+\n+    /**\n+     * Takes one or more strings and combines them with /s\n+     * @param firstPart The first part of the id, if blank return a zero length string.\n+     * @param parts Zero or more additional string.\n+     * @return A string of all parts with combined with /s\n+     */\n+    private static String idBuilder(final String firstPart, final String... parts) {\n+        if (firstPart == null) {\n+            return \"\";\n+        }\n+        final String[] allParts = Stream.of(new String[]{firstPart}, parts).flatMap(Stream::of).toArray(String[]::new);\n+        return idBuilder(allParts);\n+    }\n+\n+    /**\n+     * Concatenates all the parts with slashes\n+     * @param parts array of strings\n+     * @return the concatenated string.\n+     */\n+    private static String idBuilder(final String... parts) {\n+        if (parts != null && parts.length > 0) {\n+            final String id = Arrays.stream(parts).map(s -> s.startsWith(\"/\") ? s.substring(1) : s)\n+                    .map(s -> s.endsWith(\"/\") ? s.substring(0, s.length() -1 ) : s)\n+                    .collect(Collectors.joining(\"/\"));\n+            if (id.equals(\"info:fedora\")) {", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMzg4NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404313884", "bodyText": "I could switch it to FEDORA_ID_PREFIX.equals(id + \"/\")", "author": "whikloj", "createdAt": "2020-04-06T18:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMzYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTk5MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404319990", "bodyText": "Or I can just make FEDORA_ID_PREFIX = \"info:fedora\"; and we have to add the slash, it seems wrong to have\nString FEDORA_ID_PREFIX = \"info:fedora/\";\nString FEDORA_ID_PREFIX_WO_SLASH = \"info:fedora\";", "author": "whikloj", "createdAt": "2020-04-06T19:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMzYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNjYxOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404336618", "bodyText": "Maybe over in FedoraTypes:\nString FEDORA_ID_NS = \"info:fedora\";\nString FEDORA_ID_PREFIX = FEDORA_ID_NS + \"/\";", "author": "bbpennel", "createdAt": "2020-04-06T19:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMzYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nsimilarity index 87%\nrename from fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nrename to fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nindex 061a483d63..80b941b90e 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\n\n@@ -189,21 +186,32 @@ public class FedoraID {\n     }\n \n     /**\n-     * Create a new FedoraID using the resource ID as the base\n+     * Descriptions are needed to retrieve from the persistence, but otherwise is just an addendum to the binary.\n+     * @return The description ID or null if not a description.\n+     */\n+    public String getDescriptionId() {\n+        if (isDescription()) {\n+            return getResourceId() + \"/\" + FCR_METADATA;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Create a new FedoraId using the resource ID as the base\n      * @param addition One or more additional strings.\n-     * @return new FedoraID for the new identifier.\n+     * @return new FedoraId for the new identifier.\n      */\n-    public FedoraID addToResourceId(final String... addition) {\n-        return FedoraID.create(this.getResourceId(), addition);\n+    public FedoraId addToResourceId(final String... addition) {\n+        return FedoraId.create(this.getResourceId(), addition);\n     }\n \n     /**\n-     * Create a new FedoraID using the full ID as the base.\n+     * Create a new FedoraId using the full ID as the base.\n      * @param addition One or more additional strings.\n-     * @return new FedoraID for the new identifier.\n+     * @return new FedoraId for the new identifier.\n      */\n-    public FedoraID addToFullId(final String... addition) {\n-        return FedoraID.create(this.getFullId(), addition);\n+    public FedoraId addToFullId(final String... addition) {\n+        return FedoraId.create(this.getFullId(), addition);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzgxNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404233814", "bodyText": "I'm a little confused what externalPath is. Seems like its just used for presenting ids in exception messages, but also is not the same as an externalId? Maybe displayId or unprefixId would be clearer?", "author": "bbpennel", "createdAt": "2020-04-06T16:40:24Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -50,24 +67,39 @@\n \n     /**\n      * Basic constructor.\n-     * @param fullId The full identifier.\n+     * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    public FedoraID(final String fullId) {\n-        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n-            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n-        }\n-        this.fullId = fullId;\n+    private FedoraID(final String fullId) {\n+        this.fullId = ensurePrefix(fullId);\n         if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n             // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n             this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         }\n         // Carry the path of the request for any exceptions.\n-        this.externalPath = fullId.substring(FEDORA_ID_PREFIX.length());\n+        this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNTIwNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404315204", "bodyText": "Yes it is the external path of the request which is the same as the full id without the FEDORA_ID_PREFIX (but with a leading / added). If that is confusing I could make a private method that just strips info:fedora off the front of the fullId", "author": "whikloj", "createdAt": "2020-04-06T18:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzODQwNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404338405", "bodyText": "Might mainly be the word \"external\" that's throwing me off since we use it elsewhere to describe the form of an id presented at the HTTP layer, like \"http://localhost:8080/fcrepo/rest/12345\". Whether it comes from a precalculated variable or a helper method is okay with me.", "author": "bbpennel", "createdAt": "2020-04-06T19:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nsimilarity index 87%\nrename from fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nrename to fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\nindex 061a483d63..80b941b90e 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java\n\n@@ -70,12 +70,9 @@ public class FedoraID {\n      * @param fullId The full identifier or null if root.\n      * @throws IllegalArgumentException If ID does not start with expected prefix.\n      */\n-    private FedoraID(final String fullId) {\n+    private FedoraId(final String fullId) {\n         this.fullId = ensurePrefix(fullId);\n-        if (!this.fullId.equals(FEDORA_ID_PREFIX)) {\n-            // Only strip trailing slashes the ID is more than the info:fedora/ prefix.\n-            this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n-        }\n+        this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         // Carry the path of the request for any exceptions.\n         this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDM5NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404234394", "bodyText": "Maybe its out of scope for this PR, but might make sense for the identifier converter to be able to take FedoraIds?", "author": "bbpennel", "createdAt": "2020-04-06T16:41:17Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -428,7 +427,7 @@ private RdfStream getTriples(final FedoraResource resource, final TripleCategory\n     protected URI getUri(final FedoraResource resource) {\n         try {\n             final String uri = identifierConverter()\n-                    .toExternalId(FedoraResourceIdConverter.resolveFedoraId(resource));\n+                    .toExternalId(resource.getFedoraId().getFullId());", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDk3Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404234973", "bodyText": "Similarly, perhaps the converter should be able to directly produce FedoraId", "author": "bbpennel", "createdAt": "2020-04-06T16:42:08Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -148,11 +140,10 @@ protected Node asNode(final FedoraResource resource) {\n      */\n     @VisibleForTesting\n     public FedoraResource getResourceFromPath(final String externalPath) {\n-        final String fedoraId = identifierConverter().toInternalId(identifierConverter().toDomain(externalPath));\n-        final Instant memento = extractMemento(externalPath);\n+        final FedoraID fedoraId = FedoraID.create(identifierConverter().pathToInternalId(externalPath));", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java\nindex ec276e8835..d979a3a015 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java\n\n@@ -140,7 +140,7 @@ abstract public class FedoraBaseResource extends AbstractResource {\n      */\n     @VisibleForTesting\n     public FedoraResource getResourceFromPath(final String externalPath) {\n-        final FedoraID fedoraId = FedoraID.create(identifierConverter().pathToInternalId(externalPath));\n+        final FedoraId fedoraId = identifierConverter().pathToInternalId(externalPath);\n \n         try {\n             final FedoraResource fedoraResource = resourceFactory.getResource(transaction, fedoraId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0Mjc1Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404242756", "bodyText": "It might make sense to add a reasonable toString method to FedoraId so that we don't need to call a method explicitly during log statements like this", "author": "bbpennel", "createdAt": "2020-04-06T16:53:58Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -824,28 +825,14 @@ private String mintNewPid(final String fedoraId, final String slug) {\n             pid = defaultPidMinter.get();\n         }\n \n-        String fullTestPath = addToIdentifier(fedoraId, pid);\n-        fullTestPath = URLDecoder.decode(fullTestPath, UTF_8);\n+        final FedoraID fullTestPath = fedoraId.addToFullId(pid);\n \n         if (doesResourceExist(transaction, fullTestPath)) {\n-            LOGGER.trace(\"Resource with path {} already exists; minting new path instead\", fullTestPath);\n+            LOGGER.trace(\"Resource with path {} already exists; minting new path instead\", fullTestPath.getFullId());", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java\nindex 13663adc1d..52e4f875b8 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java\n\n@@ -825,10 +823,10 @@ public class FedoraLdp extends ContentExposingResource {\n             pid = defaultPidMinter.get();\n         }\n \n-        final FedoraID fullTestPath = fedoraId.addToFullId(pid);\n+        final FedoraId fullTestPath = fedoraId.addToFullId(pid);\n \n         if (doesResourceExist(transaction, fullTestPath)) {\n-            LOGGER.trace(\"Resource with path {} already exists; minting new path instead\", fullTestPath.getFullId());\n+            LOGGER.trace(\"Resource with path {} already exists; minting new path instead\", fullTestPath);\n             return mintNewPid(fedoraId, null);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0NzQyNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404247425", "bodyText": "I guess these tests are disabled anyways so maybe there's not much point on fixing this, but mockContainer.getId() isn't mocked, so it just returns null. Maybe it should be initialized with path which seems to be the id used in these tests? Or maybe you were saving updating this for later?", "author": "bbpennel", "createdAt": "2020-04-06T17:00:59Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -285,10 +288,13 @@ public void setUp() {\n         when(mockServletContext.getContextPath()).thenReturn(\"/\");\n \n         when(prefer.getReturn()).thenReturn(preferTag);\n-                doAnswer((Answer<HttpServletResponse>) invocation -> {\n-                    mockResponse.addHeader(\"Preference-Applied\", \"return=representation\");\n-                    return null;\n-                }).when(preferTag).addResponseHeaders(mockResponse);\n+\n+        doAnswer((Answer<HttpServletResponse>) invocation -> {\n+            mockResponse.addHeader(\"Preference-Applied\", \"return=representation\");\n+            return null;\n+        }).when(preferTag).addResponseHeaders(mockResponse);\n+\n+        fedoraID = FedoraID.create(mockContainer.getId());", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzA1OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404317058", "bodyText": "It was mocked but then I un-mocked it in the last commit (I think). There was so much mocking I started to lose track.", "author": "whikloj", "createdAt": "2020-04-06T18:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0NzQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\nindex 9a068eb42f..e3904f10fe 100644\n--- a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n+++ b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n\n@@ -294,7 +294,7 @@ public class FedoraLdpTest {\n             return null;\n         }).when(preferTag).addResponseHeaders(mockResponse);\n \n-        fedoraID = FedoraID.create(mockContainer.getId());\n+        fedoraID = FedoraId.create(mockContainer.getId());\n     }\n \n     private FedoraResource setResource(final Class<? extends FedoraResource> klass) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1MjIwNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404252204", "bodyText": "Should we be trying to deprecate this method in favor of using getFedoraId everywhere?", "author": "bbpennel", "createdAt": "2020-04-06T17:08:32Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/FedoraResource.java", "diffHunk": "@@ -41,6 +42,12 @@\n      */\n     String getId();", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzQ4MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404317480", "bodyText": "#1652 (comment)", "author": "whikloj", "createdAt": "2020-04-06T18:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1MjIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/FedoraResource.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/FedoraResource.java\nindex 7742c61cb4..4cb9c8b6b8 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/FedoraResource.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/FedoraResource.java\n\n@@ -43,10 +43,10 @@ public interface FedoraResource {\n     String getId();\n \n     /**\n-     * Get the FedoraID for this resource.\n-     * @return the FedoraID identifier.\n+     * Get the FedoraId for this resource.\n+     * @return the FedoraId identifier.\n      */\n-    FedoraID getFedoraId();\n+    FedoraId getFedoraId();\n \n     /**\n      * Get the resource which contains this resource.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2ODA3OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404268078", "bodyText": "Maybe pass in either the FedoraId or the FedoraResource to getChildren and let it decide what info it needs?", "author": "bbpennel", "createdAt": "2020-04-06T17:33:57Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -255,11 +257,12 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n     @Override\n     public Stream<String> getContains(final Transaction tx, final FedoraResource fedoraResource) {\n         final String txId = (tx != null) ? tx.getId() : null;\n-        return getChildren(fedoraResource.getId(), txId);\n+        return getChildren(fedoraResource.getFedoraId().getFullId(), txId);", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\nindex dc27367700..b44ed96b26 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\n\n@@ -249,7 +250,7 @@ public class ContainmentIndexImpl implements ContainmentIndex {\n             // not in a transaction\n             children = jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class);\n         }\n-        LOGGER.debug(\"getChildren for {} in transaction {} found {} children\", fedoraId, transactionId,\n+        LOGGER.debug(\"getChildren for {} in transaction {} found {} children\", resourceId, transactionId,\n                 children.size());\n         return children.stream();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3OTgwMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404279803", "bodyText": "The fcr:metadata comes and goes a lot. Would it make sense to have a getter method in FedoraId like getDescriptionId, and then have the fcr:metadata bit get stripped off like all the other suffixes?", "author": "bbpennel", "createdAt": "2020-04-06T17:53:06Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -57,64 +60,75 @@\n     @Inject\n     private PersistentStorageSessionManager persistentStorageSessionManager;\n \n-    @Override\n-    public FedoraResource getResource(final String identifier)\n-            throws PathNotFoundException {\n-        return getResource(null, identifier);\n-    }\n+    @Inject\n+    private ContainmentIndex containmentIndex;\n \n     @Override\n-    public FedoraResource getResource(final Transaction transaction, final String identifier)\n+    public FedoraResource getResource(final FedoraID fedoraID)\n             throws PathNotFoundException {\n-        return getResource(transaction, identifier, (Instant) null);\n+        return getResource(null, fedoraID);\n     }\n \n     @Override\n-    public FedoraResource getResource(final Transaction transaction, final String identifier, final Instant version)\n+    public FedoraResource getResource(final Transaction transaction, final FedoraID fedoraID)\n             throws PathNotFoundException {\n-        return instantiateResource(transaction, identifier, version);\n+        final FedoraResource resource = instantiateResource(transaction, fedoraID);\n+        if (fedoraID.isTimemap()) {\n+            return resource.getTimeMap();\n+        }\n+        return resource;\n     }\n \n     @Override\n-    public <T extends FedoraResource> T getResource(final String identifier, final Class<T> clazz)\n-            throws PathNotFoundException {\n+    public <T extends FedoraResource> T getResource(final FedoraID identifier,\n+                                                    final Class<T> clazz) throws PathNotFoundException {\n         return clazz.cast(getResource(null, identifier));\n     }\n \n     @Override\n-    public <T extends FedoraResource> T getResource(final Transaction transaction, final String identifier,\n+    public <T extends FedoraResource> T getResource(final Transaction transaction, final FedoraID identifier,\n             final Class<T> clazz) throws PathNotFoundException {\n         return clazz.cast(getResource(transaction, identifier));\n     }\n \n     @Override\n-    public <T extends FedoraResource> T getResource(final Transaction transaction, final String identifier,\n-            final Instant version, final Class<T> clazz) throws PathNotFoundException {\n-        return clazz.cast(getResource(transaction, identifier, version));\n-    }\n-\n-    @Override\n-    public boolean doesResourceExist(final Transaction transaction, final String fedoraId, final Instant version) {\n-        // TODO: Check the index first.\n-\n-        final PersistentStorageSession psSession = getSession(transaction);\n-\n-        try {\n-            psSession.getHeaders(fedoraId, version);\n+    public boolean doesResourceExist(final Transaction transaction, final FedoraID fedoraId) {\n+        if (fedoraId.isRepositoryRoot()) {\n+            // Root always exists.\n             return true;\n-        } catch (final PersistentItemNotFoundException e) {\n-            // Object doesn't exist.\n-            return false;\n-        } catch (final PersistentStorageException e) {\n-            // Other error, pass along.\n-            throw new RepositoryRuntimeException(e);\n-        } finally {\n-            if (transaction == null) {\n-                // Commit session (if read-only) so it doesn't hang around.\n-                try {\n-                    psSession.commit();\n-                } catch (final PersistentStorageException e) {\n-                    LOGGER.error(\"Error committing session, message: {}\", e.getMessage());\n+        }\n+        final FedoraID actualId;\n+        if (fedoraId.isDescription()) {\n+            // Descriptions are actually part of the binary, so use its ID.\n+            actualId = FedoraID.create(fedoraId.getResourceId().replace(\"/\" + FCR_METADATA, \"\"));", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzNTk1Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404835957", "bodyText": "So the issue is that the fcr:metadata is not needed for the resourceExists because we don't track the description in the containment index, which is why we strip it off. But here we call getResourceId() but for descriptions we need that fcr:metadata. Perhaps I'll change that spot and have it return getFullId() for descriptions.", "author": "whikloj", "createdAt": "2020-04-07T14:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3OTgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java\nindex e835675826..d27e4794d3 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java\n\n@@ -64,13 +63,13 @@ public class ResourceFactoryImpl implements ResourceFactory {\n     private ContainmentIndex containmentIndex;\n \n     @Override\n-    public FedoraResource getResource(final FedoraID fedoraID)\n+    public FedoraResource getResource(final FedoraId fedoraID)\n             throws PathNotFoundException {\n         return getResource(null, fedoraID);\n     }\n \n     @Override\n-    public FedoraResource getResource(final Transaction transaction, final FedoraID fedoraID)\n+    public FedoraResource getResource(final Transaction transaction, final FedoraId fedoraID)\n             throws PathNotFoundException {\n         final FedoraResource resource = instantiateResource(transaction, fedoraID);\n         if (fedoraID.isTimemap()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NDkwMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404284902", "bodyText": "A constants for just the prefix would be helpful here too", "author": "bbpennel", "createdAt": "2020-04-06T18:01:20Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractService.java", "diffHunk": "@@ -109,21 +111,30 @@ protected String determineInteractionModel(final List<String> linkTypes,\n      * Find the closest ancestor using a Fedora ID.\n      * @param txID The current transaction or null if none.\n      * @param fedoraId The fedora ID to check\n-     * @return The ancestor ID or null if root\n+     * @return The ancestor or root FedoraID object.\n      */\n-    protected String findExistingAncestor(final String txID, final String fedoraId) {\n+    protected FedoraID findExistingAncestor(final String txID, final FedoraID fedoraId) {\n+        if (fedoraId.isRepositoryRoot()) {\n+            // If we are root then we are the top.\n+            return fedoraId;\n+        }\n         final String parent = containmentIndex.getContainedBy(txID, fedoraId);\n         if (parent != null) {\n-            return parent;\n+            return FedoraID.create(parent);\n         }\n-        String idIterator = fedoraId;\n+        String idIterator = fedoraId.getFullId();\n         while (idIterator.contains(\"/\")) {\n-            idIterator = fedoraId.substring(0, idIterator.lastIndexOf(\"/\"));\n-            if (containmentIndex.resourceExists(txID, idIterator)) {\n-                return idIterator;\n+            idIterator = fedoraId.getResourceId().substring(0, idIterator.lastIndexOf(\"/\"));\n+            if (idIterator.equals(FEDORA_ID_PREFIX.substring(0, FEDORA_ID_PREFIX.length()-1))) {", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractService.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractService.java\nindex bb75a4bccd..cc3bf4f8a9 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractService.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractService.java\n\n@@ -111,30 +111,29 @@ public abstract class AbstractService {\n      * Find the closest ancestor using a Fedora ID.\n      * @param txID The current transaction or null if none.\n      * @param fedoraId The fedora ID to check\n-     * @return The ancestor or root FedoraID object.\n+     * @return The ancestor or root FedoraId object.\n      */\n-    protected FedoraID findExistingAncestor(final String txID, final FedoraID fedoraId) {\n+    protected FedoraId findExistingAncestor(final String txID, final FedoraId fedoraId) {\n         if (fedoraId.isRepositoryRoot()) {\n             // If we are root then we are the top.\n             return fedoraId;\n         }\n         final String parent = containmentIndex.getContainedBy(txID, fedoraId);\n         if (parent != null) {\n-            return FedoraID.create(parent);\n+            return FedoraId.create(parent);\n         }\n         String idIterator = fedoraId.getFullId();\n         while (idIterator.contains(\"/\")) {\n             idIterator = fedoraId.getResourceId().substring(0, idIterator.lastIndexOf(\"/\"));\n-            if (idIterator.equals(FEDORA_ID_PREFIX.substring(0, FEDORA_ID_PREFIX.length()-1))) {\n-                // If we just made info:fedora then we are at root.\n-                return FedoraID.getRoot();\n+            if (idIterator.equals(FEDORA_ID_PREFIX)) {\n+                return FedoraId.getRepositoryRootId();\n             }\n-            final FedoraID testID = FedoraID.create(idIterator);\n+            final FedoraId testID = FedoraId.create(idIterator);\n             if (containmentIndex.resourceExists(txID, testID)) {\n                 return testID;\n             }\n         }\n-        return FedoraID.getRoot();\n+        return FedoraId.getRepositoryRootId();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NjQzMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404286433", "bodyText": "I'm guessing these builder interfaces are one of the examples of places where you were thinking we might switch over to using fedoraIds? That seems like a good idea, although i can understand doing that in a followup ticket to keep down the scope of this PR", "author": "bbpennel", "createdAt": "2020-04-06T18:04:04Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -90,16 +90,16 @@ public void perform(final String txId, final String userPrincipal, final String\n         final CreateNonRdfSourceOperationBuilder builder;\n         String mimeType = contentType;\n         if (externalContent == null) {\n-            builder = nonRdfSourceOperationFactory.createInternalBinaryBuilder(fedoraId, requestBody);\n+            builder = nonRdfSourceOperationFactory.createInternalBinaryBuilder(fedoraId.getFullId(), requestBody);", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNjQ1MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405726451", "bodyText": "https://jira.lyrasis.org/browse/FCREPO-3270", "author": "whikloj", "createdAt": "2020-04-08T18:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NjQzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MDEyMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r404290120", "bodyText": "Seems pretty weird to me to mock the resource to return different identifiers depending on if getId or getFedoraId is called. Is that necessary?", "author": "bbpennel", "createdAt": "2020-04-06T18:10:24Z", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java", "diffHunk": "@@ -121,32 +153,41 @@ public void setup() throws Exception {\n         when(psSession.getHeaders(eq(fedoraId), nullable(Instant.class))).thenReturn(resourceHeaders);\n     }\n \n+    @After\n+    public void cleanUp() {\n+        when(mockResource.getId()).thenReturn(FEDORA_ID_PREFIX);", "originalCommit": "87f07e941e288ae2c9fba556eb107e9faf8e9738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzUyMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405007523", "bodyText": "So getFedoraId() returns the FedoraId class, but because we still use strings for some things, getId() just calls the FedoraId's getFullId() method. If we have no use for strings then perhaps this could be removed.", "author": "whikloj", "createdAt": "2020-04-07T18:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MDEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzODIzMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405138232", "bodyText": "I understand, in this case i'm commenting on the fact that getId() is returning info:fedora while getFedoraId() is returning a FedoraId with the value info:fedora/<uuid>", "author": "bbpennel", "createdAt": "2020-04-07T21:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MDEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxNDEyMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405514121", "bodyText": "Ohhhhhh, yeah with all the changes I can't remember why I did that. I'll revisit it.", "author": "whikloj", "createdAt": "2020-04-08T13:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MDEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "194765c0d0f892a74858ccc8c0442393366efa8a", "chunk": "diff --git a/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java b/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java\nindex 1e449b6ce9..ae93b9ebd1 100644\n--- a/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java\n+++ b/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java\n\n@@ -145,52 +147,52 @@ public class ResourceFactoryImplTest {\n         setField(factory, \"containmentIndex\", containmentIndex);\n \n         resourceHeaders = new ResourceHeadersImpl();\n-        resourceHeaders.setId(fedoraId);\n+        resourceHeaders.setId(fedoraIdStr);\n \n         when(sessionManager.getSession(sessionId)).thenReturn(psSession);\n         when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n \n-        when(psSession.getHeaders(eq(fedoraId), nullable(Instant.class))).thenReturn(resourceHeaders);\n+        when(psSession.getHeaders(eq(fedoraIdStr), nullable(Instant.class))).thenReturn(resourceHeaders);\n     }\n \n     @After\n     public void cleanUp() {\n         when(mockResource.getId()).thenReturn(FEDORA_ID_PREFIX);\n-        when(mockResource.getFedoraId()).thenReturn(mockFedoraID);\n+        when(mockResource.getFedoraId()).thenReturn(fedoraId);\n         containmentIndex.rollbackTransaction(mockTx);\n         containmentIndex.getContains(null, mockResource).forEach(c ->\n-                containmentIndex.removeContainedBy(null, rootId, FedoraID.create(c)));\n+                containmentIndex.removeContainedBy(null, rootId, FedoraId.create(c)));\n     }\n \n     @Test(expected = PathNotFoundException.class)\n     public void getResource_ObjectNotFound() throws Exception {\n-        when(psSession.getHeaders(fedoraId, null)).thenThrow(PersistentItemNotFoundException.class);\n+        when(psSession.getHeaders(fedoraIdStr, null)).thenThrow(PersistentItemNotFoundException.class);\n \n-        factory.getResource(mockFedoraID);\n+        factory.getResource(fedoraId);\n     }\n \n     @Test(expected = ResourceTypeException.class)\n     public void getResource_NoInteractionModel() throws Exception {\n         resourceHeaders.setInteractionModel(null);\n \n-        factory.getResource(mockFedoraID);\n+        factory.getResource(fedoraId);\n     }\n \n     @Test(expected = ResourceTypeException.class)\n     public void getResource_UnknownInteractionModel() throws Exception {\n         resourceHeaders.setInteractionModel(\"http://example.com/mystery_stroop\");\n \n-        factory.getResource(mockFedoraID);\n+        factory.getResource(fedoraId);\n     }\n \n     @Test\n     public void getResource_BasicContainer() throws Exception {\n         populateHeaders(resourceHeaders, BASIC_CONTAINER);\n \n-        final var resc = factory.getResource(mockFedoraID);\n+        final var resc = factory.getResource(fedoraId);\n \n         assertTrue(\"Factory must return a container\", resc instanceof Container);\n-        assertEquals(fedoraId, resc.getId());\n+        assertEquals(fedoraIdStr, resc.getId());\n         assertStateFieldsMatches(resc);\n \n         verify(sessionManager).getReadOnlySession();\n"}}, {"oid": "194765c0d0f892a74858ccc8c0442393366efa8a", "url": "https://github.com/fcrepo/fcrepo/commit/194765c0d0f892a74858ccc8c0442393366efa8a", "message": "Some code review and remove slash from repository root id", "committedDate": "2020-04-07T18:11:55Z", "type": "commit"}, {"oid": "e4e1a3a544a071edd9f552f07a5243c5616672b7", "url": "https://github.com/fcrepo/fcrepo/commit/e4e1a3a544a071edd9f552f07a5243c5616672b7", "message": "Only want resourceId for resourceExists", "committedDate": "2020-04-07T21:01:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMTEwOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405121108", "bodyText": "Are all these .substring(1) necessary? I tried removing them all and the tests still passed", "author": "bbpennel", "createdAt": "2020-04-07T21:22:25Z", "path": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACFilterTest.java", "diffHunk": "@@ -159,9 +160,10 @@ public void setupRequest() throws Exception{\n \n         when(mockTransactionManager.get(\"tx-id\")).thenReturn(mockTransaction);\n \n-        when(mockResourceFactory.getResource(mockTransaction, testChildPath)).thenReturn(null);\n+        when(mockResourceFactory.getResource(mockTransaction, FedoraId.create(testChildPath.substring(1))))", "originalCommit": "e4e1a3a544a071edd9f552f07a5243c5616672b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxMTU4MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405511581", "bodyText": "They were previously as I was combining the path with FEDORA_ID_PREFIX, but now that I removed the trailing slash from FEDORA_ID_PREFIX they can probably be removed.", "author": "whikloj", "createdAt": "2020-04-08T13:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMTEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "0fdd114aa8b6fef03c6d00b63f98088f119061ab", "chunk": "diff --git a/fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACFilterTest.java b/fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACFilterTest.java\nindex 981ddbb315..d0c2e72210 100644\n--- a/fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACFilterTest.java\n+++ b/fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACFilterTest.java\n\n@@ -160,7 +160,7 @@ public class WebACFilterTest {\n \n         when(mockTransactionManager.get(\"tx-id\")).thenReturn(mockTransaction);\n \n-        when(mockResourceFactory.getResource(mockTransaction, FedoraId.create(testChildPath.substring(1))))\n+        when(mockResourceFactory.getResource(mockTransaction, FedoraId.create(testChildPath)))\n                 .thenReturn(null);\n \n         when(mockResourceFactory.getResource(mockTransaction, FedoraId.getRepositoryRootId())).thenReturn(mockRoot);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMzA4Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405123082", "bodyText": "Similarly, are the substring(1)'s necessary here? Seems to pass either way, just trying to keep down clutter if it makes sense.", "author": "bbpennel", "createdAt": "2020-04-07T21:26:10Z", "path": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java", "diffHunk": "@@ -367,13 +372,13 @@ public void acl04Test() throws RepositoryException, PathNotFoundException {\n         final String acl = \"/acls/04/acl.ttl\";\n \n         when(mockResource.getAcl()).thenReturn(mockAclResource);\n-        when(mockResourceFactory.getResource(mockTransaction, acl)).thenReturn(mockAclResource);\n-        when(mockAclResource.getPath()).thenReturn(acl);\n+        when(mockResourceFactory.getResource(mockTransaction, FedoraId.create(acl.substring(1)))).thenReturn(", "originalCommit": "e4e1a3a544a071edd9f552f07a5243c5616672b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fdd114aa8b6fef03c6d00b63f98088f119061ab", "chunk": "diff --git a/fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java b/fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java\nindex aeeccf0e4d..66ef8c4025 100644\n--- a/fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java\n+++ b/fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java\n\n@@ -372,7 +372,7 @@ public class WebACRolesProviderTest {\n         final String acl = \"/acls/04/acl.ttl\";\n \n         when(mockResource.getAcl()).thenReturn(mockAclResource);\n-        when(mockResourceFactory.getResource(mockTransaction, FedoraId.create(acl.substring(1)))).thenReturn(\n+        when(mockResourceFactory.getResource(mockTransaction, FedoraId.create(acl))).thenReturn(\n                 mockAclResource);\n         when(mockAclResource.getId()).thenReturn(addPrefix(acl));\n         when(mockAclResource.isAcl()).thenReturn(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjE2Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405136163", "bodyText": "is this a special case where fcr:metadata has to be added to the full id, or could this just as easily be addToResourceId?", "author": "bbpennel", "createdAt": "2020-04-07T21:53:51Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -116,10 +116,12 @@ public void perform(final String txId, final String userPrincipal, final String\n     }\n \n     private void createDescription(final PersistentStorageSession pSession, final String userPrincipal,\n-            final String binaryId) {\n-        final var descId = binaryId + \"/\" + FCR_METADATA;\n-        final var createOp = rdfSourceOperationFactory.createBuilder(descId, FEDORA_NON_RDF_SOURCE_DESCRIPTION_URI)\n-                .userPrincipal(userPrincipal)\n+            final FedoraId binaryId) {\n+        final var descId = binaryId.addToFullId(FCR_METADATA);", "originalCommit": "e4e1a3a544a071edd9f552f07a5243c5616672b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxMjY0NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405512645", "bodyText": "As in the case of a standard resource the getResourceId and getFullId should be identical, this could be addToResourceId. Is that preferable?", "author": "whikloj", "createdAt": "2020-04-08T13:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0fdd114aa8b6fef03c6d00b63f98088f119061ab", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java\nindex f43422f9fd..d31dff7824 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java\n\n@@ -117,7 +117,7 @@ public class CreateResourceServiceImpl extends AbstractService implements Create\n \n     private void createDescription(final PersistentStorageSession pSession, final String userPrincipal,\n             final FedoraId binaryId) {\n-        final var descId = binaryId.addToFullId(FCR_METADATA);\n+        final var descId = binaryId.resolve(\"/\" + FCR_METADATA);\n         final var createOp = rdfSourceOperationFactory.createBuilder(\n                     descId.getFullId(),\n                     FEDORA_NON_RDF_SOURCE_DESCRIPTION_URI\n"}}, {"oid": "0fdd114aa8b6fef03c6d00b63f98088f119061ab", "url": "https://github.com/fcrepo/fcrepo/commit/0fdd114aa8b6fef03c6d00b63f98088f119061ab", "message": "Replace addTo with resolve", "committedDate": "2020-04-08T15:50:17Z", "type": "commit"}, {"oid": "8d5f95c3353d900d914f4b3a24f7106a96740255", "url": "https://github.com/fcrepo/fcrepo/commit/8d5f95c3353d900d914f4b3a24f7106a96740255", "message": "Add some tests and refactor repository root check in containment index", "committedDate": "2020-04-08T16:45:42Z", "type": "commit"}, {"oid": "fa04a8b8450a2514642bde1b43b61272673884b7", "url": "https://github.com/fcrepo/fcrepo/commit/fa04a8b8450a2514642bde1b43b61272673884b7", "message": "Switch name of path only variable in FedoraId and remove idBuilder(String, String...)", "committedDate": "2020-04-08T18:14:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxOTc2MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405819761", "bodyText": "I guess you could have left this constructor as it was and moved the array concatenation from resolve into this constructor. But this is fine too.", "author": "bbpennel", "createdAt": "2020-04-08T21:15:57Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraId.java", "diffHunk": "@@ -69,18 +69,18 @@ private FedoraId(final String fullId) {\n         this.fullId = ensurePrefix(fullId);\n         this.fullId = this.fullId.replaceAll(\"/+$\", \"\");\n         // Carry the path of the request for any exceptions.\n-        this.externalPath = this.fullId.substring(FEDORA_ID_PREFIX.length());\n+        this.pathOnly = this.fullId.substring(FEDORA_ID_PREFIX.length());\n \n         processIdentifier();\n     }\n \n     /**\n      * Static create method\n-     * @param fullId The ID to use for the FedoraId.\n+     * @param additions One or more strings to build an ID.\n      * @return The FedoraId.\n      */\n-    public static FedoraId create(final String fullId, final String... additions) {\n-        final var newId = idBuilder(fullId, additions);\n+    public static FedoraId create(final String... additions) {", "originalCommit": "fa04a8b8450a2514642bde1b43b61272673884b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2MTU3Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1652#discussion_r405861572", "bodyText": "Your call, maybe there is a better way to do the array concatenation?", "author": "whikloj", "createdAt": "2020-04-08T22:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxOTc2MQ=="}], "type": "inlineReview", "revised_code": null}]}