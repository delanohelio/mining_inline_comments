{"pr_number": 1773, "pr_title": "Reduce number of queries and make updates batched in SearchIndex", "pr_createdAt": "2020-10-11T16:04:02Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1773", "timeline": [{"oid": "2122b0d6f5ca473bf5aeaad32b7a0fcbeded7d6a", "url": "https://github.com/fcrepo/fcrepo/commit/2122b0d6f5ca473bf5aeaad32b7a0fcbeded7d6a", "message": "Reduce number of queries and make updates batched", "committedDate": "2020-10-11T16:00:06Z", "type": "commit"}, {"oid": "3c016b404e3090e524eb72cbe2dc485ab7ec6f0a", "url": "https://github.com/fcrepo/fcrepo/commit/3c016b404e3090e524eb72cbe2dc485ab7ec6f0a", "message": "Use a set instead of a list", "committedDate": "2020-10-12T03:55:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MDg5Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1773#discussion_r503260892", "bodyText": "As you noted, this can fail if multiple threads attempt to concurrently add the same types. Does it not throw an exception in that case? If so, I think you could safely swallow it and proceed because you'll get a failure on line 394 if the types weren't actually created.", "author": "pwinckles", "createdAt": "2020-10-12T12:28:22Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -346,33 +363,69 @@ private void deleteRdfTypeAssociations(final Long resourceId) {\n                 deleteParams);\n     }\n \n-    private ArrayList<Long> findOrCreateRdfTypesInDb(final List<URI> rdfTypes) {\n-        final var jdbcInsertRdfTypes = new SimpleJdbcInsert(this.jdbcTemplate.getJdbcTemplate());\n-        jdbcInsertRdfTypes.withTableName(SEARCH_RDF_TYPE_TABLE).usingGeneratedKeyColumns(\n-                ID_COLUMN);\n-        final var rdfTypeIds = new ArrayList<Long>();\n-        for (var rdfTypeUri : rdfTypes) {\n-            final var typeParams = new MapSqlParameterSource();\n-            typeParams.addValue(RDF_TYPE_URI_PARAM, rdfTypeUri.toString());\n-            final var results = jdbcTemplate.queryForList(SELECT_RDF_TYPE_ID,\n-                    typeParams);\n-            if (CollectionUtils.isEmpty(results)) {\n-                final Number key = jdbcInsertRdfTypes.executeAndReturnKey(typeParams);\n-                rdfTypeIds.add(key.longValue());\n-            } else {\n-                rdfTypeIds.add((long) results.get(0).get(ID_COLUMN));\n+    private List<Long> findOrCreateRdfTypesInDb(final List<URI> rdfTypes) {\n+        final List<String> rdfTypes_str = rdfTypes.stream().map(URI::toString).collect(Collectors.toList());\n+\n+        final List<RdfType> results = jdbcTemplate.query(SELECT_RDF_TYPE_ID,\n+                Map.of(RDF_TYPE_URI_PARAM, rdfTypes_str), RDF_TYPE_ROW_MAPPER);\n+        // List of existing type ids.\n+        final var rdfTypeIds = results.stream().map(RdfType::getTypeId).collect(Collectors.toList());\n+        // List of existing type uris.\n+        final var rdfTypeUris = results.stream().map(RdfType::getTypeUri).collect(Collectors.toList());\n+        // Type uris that don't already have a record. Needs to be a set to avoid inserting the same URI and\n+        final var missingUris = rdfTypes_str.stream().filter(t -> !rdfTypeUris.contains(t))\n+                .collect(Collectors.toSet());\n+\n+        if (!missingUris.isEmpty()) {\n+            final List<MapSqlParameterSource> parameterSourcesList = new ArrayList<>();\n+            missingUris.forEach(u -> {\n+                final var assocParams = new MapSqlParameterSource();\n+                assocParams.addValue(RDF_TYPE_URI_PARAM, u);\n+                LOGGER.debug(\"Adding rdf type uri: \" + u);\n+                parameterSourcesList.add(assocParams);\n+            });\n+            final MapSqlParameterSource[] psArray = parameterSourcesList.toArray(new MapSqlParameterSource[0]);\n+            // Batch insert all the records.\n+            jdbcTemplate.batchUpdate(INSERT_RDF_TYPE, psArray);", "originalCommit": "3c016b404e3090e524eb72cbe2dc485ab7ec6f0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0NjcyMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1773#discussion_r503346723", "bodyText": "What happens if there are two concurrent requests, one is inserting types A, B, and C and the other is inserting B, C, and D? Since it's a batch update, will the end result be that the database either contains A, B, and C or B, C, and D? Or will it contain all of the types?", "author": "pwinckles", "createdAt": "2020-10-12T14:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MDg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1ODM3MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1773#discussion_r503358370", "bodyText": "It looks like we need to go back and use the standard jdbc batch which should return a BatchUpdateException and return success and failure counts. I'll give this a try next", "author": "whikloj", "createdAt": "2020-10-12T15:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MDg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1ed7af2db94e65734d69b0068908b913222e543a", "chunk": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 8f78da349c..a960ba8d19 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n\n@@ -378,15 +391,15 @@ public class DbSearchIndexImpl implements SearchIndex {\n \n         if (!missingUris.isEmpty()) {\n             final List<MapSqlParameterSource> parameterSourcesList = new ArrayList<>();\n-            missingUris.forEach(u -> {\n-                final var assocParams = new MapSqlParameterSource();\n-                assocParams.addValue(RDF_TYPE_URI_PARAM, u);\n-                LOGGER.debug(\"Adding rdf type uri: \" + u);\n-                parameterSourcesList.add(assocParams);\n-            });\n-            final MapSqlParameterSource[] psArray = parameterSourcesList.toArray(new MapSqlParameterSource[0]);\n+            for (final var uri : missingUris) {\n+                LOGGER.debug(\"Adding rdf type uri: \" + uri);\n+                final var ps = new MapSqlParameterSource();\n+                ps.addValue(RDF_TYPE_URI_PARAM, uri);\n+                parameterSourcesList.add(ps);\n+            }\n             // Batch insert all the records.\n-            jdbcTemplate.batchUpdate(INSERT_RDF_TYPE, psArray);\n+            final MapSqlParameterSource[] psArray = parameterSourcesList.toArray(new MapSqlParameterSource[0]);\n+            jdbcTemplate.batchUpdate(INSERT_RDF_TYPE.get(this.dbPlatForm), psArray);\n             // Do a single query for the ID to all the URIs we just inserted.\n             final List<RdfType> createdIds = jdbcTemplate.query(SELECT_RDF_TYPE_ID,\n                     Map.of(RDF_TYPE_URI_PARAM, missingUris), RDF_TYPE_ROW_MAPPER);\n"}}, {"oid": "1ed7af2db94e65734d69b0068908b913222e543a", "url": "https://github.com/fcrepo/fcrepo/commit/1ed7af2db94e65734d69b0068908b913222e543a", "message": "Ignore duplicate rdf_types", "committedDate": "2020-10-12T21:31:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5NTQ3Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1773#discussion_r503895476", "bodyText": "Doesn't matter that much because I suspect we're only ever dealing with a handful of types, but this can be optimized a little:\nfinal var rdfTypeIds = new ArrayList<Long>(rdfTypes.size());\nfinal var rdfTypeUris = new HashSet<String>();\n\nfor (final var type : results) {\n    rdfTypeIds.add(type.getTypeId());\n    rdfTypeUris.add(type.getTypeUri());\n}\n\nfinal var missingUris = rdfTypes.stream().map(URI::toString).filter(t -> !rdfTypeUris.contains(t)).collect(Collectors.toSet());", "author": "pwinckles", "createdAt": "2020-10-13T12:05:36Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -346,33 +376,69 @@ private void deleteRdfTypeAssociations(final Long resourceId) {\n                 deleteParams);\n     }\n \n-    private ArrayList<Long> findOrCreateRdfTypesInDb(final List<URI> rdfTypes) {\n-        final var jdbcInsertRdfTypes = new SimpleJdbcInsert(this.jdbcTemplate.getJdbcTemplate());\n-        jdbcInsertRdfTypes.withTableName(SEARCH_RDF_TYPE_TABLE).usingGeneratedKeyColumns(\n-                ID_COLUMN);\n-        final var rdfTypeIds = new ArrayList<Long>();\n-        for (var rdfTypeUri : rdfTypes) {\n-            final var typeParams = new MapSqlParameterSource();\n-            typeParams.addValue(RDF_TYPE_URI_PARAM, rdfTypeUri.toString());\n-            final var results = jdbcTemplate.queryForList(SELECT_RDF_TYPE_ID,\n-                    typeParams);\n-            if (CollectionUtils.isEmpty(results)) {\n-                final Number key = jdbcInsertRdfTypes.executeAndReturnKey(typeParams);\n-                rdfTypeIds.add(key.longValue());\n-            } else {\n-                rdfTypeIds.add((long) results.get(0).get(ID_COLUMN));\n+    private List<Long> findOrCreateRdfTypesInDb(final List<URI> rdfTypes) {\n+        final List<String> rdfTypes_str = rdfTypes.stream().map(URI::toString).collect(Collectors.toList());\n+\n+        final List<RdfType> results = jdbcTemplate.query(SELECT_RDF_TYPE_ID,\n+                Map.of(RDF_TYPE_URI_PARAM, rdfTypes_str), RDF_TYPE_ROW_MAPPER);\n+        // List of existing type ids.\n+        final var rdfTypeIds = results.stream().map(RdfType::getTypeId).collect(Collectors.toList());\n+        // List of existing type uris.\n+        final var rdfTypeUris = results.stream().map(RdfType::getTypeUri).collect(Collectors.toList());\n+        // Type uris that don't already have a record. Needs to be a set to avoid inserting the same URI and\n+        final var missingUris = rdfTypes_str.stream().filter(t -> !rdfTypeUris.contains(t))\n+                .collect(Collectors.toSet());", "originalCommit": "1ed7af2db94e65734d69b0068908b913222e543a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da10ba05b62f3410396094af11d8bc6310b41027", "chunk": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex a960ba8d19..7603fb77cd 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n\n@@ -382,9 +384,13 @@ public class DbSearchIndexImpl implements SearchIndex {\n         final List<RdfType> results = jdbcTemplate.query(SELECT_RDF_TYPE_ID,\n                 Map.of(RDF_TYPE_URI_PARAM, rdfTypes_str), RDF_TYPE_ROW_MAPPER);\n         // List of existing type ids.\n-        final var rdfTypeIds = results.stream().map(RdfType::getTypeId).collect(Collectors.toList());\n+        final List<Long> rdfTypeIds = new ArrayList<>();\n         // List of existing type uris.\n-        final var rdfTypeUris = results.stream().map(RdfType::getTypeUri).collect(Collectors.toList());\n+        final Set<String> rdfTypeUris = new HashSet<>();\n+        for (final RdfType type : results) {\n+            rdfTypeIds.add(type.getTypeId());\n+            rdfTypeUris.add(type.getTypeUri());\n+        }\n         // Type uris that don't already have a record. Needs to be a set to avoid inserting the same URI and\n         final var missingUris = rdfTypes_str.stream().filter(t -> !rdfTypeUris.contains(t))\n                 .collect(Collectors.toSet());\n"}}, {"oid": "da10ba05b62f3410396094af11d8bc6310b41027", "url": "https://github.com/fcrepo/fcrepo/commit/da10ba05b62f3410396094af11d8bc6310b41027", "message": "Reduce 2 streams to one loop", "committedDate": "2020-10-13T14:08:19Z", "type": "commit"}]}