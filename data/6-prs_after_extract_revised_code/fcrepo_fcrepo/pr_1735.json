{"pr_number": 1735, "pr_title": "FCREPO-3239 - External Binary implementation", "pr_createdAt": "2020-08-06T14:49:52Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1735", "timeline": [{"oid": "8f22f067ebea2acd2f2ad5be5330e02807a765f5", "url": "https://github.com/fcrepo/fcrepo/commit/8f22f067ebea2acd2f2ad5be5330e02807a765f5", "message": "Add functionality for retrieving content size to external content handler, use this value during creation and replacement of binaries. Reenable some of the external binary tests not related to copying or want-digest, add a few more tests, DRY up some components.", "committedDate": "2020-08-04T19:50:03Z", "type": "commit"}, {"oid": "54ffe8383598ac8d7a6d2d2239bebd08258300a3", "url": "https://github.com/fcrepo/fcrepo/commit/54ffe8383598ac8d7a6d2d2239bebd08258300a3", "message": "Enable external binary copy handling", "committedDate": "2020-08-04T20:25:43Z", "type": "commit"}, {"oid": "785b4553bd7f2699318fe589d8bb299926b8bd38", "url": "https://github.com/fcrepo/fcrepo/commit/785b4553bd7f2699318fe589d8bb299926b8bd38", "message": "Reenable tests related to want-digest with external binaries, and a few other tests that use externals", "committedDate": "2020-08-04T22:26:30Z", "type": "commit"}, {"oid": "4f6547a100908affc4bd05d3eda1a084840fa05f", "url": "https://github.com/fcrepo/fcrepo/commit/4f6547a100908affc4bd05d3eda1a084840fa05f", "message": "Implement transmission fixity for external binaries. Add tests for transmission fixity, updating, and deleting external binaries.", "committedDate": "2020-08-05T21:54:23Z", "type": "commit"}, {"oid": "d04d36a50ee0856ed888a8ac84cdb11844a80db0", "url": "https://github.com/fcrepo/fcrepo/commit/d04d36a50ee0856ed888a8ac84cdb11844a80db0", "message": "Update service tests for external binaries. Move external binary copy operation into services", "committedDate": "2020-08-06T14:17:16Z", "type": "commit"}, {"oid": "50bb92825753b971701a962f7e96be8ba6f1c4d5", "url": "https://github.com/fcrepo/fcrepo/commit/50bb92825753b971701a962f7e96be8ba6f1c4d5", "message": "Make external uri validation case sensitive, aside from the scheme portion", "committedDate": "2020-08-06T19:48:38Z", "type": "commit"}, {"oid": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7", "url": "https://github.com/fcrepo/fcrepo/commit/9ec28eb345e154f7aac8187d3ea567bc91f39ba7", "message": "Specify accept encoding when getting info about http external binaries so that we don't get the compressed content-length", "committedDate": "2020-08-06T20:20:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODY2OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466668669", "bodyText": "It seems like this can potentially return null.\n..although, unlikely. I am not sure there is an actual pathway for the uri to be null. We are just doing lots of extra null checking elsewhere.", "author": "awoods", "createdAt": "2020-08-06T20:30:25Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java", "diffHunk": "@@ -163,36 +181,39 @@ private Link parseLinkHeader(final String link) throws ExternalMessageBodyExcept\n         return realLink;\n     }\n \n-    /**\n-     * Find the content type for a remote resource\n-     * @param url of remote resource\n-     * @return the mime-type reported by remote system or \"application/octet-stream\" if not supplied\n-     */\n-    private String findContentType(final String url) {\n-        if (url == null) {\n-            return null;\n-        }\n+    private void retrieveContentDetails() {\n+        final URI uri = getURI();", "originalCommit": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMzkwMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466723900", "bodyText": "yeah, I can add in a null check for safety reasons, but i'm pretty sure the validator that gets run before this catches the case of the link not being set.", "author": "bbpennel", "createdAt": "2020-08-06T22:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTE0OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466761149", "bodyText": "Probably not necessary to add a null check. Not that we need to do it here, but it would almost be cleaner to remove some of the superfluous existing null checks, like:\n\nhttps://github.com/fcrepo4/fcrepo4/blob/9ec28eb345e154f7aac8187d3ea567bc91f39ba7/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java#L118\nhttps://github.com/fcrepo4/fcrepo4/blob/9ec28eb345e154f7aac8187d3ea567bc91f39ba7/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java#L123\nhttps://github.com/fcrepo4/fcrepo4/blob/9ec28eb345e154f7aac8187d3ea567bc91f39ba7/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java#L128\netc", "author": "awoods", "createdAt": "2020-08-07T00:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODY2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjM1NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466676354", "bodyText": "It seems that you are only handling the case of parts.length == 2. Should the check be looking for a length of 2?", "author": "awoods", "createdAt": "2020-08-06T20:45:52Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentPathValidator.java", "diffHunk": "@@ -117,12 +117,20 @@ public void validate(final String extPath) throws ExternalMessageBodyException {\n         throw new ExternalMessageBodyException(\"Path did not match any allowed external content paths: \" + extPath);\n     }\n \n-    private String normalizePath(final String path) {\n+    private String normalizeUri(final String path) {\n+        // lowercase the scheme since it is case insensitive\n+        final String[] parts = path.split(\":\", 2);\n+        final String normalized;\n+        if (parts.length > 1) {", "originalCommit": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6681a50e290544eafb55e8175ad9d35c1f1c6a63", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentPathValidator.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentPathValidator.java\nindex 65bca4fc06..dfd8ed39b4 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentPathValidator.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentPathValidator.java\n\n@@ -121,7 +121,7 @@ public class ExternalContentPathValidator extends AutoReloadingConfiguration {\n         // lowercase the scheme since it is case insensitive\n         final String[] parts = path.split(\":\", 2);\n         final String normalized;\n-        if (parts.length > 1) {\n+        if (parts.length == 2) {\n             normalized = parts[0].toLowerCase() + \":\" + parts[1];\n         } else {\n             return path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MjMyNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466762325", "bodyText": "fileUri is already a String... can remove the toString() call.", "author": "awoods", "createdAt": "2020-08-07T00:55:57Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/ExternalContentHandlerIT.java", "diffHunk": "@@ -398,33 +443,50 @@ public void testRedirectWithWantDigest() throws IOException {\n                 TEST_SHA_DIGEST_HEADER_VALUE, TEST_MD5_DIGEST_HEADER_VALUE);\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n-    public void testExternalMessageBodyRedirect() throws IOException {\n+    public void testRedirectForHttpUri() throws Exception {\n \n-        // we need a client that won't automatically follow redirects\n-        try (final CloseableHttpClient noFollowClient = HttpClientBuilder.create().disableRedirectHandling()\n-                .build()) {\n+        final String externalLocation = createHttpResource(TEST_BINARY_CONTENT);\n \n-            final String id = getRandomUniqueId();\n-            final HttpPut httpPut = putObjMethod(id);\n-            httpPut.addHeader(LINK, NON_RDF_SOURCE_LINK_HEADER);\n-            httpPut.addHeader(LINK, getExternalContentLinkHeader(\"http://www.example.com/file\", \"redirect\", null));\n+        final String id = getRandomUniqueId();\n+        final HttpPut httpPut = putObjMethod(id);\n+        httpPut.addHeader(LINK, NON_RDF_SOURCE_LINK_HEADER);\n+        httpPut.addHeader(LINK, getExternalContentLinkHeader(externalLocation, \"redirect\", null));\n \n-            try (final CloseableHttpResponse response = execute(httpPut)) {\n-                assertEquals(\"Didn't get a CREATED response!\", CREATED.getStatusCode(), getStatus(response));\n-                final HttpGet get = new HttpGet(getLocation(response));\n-                try (final CloseableHttpResponse getResponse = noFollowClient.execute(get)) {\n-                    assertEquals(TEMPORARY_REDIRECT.getStatusCode(), getStatus(getResponse));\n-                    assertEquals(\"http://www.example.com/file\", getLocation(getResponse));\n-                }\n+        try (final CloseableHttpResponse response = execute(httpPut)) {\n+            assertEquals(\"Didn't get a CREATED response!\", CREATED.getStatusCode(), getStatus(response));\n+            final HttpGet get = new HttpGet(getLocation(response));\n+            try (final CloseableHttpResponse getResponse = noFollowClient.execute(get)) {\n+                assertEquals(TEMPORARY_REDIRECT.getStatusCode(), getStatus(getResponse));\n+                assertLocation(getResponse, externalLocation);\n             }\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n-    public void testExternalMessageBodyCopyLocalFile() throws Exception {\n+    public void testProxyLocalFile() throws Exception {\n+        final File localFile = createExternalLocalFile(TEST_BINARY_CONTENT);\n+\n+        final String id = getRandomUniqueId();\n+        final HttpPut httpPut = putObjMethod(id);\n+        httpPut.addHeader(LINK, NON_RDF_SOURCE_LINK_HEADER);\n+        final String fileUri = localFile.toURI().toString();\n+        httpPut.addHeader(LINK, getExternalContentLinkHeader(fileUri.toString(), \"proxy\", \"text/plain\"));", "originalCommit": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6681a50e290544eafb55e8175ad9d35c1f1c6a63", "chunk": "diff --git a/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/ExternalContentHandlerIT.java b/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/ExternalContentHandlerIT.java\nindex a647980f23..582e48e17d 100644\n--- a/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/ExternalContentHandlerIT.java\n+++ b/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/ExternalContentHandlerIT.java\n\n@@ -471,7 +471,7 @@ public class ExternalContentHandlerIT extends AbstractResourceIT {\n         final HttpPut httpPut = putObjMethod(id);\n         httpPut.addHeader(LINK, NON_RDF_SOURCE_LINK_HEADER);\n         final String fileUri = localFile.toURI().toString();\n-        httpPut.addHeader(LINK, getExternalContentLinkHeader(fileUri.toString(), \"proxy\", \"text/plain\"));\n+        httpPut.addHeader(LINK, getExternalContentLinkHeader(fileUri, \"proxy\", \"text/plain\"));\n \n         try (final CloseableHttpResponse response = execute(httpPut)) {\n             assertEquals(\"Didn't get a CREATED response!\", CREATED.getStatusCode(), getStatus(response));\n"}}, {"oid": "6681a50e290544eafb55e8175ad9d35c1f1c6a63", "url": "https://github.com/fcrepo/fcrepo/commit/6681a50e290544eafb55e8175ad9d35c1f1c6a63", "message": "Address PR feedback", "committedDate": "2020-08-07T13:17:16Z", "type": "commit"}, {"oid": "a033f57646dba1c5d7bb3a406d6892b4514122cf", "url": "https://github.com/fcrepo/fcrepo/commit/a033f57646dba1c5d7bb3a406d6892b4514122cf", "message": "Removed unused setContent, updated the only reference to it to something more relevant. Removed duplicate checkForInsufficientStorageException method (identical method is in ContentExposingResource). Removed unused wiremock version variable which was leftover from no long existing external binary tests", "committedDate": "2020-08-07T13:35:54Z", "type": "commit"}, {"oid": "a033f57646dba1c5d7bb3a406d6892b4514122cf", "url": "https://github.com/fcrepo/fcrepo/commit/a033f57646dba1c5d7bb3a406d6892b4514122cf", "message": "Removed unused setContent, updated the only reference to it to something more relevant. Removed duplicate checkForInsufficientStorageException method (identical method is in ContentExposingResource). Removed unused wiremock version variable which was leftover from no long existing external binary tests", "committedDate": "2020-08-07T13:35:54Z", "type": "forcePushed"}]}