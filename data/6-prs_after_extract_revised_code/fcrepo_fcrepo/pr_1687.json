{"pr_number": 1687, "pr_title": "Purge resources and fix FedoraLdpTests", "pr_createdAt": "2020-06-02T18:06:15Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1687", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNjQyMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434116422", "bodyText": "Would you mind adding an else block that contains a \"debug()\" log message indicating that the statement was skipped?", "author": "awoods", "createdAt": "2020-06-02T19:11:50Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -113,23 +113,24 @@ public Model bodyToInternalModel(final String extResourceId, final InputStream s\n \n         while (stmtIterator.hasNext()) {\n             final Statement stmt = stmtIterator.nextStatement();\n-            final String originalSubj = stmt.getSubject().getURI();\n-            final String subj = idTranslator.inExternalDomain(originalSubj) ?\n-                idTranslator.toInternalId(originalSubj) : originalSubj;\n-\n-            RDFNode obj = stmt.getObject();\n-            if (stmt.getObject().isResource()) {\n-                final String objString = stmt.getObject().asResource().getURI();\n-                if (idTranslator.inExternalDomain(objString)) {\n-                    obj = model.getResource(idTranslator.toInternalId(objString));\n+            if (stmt.getSubject().isURIResource()) {", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java\nindex 612b6d7849..57b17b4bb8 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java\n\n@@ -131,6 +131,8 @@ public class HttpRdfService {\n \n                     stmtIterator.remove();\n                 }\n+            } else {\n+                log.debug(\"Subject is not a URI resource, skipping\");\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNTk2Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434125967", "bodyText": "May as well just return the result of `resourceFactory.getResource(..), no?", "author": "awoods", "createdAt": "2020-06-02T19:28:22Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraTombstones.java", "diffHunk": "@@ -70,19 +73,27 @@ public FedoraTombstones(final String externalPath) {\n      */\n     @DELETE\n     public Response delete() {\n-        LOGGER.info(\"Delete tombstone: {}\", resource());\n-        deleteResourceService.perform(transaction(), resource(), getUserPrincipal());\n+        final Tombstone resource = resource();\n+        LOGGER.info(\"Delete tombstone: {}\", resource);\n+        purgeResourceService.perform(transaction(), resource.getDeletedObject(), getUserPrincipal());\n         transaction().commitIfShortLived();\n         return noContent().build();\n     }\n \n     @Override\n-    protected FedoraResource resource() {\n-        return translator().convert(translator().toDomain(externalPath));\n+    protected Tombstone resource() {\n+        final FedoraId resourceId = identifierConverter().pathToInternalId(externalPath);\n+        try {\n+            final Tombstone resource = resourceFactory.getResource(transaction(), resourceId, Tombstone.class);", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraTombstones.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraTombstones.java\nindex de33a2a2ec..c1bf39e061 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraTombstones.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraTombstones.java\n\n@@ -80,12 +85,33 @@ public class FedoraTombstones extends ContentExposingResource {\n         return noContent().build();\n     }\n \n+    /*\n+     * These methods are disallowed, but need to exist here or the path gets caught by the FedoraLdp path matcher.\n+     */\n+    @GET\n+    public Response get() {\n+        return methodNotAllowed();\n+    }\n+\n+    @POST\n+    public Response post() {\n+        return methodNotAllowed();\n+    }\n+    @PUT\n+    public Response put() {\n+        return methodNotAllowed();\n+    }\n+\n+    @OPTIONS\n+    public Response options() {\n+        return Response.ok().header(ALLOW, \"DELETE\").build();\n+    }\n+\n     @Override\n     protected Tombstone resource() {\n         final FedoraId resourceId = identifierConverter().pathToInternalId(externalPath);\n         try {\n-            final Tombstone resource = resourceFactory.getResource(transaction(), resourceId, Tombstone.class);\n-            return resource;\n+            return resourceFactory.getResource(transaction(), resourceId, Tombstone.class);\n         } catch (final PathNotFoundException e) {\n             throw new PathNotFoundRuntimeException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzQ0Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434127442", "bodyText": "I believe we can remove fedoraID.", "author": "awoods", "createdAt": "2020-06-02T19:31:14Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -221,6 +231,20 @@\n     @Mock\n     private DeleteResourceService deleteResourceService;\n \n+    @Mock\n+    private ManagedPropertiesService managedPropertiesService;\n+\n+    @Mock\n+    private ContainmentTriplesService containmentTriplesService;\n+\n+    @Mock\n+    private CreateResourceService createResourceService;\n+\n+    @Mock\n+    private Principal principal;\n+\n+    private HttpRdfService httpRdfService;\n+\n     private FedoraId fedoraID;", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\nindex b622843886..bca5464e99 100644\n--- a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n+++ b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n\n@@ -243,20 +243,15 @@ public class FedoraLdpTest {\n     @Mock\n     private Principal principal;\n \n-    private HttpRdfService httpRdfService;\n-\n-    private FedoraId fedoraID;\n-\n     private static final Logger log = getLogger(FedoraLdpTest.class);\n \n-\n     @Before\n     public void setUp() {\n         testObj = spy(new FedoraLdp(path));\n \n         mockResponse = new MockHttpServletResponse();\n \n-        httpRdfService = new HttpRdfService();\n+        final HttpRdfService httpRdfService = new HttpRdfService();\n \n         setField(testObj, \"request\", mockRequest);\n         setField(testObj, \"servletResponse\", mockResponse);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjk5Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434132993", "bodyText": "Is there a JIRA for this?", "author": "awoods", "createdAt": "2020-06-02T19:42:09Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1007,68 +1059,93 @@ public void testPatchBinary() throws MalformedRdfException, IOException {\n     }\n \n     @Test\n-    public void testCreateNewObject() throws MalformedRdfException, InvalidChecksumException,\n-            UnsupportedAlgorithmException {\n-        setResource(Container.class);\n-        // when(mockContainerService.findOrCreate(mockTransaction, \"/b\", null))\n-        // .thenReturn(mockContainer);\n-        final Response actual = testObj.createObject(null, null, \"b\", null, null, null);\n+    public void testCreateNewObject() throws Exception {\n+        final var resource = setResource(Container.class);\n+        final var finalId = pathId.resolve(\"b\");\n+        when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(resource);\n+        final Response actual = testObj.createObject(null, null, \"b\",\n+                emptyStream, null, null);\n         assertEquals(CREATED.getStatusCode(), actual.getStatus());\n     }\n \n     @Test\n-    public void testCreateNewObjectWithVersionedResource() throws MalformedRdfException, InvalidChecksumException,\n-            UnsupportedAlgorithmException {\n-        setResource(Container.class);\n-        // when(mockContainerService.findOrCreate(mockTransaction, \"/b\", null)).thenReturn(mockContainer);\n+    public void testCreateNewObjectWithVersionedResource() throws Exception {\n+        final var resource = setResource(Container.class);\n+        final var finalId = pathId.resolve(\"b\");\n+        when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(resource);\n         final String versionedResourceLink = \"<\" + VERSIONED_RESOURCE.getURI() + \">;rel=\\\"type\\\"\";\n-        final Response actual = testObj.createObject(null, null, \"b\", null, singletonList(versionedResourceLink), null);\n+        final Response actual = testObj.createObject(null, null, \"b\",\n+                toInputStream(\"\", UTF_8), singletonList(versionedResourceLink), null);\n         assertEquals(CREATED.getStatusCode(), actual.getStatus());\n     }\n \n+    @Ignore(\"HttpRdfService cannot parse sparql-update\")", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMjU5OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434622599", "bodyText": "No I didn't, this related to my question if we wanted to continue to support PUT/POSTting RDF using the application/sparql-update syntax. The JIRA should either ensure that we properly support or properly reject sparql on PUT/POST. Just not sure which one yet.", "author": "whikloj", "createdAt": "2020-06-03T14:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NDk5NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434664995", "bodyText": "I would suggest rejecting sparql-update on PUT/POST.", "author": "awoods", "createdAt": "2020-06-03T15:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyODUzMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434828531", "bodyText": "Would a PUT with application/sparql-update now become a binary containing the body of the message or are we excluding that type entirely?", "author": "whikloj", "createdAt": "2020-06-03T20:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjk5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDYwMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434134600", "bodyText": "Remove dead code.", "author": "awoods", "createdAt": "2020-06-02T19:45:18Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1086,25 +1163,37 @@ public void testCreateNewBinaryWithInsufficientResources() throws MalformedRdfEx\n \n     @Test\n     public void testCreateNewBinaryWithContentTypeWithParams() throws MalformedRdfException,\n-           InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+           InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n         setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        final var finalId = pathId.resolve(\"b\");\n+        when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(mockBinary);\n         try (final InputStream content = toInputStream(\"x\", UTF_8)) {\n             final MediaType requestContentType = MediaType.valueOf(\"some/mime-type; with=some; param=s\");\n             final Response actual = testObj.createObject(null, requestContentType, \"b\", content, nonRDFSourceLink,\n                 null);\n             assertEquals(CREATED.getStatusCode(), actual.getStatus());\n-            verify(mockBinary).setContent(content, requestContentType.toString(), Collections.emptySet(), \"\", null);\n+            verify(createResourceService).perform(\n+                    any(),\n+                    any(),\n+                    eq(finalId),\n+                    eq(requestContentType.toString()),\n+                    eq(\"\"),\n+                    any(),\n+                    eq(nonRDFSourceLink),\n+                    any(),\n+                    eq(content),\n+                    eq(null));\n         }\n     }\n \n     @Test\n     public void testCreateNewBinaryWithChecksumSHA() throws MalformedRdfException,\n-           InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+           InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        //setResource(Container.class);", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\nindex b622843886..bca5464e99 100644\n--- a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n+++ b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n\n@@ -1191,7 +1183,6 @@ public class FedoraLdpTest {\n     public void testCreateNewBinaryWithChecksumSHA() throws MalformedRdfException,\n            InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        //setResource(Container.class);\n         final var finalId = pathId.resolve(\"b\");\n         when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(mockBinary);\n         try (final InputStream content = toInputStream(\"x\", UTF_8)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDY5Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434134693", "bodyText": "Remove dead code.", "author": "awoods", "createdAt": "2020-06-02T19:45:27Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1113,16 +1202,27 @@ public void testCreateNewBinaryWithChecksumSHA() throws MalformedRdfException,\n             final Response actual = testObj.createObject(null, requestContentType, \"b\", content, nonRDFSourceLink,\n                 requestSHA);\n             assertEquals(CREATED.getStatusCode(), actual.getStatus());\n-            verify(mockBinary).setContent(content, requestContentType.toString(), shaURI, \"\", null);\n+            verify(createResourceService).perform(\n+                    any(),\n+                    any(),\n+                    eq(finalId),\n+                    eq(requestContentType.toString()),\n+                    eq(\"\"),\n+                    any(),\n+                    eq(nonRDFSourceLink),\n+                    eq(shaURI),\n+                    eq(content),\n+                    eq(null));\n         }\n     }\n \n     @Test\n     public void testCreateNewBinaryWithChecksumSHA256() throws MalformedRdfException,\n-        InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+        InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        //setResource(Container.class);", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\nindex b622843886..bca5464e99 100644\n--- a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n+++ b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n\n@@ -1220,7 +1211,6 @@ public class FedoraLdpTest {\n     public void testCreateNewBinaryWithChecksumSHA256() throws MalformedRdfException,\n         InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        //setResource(Container.class);\n         final var finalId = pathId.resolve(\"b\");\n         when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(mockBinary);\n         try (final InputStream content = toInputStream(\"x\", UTF_8)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDgwMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434134803", "bodyText": "Remove dead code.", "author": "awoods", "createdAt": "2020-06-02T19:45:36Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1131,16 +1231,27 @@ public void testCreateNewBinaryWithChecksumSHA256() throws MalformedRdfException\n             final Response actual = testObj.createObject(null, requestContentType, \"b\", content, nonRDFSourceLink,\n                 requestSHA);\n             assertEquals(CREATED.getStatusCode(), actual.getStatus());\n-            verify(mockBinary).setContent(content, requestContentType.toString(), shaURI, \"\", null);\n+            verify(createResourceService).perform(\n+                    any(),\n+                    any(),\n+                    eq(finalId),\n+                    eq(requestContentType.toString()),\n+                    eq(\"\"),\n+                    any(),\n+                    eq(nonRDFSourceLink),\n+                    eq(shaURI),\n+                    eq(content),\n+                    eq(null));\n         }\n     }\n \n     @Test\n     public void testCreateNewBinaryWithChecksumMD5() throws MalformedRdfException,\n-            InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+            InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        //setResource(Container.class);", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\nindex b622843886..bca5464e99 100644\n--- a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n+++ b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n\n@@ -1249,7 +1239,6 @@ public class FedoraLdpTest {\n     public void testCreateNewBinaryWithChecksumMD5() throws MalformedRdfException,\n             InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        //setResource(Container.class);\n         final var finalId = pathId.resolve(\"b\");\n         when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(mockBinary);\n         try (final InputStream content = toInputStream(\"x\", UTF_8)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDg4MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434134880", "bodyText": "Remove dead code.", "author": "awoods", "createdAt": "2020-06-02T19:45:45Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1149,16 +1260,27 @@ public void testCreateNewBinaryWithChecksumMD5() throws MalformedRdfException,\n             final Response actual = testObj.createObject(null, requestContentType, \"b\", content, nonRDFSourceLink,\n                 requestMD5);\n             assertEquals(CREATED.getStatusCode(), actual.getStatus());\n-            verify(mockBinary).setContent(content, requestContentType.toString(), md5URI, \"\", null);\n+            verify(createResourceService).perform(\n+                    any(),\n+                    any(),\n+                    eq(finalId),\n+                    eq(requestContentType.toString()),\n+                    eq(\"\"),\n+                    any(),\n+                    eq(nonRDFSourceLink),\n+                    eq(md5URI),\n+                    eq(content),\n+                    eq(null));\n         }\n     }\n \n     @Test\n     public void testCreateNewBinaryWithChecksumSHAandMD5() throws MalformedRdfException,\n-           InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+           InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        //setResource(Container.class);", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\nindex b622843886..bca5464e99 100644\n--- a/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n+++ b/fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java\n\n@@ -1278,7 +1267,6 @@ public class FedoraLdpTest {\n     public void testCreateNewBinaryWithChecksumSHAandMD5() throws MalformedRdfException,\n            InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        //setResource(Container.class);\n         final var finalId = pathId.resolve(\"b\");\n         when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(mockBinary);\n         try (final InputStream content = toInputStream(\"x\", UTF_8)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzU4OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434137589", "bodyText": "Maybe change to \"The Fedora resource to purge\"", "author": "awoods", "createdAt": "2020-06-02T19:51:01Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/services/PurgeResourceService.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.services;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+\n+/**\n+ * Service to permanently remove a resource from the repository.\n+ *\n+ * @author whikloj\n+ */\n+public interface PurgeResourceService {\n+    /**\n+     * Purges the specified resource\n+     *\n+     * @param tx the transaction associated with the operation\n+     * @param fedoraResource The Fedora resource to delete", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/services/PurgeResourceService.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/services/PurgeResourceService.java\nindex ab2a759adc..bf6519114b 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/services/PurgeResourceService.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/services/PurgeResourceService.java\n\n@@ -29,9 +29,9 @@ public interface PurgeResourceService {\n     /**\n      * Purges the specified resource\n      *\n-     * @param tx the transaction associated with the operation\n-     * @param fedoraResource The Fedora resource to delete\n-     * @param userPrincipal the principal of the user performing the operation\n+     * @param tx the transaction associated with the operation.\n+     * @param fedoraResource The Fedora resource to purge.\n+     * @param userPrincipal the principal of the user performing the operation.\n      */\n     void perform(final Transaction tx, final FedoraResource fedoraResource, final String userPrincipal);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MDI5NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434140294", "bodyText": "Can we remove this method? It does not appear to be invoked.", "author": "awoods", "createdAt": "2020-06-02T19:56:12Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java", "diffHunk": "@@ -47,30 +59,48 @@\n      */\n     String getContainedBy(String txID, final FedoraId resource);\n \n+    /**\n+     * Mark a contained by relation between the child resource and its parent as deleted.\n+     *\n+     * @param txID The transaction ID.\n+     * @param parent The containing resource fedoraID.\n+     * @param child The contained resource fedoraID.\n+     */\n+    void removeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child);\n+\n+    /**\n+     * Mark all relationships to the specified resource as deleted.\n+     *\n+     * @param txID The transaction ID.\n+     * @param resource The FedoraId of resource to remove.\n+     */\n+    void removeResource(@Nonnull final String txID, final FedoraId resource);\n+\n     /**\n      * Remove a contained by relation between the child resource and its parent.\n      *\n-     * @param txID The transaction ID.  If no transaction, null is okay.\n+     * @param txID The transaction ID.\n      * @param parent The containing resource fedoraID.\n      * @param child The contained resource fedoraID.\n      */\n-    void removeContainedBy(final String txID, final FedoraId parent, final FedoraId child);\n+    void purgeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child);\n \n     /**\n-     * Remove all relationships to the specified resource.\n-     * @param txID The transaction ID. If no transaction, null is okay.\n+     * Remove all relationships to the specified resource as deleted.\n+     *\n+     * @param txID The transaction ID.\n      * @param resource The FedoraId of resource to remove.\n      */\n-    void removeResource(final String txID, final FedoraId resource);\n+    void purgeResource(@Nonnull final String txID, final FedoraId resource);", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\nindex d17099b5a1..c716f2bd9d 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java\n\n@@ -85,14 +85,6 @@ public interface ContainmentIndex {\n      */\n     void purgeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child);\n \n-    /**\n-     * Remove all relationships to the specified resource as deleted.\n-     *\n-     * @param txID The transaction ID.\n-     * @param resource The FedoraId of resource to remove.\n-     */\n-    void purgeResource(@Nonnull final String txID, final FedoraId resource);\n-\n     /**\n      * Add a contained by relation between the child resource and its parent.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDQ1NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434160454", "bodyText": "Can be changed to private.", "author": "awoods", "createdAt": "2020-06-02T20:36:28Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractDeleteResourceService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static java.lang.String.format;\n+\n+import javax.inject.Inject;\n+\n+import java.util.stream.Stream;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.PathNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundRuntimeException;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.Binary;\n+import org.fcrepo.kernel.api.models.Container;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.NonRdfSourceDescription;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.persistence.api.PersistentStorageSession;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Shared delete/purge code.\n+ * @author whikloj\n+ */\n+abstract public class AbstractDeleteResourceService extends AbstractService {\n+\n+    private final static Logger log = LoggerFactory.getLogger(AbstractDeleteResourceService.class);\n+\n+    @Inject\n+    protected ResourceFactory resourceFactory;\n+\n+    @Inject\n+    protected PersistentStorageSessionManager psManager;\n+\n+    /**\n+     * The starts the service, does initial checks and setups for processing.\n+     * @param tx the transaction.\n+     * @param fedoraResource the resource to start delete/purging.\n+     * @param userPrincipal the user performing the action.\n+     */\n+    public void perform(final Transaction tx, final FedoraResource fedoraResource, final String userPrincipal) {\n+        final String fedoraResourceId = fedoraResource.getId();\n+\n+        if (fedoraResource instanceof NonRdfSourceDescription) {\n+            throw new RepositoryRuntimeException(\n+            format(\"A NonRdfSourceDescription cannot be deleted independently of the NonRDFSource:  %s\",\n+            fedoraResourceId));\n+        }\n+\n+        try {\n+            log.debug(\"operating on {}\", fedoraResourceId);\n+            final PersistentStorageSession pSession = this.psManager.getSession(tx.getId());\n+            deleteDepthFirst(tx, pSession, fedoraResource, userPrincipal);\n+        } catch (final PersistentStorageException ex) {\n+            throw new RepositoryRuntimeException(format(\"failed to delete/purge resource %s\", fedoraResourceId), ex);\n+        }\n+    }\n+\n+    /**\n+     * Code to perform the recursion of containers.\n+     * @param tx the transaction\n+     * @param pSession the persistent storage session\n+     * @param fedoraResource the current resource to check for any children.\n+     * @param userPrincipal the user performing the action.\n+     * @throws PersistentStorageException any problems accessing the underlying storage.\n+     */\n+    protected void deleteDepthFirst(final Transaction tx, final PersistentStorageSession pSession,", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab743d90636faa2409e374b34becddf8a761a30", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractDeleteResourceService.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractDeleteResourceService.java\nindex 8cc542ad2d..b8c3a25c8f 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractDeleteResourceService.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractDeleteResourceService.java\n\n@@ -85,7 +85,7 @@ abstract public class AbstractDeleteResourceService extends AbstractService {\n      * @param userPrincipal the user performing the action.\n      * @throws PersistentStorageException any problems accessing the underlying storage.\n      */\n-    protected void deleteDepthFirst(final Transaction tx, final PersistentStorageSession pSession,\n+    private void deleteDepthFirst(final Transaction tx, final PersistentStorageSession pSession,\n                                   final FedoraResource fedoraResource, final String userPrincipal)\n             throws PersistentStorageException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3NTY1Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434175652", "bodyText": "Comment for this statement should be updated to include 'deleted' info.", "author": "awoods", "createdAt": "2020-06-02T21:06:41Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -79,13 +82,14 @@\n      */\n     private static final String RESOURCES_TABLE_DDL = \"CREATE TABLE IF NOT EXISTS \" + RESOURCES_TABLE + \" (\" +", "originalCommit": "6457a1c76c54720c5417f7d623b311f37c716212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\nindex 0c72e5e0bb..31ace3d705 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\n\n@@ -59,93 +64,59 @@ public class ContainmentIndexImpl implements ContainmentIndex {\n \n     private static final String RESOURCES_TABLE = \"resources\";\n \n-    private static final String RESOURCES_TABLE_IDX = \"resources_idx\";\n+    private static final String TRANSACTION_OPERATIONS_TABLE = \"transaction_operations\";\n \n-    private static final String TRANSACTION_OPERATIONS_TABLE = \"transactionOperations\";\n-\n-    private static final String TRANSACTION_OPERATIONS_TABLE_IDX_1 = \"transactionOperations_idx1\";\n-\n-    private static final String TRANSACTION_OPERATIONS_TABLE_IDX_2 = \"transactionOperations_idx2\";\n-\n-    private static final String FEDORA_ID_COLUMN = \"fedoraId\";\n+    private static final String FEDORA_ID_COLUMN = \"fedora_id\";\n \n     private static final String PARENT_COLUMN = \"parent\";\n \n-    private static final String IS_DELETED_COLUMN = \"isDeleted\";\n-\n-    private static final String TRANSACTION_ID_COLUMN = \"transactionId\";\n+    private static final String TRANSACTION_ID_COLUMN = \"transaction_id\";\n \n     private static final String OPERATION_COLUMN = \"operation\";\n \n-    /**\n-     * Holds the ID and its parent.\n-     */\n-    private static final String RESOURCES_TABLE_DDL = \"CREATE TABLE IF NOT EXISTS \" + RESOURCES_TABLE + \" (\" +\n-            FEDORA_ID_COLUMN + \" varchar(65535) NOT NULL PRIMARY KEY, \" +\n-            PARENT_COLUMN + \" varchar(65535) NOT NULL, \" +\n-            IS_DELETED_COLUMN + \" boolean NOT NULL DEFAULT(FALSE))\";\n+    private static final String IS_DELETED_COLUMN = \"is_deleted\";\n \n-    /**\n-     * Create an index to speed searches for children of a parent.\n-     */\n-    private static final String RESOURCES_TABLE_INDEX_DDL = \"CREATE INDEX IF NOT EXISTS \" + RESOURCES_TABLE_IDX +\n-            \" ON \" + RESOURCES_TABLE + \" (\" + PARENT_COLUMN + \", \" + IS_DELETED_COLUMN + \")\";\n-\n-    /**\n-     * Holds operations to add or delete records from the RESOURCES_TABLE.\n-     */\n-    private static final String TRANSACTION_OPERATIONS_TABLE_DDL = \"CREATE TABLE IF NOT EXISTS \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (\" + FEDORA_ID_COLUMN + \" varchar(65535) NOT NULL, \" +\n-            PARENT_COLUMN + \" varchar(65535) NOT NULL, \" +\n-            TRANSACTION_ID_COLUMN + \" varchar(255) NOT NULL, \" +\n-            OPERATION_COLUMN + \" varchar(10) NOT NULL)\";\n-\n-    /**\n-     * Create an index to speed searches for records related to adding/excluding transaction records\n-     */\n-    private static final String TRANSACTION_OPERATIONS_TABLE_INDEX_1_DDL = \"CREATE INDEX IF NOT EXISTS \" +\n-            TRANSACTION_OPERATIONS_TABLE_IDX_1 + \" ON \" + TRANSACTION_OPERATIONS_TABLE + \" (\" + PARENT_COLUMN + \", \" +\n-            TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN + \")\";\n-\n-    /**\n-     * Create an index to speed finding records related to a transaction.\n-     */\n-    private static final String TRANSACTION_OPERATIONS_TABLE_INDEX_2_DDL = \"CREATE INDEX IF NOT EXISTS \" +\n-            TRANSACTION_OPERATIONS_TABLE_IDX_2 + \" ON \" + TRANSACTION_OPERATIONS_TABLE + \" (\" + TRANSACTION_ID_COLUMN +\n-            \")\";\n-\n-    /**\n+    /*\n      * Select children of a resource that are not marked as deleted.\n      */\n     private static final String SELECT_CHILDREN = \"SELECT \" + FEDORA_ID_COLUMN +\n             \" FROM \" + RESOURCES_TABLE + \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + IS_DELETED_COLUMN + \" = FALSE\";\n \n-    /**\n+    /*\n+     * Select children of a parent from resources table and from the transaction table with an 'add' operation,\n+     * but exclude any records that also exist in the transaction table with a 'delete' operation.\n+     */\n+    private static final String SELECT_CHILDREN_IN_TRANSACTION = \"SELECT x.\" + FEDORA_ID_COLUMN + \" FROM\" +\n+            \" (SELECT \" + FEDORA_ID_COLUMN + \" FROM \" + RESOURCES_TABLE + \" WHERE \" + PARENT_COLUMN + \" = :parent\" +\n+            \" UNION SELECT \" + FEDORA_ID_COLUMN + \" FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId\" +\n+            \" AND \" + OPERATION_COLUMN + \" = 'add') x\" +\n+            \" WHERE NOT EXISTS \" +\n+            \" (SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = x.\" + FEDORA_ID_COLUMN +\n+            \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete')\";\n+\n+    /*\n      * Select all children of a resource that are marked for deletion.\n      */\n-    private static final String SELECT_CHILDREN_MARKED_DELETE = \"SELECT \" + FEDORA_ID_COLUMN +\n-            \" FROM \" + RESOURCES_TABLE + \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + IS_DELETED_COLUMN + \" = TRUE\";\n-\n-    /**\n-     * Select children of a resource added in the a non-committed transaction\n-     */\n-    private static final String SELECT_ADDED_CHILDREN = \"SELECT \" + FEDORA_ID_COLUMN +\n-            \" FROM \" + TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" +\n-            TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n-            OPERATION_COLUMN + \" = 'add'\";\n-\n-    /**\n-     * Select children of a resource deleted in the non-committed transaction.\n-     */\n     private static final String SELECT_DELETED_CHILDREN = \"SELECT \" + FEDORA_ID_COLUMN +\n-            \" FROM \" + TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" +\n-            TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n-            OPERATION_COLUMN + \" = 'delete'\";\n+            \" FROM \" + RESOURCES_TABLE + \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + IS_DELETED_COLUMN + \" = TRUE\";\n \n-    /**\n+    /*\n+     * Select children of a resource plus children 'add'ed in the non-committed transaction, but excluding any\n+     * 'delete'd in the non-committed transaction.\n+     */\n+    private static final String SELECT_DELETED_CHILDREN_IN_TRANSACTION = \"SELECT x.\" + FEDORA_ID_COLUMN +\n+            \" FROM \" + TRANSACTION_OPERATIONS_TABLE + \"(SELECT \" + FEDORA_ID_COLUMN + \" FROM \" + RESOURCES_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent UNION SELECT \" + FEDORA_ID_COLUMN + \" FROM \" +\n+            TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + TRANSACTION_ID_COLUMN +\n+            \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add') x\" +\n+            \" WHERE NOT EXISTS \" +\n+            \"(SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" +\n+            FEDORA_ID_COLUMN + \" = x.\" + FEDORA_ID_COLUMN + \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'delete')\";\n+\n+    /*\n      * Select children of a resource purged in a non-committed transaction.\n      */\n     private static final String SELECT_PURGED_CHILDREN = \"SELECT \" + FEDORA_ID_COLUMN +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjE5OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434916198", "bodyText": "Thanks for this... printing the value of the stmt or stmt.getSubject() would be a little bit more useful.", "author": "awoods", "createdAt": "2020-06-03T23:45:59Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -131,6 +131,8 @@ public Model bodyToInternalModel(final String extResourceId, final InputStream s\n \n                     stmtIterator.remove();\n                 }\n+            } else {\n+                log.debug(\"Subject is not a URI resource, skipping\");", "originalCommit": "e6f8f09296b1f7696bcdfedb22a639f738c0727e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java\nindex 57b17b4bb8..612b6d7849 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java\n\n@@ -131,8 +131,6 @@ public class HttpRdfService {\n \n                     stmtIterator.remove();\n                 }\n-            } else {\n-                log.debug(\"Subject is not a URI resource, skipping\");\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNzI0NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434917244", "bodyText": "Minor (borderline ignorable)... but originalResource = fedoraResource.getOriginalResource(); is indented one space too far.", "author": "awoods", "createdAt": "2020-06-03T23:49:53Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -1086,7 +1086,14 @@ public FedoraResource getResourceFromPath(final String externalPath) {\n         try {\n             final FedoraResource fedoraResource = resourceFactory.getResource(transaction(), fedoraId);\n \n-            if (fedoraResource instanceof Tombstone) {\n+            final FedoraResource originalResource;\n+            if (fedoraId.isMemento()) {\n+                 originalResource = fedoraResource.getOriginalResource();", "originalCommit": "e6f8f09296b1f7696bcdfedb22a639f738c0727e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java\nindex b75bac9317..e0b2cda412 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java\n\n@@ -1086,14 +1088,7 @@ public abstract class ContentExposingResource extends FedoraBaseResource {\n         try {\n             final FedoraResource fedoraResource = resourceFactory.getResource(transaction(), fedoraId);\n \n-            final FedoraResource originalResource;\n-            if (fedoraId.isMemento()) {\n-                 originalResource = fedoraResource.getOriginalResource();\n-            } else {\n-                originalResource = fedoraResource;\n-            }\n-\n-            if (originalResource instanceof Tombstone) {\n+            if (fedoraResource instanceof Tombstone) {\n                 final String tombstoneUri = identifierConverter().toExternalId(\n                             fedoraResource.getFedoraId().resolve(FCR_TOMBSTONE).getFullId()\n                     );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDk2OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434920969", "bodyText": "I was hoping that the test entitled: \"Memento of deleted resource still available\" would work given this change. However, following those test steps results in:\nHTTP/1.1 400 Bad Request\nPath is invalid: /binary/fcr:versions/20200603235900/fcr:tombstone", "author": "awoods", "createdAt": "2020-06-04T00:03:20Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -1087,7 +1086,14 @@ public FedoraResource getResourceFromPath(final String externalPath) {\n         try {\n             final FedoraResource fedoraResource = resourceFactory.getResource(transaction(), fedoraId);\n \n-            if (fedoraResource instanceof Tombstone) {\n+            final FedoraResource originalResource;\n+            if (fedoraId.isMemento()) {\n+                 originalResource = fedoraResource.getOriginalResource();\n+            } else {\n+                originalResource = fedoraResource;\n+            }\n+\n+            if (originalResource instanceof Tombstone) {\n                 final String tombstoneUri = identifierConverter().toExternalId(", "originalCommit": "e6f8f09296b1f7696bcdfedb22a639f738c0727e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4NjI4Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r435386286", "bodyText": "This should now be resolved. Though the test that confirms this might need some work as it was passing before the most recent change so I'm not sure it is actually useful.", "author": "whikloj", "createdAt": "2020-06-04T16:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "chunk": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java\nindex b75bac9317..e0b2cda412 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java\n\n@@ -1086,14 +1088,7 @@ public abstract class ContentExposingResource extends FedoraBaseResource {\n         try {\n             final FedoraResource fedoraResource = resourceFactory.getResource(transaction(), fedoraId);\n \n-            final FedoraResource originalResource;\n-            if (fedoraId.isMemento()) {\n-                 originalResource = fedoraResource.getOriginalResource();\n-            } else {\n-                originalResource = fedoraResource;\n-            }\n-\n-            if (originalResource instanceof Tombstone) {\n+            if (fedoraResource instanceof Tombstone) {\n                 final String tombstoneUri = identifierConverter().toExternalId(\n                             fedoraResource.getFedoraId().resolve(FCR_TOMBSTONE).getFullId()\n                     );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzA0OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r435283049", "bodyText": "It would be safer if this was executed within a DB transaction because there are cases where you're updating multiple records.", "author": "pwinckles", "createdAt": "2020-06-04T14:03:31Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -280,69 +391,75 @@ public String getContainedBy(final String txID, final FedoraId resource) {\n     }\n \n     @Override\n-    public void addContainedBy(final String txID, final FedoraId parent, final FedoraId child) {\n+    public void addContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child) {\n         final String parentID = parent.getFullId();\n         final String childID = child.getFullId();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", parentID);\n         parameterSource.addValue(\"child\", childID);\n-        if (txID != null) {\n-            parameterSource.addValue(\"transactionId\", txID);\n-            final boolean removedInTxn = !jdbcTemplate.queryForList(IS_CHILD_DELETED_IN_TRANSACTION, parameterSource)\n-                    .isEmpty();\n-            if (removedInTxn) {\n-                jdbcTemplate.update(UNDO_DELETE_CHILD_IN_TRANSACTION, parameterSource);\n-            } else {\n-                jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n-            }\n+        parameterSource.addValue(\"transactionId\", txID);\n+        final boolean purgedInTxn = !jdbcTemplate.queryForList(IS_CHILD_PURGED_IN_TRANSACTION, parameterSource)\n+                .isEmpty();\n+        if (purgedInTxn) {\n+            // We purged it, but are re-adding it so remove the purge operation.\n+            jdbcTemplate.update(UNDO_PURGE_CHILD_IN_TRANSACTION, parameterSource);\n         } else {\n-            jdbcTemplate.update(INSERT_CHILD, parameterSource);\n+            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n         }\n     }\n \n     @Override\n-    public void removeContainedBy(final String txID, final FedoraId parent, final FedoraId child) {\n+    public void removeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child) {\n         final String parentID = parent.getFullId();\n         final String childID = child.getFullId();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", parentID);\n         parameterSource.addValue(\"child\", childID);\n-        if (txID != null) {\n-            parameterSource.addValue(\"transactionId\", txID);\n-            final boolean addedInTxn = !jdbcTemplate.queryForList(IS_CHILD_ADDED_IN_TRANSACTION, parameterSource)\n-                    .isEmpty();\n-            if (addedInTxn) {\n-                jdbcTemplate.update(UNDO_INSERT_CHILD_IN_TRANSACTION, parameterSource);\n-            } else {\n-                jdbcTemplate.update(DELETE_CHILD_IN_TRANSACTION, parameterSource);\n-            }\n+        parameterSource.addValue(\"transactionId\", txID);\n+        final boolean addedInTxn = !jdbcTemplate.queryForList(IS_CHILD_ADDED_IN_TRANSACTION, parameterSource)\n+                .isEmpty();\n+        if (addedInTxn) {\n+            jdbcTemplate.update(UNDO_INSERT_CHILD_IN_TRANSACTION, parameterSource);\n         } else {\n-            jdbcTemplate.update(DELETE_CHILD, parameterSource);\n+            jdbcTemplate.update(DELETE_CHILD_IN_TRANSACTION, parameterSource);\n         }\n     }\n \n     @Override\n-    public void removeResource(final String txID, final FedoraId resource) {\n+    public void purgeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child) {", "originalCommit": "e6f8f09296b1f7696bcdfedb22a639f738c0727e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNjA0Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r435516046", "bodyText": "This method no longer exists, as I needed to use the other one (purgeResource()).\nBut in either case a record is added to the transaction_operations table for the purge and then those changes are committed to the actual resource table inside a database transaction as part of the commit()", "author": "whikloj", "createdAt": "2020-06-04T20:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMTM1MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r435521350", "bodyText": "It is probably a small enough issue that it doesn't merit worrying about too much, but, in purgeResource, it is technically possible for the rollback of a delete to be applied but the purge not be applied. In that case, the transaction_operations table is in an incorrect state and it doesn't matter that it's committed to the resources table in a transaction.", "author": "pwinckles", "createdAt": "2020-06-04T20:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyODI4Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r435528283", "bodyText": "Fair point, I'm starting to hate this table and think Fedora should support 1 connection only. I mean how many people really need to work with the repository?", "author": "whikloj", "createdAt": "2020-06-04T20:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "chunk": "diff --git a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\nindex e355c902e3..31ace3d705 100644\n--- a/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\n+++ b/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java\n\n@@ -380,10 +365,7 @@ public class ContainmentIndexImpl implements ContainmentIndex {\n         final List<String> parentID;\n         if (txID != null) {\n             parameterSource.addValue(\"transactionId\", txID);\n-            final String currentResourceQuery = PARENT_EXISTS +\n-                    \" UNION \" + PARENT_EXISTS_ADDITIONS +\n-                    \" EXCEPT \" + PARENT_EXISTS_DELETIONS;\n-            parentID = jdbcTemplate.queryForList(currentResourceQuery, parameterSource, String.class);\n+            parentID = jdbcTemplate.queryForList(PARENT_EXISTS_IN_TRANSACTION, parameterSource, String.class);\n         } else {\n             parentID = jdbcTemplate.queryForList(PARENT_EXISTS, parameterSource, String.class);\n         }\n"}}, {"oid": "afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "url": "https://github.com/fcrepo/fcrepo/commit/afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "message": "Purge resources and fix FedoraLdpTests", "committedDate": "2020-06-05T14:06:23Z", "type": "commit"}, {"oid": "9ab743d90636faa2409e374b34becddf8a761a30", "url": "https://github.com/fcrepo/fcrepo/commit/9ab743d90636faa2409e374b34becddf8a761a30", "message": "Code review and add some ITs", "committedDate": "2020-06-05T14:07:56Z", "type": "commit"}, {"oid": "3a35add6c9421f2949b7a79e399ecea1f3a881c7", "url": "https://github.com/fcrepo/fcrepo/commit/3a35add6c9421f2949b7a79e399ecea1f3a881c7", "message": "more code review", "committedDate": "2020-06-05T14:07:56Z", "type": "commit"}, {"oid": "a50f8d90f06bc3fbd5c8433f0d7b4bcb9dfe6beb", "url": "https://github.com/fcrepo/fcrepo/commit/a50f8d90f06bc3fbd5c8433f0d7b4bcb9dfe6beb", "message": "Fix the purging and tombstone access", "committedDate": "2020-06-05T14:19:57Z", "type": "commit"}, {"oid": "c641dc7af08255d46c98e67a2a943ed358e29d04", "url": "https://github.com/fcrepo/fcrepo/commit/c641dc7af08255d46c98e67a2a943ed358e29d04", "message": "Changes from rebase", "committedDate": "2020-06-05T17:29:52Z", "type": "commit"}, {"oid": "c641dc7af08255d46c98e67a2a943ed358e29d04", "url": "https://github.com/fcrepo/fcrepo/commit/c641dc7af08255d46c98e67a2a943ed358e29d04", "message": "Changes from rebase", "committedDate": "2020-06-05T17:29:52Z", "type": "forcePushed"}]}