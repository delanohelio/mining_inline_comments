{"pr_number": 1648, "pr_title": "Add a FedoraID class", "pr_createdAt": "2020-03-20T19:10:14Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1648", "timeline": [{"oid": "167935a2cd03d42b4594990566bf85ef97b9a742", "url": "https://github.com/fcrepo/fcrepo/commit/167935a2cd03d42b4594990566bf85ef97b9a742", "message": "Add a FedoraID class", "committedDate": "2020-03-20T19:06:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNjg5NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r395906894", "bodyText": "Maybe change to Java syntax? ..something like mementoDatetimeStr", "author": "awoods", "createdAt": "2020-03-20T21:55:07Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzUyMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r395907521", "bodyText": "The idea is that this class only handles internal IDs? I assume the expectation is that translation to an external representation will be handled at the http-api level?", "author": "awoods", "createdAt": "2020-03-20T21:57:01Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1OTU3Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396459576", "bodyText": "I thought the agreement was that the existing HttpIdentifierConverter would handle the straight server name replacement and then this class would handle the more complex interpretation of the internal ID.", "author": "whikloj", "createdAt": "2020-03-23T13:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTA1NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r395909054", "bodyText": "What is this scenario? ..when there is something that follows fcr:versions... but not a memento identifier??", "author": "awoods", "createdAt": "2020-03-20T22:01:57Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));\n+                } else {\n+                    this.isTimemap = true;", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MDYxNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396460617", "bodyText": "Yeah, I'm not sure if JAX-RS allows it but I wondered if you did http://localhost:8080/rest/object1/fcr:versions/ would you end up here. Perhaps we never hit it?", "author": "whikloj", "createdAt": "2020-03-23T13:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MDkzNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396460935", "bodyText": "I can remove it and we can try an eventual integration test to see what happens.", "author": "whikloj", "createdAt": "2020-03-23T13:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NTUzOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396445538", "bodyText": "Shouldn't do the same split twice.", "author": "pwinckles", "createdAt": "2020-03-23T13:22:34Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0ODY5NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396448694", "bodyText": "Is the assumption that any trailing slashes were removed outside of this class? It might be worth doing a final trim here to be safe.", "author": "pwinckles", "createdAt": "2020-03-23T13:27:29Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0MjUwMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396642503", "bodyText": "Resolved with 608e69d", "author": "whikloj", "createdAt": "2020-03-23T17:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0ODY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MjQ1NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396452455", "bodyText": "See what I did here when parsing mementos. I think you want to throw an exception here if there's a part after fcr:versions that isn't a parsable memento.", "author": "pwinckles", "createdAt": "2020-03-23T13:33:00Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0Mjc1NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396642754", "bodyText": "Resolved with 608e69d", "author": "whikloj", "createdAt": "2020-03-23T17:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MjQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1Mjc2Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396452767", "bodyText": "If this fails, I think it should throw a InvalidMementoPathException.", "author": "pwinckles", "createdAt": "2020-03-23T13:33:27Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MzQ2NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396453464", "bodyText": "Again, I would avoid doing the same split multiple times.", "author": "pwinckles", "createdAt": "2020-03-23T13:34:27Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));\n+                } else {\n+                    this.isTimemap = true;\n+                }\n+            } else {\n+                this.isTimemap = true;\n+            }\n+            processID = processID.split(FCR_VERSIONS)[0];", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1NjE4Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396456186", "bodyText": "Should there be any other constraints that are enforced in this class? Like maybe rejecting paths that include an empty element (eg a//b)?", "author": "pwinckles", "createdAt": "2020-03-23T13:38:32Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));\n+                } else {\n+                    this.isTimemap = true;\n+                }\n+            } else {\n+                this.isTimemap = true;\n+            }\n+            processID = processID.split(FCR_VERSIONS)[0];\n+        }\n+        if (processID.contains(FCR_METADATA)) {\n+            this.isNonRdfSourceDescription = true;\n+            processID = processID.split(FCR_METADATA)[0];\n+        }\n+        if (processID.endsWith(\"/\")) {\n+            processID = processID.replaceAll(\"/+$\", \"\");", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3Mjg4NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396572884", "bodyText": "We can do this and Fedora 5.1 does throw a 400 Bad Request error. But I have not been able to figure out where the exception is generated. It is possible it was Modeshape that did this.", "author": "whikloj", "createdAt": "2020-03-23T16:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1NjE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0MzAyNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396643027", "bodyText": "Resolved with 608e69d", "author": "whikloj", "createdAt": "2020-03-23T17:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1NjE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MjYyNg==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396462626", "bodyText": "What if the id looks like a/b/fcr:acl/garbage? Should that be an error rather than simply throwing out the invalid content?", "author": "pwinckles", "createdAt": "2020-03-23T13:47:50Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1ODYwNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396558607", "bodyText": "Fedora 5.1 responds with:\n> curl -ufedoraAdmin:fedoraAdmin http://localhost:8080/rest/A/fcr:acl/test-garbage -i\nHTTP/1.1 400 Bad Request\nDate: Mon, 23 Mar 2020 15:53:58 GMT\nSet-Cookie: JSESSIONID=67t4kxw6llqe1gk3lq8rgj6gb;Path=/\nExpires: Thu, 01 Jan 1970 00:00:00 GMT\nSet-Cookie: rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Sun, 22-Mar-2020 15:53:58 GMT\nContent-Type: text/plain;charset=utf-8\nContent-Length: 48\nServer: Jetty(9.3.25.v20180904)\n\nError converting \"fcr:acl\" from String to a Name\n\nWhat do we want to see with Fedora 6?", "author": "whikloj", "createdAt": "2020-03-23T15:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MjYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4Njk0NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396586944", "bodyText": "400 makes sense. Just about any error message would be better than the 5.1 message.", "author": "pwinckles", "createdAt": "2020-03-23T16:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MjYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0MjYzOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396642638", "bodyText": "Resolved with 608e69d", "author": "whikloj", "createdAt": "2020-03-23T17:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MjYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MzYwMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396463600", "bodyText": "Similar question here as the acl question above. At this point, there shouldn't be anything after fcr:metadata, right? If there is, should it be ignored or rejected?", "author": "pwinckles", "createdAt": "2020-03-23T13:49:06Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));\n+                } else {\n+                    this.isTimemap = true;\n+                }\n+            } else {\n+                this.isTimemap = true;\n+            }\n+            processID = processID.split(FCR_VERSIONS)[0];\n+        }\n+        if (processID.contains(FCR_METADATA)) {", "originalCommit": "167935a2cd03d42b4594990566bf85ef97b9a742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2MTQwOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396561409", "bodyText": "Same question here, what do we want? Fedora 5.1 does this:\n> curl -ufedoraAdmin:fedoraAdmin -i http://localhost:8080/rest/binary1/fcr:metadata/test-garbage\nHTTP/1.1 400 Bad Request\nDate: Mon, 23 Mar 2020 15:57:55 GMT\nSet-Cookie: JSESSIONID=1nsw8b5a9u9ok3kh3dzl5nnmn;Path=/\nExpires: Thu, 01 Jan 1970 00:00:00 GMT\nSet-Cookie: rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Sun, 22-Mar-2020 15:57:55 GMT\nContent-Type: text/plain;charset=utf-8\nContent-Length: 53\nServer: Jetty(9.3.25.v20180904)\n\nError converting \"fcr:metadata\" from String to a Name", "author": "whikloj", "createdAt": "2020-03-23T15:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MzYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0Mjg5OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396642899", "bodyText": "Resolved with 608e69d", "author": "whikloj", "createdAt": "2020-03-23T17:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MzYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "608e69dd845edb56d36941606048ebcfa493634f", "chunk": "diff --git a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\nindex c6d9b9a75c..f3ef50b086 100644\n--- a/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n+++ b/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java\n\n@@ -24,6 +24,10 @@ import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n \n import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+\n+import org.fcrepo.kernel.api.exception.InvalidMementoPathException;\n+import org.fcrepo.kernel.api.exception.InvalidResourceIdentifierException;\n \n /**\n  * Class to store contextual information about a Fedora ID.\n"}}, {"oid": "608e69dd845edb56d36941606048ebcfa493634f", "url": "https://github.com/fcrepo/fcrepo/commit/608e69dd845edb56d36941606048ebcfa493634f", "message": "Add more exceptions", "committedDate": "2020-03-23T17:46:13Z", "type": "commit"}, {"oid": "2c2a4652a764273ad83ab1b59cfb41cdef4a79c0", "url": "https://github.com/fcrepo/fcrepo/commit/2c2a4652a764273ad83ab1b59cfb41cdef4a79c0", "message": "Missed a split", "committedDate": "2020-03-23T17:50:31Z", "type": "commit"}, {"oid": "ba4a886ca19cd93d00948276471ab553cf1dc355", "url": "https://github.com/fcrepo/fcrepo/commit/ba4a886ca19cd93d00948276471ab553cf1dc355", "message": "Missed the actual message", "committedDate": "2020-03-23T18:02:13Z", "type": "commit"}]}