{"pr_number": 3342, "pr_title": "Allow Buffer side by side with byte[]", "pr_createdAt": "2020-03-24T13:43:48Z", "pr_url": "https://github.com/eclipse-vertx/vert.x/pull/3342", "timeline": [{"oid": "33c495ff7b487d465426d116c7516004544cf980", "url": "https://github.com/eclipse-vertx/vert.x/commit/33c495ff7b487d465426d116c7516004544cf980", "message": "Allow Buffer side by side with byte[]\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-03-24T13:42:57Z", "type": "commit"}, {"oid": "035a2cf24ebdb1135793d1ab2a123e826d7facf1", "url": "https://github.com/eclipse-vertx/vert.x/commit/035a2cf24ebdb1135793d1ab2a123e826d7facf1", "message": "Added codec tests for buffer\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-04-03T10:29:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0ODQ2Mg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3342#discussion_r404148462", "bodyText": "either buffer or {@code Buffer}\n{@code key}", "author": "vietj", "createdAt": "2020-04-06T14:44:59Z", "path": "src/main/java/io/vertx/core/json/JsonObject.java", "diffHunk": "@@ -285,12 +287,50 @@ public JsonArray getJsonArray(String key) {\n     if (val instanceof byte[]) {\n       return (byte[]) val;\n     }\n+    // unwrap if value is already a Buffer\n+    if (val instanceof Buffer) {\n+      return ((Buffer) val).getBytes();\n+    }\n     // assume that the value is in String format as per RFC\n     String encoded = (String) val;\n     // parse to proper type\n     return BASE64_DECODER.decode(encoded);\n   }\n \n+  /**\n+   * Get the Buffer value with the specified key.", "originalCommit": "035a2cf24ebdb1135793d1ab2a123e826d7facf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "824ed9c7bf97cf8c6e0d95ee5c86712be8e8ca15", "chunk": "diff --git a/src/main/java/io/vertx/core/json/JsonObject.java b/src/main/java/io/vertx/core/json/JsonObject.java\nindex 453a2cf7b..07eaaee9c 100644\n--- a/src/main/java/io/vertx/core/json/JsonObject.java\n+++ b/src/main/java/io/vertx/core/json/JsonObject.java\n\n@@ -298,15 +298,15 @@ public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterS\n   }\n \n   /**\n-   * Get the Buffer value with the specified key.\n+   * Get the {@code Buffer} value with the specified key.\n    *\n    * JSON itself has no notion of a binary, this extension complies to the RFC-7493, so this method assumes there is a\n    * String value with the key and it contains a Base64 encoded binary, which it decodes if found and returns.\n    *\n-   * @param key the key to return the value for\n+   * @param key the string to return the value for\n    * @return the value or null if no value for that key\n    * @throws java.lang.ClassCastException       if the value is not a String\n-   * @throws java.lang.IllegalArgumentException if the String value is not a legal Base64 encoded value\n+   * @throws java.lang.IllegalArgumentException if the String is not a legal Base64 encoded value\n    */\n   public Buffer getBuffer(String key) {\n     Objects.requireNonNull(key);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0OTUyMg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3342#discussion_r404149522", "bodyText": "string", "author": "vietj", "createdAt": "2020-04-06T14:46:22Z", "path": "src/main/java/io/vertx/core/json/JsonObject.java", "diffHunk": "@@ -285,12 +287,50 @@ public JsonArray getJsonArray(String key) {\n     if (val instanceof byte[]) {\n       return (byte[]) val;\n     }\n+    // unwrap if value is already a Buffer\n+    if (val instanceof Buffer) {\n+      return ((Buffer) val).getBytes();\n+    }\n     // assume that the value is in String format as per RFC\n     String encoded = (String) val;\n     // parse to proper type\n     return BASE64_DECODER.decode(encoded);\n   }\n \n+  /**\n+   * Get the Buffer value with the specified key.\n+   *\n+   * JSON itself has no notion of a binary, this extension complies to the RFC-7493, so this method assumes there is a\n+   * String value with the key and it contains a Base64 encoded binary, which it decodes if found and returns.\n+   *\n+   * @param key the key to return the value for\n+   * @return the value or null if no value for that key\n+   * @throws java.lang.ClassCastException       if the value is not a String", "originalCommit": "035a2cf24ebdb1135793d1ab2a123e826d7facf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "824ed9c7bf97cf8c6e0d95ee5c86712be8e8ca15", "chunk": "diff --git a/src/main/java/io/vertx/core/json/JsonObject.java b/src/main/java/io/vertx/core/json/JsonObject.java\nindex 453a2cf7b..07eaaee9c 100644\n--- a/src/main/java/io/vertx/core/json/JsonObject.java\n+++ b/src/main/java/io/vertx/core/json/JsonObject.java\n\n@@ -298,15 +298,15 @@ public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterS\n   }\n \n   /**\n-   * Get the Buffer value with the specified key.\n+   * Get the {@code Buffer} value with the specified key.\n    *\n    * JSON itself has no notion of a binary, this extension complies to the RFC-7493, so this method assumes there is a\n    * String value with the key and it contains a Base64 encoded binary, which it decodes if found and returns.\n    *\n-   * @param key the key to return the value for\n+   * @param key the string to return the value for\n    * @return the value or null if no value for that key\n    * @throws java.lang.ClassCastException       if the value is not a String\n-   * @throws java.lang.IllegalArgumentException if the String value is not a legal Base64 encoded value\n+   * @throws java.lang.IllegalArgumentException if the String is not a legal Base64 encoded value\n    */\n   public Buffer getBuffer(String key) {\n     Objects.requireNonNull(key);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0OTg1Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3342#discussion_r404149856", "bodyText": "simply \"value\" and not \"String value\"", "author": "vietj", "createdAt": "2020-04-06T14:46:48Z", "path": "src/main/java/io/vertx/core/json/JsonObject.java", "diffHunk": "@@ -285,12 +287,50 @@ public JsonArray getJsonArray(String key) {\n     if (val instanceof byte[]) {\n       return (byte[]) val;\n     }\n+    // unwrap if value is already a Buffer\n+    if (val instanceof Buffer) {\n+      return ((Buffer) val).getBytes();\n+    }\n     // assume that the value is in String format as per RFC\n     String encoded = (String) val;\n     // parse to proper type\n     return BASE64_DECODER.decode(encoded);\n   }\n \n+  /**\n+   * Get the Buffer value with the specified key.\n+   *\n+   * JSON itself has no notion of a binary, this extension complies to the RFC-7493, so this method assumes there is a\n+   * String value with the key and it contains a Base64 encoded binary, which it decodes if found and returns.\n+   *\n+   * @param key the key to return the value for\n+   * @return the value or null if no value for that key\n+   * @throws java.lang.ClassCastException       if the value is not a String\n+   * @throws java.lang.IllegalArgumentException if the String value is not a legal Base64 encoded value", "originalCommit": "035a2cf24ebdb1135793d1ab2a123e826d7facf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "824ed9c7bf97cf8c6e0d95ee5c86712be8e8ca15", "chunk": "diff --git a/src/main/java/io/vertx/core/json/JsonObject.java b/src/main/java/io/vertx/core/json/JsonObject.java\nindex 453a2cf7b..07eaaee9c 100644\n--- a/src/main/java/io/vertx/core/json/JsonObject.java\n+++ b/src/main/java/io/vertx/core/json/JsonObject.java\n\n@@ -298,15 +298,15 @@ public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterS\n   }\n \n   /**\n-   * Get the Buffer value with the specified key.\n+   * Get the {@code Buffer} value with the specified key.\n    *\n    * JSON itself has no notion of a binary, this extension complies to the RFC-7493, so this method assumes there is a\n    * String value with the key and it contains a Base64 encoded binary, which it decodes if found and returns.\n    *\n-   * @param key the key to return the value for\n+   * @param key the string to return the value for\n    * @return the value or null if no value for that key\n    * @throws java.lang.ClassCastException       if the value is not a String\n-   * @throws java.lang.IllegalArgumentException if the String value is not a legal Base64 encoded value\n+   * @throws java.lang.IllegalArgumentException if the String is not a legal Base64 encoded value\n    */\n   public Buffer getBuffer(String key) {\n     Objects.requireNonNull(key);\n"}}, {"oid": "824ed9c7bf97cf8c6e0d95ee5c86712be8e8ca15", "url": "https://github.com/eclipse-vertx/vert.x/commit/824ed9c7bf97cf8c6e0d95ee5c86712be8e8ca15", "message": "minor javadoc improvements\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-04-22T09:23:28Z", "type": "commit"}, {"oid": "824ed9c7bf97cf8c6e0d95ee5c86712be8e8ca15", "url": "https://github.com/eclipse-vertx/vert.x/commit/824ed9c7bf97cf8c6e0d95ee5c86712be8e8ca15", "message": "minor javadoc improvements\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-04-22T09:23:28Z", "type": "forcePushed"}, {"oid": "3bfb13c7006cced01724c13d7278f3f354f5ccf2", "url": "https://github.com/eclipse-vertx/vert.x/commit/3bfb13c7006cced01724c13d7278f3f354f5ccf2", "message": "minor javadoc improvements\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-04-22T09:25:02Z", "type": "commit"}, {"oid": "3bfb13c7006cced01724c13d7278f3f354f5ccf2", "url": "https://github.com/eclipse-vertx/vert.x/commit/3bfb13c7006cced01724c13d7278f3f354f5ccf2", "message": "minor javadoc improvements\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-04-22T09:25:02Z", "type": "forcePushed"}, {"oid": "4a5b4ef871a041374ecd7a63fc0ae6ff1eda85df", "url": "https://github.com/eclipse-vertx/vert.x/commit/4a5b4ef871a041374ecd7a63fc0ae6ff1eda85df", "message": "Merge branch 'issues/json-allow-buffer' of github.com:eclipse-vertx/vert.x into issues/json-allow-buffer\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-04-22T09:26:54Z", "type": "commit"}]}