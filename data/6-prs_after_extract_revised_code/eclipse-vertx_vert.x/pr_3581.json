{"pr_number": 3581, "pr_title": "Fixes Resolver delete race against file resolve", "pr_createdAt": "2020-09-23T09:55:44Z", "pr_url": "https://github.com/eclipse-vertx/vert.x/pull/3581", "timeline": [{"oid": "40fd0d0a2e761ebb13b46a6ca84fec4b6f36cead", "url": "https://github.com/eclipse-vertx/vert.x/commit/40fd0d0a2e761ebb13b46a6ca84fec4b6f36cead", "message": "Fixes Resolver delete race against file resolve\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-09-23T09:41:59Z", "type": "commit"}, {"oid": "6e1a9d88eff2a8905f0d02b9eb1ef87b2a998e5d", "url": "https://github.com/eclipse-vertx/vert.x/commit/6e1a9d88eff2a8905f0d02b9eb1ef87b2a998e5d", "message": "Added a comment\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-09-23T09:57:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MzY2NA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r494593664", "bodyText": "this is called from the constructor so it does not need to be synchronized", "author": "vietj", "createdAt": "2020-09-24T20:32:46Z", "path": "src/main/java/io/vertx/core/file/impl/FileResolver.java", "diffHunk": "@@ -375,9 +370,24 @@ private ClassLoader getClassLoader() {\n     return cl;\n   }\n \n-  private synchronized void setupCacheDir(String id) {\n-    String cacheDirName = fileCacheDir + \"/file-cache-\" + id;\n-    cacheDir = new File(cacheDirName);\n+  /**\n+   * Will prepare the cache directory to be used in the application or return null if classpath resolving is disabled.\n+   */\n+  private synchronized File setupCacheDir(String fileCacheDir) {", "originalCommit": "6e1a9d88eff2a8905f0d02b9eb1ef87b2a998e5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05e70fe98166aa2962aeb58b5a2dea3ba0668e12", "chunk": "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java\nindex 2f2e7dd69..74fa677f8 100644\n--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java\n+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java\n\n@@ -373,7 +389,7 @@ public class FileResolver {\n   /**\n    * Will prepare the cache directory to be used in the application or return null if classpath resolving is disabled.\n    */\n-  private synchronized File setupCacheDir(String fileCacheDir) {\n+  private File setupCacheDir(String fileCacheDir) {\n     if (!this.enableCpResolving) {\n       return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5NTM3MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r494595370", "bodyText": "instead here we should have something that will not block other threads when deleting the dir and just return, something like\nFile dir;\nsynchronized(this) {\n  if (cacheDir == null) {\n    return;\n  }\n  dir = cacheDir;\n  cacheDir = null;\n}\nif (dir.exists()) {\n  FileSystemImpl.delete(dir.toPath(), true);\n}", "author": "vietj", "createdAt": "2020-09-24T20:36:00Z", "path": "src/main/java/io/vertx/core/file/impl/FileResolver.java", "diffHunk": "@@ -398,18 +408,20 @@ private synchronized void setupCacheDir(String id) {\n       }\n     });\n     Runtime.getRuntime().addShutdownHook(shutdownHook);\n+    return cacheDir;\n   }\n \n   private void deleteCacheDir() throws IOException {\n-    Path path;\n+    if (cacheDir == null || !cacheDir.exists()) {", "originalCommit": "6e1a9d88eff2a8905f0d02b9eb1ef87b2a998e5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05e70fe98166aa2962aeb58b5a2dea3ba0668e12", "chunk": "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java\nindex 2f2e7dd69..74fa677f8 100644\n--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java\n+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java\n\n@@ -415,13 +436,19 @@ public class FileResolver {\n     if (cacheDir == null || !cacheDir.exists()) {\n       return;\n     }\n+    // save the state before we force a flip\n+    final File dir;\n     synchronized (this) {\n-      // if a previous run was already deleting\n-      // after entering the monitor we can quickly abort of the\n-      // directory doesn't exist anymore\n-      if (cacheDir.exists()) {\n-        FileSystemImpl.delete(cacheDir.toPath(), true);\n+      if (cacheDir == null) {\n+        return;\n       }\n+      // disable the cache dir\n+      dir = cacheDir;\n+      cacheDir = null;\n+    }\n+    // threads will only enter here once, as the resolving flag is flipped above\n+    if (dir.exists()) {\n+      FileSystemImpl.delete(dir.toPath(), true);\n     }\n   }\n }\n"}}, {"oid": "05e70fe98166aa2962aeb58b5a2dea3ba0668e12", "url": "https://github.com/eclipse-vertx/vert.x/commit/05e70fe98166aa2962aeb58b5a2dea3ba0668e12", "message": "Refactor based on review + more checks\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-09-25T14:46:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTE2Mw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r495445163", "bodyText": "shouldn't we rather log this instead of throwing ?", "author": "vietj", "createdAt": "2020-09-26T10:59:41Z", "path": "src/main/java/io/vertx/core/file/impl/FileResolver.java", "diffHunk": "@@ -236,10 +242,15 @@ private synchronized File unpackFromFileURL(URL url, String fileName, ClassLoade\n     } else {\n       cacheFile.mkdirs();\n       String[] listing = resource.list();\n-      for (String file: listing) {\n-        String subResource = fileName + \"/\" + file;\n-        URL url2 = getValidClassLoaderResource(cl, subResource);\n-        unpackFromFileURL(url2, subResource, cl);\n+      if (listing != null) {\n+        for (String file: listing) {\n+          String subResource = fileName + \"/\" + file;\n+          URL url2 = getValidClassLoaderResource(cl, subResource);\n+          if (url2 == null) {\n+            throw new VertxException(\"Invalid resource: \" + subResource);", "originalCommit": "05e70fe98166aa2962aeb58b5a2dea3ba0668e12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyOTg1Nw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r495529857", "bodyText": "Currently we throw npe, without a clear message on which resource caused it. I kept the behavior but you also see which resource triggered it.", "author": "pmlopes", "createdAt": "2020-09-27T05:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTE2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTIxNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r495445216", "bodyText": "should read under synchronized", "author": "vietj", "createdAt": "2020-09-26T11:00:13Z", "path": "src/main/java/io/vertx/core/file/impl/FileResolver.java", "diffHunk": "@@ -375,14 +386,34 @@ private ClassLoader getClassLoader() {\n     return cl;\n   }\n \n-  private synchronized void setupCacheDir(String id) {\n-    String cacheDirName = fileCacheDir + \"/file-cache-\" + id;\n-    cacheDir = new File(cacheDirName);\n+  /**\n+   * Will prepare the cache directory to be used in the application or return null if classpath resolving is disabled.\n+   */\n+  private File setupCacheDir(String fileCacheDir) {\n+    if (!this.enableCpResolving) {\n+      return null;\n+    }\n+\n+    // ensure that the argument doesn't end with separator\n+    if (fileCacheDir.endsWith(File.separator)) {\n+      fileCacheDir = fileCacheDir.substring(0, fileCacheDir.length() - File.separator.length());\n+    }\n+\n+    // the cachedir will be prefixed a unique id to avoid eavesdroping from other processes\n+    // also this ensures that if process A deletes cacheDir, it won't affect process B\n+    String cacheDirName = fileCacheDir + \"-\" + UUID.randomUUID().toString();\n+    File cacheDir = new File(cacheDirName);\n+\n     if (!cacheDir.mkdirs()) {\n       throw new IllegalStateException(\"Failed to create cache dir: \" + cacheDirName);\n     }\n     // Add shutdown hook to delete on exit\n     shutdownHook = new Thread(() -> {\n+      // no-op if cache dir has been set to null\n+      if (this.cacheDir == null) {", "originalCommit": "05e70fe98166aa2962aeb58b5a2dea3ba0668e12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6196934b5971e89755ceb8b15e07f4dd3860c786", "chunk": "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java\nindex 74fa677f8..1eaa8655b 100644\n--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java\n+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java\n\n@@ -399,7 +399,7 @@ public class FileResolver {\n       fileCacheDir = fileCacheDir.substring(0, fileCacheDir.length() - File.separator.length());\n     }\n \n-    // the cachedir will be prefixed a unique id to avoid eavesdroping from other processes\n+    // the cacheDir will be suffixed a unique id to avoid eavesdropping from other processes/users\n     // also this ensures that if process A deletes cacheDir, it won't affect process B\n     String cacheDirName = fileCacheDir + \"-\" + UUID.randomUUID().toString();\n     File cacheDir = new File(cacheDirName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTMyMg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r495445322", "bodyText": "this should be done under synchronization", "author": "vietj", "createdAt": "2020-09-26T11:01:21Z", "path": "src/main/java/io/vertx/core/file/impl/FileResolver.java", "diffHunk": "@@ -398,18 +429,26 @@ private synchronized void setupCacheDir(String id) {\n       }\n     });\n     Runtime.getRuntime().addShutdownHook(shutdownHook);\n+    return cacheDir;\n   }\n \n   private void deleteCacheDir() throws IOException {\n-    Path path;\n+    if (cacheDir == null || !cacheDir.exists()) {", "originalCommit": "05e70fe98166aa2962aeb58b5a2dea3ba0668e12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6196934b5971e89755ceb8b15e07f4dd3860c786", "chunk": "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java\nindex 74fa677f8..1eaa8655b 100644\n--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java\n+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java\n\n@@ -433,17 +435,14 @@ public class FileResolver {\n   }\n \n   private void deleteCacheDir() throws IOException {\n-    if (cacheDir == null || !cacheDir.exists()) {\n-      return;\n-    }\n-    // save the state before we force a flip\n     final File dir;\n     synchronized (this) {\n       if (cacheDir == null) {\n         return;\n       }\n-      // disable the cache dir\n+      // save the state before we force a flip\n       dir = cacheDir;\n+      // disable the cache dir\n       cacheDir = null;\n     }\n     // threads will only enter here once, as the resolving flag is flipped above\n"}}, {"oid": "6196934b5971e89755ceb8b15e07f4dd3860c786", "url": "https://github.com/eclipse-vertx/vert.x/commit/6196934b5971e89755ceb8b15e07f4dd3860c786", "message": "Updates based on review feedback\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-09-28T10:01:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1MzE3OQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r498653179", "bodyText": "you can remove this check as it is not synchronized and only check within the synchronized block.", "author": "vietj", "createdAt": "2020-10-02T07:20:02Z", "path": "src/main/java/io/vertx/core/file/impl/FileResolver.java", "diffHunk": "@@ -101,29 +100,32 @@ public FileResolver() {\n   public FileResolver(FileSystemOptions fileSystemOptions) {\n     this.enableCaching = fileSystemOptions.isFileCachingEnabled();\n     this.enableCpResolving = fileSystemOptions.isClassPathResolvingEnabled();\n-    this.fileCacheDir = fileSystemOptions.getFileCacheDir();\n \n     String cwdOverride = System.getProperty(\"vertx.cwd\");\n     if (cwdOverride != null) {\n       cwd = new File(cwdOverride).getAbsoluteFile();\n     } else {\n       cwd = null;\n     }\n-    if (this.enableCpResolving) {\n-      setupCacheDir(UUID.randomUUID().toString());\n-    }\n+    cacheDir = setupCacheDir(fileSystemOptions.getFileCacheDir());\n   }\n \n   /**\n    * Close this file resolver, this is a blocking operation.\n    */\n   public void close() throws IOException {\n-    synchronized (this) {\n-      if (shutdownHook != null) {\n-        // May throw IllegalStateException if called from other shutdown hook so ignore that\n-        try {\n-          Runtime.getRuntime().removeShutdownHook(shutdownHook);\n-        } catch (IllegalStateException ignore) {\n+    // avoid monitor, if already disabled\n+    if (shutdownHook != null) {", "originalCommit": "6196934b5971e89755ceb8b15e07f4dd3860c786", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a888a15cba05a7ea4bbba829a7caa71630dd5a3", "chunk": "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java\nindex 1eaa8655b..8ec7e24a3 100644\n--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java\n+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java\n\n@@ -114,19 +114,18 @@ public class FileResolver {\n    * Close this file resolver, this is a blocking operation.\n    */\n   public void close() throws IOException {\n-    // avoid monitor, if already disabled\n-    if (shutdownHook != null) {\n-      synchronized (this) {\n-        if (shutdownHook != null) {\n-          // May throw IllegalStateException if called from other shutdown hook so ignore that\n-          try {\n-            Runtime.getRuntime().removeShutdownHook(shutdownHook);\n-          } catch (IllegalStateException ignore) {\n-            // ignore\n-          } finally {\n-            shutdownHook = null;\n-          }\n-        }\n+    final Thread hook;\n+    synchronized (this) {\n+      hook = shutdownHook;\n+      // disable the shutdown hook thread\n+      shutdownHook = null;\n+    }\n+    if (hook != null) {\n+      // May throw IllegalStateException if called from other shutdown hook so ignore that\n+      try {\n+        Runtime.getRuntime().removeShutdownHook(hook);\n+      } catch (IllegalStateException ignore) {\n+        // ignore\n       }\n     }\n     deleteCacheDir();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NDE5MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r498654190", "bodyText": "what you can do is\nThread hook;\nsynchronized (this) {\n  hook =  shutdownHook;\n  shutdownHook = null;\n}\nif (hook != null) {\n  // Remove hook\n}", "author": "vietj", "createdAt": "2020-10-02T07:22:48Z", "path": "src/main/java/io/vertx/core/file/impl/FileResolver.java", "diffHunk": "@@ -101,29 +100,32 @@ public FileResolver() {\n   public FileResolver(FileSystemOptions fileSystemOptions) {\n     this.enableCaching = fileSystemOptions.isFileCachingEnabled();\n     this.enableCpResolving = fileSystemOptions.isClassPathResolvingEnabled();\n-    this.fileCacheDir = fileSystemOptions.getFileCacheDir();\n \n     String cwdOverride = System.getProperty(\"vertx.cwd\");\n     if (cwdOverride != null) {\n       cwd = new File(cwdOverride).getAbsoluteFile();\n     } else {\n       cwd = null;\n     }\n-    if (this.enableCpResolving) {\n-      setupCacheDir(UUID.randomUUID().toString());\n-    }\n+    cacheDir = setupCacheDir(fileSystemOptions.getFileCacheDir());\n   }\n \n   /**\n    * Close this file resolver, this is a blocking operation.\n    */\n   public void close() throws IOException {\n-    synchronized (this) {\n-      if (shutdownHook != null) {\n-        // May throw IllegalStateException if called from other shutdown hook so ignore that\n-        try {\n-          Runtime.getRuntime().removeShutdownHook(shutdownHook);\n-        } catch (IllegalStateException ignore) {\n+    // avoid monitor, if already disabled\n+    if (shutdownHook != null) {\n+      synchronized (this) {", "originalCommit": "6196934b5971e89755ceb8b15e07f4dd3860c786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NDU1NA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3581#discussion_r498654554", "bodyText": "Like you did in deleteCacheDir", "author": "vietj", "createdAt": "2020-10-02T07:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NDE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0a888a15cba05a7ea4bbba829a7caa71630dd5a3", "chunk": "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java\nindex 1eaa8655b..8ec7e24a3 100644\n--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java\n+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java\n\n@@ -114,19 +114,18 @@ public class FileResolver {\n    * Close this file resolver, this is a blocking operation.\n    */\n   public void close() throws IOException {\n-    // avoid monitor, if already disabled\n-    if (shutdownHook != null) {\n-      synchronized (this) {\n-        if (shutdownHook != null) {\n-          // May throw IllegalStateException if called from other shutdown hook so ignore that\n-          try {\n-            Runtime.getRuntime().removeShutdownHook(shutdownHook);\n-          } catch (IllegalStateException ignore) {\n-            // ignore\n-          } finally {\n-            shutdownHook = null;\n-          }\n-        }\n+    final Thread hook;\n+    synchronized (this) {\n+      hook = shutdownHook;\n+      // disable the shutdown hook thread\n+      shutdownHook = null;\n+    }\n+    if (hook != null) {\n+      // May throw IllegalStateException if called from other shutdown hook so ignore that\n+      try {\n+        Runtime.getRuntime().removeShutdownHook(hook);\n+      } catch (IllegalStateException ignore) {\n+        // ignore\n       }\n     }\n     deleteCacheDir();\n"}}, {"oid": "0a888a15cba05a7ea4bbba829a7caa71630dd5a3", "url": "https://github.com/eclipse-vertx/vert.x/commit/0a888a15cba05a7ea4bbba829a7caa71630dd5a3", "message": "less locking\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>", "committedDate": "2020-10-02T08:08:17Z", "type": "commit"}]}