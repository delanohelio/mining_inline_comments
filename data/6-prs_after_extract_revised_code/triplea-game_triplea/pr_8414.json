{"pr_number": 8414, "pr_title": "Handle some dependent units in translateAttributesToOtherUnits", "pr_createdAt": "2020-12-12T04:36:20Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8414", "timeline": [{"oid": "60dec82dac935f67f69fb87b823eb6a8387bbbb6", "url": "https://github.com/triplea-game/triplea/commit/60dec82dac935f67f69fb87b823eb6a8387bbbb6", "message": "Handle some dependent units in translateAttributesToOtherUnits\n\nUnloaded units and transported units are now transferred from the giving\nunit to the receiving unit.  If there is more than one receiving unit,\nit will be given to the receiving unit that stream().findFirst()\nreturns.", "committedDate": "2020-12-13T05:29:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNDI2OA==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r546314268", "bodyText": "nit, this block could use a summary comment IMO, just a few words to describe what is happening. \"what\" comments are sometimes frowned on, but having an idea or an intro to what the code you are about to read is supposed to do, really helps make it easier to understand.", "author": "DanVanAtta", "createdAt": "2020-12-20T03:18:45Z", "path": "game-core/src/main/java/games/strategy/triplea/UnitUtils.java", "diffHunk": "@@ -159,15 +159,48 @@ public static int getHowMuchCanUnitProduce(\n   }\n \n   /**\n-   * Currently made for translating unit damage from one unit to another unit. Will adjust damage to\n-   * be within max damage for the new units.\n+   * Translates attributes and properties from one unit to a collection of units.\n+   *\n+   * <p>Used when a unit is being transformed, so the old unit is going away and the new units are\n+   * taking its place\n+   *\n+   * <p>Currently, it translates: Hits, Damage, Unloaded units, and Transported units\n+   *\n+   * <p>Hits and Damage are modified as needed to fit within the limits of the new units. Units will\n+   * always have at least 1 hp.\n+   *\n+   * <p>Unloaded units and transported units are given to the unit that matches stream().findFirst()\n    *\n    * @return change for unit's properties\n    */\n   public static Change translateAttributesToOtherUnits(\n       final Unit unitGivingAttributes,\n       final Collection<Unit> unitsThatWillGetAttributes,\n       final Territory territory) {\n+\n+    final CompositeChange changes =", "originalCommit": "187ca7c6cf9bb83d8910a09b994d5d177f556c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0MDU5Mw==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r546840593", "bodyText": "@trevan FWIW, this is an example where knowing the SHA that addressed this comment would have been helpful. It took a little bit of extra work to realize that this comment was also addressed. It looked unaddressed. In this PR it looks like 3 comments, 2 out of 3 were addressed and the third you had a question about (which is fine). My point about PR responses is if responding to every comment with every a follow-up or a SHA to indicate a change, it saves the reviewer some guess work on what was addressed.\nWith all that said, thank you for adding the summary comment.", "author": "DanVanAtta", "createdAt": "2020-12-21T17:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNDI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "01ac5212d2434c58855547e29b1d6e6b040b30c8", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/UnitUtils.java b/game-core/src/main/java/games/strategy/triplea/UnitUtils.java\nindex 5e5030144..f831b06b5 100644\n--- a/game-core/src/main/java/games/strategy/triplea/UnitUtils.java\n+++ b/game-core/src/main/java/games/strategy/triplea/UnitUtils.java\n\n@@ -178,56 +178,67 @@ public class UnitUtils {\n       final Collection<Unit> unitsThatWillGetAttributes,\n       final Territory territory) {\n \n+    // first, translate attributes that can only go to one receiving unit\n     final CompositeChange changes =\n         unitsThatWillGetAttributes.stream()\n             .findFirst()\n             .map(\n-                receivingUnit -> {\n-                  final CompositeChange unitChange = new CompositeChange();\n-                  final List<Unit> unloaded = unitGivingAttributes.getUnloaded();\n-                  if (!unloaded.isEmpty()) {\n-                    unitChange.add(\n-                        ChangeFactory.unitPropertyChange(receivingUnit, unloaded, Unit.UNLOADED));\n-                  }\n-\n-                  final List<Unit> transporting = unitGivingAttributes.getTransporting();\n-                  return transporting.stream()\n-                      .map(\n-                          transported ->\n-                              new CompositeChange(\n-                                  ChangeFactory.unitPropertyChange(\n-                                      transported, receivingUnit, Unit.TRANSPORTED_BY)))\n-                      .reduce(unitChange, CompositeChange::new);\n-                })\n+                receivingUnit ->\n+                    translateDependentUnitsToOtherUnit(unitGivingAttributes, receivingUnit))\n             .orElse(new CompositeChange());\n \n+    // next, translate attributes that can go to all of the receiving units\n     return unitsThatWillGetAttributes.stream()\n         .map(\n-            receivingUnit -> {\n-              final CompositeChange unitChange = new CompositeChange();\n-              final int transferHits =\n-                  Math.min(\n-                      unitGivingAttributes.getHits(),\n-                      // ensure the receiving unit has at least 1 hit point after hits are\n-                      // transferred\n-                      receivingUnit.getUnitAttachment().getHitPoints() - 1);\n-              if (transferHits > 0) {\n-                unitChange.add(\n-                    ChangeFactory.unitsHit(\n-                        IntegerMap.of(Map.of(receivingUnit, transferHits)), List.of(territory)));\n-              }\n-\n-              final int transferDamage =\n-                  Math.min(\n-                      unitGivingAttributes.getUnitDamage(),\n-                      receivingUnit.getHowMuchDamageCanThisUnitTakeTotal(territory));\n-              if (transferDamage > 0) {\n-                unitChange.add(\n-                    ChangeFactory.bombingUnitDamage(\n-                        IntegerMap.of(Map.of(receivingUnit, transferDamage)), List.of(territory)));\n-              }\n-              return unitChange;\n-            })\n+            receivingUnit ->\n+                translateHitPointsAndDamageToOtherUnit(\n+                    unitGivingAttributes, territory, receivingUnit))\n         .reduce(changes, CompositeChange::new);\n   }\n+\n+  /** Translates dependent units from one unit to another */\n+  private static CompositeChange translateDependentUnitsToOtherUnit(\n+      final Unit unitGivingAttributes, final Unit receivingUnit) {\n+    final CompositeChange unitChange = new CompositeChange();\n+    final List<Unit> unloaded = unitGivingAttributes.getUnloaded();\n+    if (!unloaded.isEmpty()) {\n+      unitChange.add(ChangeFactory.unitPropertyChange(receivingUnit, unloaded, Unit.UNLOADED));\n+    }\n+\n+    final List<Unit> transporting = unitGivingAttributes.getTransporting();\n+    return transporting.stream()\n+        .map(\n+            transported ->\n+                new CompositeChange(\n+                    ChangeFactory.unitPropertyChange(\n+                        transported, receivingUnit, Unit.TRANSPORTED_BY)))\n+        .reduce(unitChange, CompositeChange::new);\n+  }\n+\n+  private static CompositeChange translateHitPointsAndDamageToOtherUnit(\n+      final Unit unitGivingAttributes, final Territory territory, final Unit receivingUnit) {\n+    final CompositeChange unitChange = new CompositeChange();\n+    final int transferHits =\n+        Math.min(\n+            unitGivingAttributes.getHits(),\n+            // ensure the receiving unit has at least 1 hit point after hits are\n+            // transferred\n+            receivingUnit.getUnitAttachment().getHitPoints() - 1);\n+    if (transferHits > 0) {\n+      unitChange.add(\n+          ChangeFactory.unitsHit(\n+              IntegerMap.of(Map.of(receivingUnit, transferHits)), List.of(territory)));\n+    }\n+\n+    final int transferDamage =\n+        Math.min(\n+            unitGivingAttributes.getUnitDamage(),\n+            receivingUnit.getHowMuchDamageCanThisUnitTakeTotal(territory));\n+    if (transferDamage > 0) {\n+      unitChange.add(\n+          ChangeFactory.bombingUnitDamage(\n+              IntegerMap.of(Map.of(receivingUnit, transferDamage)), List.of(territory)));\n+    }\n+    return unitChange;\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNDM2Mg==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r546314362", "bodyText": "What would you think of extracting this map to a helper function? AFAIK best practice for lambda's is to keep them one line, and even better to try and make them be method references. That could probably be done here by making a method that accepts the 'receivingUnit' as  an input parameter.", "author": "DanVanAtta", "createdAt": "2020-12-20T03:19:49Z", "path": "game-core/src/main/java/games/strategy/triplea/UnitUtils.java", "diffHunk": "@@ -159,15 +159,48 @@ public static int getHowMuchCanUnitProduce(\n   }\n \n   /**\n-   * Currently made for translating unit damage from one unit to another unit. Will adjust damage to\n-   * be within max damage for the new units.\n+   * Translates attributes and properties from one unit to a collection of units.\n+   *\n+   * <p>Used when a unit is being transformed, so the old unit is going away and the new units are\n+   * taking its place\n+   *\n+   * <p>Currently, it translates: Hits, Damage, Unloaded units, and Transported units\n+   *\n+   * <p>Hits and Damage are modified as needed to fit within the limits of the new units. Units will\n+   * always have at least 1 hp.\n+   *\n+   * <p>Unloaded units and transported units are given to the unit that matches stream().findFirst()\n    *\n    * @return change for unit's properties\n    */\n   public static Change translateAttributesToOtherUnits(\n       final Unit unitGivingAttributes,\n       final Collection<Unit> unitsThatWillGetAttributes,\n       final Territory territory) {\n+\n+    final CompositeChange changes =\n+        unitsThatWillGetAttributes.stream()\n+            .findFirst()\n+            .map(\n+                receivingUnit -> {", "originalCommit": "187ca7c6cf9bb83d8910a09b994d5d177f556c6e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01ac5212d2434c58855547e29b1d6e6b040b30c8", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/UnitUtils.java b/game-core/src/main/java/games/strategy/triplea/UnitUtils.java\nindex 5e5030144..f831b06b5 100644\n--- a/game-core/src/main/java/games/strategy/triplea/UnitUtils.java\n+++ b/game-core/src/main/java/games/strategy/triplea/UnitUtils.java\n\n@@ -178,56 +178,67 @@ public class UnitUtils {\n       final Collection<Unit> unitsThatWillGetAttributes,\n       final Territory territory) {\n \n+    // first, translate attributes that can only go to one receiving unit\n     final CompositeChange changes =\n         unitsThatWillGetAttributes.stream()\n             .findFirst()\n             .map(\n-                receivingUnit -> {\n-                  final CompositeChange unitChange = new CompositeChange();\n-                  final List<Unit> unloaded = unitGivingAttributes.getUnloaded();\n-                  if (!unloaded.isEmpty()) {\n-                    unitChange.add(\n-                        ChangeFactory.unitPropertyChange(receivingUnit, unloaded, Unit.UNLOADED));\n-                  }\n-\n-                  final List<Unit> transporting = unitGivingAttributes.getTransporting();\n-                  return transporting.stream()\n-                      .map(\n-                          transported ->\n-                              new CompositeChange(\n-                                  ChangeFactory.unitPropertyChange(\n-                                      transported, receivingUnit, Unit.TRANSPORTED_BY)))\n-                      .reduce(unitChange, CompositeChange::new);\n-                })\n+                receivingUnit ->\n+                    translateDependentUnitsToOtherUnit(unitGivingAttributes, receivingUnit))\n             .orElse(new CompositeChange());\n \n+    // next, translate attributes that can go to all of the receiving units\n     return unitsThatWillGetAttributes.stream()\n         .map(\n-            receivingUnit -> {\n-              final CompositeChange unitChange = new CompositeChange();\n-              final int transferHits =\n-                  Math.min(\n-                      unitGivingAttributes.getHits(),\n-                      // ensure the receiving unit has at least 1 hit point after hits are\n-                      // transferred\n-                      receivingUnit.getUnitAttachment().getHitPoints() - 1);\n-              if (transferHits > 0) {\n-                unitChange.add(\n-                    ChangeFactory.unitsHit(\n-                        IntegerMap.of(Map.of(receivingUnit, transferHits)), List.of(territory)));\n-              }\n-\n-              final int transferDamage =\n-                  Math.min(\n-                      unitGivingAttributes.getUnitDamage(),\n-                      receivingUnit.getHowMuchDamageCanThisUnitTakeTotal(territory));\n-              if (transferDamage > 0) {\n-                unitChange.add(\n-                    ChangeFactory.bombingUnitDamage(\n-                        IntegerMap.of(Map.of(receivingUnit, transferDamage)), List.of(territory)));\n-              }\n-              return unitChange;\n-            })\n+            receivingUnit ->\n+                translateHitPointsAndDamageToOtherUnit(\n+                    unitGivingAttributes, territory, receivingUnit))\n         .reduce(changes, CompositeChange::new);\n   }\n+\n+  /** Translates dependent units from one unit to another */\n+  private static CompositeChange translateDependentUnitsToOtherUnit(\n+      final Unit unitGivingAttributes, final Unit receivingUnit) {\n+    final CompositeChange unitChange = new CompositeChange();\n+    final List<Unit> unloaded = unitGivingAttributes.getUnloaded();\n+    if (!unloaded.isEmpty()) {\n+      unitChange.add(ChangeFactory.unitPropertyChange(receivingUnit, unloaded, Unit.UNLOADED));\n+    }\n+\n+    final List<Unit> transporting = unitGivingAttributes.getTransporting();\n+    return transporting.stream()\n+        .map(\n+            transported ->\n+                new CompositeChange(\n+                    ChangeFactory.unitPropertyChange(\n+                        transported, receivingUnit, Unit.TRANSPORTED_BY)))\n+        .reduce(unitChange, CompositeChange::new);\n+  }\n+\n+  private static CompositeChange translateHitPointsAndDamageToOtherUnit(\n+      final Unit unitGivingAttributes, final Territory territory, final Unit receivingUnit) {\n+    final CompositeChange unitChange = new CompositeChange();\n+    final int transferHits =\n+        Math.min(\n+            unitGivingAttributes.getHits(),\n+            // ensure the receiving unit has at least 1 hit point after hits are\n+            // transferred\n+            receivingUnit.getUnitAttachment().getHitPoints() - 1);\n+    if (transferHits > 0) {\n+      unitChange.add(\n+          ChangeFactory.unitsHit(\n+              IntegerMap.of(Map.of(receivingUnit, transferHits)), List.of(territory)));\n+    }\n+\n+    final int transferDamage =\n+        Math.min(\n+            unitGivingAttributes.getUnitDamage(),\n+            receivingUnit.getHowMuchDamageCanThisUnitTakeTotal(territory));\n+    if (transferDamage > 0) {\n+      unitChange.add(\n+          ChangeFactory.bombingUnitDamage(\n+              IntegerMap.of(Map.of(receivingUnit, transferDamage)), List.of(territory)));\n+    }\n+    return unitChange;\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNDQwOA==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r546314408", "bodyText": "What is meant by transferred? The part that is unclear, is I'm not sure where they are transferred. Suggestion: use a @DisplayName to give more description about this meaning.", "author": "DanVanAtta", "createdAt": "2020-12-20T03:20:56Z", "path": "game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java", "diffHunk": "@@ -125,5 +128,72 @@ void bombingDamageIsNotTransferredIfDamageAllowedIs0() {\n           newUnits.get(0).getUnitDamage(),\n           is(0));\n     }\n+\n+    @Test\n+    void unloadedUnitsAreTransferred() {", "originalCommit": "187ca7c6cf9bb83d8910a09b994d5d177f556c6e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01ac5212d2434c58855547e29b1d6e6b040b30c8", "chunk": "diff --git a/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java b/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\nindex 5a094a9dc..3dffb62c8 100644\n--- a/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\n+++ b/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\n\n@@ -130,7 +130,7 @@ class UnitUtilsTest {\n     }\n \n     @Test\n-    void unloadedUnitsAreTransferred() {\n+    void unloadedUnitsAreTransferredFromOldUnitToNewUnit() {\n       final Unit oldUnit = transport.create(1, player).get(0);\n       final List<Unit> newUnits = transport.create(1, player);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNDUwOA==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r546314508", "bodyText": "Why is this the case? A more specific description could be the key, what is special about the new unit exactly that makes this assertion the case?", "author": "DanVanAtta", "createdAt": "2020-12-20T03:22:15Z", "path": "game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java", "diffHunk": "@@ -125,5 +128,72 @@ void bombingDamageIsNotTransferredIfDamageAllowedIs0() {\n           newUnits.get(0).getUnitDamage(),\n           is(0));\n     }\n+\n+    @Test\n+    void unloadedUnitsAreTransferred() {\n+      final Unit oldUnit = transport.create(1, player).get(0);\n+      final List<Unit> newUnits = transport.create(1, player);\n+\n+      final List<Unit> unloadedInfantry = infantry.create(1, player);\n+      oldUnit.setUnloaded(unloadedInfantry);\n+\n+      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, seaZone);\n+      gameData.performChange(changes);\n+\n+      assertThat(newUnits.get(0).getUnloaded(), is(unloadedInfantry));\n+    }\n+\n+    @Test\n+    void unloadedUnitsAreTransferredToOnlyOneOfTheNewUnits() {\n+      final Unit oldUnit = transport.create(1, player).get(0);\n+      final List<Unit> newUnits = transport.create(2, player);\n+\n+      final List<Unit> unloadedInfantry = infantry.create(1, player);\n+      oldUnit.setUnloaded(unloadedInfantry);\n+\n+      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, seaZone);\n+      gameData.performChange(changes);\n+\n+      assertThat(newUnits.get(0).getUnloaded(), is(unloadedInfantry));\n+      assertThat(\n+          \"Only the first new unit should get the unloaded infantry\",", "originalCommit": "187ca7c6cf9bb83d8910a09b994d5d177f556c6e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01ac5212d2434c58855547e29b1d6e6b040b30c8", "chunk": "diff --git a/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java b/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\nindex 5a094a9dc..3dffb62c8 100644\n--- a/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\n+++ b/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\n\n@@ -130,7 +130,7 @@ class UnitUtilsTest {\n     }\n \n     @Test\n-    void unloadedUnitsAreTransferred() {\n+    void unloadedUnitsAreTransferredFromOldUnitToNewUnit() {\n       final Unit oldUnit = transport.create(1, player).get(0);\n       final List<Unit> newUnits = transport.create(1, player);\n \n"}}, {"oid": "01ac5212d2434c58855547e29b1d6e6b040b30c8", "url": "https://github.com/triplea-game/triplea/commit/01ac5212d2434c58855547e29b1d6e6b040b30c8", "message": "Add comments", "committedDate": "2020-12-20T03:59:29Z", "type": "commit"}, {"oid": "01ac5212d2434c58855547e29b1d6e6b040b30c8", "url": "https://github.com/triplea-game/triplea/commit/01ac5212d2434c58855547e29b1d6e6b040b30c8", "message": "Add comments", "committedDate": "2020-12-20T03:59:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0Njk5MQ==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r546846991", "bodyText": "I get the sense that the updated description is missing the mark on explaining why the expectation is what it is.\nWhen reading this method:\n\nwe have an 'oldUnit', that is actually an 'oldTransport' and we place in a SZ\nwe then createa  'newUnit' that is actually a 'newTransport' and we do not place it in a SZ\nwe then create an infantry in the same SZ and add them to 'oldTransport'\nwe then perform the change action\nnow we assert that the transporter for the old unit is now the new transport\n\nRecommendations:\nKeep the unit types explicit and avoid the list operations. The list access makes it harder to grok. Instead of 'transportedUnits.get(0)', it's easier to understand if written as 'oldInfantry'. EG:\nfinal Unit oldTransport = ...\nfinal Unit infantryOnTransport = ...\n\nfinal Unit newTransport = ...\n\n final Change changes = UnitUtils.translateAttributesToOtherUnits(List.of(oldTransport),  List.of(newTransport);\n\nThen:\nassertThat(\n   \"Transport swapped from old to new, the transported infantry on the old transport should now be on the new transport\",\n  infantryOnTransport.getTransportedBy(), is(newTransport));\n\nLet me know if that clarifies how the test cases can be made more clear. After looking at that, I'm curious if the inverted change will fix the above. I also wonder as well what happens if a transported infantry is part of the change list and is replaced by a new infantry. Does the old transported infantry get assigned to the new transport? (IE: what happens if we had a 'newInfantry' in the mix above, would both 'oldInfantry' and 'newInfantry' be marked as transported by the new transport?)", "author": "DanVanAtta", "createdAt": "2020-12-21T17:55:08Z", "path": "game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java", "diffHunk": "@@ -191,7 +191,9 @@ void transportedUnitsAreTransferredToTheFirstNewUnit() {\n       gameData.performChange(changes);\n \n       assertThat(\n-          \"The first new unit should be the new transporter for the units\",\n+          \"Units can only be transported by one unit at a time. So the transported unit \"", "originalCommit": "01ac5212d2434c58855547e29b1d6e6b040b30c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0OTM5NA==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r546849394", "bodyText": "Thinking about the above further, I think it does speak to more test cases. If we have more than one infantry on transport, all infantry are assigned to the new transport? (which means in theory one could have looped over the list of transported units and asserted they all had the new transport. Given it's a singleton list, I see why you did not, though explicitly checking the first list element makes it seem overtly intentional. Though, I do think keeping the units separate and not in the list makes it easier to follow along and avoids the \"okay, we are grabbing the first unit off this list, which unit is that?\" (Which is a salient question for 'newUnits.get(0)', it's not clear from that line that would be the transport)", "author": "DanVanAtta", "createdAt": "2020-12-21T18:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0Njk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAzNTA0Nw==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r547035047", "bodyText": "@DanVanAtta , I've update this test in 234d8ac.  It does look you misread it.  This is testing the case where a single transporter is converted into two transporters.  The unit being transported (the infantry) needs to go to one of the new transporters.  It doesn't make sense for the infantry to be in both of the transports and the code doesn't allow it either.\nAs for the question of what happens if a transported unit gets changed?  I don't know.  Currently, they are always killed.  Reason for that is that when a transported unit is killed, it is done after units are transformed.  And a transported unit currently can't be damaged.  We'd have to modify this code to translate the transportedBy of the unitGivingAttributes to the unitsThatWillGetAttributes.", "author": "trevan", "createdAt": "2020-12-22T02:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0Njk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MDI1OQ==", "url": "https://github.com/triplea-game/triplea/pull/8414#discussion_r547040259", "bodyText": "I also added tests for multiple transported/unloaded items in 5ec7f75.", "author": "trevan", "createdAt": "2020-12-22T03:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0Njk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "234d8ac9f2aae3d19ff90c4c9c77a030fd4e9d48", "chunk": "diff --git a/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java b/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\nindex 3dffb62c8..a87b1e5dd 100644\n--- a/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\n+++ b/game-core/src/test/java/games/strategy/triplea/UnitUtilsTest.java\n\n@@ -179,23 +179,26 @@ class UnitUtilsTest {\n \n     @Test\n     void transportedUnitsAreTransferredToTheFirstNewUnit() {\n-      final Unit oldUnit = transport.create(1, player).get(0);\n-      seaZone.getUnitCollection().add(oldUnit);\n-      final List<Unit> newUnits = transport.create(2, player);\n+      final Unit oldTransport = transport.create(1, player).get(0);\n+      seaZone.getUnitCollection().add(oldTransport);\n+      final Unit newTransport1 = transport.create(1, player).get(0);\n+      final Unit newTransport2 = transport.create(1, player).get(0);\n \n       final List<Unit> transportedUnits = infantry.create(1, player);\n       seaZone.getUnitCollection().addAll(transportedUnits);\n-      transportedUnits.get(0).setTransportedBy(oldUnit);\n+      transportedUnits.get(0).setTransportedBy(oldTransport);\n \n-      final Change changes = UnitUtils.translateAttributesToOtherUnits(oldUnit, newUnits, seaZone);\n+      final Change changes =\n+          UnitUtils.translateAttributesToOtherUnits(\n+              oldTransport, List.of(newTransport1, newTransport2), seaZone);\n       gameData.performChange(changes);\n \n       assertThat(\n           \"Units can only be transported by one unit at a time. So the transported unit \"\n               + \"should be transferred to one of the new units. Since the new units is a list, the \"\n-              + \"first one will be selected.\",\n+              + \"first one will be selected and the first one is 'newTransport1'\",\n           transportedUnits.get(0).getTransportedBy(),\n-          is(newUnits.get(0)));\n+          is(newTransport1));\n     }\n   }\n }\n"}}, {"oid": "234d8ac9f2aae3d19ff90c4c9c77a030fd4e9d48", "url": "https://github.com/triplea-game/triplea/commit/234d8ac9f2aae3d19ff90c4c9c77a030fd4e9d48", "message": "Improve test case for 1 -> many conversion of a transporter", "committedDate": "2020-12-22T02:35:25Z", "type": "commit"}, {"oid": "5ec7f757a31c71b53e8ea2b3cbc29ee36c4637ff", "url": "https://github.com/triplea-game/triplea/commit/5ec7f757a31c71b53e8ea2b3cbc29ee36c4637ff", "message": "Add tests for multiple transported/unloaded units", "committedDate": "2020-12-22T02:59:46Z", "type": "commit"}]}