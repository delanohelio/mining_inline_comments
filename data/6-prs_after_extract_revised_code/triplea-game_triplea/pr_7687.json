{"pr_number": 7687, "pr_title": "Update: Export data using Jaxb and 'Game' object", "pr_createdAt": "2020-09-17T06:34:07Z", "pr_url": "https://github.com/triplea-game/triplea/pull/7687", "timeline": [{"oid": "21546907c4776af9632c12bfdc5d0308cfcb5001", "url": "https://github.com/triplea-game/triplea/commit/21546907c4776af9632c12bfdc5d0308cfcb5001", "message": "Update: Export data using Jaxb and 'Game' object\n\nChanges the GameDataExporter to instead of writing a custom\nXML string, we instead serialize to 'GameData' to a 'Game'\nobject and then use Jaxb to write the 'GameData' as an XMl.\n\nThere are few notable corrections to XML export:\n- automatic conversion of 'occuppiedTerrOf' to 'originalOwner'\n- additional player attributes are now populated (EG: hidden, disabled)\n- resources 'displayedTo' is now written", "committedDate": "2020-09-17T06:29:40Z", "type": "commit"}, {"oid": "36984fc056dea9c79e5375c6f163dbbb72ad18e8", "url": "https://github.com/triplea-game/triplea/commit/36984fc056dea9c79e5375c6f163dbbb72ad18e8", "message": "Small simplifications - consistent stream iteration pattern", "committedDate": "2020-09-18T00:43:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODQ5Mw==", "url": "https://github.com/triplea-game/triplea/pull/7687#discussion_r490638493", "bodyText": "Avoid too many return statements within this method.", "author": "codeclimate", "createdAt": "2020-09-18T00:48:00Z", "path": "game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java", "diffHunk": "@@ -267,409 +217,348 @@ private void relationshipInitialize(final GameData data) {\n         }\n         final RelationshipType type = rt.getRelationshipType(p1, p2);\n         final int roundValue = rt.getRoundRelationshipWasCreated(p1, p2);\n-        xmlfile\n-            .append(\"            <relationship type=\\\"\")\n-            .append(type.getName())\n-            .append(\"\\\" player1=\\\"\")\n-            .append(p1.getName())\n-            .append(\"\\\" player2=\\\"\")\n-            .append(p2.getName())\n-            .append(\"\\\" roundValue=\\\"\")\n-            .append(roundValue)\n-            .append(\"\\\"/>\\n\");\n+\n+        relationships.add(\n+            Initialize.RelationshipInitialize.Relationship.builder()\n+                .type(type.getName())\n+                .player1(p1.getName())\n+                .player2(p2.getName())\n+                .roundValue(roundValue)\n+                .build());\n       }\n       playersAlreadyDone.add(p1);\n     }\n-    xmlfile.append(\"        </relationshipInitialize>\\n\");\n+    return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private void resourceInitialize(final GameData data) {\n-    xmlfile.append(\"        <resourceInitialize>\\n\");\n+  private Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+    final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n+\n     for (final GamePlayer player : data.getPlayerList()) {\n       for (final Resource resource : data.getResourceList().getResources()) {\n         if (player.getResources().getQuantity(resource.getName()) > 0) {\n-          xmlfile\n-              .append(\"            <resourceGiven player=\\\"\")\n-              .append(player.getName())\n-              .append(\"\\\" resource=\\\"\")\n-              .append(resource.getName())\n-              .append(\"\\\" quantity=\\\"\")\n-              .append(player.getResources().getQuantity(resource.getName()))\n-              .append(\"\\\"/>\\n\");\n+          resourcesGiven.add(\n+              Initialize.ResourceInitialize.ResourceGiven.builder()\n+                  .player(player.getName())\n+                  .resource(resource.getName())\n+                  .quantity(player.getResources().getQuantity(resource.getName()))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </resourceInitialize>\\n\");\n+    return Initialize.ResourceInitialize.builder().resourcesGiven(resourcesGiven).build();\n   }\n \n-  private void unitInitialize(final GameData data) {\n-    xmlfile.append(\"        <unitInitialize>\\n\");\n+  private Initialize.UnitInitialize unitInitialize(final GameData data) {\n+    final List<Initialize.UnitInitialize.UnitPlacement> unitPlacements = new ArrayList<>();\n+\n     for (final Territory terr : data.getMap().getTerritories()) {\n       final UnitCollection uc = terr.getUnitCollection();\n       for (final GamePlayer player : uc.getPlayersWithUnits()) {\n         final IntegerMap<UnitType> ucp = uc.getUnitsByType(player);\n         for (final UnitType unit : ucp.keySet()) {\n-          if (player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\"/>\\n\");\n-          } else {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\" owner=\\\"\")\n-                .append(player.getName())\n-                .append(\"\\\"/>\\n\");\n-          }\n+\n+          unitPlacements.add(\n+              Initialize.UnitInitialize.UnitPlacement.builder()\n+                  .owner(\n+                      player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)\n+                          ? null\n+                          : player.getName())\n+                  .unitType(unit.getName())\n+                  .territory(terr.getName())\n+                  .quantity(ucp.getInt(unit))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </unitInitialize>\\n\");\n-  }\n \n-  private void ownerInitialize(final GameData data) {\n-    xmlfile.append(\"        <ownerInitialize>\\n\");\n-    for (final Territory terr : data.getMap().getTerritories()) {\n-      if (!terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-        xmlfile\n-            .append(\"            <territoryOwner territory=\\\"\")\n-            .append(terr.getName())\n-            .append(\"\\\" owner=\\\"\")\n-            .append(terr.getOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    xmlfile.append(\"        </ownerInitialize>\\n\");\n-  }\n-\n-  private void attachments(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <attachmentList>\\n\");\n-    for (final Tuple<IAttachment, List<Tuple<String, String>>> attachment :\n-        data.getAttachmentOrderAndValues()) {\n-      // TODO: use a ui switch to determine if we are printing the xml as it was created, or as it\n-      // stands right now\n-      // (including changes to the game data)\n-      printAttachments(attachment);\n-    }\n-    xmlfile.append(\"    </attachmentList>\\n\");\n+    return Initialize.UnitInitialize.builder().unitPlacements(unitPlacements).build();\n   }\n \n-  private static String printAttachmentOptionsBasedOnOriginalXml(\n-      final List<Tuple<String, String>> attachmentPlusValues, final IAttachment attachment) {\n-    if (attachmentPlusValues.isEmpty()) {\n-      return \"\";\n-    }\n-    final StringBuilder sb = new StringBuilder();\n-    boolean alreadyHasOccupiedTerrOf = false;\n-    for (final Tuple<String, String> current : attachmentPlusValues) {\n-      sb.append(\"            <option name=\\\"\")\n-          .append(current.getFirst())\n-          .append(\"\\\" value=\\\"\")\n-          .append(current.getSecond())\n-          .append(\"\\\"/>\\n\");\n-      if (current.getFirst().equals(\"occupiedTerrOf\")) {\n-        alreadyHasOccupiedTerrOf = true;\n-      }\n-    }\n-    // add occupiedTerrOf until we fix engine to only use originalOwner\n-    if (!alreadyHasOccupiedTerrOf && attachment instanceof TerritoryAttachment) {\n-      final TerritoryAttachment ta = (TerritoryAttachment) attachment;\n-      if (ta.getOriginalOwner() != null) {\n-        sb.append(\"            <option name=\\\"occupiedTerrOf\\\" value=\\\"\")\n-            .append(ta.getOriginalOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    return sb.toString();\n+  private Initialize.OwnerInitialize ownerInitialize(final GameData data) {\n+    return Initialize.OwnerInitialize.builder()\n+        .territoryOwners(\n+            data.getMap().getTerritories().stream()\n+                .filter(terr -> !terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL))\n+                .map(\n+                    terr ->\n+                        Initialize.OwnerInitialize.TerritoryOwner.builder()\n+                            .territory(terr.getName())\n+                            .owner(terr.getOwner().getName())\n+                            .build())\n+                .collect(Collectors.toList()))\n+        .build();\n   }\n \n-  private void printAttachments(\n-      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n-    final IAttachment attachment = attachmentPlusValues.getFirst();\n-    try {\n-      // TODO: none of the attachment exporter classes have been updated since TripleA version\n-      // 1.3.2.2\n-      final String attachmentOptions;\n-      attachmentOptions =\n-          printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond(), attachment);\n-      final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n-      // TODO: keep this list updated\n-      String type = \"\";\n-      if (attachTo.getClass().equals(GamePlayer.class)) {\n-        type = \"player\";\n-      }\n-      if (attachTo.getClass().equals(UnitType.class)) {\n-        type = \"unitType\";\n-      }\n-      if (attachTo.getClass().equals(Territory.class)) {\n-        type = \"territory\";\n-      }\n-      if (attachTo.getClass().equals(TerritoryEffect.class)) {\n-        type = \"territoryEffect\";\n-      }\n-      if (attachTo.getClass().equals(Resource.class)) {\n-        type = \"resource\";\n-      }\n-      if (attachTo.getClass().equals(RelationshipType.class)) {\n-        type = \"relationship\";\n-      }\n-      if (TechAdvance.class.isAssignableFrom(attachTo.getClass())) {\n-        type = \"technology\";\n-      }\n-      if (type.isEmpty()) {\n-        throw new AttachmentExportException(\n-            \"no attachmentType known for \" + attachTo.getClass().getCanonicalName());\n-      }\n-      if (attachmentOptions.length() > 0) {\n-        xmlfile\n-            .append(\"        <attachment name=\\\"\")\n-            .append(attachment.getName())\n-            .append(\"\\\" attachTo=\\\"\")\n-            .append(attachTo.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(attachment.getClass().getCanonicalName())\n-            .append(\"\\\" type=\\\"\")\n-            .append(type)\n-            .append(\"\\\">\\n\");\n-        xmlfile.append(attachmentOptions);\n-        xmlfile.append(\"        </attachment>\\n\");\n-      }\n-    } catch (final Exception e) {\n-      log.log(\n-          Level.SEVERE,\n-          \"An Error occurred whilst trying to print the Attachment \\\"\"\n-              + attachment.getName()\n-              + \"\\\"\",\n-          e);\n-    }\n+  private AttachmentList attachments(final GameData data) {\n+    return AttachmentList.builder()\n+        .attachments(\n+            data.getAttachmentOrderAndValues().stream()\n+                .map(GameDataExporter::printAttachments)\n+                .collect(Collectors.toList()))\n+        .build();\n   }\n \n-  private void production(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <production>\\n\");\n-    productionRules(data);\n-    repairRules(data);\n-    repairFrontiers(data);\n-    productionFrontiers(data);\n-    playerProduction(data);\n-    playerRepair(data);\n-    xmlfile.append(\"    </production>\\n\");\n-  }\n-\n-  private void repairRules(final GameData data) {\n-    for (final RepairRule rr : data.getRepairRules().getRepairRules()) {\n-      xmlfile.append(\"        <repairRule name=\\\"\").append(rr.getName()).append(\"\\\">\\n\");\n-      for (final Resource cost : rr.getCosts().keySet()) {\n-        xmlfile\n-            .append(\"            <cost resource=\\\"\")\n-            .append(cost.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(rr.getCosts().getInt(cost))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      for (final NamedAttachable result : rr.getResults().keySet()) {\n-        xmlfile\n-            .append(\"            <result resourceOrUnit=\\\"\")\n-            .append(result.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(rr.getResults().getInt(result))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </repairRule>\\n\");\n-    }\n+  private static List<AttachmentList.Attachment.Option> printAttachmentOptionsBasedOnOriginalXml(\n+      final List<Tuple<String, String>> attachmentPlusValues) {\n+    return attachmentPlusValues.stream()\n+        .map(\n+            current ->\n+                AttachmentList.Attachment.Option.builder()\n+                    .name(current.getFirst())\n+                    .value(current.getSecond())\n+                    .build())\n+        .collect(Collectors.toList());\n   }\n \n-  private void repairFrontiers(final GameData data) {\n-    for (final String frontierName : data.getRepairFrontierList().getRepairFrontierNames()) {\n-      final RepairFrontier frontier = data.getRepairFrontierList().getRepairFrontier(frontierName);\n-      xmlfile.append(\"\\n\");\n-      xmlfile.append(\"        <repairFrontier name=\\\"\").append(frontier.getName()).append(\"\\\">\\n\");\n-      for (final RepairRule rule : frontier.getRules()) {\n-        xmlfile.append(\"            <repairRules name=\\\"\").append(rule.getName()).append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </repairFrontier>\\n\");\n-    }\n-    xmlfile.append(\"\\n\");\n-  }\n-\n-  private void playerRepair(final GameData data) {\n-    for (final GamePlayer player : data.getPlayerList()) {\n-      try {\n-        final String playerRepair = player.getRepairFrontier().getName();\n-        final String playername = player.getName();\n-        xmlfile\n-            .append(\"        <playerRepair player=\\\"\")\n-            .append(playername)\n-            .append(\"\\\" frontier=\\\"\")\n-            .append(playerRepair)\n-            .append(\"\\\"/>\\n\");\n-      } catch (final NullPointerException npe) {\n-        // neutral?\n-      }\n-    }\n-  }\n-\n-  private void playerProduction(final GameData data) {\n-    for (final GamePlayer player : data.getPlayerList()) {\n-      try {\n-        final String playerfrontier = player.getProductionFrontier().getName();\n-        final String playername = player.getName();\n-        xmlfile\n-            .append(\"        <playerProduction player=\\\"\")\n-            .append(playername)\n-            .append(\"\\\" frontier=\\\"\")\n-            .append(playerfrontier)\n-            .append(\"\\\"/>\\n\");\n-      } catch (final NullPointerException npe) {\n-        // neutral?\n-      }\n-    }\n-  }\n-\n-  private void productionFrontiers(final GameData data) {\n-    for (final String frontierName :\n-        data.getProductionFrontierList().getProductionFrontierNames()) {\n-      final ProductionFrontier frontier =\n-          data.getProductionFrontierList().getProductionFrontier(frontierName);\n-      xmlfile.append(\"\\n\");\n-      xmlfile\n-          .append(\"        <productionFrontier name=\\\"\")\n-          .append(frontier.getName())\n-          .append(\"\\\">\\n\");\n-      for (final ProductionRule rule : frontier.getRules()) {\n-        xmlfile\n-            .append(\"            <frontierRules name=\\\"\")\n-            .append(rule.getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </productionFrontier>\\n\");\n-    }\n-    xmlfile.append(\"\\n\");\n-  }\n-\n-  private void productionRules(final GameData data) {\n-    for (final ProductionRule pr : data.getProductionRuleList().getProductionRules()) {\n-      xmlfile.append(\"        <productionRule name=\\\"\").append(pr.getName()).append(\"\\\">\\n\");\n-      for (final Resource cost : pr.getCosts().keySet()) {\n-        xmlfile\n-            .append(\"            <cost resource=\\\"\")\n-            .append(cost.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(pr.getCosts().getInt(cost))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      for (final NamedAttachable result : pr.getResults().keySet()) {\n-        xmlfile\n-            .append(\"            <result resourceOrUnit=\\\"\")\n-            .append(result.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(pr.getResults().getInt(result))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </productionRule>\\n\");\n-    }\n-  }\n+  private AttachmentList.Attachment printAttachments(\n+      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n \n-  private void gamePlay(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <gamePlay>\\n\");\n-    for (final IDelegate delegate : data.getDelegates()) {\n-      if (!delegate.getName().equals(\"edit\")) {\n-        xmlfile\n-            .append(\"        <delegate name=\\\"\")\n-            .append(delegate.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(delegate.getClass().getCanonicalName())\n-            .append(\"\\\" display=\\\"\")\n-            .append(delegate.getDisplayName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    sequence(data);\n-    xmlfile\n-        .append(\"        <offset round=\\\"\")\n-        .append(data.getSequence().getRound() - 1)\n-        .append(\"\\\"/>\\n\");\n-    xmlfile.append(\"    </gamePlay>\\n\");\n-  }\n+    final IAttachment attachment = attachmentPlusValues.getFirst();\n+    final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n+\n+    return AttachmentList.Attachment.builder()\n+        .name(attachment.getName())\n+        .attachTo(attachTo.getName())\n+        .javaClass(attachment.getClass().getCanonicalName())\n+        .type(determineAttachmentType(attachTo))\n+        .options(printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond()))\n+        .build();\n+  }\n+\n+  private static String determineAttachmentType(final NamedAttachable attachTo) {\n+    if (attachTo.getClass().equals(GamePlayer.class)) {\n+      return \"player\";", "originalCommit": "36984fc056dea9c79e5375c6f163dbbb72ad18e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8be50ef2a4f5cd3c24ddddebb331853d55f880f", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java b/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\nindex 2a210a038c..0ddecd8036 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\n\n@@ -231,7 +225,7 @@ public class GameDataExporter {\n     return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+  private static Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n     final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n \n     for (final GamePlayer player : data.getPlayerList()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODQ5NQ==", "url": "https://github.com/triplea-game/triplea/pull/7687#discussion_r490638495", "bodyText": "Avoid too many return statements within this method.", "author": "codeclimate", "createdAt": "2020-09-18T00:48:00Z", "path": "game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java", "diffHunk": "@@ -267,409 +217,348 @@ private void relationshipInitialize(final GameData data) {\n         }\n         final RelationshipType type = rt.getRelationshipType(p1, p2);\n         final int roundValue = rt.getRoundRelationshipWasCreated(p1, p2);\n-        xmlfile\n-            .append(\"            <relationship type=\\\"\")\n-            .append(type.getName())\n-            .append(\"\\\" player1=\\\"\")\n-            .append(p1.getName())\n-            .append(\"\\\" player2=\\\"\")\n-            .append(p2.getName())\n-            .append(\"\\\" roundValue=\\\"\")\n-            .append(roundValue)\n-            .append(\"\\\"/>\\n\");\n+\n+        relationships.add(\n+            Initialize.RelationshipInitialize.Relationship.builder()\n+                .type(type.getName())\n+                .player1(p1.getName())\n+                .player2(p2.getName())\n+                .roundValue(roundValue)\n+                .build());\n       }\n       playersAlreadyDone.add(p1);\n     }\n-    xmlfile.append(\"        </relationshipInitialize>\\n\");\n+    return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private void resourceInitialize(final GameData data) {\n-    xmlfile.append(\"        <resourceInitialize>\\n\");\n+  private Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+    final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n+\n     for (final GamePlayer player : data.getPlayerList()) {\n       for (final Resource resource : data.getResourceList().getResources()) {\n         if (player.getResources().getQuantity(resource.getName()) > 0) {\n-          xmlfile\n-              .append(\"            <resourceGiven player=\\\"\")\n-              .append(player.getName())\n-              .append(\"\\\" resource=\\\"\")\n-              .append(resource.getName())\n-              .append(\"\\\" quantity=\\\"\")\n-              .append(player.getResources().getQuantity(resource.getName()))\n-              .append(\"\\\"/>\\n\");\n+          resourcesGiven.add(\n+              Initialize.ResourceInitialize.ResourceGiven.builder()\n+                  .player(player.getName())\n+                  .resource(resource.getName())\n+                  .quantity(player.getResources().getQuantity(resource.getName()))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </resourceInitialize>\\n\");\n+    return Initialize.ResourceInitialize.builder().resourcesGiven(resourcesGiven).build();\n   }\n \n-  private void unitInitialize(final GameData data) {\n-    xmlfile.append(\"        <unitInitialize>\\n\");\n+  private Initialize.UnitInitialize unitInitialize(final GameData data) {\n+    final List<Initialize.UnitInitialize.UnitPlacement> unitPlacements = new ArrayList<>();\n+\n     for (final Territory terr : data.getMap().getTerritories()) {\n       final UnitCollection uc = terr.getUnitCollection();\n       for (final GamePlayer player : uc.getPlayersWithUnits()) {\n         final IntegerMap<UnitType> ucp = uc.getUnitsByType(player);\n         for (final UnitType unit : ucp.keySet()) {\n-          if (player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\"/>\\n\");\n-          } else {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\" owner=\\\"\")\n-                .append(player.getName())\n-                .append(\"\\\"/>\\n\");\n-          }\n+\n+          unitPlacements.add(\n+              Initialize.UnitInitialize.UnitPlacement.builder()\n+                  .owner(\n+                      player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)\n+                          ? null\n+                          : player.getName())\n+                  .unitType(unit.getName())\n+                  .territory(terr.getName())\n+                  .quantity(ucp.getInt(unit))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </unitInitialize>\\n\");\n-  }\n \n-  private void ownerInitialize(final GameData data) {\n-    xmlfile.append(\"        <ownerInitialize>\\n\");\n-    for (final Territory terr : data.getMap().getTerritories()) {\n-      if (!terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-        xmlfile\n-            .append(\"            <territoryOwner territory=\\\"\")\n-            .append(terr.getName())\n-            .append(\"\\\" owner=\\\"\")\n-            .append(terr.getOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    xmlfile.append(\"        </ownerInitialize>\\n\");\n-  }\n-\n-  private void attachments(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <attachmentList>\\n\");\n-    for (final Tuple<IAttachment, List<Tuple<String, String>>> attachment :\n-        data.getAttachmentOrderAndValues()) {\n-      // TODO: use a ui switch to determine if we are printing the xml as it was created, or as it\n-      // stands right now\n-      // (including changes to the game data)\n-      printAttachments(attachment);\n-    }\n-    xmlfile.append(\"    </attachmentList>\\n\");\n+    return Initialize.UnitInitialize.builder().unitPlacements(unitPlacements).build();\n   }\n \n-  private static String printAttachmentOptionsBasedOnOriginalXml(\n-      final List<Tuple<String, String>> attachmentPlusValues, final IAttachment attachment) {\n-    if (attachmentPlusValues.isEmpty()) {\n-      return \"\";\n-    }\n-    final StringBuilder sb = new StringBuilder();\n-    boolean alreadyHasOccupiedTerrOf = false;\n-    for (final Tuple<String, String> current : attachmentPlusValues) {\n-      sb.append(\"            <option name=\\\"\")\n-          .append(current.getFirst())\n-          .append(\"\\\" value=\\\"\")\n-          .append(current.getSecond())\n-          .append(\"\\\"/>\\n\");\n-      if (current.getFirst().equals(\"occupiedTerrOf\")) {\n-        alreadyHasOccupiedTerrOf = true;\n-      }\n-    }\n-    // add occupiedTerrOf until we fix engine to only use originalOwner\n-    if (!alreadyHasOccupiedTerrOf && attachment instanceof TerritoryAttachment) {\n-      final TerritoryAttachment ta = (TerritoryAttachment) attachment;\n-      if (ta.getOriginalOwner() != null) {\n-        sb.append(\"            <option name=\\\"occupiedTerrOf\\\" value=\\\"\")\n-            .append(ta.getOriginalOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    return sb.toString();\n+  private Initialize.OwnerInitialize ownerInitialize(final GameData data) {\n+    return Initialize.OwnerInitialize.builder()\n+        .territoryOwners(\n+            data.getMap().getTerritories().stream()\n+                .filter(terr -> !terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL))\n+                .map(\n+                    terr ->\n+                        Initialize.OwnerInitialize.TerritoryOwner.builder()\n+                            .territory(terr.getName())\n+                            .owner(terr.getOwner().getName())\n+                            .build())\n+                .collect(Collectors.toList()))\n+        .build();\n   }\n \n-  private void printAttachments(\n-      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n-    final IAttachment attachment = attachmentPlusValues.getFirst();\n-    try {\n-      // TODO: none of the attachment exporter classes have been updated since TripleA version\n-      // 1.3.2.2\n-      final String attachmentOptions;\n-      attachmentOptions =\n-          printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond(), attachment);\n-      final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n-      // TODO: keep this list updated\n-      String type = \"\";\n-      if (attachTo.getClass().equals(GamePlayer.class)) {\n-        type = \"player\";\n-      }\n-      if (attachTo.getClass().equals(UnitType.class)) {\n-        type = \"unitType\";\n-      }\n-      if (attachTo.getClass().equals(Territory.class)) {\n-        type = \"territory\";\n-      }\n-      if (attachTo.getClass().equals(TerritoryEffect.class)) {\n-        type = \"territoryEffect\";\n-      }\n-      if (attachTo.getClass().equals(Resource.class)) {\n-        type = \"resource\";\n-      }\n-      if (attachTo.getClass().equals(RelationshipType.class)) {\n-        type = \"relationship\";\n-      }\n-      if (TechAdvance.class.isAssignableFrom(attachTo.getClass())) {\n-        type = \"technology\";\n-      }\n-      if (type.isEmpty()) {\n-        throw new AttachmentExportException(\n-            \"no attachmentType known for \" + attachTo.getClass().getCanonicalName());\n-      }\n-      if (attachmentOptions.length() > 0) {\n-        xmlfile\n-            .append(\"        <attachment name=\\\"\")\n-            .append(attachment.getName())\n-            .append(\"\\\" attachTo=\\\"\")\n-            .append(attachTo.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(attachment.getClass().getCanonicalName())\n-            .append(\"\\\" type=\\\"\")\n-            .append(type)\n-            .append(\"\\\">\\n\");\n-        xmlfile.append(attachmentOptions);\n-        xmlfile.append(\"        </attachment>\\n\");\n-      }\n-    } catch (final Exception e) {\n-      log.log(\n-          Level.SEVERE,\n-          \"An Error occurred whilst trying to print the Attachment \\\"\"\n-              + attachment.getName()\n-              + \"\\\"\",\n-          e);\n-    }\n+  private AttachmentList attachments(final GameData data) {\n+    return AttachmentList.builder()\n+        .attachments(\n+            data.getAttachmentOrderAndValues().stream()\n+                .map(GameDataExporter::printAttachments)\n+                .collect(Collectors.toList()))\n+        .build();\n   }\n \n-  private void production(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <production>\\n\");\n-    productionRules(data);\n-    repairRules(data);\n-    repairFrontiers(data);\n-    productionFrontiers(data);\n-    playerProduction(data);\n-    playerRepair(data);\n-    xmlfile.append(\"    </production>\\n\");\n-  }\n-\n-  private void repairRules(final GameData data) {\n-    for (final RepairRule rr : data.getRepairRules().getRepairRules()) {\n-      xmlfile.append(\"        <repairRule name=\\\"\").append(rr.getName()).append(\"\\\">\\n\");\n-      for (final Resource cost : rr.getCosts().keySet()) {\n-        xmlfile\n-            .append(\"            <cost resource=\\\"\")\n-            .append(cost.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(rr.getCosts().getInt(cost))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      for (final NamedAttachable result : rr.getResults().keySet()) {\n-        xmlfile\n-            .append(\"            <result resourceOrUnit=\\\"\")\n-            .append(result.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(rr.getResults().getInt(result))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </repairRule>\\n\");\n-    }\n+  private static List<AttachmentList.Attachment.Option> printAttachmentOptionsBasedOnOriginalXml(\n+      final List<Tuple<String, String>> attachmentPlusValues) {\n+    return attachmentPlusValues.stream()\n+        .map(\n+            current ->\n+                AttachmentList.Attachment.Option.builder()\n+                    .name(current.getFirst())\n+                    .value(current.getSecond())\n+                    .build())\n+        .collect(Collectors.toList());\n   }\n \n-  private void repairFrontiers(final GameData data) {\n-    for (final String frontierName : data.getRepairFrontierList().getRepairFrontierNames()) {\n-      final RepairFrontier frontier = data.getRepairFrontierList().getRepairFrontier(frontierName);\n-      xmlfile.append(\"\\n\");\n-      xmlfile.append(\"        <repairFrontier name=\\\"\").append(frontier.getName()).append(\"\\\">\\n\");\n-      for (final RepairRule rule : frontier.getRules()) {\n-        xmlfile.append(\"            <repairRules name=\\\"\").append(rule.getName()).append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </repairFrontier>\\n\");\n-    }\n-    xmlfile.append(\"\\n\");\n-  }\n-\n-  private void playerRepair(final GameData data) {\n-    for (final GamePlayer player : data.getPlayerList()) {\n-      try {\n-        final String playerRepair = player.getRepairFrontier().getName();\n-        final String playername = player.getName();\n-        xmlfile\n-            .append(\"        <playerRepair player=\\\"\")\n-            .append(playername)\n-            .append(\"\\\" frontier=\\\"\")\n-            .append(playerRepair)\n-            .append(\"\\\"/>\\n\");\n-      } catch (final NullPointerException npe) {\n-        // neutral?\n-      }\n-    }\n-  }\n-\n-  private void playerProduction(final GameData data) {\n-    for (final GamePlayer player : data.getPlayerList()) {\n-      try {\n-        final String playerfrontier = player.getProductionFrontier().getName();\n-        final String playername = player.getName();\n-        xmlfile\n-            .append(\"        <playerProduction player=\\\"\")\n-            .append(playername)\n-            .append(\"\\\" frontier=\\\"\")\n-            .append(playerfrontier)\n-            .append(\"\\\"/>\\n\");\n-      } catch (final NullPointerException npe) {\n-        // neutral?\n-      }\n-    }\n-  }\n-\n-  private void productionFrontiers(final GameData data) {\n-    for (final String frontierName :\n-        data.getProductionFrontierList().getProductionFrontierNames()) {\n-      final ProductionFrontier frontier =\n-          data.getProductionFrontierList().getProductionFrontier(frontierName);\n-      xmlfile.append(\"\\n\");\n-      xmlfile\n-          .append(\"        <productionFrontier name=\\\"\")\n-          .append(frontier.getName())\n-          .append(\"\\\">\\n\");\n-      for (final ProductionRule rule : frontier.getRules()) {\n-        xmlfile\n-            .append(\"            <frontierRules name=\\\"\")\n-            .append(rule.getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </productionFrontier>\\n\");\n-    }\n-    xmlfile.append(\"\\n\");\n-  }\n-\n-  private void productionRules(final GameData data) {\n-    for (final ProductionRule pr : data.getProductionRuleList().getProductionRules()) {\n-      xmlfile.append(\"        <productionRule name=\\\"\").append(pr.getName()).append(\"\\\">\\n\");\n-      for (final Resource cost : pr.getCosts().keySet()) {\n-        xmlfile\n-            .append(\"            <cost resource=\\\"\")\n-            .append(cost.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(pr.getCosts().getInt(cost))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      for (final NamedAttachable result : pr.getResults().keySet()) {\n-        xmlfile\n-            .append(\"            <result resourceOrUnit=\\\"\")\n-            .append(result.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(pr.getResults().getInt(result))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </productionRule>\\n\");\n-    }\n-  }\n+  private AttachmentList.Attachment printAttachments(\n+      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n \n-  private void gamePlay(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <gamePlay>\\n\");\n-    for (final IDelegate delegate : data.getDelegates()) {\n-      if (!delegate.getName().equals(\"edit\")) {\n-        xmlfile\n-            .append(\"        <delegate name=\\\"\")\n-            .append(delegate.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(delegate.getClass().getCanonicalName())\n-            .append(\"\\\" display=\\\"\")\n-            .append(delegate.getDisplayName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    sequence(data);\n-    xmlfile\n-        .append(\"        <offset round=\\\"\")\n-        .append(data.getSequence().getRound() - 1)\n-        .append(\"\\\"/>\\n\");\n-    xmlfile.append(\"    </gamePlay>\\n\");\n-  }\n+    final IAttachment attachment = attachmentPlusValues.getFirst();\n+    final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n+\n+    return AttachmentList.Attachment.builder()\n+        .name(attachment.getName())\n+        .attachTo(attachTo.getName())\n+        .javaClass(attachment.getClass().getCanonicalName())\n+        .type(determineAttachmentType(attachTo))\n+        .options(printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond()))\n+        .build();\n+  }\n+\n+  private static String determineAttachmentType(final NamedAttachable attachTo) {\n+    if (attachTo.getClass().equals(GamePlayer.class)) {\n+      return \"player\";\n+    } else if (attachTo.getClass().equals(UnitType.class)) {\n+      return \"unitType\";\n+    } else if (attachTo.getClass().equals(Territory.class)) {\n+      return \"territory\";", "originalCommit": "36984fc056dea9c79e5375c6f163dbbb72ad18e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8be50ef2a4f5cd3c24ddddebb331853d55f880f", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java b/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\nindex 2a210a038c..0ddecd8036 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\n\n@@ -231,7 +225,7 @@ public class GameDataExporter {\n     return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+  private static Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n     final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n \n     for (final GamePlayer player : data.getPlayerList()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODQ5Ng==", "url": "https://github.com/triplea-game/triplea/pull/7687#discussion_r490638496", "bodyText": "Avoid too many return statements within this method.", "author": "codeclimate", "createdAt": "2020-09-18T00:48:00Z", "path": "game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java", "diffHunk": "@@ -267,409 +217,348 @@ private void relationshipInitialize(final GameData data) {\n         }\n         final RelationshipType type = rt.getRelationshipType(p1, p2);\n         final int roundValue = rt.getRoundRelationshipWasCreated(p1, p2);\n-        xmlfile\n-            .append(\"            <relationship type=\\\"\")\n-            .append(type.getName())\n-            .append(\"\\\" player1=\\\"\")\n-            .append(p1.getName())\n-            .append(\"\\\" player2=\\\"\")\n-            .append(p2.getName())\n-            .append(\"\\\" roundValue=\\\"\")\n-            .append(roundValue)\n-            .append(\"\\\"/>\\n\");\n+\n+        relationships.add(\n+            Initialize.RelationshipInitialize.Relationship.builder()\n+                .type(type.getName())\n+                .player1(p1.getName())\n+                .player2(p2.getName())\n+                .roundValue(roundValue)\n+                .build());\n       }\n       playersAlreadyDone.add(p1);\n     }\n-    xmlfile.append(\"        </relationshipInitialize>\\n\");\n+    return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private void resourceInitialize(final GameData data) {\n-    xmlfile.append(\"        <resourceInitialize>\\n\");\n+  private Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+    final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n+\n     for (final GamePlayer player : data.getPlayerList()) {\n       for (final Resource resource : data.getResourceList().getResources()) {\n         if (player.getResources().getQuantity(resource.getName()) > 0) {\n-          xmlfile\n-              .append(\"            <resourceGiven player=\\\"\")\n-              .append(player.getName())\n-              .append(\"\\\" resource=\\\"\")\n-              .append(resource.getName())\n-              .append(\"\\\" quantity=\\\"\")\n-              .append(player.getResources().getQuantity(resource.getName()))\n-              .append(\"\\\"/>\\n\");\n+          resourcesGiven.add(\n+              Initialize.ResourceInitialize.ResourceGiven.builder()\n+                  .player(player.getName())\n+                  .resource(resource.getName())\n+                  .quantity(player.getResources().getQuantity(resource.getName()))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </resourceInitialize>\\n\");\n+    return Initialize.ResourceInitialize.builder().resourcesGiven(resourcesGiven).build();\n   }\n \n-  private void unitInitialize(final GameData data) {\n-    xmlfile.append(\"        <unitInitialize>\\n\");\n+  private Initialize.UnitInitialize unitInitialize(final GameData data) {\n+    final List<Initialize.UnitInitialize.UnitPlacement> unitPlacements = new ArrayList<>();\n+\n     for (final Territory terr : data.getMap().getTerritories()) {\n       final UnitCollection uc = terr.getUnitCollection();\n       for (final GamePlayer player : uc.getPlayersWithUnits()) {\n         final IntegerMap<UnitType> ucp = uc.getUnitsByType(player);\n         for (final UnitType unit : ucp.keySet()) {\n-          if (player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\"/>\\n\");\n-          } else {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\" owner=\\\"\")\n-                .append(player.getName())\n-                .append(\"\\\"/>\\n\");\n-          }\n+\n+          unitPlacements.add(\n+              Initialize.UnitInitialize.UnitPlacement.builder()\n+                  .owner(\n+                      player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)\n+                          ? null\n+                          : player.getName())\n+                  .unitType(unit.getName())\n+                  .territory(terr.getName())\n+                  .quantity(ucp.getInt(unit))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </unitInitialize>\\n\");\n-  }\n \n-  private void ownerInitialize(final GameData data) {\n-    xmlfile.append(\"        <ownerInitialize>\\n\");\n-    for (final Territory terr : data.getMap().getTerritories()) {\n-      if (!terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-        xmlfile\n-            .append(\"            <territoryOwner territory=\\\"\")\n-            .append(terr.getName())\n-            .append(\"\\\" owner=\\\"\")\n-            .append(terr.getOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    xmlfile.append(\"        </ownerInitialize>\\n\");\n-  }\n-\n-  private void attachments(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <attachmentList>\\n\");\n-    for (final Tuple<IAttachment, List<Tuple<String, String>>> attachment :\n-        data.getAttachmentOrderAndValues()) {\n-      // TODO: use a ui switch to determine if we are printing the xml as it was created, or as it\n-      // stands right now\n-      // (including changes to the game data)\n-      printAttachments(attachment);\n-    }\n-    xmlfile.append(\"    </attachmentList>\\n\");\n+    return Initialize.UnitInitialize.builder().unitPlacements(unitPlacements).build();\n   }\n \n-  private static String printAttachmentOptionsBasedOnOriginalXml(\n-      final List<Tuple<String, String>> attachmentPlusValues, final IAttachment attachment) {\n-    if (attachmentPlusValues.isEmpty()) {\n-      return \"\";\n-    }\n-    final StringBuilder sb = new StringBuilder();\n-    boolean alreadyHasOccupiedTerrOf = false;\n-    for (final Tuple<String, String> current : attachmentPlusValues) {\n-      sb.append(\"            <option name=\\\"\")\n-          .append(current.getFirst())\n-          .append(\"\\\" value=\\\"\")\n-          .append(current.getSecond())\n-          .append(\"\\\"/>\\n\");\n-      if (current.getFirst().equals(\"occupiedTerrOf\")) {\n-        alreadyHasOccupiedTerrOf = true;\n-      }\n-    }\n-    // add occupiedTerrOf until we fix engine to only use originalOwner\n-    if (!alreadyHasOccupiedTerrOf && attachment instanceof TerritoryAttachment) {\n-      final TerritoryAttachment ta = (TerritoryAttachment) attachment;\n-      if (ta.getOriginalOwner() != null) {\n-        sb.append(\"            <option name=\\\"occupiedTerrOf\\\" value=\\\"\")\n-            .append(ta.getOriginalOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    return sb.toString();\n+  private Initialize.OwnerInitialize ownerInitialize(final GameData data) {\n+    return Initialize.OwnerInitialize.builder()\n+        .territoryOwners(\n+            data.getMap().getTerritories().stream()\n+                .filter(terr -> !terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL))\n+                .map(\n+                    terr ->\n+                        Initialize.OwnerInitialize.TerritoryOwner.builder()\n+                            .territory(terr.getName())\n+                            .owner(terr.getOwner().getName())\n+                            .build())\n+                .collect(Collectors.toList()))\n+        .build();\n   }\n \n-  private void printAttachments(\n-      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n-    final IAttachment attachment = attachmentPlusValues.getFirst();\n-    try {\n-      // TODO: none of the attachment exporter classes have been updated since TripleA version\n-      // 1.3.2.2\n-      final String attachmentOptions;\n-      attachmentOptions =\n-          printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond(), attachment);\n-      final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n-      // TODO: keep this list updated\n-      String type = \"\";\n-      if (attachTo.getClass().equals(GamePlayer.class)) {\n-        type = \"player\";\n-      }\n-      if (attachTo.getClass().equals(UnitType.class)) {\n-        type = \"unitType\";\n-      }\n-      if (attachTo.getClass().equals(Territory.class)) {\n-        type = \"territory\";\n-      }\n-      if (attachTo.getClass().equals(TerritoryEffect.class)) {\n-        type = \"territoryEffect\";\n-      }\n-      if (attachTo.getClass().equals(Resource.class)) {\n-        type = \"resource\";\n-      }\n-      if (attachTo.getClass().equals(RelationshipType.class)) {\n-        type = \"relationship\";\n-      }\n-      if (TechAdvance.class.isAssignableFrom(attachTo.getClass())) {\n-        type = \"technology\";\n-      }\n-      if (type.isEmpty()) {\n-        throw new AttachmentExportException(\n-            \"no attachmentType known for \" + attachTo.getClass().getCanonicalName());\n-      }\n-      if (attachmentOptions.length() > 0) {\n-        xmlfile\n-            .append(\"        <attachment name=\\\"\")\n-            .append(attachment.getName())\n-            .append(\"\\\" attachTo=\\\"\")\n-            .append(attachTo.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(attachment.getClass().getCanonicalName())\n-            .append(\"\\\" type=\\\"\")\n-            .append(type)\n-            .append(\"\\\">\\n\");\n-        xmlfile.append(attachmentOptions);\n-        xmlfile.append(\"        </attachment>\\n\");\n-      }\n-    } catch (final Exception e) {\n-      log.log(\n-          Level.SEVERE,\n-          \"An Error occurred whilst trying to print the Attachment \\\"\"\n-              + attachment.getName()\n-              + \"\\\"\",\n-          e);\n-    }\n+  private AttachmentList attachments(final GameData data) {\n+    return AttachmentList.builder()\n+        .attachments(\n+            data.getAttachmentOrderAndValues().stream()\n+                .map(GameDataExporter::printAttachments)\n+                .collect(Collectors.toList()))\n+        .build();\n   }\n \n-  private void production(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <production>\\n\");\n-    productionRules(data);\n-    repairRules(data);\n-    repairFrontiers(data);\n-    productionFrontiers(data);\n-    playerProduction(data);\n-    playerRepair(data);\n-    xmlfile.append(\"    </production>\\n\");\n-  }\n-\n-  private void repairRules(final GameData data) {\n-    for (final RepairRule rr : data.getRepairRules().getRepairRules()) {\n-      xmlfile.append(\"        <repairRule name=\\\"\").append(rr.getName()).append(\"\\\">\\n\");\n-      for (final Resource cost : rr.getCosts().keySet()) {\n-        xmlfile\n-            .append(\"            <cost resource=\\\"\")\n-            .append(cost.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(rr.getCosts().getInt(cost))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      for (final NamedAttachable result : rr.getResults().keySet()) {\n-        xmlfile\n-            .append(\"            <result resourceOrUnit=\\\"\")\n-            .append(result.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(rr.getResults().getInt(result))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </repairRule>\\n\");\n-    }\n+  private static List<AttachmentList.Attachment.Option> printAttachmentOptionsBasedOnOriginalXml(\n+      final List<Tuple<String, String>> attachmentPlusValues) {\n+    return attachmentPlusValues.stream()\n+        .map(\n+            current ->\n+                AttachmentList.Attachment.Option.builder()\n+                    .name(current.getFirst())\n+                    .value(current.getSecond())\n+                    .build())\n+        .collect(Collectors.toList());\n   }\n \n-  private void repairFrontiers(final GameData data) {\n-    for (final String frontierName : data.getRepairFrontierList().getRepairFrontierNames()) {\n-      final RepairFrontier frontier = data.getRepairFrontierList().getRepairFrontier(frontierName);\n-      xmlfile.append(\"\\n\");\n-      xmlfile.append(\"        <repairFrontier name=\\\"\").append(frontier.getName()).append(\"\\\">\\n\");\n-      for (final RepairRule rule : frontier.getRules()) {\n-        xmlfile.append(\"            <repairRules name=\\\"\").append(rule.getName()).append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </repairFrontier>\\n\");\n-    }\n-    xmlfile.append(\"\\n\");\n-  }\n-\n-  private void playerRepair(final GameData data) {\n-    for (final GamePlayer player : data.getPlayerList()) {\n-      try {\n-        final String playerRepair = player.getRepairFrontier().getName();\n-        final String playername = player.getName();\n-        xmlfile\n-            .append(\"        <playerRepair player=\\\"\")\n-            .append(playername)\n-            .append(\"\\\" frontier=\\\"\")\n-            .append(playerRepair)\n-            .append(\"\\\"/>\\n\");\n-      } catch (final NullPointerException npe) {\n-        // neutral?\n-      }\n-    }\n-  }\n-\n-  private void playerProduction(final GameData data) {\n-    for (final GamePlayer player : data.getPlayerList()) {\n-      try {\n-        final String playerfrontier = player.getProductionFrontier().getName();\n-        final String playername = player.getName();\n-        xmlfile\n-            .append(\"        <playerProduction player=\\\"\")\n-            .append(playername)\n-            .append(\"\\\" frontier=\\\"\")\n-            .append(playerfrontier)\n-            .append(\"\\\"/>\\n\");\n-      } catch (final NullPointerException npe) {\n-        // neutral?\n-      }\n-    }\n-  }\n-\n-  private void productionFrontiers(final GameData data) {\n-    for (final String frontierName :\n-        data.getProductionFrontierList().getProductionFrontierNames()) {\n-      final ProductionFrontier frontier =\n-          data.getProductionFrontierList().getProductionFrontier(frontierName);\n-      xmlfile.append(\"\\n\");\n-      xmlfile\n-          .append(\"        <productionFrontier name=\\\"\")\n-          .append(frontier.getName())\n-          .append(\"\\\">\\n\");\n-      for (final ProductionRule rule : frontier.getRules()) {\n-        xmlfile\n-            .append(\"            <frontierRules name=\\\"\")\n-            .append(rule.getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </productionFrontier>\\n\");\n-    }\n-    xmlfile.append(\"\\n\");\n-  }\n-\n-  private void productionRules(final GameData data) {\n-    for (final ProductionRule pr : data.getProductionRuleList().getProductionRules()) {\n-      xmlfile.append(\"        <productionRule name=\\\"\").append(pr.getName()).append(\"\\\">\\n\");\n-      for (final Resource cost : pr.getCosts().keySet()) {\n-        xmlfile\n-            .append(\"            <cost resource=\\\"\")\n-            .append(cost.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(pr.getCosts().getInt(cost))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      for (final NamedAttachable result : pr.getResults().keySet()) {\n-        xmlfile\n-            .append(\"            <result resourceOrUnit=\\\"\")\n-            .append(result.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(pr.getResults().getInt(result))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </productionRule>\\n\");\n-    }\n-  }\n+  private AttachmentList.Attachment printAttachments(\n+      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n \n-  private void gamePlay(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <gamePlay>\\n\");\n-    for (final IDelegate delegate : data.getDelegates()) {\n-      if (!delegate.getName().equals(\"edit\")) {\n-        xmlfile\n-            .append(\"        <delegate name=\\\"\")\n-            .append(delegate.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(delegate.getClass().getCanonicalName())\n-            .append(\"\\\" display=\\\"\")\n-            .append(delegate.getDisplayName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    sequence(data);\n-    xmlfile\n-        .append(\"        <offset round=\\\"\")\n-        .append(data.getSequence().getRound() - 1)\n-        .append(\"\\\"/>\\n\");\n-    xmlfile.append(\"    </gamePlay>\\n\");\n-  }\n+    final IAttachment attachment = attachmentPlusValues.getFirst();\n+    final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n+\n+    return AttachmentList.Attachment.builder()\n+        .name(attachment.getName())\n+        .attachTo(attachTo.getName())\n+        .javaClass(attachment.getClass().getCanonicalName())\n+        .type(determineAttachmentType(attachTo))\n+        .options(printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond()))\n+        .build();\n+  }\n+\n+  private static String determineAttachmentType(final NamedAttachable attachTo) {\n+    if (attachTo.getClass().equals(GamePlayer.class)) {\n+      return \"player\";\n+    } else if (attachTo.getClass().equals(UnitType.class)) {\n+      return \"unitType\";", "originalCommit": "36984fc056dea9c79e5375c6f163dbbb72ad18e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8be50ef2a4f5cd3c24ddddebb331853d55f880f", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java b/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\nindex 2a210a038c..0ddecd8036 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\n\n@@ -231,7 +225,7 @@ public class GameDataExporter {\n     return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+  private static Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n     final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n \n     for (final GamePlayer player : data.getPlayerList()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODQ5OA==", "url": "https://github.com/triplea-game/triplea/pull/7687#discussion_r490638498", "bodyText": "Method determineAttachmentType has a Cognitive Complexity of 8 (exceeds 7 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-09-18T00:48:01Z", "path": "game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java", "diffHunk": "@@ -267,409 +217,348 @@ private void relationshipInitialize(final GameData data) {\n         }\n         final RelationshipType type = rt.getRelationshipType(p1, p2);\n         final int roundValue = rt.getRoundRelationshipWasCreated(p1, p2);\n-        xmlfile\n-            .append(\"            <relationship type=\\\"\")\n-            .append(type.getName())\n-            .append(\"\\\" player1=\\\"\")\n-            .append(p1.getName())\n-            .append(\"\\\" player2=\\\"\")\n-            .append(p2.getName())\n-            .append(\"\\\" roundValue=\\\"\")\n-            .append(roundValue)\n-            .append(\"\\\"/>\\n\");\n+\n+        relationships.add(\n+            Initialize.RelationshipInitialize.Relationship.builder()\n+                .type(type.getName())\n+                .player1(p1.getName())\n+                .player2(p2.getName())\n+                .roundValue(roundValue)\n+                .build());\n       }\n       playersAlreadyDone.add(p1);\n     }\n-    xmlfile.append(\"        </relationshipInitialize>\\n\");\n+    return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private void resourceInitialize(final GameData data) {\n-    xmlfile.append(\"        <resourceInitialize>\\n\");\n+  private Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+    final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n+\n     for (final GamePlayer player : data.getPlayerList()) {\n       for (final Resource resource : data.getResourceList().getResources()) {\n         if (player.getResources().getQuantity(resource.getName()) > 0) {\n-          xmlfile\n-              .append(\"            <resourceGiven player=\\\"\")\n-              .append(player.getName())\n-              .append(\"\\\" resource=\\\"\")\n-              .append(resource.getName())\n-              .append(\"\\\" quantity=\\\"\")\n-              .append(player.getResources().getQuantity(resource.getName()))\n-              .append(\"\\\"/>\\n\");\n+          resourcesGiven.add(\n+              Initialize.ResourceInitialize.ResourceGiven.builder()\n+                  .player(player.getName())\n+                  .resource(resource.getName())\n+                  .quantity(player.getResources().getQuantity(resource.getName()))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </resourceInitialize>\\n\");\n+    return Initialize.ResourceInitialize.builder().resourcesGiven(resourcesGiven).build();\n   }\n \n-  private void unitInitialize(final GameData data) {\n-    xmlfile.append(\"        <unitInitialize>\\n\");\n+  private Initialize.UnitInitialize unitInitialize(final GameData data) {\n+    final List<Initialize.UnitInitialize.UnitPlacement> unitPlacements = new ArrayList<>();\n+\n     for (final Territory terr : data.getMap().getTerritories()) {\n       final UnitCollection uc = terr.getUnitCollection();\n       for (final GamePlayer player : uc.getPlayersWithUnits()) {\n         final IntegerMap<UnitType> ucp = uc.getUnitsByType(player);\n         for (final UnitType unit : ucp.keySet()) {\n-          if (player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\"/>\\n\");\n-          } else {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\" owner=\\\"\")\n-                .append(player.getName())\n-                .append(\"\\\"/>\\n\");\n-          }\n+\n+          unitPlacements.add(\n+              Initialize.UnitInitialize.UnitPlacement.builder()\n+                  .owner(\n+                      player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)\n+                          ? null\n+                          : player.getName())\n+                  .unitType(unit.getName())\n+                  .territory(terr.getName())\n+                  .quantity(ucp.getInt(unit))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </unitInitialize>\\n\");\n-  }\n \n-  private void ownerInitialize(final GameData data) {\n-    xmlfile.append(\"        <ownerInitialize>\\n\");\n-    for (final Territory terr : data.getMap().getTerritories()) {\n-      if (!terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-        xmlfile\n-            .append(\"            <territoryOwner territory=\\\"\")\n-            .append(terr.getName())\n-            .append(\"\\\" owner=\\\"\")\n-            .append(terr.getOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    xmlfile.append(\"        </ownerInitialize>\\n\");\n-  }\n-\n-  private void attachments(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <attachmentList>\\n\");\n-    for (final Tuple<IAttachment, List<Tuple<String, String>>> attachment :\n-        data.getAttachmentOrderAndValues()) {\n-      // TODO: use a ui switch to determine if we are printing the xml as it was created, or as it\n-      // stands right now\n-      // (including changes to the game data)\n-      printAttachments(attachment);\n-    }\n-    xmlfile.append(\"    </attachmentList>\\n\");\n+    return Initialize.UnitInitialize.builder().unitPlacements(unitPlacements).build();\n   }\n \n-  private static String printAttachmentOptionsBasedOnOriginalXml(\n-      final List<Tuple<String, String>> attachmentPlusValues, final IAttachment attachment) {\n-    if (attachmentPlusValues.isEmpty()) {\n-      return \"\";\n-    }\n-    final StringBuilder sb = new StringBuilder();\n-    boolean alreadyHasOccupiedTerrOf = false;\n-    for (final Tuple<String, String> current : attachmentPlusValues) {\n-      sb.append(\"            <option name=\\\"\")\n-          .append(current.getFirst())\n-          .append(\"\\\" value=\\\"\")\n-          .append(current.getSecond())\n-          .append(\"\\\"/>\\n\");\n-      if (current.getFirst().equals(\"occupiedTerrOf\")) {\n-        alreadyHasOccupiedTerrOf = true;\n-      }\n-    }\n-    // add occupiedTerrOf until we fix engine to only use originalOwner\n-    if (!alreadyHasOccupiedTerrOf && attachment instanceof TerritoryAttachment) {\n-      final TerritoryAttachment ta = (TerritoryAttachment) attachment;\n-      if (ta.getOriginalOwner() != null) {\n-        sb.append(\"            <option name=\\\"occupiedTerrOf\\\" value=\\\"\")\n-            .append(ta.getOriginalOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    return sb.toString();\n+  private Initialize.OwnerInitialize ownerInitialize(final GameData data) {\n+    return Initialize.OwnerInitialize.builder()\n+        .territoryOwners(\n+            data.getMap().getTerritories().stream()\n+                .filter(terr -> !terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL))\n+                .map(\n+                    terr ->\n+                        Initialize.OwnerInitialize.TerritoryOwner.builder()\n+                            .territory(terr.getName())\n+                            .owner(terr.getOwner().getName())\n+                            .build())\n+                .collect(Collectors.toList()))\n+        .build();\n   }\n \n-  private void printAttachments(\n-      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n-    final IAttachment attachment = attachmentPlusValues.getFirst();\n-    try {\n-      // TODO: none of the attachment exporter classes have been updated since TripleA version\n-      // 1.3.2.2\n-      final String attachmentOptions;\n-      attachmentOptions =\n-          printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond(), attachment);\n-      final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n-      // TODO: keep this list updated\n-      String type = \"\";\n-      if (attachTo.getClass().equals(GamePlayer.class)) {\n-        type = \"player\";\n-      }\n-      if (attachTo.getClass().equals(UnitType.class)) {\n-        type = \"unitType\";\n-      }\n-      if (attachTo.getClass().equals(Territory.class)) {\n-        type = \"territory\";\n-      }\n-      if (attachTo.getClass().equals(TerritoryEffect.class)) {\n-        type = \"territoryEffect\";\n-      }\n-      if (attachTo.getClass().equals(Resource.class)) {\n-        type = \"resource\";\n-      }\n-      if (attachTo.getClass().equals(RelationshipType.class)) {\n-        type = \"relationship\";\n-      }\n-      if (TechAdvance.class.isAssignableFrom(attachTo.getClass())) {\n-        type = \"technology\";\n-      }\n-      if (type.isEmpty()) {\n-        throw new AttachmentExportException(\n-            \"no attachmentType known for \" + attachTo.getClass().getCanonicalName());\n-      }\n-      if (attachmentOptions.length() > 0) {\n-        xmlfile\n-            .append(\"        <attachment name=\\\"\")\n-            .append(attachment.getName())\n-            .append(\"\\\" attachTo=\\\"\")\n-            .append(attachTo.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(attachment.getClass().getCanonicalName())\n-            .append(\"\\\" type=\\\"\")\n-            .append(type)\n-            .append(\"\\\">\\n\");\n-        xmlfile.append(attachmentOptions);\n-        xmlfile.append(\"        </attachment>\\n\");\n-      }\n-    } catch (final Exception e) {\n-      log.log(\n-          Level.SEVERE,\n-          \"An Error occurred whilst trying to print the Attachment \\\"\"\n-              + attachment.getName()\n-              + \"\\\"\",\n-          e);\n-    }\n+  private AttachmentList attachments(final GameData data) {\n+    return AttachmentList.builder()\n+        .attachments(\n+            data.getAttachmentOrderAndValues().stream()\n+                .map(GameDataExporter::printAttachments)\n+                .collect(Collectors.toList()))\n+        .build();\n   }\n \n-  private void production(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <production>\\n\");\n-    productionRules(data);\n-    repairRules(data);\n-    repairFrontiers(data);\n-    productionFrontiers(data);\n-    playerProduction(data);\n-    playerRepair(data);\n-    xmlfile.append(\"    </production>\\n\");\n-  }\n-\n-  private void repairRules(final GameData data) {\n-    for (final RepairRule rr : data.getRepairRules().getRepairRules()) {\n-      xmlfile.append(\"        <repairRule name=\\\"\").append(rr.getName()).append(\"\\\">\\n\");\n-      for (final Resource cost : rr.getCosts().keySet()) {\n-        xmlfile\n-            .append(\"            <cost resource=\\\"\")\n-            .append(cost.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(rr.getCosts().getInt(cost))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      for (final NamedAttachable result : rr.getResults().keySet()) {\n-        xmlfile\n-            .append(\"            <result resourceOrUnit=\\\"\")\n-            .append(result.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(rr.getResults().getInt(result))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </repairRule>\\n\");\n-    }\n+  private static List<AttachmentList.Attachment.Option> printAttachmentOptionsBasedOnOriginalXml(\n+      final List<Tuple<String, String>> attachmentPlusValues) {\n+    return attachmentPlusValues.stream()\n+        .map(\n+            current ->\n+                AttachmentList.Attachment.Option.builder()\n+                    .name(current.getFirst())\n+                    .value(current.getSecond())\n+                    .build())\n+        .collect(Collectors.toList());\n   }\n \n-  private void repairFrontiers(final GameData data) {\n-    for (final String frontierName : data.getRepairFrontierList().getRepairFrontierNames()) {\n-      final RepairFrontier frontier = data.getRepairFrontierList().getRepairFrontier(frontierName);\n-      xmlfile.append(\"\\n\");\n-      xmlfile.append(\"        <repairFrontier name=\\\"\").append(frontier.getName()).append(\"\\\">\\n\");\n-      for (final RepairRule rule : frontier.getRules()) {\n-        xmlfile.append(\"            <repairRules name=\\\"\").append(rule.getName()).append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </repairFrontier>\\n\");\n-    }\n-    xmlfile.append(\"\\n\");\n-  }\n-\n-  private void playerRepair(final GameData data) {\n-    for (final GamePlayer player : data.getPlayerList()) {\n-      try {\n-        final String playerRepair = player.getRepairFrontier().getName();\n-        final String playername = player.getName();\n-        xmlfile\n-            .append(\"        <playerRepair player=\\\"\")\n-            .append(playername)\n-            .append(\"\\\" frontier=\\\"\")\n-            .append(playerRepair)\n-            .append(\"\\\"/>\\n\");\n-      } catch (final NullPointerException npe) {\n-        // neutral?\n-      }\n-    }\n-  }\n-\n-  private void playerProduction(final GameData data) {\n-    for (final GamePlayer player : data.getPlayerList()) {\n-      try {\n-        final String playerfrontier = player.getProductionFrontier().getName();\n-        final String playername = player.getName();\n-        xmlfile\n-            .append(\"        <playerProduction player=\\\"\")\n-            .append(playername)\n-            .append(\"\\\" frontier=\\\"\")\n-            .append(playerfrontier)\n-            .append(\"\\\"/>\\n\");\n-      } catch (final NullPointerException npe) {\n-        // neutral?\n-      }\n-    }\n-  }\n-\n-  private void productionFrontiers(final GameData data) {\n-    for (final String frontierName :\n-        data.getProductionFrontierList().getProductionFrontierNames()) {\n-      final ProductionFrontier frontier =\n-          data.getProductionFrontierList().getProductionFrontier(frontierName);\n-      xmlfile.append(\"\\n\");\n-      xmlfile\n-          .append(\"        <productionFrontier name=\\\"\")\n-          .append(frontier.getName())\n-          .append(\"\\\">\\n\");\n-      for (final ProductionRule rule : frontier.getRules()) {\n-        xmlfile\n-            .append(\"            <frontierRules name=\\\"\")\n-            .append(rule.getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </productionFrontier>\\n\");\n-    }\n-    xmlfile.append(\"\\n\");\n-  }\n-\n-  private void productionRules(final GameData data) {\n-    for (final ProductionRule pr : data.getProductionRuleList().getProductionRules()) {\n-      xmlfile.append(\"        <productionRule name=\\\"\").append(pr.getName()).append(\"\\\">\\n\");\n-      for (final Resource cost : pr.getCosts().keySet()) {\n-        xmlfile\n-            .append(\"            <cost resource=\\\"\")\n-            .append(cost.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(pr.getCosts().getInt(cost))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      for (final NamedAttachable result : pr.getResults().keySet()) {\n-        xmlfile\n-            .append(\"            <result resourceOrUnit=\\\"\")\n-            .append(result.getName())\n-            .append(\"\\\" quantity=\\\"\")\n-            .append(pr.getResults().getInt(result))\n-            .append(\"\\\"/>\\n\");\n-      }\n-      xmlfile.append(\"        </productionRule>\\n\");\n-    }\n-  }\n+  private AttachmentList.Attachment printAttachments(\n+      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n \n-  private void gamePlay(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <gamePlay>\\n\");\n-    for (final IDelegate delegate : data.getDelegates()) {\n-      if (!delegate.getName().equals(\"edit\")) {\n-        xmlfile\n-            .append(\"        <delegate name=\\\"\")\n-            .append(delegate.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(delegate.getClass().getCanonicalName())\n-            .append(\"\\\" display=\\\"\")\n-            .append(delegate.getDisplayName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    sequence(data);\n-    xmlfile\n-        .append(\"        <offset round=\\\"\")\n-        .append(data.getSequence().getRound() - 1)\n-        .append(\"\\\"/>\\n\");\n-    xmlfile.append(\"    </gamePlay>\\n\");\n-  }\n+    final IAttachment attachment = attachmentPlusValues.getFirst();\n+    final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n+\n+    return AttachmentList.Attachment.builder()\n+        .name(attachment.getName())\n+        .attachTo(attachTo.getName())\n+        .javaClass(attachment.getClass().getCanonicalName())\n+        .type(determineAttachmentType(attachTo))\n+        .options(printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond()))\n+        .build();\n+  }\n+\n+  private static String determineAttachmentType(final NamedAttachable attachTo) {", "originalCommit": "36984fc056dea9c79e5375c6f163dbbb72ad18e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8be50ef2a4f5cd3c24ddddebb331853d55f880f", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java b/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\nindex 2a210a038c..0ddecd8036 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java\n\n@@ -231,7 +225,7 @@ public class GameDataExporter {\n     return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+  private static Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n     final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n \n     for (final GamePlayer player : data.getPlayerList()) {\n"}}, {"oid": "a8be50ef2a4f5cd3c24ddddebb331853d55f880f", "url": "https://github.com/triplea-game/triplea/commit/a8be50ef2a4f5cd3c24ddddebb331853d55f880f", "message": "More simplifications/consistency, mark more methods as static", "committedDate": "2020-09-18T03:32:18Z", "type": "commit"}, {"oid": "01aa5b67658d4f9e1c7ca1c34af531e1645671b5", "url": "https://github.com/triplea-game/triplea/commit/01aa5b67658d4f9e1c7ca1c34af531e1645671b5", "message": "Rename method", "committedDate": "2020-09-19T02:28:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1ODExMg==", "url": "https://github.com/triplea-game/triplea/pull/7687#discussion_r491258112", "bodyText": "Codacy found an issue: Assigning an Object to null is a code smell.  Consider refactoring.", "author": "DanVanAtta", "createdAt": "2020-09-19T02:33:19Z", "path": "game-core/src/main/java/games/strategy/engine/data/export/GameDataExporter.java", "diffHunk": "@@ -267,409 +211,348 @@ private void relationshipInitialize(final GameData data) {\n         }\n         final RelationshipType type = rt.getRelationshipType(p1, p2);\n         final int roundValue = rt.getRoundRelationshipWasCreated(p1, p2);\n-        xmlfile\n-            .append(\"            <relationship type=\\\"\")\n-            .append(type.getName())\n-            .append(\"\\\" player1=\\\"\")\n-            .append(p1.getName())\n-            .append(\"\\\" player2=\\\"\")\n-            .append(p2.getName())\n-            .append(\"\\\" roundValue=\\\"\")\n-            .append(roundValue)\n-            .append(\"\\\"/>\\n\");\n+\n+        relationships.add(\n+            Initialize.RelationshipInitialize.Relationship.builder()\n+                .type(type.getName())\n+                .player1(p1.getName())\n+                .player2(p2.getName())\n+                .roundValue(roundValue)\n+                .build());\n       }\n       playersAlreadyDone.add(p1);\n     }\n-    xmlfile.append(\"        </relationshipInitialize>\\n\");\n+    return Initialize.RelationshipInitialize.builder().relationships(relationships).build();\n   }\n \n-  private void resourceInitialize(final GameData data) {\n-    xmlfile.append(\"        <resourceInitialize>\\n\");\n+  private static Initialize.ResourceInitialize resourceInitialize(final GameData data) {\n+    final List<Initialize.ResourceInitialize.ResourceGiven> resourcesGiven = new ArrayList<>();\n+\n     for (final GamePlayer player : data.getPlayerList()) {\n       for (final Resource resource : data.getResourceList().getResources()) {\n         if (player.getResources().getQuantity(resource.getName()) > 0) {\n-          xmlfile\n-              .append(\"            <resourceGiven player=\\\"\")\n-              .append(player.getName())\n-              .append(\"\\\" resource=\\\"\")\n-              .append(resource.getName())\n-              .append(\"\\\" quantity=\\\"\")\n-              .append(player.getResources().getQuantity(resource.getName()))\n-              .append(\"\\\"/>\\n\");\n+          resourcesGiven.add(\n+              Initialize.ResourceInitialize.ResourceGiven.builder()\n+                  .player(player.getName())\n+                  .resource(resource.getName())\n+                  .quantity(player.getResources().getQuantity(resource.getName()))\n+                  .build());\n         }\n       }\n     }\n-    xmlfile.append(\"        </resourceInitialize>\\n\");\n+    return Initialize.ResourceInitialize.builder().resourcesGiven(resourcesGiven).build();\n   }\n \n-  private void unitInitialize(final GameData data) {\n-    xmlfile.append(\"        <unitInitialize>\\n\");\n+  private static Initialize.UnitInitialize unitInitialize(final GameData data) {\n+    final List<Initialize.UnitInitialize.UnitPlacement> unitPlacements = new ArrayList<>();\n+\n     for (final Territory terr : data.getMap().getTerritories()) {\n       final UnitCollection uc = terr.getUnitCollection();\n       for (final GamePlayer player : uc.getPlayersWithUnits()) {\n         final IntegerMap<UnitType> ucp = uc.getUnitsByType(player);\n         for (final UnitType unit : ucp.keySet()) {\n-          if (player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\"/>\\n\");\n-          } else {\n-            xmlfile\n-                .append(\"            <unitPlacement unitType=\\\"\")\n-                .append(unit.getName())\n-                .append(\"\\\" territory=\\\"\")\n-                .append(terr.getName())\n-                .append(\"\\\" quantity=\\\"\")\n-                .append(ucp.getInt(unit))\n-                .append(\"\\\" owner=\\\"\")\n-                .append(player.getName())\n-                .append(\"\\\"/>\\n\");\n-          }\n-        }\n-      }\n-    }\n-    xmlfile.append(\"        </unitInitialize>\\n\");\n-  }\n-\n-  private void ownerInitialize(final GameData data) {\n-    xmlfile.append(\"        <ownerInitialize>\\n\");\n-    for (final Territory terr : data.getMap().getTerritories()) {\n-      if (!terr.getOwner().getName().equals(Constants.PLAYER_NAME_NEUTRAL)) {\n-        xmlfile\n-            .append(\"            <territoryOwner territory=\\\"\")\n-            .append(terr.getName())\n-            .append(\"\\\" owner=\\\"\")\n-            .append(terr.getOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    xmlfile.append(\"        </ownerInitialize>\\n\");\n-  }\n-\n-  private void attachments(final GameData data) {\n-    xmlfile.append(\"\\n\");\n-    xmlfile.append(\"    <attachmentList>\\n\");\n-    for (final Tuple<IAttachment, List<Tuple<String, String>>> attachment :\n-        data.getAttachmentOrderAndValues()) {\n-      // TODO: use a ui switch to determine if we are printing the xml as it was created, or as it\n-      // stands right now\n-      // (including changes to the game data)\n-      printAttachments(attachment);\n-    }\n-    xmlfile.append(\"    </attachmentList>\\n\");\n-  }\n-\n-  private static String printAttachmentOptionsBasedOnOriginalXml(\n-      final List<Tuple<String, String>> attachmentPlusValues, final IAttachment attachment) {\n-    if (attachmentPlusValues.isEmpty()) {\n-      return \"\";\n-    }\n-    final StringBuilder sb = new StringBuilder();\n-    boolean alreadyHasOccupiedTerrOf = false;\n-    for (final Tuple<String, String> current : attachmentPlusValues) {\n-      sb.append(\"            <option name=\\\"\")\n-          .append(current.getFirst())\n-          .append(\"\\\" value=\\\"\")\n-          .append(current.getSecond())\n-          .append(\"\\\"/>\\n\");\n-      if (current.getFirst().equals(\"occupiedTerrOf\")) {\n-        alreadyHasOccupiedTerrOf = true;\n-      }\n-    }\n-    // add occupiedTerrOf until we fix engine to only use originalOwner\n-    if (!alreadyHasOccupiedTerrOf && attachment instanceof TerritoryAttachment) {\n-      final TerritoryAttachment ta = (TerritoryAttachment) attachment;\n-      if (ta.getOriginalOwner() != null) {\n-        sb.append(\"            <option name=\\\"occupiedTerrOf\\\" value=\\\"\")\n-            .append(ta.getOriginalOwner().getName())\n-            .append(\"\\\"/>\\n\");\n-      }\n-    }\n-    return sb.toString();\n-  }\n \n-  private void printAttachments(\n-      final Tuple<IAttachment, List<Tuple<String, String>>> attachmentPlusValues) {\n-    final IAttachment attachment = attachmentPlusValues.getFirst();\n-    try {\n-      // TODO: none of the attachment exporter classes have been updated since TripleA version\n-      // 1.3.2.2\n-      final String attachmentOptions;\n-      attachmentOptions =\n-          printAttachmentOptionsBasedOnOriginalXml(attachmentPlusValues.getSecond(), attachment);\n-      final NamedAttachable attachTo = (NamedAttachable) attachment.getAttachedTo();\n-      // TODO: keep this list updated\n-      String type = \"\";\n-      if (attachTo.getClass().equals(GamePlayer.class)) {\n-        type = \"player\";\n-      }\n-      if (attachTo.getClass().equals(UnitType.class)) {\n-        type = \"unitType\";\n-      }\n-      if (attachTo.getClass().equals(Territory.class)) {\n-        type = \"territory\";\n-      }\n-      if (attachTo.getClass().equals(TerritoryEffect.class)) {\n-        type = \"territoryEffect\";\n-      }\n-      if (attachTo.getClass().equals(Resource.class)) {\n-        type = \"resource\";\n-      }\n-      if (attachTo.getClass().equals(RelationshipType.class)) {\n-        type = \"relationship\";\n-      }\n-      if (TechAdvance.class.isAssignableFrom(attachTo.getClass())) {\n-        type = \"technology\";\n-      }\n-      if (type.isEmpty()) {\n-        throw new AttachmentExportException(\n-            \"no attachmentType known for \" + attachTo.getClass().getCanonicalName());\n-      }\n-      if (attachmentOptions.length() > 0) {\n-        xmlfile\n-            .append(\"        <attachment name=\\\"\")\n-            .append(attachment.getName())\n-            .append(\"\\\" attachTo=\\\"\")\n-            .append(attachTo.getName())\n-            .append(\"\\\" javaClass=\\\"\")\n-            .append(attachment.getClass().getCanonicalName())\n-            .append(\"\\\" type=\\\"\")\n-            .append(type)\n-            .append(\"\\\">\\n\");\n-        xmlfile.append(attachmentOptions);\n-        xmlfile.append(\"        </attachment>\\n\");\n+          unitPlacements.add(\n+              Initialize.UnitInitialize.UnitPlacement.builder()\n+                  .owner(\n+                      player == null || player.getName().equals(Constants.PLAYER_NAME_NEUTRAL)\n+                          ? null", "originalCommit": "01aa5b67658d4f9e1c7ca1c34af531e1645671b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}