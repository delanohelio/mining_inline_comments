{"pr_number": 6189, "pr_title": "Make Territory.getUnits() return an unmodifiable list.", "pr_createdAt": "2020-04-11T18:11:08Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6189", "timeline": [{"oid": "dacff1cf0985f878db7c75c6144dd1e9b5ac4ea3", "url": "https://github.com/triplea-game/triplea/commit/dacff1cf0985f878db7c75c6144dd1e9b5ac4ea3", "message": "Make Territory.getUnits() return an unmodifiable list.", "committedDate": "2020-04-11T18:08:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDAwOA==", "url": "https://github.com/triplea-game/triplea/pull/6189#discussion_r407114008", "bodyText": "The existing code seems to have been kinda not optimal, returning a copy of a list to then create a copy of a list..\nMore fundamentally, if this is a heavily invoked code path, wouldn't the better datastructure here be a Set instead of List for faster item removal?", "author": "DanVanAtta", "createdAt": "2020-04-11T21:42:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/AbstractPlaceDelegate.java", "diffHunk": "@@ -1652,14 +1652,13 @@ private boolean getCanAllUnitsWithRequiresUnitsBePlacedCorrectly(\n     if (to == null) {\n       return new ArrayList<>();\n     }\n-    final Collection<Unit> unitsInTo = to.getUnits();\n     final Collection<Unit> unitsPlacedAlready = getAlreadyProduced(to);\n     if (Matches.territoryIsWater().test(to)) {\n       for (final Territory current : getAllProducers(to, player, null, true)) {\n         unitsPlacedAlready.addAll(getAlreadyProduced(current));\n       }\n     }\n-    final Collection<Unit> unitsAtStartOfTurnInTo = new ArrayList<>(unitsInTo);\n+    final Collection<Unit> unitsAtStartOfTurnInTo = new ArrayList<>(to.getUnits());", "originalCommit": "dacff1cf0985f878db7c75c6144dd1e9b5ac4ea3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDE4MA==", "url": "https://github.com/triplea-game/triplea/pull/6189#discussion_r407114180", "bodyText": "side-note, not to update for this PR: I think one problem we are running into is a lack of encapsulation. We would not have to worry as much about set mutability if battleSite perhaps just handled this, eg: battleSite.getRemainingUnits, instead it seems we have relatively procedural code and battleSite is more a struct, so we run into conflicts with not trying to mutate the state of an object that is fundamentally mutable state.", "author": "DanVanAtta", "createdAt": "2020-04-11T21:44:35Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -268,7 +268,7 @@ void addDependentUnits(final Map<Unit, Collection<Unit>> dependencies) {\n   @Override\n   public List<Unit> getRemainingAttackingUnits() {\n     final List<Unit> remaining = new ArrayList<>(attackingUnitsRetreated);\n-    final Collection<Unit> unitsLeftInTerritory = battleSite.getUnits();\n+    final Collection<Unit> unitsLeftInTerritory = new ArrayList<>(battleSite.getUnits());", "originalCommit": "dacff1cf0985f878db7c75c6144dd1e9b5ac4ea3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}