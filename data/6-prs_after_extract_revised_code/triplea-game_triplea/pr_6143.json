{"pr_number": 6143, "pr_title": "Default save game name", "pr_createdAt": "2020-04-05T23:53:54Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6143", "timeline": [{"oid": "9c2b6dbb0114a785bd5d12f2469baded41a1eeff", "url": "https://github.com/triplea-game/triplea/commit/9c2b6dbb0114a785bd5d12f2469baded41a1eeff", "message": "Move save-game file chooser logic to SaveGameFileChooser", "committedDate": "2020-04-05T22:45:09Z", "type": "commit"}, {"oid": "5bee76ed6a6b6369dc62a0f5e19de7adc0f381be", "url": "https://github.com/triplea-game/triplea/commit/5bee76ed6a6b6369dc62a0f5e19de7adc0f381be", "message": "Add default save game name\n\nThis is done by adding a gameData property that is the save game file name\nthat we are loading from. The property is null if we are starting a new game.\n\nIn the case wheere we are loading new game, instead of defaulting\nthe save game file name to the name of the save game, we instead create\n a default name with this pattern \"YYYY-MM-DD-map-name.tsvg\"", "committedDate": "2020-04-05T23:48:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5MDkxNw==", "url": "https://github.com/triplea-game/triplea/pull/6143#discussion_r404790917", "bodyText": "Thoughts about using https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE for date formatting?", "author": "RoiEXLab", "createdAt": "2020-04-07T13:03:23Z", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/SaveGameFileChooser.java", "diffHunk": "@@ -1,48 +1,56 @@\n package games.strategy.engine.framework.ui;\n \n+import games.strategy.engine.data.GameData;\n import games.strategy.engine.framework.GameDataFileUtils;\n import games.strategy.triplea.settings.ClientSetting;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n import java.io.File;\n+import java.time.ZonedDateTime;\n+import java.util.StringJoiner;\n import javax.swing.JFileChooser;\n-import javax.swing.filechooser.FileFilter;\n \n /** A file chooser for save games. Defaults to the user's configured save game folder. */\n public final class SaveGameFileChooser extends JFileChooser {\n   private static final long serialVersionUID = 1548668790891292106L;\n \n-  private static SaveGameFileChooser instance;\n-\n-  private SaveGameFileChooser() {\n-    setFileFilter(newGameDataFileFilter());\n-    final File saveGamesFolder = ClientSetting.saveGamesFolderPath.getValueOrThrow().toFile();\n-    ensureDirectoryExists(saveGamesFolder);\n-    setCurrentDirectory(saveGamesFolder);\n-  }\n-\n-  public static SaveGameFileChooser getInstance() {\n-    if (instance == null) {\n-      instance = new SaveGameFileChooser();\n+  /**\n+   * Displays a file chooser dialog for the user to select the file to which the current game should\n+   * be saved.\n+   *\n+   * @param frame The owner of the file chooser dialog; may be {@code null}.\n+   * @return The file to which the current game should be saved or {@code null} if the user\n+   *     cancelled the operation.\n+   */\n+  public static File getSaveGameLocation(final Frame frame, final GameData gameData) {\n+    final FileDialog fileDialog = new FileDialog(frame);\n+    fileDialog.setMode(FileDialog.SAVE);\n+    fileDialog.setDirectory(ClientSetting.saveGamesFolderPath.getValueOrThrow().toString());\n+    fileDialog.setFilenameFilter((dir, name) -> GameDataFileUtils.isCandidateFileName(name));\n+    fileDialog.setFile(getSaveGameName(gameData));\n+\n+    fileDialog.setVisible(true);\n+    final String fileName = fileDialog.getFile();\n+    if (fileName == null) {\n+      return null;\n     }\n-    return instance;\n-  }\n \n-  private static void ensureDirectoryExists(final File f) {\n-    if (!f.mkdirs() && !f.exists()) {\n-      throw new IllegalStateException(\"Unable to create save game folder: \" + f.getAbsolutePath());\n-    }\n+    // If the user selects a filename that already exists,\n+    // the AWT Dialog will ask the user for confirmation\n+    return new File(fileDialog.getDirectory(), GameDataFileUtils.addExtensionIfAbsent(fileName));\n   }\n \n-  private static FileFilter newGameDataFileFilter() {\n-    return new FileFilter() {\n-      @Override\n-      public boolean accept(final File file) {\n-        return file.isDirectory() || GameDataFileUtils.isCandidateFileName(file.getName());\n-      }\n+  private static String getSaveGameName(final GameData gameData) {\n+    return gameData.getSaveGameFileName().orElse(formatGameName(gameData.getGameName()));\n+  }\n \n-      @Override\n-      public String getDescription() {\n-        return \"Saved Games, *\" + GameDataFileUtils.getExtension();\n-      }\n-    };\n+  private static String formatGameName(final String gameName) {\n+    final ZonedDateTime now = ZonedDateTime.now();\n+    return new StringJoiner(\"-\")\n+        .add(String.valueOf(now.getYear()))\n+        .add(String.valueOf(now.getMonthValue()))\n+        .add(String.valueOf(now.getDayOfMonth()))\n+        .add(gameName.replaceAll(\" \", \"-\") + GameDataFileUtils.getExtension())", "originalCommit": "5bee76ed6a6b6369dc62a0f5e19de7adc0f381be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzk2NA==", "url": "https://github.com/triplea-game/triplea/pull/6143#discussion_r405113964", "bodyText": "It's better to use built-in items in general, but primitive and simple has it's virtue as well. IMO it's a wash here, there is nothing difficult to understand about this code. Meanwhile there is a format code that ties the year to the calendar week, which causes Dec-31 to flip to Jan-1, so there is some subtlety/caution to be used there.", "author": "DanVanAtta", "createdAt": "2020-04-07T21:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5MDkxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgwMTg1NA==", "url": "https://github.com/triplea-game/triplea/pull/6143#discussion_r404801854", "bodyText": "Remember our discussion about whether to use\nArrays.stream(fileDialog.getFiles()).findAny().orElseThrow()\n?\nBecause of the extension thingy it would be a little bit impractical to use this approach here, but without this detail it would save a couple lines of code.", "author": "RoiEXLab", "createdAt": "2020-04-07T13:19:28Z", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/SaveGameFileChooser.java", "diffHunk": "@@ -1,48 +1,56 @@\n package games.strategy.engine.framework.ui;\n \n+import games.strategy.engine.data.GameData;\n import games.strategy.engine.framework.GameDataFileUtils;\n import games.strategy.triplea.settings.ClientSetting;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n import java.io.File;\n+import java.time.ZonedDateTime;\n+import java.util.StringJoiner;\n import javax.swing.JFileChooser;\n-import javax.swing.filechooser.FileFilter;\n \n /** A file chooser for save games. Defaults to the user's configured save game folder. */\n public final class SaveGameFileChooser extends JFileChooser {\n   private static final long serialVersionUID = 1548668790891292106L;\n \n-  private static SaveGameFileChooser instance;\n-\n-  private SaveGameFileChooser() {\n-    setFileFilter(newGameDataFileFilter());\n-    final File saveGamesFolder = ClientSetting.saveGamesFolderPath.getValueOrThrow().toFile();\n-    ensureDirectoryExists(saveGamesFolder);\n-    setCurrentDirectory(saveGamesFolder);\n-  }\n-\n-  public static SaveGameFileChooser getInstance() {\n-    if (instance == null) {\n-      instance = new SaveGameFileChooser();\n+  /**\n+   * Displays a file chooser dialog for the user to select the file to which the current game should\n+   * be saved.\n+   *\n+   * @param frame The owner of the file chooser dialog; may be {@code null}.\n+   * @return The file to which the current game should be saved or {@code null} if the user\n+   *     cancelled the operation.\n+   */\n+  public static File getSaveGameLocation(final Frame frame, final GameData gameData) {\n+    final FileDialog fileDialog = new FileDialog(frame);\n+    fileDialog.setMode(FileDialog.SAVE);\n+    fileDialog.setDirectory(ClientSetting.saveGamesFolderPath.getValueOrThrow().toString());\n+    fileDialog.setFilenameFilter((dir, name) -> GameDataFileUtils.isCandidateFileName(name));\n+    fileDialog.setFile(getSaveGameName(gameData));\n+\n+    fileDialog.setVisible(true);\n+    final String fileName = fileDialog.getFile();\n+    if (fileName == null) {\n+      return null;\n     }\n-    return instance;\n-  }\n \n-  private static void ensureDirectoryExists(final File f) {\n-    if (!f.mkdirs() && !f.exists()) {\n-      throw new IllegalStateException(\"Unable to create save game folder: \" + f.getAbsolutePath());\n-    }\n+    // If the user selects a filename that already exists,\n+    // the AWT Dialog will ask the user for confirmation\n+    return new File(fileDialog.getDirectory(), GameDataFileUtils.addExtensionIfAbsent(fileName));", "originalCommit": "5bee76ed6a6b6369dc62a0f5e19de7adc0f381be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNDYxMg==", "url": "https://github.com/triplea-game/triplea/pull/6143#discussion_r405114612", "bodyText": "I don't recall that discussion. It seems we are maybe picking on moved code. If there is a reasonable improvement, IMO follow-up with it.", "author": "DanVanAtta", "createdAt": "2020-04-07T21:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgwMTg1NA=="}], "type": "inlineReview", "revised_code": null}]}