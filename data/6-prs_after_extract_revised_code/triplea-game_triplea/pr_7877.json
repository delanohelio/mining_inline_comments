{"pr_number": 7877, "pr_title": "Roll dice step", "pr_createdAt": "2020-10-11T22:20:23Z", "pr_url": "https://github.com/triplea-game/triplea/pull/7877", "timeline": [{"oid": "fb0b23de7b0a1d2202f5589ab722533acafc3401", "url": "https://github.com/triplea-game/triplea/commit/fb0b23de7b0a1d2202f5589ab722533acafc3401", "message": "Create the RollDice battle step", "committedDate": "2020-10-11T22:08:25Z", "type": "commit"}, {"oid": "be01d6f62befa45c7a13ddccbe9e2241abd97dec", "url": "https://github.com/triplea-game/triplea/commit/be01d6f62befa45c7a13ddccbe9e2241abd97dec", "message": "Add dice roll battle step", "committedDate": "2020-10-11T22:19:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3ODg5Mw==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r502978893", "bodyText": "Is the comment used to group the enums?\nA bit nitpicky, I'd recommend to avoid it. As a casual reader here, it does not make a ton of sense what the comment is delimiting. It's also a bit of an issue for maintenance, does every line break indicate a new group? Are the groups all up to date?\nIf needing to mark certain enum values, there should be other ways to do it. For example, one can add name patterns, like a prefix, add flags, or use additional enum types, or convert the enums to strings.", "author": "DanVanAtta", "createdAt": "2020-10-11T23:11:06Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java", "diffHunk": "@@ -75,6 +75,9 @@\n     OFFENSIVE_GENERAL_RETREAT,\n     STALEMATE_BATTLE_END_CHECK,\n     SUB_DEFENSIVE_RETREAT_AFTER_BATTLE,\n+\n+    // Fire Round steps", "originalCommit": "be01d6f62befa45c7a13ddccbe9e2241abd97dec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4fa0cea7e39fe4374ecca63008b59fa84b7daf5", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java\nindex 399f1c80a..3bb1724bc 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/BattleStep.java\n\n@@ -76,8 +76,7 @@ public interface BattleStep extends IExecutable {\n     STALEMATE_BATTLE_END_CHECK,\n     SUB_DEFENSIVE_RETREAT_AFTER_BATTLE,\n \n-    // Fire Round steps\n-    ROLL_DICE,\n+    FIRE_ROUND_ROLL_DICE,\n   }\n \n   /** @return a list of names that will be shown in {@link games.strategy.triplea.ui.BattlePanel} */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTA3Nw==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r502979077", "bodyText": "The uncertainty in this comment is interesting  \"makes the text feel redundant\"\nYoda principle: \"do or do not, there is no try\"\nI recommend making this comment more direct, the code is deterministic, the comment should be as well.", "author": "DanVanAtta", "createdAt": "2020-10-11T23:12:56Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.FIRE_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/** Step where the dice are rolled for the firing units */\n+@RequiredArgsConstructor\n+public class RollDice implements BattleStep {\n+\n+  private static final long serialVersionUID = 3248059314449726590L;\n+\n+  @Getter private final BattleState battleState;\n+\n+  /** The side of the firing player */\n+  @Getter private final BattleState.Side side;\n+\n+  @Getter private final FiringGroup firingGroup;\n+\n+  private final FireRoundState fireRoundState;\n+\n+  private final BiFunction<IDelegateBridge, RollDice, DiceRoll> rollDice;\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of(getName());\n+  }\n+\n+  private String getName() {\n+    return battleState.getPlayer(side).getName()\n+        // displaying UNITS makes the text feel redundant so hide it if that is the group name", "originalCommit": "be01d6f62befa45c7a13ddccbe9e2241abd97dec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4fa0cea7e39fe4374ecca63008b59fa84b7daf5", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\nindex 32f4031c8..a707cd118 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\n\n@@ -38,20 +38,24 @@ public class RollDice implements BattleStep {\n \n   private String getName() {\n     return battleState.getPlayer(side).getName()\n-        // displaying UNITS makes the text feel redundant so hide it if that is the group name\n+        // If the firing group's name is the default \"UNITS\", then the displayed string will be\n+        // \"Germans units fire\". In that case, it would be better to say \"Germans fire\".\n+        // If the firing group's name is something else, then the displayed string will be\n+        // something like \"Germans submarines fire\" which is ok.\n         + (firingGroup.getDisplayName().equals(UNITS) ? \"\" : \" \" + firingGroup.getDisplayName())\n         + FIRE_SUFFIX;\n   }\n \n   @Override\n   public Order getOrder() {\n-    return Order.ROLL_DICE;\n+    return Order.FIRE_ROUND_ROLL_DICE;\n   }\n \n   @Override\n   public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n \n-    // remove any target unit that was hit by other units\n+    // retain the targets that are still alive since the targets might have been shot\n+    // in an earlier firing round\n     firingGroup.retainAliveTargets(battleState.filterUnits(ALIVE, side.getOpposite()));\n \n     final DiceRoll dice = rollDice.apply(bridge, this);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTIyMg==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r502979222", "bodyText": "Not for this PR, but you considered making the display name an object? I wonder if there could be some brittleness with the comparison of strings here. It also seems like we are violating SRP, the display string is serving double duty to both indicate a type and also used for display purpose.", "author": "DanVanAtta", "createdAt": "2020-10-11T23:14:32Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.FIRE_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/** Step where the dice are rolled for the firing units */\n+@RequiredArgsConstructor\n+public class RollDice implements BattleStep {\n+\n+  private static final long serialVersionUID = 3248059314449726590L;\n+\n+  @Getter private final BattleState battleState;\n+\n+  /** The side of the firing player */\n+  @Getter private final BattleState.Side side;\n+\n+  @Getter private final FiringGroup firingGroup;\n+\n+  private final FireRoundState fireRoundState;\n+\n+  private final BiFunction<IDelegateBridge, RollDice, DiceRoll> rollDice;\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of(getName());\n+  }\n+\n+  private String getName() {\n+    return battleState.getPlayer(side).getName()\n+        // displaying UNITS makes the text feel redundant so hide it if that is the group name\n+        + (firingGroup.getDisplayName().equals(UNITS) ? \"\" : \" \" + firingGroup.getDisplayName())", "originalCommit": "be01d6f62befa45c7a13ddccbe9e2241abd97dec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4fa0cea7e39fe4374ecca63008b59fa84b7daf5", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\nindex 32f4031c8..a707cd118 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\n\n@@ -38,20 +38,24 @@ public class RollDice implements BattleStep {\n \n   private String getName() {\n     return battleState.getPlayer(side).getName()\n-        // displaying UNITS makes the text feel redundant so hide it if that is the group name\n+        // If the firing group's name is the default \"UNITS\", then the displayed string will be\n+        // \"Germans units fire\". In that case, it would be better to say \"Germans fire\".\n+        // If the firing group's name is something else, then the displayed string will be\n+        // something like \"Germans submarines fire\" which is ok.\n         + (firingGroup.getDisplayName().equals(UNITS) ? \"\" : \" \" + firingGroup.getDisplayName())\n         + FIRE_SUFFIX;\n   }\n \n   @Override\n   public Order getOrder() {\n-    return Order.ROLL_DICE;\n+    return Order.FIRE_ROUND_ROLL_DICE;\n   }\n \n   @Override\n   public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n \n-    // remove any target unit that was hit by other units\n+    // retain the targets that are still alive since the targets might have been shot\n+    // in an earlier firing round\n     firingGroup.retainAliveTargets(battleState.filterUnits(ALIVE, side.getOpposite()));\n \n     final DiceRoll dice = rollDice.apply(bridge, this);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTQ4OA==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r502979488", "bodyText": "Could we remove the comment by updating the name of the method? EG:\nfiringGroup.removeUnitsThatWereHit(....);\n\nWe might want to consider more than that. Offhand I'm not sure just reading this line makes sense. We are getting the alive units of the other side and keeping only those units from within the current firing group. The fact we are getting the other side and are operating on the current firing group seems confusing. WDYT?", "author": "DanVanAtta", "createdAt": "2020-10-11T23:16:47Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.FIRE_SUFFIX;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import games.strategy.triplea.delegate.ExecutionStack;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.BattleStep;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/** Step where the dice are rolled for the firing units */\n+@RequiredArgsConstructor\n+public class RollDice implements BattleStep {\n+\n+  private static final long serialVersionUID = 3248059314449726590L;\n+\n+  @Getter private final BattleState battleState;\n+\n+  /** The side of the firing player */\n+  @Getter private final BattleState.Side side;\n+\n+  @Getter private final FiringGroup firingGroup;\n+\n+  private final FireRoundState fireRoundState;\n+\n+  private final BiFunction<IDelegateBridge, RollDice, DiceRoll> rollDice;\n+\n+  @Override\n+  public List<String> getNames() {\n+    return List.of(getName());\n+  }\n+\n+  private String getName() {\n+    return battleState.getPlayer(side).getName()\n+        // displaying UNITS makes the text feel redundant so hide it if that is the group name\n+        + (firingGroup.getDisplayName().equals(UNITS) ? \"\" : \" \" + firingGroup.getDisplayName())\n+        + FIRE_SUFFIX;\n+  }\n+\n+  @Override\n+  public Order getOrder() {\n+    return Order.ROLL_DICE;\n+  }\n+\n+  @Override\n+  public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n+\n+    // remove any target unit that was hit by other units\n+    firingGroup.retainAliveTargets(battleState.filterUnits(ALIVE, side.getOpposite()));", "originalCommit": "be01d6f62befa45c7a13ddccbe9e2241abd97dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMzI0MA==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r503023240", "bodyText": "I've made the comment longer.  The name of the method is ok, though.  This is retaining targets which are the units that are being shot at.  So the targets are from the opposite side.", "author": "trevan", "createdAt": "2020-10-12T03:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d4fa0cea7e39fe4374ecca63008b59fa84b7daf5", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\nindex 32f4031c8..a707cd118 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollDice.java\n\n@@ -38,20 +38,24 @@ public class RollDice implements BattleStep {\n \n   private String getName() {\n     return battleState.getPlayer(side).getName()\n-        // displaying UNITS makes the text feel redundant so hide it if that is the group name\n+        // If the firing group's name is the default \"UNITS\", then the displayed string will be\n+        // \"Germans units fire\". In that case, it would be better to say \"Germans fire\".\n+        // If the firing group's name is something else, then the displayed string will be\n+        // something like \"Germans submarines fire\" which is ok.\n         + (firingGroup.getDisplayName().equals(UNITS) ? \"\" : \" \" + firingGroup.getDisplayName())\n         + FIRE_SUFFIX;\n   }\n \n   @Override\n   public Order getOrder() {\n-    return Order.ROLL_DICE;\n+    return Order.FIRE_ROUND_ROLL_DICE;\n   }\n \n   @Override\n   public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n \n-    // remove any target unit that was hit by other units\n+    // retain the targets that are still alive since the targets might have been shot\n+    // in an earlier firing round\n     firingGroup.retainAliveTargets(battleState.filterUnits(ALIVE, side.getOpposite()));\n \n     final DiceRoll dice = rollDice.apply(bridge, this);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTU4Ng==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r502979586", "bodyText": "Is RollNormal an equivalent thing to \"RollGeneralCombat\" ?\nI wonder if we are mixing \"normal\" and \"general\" as synonymous terms.", "author": "DanVanAtta", "createdAt": "2020-10-11T23:17:44Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollNormal.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import java.util.function.BiFunction;\n+\n+/** Rolls dice for normal (basically, anything that isn't AA) dice requests */\n+public class RollNormal implements BiFunction<IDelegateBridge, RollDice, DiceRoll> {", "originalCommit": "be01d6f62befa45c7a13ddccbe9e2241abd97dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMzgwOA==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r503023808", "bodyText": "No, normal and general are not synonymous.  Though I'm open to new names.  General is for a phase in the combat.  But normal is for the type of unit.  You have AA/Targeted dice requests which are rolled during the AA phase.  And then you have normal dice requests which rolled in all the other phases (bombard, first strike, and general).  The use of normal comes from TotalPowerAndTotalRolls.  It uses \"normal\" and \"aa\" there in that manner and I've been following it here since I didn't think a class called Roll would be ok.", "author": "trevan", "createdAt": "2020-10-12T03:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3ODg2Nw==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r503578867", "bodyText": "Perhaps then MainBattleRoll as a more descriptive name?\nIn general, \"general\", \"normal\", and \"standard\" are context dependent descriptors and maintainers and other developers simply won't have that context without going through some work. Saving any amount of work to make code more understandable leads to more maintainable code.\nOther suggestions: MainRoll, StandardRoll", "author": "DanVanAtta", "createdAt": "2020-10-12T23:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDYxNw==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r503580617", "bodyText": "Main sounds good.  I renamed it to RollMainDice.", "author": "trevan", "createdAt": "2020-10-12T23:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "48eacb60f57d1d7ee5374e293c80fdad3f163192", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollNormal.java b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollMainDice.java\nsimilarity index 93%\nrename from game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollNormal.java\nrename to game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollMainDice.java\nindex e44905782..5e7c89849 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollNormal.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollMainDice.java\n\n@@ -8,7 +8,7 @@ import games.strategy.triplea.delegate.DiceRoll;\n import java.util.function.BiFunction;\n \n /** Rolls dice for normal (basically, anything that isn't AA) dice requests */\n-public class RollNormal implements BiFunction<IDelegateBridge, RollDice, DiceRoll> {\n+public class RollMainDice implements BiFunction<IDelegateBridge, RollDice, DiceRoll> {\n \n   @Override\n   public DiceRoll apply(final IDelegateBridge bridge, final RollDice step) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTY5Mg==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r502979692", "bodyText": "side-question, any plans to refactor the rollDice API in the future? Seemingly we should be able to pass a step and bridge to it and little else. It's a bit surprising there is enough data between the 2 or 3 variables to supply the nearly dozen parameters.", "author": "DanVanAtta", "createdAt": "2020-10-11T23:18:51Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollNormal.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import java.util.function.BiFunction;\n+\n+/** Rolls dice for normal (basically, anything that isn't AA) dice requests */\n+public class RollNormal implements BiFunction<IDelegateBridge, RollDice, DiceRoll> {\n+\n+  @Override\n+  public DiceRoll apply(final IDelegateBridge bridge, final RollDice step) {\n+    return DiceRoll.rollDice(", "originalCommit": "be01d6f62befa45c7a13ddccbe9e2241abd97dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyNDUwNQ==", "url": "https://github.com/triplea-game/triplea/pull/7877#discussion_r503024505", "bodyText": "Yes, I do plan to refactor it.  I'd actually like to just have one rollDice api instead of a \"normal\" and an \"aa\" roll dice api.\nThe refactoring for TotalPowerAndTotalRolls is the start of that work.  The list of parameters should shrink as I group them into more related objects.", "author": "trevan", "createdAt": "2020-10-12T03:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3OTY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "48eacb60f57d1d7ee5374e293c80fdad3f163192", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollNormal.java b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollMainDice.java\nsimilarity index 93%\nrename from game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollNormal.java\nrename to game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollMainDice.java\nindex e44905782..5e7c89849 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollNormal.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/RollMainDice.java\n\n@@ -8,7 +8,7 @@ import games.strategy.triplea.delegate.DiceRoll;\n import java.util.function.BiFunction;\n \n /** Rolls dice for normal (basically, anything that isn't AA) dice requests */\n-public class RollNormal implements BiFunction<IDelegateBridge, RollDice, DiceRoll> {\n+public class RollMainDice implements BiFunction<IDelegateBridge, RollDice, DiceRoll> {\n \n   @Override\n   public DiceRoll apply(final IDelegateBridge bridge, final RollDice step) {\n"}}, {"oid": "d4fa0cea7e39fe4374ecca63008b59fa84b7daf5", "url": "https://github.com/triplea-game/triplea/commit/d4fa0cea7e39fe4374ecca63008b59fa84b7daf5", "message": "Improve comments and enum name", "committedDate": "2020-10-12T03:38:03Z", "type": "commit"}, {"oid": "48eacb60f57d1d7ee5374e293c80fdad3f163192", "url": "https://github.com/triplea-game/triplea/commit/48eacb60f57d1d7ee5374e293c80fdad3f163192", "message": "Rename Normal Roll to RollMainDice", "committedDate": "2020-10-12T23:17:21Z", "type": "commit"}]}