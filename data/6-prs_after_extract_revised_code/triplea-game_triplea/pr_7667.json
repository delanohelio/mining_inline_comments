{"pr_number": 7667, "pr_title": "Various Simplification to Map Making tools", "pr_createdAt": "2020-09-15T06:03:07Z", "pr_url": "https://github.com/triplea-game/triplea/pull/7667", "timeline": [{"oid": "926f69899e10dae4a9af5a6088c41ed9a105459b", "url": "https://github.com/triplea-game/triplea/commit/926f69899e10dae4a9af5a6088c41ed9a105459b", "message": "Remove file menu from map creator window\n\n- The window is easy enough to close by clicking the window's 'X' icon", "committedDate": "2020-09-15T05:01:56Z", "type": "commit"}, {"oid": "cc2013ce805fe0941a54c271fc52c7965f49cfcb", "url": "https://github.com/triplea-game/triplea/commit/cc2013ce805fe0941a54c271fc52c7965f49cfcb", "message": "Prune map creator welcome text", "committedDate": "2020-09-15T05:19:10Z", "type": "commit"}, {"oid": "8d6ff5f29cc28e1c0e4ff8f2eaf4b8bedb0a4365", "url": "https://github.com/triplea-game/triplea/commit/8d6ff5f29cc28e1c0e4ff8f2eaf4b8bedb0a4365", "message": "Rename \"run map creator\" button to \"map creator tools\"", "committedDate": "2020-09-15T05:19:45Z", "type": "commit"}, {"oid": "b36a0666168d0ce781cfdb92044e58ec1f440f9a", "url": "https://github.com/triplea-game/triplea/commit/b36a0666168d0ce781cfdb92044e58ec1f440f9a", "message": "Extract map maker panel construction to factory classes", "committedDate": "2020-09-15T05:30:56Z", "type": "commit"}, {"oid": "b8d39253484e07923cadf9d3e88465c491029a9e", "url": "https://github.com/triplea-game/triplea/commit/b8d39253484e07923cadf9d3e88465c491029a9e", "message": "Simplify map maker UI and tool instantiation\n\n1) Tools are no longer used as CLI, the args list is always\n  empty, we can thus simplify the 'handleArgs' methods of each\n  of the tools classes.\n\n2) Extract common functionality to get map location from system\n property to a 'MapFolderSystemProperty' class.\n\n3) Simplify how buttons are created, use JButtonBuilder", "committedDate": "2020-09-15T05:59:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODgxMQ==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r488408811", "bodyText": "Method build has 140 lines of code (exceeds 50 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-09-15T06:09:13Z", "path": "game-core/src/main/java/tools/map/making/ui/properties/MapPropertiesPanel.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package tools.map.making.ui.properties;\n+\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.image.UnitImageFactory;\n+import java.awt.Dimension;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.io.File;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.awt.OpenFileUtility;\n+import org.triplea.swing.SwingAction;\n+import tools.image.FileSave;\n+import tools.util.ToolArguments;\n+\n+@UtilityClass\n+public class MapPropertiesPanel {\n+  private static long memoryInBytes = Runtime.getRuntime().maxMemory();\n+  private static File mapFolderLocation = null;\n+  private static double unitZoom = 0.75;\n+  private static int unitWidth = UnitImageFactory.DEFAULT_UNIT_ICON_SIZE;\n+  private static int unitHeight = UnitImageFactory.DEFAULT_UNIT_ICON_SIZE;\n+\n+  public JPanel build() {", "originalCommit": "b8d39253484e07923cadf9d3e88465c491029a9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODgxNA==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r488408814", "bodyText": "Method handleSystemProperties has a Cognitive Complexity of 13 (exceeds 7 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-09-15T06:09:13Z", "path": "game-core/src/main/java/tools/image/AutoPlacementFinder.java", "diffHunk": "@@ -462,102 +462,8 @@ private static boolean intersectsOneOf(\n     return false;\n   }\n \n-  private static String getValue(final String arg) {\n-    final int index = arg.indexOf('=');\n-    if (index == -1) {\n-      return \"\";\n-    }\n-    return arg.substring(index + 1);\n-  }\n-\n-  private void handleCommandLineArgs(final String[] args) {\n-    final String[] properties = getProperties();\n-    if (args.length == 1) {\n-      final String value;\n-      if (args[0].startsWith(ToolArguments.UNIT_ZOOM)) {\n-        value = getValue(args[0]);\n-      } else {\n-        value = args[0];\n-      }\n-      try {\n-        Double.parseDouble(value);\n-        System.setProperty(ToolArguments.UNIT_ZOOM, value);\n-      } catch (final Exception ex) {\n-        // ignore malformed input\n-      }\n-    } else if (args.length == 2) {\n-      final String value0;\n-      if (args[0].startsWith(ToolArguments.UNIT_WIDTH)) {\n-        value0 = getValue(args[0]);\n-      } else {\n-        value0 = args[0];\n-      }\n-      try {\n-        Integer.parseInt(value0);\n-        System.setProperty(ToolArguments.UNIT_WIDTH, value0);\n-      } catch (final Exception ex) {\n-        // ignore malformed input\n-      }\n-      final String value1;\n-      if (args[0].startsWith(ToolArguments.UNIT_HEIGHT)) {\n-        value1 = getValue(args[1]);\n-      } else {\n-        value1 = args[1];\n-      }\n-      try {\n-        Integer.parseInt(value1);\n-        System.setProperty(ToolArguments.UNIT_HEIGHT, value1);\n-      } catch (final Exception ex) {\n-        // ignore malformed input\n-      }\n-    }\n-    boolean usagePrinted = false;\n-    for (final String arg2 : args) {\n-      boolean found = false;\n-      String arg = arg2;\n-      final int indexOf = arg.indexOf('=');\n-      if (indexOf > 0) {\n-        arg = arg.substring(0, indexOf);\n-        for (final String propertie : properties) {\n-          if (arg.equals(propertie)) {\n-            final String value = getValue(arg2);\n-            System.setProperty(propertie, value);\n-            log.info(propertie + \":\" + value);\n-            found = true;\n-            break;\n-          }\n-        }\n-      }\n-      if (!found) {\n-        log.info(\"Unrecognized:\" + arg2);\n-        if (!usagePrinted) {\n-          usagePrinted = true;\n-          log.info(\n-              \"Arguments\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.MAP_FOLDER\n-                  + \"=<FILE_PATH>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_ZOOM\n-                  + \"=<UNIT_ZOOM_LEVEL>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_WIDTH\n-                  + \"=<UNIT_WIDTH>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_HEIGHT\n-                  + \"=<UNIT_HEIGHT>\\r\\n\");\n-        }\n-      }\n-    }\n-    final String folderString = System.getProperty(ToolArguments.MAP_FOLDER);\n-    if (folderString != null && folderString.length() > 0) {\n-      final File mapFolder = new File(folderString);\n-      if (mapFolder.exists()) {\n-        mapFolderLocation = mapFolder;\n-      } else {\n-        log.info(\"Could not find directory: \" + folderString);\n-      }\n-    }\n+  private void handleSystemProperties() {", "originalCommit": "b8d39253484e07923cadf9d3e88465c491029a9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODgyMA==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r488408820", "bodyText": "Method handleSystemProperties has a Cognitive Complexity of 12 (exceeds 7 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-09-15T06:09:13Z", "path": "game-core/src/main/java/tools/map/making/PlacementPicker.java", "diffHunk": "@@ -642,108 +634,12 @@ private String getUnitsScale() {\n     }\n   }\n \n-  private static String getValue(final String arg) {\n-    final int index = arg.indexOf('=');\n-    if (index == -1) {\n-      return \"\";\n-    }\n-    return arg.substring(index + 1);\n-  }\n-\n-  private void handleCommandLineArgs(final String[] args) {\n-    final String[] properties = getProperties();\n-    if (args.length == 1) {\n-      final String value;\n-      if (args[0].startsWith(ToolArguments.UNIT_ZOOM)) {\n-        value = getValue(args[0]);\n-      } else {\n-        value = args[0];\n-      }\n-      try {\n-        Double.parseDouble(value);\n-        System.setProperty(ToolArguments.UNIT_ZOOM, value);\n-      } catch (final Exception ex) {\n-        // ignore malformed input\n-      }\n-    } else if (args.length == 2) {\n-      final String value0;\n-      if (args[0].startsWith(ToolArguments.UNIT_WIDTH)) {\n-        value0 = getValue(args[0]);\n-      } else {\n-        value0 = args[0];\n-      }\n-      try {\n-        Integer.parseInt(value0);\n-        System.setProperty(ToolArguments.UNIT_WIDTH, value0);\n-      } catch (final Exception ex) {\n-        // ignore malformed input\n-      }\n-      final String value1;\n-      if (args[0].startsWith(ToolArguments.UNIT_HEIGHT)) {\n-        value1 = getValue(args[1]);\n-      } else {\n-        value1 = args[1];\n-      }\n-      try {\n-        Integer.parseInt(value1);\n-        System.setProperty(ToolArguments.UNIT_HEIGHT, value1);\n-      } catch (final Exception ex) {\n-        // ignore malformed input\n-      }\n-    }\n-    boolean usagePrinted = false;\n-    for (final String arg2 : args) {\n-      boolean found = false;\n-      String arg = arg2;\n-      final int indexOf = arg.indexOf('=');\n-      if (indexOf > 0) {\n-        arg = arg.substring(0, indexOf);\n-        for (final String propertie : properties) {\n-          if (arg.equals(propertie)) {\n-            final String value = getValue(arg2);\n-            System.setProperty(propertie, value);\n-            log.info(propertie + \":\" + value);\n-            found = true;\n-            break;\n-          }\n-        }\n-      }\n-      if (!found) {\n-        log.info(\"Unrecogized:\" + arg2);\n-        if (!usagePrinted) {\n-          usagePrinted = true;\n-          log.info(\n-              \"Arguments\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.MAP_FOLDER\n-                  + \"=<FILE_PATH>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_ZOOM\n-                  + \"=<UNIT_ZOOM_LEVEL>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_WIDTH\n-                  + \"=<UNIT_WIDTH>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_HEIGHT\n-                  + \"=<UNIT_HEIGHT>\\r\\n\");\n-        }\n-      }\n-    }\n-    final String folderString = System.getProperty(ToolArguments.MAP_FOLDER);\n-    if (folderString != null && folderString.length() > 0) {\n-      final File mapFolder = new File(folderString);\n-      if (mapFolder.exists()) {\n-        mapFolderLocation = mapFolder;\n-      } else {\n-        log.info(\"Could not find directory: \" + folderString);\n-      }\n-    }\n+  private void handleSystemProperties() {", "originalCommit": "b8d39253484e07923cadf9d3e88465c491029a9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODgyMw==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r488408823", "bodyText": "Method handleSystemProperties has a Cognitive Complexity of 12 (exceeds 7 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-09-15T06:09:14Z", "path": "game-core/src/main/java/tools/map/making/MapPropertiesMaker.java", "diffHunk": "@@ -544,64 +545,8 @@ private String getOutPutString() {\n     }\n   }\n \n-  private static String getValue(final String arg) {\n-    final int index = arg.indexOf('=');\n-    if (index == -1) {\n-      return \"\";\n-    }\n-    return arg.substring(index + 1);\n-  }\n-\n-  private void handleCommandLineArgs(final String[] args) {\n-    final String[] properties = getProperties();\n-    boolean usagePrinted = false;\n-    for (final String arg2 : args) {\n-      boolean found = false;\n-      String arg = arg2;\n-      final int indexOf = arg.indexOf('=');\n-      if (indexOf > 0) {\n-        arg = arg.substring(0, indexOf);\n-        for (final String props : properties) {\n-          if (arg.equals(props)) {\n-            final String value = getValue(arg2);\n-            System.setProperty(props, value);\n-            log.info(props + \":\" + value);\n-            found = true;\n-            break;\n-          }\n-        }\n-      }\n-      if (!found) {\n-        log.info(\"Unrecogized:\" + arg2);\n-        if (!usagePrinted) {\n-          usagePrinted = true;\n-          log.info(\n-              \"Arguments\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.MAP_FOLDER\n-                  + \"=<FILE_PATH>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_ZOOM\n-                  + \"=<UNIT_ZOOM_LEVEL>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_WIDTH\n-                  + \"=<UNIT_WIDTH>\\r\\n\"\n-                  + \"   \"\n-                  + ToolArguments.UNIT_HEIGHT\n-                  + \"=<UNIT_HEIGHT>\\r\\n\");\n-        }\n-      }\n-    }\n-    // now account for anything set by -D\n-    final String folderString = System.getProperty(ToolArguments.MAP_FOLDER);\n-    if (folderString != null && folderString.length() > 0) {\n-      final File mapFolder = new File(folderString);\n-      if (mapFolder.exists()) {\n-        mapFolderLocation = mapFolder;\n-      } else {\n-        log.info(\"Could not find directory: \" + folderString);\n-      }\n-    }\n+  private void handleSystemProperties() {", "originalCommit": "b8d39253484e07923cadf9d3e88465c491029a9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "b7106ae180416e84522fa7faa2adb67f614b2197", "url": "https://github.com/triplea-game/triplea/commit/b7106ae180416e84522fa7faa2adb67f614b2197", "message": "Remove unused methods", "committedDate": "2020-09-16T00:12:37Z", "type": "commit"}, {"oid": "f580a138b68f5c75cf4308a43e16c6f602a37e51", "url": "https://github.com/triplea-game/triplea/commit/f580a138b68f5c75cf4308a43e16c6f602a37e51", "message": "Auto-Formatting", "committedDate": "2020-09-16T00:14:35Z", "type": "commit"}, {"oid": "b41acfbb265abee9ae954f88265849e3d0f87eba", "url": "https://github.com/triplea-game/triplea/commit/b41acfbb265abee9ae954f88265849e3d0f87eba", "message": "Merge remote-tracking branch 'origin/master' into map-maker", "committedDate": "2020-09-16T01:46:56Z", "type": "commit"}, {"oid": "277022c490a8923cb8b39137b4082b1b4dde8c29", "url": "https://github.com/triplea-game/triplea/commit/277022c490a8923cb8b39137b4082b1b4dde8c29", "message": "Merge remote-tracking branch 'origin/map-maker' into map-maker", "committedDate": "2020-09-16T01:47:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDA1OA==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r489114058", "bodyText": "Codacy found an issue: Document empty method body", "author": "DanVanAtta", "createdAt": "2020-09-16T01:51:55Z", "path": "game-core/src/main/java/tools/map/making/ui/properties/MapPropertiesPanel.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package tools.map.making.ui.properties;\n+\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.image.UnitImageFactory;\n+import java.awt.Dimension;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.io.File;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.awt.OpenFileUtility;\n+import org.triplea.swing.SwingAction;\n+import tools.image.FileSave;\n+import tools.util.ToolArguments;\n+\n+@UtilityClass\n+public class MapPropertiesPanel {\n+  private static long memoryInBytes = Runtime.getRuntime().maxMemory();\n+  private static File mapFolderLocation = null;\n+  private static double unitZoom = 0.75;\n+  private static int unitWidth = UnitImageFactory.DEFAULT_UNIT_ICON_SIZE;\n+  private static int unitHeight = UnitImageFactory.DEFAULT_UNIT_ICON_SIZE;\n+\n+  public JPanel build() {\n+    final JPanel panel = new JPanel();\n+    panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));\n+    panel.add(Box.createVerticalStrut(30));\n+    final JTextArea text = new JTextArea(12, 10);\n+    text.setWrapStyleWord(true);\n+    text.setLineWrap(true);\n+    text.setText(\n+        \"Welcome to Veqryn's map creator program for TripleA.\"\n+            + \"\\n\\nBefore you begin, go create a folder in your directory: \"\n+            + \"Users\\\\yourname\\\\triplea\\\\maps\"\n+            + \"\\nName the folder with a short name of your map, do not use any special characters \"\n+            + \"in the name.\"\n+            + \"\\nNext, create 5 folders inside your map folder, with these names: \"\n+            + \"flags, units, baseTiles, reliefTiles, games\"\n+            + \"\\nThen, create a text file and rename it \\\"map.properties\\\" or use one created by \"\n+            + \"this utility.\"\n+            + \"\\n\\nTo start the Map Utilities, have a png image of your map with just the \"\n+            + \"territory borders and nothing else. The borders must be in black (hex: 000000) and \"\n+            + \"there should not be any anti-aliasing (smoothing) of the lines or edges that stick \"\n+            + \"out.\"\n+            + \"\\nCreate a small image of the map (approx 250 pixels wide) and name \"\n+            + \"it \\\"smallMap.jpeg\\\".\"\n+            + \"\\nPut these in the map's root folder. You can now start the map maker by clicking \"\n+            + \"and filling in the details below, before moving on to 'Step 2' and running the \"\n+            + \"map utilities.\");\n+    final JScrollPane scrollText = new JScrollPane(text);\n+    panel.add(scrollText);\n+    panel.add(Box.createVerticalStrut(30));\n+    panel.add(new JLabel(\"Click button open up the readme file on how to make maps:\"));\n+    final JButton helpButton = new JButton(\"Start Tutorial  /  Show Help Document\");\n+    helpButton.addActionListener(e -> OpenFileUtility.openUrl(UrlConstants.MAP_MAKER_HELP));\n+    panel.add(helpButton);\n+    panel.add(Box.createVerticalStrut(30));\n+    panel.add(new JLabel(\"Click button to select where your map folder is:\"));\n+    final JButton mapFolderButton = new JButton(\"Select Map Folder\");\n+    mapFolderButton.addActionListener(\n+        SwingAction.of(\n+            \"Select Map Folder\",\n+            e -> {\n+              final String path =\n+                  new FileSave(\"Where is your map's folder?\", null, mapFolderLocation)\n+                      .getPathString();\n+              if (path != null) {\n+                final File mapFolder = new File(path);\n+                if (mapFolder.exists()) {\n+                  mapFolderLocation = mapFolder;\n+                  System.setProperty(ToolArguments.MAP_FOLDER, mapFolderLocation.getPath());\n+                }\n+              }\n+            }));\n+    panel.add(mapFolderButton);\n+    panel.add(Box.createVerticalStrut(30));\n+    panel.add(new JLabel(\"Set the unit scaling (unit image zoom): \"));\n+    panel.add(new JLabel(\"Choose one of: 1.25, 1, 0.875, 0.8333, 0.75, 0.6666, 0.5625, 0.5\"));\n+    final JTextField unitZoomText = new JTextField(\"\" + unitZoom);\n+    unitZoomText.setMaximumSize(new Dimension(100, 20));\n+    unitZoomText.addFocusListener(\n+        new FocusListener() {\n+          @Override\n+          public void focusGained(final FocusEvent e) {}", "originalCommit": "277022c490a8923cb8b39137b4082b1b4dde8c29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDA2Mg==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r489114062", "bodyText": "Codacy found an issue: Avoid really long methods.", "author": "DanVanAtta", "createdAt": "2020-09-16T01:51:56Z", "path": "game-core/src/main/java/tools/map/making/ui/properties/MapPropertiesPanel.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package tools.map.making.ui.properties;\n+\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.image.UnitImageFactory;\n+import java.awt.Dimension;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.io.File;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.awt.OpenFileUtility;\n+import org.triplea.swing.SwingAction;\n+import tools.image.FileSave;\n+import tools.util.ToolArguments;\n+\n+@UtilityClass\n+public class MapPropertiesPanel {\n+  private static long memoryInBytes = Runtime.getRuntime().maxMemory();\n+  private static File mapFolderLocation = null;\n+  private static double unitZoom = 0.75;\n+  private static int unitWidth = UnitImageFactory.DEFAULT_UNIT_ICON_SIZE;\n+  private static int unitHeight = UnitImageFactory.DEFAULT_UNIT_ICON_SIZE;\n+\n+  public JPanel build() {", "originalCommit": "277022c490a8923cb8b39137b4082b1b4dde8c29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDA2Nw==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r489114067", "bodyText": "Codacy found an issue: The method 'runInternal()' has an NPath complexity of 1944, current threshold is 200", "author": "DanVanAtta", "createdAt": "2020-09-16T01:51:57Z", "path": "game-core/src/main/java/tools/image/TileImageReconstructor.java", "diffHunk": "@@ -61,14 +60,14 @@ private TileImageReconstructor() {}\n    *\n    * @throws IllegalStateException If not invoked on the EDT.\n    */\n-  public static void run(final String[] args) {\n+  public static void run() {\n     checkState(SwingUtilities.isEventDispatchThread());\n \n-    new TileImageReconstructor().runInternal(args);\n+    new TileImageReconstructor().runInternal();\n   }\n \n-  private void runInternal(final String[] args) {\n-    handleCommandLineArgs(args);\n+  private void runInternal() {", "originalCommit": "277022c490a8923cb8b39137b4082b1b4dde8c29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDA3Mg==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r489114072", "bodyText": "Codacy found an issue: The method 'runInternal()' has an NPath complexity of 2643840, current threshold is 200", "author": "DanVanAtta", "createdAt": "2020-09-16T01:51:58Z", "path": "game-core/src/main/java/tools/map/making/ConnectionFinder.java", "diffHunk": "@@ -61,21 +61,19 @@\n   // default 32, or if LINE_THICKNESS is given 16 x linethickness\n   private double minOverlap = 32.0;\n \n-  private ConnectionFinder() {}\n-\n   /**\n    * Runs the connection finder tool.\n    *\n    * @throws IllegalStateException If not invoked on the EDT.\n    */\n-  public static void run(final String[] args) {\n+  public static void run() {\n     checkState(SwingUtilities.isEventDispatchThread());\n \n-    new ConnectionFinder().runInternal(args);\n+    new ConnectionFinder().runInternal();\n   }\n \n-  private void runInternal(final String[] args) {\n-    handleCommandLineArgs(args);\n+  private void runInternal() {", "originalCommit": "277022c490a8923cb8b39137b4082b1b4dde8c29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDA3Nw==", "url": "https://github.com/triplea-game/triplea/pull/7667#discussion_r489114077", "bodyText": "Codacy found an issue: Avoid really long methods.", "author": "DanVanAtta", "createdAt": "2020-09-16T01:51:59Z", "path": "game-core/src/main/java/tools/map/making/ConnectionFinder.java", "diffHunk": "@@ -61,21 +61,19 @@\n   // default 32, or if LINE_THICKNESS is given 16 x linethickness\n   private double minOverlap = 32.0;\n \n-  private ConnectionFinder() {}\n-\n   /**\n    * Runs the connection finder tool.\n    *\n    * @throws IllegalStateException If not invoked on the EDT.\n    */\n-  public static void run(final String[] args) {\n+  public static void run() {\n     checkState(SwingUtilities.isEventDispatchThread());\n \n-    new ConnectionFinder().runInternal(args);\n+    new ConnectionFinder().runInternal();\n   }\n \n-  private void runInternal(final String[] args) {\n-    handleCommandLineArgs(args);\n+  private void runInternal() {", "originalCommit": "277022c490a8923cb8b39137b4082b1b4dde8c29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}