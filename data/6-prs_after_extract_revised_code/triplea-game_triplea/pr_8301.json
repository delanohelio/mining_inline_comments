{"pr_number": 8301, "pr_title": "Create UnitHitsChange that uses primitives", "pr_createdAt": "2020-11-27T16:19:23Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8301", "timeline": [{"oid": "171b744a2c5a71d3b3d53a857b2575422da5ae1f", "url": "https://github.com/triplea-game/triplea/commit/171b744a2c5a71d3b3d53a857b2575422da5ae1f", "message": "Create UnitHitsChange that uses primitives\n\nThe old UnitHitsChange is marked as deprecated and will stay\naround solely for loading old saves.", "committedDate": "2020-11-27T16:15:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNjg2NQ==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r531716865", "bodyText": "I think the name of this change object could be ambiguous. Notably, does this mean the number of hit points has changed on a unit, or is it the damage to the units that has changed? Second, would this be used to indicate a unit is only damaged, or is this how we determine if a unit is destroyed?\nPerhaps a more clear name would be something like UnitDamageReceivedChange. Does that make sense, can you come up with a better name? Hopefully the other questions about what the change object represents can be documented in the javadoc.", "author": "DanVanAtta", "createdAt": "2020-11-27T17:51:58Z", "path": "game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package games.strategy.engine.data.changefactory.units;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** A game data change that captures the damage done to a collection of units. */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class UnitHitsChange extends Change {", "originalCommit": "171b744a2c5a71d3b3d53a857b2575422da5ae1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDMxMA==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r532100310", "bodyText": "I've renamed the class as well as a few of the member variables.\nI can't actually answer your other questions.  I've seen this used both to update the damage for a multi hitpoint unit as well as to indicate that some units have died.  It appears to be used for the later case when triggers might occur.  But I don't understand the trigger code path so I'm not sure how it is used in that case.", "author": "trevan", "createdAt": "2020-11-28T19:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNjg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "100e3faba334389ca72ee421e6af534f2c7123a3", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java b/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\ndeleted file mode 100644\nindex 31366c37b..000000000\n--- a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-package games.strategy.engine.data.changefactory.units;\n-\n-import games.strategy.engine.data.Change;\n-import games.strategy.engine.data.GameData;\n-import games.strategy.engine.data.Territory;\n-import games.strategy.engine.data.Unit;\n-import java.util.Collection;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n-import org.triplea.java.collections.IntegerMap;\n-\n-/** A game data change that captures the damage done to a collection of units. */\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)\n-public class UnitHitsChange extends Change {\n-  private static final long serialVersionUID = 2862726651812142713L;\n-\n-  private final IntegerMap<String> newHits;\n-  private final IntegerMap<String> oldHits;\n-  private final Collection<String> territoriesToNotify;\n-\n-  /**\n-   * @param hits The amount of hits that the unit should have. It is NOT the difference of the\n-   *     existing hits and the new hits.\n-   * @param territoriesToNotify The territories that contain all the units\n-   */\n-  public UnitHitsChange(\n-      final IntegerMap<Unit> hits, final Collection<Territory> territoriesToNotify) {\n-    this.newHits = new IntegerMap<>();\n-    this.oldHits = new IntegerMap<>();\n-    hits.entrySet()\n-        .forEach(\n-            entry -> {\n-              this.newHits.add(entry.getKey().getId().toString(), entry.getValue());\n-              this.oldHits.add(entry.getKey().getId().toString(), entry.getKey().getHits());\n-            });\n-    this.territoriesToNotify =\n-        territoriesToNotify.stream().map(Territory::getName).collect(Collectors.toList());\n-  }\n-\n-  @Override\n-  protected void perform(final GameData data) {\n-    for (final String unitId : newHits.keySet()) {\n-      final Unit unit = data.getUnits().get(UUID.fromString(unitId));\n-      unit.setHits(newHits.getInt(unitId));\n-    }\n-    for (final String territory : territoriesToNotify) {\n-      data.getMap().getTerritory(territory).notifyChanged();\n-    }\n-  }\n-\n-  @Override\n-  public Change invert() {\n-    return new UnitHitsChange(oldHits, newHits, territoriesToNotify);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNzUxNA==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r531717514", "bodyText": "Offhand, I'm not sure I'd call IntegerMap a primitive. I believe it's roots predate Java 1.5 where there was only a Map that was object to object. I've wondered if it makes sense to deprecate IntegerMap in favor of just having Map<T, Integer>", "author": "DanVanAtta", "createdAt": "2020-11-27T17:54:18Z", "path": "game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package games.strategy.engine.data.changefactory.units;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** A game data change that captures the damage done to a collection of units. */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class UnitHitsChange extends Change {\n+  private static final long serialVersionUID = 2862726651812142713L;\n+\n+  private final IntegerMap<String> newHits;\n+  private final IntegerMap<String> oldHits;", "originalCommit": "171b744a2c5a71d3b3d53a857b2575422da5ae1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5OTY2Nw==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r532099667", "bodyText": "IntegerMap is more than just a Map<T, Integer>.  It allows easy adding and summing of the integers.  So it shouldn't be deprecated.\nBut for this specific case, since it is just storing the IntegerMap data, it can be turned into a Map.", "author": "trevan", "createdAt": "2020-11-28T19:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNzUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNzM3OA==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r532107378", "bodyText": "The summing operations are not necessarily that difficult. A util class could replace the functionality.\nThe 'IntegerMap' is kinda counter-intuitive, I've generally found it takes a good bit of extra thought to determine what it represents. I think the deprecation is on the table, but maybe not replacing with map but a first class data structure. A map and IntegerMap seems to be very strutc-like, weak types and very low level.", "author": "DanVanAtta", "createdAt": "2020-11-28T21:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxNzUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "100e3faba334389ca72ee421e6af534f2c7123a3", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java b/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\ndeleted file mode 100644\nindex 31366c37b..000000000\n--- a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-package games.strategy.engine.data.changefactory.units;\n-\n-import games.strategy.engine.data.Change;\n-import games.strategy.engine.data.GameData;\n-import games.strategy.engine.data.Territory;\n-import games.strategy.engine.data.Unit;\n-import java.util.Collection;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n-import org.triplea.java.collections.IntegerMap;\n-\n-/** A game data change that captures the damage done to a collection of units. */\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)\n-public class UnitHitsChange extends Change {\n-  private static final long serialVersionUID = 2862726651812142713L;\n-\n-  private final IntegerMap<String> newHits;\n-  private final IntegerMap<String> oldHits;\n-  private final Collection<String> territoriesToNotify;\n-\n-  /**\n-   * @param hits The amount of hits that the unit should have. It is NOT the difference of the\n-   *     existing hits and the new hits.\n-   * @param territoriesToNotify The territories that contain all the units\n-   */\n-  public UnitHitsChange(\n-      final IntegerMap<Unit> hits, final Collection<Territory> territoriesToNotify) {\n-    this.newHits = new IntegerMap<>();\n-    this.oldHits = new IntegerMap<>();\n-    hits.entrySet()\n-        .forEach(\n-            entry -> {\n-              this.newHits.add(entry.getKey().getId().toString(), entry.getValue());\n-              this.oldHits.add(entry.getKey().getId().toString(), entry.getKey().getHits());\n-            });\n-    this.territoriesToNotify =\n-        territoriesToNotify.stream().map(Territory::getName).collect(Collectors.toList());\n-  }\n-\n-  @Override\n-  protected void perform(final GameData data) {\n-    for (final String unitId : newHits.keySet()) {\n-      final Unit unit = data.getUnits().get(UUID.fromString(unitId));\n-      unit.setHits(newHits.getInt(unitId));\n-    }\n-    for (final String territory : territoriesToNotify) {\n-      data.getMap().getTerritory(territory).notifyChanged();\n-    }\n-  }\n-\n-  @Override\n-  public Change invert() {\n-    return new UnitHitsChange(oldHits, newHits, territoriesToNotify);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxODU4NQ==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r531718585", "bodyText": "If we have a save game, and the territories in the map change, are we going to be FUBAR here? Is there a way to instead find the territories from the units? In that case, we'd only need to keep track of the units.\nI don't know offhand if there is an efficient way to do the lookup of unit to territory, but I am thinking about the territory-name change case and it seems like that could be a problem here.", "author": "DanVanAtta", "createdAt": "2020-11-27T17:58:03Z", "path": "game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package games.strategy.engine.data.changefactory.units;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** A game data change that captures the damage done to a collection of units. */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class UnitHitsChange extends Change {\n+  private static final long serialVersionUID = 2862726651812142713L;\n+\n+  private final IntegerMap<String> newHits;\n+  private final IntegerMap<String> oldHits;\n+  private final Collection<String> territoriesToNotify;\n+\n+  /**\n+   * @param hits The amount of hits that the unit should have. It is NOT the difference of the\n+   *     existing hits and the new hits.\n+   * @param territoriesToNotify The territories that contain all the units\n+   */\n+  public UnitHitsChange(\n+      final IntegerMap<Unit> hits, final Collection<Territory> territoriesToNotify) {\n+    this.newHits = new IntegerMap<>();\n+    this.oldHits = new IntegerMap<>();\n+    hits.entrySet()\n+        .forEach(\n+            entry -> {\n+              this.newHits.add(entry.getKey().getId().toString(), entry.getValue());\n+              this.oldHits.add(entry.getKey().getId().toString(), entry.getKey().getHits());\n+            });\n+    this.territoriesToNotify =\n+        territoriesToNotify.stream().map(Territory::getName).collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  protected void perform(final GameData data) {\n+    for (final String unitId : newHits.keySet()) {\n+      final Unit unit = data.getUnits().get(UUID.fromString(unitId));\n+      unit.setHits(newHits.getInt(unitId));\n+    }\n+    for (final String territory : territoriesToNotify) {\n+      data.getMap().getTerritory(territory).notifyChanged();", "originalCommit": "171b744a2c5a71d3b3d53a857b2575422da5ae1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDU5Mw==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r532100593", "bodyText": "I don't think it is good idea to allow a save game to run on a new map definition.  I think a lot of things will be FUBAR.\nBut the only way that I know of figuring out which unit is in which territory is to loop over all the territories and ask if the unit is in them.  This was what the BombingUnitDamageChange used to do and I changed that class to be more like this class where the territory is passed in instead of determined during the perform.  If you want to have it look up the territories, then I should probably change BombingUnitDamageChange to be similar.", "author": "trevan", "createdAt": "2020-11-28T20:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxODU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNzY2Ng==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r532107666", "bodyText": "It kinda seems like we could use a reverse index to be able to efficiently look up the territories of a unit (or just make it a property of the unit even).\nIt is a design goal to allow maps to change and save games to still work. I don't know how wise that was, it stems from an early design decision that all maps would have just one version installed.\nI'll think about this one more, for now let's roll with what you have. Maybe we change it if we make current territory a property of Unit.", "author": "DanVanAtta", "createdAt": "2020-11-28T21:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxODU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwODI5Nw==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r532108297", "bodyText": "Currently, if you have a save game for a map and then update the map, the save game will not see the change to the map.  That is because the save game has the entire original map data in it.  You can't play a save game from a map that you don't have, though.  And that's because the images, colors, etc are still read from the map zip/directory.\nThinking about that, if a map is updated with a completely different map picture that includes different connections, territories, etc, then playing the saved game would be really weird.  It would not know of the new connections and it would probably be messed up about the territories.  I'm not sure the save game would even play.", "author": "trevan", "createdAt": "2020-11-28T21:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxODU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNzU4OQ==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r532127589", "bodyText": "IIRC territory names are read from map files for the polygons and knowing where territory boundaries are. Generally agree that it's not good to be playing on altered maps. We have had map makers change territory names and that generally has had bad results for save games and very painful migrations (mainly because we only allow one version of a map at a time and meanwhile we do allow multiple game versions with saves to be running in parallel).", "author": "DanVanAtta", "createdAt": "2020-11-29T01:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxODU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "100e3faba334389ca72ee421e6af534f2c7123a3", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java b/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\ndeleted file mode 100644\nindex 31366c37b..000000000\n--- a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-package games.strategy.engine.data.changefactory.units;\n-\n-import games.strategy.engine.data.Change;\n-import games.strategy.engine.data.GameData;\n-import games.strategy.engine.data.Territory;\n-import games.strategy.engine.data.Unit;\n-import java.util.Collection;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n-import org.triplea.java.collections.IntegerMap;\n-\n-/** A game data change that captures the damage done to a collection of units. */\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)\n-public class UnitHitsChange extends Change {\n-  private static final long serialVersionUID = 2862726651812142713L;\n-\n-  private final IntegerMap<String> newHits;\n-  private final IntegerMap<String> oldHits;\n-  private final Collection<String> territoriesToNotify;\n-\n-  /**\n-   * @param hits The amount of hits that the unit should have. It is NOT the difference of the\n-   *     existing hits and the new hits.\n-   * @param territoriesToNotify The territories that contain all the units\n-   */\n-  public UnitHitsChange(\n-      final IntegerMap<Unit> hits, final Collection<Territory> territoriesToNotify) {\n-    this.newHits = new IntegerMap<>();\n-    this.oldHits = new IntegerMap<>();\n-    hits.entrySet()\n-        .forEach(\n-            entry -> {\n-              this.newHits.add(entry.getKey().getId().toString(), entry.getValue());\n-              this.oldHits.add(entry.getKey().getId().toString(), entry.getKey().getHits());\n-            });\n-    this.territoriesToNotify =\n-        territoriesToNotify.stream().map(Territory::getName).collect(Collectors.toList());\n-  }\n-\n-  @Override\n-  protected void perform(final GameData data) {\n-    for (final String unitId : newHits.keySet()) {\n-      final Unit unit = data.getUnits().get(UUID.fromString(unitId));\n-      unit.setHits(newHits.getInt(unitId));\n-    }\n-    for (final String territory : territoriesToNotify) {\n-      data.getMap().getTerritory(territory).notifyChanged();\n-    }\n-  }\n-\n-  @Override\n-  public Change invert() {\n-    return new UnitHitsChange(oldHits, newHits, territoriesToNotify);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxODU5Mg==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r531718592", "bodyText": "A quick comment on the for loops and/or method would be valuable to give a quick summary of what is being done in this method. Would you mind adding it?\nIt could be something like // update units damage & // invoke territory change listeners", "author": "DanVanAtta", "createdAt": "2020-11-27T17:58:04Z", "path": "game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package games.strategy.engine.data.changefactory.units;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** A game data change that captures the damage done to a collection of units. */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class UnitHitsChange extends Change {\n+  private static final long serialVersionUID = 2862726651812142713L;\n+\n+  private final IntegerMap<String> newHits;\n+  private final IntegerMap<String> oldHits;\n+  private final Collection<String> territoriesToNotify;\n+\n+  /**\n+   * @param hits The amount of hits that the unit should have. It is NOT the difference of the\n+   *     existing hits and the new hits.\n+   * @param territoriesToNotify The territories that contain all the units\n+   */\n+  public UnitHitsChange(\n+      final IntegerMap<Unit> hits, final Collection<Territory> territoriesToNotify) {\n+    this.newHits = new IntegerMap<>();\n+    this.oldHits = new IntegerMap<>();\n+    hits.entrySet()\n+        .forEach(\n+            entry -> {\n+              this.newHits.add(entry.getKey().getId().toString(), entry.getValue());\n+              this.oldHits.add(entry.getKey().getId().toString(), entry.getKey().getHits());\n+            });\n+    this.territoriesToNotify =\n+        territoriesToNotify.stream().map(Territory::getName).collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  protected void perform(final GameData data) {", "originalCommit": "171b744a2c5a71d3b3d53a857b2575422da5ae1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "100e3faba334389ca72ee421e6af534f2c7123a3", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java b/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\ndeleted file mode 100644\nindex 31366c37b..000000000\n--- a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-package games.strategy.engine.data.changefactory.units;\n-\n-import games.strategy.engine.data.Change;\n-import games.strategy.engine.data.GameData;\n-import games.strategy.engine.data.Territory;\n-import games.strategy.engine.data.Unit;\n-import java.util.Collection;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n-import org.triplea.java.collections.IntegerMap;\n-\n-/** A game data change that captures the damage done to a collection of units. */\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)\n-public class UnitHitsChange extends Change {\n-  private static final long serialVersionUID = 2862726651812142713L;\n-\n-  private final IntegerMap<String> newHits;\n-  private final IntegerMap<String> oldHits;\n-  private final Collection<String> territoriesToNotify;\n-\n-  /**\n-   * @param hits The amount of hits that the unit should have. It is NOT the difference of the\n-   *     existing hits and the new hits.\n-   * @param territoriesToNotify The territories that contain all the units\n-   */\n-  public UnitHitsChange(\n-      final IntegerMap<Unit> hits, final Collection<Territory> territoriesToNotify) {\n-    this.newHits = new IntegerMap<>();\n-    this.oldHits = new IntegerMap<>();\n-    hits.entrySet()\n-        .forEach(\n-            entry -> {\n-              this.newHits.add(entry.getKey().getId().toString(), entry.getValue());\n-              this.oldHits.add(entry.getKey().getId().toString(), entry.getKey().getHits());\n-            });\n-    this.territoriesToNotify =\n-        territoriesToNotify.stream().map(Territory::getName).collect(Collectors.toList());\n-  }\n-\n-  @Override\n-  protected void perform(final GameData data) {\n-    for (final String unitId : newHits.keySet()) {\n-      final Unit unit = data.getUnits().get(UUID.fromString(unitId));\n-      unit.setHits(newHits.getInt(unitId));\n-    }\n-    for (final String territory : territoriesToNotify) {\n-      data.getMap().getTerritory(territory).notifyChanged();\n-    }\n-  }\n-\n-  @Override\n-  public Change invert() {\n-    return new UnitHitsChange(oldHits, newHits, territoriesToNotify);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxOTI2NQ==", "url": "https://github.com/triplea-game/triplea/pull/8301#discussion_r531719265", "bodyText": "It's missing that the String represents a unit id. A quick comment like // unitId -> total damage taken could do the trick to document that. WDYT?", "author": "DanVanAtta", "createdAt": "2020-11-27T18:00:41Z", "path": "game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package games.strategy.engine.data.changefactory.units;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** A game data change that captures the damage done to a collection of units. */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class UnitHitsChange extends Change {\n+  private static final long serialVersionUID = 2862726651812142713L;\n+\n+  private final IntegerMap<String> newHits;", "originalCommit": "171b744a2c5a71d3b3d53a857b2575422da5ae1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "100e3faba334389ca72ee421e6af534f2c7123a3", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java b/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\ndeleted file mode 100644\nindex 31366c37b..000000000\n--- a/game-core/src/main/java/games/strategy/engine/data/changefactory/units/UnitHitsChange.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-package games.strategy.engine.data.changefactory.units;\n-\n-import games.strategy.engine.data.Change;\n-import games.strategy.engine.data.GameData;\n-import games.strategy.engine.data.Territory;\n-import games.strategy.engine.data.Unit;\n-import java.util.Collection;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n-import org.triplea.java.collections.IntegerMap;\n-\n-/** A game data change that captures the damage done to a collection of units. */\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)\n-public class UnitHitsChange extends Change {\n-  private static final long serialVersionUID = 2862726651812142713L;\n-\n-  private final IntegerMap<String> newHits;\n-  private final IntegerMap<String> oldHits;\n-  private final Collection<String> territoriesToNotify;\n-\n-  /**\n-   * @param hits The amount of hits that the unit should have. It is NOT the difference of the\n-   *     existing hits and the new hits.\n-   * @param territoriesToNotify The territories that contain all the units\n-   */\n-  public UnitHitsChange(\n-      final IntegerMap<Unit> hits, final Collection<Territory> territoriesToNotify) {\n-    this.newHits = new IntegerMap<>();\n-    this.oldHits = new IntegerMap<>();\n-    hits.entrySet()\n-        .forEach(\n-            entry -> {\n-              this.newHits.add(entry.getKey().getId().toString(), entry.getValue());\n-              this.oldHits.add(entry.getKey().getId().toString(), entry.getKey().getHits());\n-            });\n-    this.territoriesToNotify =\n-        territoriesToNotify.stream().map(Territory::getName).collect(Collectors.toList());\n-  }\n-\n-  @Override\n-  protected void perform(final GameData data) {\n-    for (final String unitId : newHits.keySet()) {\n-      final Unit unit = data.getUnits().get(UUID.fromString(unitId));\n-      unit.setHits(newHits.getInt(unitId));\n-    }\n-    for (final String territory : territoriesToNotify) {\n-      data.getMap().getTerritory(territory).notifyChanged();\n-    }\n-  }\n-\n-  @Override\n-  public Change invert() {\n-    return new UnitHitsChange(oldHits, newHits, territoriesToNotify);\n-  }\n-}\n"}}, {"oid": "100e3faba334389ca72ee421e6af534f2c7123a3", "url": "https://github.com/triplea-game/triplea/commit/100e3faba334389ca72ee421e6af534f2c7123a3", "message": "Rename UnitHitsChange -> UnitDamageReceivedChange\n\nAlso rename the variables to newTotalDamage and oldTotalDamage to be\nmore specific in what they hold.\n\nAdd comments to help explain parts of the code.", "committedDate": "2020-11-28T19:57:07Z", "type": "commit"}]}