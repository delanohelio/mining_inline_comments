{"pr_number": 8308, "pr_title": "Create dice.calculator and dice.roller to store DiceRoll strategies", "pr_createdAt": "2020-11-28T19:00:18Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8308", "timeline": [{"oid": "45497c670215693cab6810ae01c6a130f0a1c270", "url": "https://github.com/triplea-game/triplea/commit/45497c670215693cab6810ae01c6a130f0a1c270", "message": "Create dice.calculator and dice.roller to store DiceRoll strategies\n\nCode in TotalPowerAndTotalRolls that was related to dice rolling has\nbeen moved to dice.calculator.  Static methods in DiceRoll to generate\ndice rolls has been moved to dice.roller.", "committedDate": "2020-11-28T18:57:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTE2OQ==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532125169", "bodyText": "RollNDice could be confused with \"rollinDice\" and \"roll and dice\". It is also confusing if we are rolling a N-sided die or are rolling n-dice.\nThis class looks like a dice-roller. I would opt to name it that. Looking at the one method in this class, I notice the API is not the prettiest. Of note, we have two int parameters side by side that could be swapped or would be hard to distinguish.\nOne fix would be to convert the parameters of the method to private variables and then use a builder to construct and have a no-arg 'rollDice' method. That should clean up the usage. Though, a lot of the parameters are simply to feed the call to \"bridge.getRandom(sides, rollCount, playerRolling, diceType, annotation);\". I think this method might be trying to do too much an dperhaps should take a random[] as a parameter and then it would have far fewer methods. Probably even better would be to have DiceRoll to have a constructor that accepts the random[] computation and it can then do most of the rest of the logic.\nTL;DR, this method looks like it should instead be a constructor on DiceRoll.", "author": "DanVanAtta", "createdAt": "2020-11-29T00:51:36Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollNDice.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package games.strategy.triplea.delegate.dice.roller;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.engine.random.IRandomStats;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import games.strategy.triplea.delegate.Die;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.experimental.UtilityClass;\n+\n+/**\n+ * Roll n-sided dice.\n+ *\n+ * <p>0 based, add 1 to get actual die roll\n+ */\n+@UtilityClass\n+public class RollNDice {", "originalCommit": "45497c670215693cab6810ae01c6a130f0a1c270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MjU2Ng==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532152566", "bodyText": "This class is a builder of DiceRoll.  You shouldn't create your own DiceRoll but instead call this method if you need to roll N dice.  This also creates special IGNORED dice.  You don't want to use this for battle situations.  This is currently used by war bonds but I want to expand it to the other places that call bridge.getRandom so that we have a unified dice logic.\nI thought of calling this RollIgnoredDice but that would be really strange.  It was originally called rollNDice and I think it fits.", "author": "trevan", "createdAt": "2020-11-29T04:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTg3MA==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532259870", "bodyText": "RE: rollNDice\nWhen I first read 'rollNDice', my first thought it was 'rollAndDice' and it was similar to 'StengthAndRolls'\nI'd say then the original name was clever, too short and required more than naive context to understand (which means it takes longer to understand the code, the more context you have to acquire, because context acquisition takes time, ergo the more context needed implies more time is needed to read and understand code).\nTBH I'm still not clear if n is the number of dice or the number of dice sides. I think the latter, but maybe it's even both??\nSo please have some thoughts about the naming for rollNDice and consider spelling it out to make it easier on a reader.\nRe: Factory methods\nOkay, it's good to know this is supposed to be a factory method. I think the cohesion heuristic is potentially low as we have a factory class, with a factory method, that are in one package, meanwhile DiceRoll is in: package games.strategy.triplea.delegate;\nMy concern about the 3 factory classes is that they are each relatively shallow, it's not offhand clear they are factories either explicitly or from the javadocs, and it's potentially not clear when to use and not the other.\nTo alleviate these concerns I can suggest we combine the factory methods into one class and then document when you would use one each one. Seeing the series of methods in one class file I think would draw context between when each one would be used. I think ideally the factory class would be 'close' by to the 'DiceRoll' class, though I can understand not having them co-located just yet.\nWDYT?", "author": "DanVanAtta", "createdAt": "2020-11-29T20:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMxODA3OQ==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532318079", "bodyText": "@DanVanAtta , I've renamed RollNDice to RollNSidedDiceXTimes.  I hope that is more specific.\nAs for the changes to the factory methods, I want to move DiceRoll but I can't because of saved game issue.  I've already added @ChangeOnNextMajorRelease to indicate that DiceRoll should be moved.  Once it is moved, it should make more sense.  I understand your desire to merge them into one class with 3 static methods but I hope to change them to @Builders and I plan to try and get more of the getRandom usages added as new factory classes.  So I'd rather leave them separate for now.", "author": "trevan", "createdAt": "2020-11-30T02:37:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMxODM0Nw==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532318347", "bodyText": "I also thought the javadocs explain when you would use one or the other.  I'm not sure what to add to them to make them clearer.", "author": "trevan", "createdAt": "2020-11-30T02:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4NDYwMw==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r533784603", "bodyText": "RollNSidedDiceXTimes is wordy but certainly more clear!\nMy thinking was with the factory classes merged into one, the existing javadocs would contrast against one another more readily and make it obvious that the factory methods were related. That is an off-the-cuff suggestion, I'll take a deeper look soon in case there is a better suggestion that comes to mind or if my initial impression was just off-base.", "author": "DanVanAtta", "createdAt": "2020-12-01T23:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a699173c20def85112bfe635fde59ca47450b66", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollNDice.java b/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollNDice.java\nindex 07bdd8f4d..d219c6394 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollNDice.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollNDice.java\n\n@@ -10,7 +10,7 @@ import java.util.List;\n import lombok.experimental.UtilityClass;\n \n /**\n- * Roll n-sided dice.\n+ * Roll a specified amount of dice with a specified dice side\n  *\n  * <p>0 based, add 1 to get actual die roll\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTI3Nw==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532125277", "bodyText": "I don't know if the bridge call belongs here. I would personally opt to duplicate this bridge call wherever we use the dice roller. The reasoning is largely just SRP, we are doing a lot of things here and the bridge call is a side effect.", "author": "DanVanAtta", "createdAt": "2020-11-29T00:53:09Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package games.strategy.triplea.delegate.dice.roller;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import games.strategy.triplea.delegate.dice.calculator.LowLuckDice;\n+import games.strategy.triplea.delegate.dice.calculator.RolledDice;\n+import games.strategy.triplea.delegate.power.calculator.CombatValue;\n+import games.strategy.triplea.delegate.power.calculator.PowerStrengthAndRolls;\n+import games.strategy.triplea.formatter.MyFormatter;\n+import java.util.Collection;\n+import lombok.experimental.UtilityClass;\n+\n+/** Used to roll dice for attackers and defenders in battles. */\n+@UtilityClass\n+public class RollBattleDice {\n+\n+  public static DiceRoll rollDice(\n+      final Collection<Unit> units,\n+      final GamePlayer player,\n+      final IDelegateBridge bridge,\n+      final String annotation,\n+      final CombatValue combatValueCalculator) {\n+\n+    final DiceRoll diceRoll;\n+    final PowerStrengthAndRolls unitPowerAndRollsMap =\n+        PowerStrengthAndRolls.build(units, combatValueCalculator);\n+    if (Properties.getLowLuck(bridge.getData().getProperties())) {\n+      diceRoll = LowLuckDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation);\n+    } else {\n+      diceRoll = RolledDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation);\n+    }\n+\n+    bridge", "originalCommit": "45497c670215693cab6810ae01c6a130f0a1c270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTQwMQ==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532125401", "bodyText": "Looking at what remains, I'm not really convinced this is a useful class. Can this be combined with the RollNDice class? It seems like this should be a stateful 'diceRoller' class and then it handles whether it rolls LL or normal dice as an implementation detail.", "author": "DanVanAtta", "createdAt": "2020-11-29T00:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTUyMQ==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532125521", "bodyText": "I am concerned this is going to get confusing, when does one use RollBattleDice and when do you use RollNDice? I think combining and making these two classes potentially stateful would be a good way to go. I would seriously lean to remove the bridge code as that is side-effect of reporting the result and is not intrinsic to rolling dice.", "author": "DanVanAtta", "createdAt": "2020-11-29T00:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MTY2Nw==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532151667", "bodyText": "The bridge call is unfortunately intrinsic to dice.  When you save a game and then reload it, it will calculate the dice probability of the saved game using these history items.  If they are missing or not written correctly, then the dice probability of the saved game will be invalid.\nI don't agree with the design but I don't see how to easily change that.  And since every call of these methods needs to also write the history, I think it is best to leave the call in here so that it isn't forgotten.  I'll add a comment to the code so that it explains why this history is required.", "author": "trevan", "createdAt": "2020-11-29T04:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MTkxMA==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532151910", "bodyText": "These three classes (RollAaDice, RollNDice, and RollBattleDice) are basically strategy objects that define what type of dice you are getting.  I could see creating a builder class that you pass in an enum but I'm not sure how that is any better than just calling the static method itself.", "author": "trevan", "createdAt": "2020-11-29T04:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1Mjc5NQ==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532152795", "bodyText": "I have been thinking of changing the annotation from a String to a DiceAnnotation (or similar).  Then the parameter to these methods would require a DiceAnnotation instead of a String and it would ensure that the annotation is the correct format (since the history string is parsed to build the probability history).  I could make DiceAnnotation accept a bridge so that it also writes the history and then change these classes to call a method on the DiceAnnotation object that will write the history.  But that would be another PR.", "author": "trevan", "createdAt": "2020-11-29T04:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2MDE1MA==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532260150", "bodyText": "My 2 cents, if anyone is using the dice roll code then they'll be copy/pasting from an existing usage and the bridge will be there. I will admit there is potential for error.\nOn the other hand, if you want to get 'just a dice roll', it's tightly bound to the bridge call and it's a side-effect that someone would not want. I could imagine a duct-tape-programmer putting in a boolean parameter to avoid this side-effect.\nWith that said, leaving it for now is okay. I like your ideas for further improvements.\n[resolved]", "author": "DanVanAtta", "createdAt": "2020-11-29T20:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2a699173c20def85112bfe635fde59ca47450b66", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java b/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java\nindex 0aab6c28c..e0823a2f4 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java\n\n@@ -24,14 +24,13 @@ public class RollBattleDice {\n       final String annotation,\n       final CombatValue combatValueCalculator) {\n \n-    final DiceRoll diceRoll;\n     final PowerStrengthAndRolls unitPowerAndRollsMap =\n         PowerStrengthAndRolls.build(units, combatValueCalculator);\n-    if (Properties.getLowLuck(bridge.getData().getProperties())) {\n-      diceRoll = LowLuckDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation);\n-    } else {\n-      diceRoll = RolledDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation);\n-    }\n+\n+    final DiceRoll diceRoll =\n+        Properties.getLowLuck(bridge.getData().getProperties())\n+            ? LowLuckDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation)\n+            : RolledDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation);\n \n     bridge\n         .getHistoryWriter()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyNTI5OA==", "url": "https://github.com/triplea-game/triplea/pull/8308#discussion_r532125298", "bodyText": "nit, diceRoll should be defined preferably as close to where it is assigned. This is a good looking case to use a ternary even and would reduce complexity a little bit.", "author": "DanVanAtta", "createdAt": "2020-11-29T00:53:40Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package games.strategy.triplea.delegate.dice.roller;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.delegate.IDelegateBridge;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.DiceRoll;\n+import games.strategy.triplea.delegate.dice.calculator.LowLuckDice;\n+import games.strategy.triplea.delegate.dice.calculator.RolledDice;\n+import games.strategy.triplea.delegate.power.calculator.CombatValue;\n+import games.strategy.triplea.delegate.power.calculator.PowerStrengthAndRolls;\n+import games.strategy.triplea.formatter.MyFormatter;\n+import java.util.Collection;\n+import lombok.experimental.UtilityClass;\n+\n+/** Used to roll dice for attackers and defenders in battles. */\n+@UtilityClass\n+public class RollBattleDice {\n+\n+  public static DiceRoll rollDice(\n+      final Collection<Unit> units,\n+      final GamePlayer player,\n+      final IDelegateBridge bridge,\n+      final String annotation,\n+      final CombatValue combatValueCalculator) {\n+\n+    final DiceRoll diceRoll;", "originalCommit": "45497c670215693cab6810ae01c6a130f0a1c270", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a699173c20def85112bfe635fde59ca47450b66", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java b/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java\nindex 0aab6c28c..e0823a2f4 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/dice/roller/RollBattleDice.java\n\n@@ -24,14 +24,13 @@ public class RollBattleDice {\n       final String annotation,\n       final CombatValue combatValueCalculator) {\n \n-    final DiceRoll diceRoll;\n     final PowerStrengthAndRolls unitPowerAndRollsMap =\n         PowerStrengthAndRolls.build(units, combatValueCalculator);\n-    if (Properties.getLowLuck(bridge.getData().getProperties())) {\n-      diceRoll = LowLuckDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation);\n-    } else {\n-      diceRoll = RolledDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation);\n-    }\n+\n+    final DiceRoll diceRoll =\n+        Properties.getLowLuck(bridge.getData().getProperties())\n+            ? LowLuckDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation)\n+            : RolledDice.calculate(unitPowerAndRollsMap, player, bridge::getRandom, annotation);\n \n     bridge\n         .getHistoryWriter()\n"}}, {"oid": "2a699173c20def85112bfe635fde59ca47450b66", "url": "https://github.com/triplea-game/triplea/commit/2a699173c20def85112bfe635fde59ca47450b66", "message": "Use ternary operator in creating diceRoll", "committedDate": "2020-11-29T04:21:36Z", "type": "commit"}, {"oid": "c149ae17d2ce8199c0151b1d75ecfcba8c00531d", "url": "https://github.com/triplea-game/triplea/commit/c149ae17d2ce8199c0151b1d75ecfcba8c00531d", "message": "Merge remote-tracking branch 'upstream/master' into move-dice-rolling-code", "committedDate": "2020-11-30T01:55:39Z", "type": "commit"}, {"oid": "7974c2007eb535e0fe627a146b650add4d2eef8d", "url": "https://github.com/triplea-game/triplea/commit/7974c2007eb535e0fe627a146b650add4d2eef8d", "message": "Rename RollNDice to be more explicit", "committedDate": "2020-11-30T02:33:51Z", "type": "commit"}, {"oid": "4557461c049f97784ec5ee4330a220b96e3bc466", "url": "https://github.com/triplea-game/triplea/commit/4557461c049f97784ec5ee4330a220b96e3bc466", "message": "Combine the three factory classes to just one", "committedDate": "2020-12-02T05:44:27Z", "type": "commit"}, {"oid": "e53b054df632322ccc2114106a32c0fd86e62a87", "url": "https://github.com/triplea-game/triplea/commit/e53b054df632322ccc2114106a32c0fd86e62a87", "message": "Merge remote-tracking branch 'upstream/master' into move-dice-rolling-code", "committedDate": "2020-12-02T05:47:42Z", "type": "commit"}]}