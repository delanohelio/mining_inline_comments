{"pr_number": 6442, "pr_title": "Extract support logic from DiceRoll to a dedicated class.", "pr_createdAt": "2020-05-09T05:22:48Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6442", "timeline": [{"oid": "3de211196ef672ae4826dcd79f9f82d3ab02660a", "url": "https://github.com/triplea-game/triplea/commit/3de211196ef672ae4826dcd79f9f82d3ab02660a", "message": "Extract support logic from DiceRoll to a dedicated class.", "committedDate": "2020-05-09T05:15:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NDk3Mw==", "url": "https://github.com/triplea-game/triplea/pull/6442#discussion_r422454973", "bodyText": "Method getSupport has 58 lines of code (exceeds 30 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-09T05:26:32Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AvailableSupportCalculator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.java.collections.CollectionUtils;\n+import org.triplea.java.collections.IntegerMap;\n+\n+@UtilityClass\n+public class AvailableSupportCalculator {\n+  public static SupportCalculationResult getSortedAaSupport(\n+      final Collection<Unit> unitsGivingTheSupport,\n+      final GameData data,\n+      final boolean defence,\n+      final boolean allies) {\n+    final Set<UnitSupportAttachment> rules =\n+        UnitSupportAttachment.get(data)\n+            .parallelStream()\n+            .filter(usa -> (usa.getAaRoll() || usa.getAaStrength()))\n+            .collect(Collectors.toSet());\n+    return getSortedSupport(unitsGivingTheSupport, rules, defence, allies);\n+  }\n+\n+  /** Sorts 'supportsAvailable' lists based on unit support attachment rules. */\n+  public static SupportCalculationResult getSortedSupport(\n+      final Collection<Unit> unitsGivingTheSupport,\n+      final Set<UnitSupportAttachment> rules,\n+      final boolean defence,\n+      final boolean allies) {\n+    final SupportCalculationResult supportCalculationResult =\n+        getSupport(unitsGivingTheSupport, rules, defence, allies);\n+\n+    final SupportRuleSort supportRuleSort =\n+        SupportRuleSort.builder()\n+            .defense(defence)\n+            .friendly(allies)\n+            .roll(UnitSupportAttachment::getRoll)\n+            .strength(UnitSupportAttachment::getStrength)\n+            .build();\n+    supportCalculationResult\n+        .getSupportRules()\n+        .forEach(unitSupportAttachment -> unitSupportAttachment.sort(supportRuleSort));\n+    return supportCalculationResult;\n+  }\n+\n+  /**\n+   * Returns a calculation with support possibly given by these units.\n+   *\n+   * @param defence are the receiving units defending?\n+   * @param allies are the receiving units allied to the giving units?\n+   */\n+  public static SupportCalculationResult getSupport(", "originalCommit": "3de211196ef672ae4826dcd79f9f82d3ab02660a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NDk3NA==", "url": "https://github.com/triplea-game/triplea/pull/6442#discussion_r422454974", "bodyText": "Method getSupport has a Cognitive Complexity of 26 (exceeds 7 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-09T05:26:32Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AvailableSupportCalculator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+import org.triplea.java.collections.CollectionUtils;\n+import org.triplea.java.collections.IntegerMap;\n+\n+@UtilityClass\n+public class AvailableSupportCalculator {\n+  public static SupportCalculationResult getSortedAaSupport(\n+      final Collection<Unit> unitsGivingTheSupport,\n+      final GameData data,\n+      final boolean defence,\n+      final boolean allies) {\n+    final Set<UnitSupportAttachment> rules =\n+        UnitSupportAttachment.get(data)\n+            .parallelStream()\n+            .filter(usa -> (usa.getAaRoll() || usa.getAaStrength()))\n+            .collect(Collectors.toSet());\n+    return getSortedSupport(unitsGivingTheSupport, rules, defence, allies);\n+  }\n+\n+  /** Sorts 'supportsAvailable' lists based on unit support attachment rules. */\n+  public static SupportCalculationResult getSortedSupport(\n+      final Collection<Unit> unitsGivingTheSupport,\n+      final Set<UnitSupportAttachment> rules,\n+      final boolean defence,\n+      final boolean allies) {\n+    final SupportCalculationResult supportCalculationResult =\n+        getSupport(unitsGivingTheSupport, rules, defence, allies);\n+\n+    final SupportRuleSort supportRuleSort =\n+        SupportRuleSort.builder()\n+            .defense(defence)\n+            .friendly(allies)\n+            .roll(UnitSupportAttachment::getRoll)\n+            .strength(UnitSupportAttachment::getStrength)\n+            .build();\n+    supportCalculationResult\n+        .getSupportRules()\n+        .forEach(unitSupportAttachment -> unitSupportAttachment.sort(supportRuleSort));\n+    return supportCalculationResult;\n+  }\n+\n+  /**\n+   * Returns a calculation with support possibly given by these units.\n+   *\n+   * @param defence are the receiving units defending?\n+   * @param allies are the receiving units allied to the giving units?\n+   */\n+  public static SupportCalculationResult getSupport(", "originalCommit": "3de211196ef672ae4826dcd79f9f82d3ab02660a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}