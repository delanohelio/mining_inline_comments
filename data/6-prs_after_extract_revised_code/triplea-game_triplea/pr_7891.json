{"pr_number": 7891, "pr_title": "Refactor getUnitPowerAndRollsForNormalBattles/getAaUnitPowerAndRollsForNormalBattles", "pr_createdAt": "2020-10-12T23:07:41Z", "pr_url": "https://github.com/triplea-game/triplea/pull/7891", "timeline": [{"oid": "b66308a0d2c36bc1f6e27dbc5b97ed488b60cc28", "url": "https://github.com/triplea-game/triplea/commit/b66308a0d2c36bc1f6e27dbc5b97ed488b60cc28", "message": "Unify AA and Normal paths for TotalPowerAndTotalRolls creation.\n\nCreate Dice Strength/Roll classes that can get the correct value\ndepending on the unit and the status of the game.\n\nCondense the Support Calculator code into one class and make the methods\ninstance methods instead of static methods.", "committedDate": "2020-10-11T21:16:06Z", "type": "commit"}, {"oid": "87b3594dbd4f7b0c7d3ad2882c2531122cd223d8", "url": "https://github.com/triplea-game/triplea/commit/87b3594dbd4f7b0c7d3ad2882c2531122cd223d8", "message": "Add tests", "committedDate": "2020-10-11T22:40:56Z", "type": "commit"}, {"oid": "fadc4b77cd6a96d25ee1ab1333a3b6c2c006aa7b", "url": "https://github.com/triplea-game/triplea/commit/fadc4b77cd6a96d25ee1ab1333a3b6c2c006aa7b", "message": "Refactor Available Support Calculator", "committedDate": "2020-10-12T03:31:58Z", "type": "commit"}, {"oid": "243517a996110b3678e3b7ff0ee35f84c9cba228", "url": "https://github.com/triplea-game/triplea/commit/243517a996110b3678e3b7ff0ee35f84c9cba228", "message": "Update tests to not use AvailableSupportCalculator builder", "committedDate": "2020-10-12T05:50:38Z", "type": "commit"}, {"oid": "7148015b58af6ccf9399d2bfa125c1609832c757", "url": "https://github.com/triplea-game/triplea/commit/7148015b58af6ccf9399d2bfa125c1609832c757", "message": "Create a filter method on instead of a copy constructor", "committedDate": "2020-10-12T15:44:09Z", "type": "commit"}, {"oid": "6ed88a9040e64454ca80cb64bbbed60fd6f9bdb5", "url": "https://github.com/triplea-game/triplea/commit/6ed88a9040e64454ca80cb64bbbed60fd6f9bdb5", "message": "Create holder classes for strength/roll classes", "committedDate": "2020-10-12T16:10:48Z", "type": "commit"}, {"oid": "6fe18c3406b87f088d5f04809bce6eff3532b998", "url": "https://github.com/triplea-game/triplea/commit/6fe18c3406b87f088d5f04809bce6eff3532b998", "message": "Fix long line", "committedDate": "2020-10-12T16:14:20Z", "type": "commit"}, {"oid": "a1bfa584a5929cfd7c0dbe215275d76874db7097", "url": "https://github.com/triplea-game/triplea/commit/a1bfa584a5929cfd7c0dbe215275d76874db7097", "message": "Pass around StrengthOrRollCalculator instead of individual values", "committedDate": "2020-10-12T20:51:13Z", "type": "commit"}, {"oid": "dc86f5242242b275febfbfa4fed63bb121532891", "url": "https://github.com/triplea-game/triplea/commit/dc86f5242242b275febfbfa4fed63bb121532891", "message": "Reduce visibility of the calculators", "committedDate": "2020-10-12T21:34:30Z", "type": "commit"}, {"oid": "38535ace2d42dc220db41fc7ff5ccc0c6a8f97d2", "url": "https://github.com/triplea-game/triplea/commit/38535ace2d42dc220db41fc7ff5ccc0c6a8f97d2", "message": "Use the static builders for now", "committedDate": "2020-10-12T21:42:00Z", "type": "commit"}, {"oid": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63", "url": "https://github.com/triplea-game/triplea/commit/35c8e4e3a89a9dadf332775006d00b53fbe1ef63", "message": "Rename Normal to Main", "committedDate": "2020-10-12T23:22:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzI2NA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973264", "bodyText": "What do you think of renaming AvailableSupportTracker to AvailableSupports?\n'Tracker' is a bit similar to 'manager' in terms of naming value, I'm not sure it is adding a lot.\nWith that, the local variable here has an old name to it. Suggesting:\nfinal AvailabelSupports availableSupports =         AvailableSupports.getSupport(\n            units, data.getUnitTypeList().getSupportRules(), defense, true);\n\nWith that, I'm not sure getSupport is the best factory method name, it's not a typical factory method name. What would you think of moving the static functionality back to the calculator class? This I think would have benefit as the stateful available support information would be in AvailableSupports and hte static computation would be in the calculator.", "author": "DanVanAtta", "createdAt": "2020-10-17T18:58:47Z", "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java", "diffHunk": "@@ -282,17 +281,14 @@ private double calculateSupportFactor(\n     final List<Unit> units = new ArrayList<>(ownedLocalUnits);\n     units.addAll(unitsToPlace);\n     units.addAll(unitType.create(1, player, true));\n-    final SupportCalculationResult supportCalculationResult =\n-        AvailableSupportCalculator.getSupport(\n+    final AvailableSupportTracker supportCalculationResult =", "originalCommit": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMjk2OA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r508902968", "bodyText": "@DanVanAtta, I can do the name change but I'm not sure what you mean about \"moving the static functionality back to the calculator class\"?  You mean the static constructor back to the calculator class?  Or do you mean some other functionality?  If the former, I don't know why you would want to split the static constructor from its implementation.  If the later, can you clarify?", "author": "trevan", "createdAt": "2020-10-20T23:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4OTYzOQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r508989639", "bodyText": "Maybe what you meant was to have a value object that is used by ProPurchaseOption and then a \"manager\" class that takes the value class in its constructor and manages the available support as it is used up?", "author": "trevan", "createdAt": "2020-10-21T04:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MTY5Ng==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513071696", "bodyText": "To clarify, I was implying to split the class into two. One that has all of the stateful methods, another, \"a calculator\" that has the static methods. For example, methods like \"public static AvailableSupportTracker getSupport\" would be in the static utility class. By doing this, each method in the class would use the state of the class, the utility methods on another component. Some judgement needs to be used when methods are related enough to belong together, but that was the suggestion to consider if it helped here.", "author": "DanVanAtta", "createdAt": "2020-10-27T22:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "8983132bbba378f1e780a404df2aef153758a15a", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java b/game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java\nindex 78d59654a..9d1856627 100644\n--- a/game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java\n+++ b/game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java\n\n@@ -281,14 +281,14 @@ public class ProPurchaseOption {\n     final List<Unit> units = new ArrayList<>(ownedLocalUnits);\n     units.addAll(unitsToPlace);\n     units.addAll(unitType.create(1, player, true));\n-    final AvailableSupportTracker supportCalculationResult =\n-        AvailableSupportTracker.getSupport(\n+    final AvailableSupports availableSupports =\n+        AvailableSupports.getSupport(\n             units, data.getUnitTypeList().getSupportRules(), defense, true);\n \n     double totalSupportFactor = 0;\n     for (final UnitSupportAttachment usa : unitSupportAttachments) {\n       for (final List<UnitSupportAttachment> bonusType :\n-          supportCalculationResult.getSupportRules().values()) {\n+          availableSupports.getSupportRules().values()) {\n         if (!bonusType.contains(usa)) {\n           continue;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzM5NQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973395", "bodyText": "It does not look like this is yet called from tests, did you mean to commit changes to this file as part of this PR?", "author": "DanVanAtta", "createdAt": "2020-10-17T19:00:02Z", "path": "game-core/src/main/java/games/strategy/triplea/attachments/TerritoryEffectAttachment.java", "diffHunk": "@@ -48,8 +49,10 @@ private void setCombatDefenseEffect(final String combatDefenseEffect) throws Gam\n     setCombatEffect(combatDefenseEffect, true);\n   }\n \n-  private void setCombatDefenseEffect(final IntegerMap<UnitType> value) {\n+  @VisibleForTesting", "originalCommit": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5OTkzMw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r508899933", "bodyText": "It is being used at https://github.com/triplea-game/triplea/pull/7891/files#diff-bf155c528a8a462543b7b54186929016c76294d8a0d9640f3f2357cf7d9da6b9R68.", "author": "trevan", "createdAt": "2020-10-20T23:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzM5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzQ1MA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973450", "bodyText": "What's the rationale for excluding 'count' from equals and hash code?", "author": "DanVanAtta", "createdAt": "2020-10-17T19:00:45Z", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitSupportAttachment.java", "diffHunk": "@@ -60,7 +63,8 @@\n     private static final long serialVersionUID = -7445551357956238314L;\n \n     @Nonnull String name;\n-    @Nonnull Integer count;\n+\n+    @EqualsAndHashCode.Exclude @Nonnull Integer count;", "originalCommit": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5OTExNQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r508899115", "bodyText": "The original code used the name as the equality.  And, per pact of steel, \"Any support of the same bonusType MUST have the same count.\".\nSince I'm changing the code to use the object as the hash key instead of just the name of the bonus, I excluded the count to prevent an accidental bug where a map has different counts for the same bonusType.\nI checked the maps and there is one map that has different counts for the same bonusType: warcraft war heroes.  The \"Wall-Archer\" bonusType has a count of 1 and a count of 5.  The game is currently picking the first one in the list, which might be 1 or it might be 5.", "author": "trevan", "createdAt": "2020-10-20T23:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzQ1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzU5NQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973595", "bodyText": "We may want to think about the interface naming. 'OffenseOrDefenseCalculator' seems to be a bit too vague, not necessarily single purpose.\nIF you saw for example an instance of the interface passed, OffenseOrDefenseCalculator, would its API usage and methods be relatively obvious?", "author": "DanVanAtta", "createdAt": "2020-10-17T19:02:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCalculator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCalculator implements OffenseOrDefenseCalculator {", "originalCommit": "35c8e4e3a89a9dadf332775006d00b53fbe1ef63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzcyOQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r506973729", "bodyText": "One suggestion, we may want to avoid the 'calculator' suffix. That tends to implies relatively stateless objects that are functional. Calculators tend to receive in put values and compute output values, they're essentially functions. It looks like the instances each have a pretty decent amount of state behind them.\nPerhaps this class could be called AaDefenseCombatValue and the interface CombatValue", "author": "DanVanAtta", "createdAt": "2020-10-17T19:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MzU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8983132bbba378f1e780a404df2aef153758a15a", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCalculator.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nsimilarity index 85%\nrename from game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCalculator.java\nrename to game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nindex d4497c447..db5429862 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCalculator.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n\n@@ -18,11 +18,11 @@ import lombok.Value;\n @Builder\n @Value\n @Getter(AccessLevel.NONE)\n-class AaDefenseCalculator implements OffenseOrDefenseCalculator {\n+class AaDefenseCombatValue implements CombatValue {\n \n   @NonNull GameData data;\n-  @NonNull AvailableSupportTracker friendlySupportTracker;\n-  @NonNull AvailableSupportTracker enemySupportTracker;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n \n   @Override\n   public StrengthOrRollCalculator getRoll() {\n"}}, {"oid": "8983132bbba378f1e780a404df2aef153758a15a", "url": "https://github.com/triplea-game/triplea/commit/8983132bbba378f1e780a404df2aef153758a15a", "message": "Rename class per review feedback", "committedDate": "2020-10-20T23:48:49Z", "type": "commit"}, {"oid": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "url": "https://github.com/triplea-game/triplea/commit/b737f2cbbe09d73efd2578d7998435a4ea9f0104", "message": "Split support data into value object and manager", "committedDate": "2020-10-21T14:37:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NDQxOA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512954418", "bodyText": "availableSupports.getSupportRules().values() looks like a violation of the law of delimiter.\nWhat would you think of replacing the above with a method like:\n availableSupports.getUnitSupportAttachments()", "author": "DanVanAtta", "createdAt": "2020-10-27T19:04:44Z", "path": "game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java", "diffHunk": "@@ -282,17 +281,13 @@ private double calculateSupportFactor(\n     final List<Unit> units = new ArrayList<>(ownedLocalUnits);\n     units.addAll(unitsToPlace);\n     units.addAll(unitType.create(1, player, true));\n-    final SupportCalculationResult supportCalculationResult =\n-        AvailableSupportCalculator.getSupport(\n-            units, data.getUnitTypeList().getSupportRules(), defense, true);\n-\n-    final Set<List<UnitSupportAttachment>> supportsAvailable =\n-        supportCalculationResult.getSupportRules();\n-    final IntegerMap<UnitSupportAttachment> supportLeft = supportCalculationResult.getSupportLeft();\n+    final SupportCalculator availableSupports =\n+        new SupportCalculator(units, data.getUnitTypeList().getSupportRules(), defense, true);\n \n     double totalSupportFactor = 0;\n     for (final UnitSupportAttachment usa : unitSupportAttachments) {\n-      for (final List<UnitSupportAttachment> bonusType : supportsAvailable) {\n+      for (final List<UnitSupportAttachment> bonusType :\n+          availableSupports.getSupportRules().values()) {", "originalCommit": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java b/game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java\nindex c1b01c434..f40de96ab 100644\n--- a/game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java\n+++ b/game-core/src/main/java/games/strategy/triplea/ai/pro/data/ProPurchaseOption.java\n\n@@ -287,7 +287,7 @@ public class ProPurchaseOption {\n     double totalSupportFactor = 0;\n     for (final UnitSupportAttachment usa : unitSupportAttachments) {\n       for (final List<UnitSupportAttachment> bonusType :\n-          availableSupports.getSupportRules().values()) {\n+          availableSupports.getUnitSupportAttachments()) {\n         if (!bonusType.contains(usa)) {\n           continue;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NTg3NA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512955874", "bodyText": "Is 'friendlySupportTracker' a legacy name when the 'supports' was a tracker? WDYT to rename these to 'friendlySupports' and 'enemySupports'\nAlso worth considering renaming 'enemySupports' to 'enemyNegativeBuffs'. 'enemySupports' sounds like we are tracking both defense and offense and the respective supports for each side. My understanding is the enemySupport here is an \"anti-support\" being imposed by enemy units (hence, a negative buff).", "author": "DanVanAtta", "createdAt": "2020-10-27T19:07:19Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;", "originalCommit": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2NzkyNg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513067926", "bodyText": "I renamed it to supportFromFriends and supportFromEnemies.  I didn't want to use enemyNegativeBuffs because it might not be a negative buff.  I haven't seen a case where an enemy support rule improved a unit but I have seen a case where a friend support rule hurt a unit.", "author": "trevan", "createdAt": "2020-10-27T22:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NTg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3Mjk1Mg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513072952", "bodyText": "Good point, I like the rename, it's more clear.", "author": "DanVanAtta", "createdAt": "2020-10-27T22:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NTg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nindex db5429862..2fc933b90 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n\n@@ -20,18 +20,21 @@ import lombok.Value;\n @Getter(AccessLevel.NONE)\n class AaDefenseCombatValue implements CombatValue {\n \n-  @NonNull GameData data;\n-  @NonNull AvailableSupports friendlySupportTracker;\n-  @NonNull AvailableSupports enemySupportTracker;\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @NonNull AvailableSupports supportFromFriends;\n+  @NonNull AvailableSupports supportFromEnemies;\n \n   @Override\n   public StrengthOrRollCalculator getRoll() {\n-    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseRoll(supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n   public StrengthOrRollCalculator getStrength() {\n-    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseStrength(gameData, supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk4NA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512956984", "bodyText": "It's a bit odd this class is not generic for either offense or defnese. Could you double check if it's possible to make the defense flag, a flag within the implementation.", "author": "DanVanAtta", "createdAt": "2020-10-27T19:09:20Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;", "originalCommit": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2NTMzOQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513065339", "bodyText": "The name of this class is AaDefenseCombatValue.  It can't be generic since it is for defense.  So I'm not sure what I can do.", "author": "trevan", "createdAt": "2020-10-27T22:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NDEyNw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513074127", "bodyText": "If internalizing the flag, then the class would presumably would be merged with the offense combat value class. I somewhat like that as it keeps the AA combat value concerns together, seemingly they are very similar classes.", "author": "DanVanAtta", "createdAt": "2020-10-27T22:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NTU2NQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513075565", "bodyText": "This flag is/will be used to generate the TotalPowerAndTotalStrength objects.  I might be able to flip the construction around so that TotalPowerAndTotalStrength has the defense flag instead of needing to grab it from CombatValue but that will have to be a future change.", "author": "trevan", "createdAt": "2020-10-27T22:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3Nzk2Mw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513077963", "bodyText": "And AaOffenseStrength and AaDefenseStrength are different.  I'll look at creating a parent class that shares the common roll calculator and just separates the strength calculators.", "author": "trevan", "createdAt": "2020-10-27T22:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NTMwOA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513085308", "bodyText": "I'm not sure a parent class will be the way to go. Have you considered injecting a strategy object that instead contains the common functionality?\n\n\nhttps://codeburst.io/inheritance-is-evil-stop-using-it-6c4f1caf5117\n\n\nhttps://softwareengineering.stackexchange.com/questions/260343/why-is-inheritance-generally-viewed-as-a-bad-thing-by-oop-proponents", "author": "DanVanAtta", "createdAt": "2020-10-27T23:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nindex db5429862..2fc933b90 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n\n@@ -20,18 +20,21 @@ import lombok.Value;\n @Getter(AccessLevel.NONE)\n class AaDefenseCombatValue implements CombatValue {\n \n-  @NonNull GameData data;\n-  @NonNull AvailableSupports friendlySupportTracker;\n-  @NonNull AvailableSupports enemySupportTracker;\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @NonNull AvailableSupports supportFromFriends;\n+  @NonNull AvailableSupports supportFromEnemies;\n \n   @Override\n   public StrengthOrRollCalculator getRoll() {\n-    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseRoll(supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n   public StrengthOrRollCalculator getStrength() {\n-    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseStrength(gameData, supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Njk5OQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512956999", "bodyText": "nit, any thoughts to rename data to gameData, then you can use a lombok @Getter to perhaps clean up the code a little bit.", "author": "DanVanAtta", "createdAt": "2020-10-27T19:09:23Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  @Override\n+  public GameData getGameData() {\n+    return data;", "originalCommit": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nindex db5429862..2fc933b90 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n\n@@ -20,18 +20,21 @@ import lombok.Value;\n @Getter(AccessLevel.NONE)\n class AaDefenseCombatValue implements CombatValue {\n \n-  @NonNull GameData data;\n-  @NonNull AvailableSupports friendlySupportTracker;\n-  @NonNull AvailableSupports enemySupportTracker;\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @NonNull AvailableSupports supportFromFriends;\n+  @NonNull AvailableSupports supportFromEnemies;\n \n   @Override\n   public StrengthOrRollCalculator getRoll() {\n-    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseRoll(supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n   public StrengthOrRollCalculator getStrength() {\n-    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseStrength(gameData, supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1ODExMg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512958112", "bodyText": "StrengthOrRollCalculator IMO is arguably a confusing concept. When is it is a strength calculator, when it is it a roll calculator. If we see an instance of it, do we know what it is or do we have to look at its state and trace back any interactions with the object to understand it. I think this hints to a SRP violation.\nIf we can break out \"StrengthOrRollCalculator\" into two interfaces, I believe that would resolve the above questions. Any thoughts/comments on options here @trevan ?", "author": "DanVanAtta", "createdAt": "2020-10-27T19:11:15Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  @Override\n+  public GameData getGameData() {\n+    return data;\n+  }\n+\n+  static class AaDefenseRoll extends StrengthOrRollCalculator {", "originalCommit": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2NDc1NA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513064754", "bodyText": "StrengthOrRollCalculator is an abstract class that shares common code that both the roll and strength calculators need.  I could duplicate the class but then both classes would be identical except for their names and that's a different problem.\nI could create a StrengthCalculator interface and a RollCalculator interface and give each of the child classes the corresponding interface but I don't think that will solve your issues with StrengthOrRollCalculator since it would still be around.\nSo, I'm not sure how to resolve your concerns.", "author": "trevan", "createdAt": "2020-10-27T22:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1ODExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MzM1MA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513073350", "bodyText": "Perhaps rename StrengthOrRollCalculator to StrengthAndRollCalculator? Or let's make it a more generic term, like CombatStrengthCalculator", "author": "DanVanAtta", "createdAt": "2020-10-27T22:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1ODExMg=="}], "type": "inlineReview", "revised_code": {"commit": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nindex db5429862..2fc933b90 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n\n@@ -20,18 +20,21 @@ import lombok.Value;\n @Getter(AccessLevel.NONE)\n class AaDefenseCombatValue implements CombatValue {\n \n-  @NonNull GameData data;\n-  @NonNull AvailableSupports friendlySupportTracker;\n-  @NonNull AvailableSupports enemySupportTracker;\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @NonNull AvailableSupports supportFromFriends;\n+  @NonNull AvailableSupports supportFromEnemies;\n \n   @Override\n   public StrengthOrRollCalculator getRoll() {\n-    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseRoll(supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n   public StrengthOrRollCalculator getStrength() {\n-    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseStrength(gameData, supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MDgwNw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512960807", "bodyText": "nit, unnecessary intermediate variable, can just return with a single line.\nIt is a bit interesting we don't return a RollValue directly in this method, that would make for stronger typing. Any thoughts about doing that?", "author": "DanVanAtta", "createdAt": "2020-10-27T19:15:56Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  @Override\n+  public GameData getGameData() {\n+    return data;\n+  }\n+\n+  static class AaDefenseRoll extends StrengthOrRollCalculator {\n+\n+    AaDefenseRoll(final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+      super(friendlySupport, enemySupport);\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {\n+      final RollValue rollValue =", "originalCommit": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2MjgxNA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513062814", "bodyText": "My initial work returned the RollValue.  But the only place it is used needs an int and I didn't see the need to have the caller call getValue when it can be done here in this getValue.  Otherwise, the code would look like:\nstrengthCalculator.getValue(unit).getValue();", "author": "trevan", "createdAt": "2020-10-27T22:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MDgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nindex db5429862..2fc933b90 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n\n@@ -20,18 +20,21 @@ import lombok.Value;\n @Getter(AccessLevel.NONE)\n class AaDefenseCombatValue implements CombatValue {\n \n-  @NonNull GameData data;\n-  @NonNull AvailableSupports friendlySupportTracker;\n-  @NonNull AvailableSupports enemySupportTracker;\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @NonNull AvailableSupports supportFromFriends;\n+  @NonNull AvailableSupports supportFromEnemies;\n \n   @Override\n   public StrengthOrRollCalculator getRoll() {\n-    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseRoll(supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n   public StrengthOrRollCalculator getStrength() {\n-    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseStrength(gameData, supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MjA1MQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r512962051", "bodyText": "I don't know if a 'rule filter' is cohesive to an API for defense combat value. This seems like it probably should belong to another interface, or a different class. Alternatively, the filter perhaps should accept a collection and then return a filtered result so that the caller is not aware that a predicate is being used. But again, offhand, filtering units seems to be a slightly different operation type compared to combat value calculation. Thoughts on any options around this?", "author": "DanVanAtta", "createdAt": "2020-10-27T19:18:18Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue implements CombatValue {\n+\n+  @NonNull GameData data;\n+  @NonNull AvailableSupports friendlySupportTracker;\n+  @NonNull AvailableSupports enemySupportTracker;\n+\n+  @Override\n+  public StrengthOrRollCalculator getRoll() {\n+    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public StrengthOrRollCalculator getStrength() {\n+    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  @Override\n+  public GameData getGameData() {\n+    return data;\n+  }\n+\n+  static class AaDefenseRoll extends StrengthOrRollCalculator {\n+\n+    AaDefenseRoll(final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+      super(friendlySupport, enemySupport);\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {\n+      final RollValue rollValue =\n+          RollValue.of(unit.getUnitAttachment().getMaxAaAttacks())\n+              .add(addSupport(unit, friendlySupportTracker))\n+              .add(addSupport(unit, enemySupportTracker));\n+      return rollValue.getValue();\n+    }\n+\n+    @Override\n+    protected Predicate<UnitSupportAttachment> getRuleFilter() {", "originalCommit": "b737f2cbbe09d73efd2578d7998435a4ea9f0104", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2MTM4Ng==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513061386", "bodyText": "I think I can get rid of the rule filter completely.  The initial place where unit support attachments is grabbed uses a filter similar to this.  I plan to look into it more once I've done more restructuring of this code.  So, I think this should stay for now and then later rework how the attachments are grabbed initially to not need this filter here.", "author": "trevan", "createdAt": "2020-10-27T22:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MjA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nindex db5429862..2fc933b90 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n\n@@ -20,18 +20,21 @@ import lombok.Value;\n @Getter(AccessLevel.NONE)\n class AaDefenseCombatValue implements CombatValue {\n \n-  @NonNull GameData data;\n-  @NonNull AvailableSupports friendlySupportTracker;\n-  @NonNull AvailableSupports enemySupportTracker;\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @NonNull AvailableSupports supportFromFriends;\n+  @NonNull AvailableSupports supportFromEnemies;\n \n   @Override\n   public StrengthOrRollCalculator getRoll() {\n-    return new AaDefenseRoll(friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseRoll(supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n   public StrengthOrRollCalculator getStrength() {\n-    return new AaDefenseStrength(data, friendlySupportTracker, enemySupportTracker);\n+    return new AaDefenseStrength(gameData, supportFromFriends, supportFromEnemies);\n   }\n \n   @Override\n"}}, {"oid": "51defbef70390e87a57bab2eac04d9b8c6501cbf", "url": "https://github.com/triplea-game/triplea/commit/51defbef70390e87a57bab2eac04d9b8c6501cbf", "message": "Rename variables and remove unneeded intermediate variables", "committedDate": "2020-10-27T22:35:43Z", "type": "commit"}, {"oid": "6d215219053a2e3f571c2c0d9ea4c478a8866f66", "url": "https://github.com/triplea-game/triplea/commit/6d215219053a2e3f571c2c0d9ea4c478a8866f66", "message": "Rename StrengthOrRollCalculator to StrengthAndRollCalculator", "committedDate": "2020-10-27T22:37:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4ODI1NA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513088254", "bodyText": "Is this still just defense strength? The javadoc and class name do not seem to agree", "author": "DanVanAtta", "createdAt": "2020-10-27T23:18:45Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaCombatValue.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a72821578156b8ef6089804ec1627489b86fc91a", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaCombatValue.java\ndeleted file mode 100644\nindex 0edad95b6..000000000\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaCombatValue.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-package games.strategy.triplea.delegate.power.calculator;\n-\n-import games.strategy.engine.data.GameData;\n-import games.strategy.engine.data.Unit;\n-import games.strategy.triplea.attachments.UnitSupportAttachment;\n-import java.util.function.Predicate;\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-import lombok.NonNull;\n-\n-/**\n- * Calculates defense strength and roll for AA/Targeted dice\n- *\n- * <p>This takes into account friendly support, and enemy support\n- */\n-@AllArgsConstructor\n-abstract class AaCombatValue implements CombatValue {\n-\n-  @Getter(onMethod = @__({@Override}))\n-  @NonNull\n-  GameData gameData;\n-\n-  @NonNull AvailableSupports supportFromFriends;\n-  @NonNull AvailableSupports supportFromEnemies;\n-\n-  @Override\n-  public StrengthAndRollCalculator getRoll() {\n-    return new AaRoll(supportFromFriends, supportFromEnemies);\n-  }\n-\n-  static class AaRoll extends StrengthAndRollCalculator {\n-\n-    AaRoll(final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n-      super(friendlySupport, enemySupport);\n-    }\n-\n-    @Override\n-    public int getValue(final Unit unit) {\n-      return RollValue.of(unit.getUnitAttachment().getMaxAaAttacks())\n-          .add(addSupport(unit, friendlySupportTracker))\n-          .add(addSupport(unit, enemySupportTracker))\n-          .getValue();\n-    }\n-\n-    @Override\n-    protected Predicate<UnitSupportAttachment> getRuleFilter() {\n-      return UnitSupportAttachment::getAaRoll;\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4OTM0OQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513089349", "bodyText": "For future consideration, a more specific name than 'getValue' could be of benefit. Specifically to consider, what kind of value are we returning? Is this the roll value, the total strength, or just the die-strength?", "author": "DanVanAtta", "createdAt": "2020-10-27T23:21:29Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+@Getter(AccessLevel.NONE)\n+class AaDefenseCombatValue extends AaCombatValue {\n+\n+  @Builder\n+  AaDefenseCombatValue(\n+      final GameData gameData,\n+      final AvailableSupports supportFromFriends,\n+      final AvailableSupports supportFromEnemies) {\n+    super(gameData, supportFromFriends, supportFromEnemies);\n+  }\n+\n+  @Override\n+  public StrengthAndRollCalculator getStrength() {\n+    return new AaDefenseStrength(gameData, supportFromFriends, supportFromEnemies);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  static class AaDefenseStrength extends StrengthAndRollCalculator {\n+\n+    private final GameData gameData;\n+\n+    AaDefenseStrength(\n+        final GameData gameData,\n+        final AvailableSupports friendlySupport,\n+        final AvailableSupports enemySupport) {\n+      super(friendlySupport, enemySupport);\n+      this.gameData = gameData;\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a72821578156b8ef6089804ec1627489b86fc91a", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\nindex cbcdadc70..780094b4e 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaDefenseCombatValue.java\n\n@@ -6,8 +6,8 @@ import games.strategy.triplea.attachments.UnitSupportAttachment;\n import java.util.function.Predicate;\n import lombok.AccessLevel;\n import lombok.Builder;\n-import lombok.EqualsAndHashCode;\n import lombok.Getter;\n+import lombok.NonNull;\n import lombok.Value;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MDA5MQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513090091", "bodyText": "There does not seem to be a lot going on in this class implementation. It looks like we could make AaCombatValue a concrete class by adding a boolean parameter for offense, defense, and adding a Supplier<StrengthAndRollCalculator> and then you could instantiate the base class and not need any inheritance.", "author": "DanVanAtta", "createdAt": "2020-10-27T23:23:53Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaOffenseCombatValue.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Calculates offense strength and roll for AA/Targeted dice\n+ *\n+ * <p>This takes into account friendly support, and enemy support\n+ */\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+@Getter(AccessLevel.NONE)\n+class AaOffenseCombatValue extends AaCombatValue {\n+\n+  @Builder\n+  AaOffenseCombatValue(\n+      final GameData gameData,\n+      final AvailableSupports supportFromFriends,\n+      final AvailableSupports supportFromEnemies) {\n+    super(gameData, supportFromFriends, supportFromEnemies);\n+  }\n+\n+  @Override\n+  public StrengthAndRollCalculator getStrength() {\n+    return new AaOffenseStrength(gameData, supportFromFriends, supportFromEnemies);", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a72821578156b8ef6089804ec1627489b86fc91a", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaOffenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaOffenseCombatValue.java\nindex 6acb82bf5..5de4f7450 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaOffenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AaOffenseCombatValue.java\n\n@@ -6,8 +6,8 @@ import games.strategy.triplea.attachments.UnitSupportAttachment;\n import java.util.function.Predicate;\n import lombok.AccessLevel;\n import lombok.Builder;\n-import lombok.EqualsAndHashCode;\n import lombok.Getter;\n+import lombok.NonNull;\n import lombok.Value;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MTM0Mg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513091342", "bodyText": "Any thoughts to use a guava multimap here? That datastructure is equivalent to a Map<X, Collection<Y>>\nAfter instantiating the map, you should be able to simplify and write:\nfinal var supportRules =     HashMultimap.create();\nentry.getValue().stream().filter(ruleFilter).forEach(supportRules::put)", "author": "DanVanAtta", "createdAt": "2020-10-27T23:27:49Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AvailableSupports.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/**\n+ * Tracks the available support that a collection of units can give to other units.\n+ *\n+ * <p>Once a support is used, it will no longer be available for other units to use.\n+ */\n+@Data\n+@Builder(access = AccessLevel.PRIVATE)\n+@AllArgsConstructor\n+class AvailableSupports {\n+\n+  static final AvailableSupports EMPTY_RESULT =\n+      AvailableSupports.builder()\n+          .supportRules(new HashMap<>())\n+          .supportUnits(new HashMap<>())\n+          .build();\n+\n+  final Map<UnitSupportAttachment.BonusType, List<UnitSupportAttachment>> supportRules;\n+  final Map<UnitSupportAttachment, IntegerMap<Unit>> supportUnits;\n+\n+  /** Sorts 'supportsAvailable' lists based on unit support attachment rules. */\n+  static AvailableSupports getSortedSupport(final SupportCalculator supportCalculator) {\n+    final AvailableSupports supportCalculationResult = getSupport(supportCalculator);\n+\n+    final SupportRuleSort supportRuleSort =\n+        SupportRuleSort.builder()\n+            .defense(supportCalculator.isDefence())\n+            .friendly(supportCalculator.isAllies())\n+            .roll(UnitSupportAttachment::getRoll)\n+            .strength(UnitSupportAttachment::getStrength)\n+            .build();\n+    supportCalculationResult\n+        .getSupportRules()\n+        .forEach((bonusType, unitSupportAttachment) -> unitSupportAttachment.sort(supportRuleSort));\n+    return supportCalculationResult;\n+  }\n+\n+  static AvailableSupports getSupport(final SupportCalculator supportCalculator) {\n+    return builder()\n+        .supportRules(supportCalculator.getSupportRules())\n+        .supportUnits(supportCalculator.getSupportUnits())\n+        .build();\n+  }\n+\n+  /** Constructs a filtered version of this */\n+  AvailableSupports filter(final Predicate<UnitSupportAttachment> ruleFilter) {\n+\n+    final Map<UnitSupportAttachment.BonusType, List<UnitSupportAttachment>> supportRules =", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNDAzMg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513124032", "bodyText": "I think this method might go away similar to the Predicate method that you commented on earlier.", "author": "trevan", "createdAt": "2020-10-28T01:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MTM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d67c26d874f6083fb221bb4fa590670145b2f541", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AvailableSupports.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AvailableSupports.java\nindex 360d6f502..4829e204c 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AvailableSupports.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AvailableSupports.java\n\n@@ -12,6 +12,7 @@ import lombok.AccessLevel;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n+import lombok.Getter;\n import org.triplea.java.collections.IntegerMap;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MjU3MA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513092570", "bodyText": "buildMain is a bit unclear here. It seems implied this is buildMainCombat, in which case I think that should be explicitly named to keep it easier on the reader.", "author": "DanVanAtta", "createdAt": "2020-10-27T23:31:51Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+\n+public interface CombatValue {\n+\n+  StrengthAndRollCalculator getRoll();\n+\n+  StrengthAndRollCalculator getStrength();\n+\n+  boolean isDefending();\n+\n+  GameData getGameData();\n+\n+  static CombatValue buildMain(", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzMDMxMA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513130310", "bodyText": "CombatValue.buildMainCombatValue() feels a little redundant so that's why I just left it as CombatValue.buildMain but I'll change the name.", "author": "trevan", "createdAt": "2020-10-28T01:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MjU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\nindex 7bf8b0875..a8e83e279 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\n\n@@ -17,7 +17,7 @@ public interface CombatValue {\n \n   GameData getGameData();\n \n-  static CombatValue buildMain(\n+  static CombatValue buildMainCombatValue(\n       final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n       final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,\n       final boolean defending,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MzEyMw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513093123", "bodyText": "side-note, 'waiting to die' is not very meaningful. We should consider renaming that to 'selectedAsCasualties' or simply 'casualties'. In the game, a 'casualty' is relatively well defined to be the units selected as casualties and able to fire back. The removal of casualties is a distinct phase, offense of course removes casualties immediately. 'waiting to die' I think is adding new terminology that is just more stuff to know/remember and is just inventing new domain terminology.", "author": "DanVanAtta", "createdAt": "2020-10-27T23:33:40Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+\n+public interface CombatValue {\n+\n+  StrengthAndRollCalculator getRoll();\n+\n+  StrengthAndRollCalculator getStrength();\n+\n+  boolean isDefending();\n+\n+  GameData getGameData();\n+\n+  static CombatValue buildMain(\n+      final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n+      final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNDM5NQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513124395", "bodyText": "WaitingToDie is the original name.  That terminology in a lot of places in the battle code.  So I'd rather not rename it just here.  It would need to be renamed in all the places as a separate PR.", "author": "trevan", "createdAt": "2020-10-28T01:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MzEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\nindex 7bf8b0875..a8e83e279 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\n\n@@ -17,7 +17,7 @@ public interface CombatValue {\n \n   GameData getGameData();\n \n-  static CombatValue buildMain(\n+  static CombatValue buildMainCombatValue(\n       final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n       final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,\n       final boolean defending,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5Mzg1MA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513093850", "bodyText": "boolean parameters are often best avoided. I suggest moving these factor methods to a factory class. In that case you can have an internal factory method (private) that has a boolean paramter, but the public methods would be buildMainOffensiveCombatValue and buildMainDefensiveCombatValue and buildAaDefensiveCombatValue\nIf those methods are in a CombatValueFactory, the suffix probably could be dropped, ie:\nbuildMainOffensive, etc..\nWDYT?", "author": "DanVanAtta", "createdAt": "2020-10-27T23:35:40Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+\n+public interface CombatValue {\n+\n+  StrengthAndRollCalculator getRoll();\n+\n+  StrengthAndRollCalculator getStrength();\n+\n+  boolean isDefending();\n+\n+  GameData getGameData();\n+\n+  static CombatValue buildMain(\n+      final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n+      final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,\n+      final boolean defending,", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTUyOA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513125528", "bodyText": "I'd love to replace all the usage of the boolean defending with the BattleState.Side enums.  It is used in a lot of places.  If you are ok with that, I could do that as a separate PR.\nAs for the factory change, let's wait on that.  I have a branch dependent on this where the construction of the CombatValue objects is moved up the call tree.  I think that might be a better PR to discuss how they are constructed.  It might make it more obvious on their construction.", "author": "trevan", "createdAt": "2020-10-28T01:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5Mzg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\nindex 7bf8b0875..a8e83e279 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\n\n@@ -17,7 +17,7 @@ public interface CombatValue {\n \n   GameData getGameData();\n \n-  static CombatValue buildMain(\n+  static CombatValue buildMainCombatValue(\n       final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n       final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,\n       final boolean defending,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDEyMw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513094123", "bodyText": "If we are just using the support rules from the GameData, what do you think about passing those support rules directly to the method API? That should help create a more testable interface and drops a dependency on GameData.", "author": "DanVanAtta", "createdAt": "2020-10-27T23:36:39Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+\n+public interface CombatValue {\n+\n+  StrengthAndRollCalculator getRoll();\n+\n+  StrengthAndRollCalculator getStrength();\n+\n+  boolean isDefending();\n+\n+  GameData getGameData();\n+\n+  static CombatValue buildMain(\n+      final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n+      final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,\n+      final boolean defending,\n+      final GameData data,\n+      final Territory location,\n+      final Collection<TerritoryEffect> territoryEffects) {\n+\n+    // Get all friendly supports\n+    final AvailableSupports supportFromFriends =\n+        AvailableSupports.getSortedSupport(\n+            new SupportCalculator(\n+                allFriendlyUnitsAliveOrWaitingToDie,\n+                data.getUnitTypeList().getSupportRules(),", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTgxNQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513125815", "bodyText": "Yup, that would be part of the Predicate change you commented on earlier.  The getSupportRules and getAaSupportRules uses a similar Predicate inside of them and I'd like to unify the logic in some manner and simplify it.", "author": "trevan", "createdAt": "2020-10-28T01:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\nindex 7bf8b0875..a8e83e279 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/CombatValue.java\n\n@@ -17,7 +17,7 @@ public interface CombatValue {\n \n   GameData getGameData();\n \n-  static CombatValue buildMain(\n+  static CombatValue buildMainCombatValue(\n       final Collection<Unit> allEnemyUnitsAliveOrWaitingToDie,\n       final Collection<Unit> allFriendlyUnitsAliveOrWaitingToDie,\n       final boolean defending,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDU5OQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513094599", "bodyText": "Is there a low luck variant of this class? \"normal dice\" makes me think there is a second defense combat value used for LL.", "author": "DanVanAtta", "createdAt": "2020-10-27T23:38:13Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Constants;\n+import games.strategy.triplea.attachments.RulesAttachment;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import games.strategy.triplea.delegate.TerritoryEffectHelper;\n+import java.util.Collection;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for normal dice", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNjQyNQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513126425", "bodyText": "roll and strength are the same for LL and non-LL.  So, no there isn't a low luck variant.  This is for \"non-AA\" dice but I didn't want to say that.  Any ideas on a better name?", "author": "trevan", "createdAt": "2020-10-28T01:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyNzMzMg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513927332", "bodyText": "Perhaps: Calculates defense strength and roll bonuses", "author": "DanVanAtta", "createdAt": "2020-10-29T03:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNDU3NQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r514004575", "bodyText": "Only problem I have with that is that these classes don't just calculate the bonus.  They calculate the final strength and roll value.  That includes adding the bonuses as well as limiting the value within the dice sides.  I've changed the text to say Calculates defense strength and roll for non-AA dice for now.", "author": "trevan", "createdAt": "2020-10-29T06:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java\nindex 931414352..bde21bca8 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java\n\n@@ -116,18 +116,18 @@ class MainDefenseCombatValue implements CombatValue {\n     }\n \n     private boolean isNegateDominatingFirstRoundAttack(final GamePlayer player) {\n-      final RulesAttachment ra =\n+      final RulesAttachment rulesAttachment =\n           (RulesAttachment) player.getAttachment(Constants.RULES_ATTACHMENT_NAME);\n-      return ra != null && ra.getNegateDominatingFirstRoundAttack();\n+      return rulesAttachment != null && rulesAttachment.getNegateDominatingFirstRoundAttack();\n     }\n \n     private boolean isDominatingFirstRoundAttack(final GamePlayer player) {\n       if (player == null) {\n         return false;\n       }\n-      final RulesAttachment ra =\n+      final RulesAttachment rulesAttachment =\n           (RulesAttachment) player.getAttachment(Constants.RULES_ATTACHMENT_NAME);\n-      return ra != null && ra.getDominatingFirstRoundAttack();\n+      return rulesAttachment != null && rulesAttachment.getDominatingFirstRoundAttack();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NTMyMA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513095320", "bodyText": "nit, please prefer to spell out variable names.\nra => rulesAttachment", "author": "DanVanAtta", "createdAt": "2020-10-27T23:40:16Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.Constants;\n+import games.strategy.triplea.attachments.RulesAttachment;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import games.strategy.triplea.delegate.TerritoryEffectHelper;\n+import java.util.Collection;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+/**\n+ * Calculates defense strength and roll for normal dice\n+ *\n+ * <p>This takes into account territory effects, friendly support, and enemy support\n+ */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class MainDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @NonNull AvailableSupports supportFromFriends;\n+  @NonNull AvailableSupports supportFromEnemies;\n+  @NonNull Collection<TerritoryEffect> territoryEffects;\n+\n+  @Override\n+  public StrengthAndRollCalculator getRoll() {\n+    return new MainDefenseRoll(supportFromFriends, supportFromEnemies);\n+  }\n+\n+  @Override\n+  public StrengthAndRollCalculator getStrength() {\n+    return new MainDefenseStrength(\n+        gameData, supportFromFriends, supportFromEnemies, territoryEffects);\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return true;\n+  }\n+\n+  static class MainDefenseRoll extends StrengthAndRollCalculator {\n+\n+    MainDefenseRoll(final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+      super(friendlySupport, enemySupport);\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {\n+      return RollValue.of(unit.getUnitAttachment().getDefenseRolls(unit.getOwner()))\n+          .add(addSupport(unit, friendlySupportTracker))\n+          .add(addSupport(unit, enemySupportTracker))\n+          .getValue();\n+    }\n+\n+    @Override\n+    protected Predicate<UnitSupportAttachment> getRuleFilter() {\n+      return UnitSupportAttachment::getRoll;\n+    }\n+  }\n+\n+  static class MainDefenseStrength extends StrengthAndRollCalculator {\n+\n+    private final GameData gameData;\n+    private final Collection<TerritoryEffect> territoryEffects;\n+\n+    MainDefenseStrength(\n+        final GameData gameData,\n+        final AvailableSupports friendlySupport,\n+        final AvailableSupports enemySupport,\n+        final Collection<TerritoryEffect> territoryEffects) {\n+      super(friendlySupport, enemySupport);\n+      this.gameData = gameData;\n+      this.territoryEffects = territoryEffects;\n+    }\n+\n+    @Override\n+    public int getValue(final Unit unit) {\n+      int strength = unit.getUnitAttachment().getDefense(unit.getOwner());\n+      boolean allowFriendly = true;\n+      if (isFirstTurnLimitedRoll(unit.getOwner())) {\n+        // if first turn is limited, the strength is a max of 1 and no friendly support\n+        strength = Math.min(1, strength);\n+        allowFriendly = false;\n+      }\n+      StrengthValue strengthValue =\n+          StrengthValue.of(gameData.getDiceSides(), strength)\n+              .add(\n+                  TerritoryEffectHelper.getTerritoryCombatBonus(\n+                      unit.getType(), territoryEffects, true));\n+\n+      if (allowFriendly) {\n+        strengthValue = strengthValue.add(addSupport(unit, friendlySupportTracker));\n+      }\n+      strengthValue = strengthValue.add(addSupport(unit, enemySupportTracker));\n+      return strengthValue.getValue();\n+    }\n+\n+    private boolean isFirstTurnLimitedRoll(final GamePlayer player) {\n+      // If player is null, Round > 1, or player has negate rule set: return false\n+      return !player.isNull()\n+          && gameData.getSequence().getRound() == 1\n+          && !isNegateDominatingFirstRoundAttack(player)\n+          && isDominatingFirstRoundAttack(gameData.getSequence().getStep().getPlayerId());\n+    }\n+\n+    private boolean isNegateDominatingFirstRoundAttack(final GamePlayer player) {\n+      final RulesAttachment ra =", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNjY4Ng==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513126686", "bodyText": "Ok.  This was moved code so I didn't make any changes to it.", "author": "trevan", "createdAt": "2020-10-28T01:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NTMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java\nindex 931414352..bde21bca8 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/MainDefenseCombatValue.java\n\n@@ -116,18 +116,18 @@ class MainDefenseCombatValue implements CombatValue {\n     }\n \n     private boolean isNegateDominatingFirstRoundAttack(final GamePlayer player) {\n-      final RulesAttachment ra =\n+      final RulesAttachment rulesAttachment =\n           (RulesAttachment) player.getAttachment(Constants.RULES_ATTACHMENT_NAME);\n-      return ra != null && ra.getNegateDominatingFirstRoundAttack();\n+      return rulesAttachment != null && rulesAttachment.getNegateDominatingFirstRoundAttack();\n     }\n \n     private boolean isDominatingFirstRoundAttack(final GamePlayer player) {\n       if (player == null) {\n         return false;\n       }\n-      final RulesAttachment ra =\n+      final RulesAttachment rulesAttachment =\n           (RulesAttachment) player.getAttachment(Constants.RULES_ATTACHMENT_NAME);\n-      return ra != null && ra.getDominatingFirstRoundAttack();\n+      return rulesAttachment != null && rulesAttachment.getDominatingFirstRoundAttack();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NjczMA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513096730", "bodyText": "More explanation about the expected behavior here would help. It's not clear what is meant by an infinite roll value, and what 'correctly limiting a value' would mean. EG: what is correct? What would be incorrect? What does it mean to 'limit' a roll value?", "author": "DanVanAtta", "createdAt": "2020-10-27T23:44:57Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Holds the value of a dice roll.\n+ *\n+ * <p>Handles infinite values and correctly limits the value", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java\nindex 6400cabbe..3207178a7 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java\n\n@@ -7,7 +7,7 @@ import lombok.Value;\n /**\n  * Holds the value of a dice roll.\n  *\n- * <p>Handles infinite values and correctly limits the value\n+ * <p>Handles infinite values and correctly limits the value to above 0\n  */\n @Value(staticConstructor = \"of\")\n @Getter(AccessLevel.NONE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODM3NA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513098374", "bodyText": "It looks like we get a no-op when the roll value is infinite. Could that be a silent bug? Why would a caller want to invoke a method for a no-op, it seems that the caller did not realize it was dealing with an infinite roll value.\nI think this leads to some bigger questions. Perhaps RollValue is not just a simple integer and should not be exposed as that. We have a getValue() method as well that returns a magic number to indicate if the roll value is infinite (which is a SRP violation, the number is then context dependent and either it means the roll value, or if it is a magic number then it tell us the roll value is infinite).\nI think this is probably solved by handling the infinite case at the point of the caller. For example, looking at:\n      return RollValue.of(unit.getUnitAttachment().getDefenseRolls(unit.getOwner()))\n          .add(addSupport(unit, friendlySupportTracker))\n          .add(addSupport(unit, enemySupportTracker))\n          .getValue();\n\nIf the roll value is infinite:\n\nare we wasting support?\nis the roll value being returned a -1, or some other number?\n\nIt's not really clear for the above two questions.", "author": "DanVanAtta", "createdAt": "2020-10-27T23:50:36Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Holds the value of a dice roll.\n+ *\n+ * <p>Handles infinite values and correctly limits the value\n+ */\n+@Value(staticConstructor = \"of\")\n+@Getter(AccessLevel.NONE)\n+class RollValue {\n+\n+  int value;\n+  boolean isInfinite;\n+\n+  static RollValue of(final int value) {\n+    return RollValue.of(value, value == -1);\n+  }\n+\n+  RollValue add(final int extraValue) {", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyODgyNw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513128827", "bodyText": "\"-1\" is how a map designer designates that a roll is infinite.  And if the map designer gives an AAroll bonus to a unit with infinite roll, than the bonus will be ignored since it doesn't make any sense.\nAnd the caller shouldn't care if it is infinite or not infinite.  It is taking the map support rules as designed by the map designer and adding it to the roll.  Now, maybe it should throw an exception so that the map designer knows that they are trying to give an AAroll bonus to the unit but the game engine doesn't have a way to notify just the map designer.\nAs for passing around the RollValue instead of a magic number \"-1\", that will be a fairly large change since all the callers and usages are expecting ints.  It also shares the same int structures with non RollValues.  I'd rather do that as a separate PR.", "author": "trevan", "createdAt": "2020-10-28T01:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java\nindex 6400cabbe..3207178a7 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/RollValue.java\n\n@@ -7,7 +7,7 @@ import lombok.Value;\n /**\n  * Holds the value of a dice roll.\n  *\n- * <p>Handles infinite values and correctly limits the value\n+ * <p>Handles infinite values and correctly limits the value to above 0\n  */\n @Value(staticConstructor = \"of\")\n @Getter(AccessLevel.NONE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODgzMg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513098832", "bodyText": "It does not seem to be clear whether this is roll value, or strength value. Would it make sense to have two abstract methods, one for each? This way any caller can explicitly ask for bonus rolls, or bonus strength without having to infer the value returning based on the instance of the object.", "author": "DanVanAtta", "createdAt": "2020-10-27T23:52:08Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates the value of the dice roll and strength. */\n+abstract class StrengthAndRollCalculator {\n+\n+  protected final AvailableSupports friendlySupportTracker;\n+  protected final AvailableSupports enemySupportTracker;\n+  // Keep track of the units that are providing support and whom they are providing it to\n+  @Getter private final Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n+\n+  StrengthAndRollCalculator(\n+      final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+    this.friendlySupportTracker = friendlySupport.filter(getRuleFilter());\n+    this.enemySupportTracker = enemySupport.filter(getRuleFilter());\n+  }\n+\n+  abstract int getValue(Unit unit);", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzMTA3Mg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513131072", "bodyText": "But calling getRolls from a strength calculator is incorrect.  So the caller would still need to know what the object instance is for them to know which method to call.\nHow about I switch StrengthAndRollCalculator to be composed inside of StrengthCalculator and RollCalculator?  Then each interface has its own clear method but the logic is still in one place.", "author": "trevan", "createdAt": "2020-10-28T01:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE4MDA4Ng==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513180086", "bodyText": "Can you explain that option a bit more? I don't think I quite follow the suggestion.\nA method like StrengthAndRollCalculator.getRolls() seems to make some sense, I would also expect a StrengthAndRollCAlculator.getStrength() method to be present too. Splitting the two could make sense, though the data & concept are somewhat coupled and were combined from what was previously just a Tuple<Int, Int>.\nIf you're willing to follow up, we can extract this to an issue and follow-up post-merge if that would make review and forward progress easier.", "author": "DanVanAtta", "createdAt": "2020-10-28T04:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMDE2NA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513520164", "bodyText": "Take a look at the new code.  There is now a StrengthCalculator and a RollCalculator interface.  The StrengthCalculator has getStrength and the RollCalculator has getRoll.  The implementing classes contain a reference to the StrengthAndRollCalculator (renamed as UsedSupportTracker) and use the public giveSupport and getSupportGiven methods to get the common logic.", "author": "trevan", "createdAt": "2020-10-28T15:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5ODgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "0e57f3a55be8814db75501cc563014fd8868b34f", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java\nindex 987da8807..206569045 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java\n\n@@ -1,32 +1,19 @@\n package games.strategy.triplea.delegate.power.calculator;\n \n import games.strategy.engine.data.Unit;\n-import games.strategy.triplea.attachments.UnitSupportAttachment;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.function.Predicate;\n import lombok.Getter;\n+import lombok.Value;\n import org.triplea.java.collections.IntegerMap;\n \n /** Calculates the value of the dice roll and strength. */\n-abstract class StrengthAndRollCalculator {\n-\n-  protected final AvailableSupports friendlySupportTracker;\n-  protected final AvailableSupports enemySupportTracker;\n+@Value\n+class StrengthAndRollCalculator {\n   // Keep track of the units that are providing support and whom they are providing it to\n-  @Getter private final Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n-\n-  StrengthAndRollCalculator(\n-      final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n-    this.friendlySupportTracker = friendlySupport.filter(getRuleFilter());\n-    this.enemySupportTracker = enemySupport.filter(getRuleFilter());\n-  }\n-\n-  abstract int getValue(Unit unit);\n-\n-  protected abstract Predicate<UnitSupportAttachment> getRuleFilter();\n+  @Getter Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n \n-  protected int addSupport(final Unit unit, final AvailableSupports supportTracker) {\n+  int addSupport(final Unit unit, final AvailableSupports supportTracker) {\n     final IntegerMap<Unit> supportGivenToUnit = supportTracker.giveSupportToUnit(unit);\n \n     supportGivenToUnit\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI4MQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513099281", "bodyText": "It's a bit difficult to understand the API of this method and what is being returned exactly. Is this a functional method, or are we modifying state. If modifying state, what does the return value represent?\nI think it would be easier for future maintainers to have this explicitly stated rather than being left to only reverse engineer the code.", "author": "DanVanAtta", "createdAt": "2020-10-27T23:53:34Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import lombok.Getter;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates the value of the dice roll and strength. */\n+abstract class StrengthAndRollCalculator {\n+\n+  protected final AvailableSupports friendlySupportTracker;\n+  protected final AvailableSupports enemySupportTracker;\n+  // Keep track of the units that are providing support and whom they are providing it to\n+  @Getter private final Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n+\n+  StrengthAndRollCalculator(\n+      final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n+    this.friendlySupportTracker = friendlySupport.filter(getRuleFilter());\n+    this.enemySupportTracker = enemySupport.filter(getRuleFilter());\n+  }\n+\n+  abstract int getValue(Unit unit);\n+\n+  protected abstract Predicate<UnitSupportAttachment> getRuleFilter();\n+\n+  protected int addSupport(final Unit unit, final AvailableSupports supportTracker) {", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e57f3a55be8814db75501cc563014fd8868b34f", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java\nindex 987da8807..206569045 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java\n\n@@ -1,32 +1,19 @@\n package games.strategy.triplea.delegate.power.calculator;\n \n import games.strategy.engine.data.Unit;\n-import games.strategy.triplea.attachments.UnitSupportAttachment;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.function.Predicate;\n import lombok.Getter;\n+import lombok.Value;\n import org.triplea.java.collections.IntegerMap;\n \n /** Calculates the value of the dice roll and strength. */\n-abstract class StrengthAndRollCalculator {\n-\n-  protected final AvailableSupports friendlySupportTracker;\n-  protected final AvailableSupports enemySupportTracker;\n+@Value\n+class StrengthAndRollCalculator {\n   // Keep track of the units that are providing support and whom they are providing it to\n-  @Getter private final Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n-\n-  StrengthAndRollCalculator(\n-      final AvailableSupports friendlySupport, final AvailableSupports enemySupport) {\n-    this.friendlySupportTracker = friendlySupport.filter(getRuleFilter());\n-    this.enemySupportTracker = enemySupport.filter(getRuleFilter());\n-  }\n-\n-  abstract int getValue(Unit unit);\n-\n-  protected abstract Predicate<UnitSupportAttachment> getRuleFilter();\n+  @Getter Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n \n-  protected int addSupport(final Unit unit, final AvailableSupports supportTracker) {\n+  int addSupport(final Unit unit, final AvailableSupports supportTracker) {\n     final IntegerMap<Unit> supportGivenToUnit = supportTracker.giveSupportToUnit(unit);\n \n     supportGivenToUnit\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTg1Mw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513099853", "bodyText": "nit, a die does not have strength.\nRephrasing suggestion:  Holds the value of units dice roll strength", "author": "DanVanAtta", "createdAt": "2020-10-27T23:55:15Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Holds the value of a dice strength", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyOTIzNQ==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513129235", "bodyText": "\"roll\" has another meaning already that means \"how many rolls a unit is allowed\".  I wouldn't want to use \"roll\" here since it is confusing terminology.", "author": "trevan", "createdAt": "2020-10-28T01:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE4MDU3NA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513180574", "bodyText": "Good point. We should fix \"dice strength\", a die does not have strength.\nPerhaps a \"units dice strength\" (?)\nOr call it the \"ToHitStrength\". Or, since we've defined power and strength, we perhaps could just call it a units \"strength\" and it should then be clear as we have defined strength.", "author": "DanVanAtta", "createdAt": "2020-10-28T04:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java\nindex 0d2af21b8..a86c150bf 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java\n\n@@ -7,7 +7,7 @@ import lombok.Value;\n /**\n  * Holds the value of a dice strength\n  *\n- * <p>Correctly limits the value\n+ * <p>Correctly limits the value to between 0 and diceSides\n  */\n @Value(staticConstructor = \"of\")\n @Getter(AccessLevel.NONE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDA0Nw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513100047", "bodyText": "Could you clarify what is meant by:  \"Correctly limits the value\"", "author": "DanVanAtta", "createdAt": "2020-10-27T23:55:52Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.Value;\n+\n+/**\n+ * Holds the value of a dice strength\n+ *\n+ * <p>Correctly limits the value", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b29b7acc641b3ba8d19b5da79161409c5902946", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java\nindex 0d2af21b8..a86c150bf 100644\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java\n+++ b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthValue.java\n\n@@ -7,7 +7,7 @@ import lombok.Value;\n /**\n  * Holds the value of a dice strength\n  *\n- * <p>Correctly limits the value\n+ * <p>Correctly limits the value to between 0 and diceSides\n  */\n @Value(staticConstructor = \"of\")\n @Getter(AccessLevel.NONE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDIyOA==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513100228", "bodyText": "Is the code in this class all just moved code? Anything new or modified here?", "author": "DanVanAtta", "createdAt": "2020-10-27T23:56:26Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/SupportCalculator.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitSupportAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates how much support units can give */\n+@Value\n+@Getter(value = AccessLevel.PACKAGE)\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public class SupportCalculator {", "originalCommit": "358ef3cd56818992717ad7261a71ca129acd2c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyOTU4Ng==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513129586", "bodyText": "The only change is supportRules is now Map<UnitSupportAttachment.BonusType, List<UnitSupportAttachments>> instead of List<List<UnitSupportAttachments>>", "author": "trevan", "createdAt": "2020-10-28T01:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE4MDkxMg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513180912", "bodyText": "Thanks \ud83d\udc4d\nAny thoughts to use multimap here?\nGuava's multimap is a data structure to represent Map<X, List<Y>>", "author": "DanVanAtta", "createdAt": "2020-10-28T04:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxNDQyNg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513514426", "bodyText": "Good idea.  I didn't want to make too big of a change to this code, though.  I want to get better tests around it and then try and make the code easier to understand.", "author": "trevan", "createdAt": "2020-10-28T14:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDIyOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a72821578156b8ef6089804ec1627489b86fc91a", "url": "https://github.com/triplea-game/triplea/commit/a72821578156b8ef6089804ec1627489b86fc91a", "message": "Move common Offense/DefenseAaRoll classes to its own class", "committedDate": "2020-10-28T01:18:26Z", "type": "commit"}, {"oid": "4b29b7acc641b3ba8d19b5da79161409c5902946", "url": "https://github.com/triplea-game/triplea/commit/4b29b7acc641b3ba8d19b5da79161409c5902946", "message": "Improve names and comments", "committedDate": "2020-10-28T01:51:04Z", "type": "commit"}, {"oid": "0e57f3a55be8814db75501cc563014fd8868b34f", "url": "https://github.com/triplea-game/triplea/commit/0e57f3a55be8814db75501cc563014fd8868b34f", "message": "Split StrengthAndRollCalculators into StrengthCalculator/RollCalculator", "committedDate": "2020-10-28T02:47:35Z", "type": "commit"}, {"oid": "5fe777089822ac719fbe5c5830f769f3dd4e54de", "url": "https://github.com/triplea-game/triplea/commit/5fe777089822ac719fbe5c5830f769f3dd4e54de", "message": "Add documentation for giveSupport", "committedDate": "2020-10-28T02:53:14Z", "type": "commit"}, {"oid": "5fe777089822ac719fbe5c5830f769f3dd4e54de", "url": "https://github.com/triplea-game/triplea/commit/5fe777089822ac719fbe5c5830f769f3dd4e54de", "message": "Add documentation for giveSupport", "committedDate": "2020-10-28T02:53:14Z", "type": "forcePushed"}, {"oid": "0669bf4be734b7b55a6ded14ddb4ca20e0360615", "url": "https://github.com/triplea-game/triplea/commit/0669bf4be734b7b55a6ded14ddb4ca20e0360615", "message": "Minor comment change to be clearer", "committedDate": "2020-10-28T15:00:47Z", "type": "commit"}, {"oid": "d3832f8956d4c721c77f1e8ffa13de27980f565f", "url": "https://github.com/triplea-game/triplea/commit/d3832f8956d4c721c77f1e8ffa13de27980f565f", "message": "Rename StrengthAndRollCalculator as UsedSupportTracker", "committedDate": "2020-10-28T15:05:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyODUxMw==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r513928513", "bodyText": "might be worthwhile clarifying if the support is a strength bonus or a roll bonus. Is there a way to know which one will be returned?", "author": "DanVanAtta", "createdAt": "2020-10-29T03:44:44Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java", "diffHunk": "@@ -13,8 +13,18 @@\n   // Keep track of the units that are providing support and whom they are providing it to\n   @Getter Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n \n-  int addSupport(final Unit unit, final AvailableSupports supportTracker) {\n-    final IntegerMap<Unit> supportGivenToUnit = supportTracker.giveSupportToUnit(unit);\n+  /**\n+   * Gives support to the unit and removes it from the availableSupport\n+   *\n+   * <p>Each time this is called, the amount of available support will decrease equal to the amount\n+   * returned.\n+   *\n+   * @param unit Unit to have support given to it\n+   * @param availableSupport Keeps state of what support is still available\n+   * @return the amount of support given", "originalCommit": "5fe777089822ac719fbe5c5830f769f3dd4e54de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwMjgxNg==", "url": "https://github.com/triplea-game/triplea/pull/7891#discussion_r514002816", "bodyText": "There isn't a way to determine if it is a strength or roll bonus.  That is controlled by the list of support rules in AvailableSupports.\nI just removed this file, though.  The logic that it had looked like it fit better in AvailableSupports.  So now the supportGiven map is managed in AvailableSupports and the CombatValue classes will merge the two supportGiven maps from the friendly and enemy supports.", "author": "trevan", "createdAt": "2020-10-29T06:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyODUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d67c26d874f6083fb221bb4fa590670145b2f541", "chunk": "diff --git a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java b/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java\ndeleted file mode 100644\nindex 1f883979e..000000000\n--- a/game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/StrengthAndRollCalculator.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-package games.strategy.triplea.delegate.power.calculator;\n-\n-import games.strategy.engine.data.Unit;\n-import java.util.HashMap;\n-import java.util.Map;\n-import lombok.Getter;\n-import lombok.Value;\n-import org.triplea.java.collections.IntegerMap;\n-\n-/** Calculates the value of the dice roll and strength. */\n-@Value\n-class StrengthAndRollCalculator {\n-  // Keep track of the units that are providing support and whom they are providing it to\n-  @Getter Map<Unit, IntegerMap<Unit>> supportGiven = new HashMap<>();\n-\n-  /**\n-   * Gives support to the unit and removes it from the availableSupport\n-   *\n-   * <p>Each time this is called, the amount of available support will decrease equal to the amount\n-   * returned.\n-   *\n-   * @param unit Unit to have support given to it\n-   * @param availableSupport Keeps state of what support is still available\n-   * @return the amount of support given\n-   */\n-  int giveSupport(final Unit unit, final AvailableSupports availableSupport) {\n-    final IntegerMap<Unit> supportGivenToUnit = availableSupport.giveSupportToUnit(unit);\n-\n-    supportGivenToUnit\n-        .keySet()\n-        .forEach(\n-            (supporter) -> {\n-              supportGiven\n-                  .computeIfAbsent(supporter, (newSupport) -> new IntegerMap<>())\n-                  .add(unit, supportGivenToUnit.getInt(supporter));\n-            });\n-\n-    return supportGivenToUnit.totalValues();\n-  }\n-}\n"}}, {"oid": "d67c26d874f6083fb221bb4fa590670145b2f541", "url": "https://github.com/triplea-game/triplea/commit/d67c26d874f6083fb221bb4fa590670145b2f541", "message": "Track the support given in AvailableSupports instead of the CombatValue classes", "committedDate": "2020-10-29T06:02:06Z", "type": "commit"}, {"oid": "a23191b96c2ecd4294eefe390ed1bc9d5478bd99", "url": "https://github.com/triplea-game/triplea/commit/a23191b96c2ecd4294eefe390ed1bc9d5478bd99", "message": "Reword 'normal dice' as 'non-AA dice'", "committedDate": "2020-10-29T06:06:44Z", "type": "commit"}]}