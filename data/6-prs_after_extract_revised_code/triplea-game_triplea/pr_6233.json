{"pr_number": 6233, "pr_title": "Cache unit support information to speed up AI.", "pr_createdAt": "2020-04-13T17:46:28Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6233", "timeline": [{"oid": "c881fa4279aa2ef10313cfa5325f6ef2b2efe2b8", "url": "https://github.com/triplea-game/triplea/commit/c881fa4279aa2ef10313cfa5325f6ef2b2efe2b8", "message": "Cache unit support information to speed up AI.\n\nComputing this dominated the battle simulation code, which is also\nused heavily in AI logic.\n\nThe cpu time (across threads) of DiceRoll.getSortedSupport() over\none round of an all-AI Domination 1914 game took 175 seconds prior\nto this change. After this change, it was 14 seconds.", "committedDate": "2020-04-13T17:43:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxOTU4OA==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407619588", "bodyText": "Did you happen to measure if there is a performance boost of using parallel stream here instead of stream? parallel stream is oddly often slower than stream.", "author": "DanVanAtta", "createdAt": "2020-04-13T17:56:37Z", "path": "game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java", "diffHunk": "@@ -40,6 +44,22 @@ public UnitType getUnitType(final String name) {\n     return types;\n   }\n \n+  /**\n+   * Returns the unit support rules for the unit types. Computed once and cached afterwards.\n+   *\n+   * @return The unit support rules.\n+   */\n+  public Set<UnitSupportAttachment> getSupportRules() {\n+    if (supportRules == null) {\n+      supportRules =\n+          UnitSupportAttachment.get(getData())\n+              .parallelStream()", "originalCommit": "c881fa4279aa2ef10313cfa5325f6ef2b2efe2b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMzk0NQ==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407623945", "bodyText": "I didn't try it, but I don't think it would make a big difference. The main issue was this was being called a lot and this change makes it get called just once, so it goes from taking a long time to taking no time at all (the remaining work in getSortedSupport() is the result of the other calls that function does).", "author": "asvitkine", "createdAt": "2020-04-13T18:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxOTU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMTQ0Nw==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407631447", "bodyText": "I'd recommend giving it a quick measure if you can. If not, blindly replacing with a standard stream.\nSmall tasks run in parallel often are actually much slower, it's surprising (I think the reasoning is the overhead for thread coordination is a lot, streams are not yet very optimized by the JDK, meanwhile single-threaded iteration is highly optimized still). Essentially it's to the point that one should not use parallel stream unless it has been benchmarked.\nThoughts?", "author": "DanVanAtta", "createdAt": "2020-04-13T18:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxOTU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0OTI0Mg==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407749242", "bodyText": "Tried it out and using parallelStream() is indeed slower (about 3x slower - 0.9ms vs. 0.3ms). I'll make the change. :)", "author": "asvitkine", "createdAt": "2020-04-13T22:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxOTU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b2eced3deac884bad95d592cf15c7854f0fd6961", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java b/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\nindex b8c9d1863..4aedca553 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\n\n@@ -52,8 +53,7 @@ public class UnitTypeList extends GameDataComponent implements Iterable<UnitType\n   public Set<UnitSupportAttachment> getSupportRules() {\n     if (supportRules == null) {\n       supportRules =\n-          UnitSupportAttachment.get(getData())\n-              .parallelStream()\n+          UnitSupportAttachment.get(getData()).stream()\n               .filter(usa -> (usa.getRoll() || usa.getStrength()))\n               .collect(Collectors.toSet());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDYyOQ==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407620629", "bodyText": "If support rules are only used in DiceRoll, what's the rational to move them to UnitTypeList?", "author": "DanVanAtta", "createdAt": "2020-04-13T17:58:18Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -997,14 +997,9 @@ public static void getSortedSupport(\n       final GameData data,\n       final boolean defence,\n       final boolean allies) {\n-    final Set<UnitSupportAttachment> rules =\n-        UnitSupportAttachment.get(data)\n-            .parallelStream()\n-            .filter(usa -> (usa.getRoll() || usa.getStrength()))\n-            .collect(Collectors.toSet());\n     getSupport(\n         unitsGivingTheSupport,\n-        rules,\n+        data.getUnitTypeList().getSupportRules(),", "originalCommit": "c881fa4279aa2ef10313cfa5325f6ef2b2efe2b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNDkwNw==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407624907", "bodyText": "The rational is to cache it on the per GameData instance. Originally I had it in GameData, but GameData was already doing a lot of different things and had an abstraction for its UnitTypeList, so it seems like a natural place to put it.", "author": "asvitkine", "createdAt": "2020-04-13T18:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNDc4MQ==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407634781", "bodyText": "This might be a damned if you do, damned if you don't kind of situation.\nWith the move, we're going to be assuming that UnitTypeList is a singleton, which is arguably a bit assumption. UnitTypeList is also not much of a data structure, I think it's a candidate for us to inline all of its methods to where they are used and removed.\nSupport rules and the existing support code totally do not belong in DiceRoll either. Though, reaching out to another class to grab data to be used in a local computation is also a code smell as well.\nI think a third approach, extracting the support method and the support cache to a new class so that it does not live in either DiceRoll nor UnitTypeList is probably the way to go. I can see that being too much for the scope of this update.\nI'd be most comfortable if we had the support rules stay local to DiceRoll for now, or going with the expanded scope route.\nOne concern is for serialization, as a GameDataComponent the UnitTypeList will be serialized to disk. That means after this update, any save game will require the support set field to be present, moving it later will break save-game compatibility. I think that would perhaps be the biggest reasoning to avoid a cached object in GameDataComponent, so that transient data is not persisted to save game files.", "author": "DanVanAtta", "createdAt": "2020-04-13T18:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NjMyMw==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407746323", "bodyText": "The cache has to be per-game data, though.\nSo we either need to hang it off GameData (does that mean it will be part of save games?) or we hold a map keyed by GameData which is extra complexity and either a memory leak or we need a way to clear that cache otherwise.", "author": "asvitkine", "createdAt": "2020-04-13T22:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1MDk0Nw==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407750947", "bodyText": "Also, my current implementation doesn't actually assume UnitTypeList is a singleton.\nIf in the future, this is called on other UnitTypeLists, everything works fine. They cache their associated support rules and everything works fine.\nGiven that any solution where the cache doesn't hang off GameData somehow results in a memory leak or needing to do lifetime management (e.g. when a game is closed, to go clear out these caches that would be keyed by GameData), I don't think it's a good idea to keep the cache separate.\nFor save game serialization, we can mark the field transient. WDYT?", "author": "asvitkine", "createdAt": "2020-04-13T22:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMzA5OQ==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407803099", "bodyText": "Anything that extends GameDataComponent will become part of save games.\nMaking it transient could do the trick indeed. Just please be sure to double check that it nulls out when you save and load and that the cache is refreshed after loading.", "author": "DanVanAtta", "createdAt": "2020-04-14T00:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxNDg5Ng==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407814896", "bodyText": "Thanks! I did the test and confirmed that loading the save game results in the field being null.", "author": "asvitkine", "createdAt": "2020-04-14T01:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMDM3OQ==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407820379", "bodyText": "Cool, thanks for checking \ud83d\udc4d", "author": "DanVanAtta", "createdAt": "2020-04-14T01:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDYyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjY0MA==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407622640", "bodyText": "side-note, the method consuming this is overspecified\n  private static void getSupport(\n      final Collection<Unit> unitsGivingTheSupport,\n      final Set<UnitSupportAttachment> rules,\n      :\n\nWith the above, a consequence is if you have a List of rules, or any other non-Set collection, then you need to do a needless copy into a set. That method works fine when the collection type is changed to a Collection, ie:\n  private static void getSupport(\n      final Collection<Unit> unitsGivingTheSupport,\n      final Collection<UnitSupportAttachment> rules,\n     :", "author": "DanVanAtta", "createdAt": "2020-04-13T18:01:37Z", "path": "game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java", "diffHunk": "@@ -40,6 +44,22 @@ public UnitType getUnitType(final String name) {\n     return types;\n   }\n \n+  /**\n+   * Returns the unit support rules for the unit types. Computed once and cached afterwards.\n+   *\n+   * @return The unit support rules.\n+   */\n+  public Set<UnitSupportAttachment> getSupportRules() {", "originalCommit": "c881fa4279aa2ef10313cfa5325f6ef2b2efe2b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxNTYyNQ==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407815625", "bodyText": "I think it's a bit of a philosophical question - that applies to not just here. Would it be valid to repeat the same UnitSupportAttachment rule multiple times in the list? If logically that does not make sense, then to me it seems valid to use a Set to codify that in the API rather than a Collection which doesn't carry that guarantee when the function should not expect the same instance repeated in the collection.", "author": "asvitkine", "createdAt": "2020-04-14T01:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxODQwMA==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407818400", "bodyText": "It's a matter of contract. A contract that accepts a set says \"you must give me a set, otherwise there will be errors in how I do computation\". Part of it is letting go and trusting the implementation that is passed is what the caller intends. If the caller is happy passing you duplicates, and you can process duplicates, then there is no real issue.\nIf non-duplicates are needed for correctness, then it makes sense to require a set (at which point it's very justified to force callers to convert their list to a set). If duplicates are just inefficient, then it's on the caller for not doing the cleanup first, and you may be incurring worse efficiencies by forcing a collection copy. At the end of the day it's a trust that the implementation type satisfies any contract that you need. If you need unique items, then the contract should be set, if you need ordering, then list, if you really don't care (but set would be more efficient), then use collection and hope that callers give you a set (or handle it in the processing).", "author": "DanVanAtta", "createdAt": "2020-04-14T01:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxOTg5MA==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407819890", "bodyText": "From another perspective, it's simply the caller that often decides if duplicates are allowed or not. They instantiate the data, they likely use it in other places/ways - they probably are passing you a set. Otherwise, set should be required as an input when it is required for correctness, it enforces a contract. Needless enforcement between list and set often results in a lots of unnecessary data copy. When done well, using abstract types, often the concrete type is defined in just one place, can be changed, and everything just works with minimal to no copying of collection data.", "author": "DanVanAtta", "createdAt": "2020-04-14T01:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "b2eced3deac884bad95d592cf15c7854f0fd6961", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java b/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\nindex b8c9d1863..4aedca553 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\n\n@@ -52,8 +53,7 @@ public class UnitTypeList extends GameDataComponent implements Iterable<UnitType\n   public Set<UnitSupportAttachment> getSupportRules() {\n     if (supportRules == null) {\n       supportRules =\n-          UnitSupportAttachment.get(getData())\n-              .parallelStream()\n+          UnitSupportAttachment.get(getData()).stream()\n               .filter(usa -> (usa.getRoll() || usa.getStrength()))\n               .collect(Collectors.toSet());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMzQ5Nw==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407623497", "bodyText": "Are you sure that usa, unit support attachment getStrength will never change?", "author": "DanVanAtta", "createdAt": "2020-04-13T18:03:10Z", "path": "game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java", "diffHunk": "@@ -40,6 +44,22 @@ public UnitType getUnitType(final String name) {\n     return types;\n   }\n \n+  /**\n+   * Returns the unit support rules for the unit types. Computed once and cached afterwards.\n+   *\n+   * @return The unit support rules.\n+   */\n+  public Set<UnitSupportAttachment> getSupportRules() {\n+    if (supportRules == null) {\n+      supportRules =\n+          UnitSupportAttachment.get(getData())\n+              .parallelStream()\n+              .filter(usa -> (usa.getRoll() || usa.getStrength()))", "originalCommit": "c881fa4279aa2ef10313cfa5325f6ef2b2efe2b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNTQxNA==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407625414", "bodyText": "I am not actually. If it can change, then there should be logic to invalidate the cached info.\nDo you know who the right person would be to give a definitive answer?", "author": "asvitkine", "createdAt": "2020-04-13T18:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMzQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNzc4Mg==", "url": "https://github.com/triplea-game/triplea/pull/6233#discussion_r407637782", "bodyText": "It looks like it will not change after a game data has been loaded:\nUnitSupportAttachment.java:\n        .put(\"strength\", MutableProperty.ofReadOnly(this::getStrength))\n\n  public static <T> MutableProperty<T> ofReadOnly(final Supplier<T> getter) {\n    return of(noSetter(), noStringSetter(), getter, noResetter());\n  }\n\n    <attachment name=\"supportAttachmentFortificationbritishex\" attachTo=\"britishFortification\" javaClass=\"games.strategy.triplea.attachments.UnitSupportAttachment\" type=\"unitType\">\n      <option name=\"unitType\" value=\"britishInfantry:britishMarine:britishCombatEngineer:britishAlpineInfantry:britishParatrooper:russianInfantry:russianMarine:russianCombatEngineer:russianAlpineInfantry:russianParatrooper:americanInfantry:americanMarine:americanCombatEngineer:americanAlpineInfantry:americanParatrooper:chineseInfantry:chineseCombatEngineer:chineseAlpineInfantry\"/>\n      <option name=\"faction\" value=\"allied\"/>\n      <option name=\"side\" value=\"defence\"/>\n      <option name=\"dice\" value=\"strength\"/>\n      <option name=\"bonus\" value=\"2\"/>\n      <option name=\"number\" value=\"3\"/>\n      <option name=\"bonusType\" value=\"FortBonus\"/>\n      <option name=\"impArtTech\" value=\"false\"/>\n      <option name=\"players\" value=\"ExiledAllies\"/>\n    </attachment>\n\nSetting a breakpoint on getStrength to double check when it is loaded could help definitely answer the question.", "author": "DanVanAtta", "createdAt": "2020-04-13T18:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMzQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b2eced3deac884bad95d592cf15c7854f0fd6961", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java b/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\nindex b8c9d1863..4aedca553 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/UnitTypeList.java\n\n@@ -52,8 +53,7 @@ public class UnitTypeList extends GameDataComponent implements Iterable<UnitType\n   public Set<UnitSupportAttachment> getSupportRules() {\n     if (supportRules == null) {\n       supportRules =\n-          UnitSupportAttachment.get(getData())\n-              .parallelStream()\n+          UnitSupportAttachment.get(getData()).stream()\n               .filter(usa -> (usa.getRoll() || usa.getStrength()))\n               .collect(Collectors.toSet());\n     }\n"}}, {"oid": "b2eced3deac884bad95d592cf15c7854f0fd6961", "url": "https://github.com/triplea-game/triplea/commit/b2eced3deac884bad95d592cf15c7854f0fd6961", "message": "Use stream() and mark field transient.", "committedDate": "2020-04-13T22:17:26Z", "type": "commit"}]}