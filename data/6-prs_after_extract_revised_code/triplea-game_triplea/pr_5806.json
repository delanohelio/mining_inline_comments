{"pr_number": 5806, "pr_title": "Bump error_prone_core from 2.3.3 to 2.3.4", "pr_createdAt": "2020-01-01T07:20:08Z", "pr_url": "https://github.com/triplea-game/triplea/pull/5806", "timeline": [{"oid": "7b72fe9c17dae2bf95564425b3425576601aa677", "url": "https://github.com/triplea-game/triplea/commit/7b72fe9c17dae2bf95564425b3425576601aa677", "message": "Bump error_prone_core from 2.3.3 to 2.3.4\n\nBumps [error_prone_core](https://github.com/google/error-prone) from 2.3.3 to 2.3.4.\n- [Release notes](https://github.com/google/error-prone/releases)\n- [Commits](https://github.com/google/error-prone/compare/v2.3.3...v2.3.4)\n\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>", "committedDate": "2020-01-01T20:54:33Z", "type": "forcePushed"}, {"oid": "13430acc821b257844a3e017b23cbf8155517708", "url": "https://github.com/triplea-game/triplea/commit/13430acc821b257844a3e017b23cbf8155517708", "message": "Bump error_prone_core from 2.3.3 to 2.3.4\n\nBumps [error_prone_core](https://github.com/google/error-prone) from 2.3.3 to 2.3.4.\n- [Release notes](https://github.com/google/error-prone/releases)\n- [Commits](https://github.com/google/error-prone/compare/v2.3.3...v2.3.4)\n\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>", "committedDate": "2020-01-02T07:56:16Z", "type": "commit"}, {"oid": "13430acc821b257844a3e017b23cbf8155517708", "url": "https://github.com/triplea-game/triplea/commit/13430acc821b257844a3e017b23cbf8155517708", "message": "Bump error_prone_core from 2.3.3 to 2.3.4\n\nBumps [error_prone_core](https://github.com/google/error-prone) from 2.3.3 to 2.3.4.\n- [Release notes](https://github.com/google/error-prone/releases)\n- [Commits](https://github.com/google/error-prone/compare/v2.3.3...v2.3.4)\n\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>", "committedDate": "2020-01-02T07:56:16Z", "type": "forcePushed"}, {"oid": "062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "url": "https://github.com/triplea-game/triplea/commit/062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "message": "Fix errorprone errors", "committedDate": "2020-01-02T10:05:55Z", "type": "commit"}, {"oid": "fd66f385b044cdf83aeaf08c7922ee2e834282ce", "url": "https://github.com/triplea-game/triplea/commit/fd66f385b044cdf83aeaf08c7922ee2e834282ce", "message": "Fix method ordering", "committedDate": "2020-01-02T10:25:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMDM3Mw==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363120373", "bodyText": "The supplier was important before, I forget the exact reasoning why :(\nI think the issue is that the read contents are cached. It was a deceptive situation previously where tests passed but they were reading stale input and a re-ordering of tests caused a failure. The other issue might have been input stream being re-read/exhausted. Again, can't really recall what the subtle point was (should have documented it), it's worth taking a double check here.", "author": "DanVanAtta", "createdAt": "2020-01-05T22:08:05Z", "path": "game-core/src/test/java/org/triplea/live/servers/ServerYamlParserTest.java", "diffHunk": "@@ -12,19 +12,19 @@\n import java.io.InputStream;\n import java.net.URI;\n import java.util.List;\n-import java.util.function.Supplier;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n import org.triplea.util.Version;\n \n class ServerYamlParserTest {\n \n-  private static final Supplier<InputStream> SAMPLE_FILE_INPUT =", "originalCommit": "062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMDQ4MQ==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363120481", "bodyText": "Well I haven't converted it to a constant (because I assume that would've read the file too early potentially?), just made it a method so we should be fine", "author": "RoiEXLab", "createdAt": "2020-01-05T22:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMDM3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMDQyMA==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363120420", "bodyText": "The method name seems out of date, perhaps we would just as well inline the supplier where it's needed?", "author": "DanVanAtta", "createdAt": "2020-01-05T22:09:04Z", "path": "http-clients/src/test/java/org/triplea/http/client/SystemIdHeaderTest.java", "diffHunk": "@@ -14,18 +13,23 @@\n @ExtendWith(MockitoExtension.class)\n class SystemIdHeaderTest {\n   private static final String SYSTEM_ID = \"system-id\";\n-  private static final Supplier<SystemId> SYSTEM_ID_SUPPLIER = () -> SystemId.of(SYSTEM_ID);\n+\n+  private static SystemId systemIdSupplier() {\n+    return SystemId.of(SYSTEM_ID);", "originalCommit": "062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNDYxMA==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363124610", "bodyText": "Resolved with: bbabe3f", "author": "DanVanAtta", "createdAt": "2020-01-05T23:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMDQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "bbabe3f56fec05e1933454823389ba6e1dd99fde", "chunk": "diff --git a/http-clients/src/test/java/org/triplea/http/client/SystemIdHeaderTest.java b/http-clients/src/test/java/org/triplea/http/client/SystemIdHeaderTest.java\nindex b9253fd398..8403255c8e 100644\n--- a/http-clients/src/test/java/org/triplea/http/client/SystemIdHeaderTest.java\n+++ b/http-clients/src/test/java/org/triplea/http/client/SystemIdHeaderTest.java\n\n@@ -14,22 +14,16 @@ import org.triplea.domain.data.SystemId;\n class SystemIdHeaderTest {\n   private static final String SYSTEM_ID = \"system-id\";\n \n-  private static SystemId systemIdSupplier() {\n-    return SystemId.of(SYSTEM_ID);\n-  }\n-\n   @Test\n   void headerHasExpectedKey() {\n-    final Map<String, Object> headers =\n-        SystemIdHeader.headers(SystemIdHeaderTest::systemIdSupplier);\n+    final Map<String, Object> headers = SystemIdHeader.headers(() -> SystemId.of(SYSTEM_ID));\n \n     assertThat(headers.keySet(), hasItem(SystemIdHeader.SYSTEM_ID_HEADER));\n   }\n \n   @Test\n   void headersHasExpectedValue() {\n-    final Map<String, Object> headers =\n-        SystemIdHeader.headers(SystemIdHeaderTest::systemIdSupplier);\n+    final Map<String, Object> headers = SystemIdHeader.headers(() -> SystemId.of(SYSTEM_ID));\n \n     assertThat(headers.get(SystemIdHeader.SYSTEM_ID_HEADER), is(SYSTEM_ID));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMDY1NA==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363120654", "bodyText": "I think we might be losing the purpose of this test. We are checking that a refresh will put the value back into the cache again. refresh could be implemented as a no-op and this test would still pass. If using a live cache, we could try to test the same thing by waiting for a cache key to almost be expired. I gave that a try as a first implementation when writing this test but found it to be brittle. EG:\nT0: write key that expires at T10\nT5: refresh key, extends expiry to T15\nT12: verify key value still exists, verifies that key was refreshed and did not expire at T10 \n\nThe mock object route version is more deterministic and hence the preference for it in this test.", "author": "DanVanAtta", "createdAt": "2020-01-05T22:13:14Z", "path": "http-server/src/test/java/org/triplea/server/lobby/CacheUtilsTest.java", "diffHunk": "@@ -83,12 +79,13 @@ void refreshTrueWhenFoundInCache() {\n \n     @Test\n     void refreshedItemsAreWrittenBackIntoTheCache() {\n-      when(mockCache.getIfPresent(KEY)).thenReturn(VALUE);\n+      final Cache<String, Integer> cache = CacheBuilder.newBuilder().build();\n+      cache.put(KEY, VALUE);\n \n-      final boolean result = CacheUtils.refresh(mockCache, KEY);\n+      final boolean result = CacheUtils.refresh(cache, KEY);\n \n       assertThat(result, is(true));\n-      verify(mockCache).put(KEY, VALUE);", "originalCommit": "062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3340663bd079754bb54c82550f46a763e94b39a6", "chunk": "diff --git a/http-server/src/test/java/org/triplea/server/lobby/CacheUtilsTest.java b/http-server/src/test/java/org/triplea/server/lobby/CacheUtilsTest.java\nindex 218fa2827d..5fb63a4393 100644\n--- a/http-server/src/test/java/org/triplea/server/lobby/CacheUtilsTest.java\n+++ b/http-server/src/test/java/org/triplea/server/lobby/CacheUtilsTest.java\n\n@@ -79,13 +83,12 @@ class CacheUtilsTest {\n \n     @Test\n     void refreshedItemsAreWrittenBackIntoTheCache() {\n-      final Cache<String, Integer> cache = CacheBuilder.newBuilder().build();\n-      cache.put(KEY, VALUE);\n+      when(mockCache.getIfPresent(KEY)).thenReturn(VALUE);\n \n-      final boolean result = CacheUtils.refresh(cache, KEY);\n+      final boolean result = CacheUtils.refresh(mockCache, KEY);\n \n       assertThat(result, is(true));\n-      assertThat(cache.asMap(), is(Map.of(KEY, VALUE)));\n+      verify(mockCache).put(KEY, VALUE);\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMDc4Mw==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363120783", "bodyText": "nit, I think it's perhaps more conventional to have the hamcrest 'actual' value be as \"naked\" as possible (so the cast would be moved to the expected value). In this case though, we should probably just use the right matcher to achieve that, eg: assertThat(result, IsCollectionWithSize.hasSize(cache.size())", "author": "DanVanAtta", "createdAt": "2020-01-05T22:15:26Z", "path": "http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java", "diffHunk": "@@ -77,16 +76,13 @@ void setup() {\n     /** Basic case, no games added, expect none to be returned. */\n     @Test\n     void getGames() {\n-      final Map<GameId, LobbyGame> games = new HashMap<>();\n-      games.put(ID_0, lobbyGame0);\n-      games.put(new GameId(API_KEY_0, GAME_ID_1), lobbyGame1);\n-      games.put(new GameId(API_KEY_1, GAME_ID_2), lobbyGame2);\n-\n-      when(cache.asMap()).thenReturn(new ConcurrentHashMap<>(games));\n+      cache.put(ID_0, lobbyGame0);\n+      cache.put(new GameId(API_KEY_0, GAME_ID_1), lobbyGame1);\n+      cache.put(new GameId(API_KEY_1, GAME_ID_2), lobbyGame2);\n \n       final List<LobbyGameListing> result = gameListing.getGames();\n \n-      assertThat(result.size(), is(games.size()));\n+      assertThat((long) result.size(), is(cache.size()));", "originalCommit": "062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5882fe46238dfb282f029bdf14d81fb0c13833e", "chunk": "diff --git a/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java b/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\nindex c17019b0f2..613bc41e9c 100644\n--- a/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\n+++ b/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\n\n@@ -82,7 +85,7 @@ class GameListingTest {\n \n       final List<LobbyGameListing> result = gameListing.getGames();\n \n-      assertThat((long) result.size(), is(cache.size()));\n+      assertThat(result.size(), is((int) cache.size()));\n       assertThat(\n           result,\n           IsCollectionContaining.hasItem(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMDg4NQ==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363120885", "bodyText": "Nit: Can use the empty map matcher here to be more explicit about the match criteria.", "author": "DanVanAtta", "createdAt": "2020-01-05T22:16:45Z", "path": "http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java", "diffHunk": "@@ -108,48 +104,42 @@ void getGames() {\n   final class KeepAlive {\n     @Test\n     void noGamesPresent() {\n-      when(cache.getIfPresent(ID_0)).thenReturn(null);\n-\n       final boolean result = gameListing.keepAlive(API_KEY_0, GAME_ID_0);\n       assertThat(\"Game not found, keep alive should return false\", result, is(false));\n \n-      verify(cache, never()).put(any(), any());\n+      assertThat(cache.asMap(), is(Map.of()));", "originalCommit": "062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5882fe46238dfb282f029bdf14d81fb0c13833e", "chunk": "diff --git a/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java b/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\nindex c17019b0f2..613bc41e9c 100644\n--- a/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\n+++ b/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\n\n@@ -107,7 +110,7 @@ class GameListingTest {\n       final boolean result = gameListing.keepAlive(API_KEY_0, GAME_ID_0);\n       assertThat(\"Game not found, keep alive should return false\", result, is(false));\n \n-      assertThat(cache.asMap(), is(Map.of()));\n+      assertThat(cache.asMap(), is(anEmptyMap()));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMTA2OA==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363121068", "bodyText": "I'm not sure if this assertion is testing very much, seems like it should be true based on the library spec of the cache we are using and not anything related to the keepAlive. The call to put is important for keepAlive so that it extends the cache expiration.\nI suspect in order to maintain the same level of test, we either need a mock of the cache, or we will need to extract the cache implementation behind an API (and then inject+mock that).\nThis same comment/concern follows for the rest of the examples in this test", "author": "DanVanAtta", "createdAt": "2020-01-05T22:20:40Z", "path": "http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java", "diffHunk": "@@ -108,48 +104,42 @@ void getGames() {\n   final class KeepAlive {\n     @Test\n     void noGamesPresent() {\n-      when(cache.getIfPresent(ID_0)).thenReturn(null);\n-\n       final boolean result = gameListing.keepAlive(API_KEY_0, GAME_ID_0);\n       assertThat(\"Game not found, keep alive should return false\", result, is(false));\n \n-      verify(cache, never()).put(any(), any());\n+      assertThat(cache.asMap(), is(Map.of()));\n     }\n \n     @Test\n     void gameExists() {\n-      when(cache.getIfPresent(ID_0)).thenReturn(lobbyGame0);\n+      cache.put(ID_0, lobbyGame0);\n \n       final boolean result = gameListing.keepAlive(API_KEY_0, GAME_ID_0);\n \n       assertThat(\"Game found, keep alive should return true\", result, is(true));\n-      verify(cache).put(ID_0, lobbyGame0);\n+      assertThat(cache.asMap(), is(Map.of(ID_0, lobbyGame0)));", "originalCommit": "062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5882fe46238dfb282f029bdf14d81fb0c13833e", "chunk": "diff --git a/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java b/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\nindex c17019b0f2..613bc41e9c 100644\n--- a/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\n+++ b/http-server/src/test/java/org/triplea/server/lobby/game/listing/GameListingTest.java\n\n@@ -107,7 +110,7 @@ class GameListingTest {\n       final boolean result = gameListing.keepAlive(API_KEY_0, GAME_ID_0);\n       assertThat(\"Game not found, keep alive should return false\", result, is(false));\n \n-      assertThat(cache.asMap(), is(Map.of()));\n+      assertThat(cache.asMap(), is(anEmptyMap()));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMTIyMQ==", "url": "https://github.com/triplea-game/triplea/pull/5806#discussion_r363121221", "bodyText": "Any thoughts to inline this directly? I think that might be a bit more direct.", "author": "DanVanAtta", "createdAt": "2020-01-05T22:23:48Z", "path": "swing-lib/src/test/java/org/triplea/swing/SwingActionTest.java", "diffHunk": "@@ -28,15 +27,10 @@\n class SwingActionTest {\n   private static final Object VALUE = new Object();\n \n-  private static final Runnable RUNNABLE_THROWING_EXCEPTION =\n-      () -> {\n-        throw new IllegalStateException();\n-      };\n+  private static Object throwException() {\n+    throw new IllegalStateException();", "originalCommit": "062ac0534b8b15c2bfef93ee14aed79451bc4eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbabe3f56fec05e1933454823389ba6e1dd99fde", "chunk": "diff --git a/swing-lib/src/test/java/org/triplea/swing/SwingActionTest.java b/swing-lib/src/test/java/org/triplea/swing/SwingActionTest.java\nindex 61141fa664..df7db8e58d 100644\n--- a/swing-lib/src/test/java/org/triplea/swing/SwingActionTest.java\n+++ b/swing-lib/src/test/java/org/triplea/swing/SwingActionTest.java\n\n@@ -27,15 +27,15 @@ import org.mockito.junit.jupiter.MockitoExtension;\n class SwingActionTest {\n   private static final Object VALUE = new Object();\n \n-  private static Object throwException() {\n-    throw new IllegalStateException();\n-  }\n-\n   @Mock private Runnable action;\n   @Mock private ActionEvent event;\n   @Mock private ActionListener listener;\n   @Mock private Consumer<KeyEvent> consumer;\n \n+  private static Object throwException() {\n+    throw new IllegalStateException();\n+  }\n+\n   @Test\n   void testActionOf() {\n     final Action action = SwingAction.of(\"Name1234\", listener);\n"}}, {"oid": "bbabe3f56fec05e1933454823389ba6e1dd99fde", "url": "https://github.com/triplea-game/triplea/commit/bbabe3f56fec05e1933454823389ba6e1dd99fde", "message": "Inline SystemId supplier", "committedDate": "2020-01-05T23:17:47Z", "type": "commit"}, {"oid": "f5882fe46238dfb282f029bdf14d81fb0c13833e", "url": "https://github.com/triplea-game/triplea/commit/f5882fe46238dfb282f029bdf14d81fb0c13833e", "message": "Use matchers in test", "committedDate": "2020-01-19T00:28:23Z", "type": "commit"}, {"oid": "3340663bd079754bb54c82550f46a763e94b39a6", "url": "https://github.com/triplea-game/triplea/commit/3340663bd079754bb54c82550f46a763e94b39a6", "message": "Revert changes to CacheUtilsTest", "committedDate": "2020-01-19T00:29:21Z", "type": "commit"}, {"oid": "93d44fd962cb0a97ffcc88ec222a595da4edd921", "url": "https://github.com/triplea-game/triplea/commit/93d44fd962cb0a97ffcc88ec222a595da4edd921", "message": "Suppress DoNotMock warning", "committedDate": "2020-01-19T00:39:44Z", "type": "commit"}, {"oid": "8828efbcdfa25c41e2c7568109842c12568d8eb4", "url": "https://github.com/triplea-game/triplea/commit/8828efbcdfa25c41e2c7568109842c12568d8eb4", "message": "Merge remote-tracking branch 'origin/master' into dependabot/gradle/com.google.errorprone-error_prone_core-2.3.4", "committedDate": "2020-01-19T00:40:28Z", "type": "commit"}]}