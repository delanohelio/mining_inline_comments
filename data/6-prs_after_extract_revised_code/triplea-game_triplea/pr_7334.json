{"pr_number": 7334, "pr_title": "Unit test for games/strategy/triplea/TripleA.java", "pr_createdAt": "2020-08-06T16:56:11Z", "pr_url": "https://github.com/triplea-game/triplea/pull/7334", "timeline": [{"oid": "9f732db8511fba767afbcba3dc813e3cc8c3350a", "url": "https://github.com/triplea-game/triplea/commit/9f732db8511fba767afbcba3dc813e3cc8c3350a", "message": "Unit test for games/strategy/triplea/TripleaA.java", "committedDate": "2020-08-06T16:55:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE0Ng==", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467703146", "bodyText": "It looks like TripleA has a factory method here. Do we expect side effects from newPlayers call? Are we simply checking that we can create 3 Player instances?\nIt kinda seems like this is a test/check in of itself. What do you think to move this assertion and setup to its own test method?", "author": "DanVanAtta", "createdAt": "2020-08-10T06:10:54Z", "path": "game-core/src/test/java/games/strategy/triplea/TripleATest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package games.strategy.triplea;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.chat.Chat;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.ServerGame;\n+import games.strategy.engine.framework.startup.launcher.LaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.player.Player;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TripleATest {\n+\n+  private static final String DELEGATE_NAME_EDIT = \"edit\";\n+\n+  @Mock private LaunchAction launchAction;\n+  @Mock private Chat chat;\n+  @Mock private ServerGame serverGame;\n+  @Mock private GameData gameData;\n+\n+  @Test\n+  void testStartGameWhenServerGameStartedWithNewPlayersWithoutEditDelegate() {\n+\n+    final TripleA tripleA = new TripleA();\n+    final Map<String, PlayerType> playerNames = new HashMap<>();\n+    playerNames.put(\"first\", PlayerType.HUMAN_PLAYER);\n+    playerNames.put(\"second\", PlayerType.WEAK_AI);\n+    playerNames.put(\"third\", PlayerType.PRO_AI);\n+\n+    when(serverGame.getData()).thenReturn(gameData);\n+    when(gameData.getDelegate(DELEGATE_NAME_EDIT)).thenReturn(null);\n+\n+    final Set<Player> players = tripleA.newPlayers(playerNames);\n+    assertThat(players, hasSize(3));", "originalCommit": "9f732db8511fba767afbcba3dc813e3cc8c3350a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwODE0MQ==", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467808141", "bodyText": "Yes it's not an interesting test, I thought I'll just check that newPlayers with an input of 3 names is expected to return 3 players. It should probably be moved to it's own test case,", "author": "tjrbrom", "createdAt": "2020-08-10T10:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e026d34cf9d66de1a07c77bfd2c9b5f37eba37c1", "chunk": "diff --git a/game-core/src/test/java/games/strategy/triplea/TripleATest.java b/game-core/src/test/java/games/strategy/triplea/TripleATest.java\nindex 98e72c924..80f17b891 100644\n--- a/game-core/src/test/java/games/strategy/triplea/TripleATest.java\n+++ b/game-core/src/test/java/games/strategy/triplea/TripleATest.java\n\n@@ -3,57 +3,78 @@ package games.strategy.triplea;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.ArgumentMatchers.anySet;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.ArgumentMatchers.isNull;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import games.strategy.engine.chat.Chat;\n import games.strategy.engine.data.GameData;\n+import games.strategy.engine.display.IDisplay;\n+import games.strategy.engine.framework.LocalPlayers;\n import games.strategy.engine.framework.ServerGame;\n import games.strategy.engine.framework.startup.launcher.LaunchAction;\n import games.strategy.engine.framework.startup.ui.PlayerType;\n import games.strategy.engine.player.Player;\n+import games.strategy.triplea.delegate.EditDelegate;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n+import org.triplea.sound.ISound;\n \n @ExtendWith(MockitoExtension.class)\n public class TripleATest {\n \n-  private static final String DELEGATE_NAME_EDIT = \"edit\";\n+  private static TripleA tripleA;\n \n   @Mock private LaunchAction launchAction;\n   @Mock private Chat chat;\n   @Mock private ServerGame serverGame;\n   @Mock private GameData gameData;\n+  @Mock private Set<Player> playerSet;\n+  @Mock private IDisplay iDisplay;\n+  @Mock private ISound iSound;\n \n-  @Test\n-  void testStartGameWhenServerGameStartedWithNewPlayersWithoutEditDelegate() {\n+  @BeforeAll\n+  public static void init() {\n+    tripleA = new TripleA();\n+  }\n \n-    final TripleA tripleA = new TripleA();\n+  @Test\n+  void testNewPlayersAreRetrievedFromGivenPlayerNames() {\n     final Map<String, PlayerType> playerNames = new HashMap<>();\n     playerNames.put(\"first\", PlayerType.HUMAN_PLAYER);\n     playerNames.put(\"second\", PlayerType.WEAK_AI);\n     playerNames.put(\"third\", PlayerType.PRO_AI);\n+    final Set<Player> players = tripleA.newPlayers(playerNames);\n+    assertThat(players, hasSize(playerNames.size()));\n+  }\n \n-    when(serverGame.getData()).thenReturn(gameData);\n-    when(gameData.getDelegate(DELEGATE_NAME_EDIT)).thenReturn(null);\n+  @Test\n+  void testStartGameAndShutDownWhenServerGameStartedWithoutEditDelegate() {\n \n-    final Set<Player> players = tripleA.newPlayers(playerNames);\n-    assertThat(players, hasSize(3));\n+    when(serverGame.getData()).thenReturn(gameData);\n+    when(gameData.getDelegate(anyString())).thenReturn(null);\n+    when(launchAction.startGame(\n+            any(LocalPlayers.class), any(ServerGame.class), anySet(), any(Chat.class)))\n+        .thenReturn(iDisplay);\n+    when(launchAction.getSoundChannel(any(LocalPlayers.class))).thenReturn(iSound);\n \n-    tripleA.startGame(serverGame, players, launchAction, chat);\n-    verify(gameData).addDelegate(any());\n-    verify(serverGame).addDelegateMessenger(any());\n-    verify(serverGame).setDisplay(any());\n-    verify(serverGame).setSoundChannel(any());\n+    tripleA.startGame(serverGame, playerSet, launchAction, chat);\n+    verify(gameData).addDelegate(isA(EditDelegate.class));\n+    verify(serverGame).addDelegateMessenger(isA(EditDelegate.class));\n+    verify(serverGame).setDisplay(iDisplay);\n+    verify(serverGame).setSoundChannel(iSound);\n \n     tripleA.shutDown();\n-    verify(serverGame, times(2)).setDisplay(any());\n-    verify(serverGame, times(2)).setSoundChannel(any());\n+    verify(serverGame).setDisplay(isNull());\n+    verify(serverGame).setSoundChannel(isNull());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNDAzOQ==", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467704039", "bodyText": "The second time, we call setDisplay, we expect null to be passed, right?\nGenerally asserting any() in mockito is a test smell indicating a weak test. WDYT to either eliminate this verification or to verify we get an expected null value the second time?\nDid you find that the setDisplay to null was strictly necessary/important, or could we remove it sometime soon? There are a number of examples of unnecessary setting to null, essentially manual GC when we can let the Java GC just do its thing for us. It's hard to say for sure though as the state is finicky...", "author": "DanVanAtta", "createdAt": "2020-08-10T06:14:32Z", "path": "game-core/src/test/java/games/strategy/triplea/TripleATest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package games.strategy.triplea;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.chat.Chat;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.ServerGame;\n+import games.strategy.engine.framework.startup.launcher.LaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.player.Player;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TripleATest {\n+\n+  private static final String DELEGATE_NAME_EDIT = \"edit\";\n+\n+  @Mock private LaunchAction launchAction;\n+  @Mock private Chat chat;\n+  @Mock private ServerGame serverGame;\n+  @Mock private GameData gameData;\n+\n+  @Test\n+  void testStartGameWhenServerGameStartedWithNewPlayersWithoutEditDelegate() {\n+\n+    final TripleA tripleA = new TripleA();\n+    final Map<String, PlayerType> playerNames = new HashMap<>();\n+    playerNames.put(\"first\", PlayerType.HUMAN_PLAYER);\n+    playerNames.put(\"second\", PlayerType.WEAK_AI);\n+    playerNames.put(\"third\", PlayerType.PRO_AI);\n+\n+    when(serverGame.getData()).thenReturn(gameData);\n+    when(gameData.getDelegate(DELEGATE_NAME_EDIT)).thenReturn(null);\n+\n+    final Set<Player> players = tripleA.newPlayers(playerNames);\n+    assertThat(players, hasSize(3));\n+\n+    tripleA.startGame(serverGame, players, launchAction, chat);\n+    verify(gameData).addDelegate(any());\n+    verify(serverGame).addDelegateMessenger(any());\n+    verify(serverGame).setDisplay(any());\n+    verify(serverGame).setSoundChannel(any());\n+\n+    tripleA.shutDown();\n+    verify(serverGame, times(2)).setDisplay(any());", "originalCommit": "9f732db8511fba767afbcba3dc813e3cc8c3350a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwNTkzMw==", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467805933", "bodyText": "I haven't found how to verify that the sound channel has been set to null.\nInstead of any(), is it better to say .setDisplay(isNull()) ?\nI don't know why they are setting it to null BTW. I see ofcourse that through AbstractGame#setSoundChannel the ISound field is set to the passed value, which is null when shutting down, so does that mean the game object still exists after sutting down (or shouldn't be garbage collected) ?", "author": "tjrbrom", "createdAt": "2020-08-10T10:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNDAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e026d34cf9d66de1a07c77bfd2c9b5f37eba37c1", "chunk": "diff --git a/game-core/src/test/java/games/strategy/triplea/TripleATest.java b/game-core/src/test/java/games/strategy/triplea/TripleATest.java\nindex 98e72c924..80f17b891 100644\n--- a/game-core/src/test/java/games/strategy/triplea/TripleATest.java\n+++ b/game-core/src/test/java/games/strategy/triplea/TripleATest.java\n\n@@ -3,57 +3,78 @@ package games.strategy.triplea;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.ArgumentMatchers.anySet;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.ArgumentMatchers.isNull;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import games.strategy.engine.chat.Chat;\n import games.strategy.engine.data.GameData;\n+import games.strategy.engine.display.IDisplay;\n+import games.strategy.engine.framework.LocalPlayers;\n import games.strategy.engine.framework.ServerGame;\n import games.strategy.engine.framework.startup.launcher.LaunchAction;\n import games.strategy.engine.framework.startup.ui.PlayerType;\n import games.strategy.engine.player.Player;\n+import games.strategy.triplea.delegate.EditDelegate;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n+import org.triplea.sound.ISound;\n \n @ExtendWith(MockitoExtension.class)\n public class TripleATest {\n \n-  private static final String DELEGATE_NAME_EDIT = \"edit\";\n+  private static TripleA tripleA;\n \n   @Mock private LaunchAction launchAction;\n   @Mock private Chat chat;\n   @Mock private ServerGame serverGame;\n   @Mock private GameData gameData;\n+  @Mock private Set<Player> playerSet;\n+  @Mock private IDisplay iDisplay;\n+  @Mock private ISound iSound;\n \n-  @Test\n-  void testStartGameWhenServerGameStartedWithNewPlayersWithoutEditDelegate() {\n+  @BeforeAll\n+  public static void init() {\n+    tripleA = new TripleA();\n+  }\n \n-    final TripleA tripleA = new TripleA();\n+  @Test\n+  void testNewPlayersAreRetrievedFromGivenPlayerNames() {\n     final Map<String, PlayerType> playerNames = new HashMap<>();\n     playerNames.put(\"first\", PlayerType.HUMAN_PLAYER);\n     playerNames.put(\"second\", PlayerType.WEAK_AI);\n     playerNames.put(\"third\", PlayerType.PRO_AI);\n+    final Set<Player> players = tripleA.newPlayers(playerNames);\n+    assertThat(players, hasSize(playerNames.size()));\n+  }\n \n-    when(serverGame.getData()).thenReturn(gameData);\n-    when(gameData.getDelegate(DELEGATE_NAME_EDIT)).thenReturn(null);\n+  @Test\n+  void testStartGameAndShutDownWhenServerGameStartedWithoutEditDelegate() {\n \n-    final Set<Player> players = tripleA.newPlayers(playerNames);\n-    assertThat(players, hasSize(3));\n+    when(serverGame.getData()).thenReturn(gameData);\n+    when(gameData.getDelegate(anyString())).thenReturn(null);\n+    when(launchAction.startGame(\n+            any(LocalPlayers.class), any(ServerGame.class), anySet(), any(Chat.class)))\n+        .thenReturn(iDisplay);\n+    when(launchAction.getSoundChannel(any(LocalPlayers.class))).thenReturn(iSound);\n \n-    tripleA.startGame(serverGame, players, launchAction, chat);\n-    verify(gameData).addDelegate(any());\n-    verify(serverGame).addDelegateMessenger(any());\n-    verify(serverGame).setDisplay(any());\n-    verify(serverGame).setSoundChannel(any());\n+    tripleA.startGame(serverGame, playerSet, launchAction, chat);\n+    verify(gameData).addDelegate(isA(EditDelegate.class));\n+    verify(serverGame).addDelegateMessenger(isA(EditDelegate.class));\n+    verify(serverGame).setDisplay(iDisplay);\n+    verify(serverGame).setSoundChannel(iSound);\n \n     tripleA.shutDown();\n-    verify(serverGame, times(2)).setDisplay(any());\n-    verify(serverGame, times(2)).setSoundChannel(any());\n+    verify(serverGame).setDisplay(isNull());\n+    verify(serverGame).setSoundChannel(isNull());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNDQ4MA==", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467704480", "bodyText": "Is this a constant in the production code? WDYT to use a constant that lives in prod code such that we do not couple the test?", "author": "DanVanAtta", "createdAt": "2020-08-10T06:15:51Z", "path": "game-core/src/test/java/games/strategy/triplea/TripleATest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package games.strategy.triplea;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.chat.Chat;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.ServerGame;\n+import games.strategy.engine.framework.startup.launcher.LaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.player.Player;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TripleATest {\n+\n+  private static final String DELEGATE_NAME_EDIT = \"edit\";", "originalCommit": "9f732db8511fba767afbcba3dc813e3cc8c3350a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwNTkwMQ==", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467805901", "bodyText": "Actually I haven't found the \"edit\" String declared as a constant anywhere else and their using it directly inside startGame, which is kind of ugly too.", "author": "tjrbrom", "createdAt": "2020-08-10T10:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNDQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "e026d34cf9d66de1a07c77bfd2c9b5f37eba37c1", "chunk": "diff --git a/game-core/src/test/java/games/strategy/triplea/TripleATest.java b/game-core/src/test/java/games/strategy/triplea/TripleATest.java\nindex 98e72c924..80f17b891 100644\n--- a/game-core/src/test/java/games/strategy/triplea/TripleATest.java\n+++ b/game-core/src/test/java/games/strategy/triplea/TripleATest.java\n\n@@ -3,57 +3,78 @@ package games.strategy.triplea;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.ArgumentMatchers.anySet;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.ArgumentMatchers.isNull;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import games.strategy.engine.chat.Chat;\n import games.strategy.engine.data.GameData;\n+import games.strategy.engine.display.IDisplay;\n+import games.strategy.engine.framework.LocalPlayers;\n import games.strategy.engine.framework.ServerGame;\n import games.strategy.engine.framework.startup.launcher.LaunchAction;\n import games.strategy.engine.framework.startup.ui.PlayerType;\n import games.strategy.engine.player.Player;\n+import games.strategy.triplea.delegate.EditDelegate;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n+import org.triplea.sound.ISound;\n \n @ExtendWith(MockitoExtension.class)\n public class TripleATest {\n \n-  private static final String DELEGATE_NAME_EDIT = \"edit\";\n+  private static TripleA tripleA;\n \n   @Mock private LaunchAction launchAction;\n   @Mock private Chat chat;\n   @Mock private ServerGame serverGame;\n   @Mock private GameData gameData;\n+  @Mock private Set<Player> playerSet;\n+  @Mock private IDisplay iDisplay;\n+  @Mock private ISound iSound;\n \n-  @Test\n-  void testStartGameWhenServerGameStartedWithNewPlayersWithoutEditDelegate() {\n+  @BeforeAll\n+  public static void init() {\n+    tripleA = new TripleA();\n+  }\n \n-    final TripleA tripleA = new TripleA();\n+  @Test\n+  void testNewPlayersAreRetrievedFromGivenPlayerNames() {\n     final Map<String, PlayerType> playerNames = new HashMap<>();\n     playerNames.put(\"first\", PlayerType.HUMAN_PLAYER);\n     playerNames.put(\"second\", PlayerType.WEAK_AI);\n     playerNames.put(\"third\", PlayerType.PRO_AI);\n+    final Set<Player> players = tripleA.newPlayers(playerNames);\n+    assertThat(players, hasSize(playerNames.size()));\n+  }\n \n-    when(serverGame.getData()).thenReturn(gameData);\n-    when(gameData.getDelegate(DELEGATE_NAME_EDIT)).thenReturn(null);\n+  @Test\n+  void testStartGameAndShutDownWhenServerGameStartedWithoutEditDelegate() {\n \n-    final Set<Player> players = tripleA.newPlayers(playerNames);\n-    assertThat(players, hasSize(3));\n+    when(serverGame.getData()).thenReturn(gameData);\n+    when(gameData.getDelegate(anyString())).thenReturn(null);\n+    when(launchAction.startGame(\n+            any(LocalPlayers.class), any(ServerGame.class), anySet(), any(Chat.class)))\n+        .thenReturn(iDisplay);\n+    when(launchAction.getSoundChannel(any(LocalPlayers.class))).thenReturn(iSound);\n \n-    tripleA.startGame(serverGame, players, launchAction, chat);\n-    verify(gameData).addDelegate(any());\n-    verify(serverGame).addDelegateMessenger(any());\n-    verify(serverGame).setDisplay(any());\n-    verify(serverGame).setSoundChannel(any());\n+    tripleA.startGame(serverGame, playerSet, launchAction, chat);\n+    verify(gameData).addDelegate(isA(EditDelegate.class));\n+    verify(serverGame).addDelegateMessenger(isA(EditDelegate.class));\n+    verify(serverGame).setDisplay(iDisplay);\n+    verify(serverGame).setSoundChannel(iSound);\n \n     tripleA.shutDown();\n-    verify(serverGame, times(2)).setDisplay(any());\n-    verify(serverGame, times(2)).setSoundChannel(any());\n+    verify(serverGame).setDisplay(isNull());\n+    verify(serverGame).setSoundChannel(isNull());\n   }\n }\n"}}, {"oid": "e026d34cf9d66de1a07c77bfd2c9b5f37eba37c1", "url": "https://github.com/triplea-game/triplea/commit/e026d34cf9d66de1a07c77bfd2c9b5f37eba37c1", "message": "#7334 Break test cases, replaced any()", "committedDate": "2020-08-11T06:57:22Z", "type": "commit"}, {"oid": "d4169b4089504570fc8e370fce542b923c51b549", "url": "https://github.com/triplea-game/triplea/commit/d4169b4089504570fc8e370fce542b923c51b549", "message": "#7334 checkstyle", "committedDate": "2020-08-11T07:23:10Z", "type": "commit"}]}