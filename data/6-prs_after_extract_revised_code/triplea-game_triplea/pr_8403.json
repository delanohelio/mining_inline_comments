{"pr_number": 8403, "pr_title": "Add a method to CompositeChange to return a flattened version", "pr_createdAt": "2020-12-11T02:06:03Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8403", "timeline": [{"oid": "2cc6cf7f5eb14165904288be55faa9ab8bb2d5ee", "url": "https://github.com/triplea-game/triplea/commit/2cc6cf7f5eb14165904288be55faa9ab8bb2d5ee", "message": "Add a method to CompositeChange to return a flattened version", "committedDate": "2020-12-11T02:04:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0MzY2NQ==", "url": "https://github.com/triplea-game/triplea/pull/8403#discussion_r541843665", "bodyText": "Couple more test cases to consider having:\n\ntrivial case where there is a single composite change and the input is the same as output\ndeeply nested (more than 2) singleton change", "author": "DanVanAtta", "createdAt": "2020-12-13T04:44:09Z", "path": "game-core/src/test/java/games/strategy/engine/data/CompositeChangeTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package games.strategy.engine.data;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.changefactory.ChangeFactory;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class CompositeChangeTest {\n+\n+  @Test\n+  void flattenChanges() {", "originalCommit": "2cc6cf7f5eb14165904288be55faa9ab8bb2d5ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzNDMzMQ==", "url": "https://github.com/triplea-game/triplea/pull/8403#discussion_r542934331", "bodyText": "The existing test case already is testing deeply nested changes.  It goes at least 3 deep.", "author": "trevan", "createdAt": "2020-12-14T23:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0MzY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAxMTIzOQ==", "url": "https://github.com/triplea-game/triplea/pull/8403#discussion_r543011239", "bodyText": "Indeed, I'm drawing a slight distinction:\n\ndeeply nested with N+1 changes\ndeeply nested with just 1 change\n\nIn the latter case one would expect that to be flattened into a single change.", "author": "DanVanAtta", "createdAt": "2020-12-15T03:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0MzY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyMTg0MA==", "url": "https://github.com/triplea-game/triplea/pull/8403#discussion_r543021840", "bodyText": "@DanVanAtta , I see what you mean.  I've added a test for the later case.", "author": "trevan", "createdAt": "2020-12-15T03:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0MzY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "96776a269191543a3fc7981b29c14e73525dd1f5", "chunk": "diff --git a/game-core/src/test/java/games/strategy/engine/data/CompositeChangeTest.java b/game-core/src/test/java/games/strategy/engine/data/CompositeChangeTest.java\nindex 0613f733f..2db234e38 100644\n--- a/game-core/src/test/java/games/strategy/engine/data/CompositeChangeTest.java\n+++ b/game-core/src/test/java/games/strategy/engine/data/CompositeChangeTest.java\n\n@@ -2,6 +2,7 @@ package games.strategy.engine.data;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0Mzc4OQ==", "url": "https://github.com/triplea-game/triplea/pull/8403#discussion_r541843789", "bodyText": "nit: A ternary would be worth consider having here, would make the lambda syntax a bit nicer.", "author": "DanVanAtta", "createdAt": "2020-12-13T04:45:12Z", "path": "game-core/src/main/java/games/strategy/engine/data/CompositeChange.java", "diffHunk": "@@ -22,6 +24,21 @@ public CompositeChange(final List<Change> changes) {\n     this.changes = new ArrayList<>(changes);\n   }\n \n+  public CompositeChange flatten() {\n+    return new CompositeChange(\n+        changes.stream()\n+            .map(\n+                change -> {\n+                  if (change instanceof CompositeChange) {", "originalCommit": "2cc6cf7f5eb14165904288be55faa9ab8bb2d5ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96776a269191543a3fc7981b29c14e73525dd1f5", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/CompositeChange.java b/game-core/src/main/java/games/strategy/engine/data/CompositeChange.java\nindex 944b6e840..cceba43f0 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/CompositeChange.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/CompositeChange.java\n\n@@ -24,17 +24,22 @@ public class CompositeChange extends Change {\n     this.changes = new ArrayList<>(changes);\n   }\n \n+  /**\n+   * Flattens the list of changes so that there are no CompositeChanges\n+   *\n+   * <p>If there is a child CompositeChange, its children are added to the list and it is removed\n+   * from the list. This will recursively go through any CompositeChange children.\n+   *\n+   * @return A new CompositeChange that doesn't have any CompositeChange children\n+   */\n   public CompositeChange flatten() {\n     return new CompositeChange(\n         changes.stream()\n             .map(\n-                change -> {\n-                  if (change instanceof CompositeChange) {\n-                    return ((CompositeChange) change).flatten().getChanges();\n-                  } else {\n-                    return List.of(change);\n-                  }\n-                })\n+                change ->\n+                    change instanceof CompositeChange\n+                        ? ((CompositeChange) change).flatten().getChanges()\n+                        : List.of(change))\n             .flatMap(Collection::stream)\n             .collect(Collectors.toList()));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0MzgxOQ==", "url": "https://github.com/triplea-game/triplea/pull/8403#discussion_r541843819", "bodyText": "Could use a javadoc IMO, particularly considering the method is recursive.", "author": "DanVanAtta", "createdAt": "2020-12-13T04:45:27Z", "path": "game-core/src/main/java/games/strategy/engine/data/CompositeChange.java", "diffHunk": "@@ -22,6 +24,21 @@ public CompositeChange(final List<Change> changes) {\n     this.changes = new ArrayList<>(changes);\n   }\n \n+  public CompositeChange flatten() {", "originalCommit": "2cc6cf7f5eb14165904288be55faa9ab8bb2d5ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96776a269191543a3fc7981b29c14e73525dd1f5", "chunk": "diff --git a/game-core/src/main/java/games/strategy/engine/data/CompositeChange.java b/game-core/src/main/java/games/strategy/engine/data/CompositeChange.java\nindex 944b6e840..cceba43f0 100644\n--- a/game-core/src/main/java/games/strategy/engine/data/CompositeChange.java\n+++ b/game-core/src/main/java/games/strategy/engine/data/CompositeChange.java\n\n@@ -24,17 +24,22 @@ public class CompositeChange extends Change {\n     this.changes = new ArrayList<>(changes);\n   }\n \n+  /**\n+   * Flattens the list of changes so that there are no CompositeChanges\n+   *\n+   * <p>If there is a child CompositeChange, its children are added to the list and it is removed\n+   * from the list. This will recursively go through any CompositeChange children.\n+   *\n+   * @return A new CompositeChange that doesn't have any CompositeChange children\n+   */\n   public CompositeChange flatten() {\n     return new CompositeChange(\n         changes.stream()\n             .map(\n-                change -> {\n-                  if (change instanceof CompositeChange) {\n-                    return ((CompositeChange) change).flatten().getChanges();\n-                  } else {\n-                    return List.of(change);\n-                  }\n-                })\n+                change ->\n+                    change instanceof CompositeChange\n+                        ? ((CompositeChange) change).flatten().getChanges()\n+                        : List.of(change))\n             .flatMap(Collection::stream)\n             .collect(Collectors.toList()));\n   }\n"}}, {"oid": "96776a269191543a3fc7981b29c14e73525dd1f5", "url": "https://github.com/triplea-game/triplea/commit/96776a269191543a3fc7981b29c14e73525dd1f5", "message": "Add additional tests and documentation", "committedDate": "2020-12-14T23:58:03Z", "type": "commit"}, {"oid": "6c11c72421a2656e1eb7153adf064bd92ef2768e", "url": "https://github.com/triplea-game/triplea/commit/6c11c72421a2656e1eb7153adf064bd92ef2768e", "message": "Add single change nested test", "committedDate": "2020-12-15T03:39:21Z", "type": "commit"}]}