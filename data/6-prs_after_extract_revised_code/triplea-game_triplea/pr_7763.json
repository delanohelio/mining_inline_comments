{"pr_number": 7763, "pr_title": "Improve test runtime of java-extras & Make Retryable more generic", "pr_createdAt": "2020-09-25T09:56:30Z", "pr_url": "https://github.com/triplea-game/triplea/pull/7763", "timeline": [{"oid": "ae4c466b169275d3a3b546f58604e61549fdf44f", "url": "https://github.com/triplea-game/triplea/commit/ae4c466b169275d3a3b546f58604e61549fdf44f", "message": "- Replace EqualsVerifier with by-hand equality tests. Shaves 270ms off of test runtime.", "committedDate": "2020-09-25T08:24:43Z", "type": "commit"}, {"oid": "0558eb3814a23f076f08b6a3ae937676da5a70f5", "url": "https://github.com/triplea-game/triplea/commit/0558eb3814a23f076f08b6a3ae937676da5a70f5", "message": "- Remove mocks from FileUtils#ListFiles testing. Speeds up the test by 500ms and improves test robustness (less coupled)", "committedDate": "2020-09-25T08:40:49Z", "type": "commit"}, {"oid": "cd5d715ff07f80a7afab4ea4b3d2269cec6c2273", "url": "https://github.com/triplea-game/triplea/commit/cd5d715ff07f80a7afab4ea4b3d2269cec6c2273", "message": "- Remove mock verifications from ExpiringAfterWriteCacheTest, shaves 420ms", "committedDate": "2020-09-25T09:53:52Z", "type": "commit"}, {"oid": "07ba1cc140298089ad9b0eeb095484cf2ad4c689", "url": "https://github.com/triplea-game/triplea/commit/07ba1cc140298089ad9b0eeb095484cf2ad4c689", "message": "- Remove mocks from UrlStreams test, shaves 150ms", "committedDate": "2020-09-25T09:53:52Z", "type": "commit"}, {"oid": "cd333a6da86e2d3c0333508ddffbf7723170bc0b", "url": "https://github.com/triplea-game/triplea/commit/cd333a6da86e2d3c0333508ddffbf7723170bc0b", "message": "- Remove mocks from InterruptiblesTest, shaves 200ms", "committedDate": "2020-09-25T09:53:52Z", "type": "commit"}, {"oid": "e131f1bb52d663485352fd19467b191aa614ca7b", "url": "https://github.com/triplea-game/triplea/commit/e131f1bb52d663485352fd19467b191aa614ca7b", "message": "- Remove mocks from CompletableFutureUtils, shaves 200ms", "committedDate": "2020-09-25T09:53:52Z", "type": "commit"}, {"oid": "d34fd244301139fa0be3beb696cc23ee2848ff2d", "url": "https://github.com/triplea-game/triplea/commit/d34fd244301139fa0be3beb696cc23ee2848ff2d", "message": "- Inline single use OptionalUtils methods, saves 400ms of test time.", "committedDate": "2020-09-25T09:53:54Z", "type": "commit"}, {"oid": "9422e6c8a6693afa9b0b46dcefe572088eb896ee", "url": "https://github.com/triplea-game/triplea/commit/9422e6c8a6693afa9b0b46dcefe572088eb896ee", "message": "- Make Retryable more generic so it can return any kind of object and not just a success flag\n- Remove mocks from Retryable test, shaves 380ms", "committedDate": "2020-09-25T09:53:52Z", "type": "commit"}, {"oid": "18ff215ac4425f427231e87619ace2593bcb975f", "url": "https://github.com/triplea-game/triplea/commit/18ff215ac4425f427231e87619ace2593bcb975f", "message": "Auto-Formatting", "committedDate": "2020-09-25T09:55:54Z", "type": "commit"}, {"oid": "c9fd439fc46f68b06e868b0e76615fb371dfcfc9", "url": "https://github.com/triplea-game/triplea/commit/c9fd439fc46f68b06e868b0e76615fb371dfcfc9", "message": "Fix up javadoc (checkstyle fix)", "committedDate": "2020-09-26T01:27:40Z", "type": "commit"}, {"oid": "fc077da94d56e4b523f6a96e40c2cc853c33bc15", "url": "https://github.com/triplea-game/triplea/commit/fc077da94d56e4b523f6a96e40c2cc853c33bc15", "message": "FileUtilsTest - Use any order matcher, ordering not deterministic.", "committedDate": "2020-09-26T04:03:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTczNw==", "url": "https://github.com/triplea-game/triplea/pull/7763#discussion_r495411737", "bodyText": "Codacy found an issue: Document empty method body", "author": "DanVanAtta", "createdAt": "2020-09-26T04:08:04Z", "path": "java-extras/src/test/java/org/triplea/java/UrlStreamsTest.java", "diffHunk": "@@ -3,66 +3,83 @@\n import static com.github.npathai.hamcrestopt.OptionalMatchers.isEmpty;\n import static com.github.npathai.hamcrestopt.OptionalMatchers.isPresent;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.sameInstance;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import static org.hamcrest.core.Is.is;\n \n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URL;\n import java.net.URLConnection;\n import java.util.Optional;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n \n-@ExtendWith(MockitoExtension.class)\n class UrlStreamsTest {\n \n   private UrlStreams testObj;\n \n   private URL fakeUrl;\n \n-  @Mock private URLConnection mockUrlConnection;\n-  @Mock private InputStream mockInputStream;\n+  //  @Mock private URLConnection mockUrlConnection;\n+  //  @Mock private InputStream mockInputStream;\n \n   @BeforeEach\n   void setUp() throws Exception {\n     // set up the test object with a function that will return a mocked url connection\n-    testObj = new UrlStreams(url -> mockUrlConnection);\n+    testObj =\n+        new UrlStreams(\n+            url ->\n+                new URLConnection(url) {\n+                  @Override\n+                  public void connect() {}", "originalCommit": "fc077da94d56e4b523f6a96e40c2cc853c33bc15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTczOA==", "url": "https://github.com/triplea-game/triplea/pull/7763#discussion_r495411738", "bodyText": "Codacy found an issue: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "DanVanAtta", "createdAt": "2020-09-26T04:08:05Z", "path": "java-extras/src/test/java/org/triplea/java/RetryableTest.java", "diffHunk": "@@ -1,30 +1,43 @@\n package org.triplea.java;\n \n+import static com.github.npathai.hamcrestopt.OptionalMatchers.isEmpty;\n+import static com.github.npathai.hamcrestopt.OptionalMatchers.isPresent;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n import java.time.Duration;\n import java.util.List;\n-import java.util.function.BooleanSupplier;\n+import java.util.Optional;\n import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.RequiredArgsConstructor;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n import org.junit.jupiter.params.provider.ValueSource;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n \n-@ExtendWith(MockitoExtension.class)\n class RetryableTest {\n \n-  @Mock private BooleanSupplier task;\n-  @Mock private Consumer<Duration> threadSleeper;\n+  /**\n+   * Increment the invocation count and return true if the invocation count matches the input\n+   * parameter. In other words, we can say \"return true on the 3rd invocation.\"\n+   */\n+  @RequiredArgsConstructor\n+  private static final class Task implements Supplier<Optional<Boolean>> {\n+    private final int successIteration;\n+    private int invocationCount;\n+\n+    @Override\n+    public Optional<Boolean> get() {\n+      invocationCount++;\n+      return invocationCount == successIteration ? Optional.of(true) : Optional.empty();\n+    }\n+  }\n+\n+  private int sleepCount;", "originalCommit": "fc077da94d56e4b523f6a96e40c2cc853c33bc15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc0MQ==", "url": "https://github.com/triplea-game/triplea/pull/7763#discussion_r495411741", "bodyText": "Codacy found an issue: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "DanVanAtta", "createdAt": "2020-09-26T04:08:06Z", "path": "java-extras/src/test/java/org/triplea/java/RetryableTest.java", "diffHunk": "@@ -1,30 +1,43 @@\n package org.triplea.java;\n \n+import static com.github.npathai.hamcrestopt.OptionalMatchers.isEmpty;\n+import static com.github.npathai.hamcrestopt.OptionalMatchers.isPresent;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n import java.time.Duration;\n import java.util.List;\n-import java.util.function.BooleanSupplier;\n+import java.util.Optional;\n import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import lombok.RequiredArgsConstructor;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n import org.junit.jupiter.params.provider.ValueSource;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n \n-@ExtendWith(MockitoExtension.class)\n class RetryableTest {\n \n-  @Mock private BooleanSupplier task;\n-  @Mock private Consumer<Duration> threadSleeper;\n+  /**\n+   * Increment the invocation count and return true if the invocation count matches the input\n+   * parameter. In other words, we can say \"return true on the 3rd invocation.\"\n+   */\n+  @RequiredArgsConstructor\n+  private static final class Task implements Supplier<Optional<Boolean>> {\n+    private final int successIteration;\n+    private int invocationCount;\n+\n+    @Override\n+    public Optional<Boolean> get() {\n+      invocationCount++;\n+      return invocationCount == successIteration ? Optional.of(true) : Optional.empty();\n+    }\n+  }\n+\n+  private int sleepCount;\n+  private final Consumer<Duration> threadSleeper = duration -> sleepCount++;", "originalCommit": "fc077da94d56e4b523f6a96e40c2cc853c33bc15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}