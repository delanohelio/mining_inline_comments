{"pr_number": 8468, "pr_title": "Constructor injection", "pr_createdAt": "2020-12-20T20:00:52Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8468", "timeline": [{"oid": "644876617f057c35921ebf9f76197ed72cba9e6a", "url": "https://github.com/triplea-game/triplea/commit/644876617f057c35921ebf9f76197ed72cba9e6a", "message": "Update Injections.java javadoc\n\n- give more details on what it is used from, basically it is a DIY IOC\n- be more explicit about avoiding singleton \"pattern\" and static coupling", "committedDate": "2020-12-20T19:59:32Z", "type": "commit"}, {"oid": "90d524b37e8af88bb9ac0e0de1394f6235c6316d", "url": "https://github.com/triplea-game/triplea/commit/90d524b37e8af88bb9ac0e0de1394f6235c6316d", "message": "Replace static usage of 'Injections.getInsance().getXXX' with constructor injection", "committedDate": "2020-12-20T19:59:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546429239", "bodyText": "To point out, 'new' calls are grouped together and object construction is now done in fewer places. This removes two examples of static coupling: 1) invoking 'new' from within a constructor body, and 2) invoking 'Injections.getInstance()' from within a constructor body.", "author": "DanVanAtta", "createdAt": "2020-12-20T20:02:27Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/launcher/LocalLauncher.java", "diffHunk": "@@ -123,13 +122,19 @@ public static LocalLauncher create(\n                     PlayerCountrySelection::getPlayerName,\n                     PlayerCountrySelection::isPlayerEnabled));\n \n-    final PlayerListing pl =\n+    final PlayerListing playerListing =\n         new PlayerListing(\n             playersEnabled,\n             playerTypes,\n             gameSelectorModel.getGameData().getGameVersion(),\n             gameSelectorModel.getGameName(),\n             gameSelectorModel.getGameRound());\n-    return new LocalLauncher(gameSelectorModel, new PlainRandomSource(), pl, parent, launchAction);\n+    return new LocalLauncher(", "originalCommit": "90d524b37e8af88bb9ac0e0de1394f6235c6316d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzMTMxNQ==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546431315", "bodyText": "You are still using Injections in a static manner, so I'm not sure how this is any better than what I was doing.", "author": "trevan", "createdAt": "2020-12-20T20:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzODg4OQ==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546438889", "bodyText": "Yes, but note that the 'new' code is all grouped together, the usage of the data is not in a static manner. If you wish to test 'localLauncher', you can do so quite readily. There is no static coupling to the injected data.\nHence, there is a separation of concerns, one is object creation and data injection vs usage. It is the DI principle, or the \"don't call us, we'll call you\" principle.\nThe 'new' of LocalLauncher though is another example of static coupling, so we have moved the problem, but the problem is reduced. Instead of having 'N' layers passing data and invoking new, we have \"N-1\" and can eventually get that to be '1' where we have one factory instantiating all of the classes.\nIf you're familiar with Spring or Guice, this kind of pattern would result in no changes to LocalLauncher for example if we add in a proper DI framework, the constructor code would become automated for us.", "author": "DanVanAtta", "createdAt": "2020-12-20T21:29:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzODk4MA==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546438980", "bodyText": "Let me really try to clarify, the 'static' manner is all about context. From the point of view of who uses the data, it is not static, it is not statically coupled. The creation of localLauncher is still statically coupled, and that is a problem. A 'new' call and a static method call are both static coupling. But at least, LocalLauncher is not statically coupled to the data it is using.", "author": "DanVanAtta", "createdAt": "2020-12-20T21:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzOTE5Ng==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546439196", "bodyText": "IE:\n## Bad\nconstructor() {\n    thisWillBePainfulToTest = staticData();\n}\n\nvs:\n## Better\n\nconstructor(Data thisCanBeInjected) {\n    this.canBeInjected = thisCanBeInjected;\n}", "author": "DanVanAtta", "createdAt": "2020-12-20T21:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0MDA3NA==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546440074", "bodyText": "I understand the problem of statically coupling.  That's not the issue I'm talking about.  I'm trying to understand why one level down in the call tree (where I was doing the static calls) is \"bad\" while this level is \"good\".  You are still doing static coupling so why is it better to do it here vs lower in the call tree or higher in the call tree?\nWhen I said it would be too big of a change, I was talking about removing the static coupling completely and moving it all the way up to the top of the call tree.  But you only moved it one level up.  If you had asked me to do that, I wouldn't have had a problem with that size of a change.", "author": "trevan", "createdAt": "2020-12-20T21:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0MzkzMg==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546443932", "bodyText": "Agree, pushing up one level does not solve the problem.\nThough:\n\nInjections does not yet have any examples where it is used in a pure static context. The data is injected in a static way, but the data used has no examples of being static (the data is always injected).\nStatic coupling is worse the deeper it is in the system. One can consider a number of examples, let's say ClientSettings was initialized at a low level. It would be hard to reason about and appear as a very interesting side effect. It would be very painful to determine the ordering of when something is initialized\nHigher level modules depend on lower level modules, the more static coupling in lower level modules, transitively, the more coupling you have on the higher level modules.\nImperative shell, functional core is broken, a low level module with static data coupling is not functional. This can be viewed from the perspective of a dependency graph, if low level modules have dependencies on other modules and not just their higher level modules, it creates a tangle of dependencies.\nLow level modules with tight coupling are harder to re-use\nThe testing paradigm shifts and you get the anti-pattern of nearly all integration tests to test anything. Higher level are often tested at a system and integration level, which is fine as you would really want to 'new' up the Injections module. In other words, having a higher level module that has mocks for all of its low level systems is not that valuable of a test (at that point it's just verifying wiring, and a test that just verifies that a series of mock objects have called each other is not necessarily that valuable). Meanwhile, testing a low level module in isolation can be useful and valuable. If you have a tight coupling then either you need to instantiate that framework, which means testing is difficult and dependent on that framework (very painful if the framework changes and can introduce dependencies between tests), or a person is using mock objects to inject mock behavior which is also not great as mocks create implementation dependencies between test and the code under test. Meanwhile if you have a low level object, and you can just pass data to it, and assert return values, then the test is not dependent on implementation and is the most flexible (which is great, because you can then change implementation and not have to rewrite the test. No testing is worse than poor testing, but working in an environment where a single change leads to several hours of updating many tests is not great).", "author": "DanVanAtta", "createdAt": "2020-12-20T22:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0NDA5OA==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546444098", "bodyText": "TL;DR\n\nI don't want us to start a pattern of using Injections for static data.\nlow level static coupling is worse than static coupling at higher levels.\n\nIf we keep moving the coupling up levels, then eventually we will have most of the initialization code in one place. Likely that will be a good thing. To get there I think we'll need to pivot some of the dependencies so instead of having a dependency tree that is narrow and deep, it would be more shallow and broad.", "author": "DanVanAtta", "createdAt": "2020-12-20T22:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0NTEwMw==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546445103", "bodyText": "So the next time you want something moved up a level, can you be a bit more clear?  Because I misunderstood you and thought you wanted the static coupling removed completely and for Injections to be passed around.  But it looks like you just wanted it moved up one level.", "author": "trevan", "createdAt": "2020-12-20T22:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0Njg4Nw==", "url": "https://github.com/triplea-game/triplea/pull/8468#discussion_r546446887", "bodyText": "Sure : )", "author": "DanVanAtta", "createdAt": "2020-12-20T22:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyOTIzOQ=="}], "type": "inlineReview", "revised_code": null}]}