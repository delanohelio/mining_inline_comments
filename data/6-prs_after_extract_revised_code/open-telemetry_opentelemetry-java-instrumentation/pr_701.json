{"pr_number": 701, "pr_title": "Remove http server decorator", "pr_createdAt": "2020-07-15T15:27:25Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/701", "timeline": [{"oid": "9cbdcfff5b545ae84afdaf791e30d787fc7de23c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9cbdcfff5b545ae84afdaf791e30d787fc7de23c", "message": "Ratpack migrated from ServerDecorator", "committedDate": "2020-07-15T11:56:41Z", "type": "commit"}, {"oid": "109ded71f0c47c90bc5d4818075e7a2ccef90a96", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/109ded71f0c47c90bc5d4818075e7a2ccef90a96", "message": "Finatra migrated from ServerDecorator", "committedDate": "2020-07-15T12:17:15Z", "type": "commit"}, {"oid": "b0333d60b0224f790843c1ba5a15e9be2f26c6da", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b0333d60b0224f790843c1ba5a15e9be2f26c6da", "message": "Play 2.3 migrated from ServerDecorator", "committedDate": "2020-07-15T12:29:05Z", "type": "commit"}, {"oid": "b452ac2705ec4bc072b7efa49e658de508f79193", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b452ac2705ec4bc072b7efa49e658de508f79193", "message": "Play 2.4 migrated from ServerDecorator", "committedDate": "2020-07-15T12:44:44Z", "type": "commit"}, {"oid": "56eb2a222b1d2984f6e300f0a19261b3729f9d81", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/56eb2a222b1d2984f6e300f0a19261b3729f9d81", "message": "Play 2.6 migrated from ServerDecorator", "committedDate": "2020-07-15T12:58:59Z", "type": "commit"}, {"oid": "f69b6527fff6483dd8e0b56566dbb3067272ebb0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f69b6527fff6483dd8e0b56566dbb3067272ebb0", "message": "Polish", "committedDate": "2020-07-15T15:21:28Z", "type": "commit"}, {"oid": "d207ac3463ca3d564dc84772be8ffc45f01e2d93", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d207ac3463ca3d564dc84772be8ffc45f01e2d93", "message": "Polish", "committedDate": "2020-07-15T18:37:10Z", "type": "commit"}, {"oid": "27d3037a65048f6b2f5e2edd120bac81cde22961", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/27d3037a65048f6b2f5e2edd120bac81cde22961", "message": "Organize imports", "committedDate": "2020-07-15T19:07:36Z", "type": "commit"}, {"oid": "75256e235b2f47bac95b87e60bdc191249330cd4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/75256e235b2f47bac95b87e60bdc191249330cd4", "message": "Relax muzzle checks", "committedDate": "2020-07-16T09:09:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNjkyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/701#discussion_r456136923", "bodyText": "I agree with your TODO, delete \ud83d\ude04\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!TRACER.getCurrentSpan().getContext().isValid()) {\n          \n          \n            \n                  // TODO should we do that for INTERNAL span?\n          \n          \n            \n                  final SpanContext extractedContext = extract(req.headers(), GETTER);\n          \n          \n            \n                  if (extractedContext.isValid()) {\n          \n          \n            \n                    spanBuilder.setParent(extractedContext);\n          \n          \n            \n                  }", "author": "trask", "createdAt": "2020-07-16T23:39:26Z", "path": "instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java", "diffHunk": "@@ -37,17 +36,17 @@\n   public static SpanWithScope onEnter(@Advice.Argument(0) final Request req) {\n     final Span.Builder spanBuilder = TRACER.spanBuilder(\"play.request\");\n     if (!TRACER.getCurrentSpan().getContext().isValid()) {\n+      // TODO should we do that for INTERNAL span?\n       final SpanContext extractedContext = extract(req.headers(), GETTER);\n       if (extractedContext.isValid()) {\n         spanBuilder.setParent(extractedContext);\n       }", "originalCommit": "75256e235b2f47bac95b87e60bdc191249330cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f773023b57e95c7faee34d829f21bc35a84d00e", "chunk": "diff --git a/instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java b/instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java\nindex 3e82962af9..6b5707a760 100644\n--- a/instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java\n+++ b/instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java\n\n@@ -34,18 +32,7 @@ import scala.concurrent.Future;\n public class PlayAdvice {\n   @Advice.OnMethodEnter(suppress = Throwable.class)\n   public static SpanWithScope onEnter(@Advice.Argument(0) final Request req) {\n-    final Span.Builder spanBuilder = TRACER.spanBuilder(\"play.request\");\n-    if (!TRACER.getCurrentSpan().getContext().isValid()) {\n-      // TODO should we do that for INTERNAL span?\n-      final SpanContext extractedContext = extract(req.headers(), GETTER);\n-      if (extractedContext.isValid()) {\n-        spanBuilder.setParent(extractedContext);\n-      }\n-    }\n-    // An upstream framework (e.g. akka-http, netty) has already started the span.\n-    // Do not extract the context.\n-\n-    final Span span = spanBuilder.startSpan();\n+    final Span span = TRACER.spanBuilder(\"play.request\").startSpan();\n     DECORATE.afterStart(span);\n \n     return new SpanWithScope(span, currentContextWith(span));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNzMxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/701#discussion_r456137313", "bodyText": "and delete\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // An upstream framework (e.g. akka-http, netty) has already started the span.\n          \n          \n            \n                // Do not extract the context.", "author": "trask", "createdAt": "2020-07-16T23:40:37Z", "path": "instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java", "diffHunk": "@@ -37,17 +36,17 @@\n   public static SpanWithScope onEnter(@Advice.Argument(0) final Request req) {\n     final Span.Builder spanBuilder = TRACER.spanBuilder(\"play.request\");\n     if (!TRACER.getCurrentSpan().getContext().isValid()) {\n+      // TODO should we do that for INTERNAL span?\n       final SpanContext extractedContext = extract(req.headers(), GETTER);\n       if (extractedContext.isValid()) {\n         spanBuilder.setParent(extractedContext);\n       }\n-    } else {\n-      // An upstream framework (e.g. akka-http, netty) has already started the span.\n-      // Do not extract the context.\n     }\n+    // An upstream framework (e.g. akka-http, netty) has already started the span.\n+    // Do not extract the context.\n+", "originalCommit": "75256e235b2f47bac95b87e60bdc191249330cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f773023b57e95c7faee34d829f21bc35a84d00e", "chunk": "diff --git a/instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java b/instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java\nindex 3e82962af9..6b5707a760 100644\n--- a/instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java\n+++ b/instrumentation/play/play-2.3/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_3/PlayAdvice.java\n\n@@ -34,18 +32,7 @@ import scala.concurrent.Future;\n public class PlayAdvice {\n   @Advice.OnMethodEnter(suppress = Throwable.class)\n   public static SpanWithScope onEnter(@Advice.Argument(0) final Request req) {\n-    final Span.Builder spanBuilder = TRACER.spanBuilder(\"play.request\");\n-    if (!TRACER.getCurrentSpan().getContext().isValid()) {\n-      // TODO should we do that for INTERNAL span?\n-      final SpanContext extractedContext = extract(req.headers(), GETTER);\n-      if (extractedContext.isValid()) {\n-        spanBuilder.setParent(extractedContext);\n-      }\n-    }\n-    // An upstream framework (e.g. akka-http, netty) has already started the span.\n-    // Do not extract the context.\n-\n-    final Span span = spanBuilder.startSpan();\n+    final Span span = TRACER.spanBuilder(\"play.request\").startSpan();\n     DECORATE.afterStart(span);\n \n     return new SpanWithScope(span, currentContextWith(span));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzOTIyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/701#discussion_r456139222", "bodyText": "delete !isValid condition above, and delete this comment \u26a1\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // An upstream framework (e.g. akka-http, netty) has already started the span.\n          \n          \n            \n                // Do not extract the context.", "author": "trask", "createdAt": "2020-07-16T23:46:49Z", "path": "instrumentation/play/play-2.4/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_4/PlayAdvice.java", "diffHunk": "@@ -40,13 +40,11 @@ public static SpanWithScope onEnter(@Advice.Argument(0) final Request req) {\n       if (extractedContext.isValid()) {\n         spanBuilder.setParent(extractedContext);\n       }\n-    } else {\n-      // An upstream framework (e.g. akka-http, netty) has already started the span.\n-      // Do not extract the context.\n     }\n+    // An upstream framework (e.g. akka-http, netty) has already started the span.\n+    // Do not extract the context.", "originalCommit": "75256e235b2f47bac95b87e60bdc191249330cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f773023b57e95c7faee34d829f21bc35a84d00e", "chunk": "diff --git a/instrumentation/play/play-2.4/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_4/PlayAdvice.java b/instrumentation/play/play-2.4/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_4/PlayAdvice.java\nindex e585c3b7b5..fa52748f89 100644\n--- a/instrumentation/play/play-2.4/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_4/PlayAdvice.java\n+++ b/instrumentation/play/play-2.4/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_4/PlayAdvice.java\n\n@@ -34,16 +32,7 @@ import scala.concurrent.Future;\n public class PlayAdvice {\n   @Advice.OnMethodEnter(suppress = Throwable.class)\n   public static SpanWithScope onEnter(@Advice.Argument(0) final Request req) {\n-    final Span.Builder spanBuilder = TRACER.spanBuilder(\"play.request\");\n-    if (!TRACER.getCurrentSpan().getContext().isValid()) {\n-      final SpanContext extractedContext = extract(req.headers(), GETTER);\n-      if (extractedContext.isValid()) {\n-        spanBuilder.setParent(extractedContext);\n-      }\n-    }\n-    // An upstream framework (e.g. akka-http, netty) has already started the span.\n-    // Do not extract the context.\n-    final Span span = spanBuilder.startSpan();\n+    final Span span = TRACER.spanBuilder(\"play.request\").startSpan();\n     DECORATE.afterStart(span);\n \n     return new SpanWithScope(span, currentContextWith(span));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzOTgwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/701#discussion_r456139800", "bodyText": "and again, let's delete condition above, and this comment \ud83d\udc4d\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // An upstream framework (e.g. akka-http, netty) has already started the span.\n          \n          \n            \n                // Do not extract the context.", "author": "trask", "createdAt": "2020-07-16T23:48:54Z", "path": "instrumentation/play/play-2.6/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_6/PlayAdvice.java", "diffHunk": "@@ -40,13 +40,12 @@ public static SpanWithScope onEnter(@Advice.Argument(0) final Request req) {\n       if (extractedContext.isValid()) {\n         spanBuilder.setParent(extractedContext);\n       }\n-    } else {\n-      // An upstream framework (e.g. akka-http, netty) has already started the span.\n-      // Do not extract the context.\n     }\n+    // An upstream framework (e.g. akka-http, netty) has already started the span.\n+    // Do not extract the context.\n+", "originalCommit": "75256e235b2f47bac95b87e60bdc191249330cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f773023b57e95c7faee34d829f21bc35a84d00e", "chunk": "diff --git a/instrumentation/play/play-2.6/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_6/PlayAdvice.java b/instrumentation/play/play-2.6/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_6/PlayAdvice.java\nindex 7f3822a007..1df89804b3 100644\n--- a/instrumentation/play/play-2.6/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_6/PlayAdvice.java\n+++ b/instrumentation/play/play-2.6/src/main/java/io/opentelemetry/auto/instrumentation/play/v2_6/PlayAdvice.java\n\n@@ -34,17 +31,7 @@ import scala.concurrent.Future;\n public class PlayAdvice {\n   @Advice.OnMethodEnter(suppress = Throwable.class)\n   public static SpanWithScope onEnter(@Advice.Argument(0) final Request req) {\n-    final Span.Builder spanBuilder = TRACER.spanBuilder(\"play.request\");\n-    if (!TRACER.getCurrentSpan().getContext().isValid()) {\n-      final SpanContext extractedContext = extract(req.headers(), GETTER);\n-      if (extractedContext.isValid()) {\n-        spanBuilder.setParent(extractedContext);\n-      }\n-    }\n-    // An upstream framework (e.g. akka-http, netty) has already started the span.\n-    // Do not extract the context.\n-\n-    final Span span = spanBuilder.startSpan();\n+    final Span span = TRACER.spanBuilder(\"play.request\").startSpan();\n     DECORATE.afterStart(span);\n \n     return new SpanWithScope(span, currentContextWith(span));\n"}}, {"oid": "a29319b1e60d372a93d7832b956f80c46183e90e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a29319b1e60d372a93d7832b956f80c46183e90e", "message": "Ratpack version 1.4 is now supported", "committedDate": "2020-07-17T05:46:59Z", "type": "commit"}, {"oid": "8f773023b57e95c7faee34d829f21bc35a84d00e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f773023b57e95c7faee34d829f21bc35a84d00e", "message": "Fix muzzle failures on Play", "committedDate": "2020-07-17T07:31:50Z", "type": "commit"}]}