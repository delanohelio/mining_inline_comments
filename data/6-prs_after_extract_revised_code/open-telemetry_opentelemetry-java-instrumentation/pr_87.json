{"pr_number": 87, "pr_title": "Refactored http-url-connection, java-concurrent, jax-rs-annotation-*", "pr_createdAt": "2020-01-23T20:08:40Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/87", "timeline": [{"oid": "b24aab52390fc5602dc273d1cd0a077b9b20d744", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b24aab52390fc5602dc273d1cd0a077b9b20d744", "message": "Refactor of twilio (WIP)", "committedDate": "2020-01-22T16:03:47Z", "type": "commit"}, {"oid": "3260b8d7114af1f14da71552605efcbc3c9ddbb2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3260b8d7114af1f14da71552605efcbc3c9ddbb2", "message": "Merge from upstream", "committedDate": "2020-01-23T12:40:26Z", "type": "commit"}, {"oid": "1aacae447391e0c4554929be25d81db335b2c00e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1aacae447391e0c4554929be25d81db335b2c00e", "message": "Refactored http-url-connection", "committedDate": "2020-01-23T13:59:00Z", "type": "commit"}, {"oid": "009987917c65d52355debb2d88a5d8d0d87dd6e0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/009987917c65d52355debb2d88a5d8d0d87dd6e0", "message": "Refactored java-concurrent", "committedDate": "2020-01-23T15:34:40Z", "type": "commit"}, {"oid": "272f531fd1981be54f873a6f2be7b2b3d0ffb886", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/272f531fd1981be54f873a6f2be7b2b3d0ffb886", "message": "Refactored jax-rs-annotation-1", "committedDate": "2020-01-23T18:34:50Z", "type": "commit"}, {"oid": "224497083859edf448046cbf4529a6837b48a248", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/224497083859edf448046cbf4529a6837b48a248", "message": "Refactored jax-rs-annotations-2 instrumentation", "committedDate": "2020-01-23T19:58:04Z", "type": "commit"}, {"oid": "d0f104508a760471738470f152cad7b5cd1667c1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d0f104508a760471738470f152cad7b5cd1667c1", "message": "Adjusted formatting", "committedDate": "2020-01-23T20:19:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMTYzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/87#discussion_r370331631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new SpanScopePair(span, TRACER.withSpan(span));\n          \n          \n            \n                    return TRACER.withSpan(DefaultSpan.getInvalid());\n          \n      \n    \n    \n  \n\nand pass Scope to @OnMethodExit\n(the idea behind this instrumentation is that it prevents the current span from propagating into async work that should not be considered as part of the current request)", "author": "trask", "createdAt": "2020-01-23T20:13:36Z", "path": "instrumentation/java-concurrent/src/main/java/io/opentelemetry/auto/instrumentation/java/concurrent/AsyncPropagatingDisableInstrumentation.java", "diffHunk": "@@ -87,18 +85,18 @@ public DisableAsyncInstrumentation(\n   public static class DisableAsyncAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope enter() {\n-      final AgentSpan span = activeSpan();\n-      if (span != null) {\n-        return activateSpan(noopSpan(), false);\n+    public static SpanScopePair enter() {\n+      final Span span = TRACER.getCurrentSpan();\n+      if (span.getContext().isValid()) {\n+        return new SpanScopePair(span, TRACER.withSpan(span));", "originalCommit": "224497083859edf448046cbf4529a6837b48a248", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "61405b16cd3af890037b7e8df46c5e499d8fed78", "chunk": "diff --git a/instrumentation/java-concurrent/src/main/java/io/opentelemetry/auto/instrumentation/java/concurrent/AsyncPropagatingDisableInstrumentation.java b/instrumentation/java-concurrent/src/main/java/io/opentelemetry/auto/instrumentation/java/concurrent/AsyncPropagatingDisableInstrumentation.java\nindex b7faf826d8..8a62a4e707 100644\n--- a/instrumentation/java-concurrent/src/main/java/io/opentelemetry/auto/instrumentation/java/concurrent/AsyncPropagatingDisableInstrumentation.java\n+++ b/instrumentation/java-concurrent/src/main/java/io/opentelemetry/auto/instrumentation/java/concurrent/AsyncPropagatingDisableInstrumentation.java\n\n@@ -88,7 +88,7 @@ public final class AsyncPropagatingDisableInstrumentation implements Instrumente\n     public static SpanScopePair enter() {\n       final Span span = TRACER.getCurrentSpan();\n       if (span.getContext().isValid()) {\n-        return new SpanScopePair(span, TRACER.withSpan(span));\n+        return TRACER.withSpan(DefaultSpan.getInvalid());\n       }\n       return null;\n     }\n"}}, {"oid": "61405b16cd3af890037b7e8df46c5e499d8fed78", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/61405b16cd3af890037b7e8df46c5e499d8fed78", "message": "Update instrumentation/java-concurrent/src/main/java/io/opentelemetry/auto/instrumentation/java/concurrent/AsyncPropagatingDisableInstrumentation.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-01-23T20:31:26Z", "type": "commit"}, {"oid": "e4c7b7c9fcebcf20290738c80b83e50d3aae2f44", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e4c7b7c9fcebcf20290738c80b83e50d3aae2f44", "message": "Fixed compilation issue after accepting proposed change", "committedDate": "2020-01-23T20:40:34Z", "type": "commit"}, {"oid": "97d041f711c2b37322f6d4e4ca1d436936beaa85", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97d041f711c2b37322f6d4e4ca1d436936beaa85", "message": "Merge branch 'master' into prydin-instr-refactor", "committedDate": "2020-01-23T20:52:07Z", "type": "commit"}]}