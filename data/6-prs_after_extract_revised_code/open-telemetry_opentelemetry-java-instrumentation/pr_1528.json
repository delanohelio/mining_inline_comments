{"pr_number": 1528, "pr_title": "Run muzzle once per instrumented library - introducing InstrumentationModule", "pr_createdAt": "2020-10-29T17:47:02Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528", "timeline": [{"oid": "54597eb823aaa7b3fdca34fd49d0a2acfd79d9d3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/54597eb823aaa7b3fdca34fd49d0a2acfd79d9d3", "message": "Run muzzle once per instrumented library - introducing InstrumentationModule", "committedDate": "2020-10-30T10:18:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDkyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516430928", "bodyText": "Now that it's not service loader, just wondering do these need to be public?", "author": "anuraaga", "createdAt": "2020-11-03T05:10:24Z", "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -16,43 +15,26 @@\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n-import com.google.auto.service.AutoService;\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n import io.opentelemetry.javaagent.instrumentation.api.SpanWithScope;\n-import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n import java.util.Map;\n import javax.servlet.http.HttpServletRequest;\n import net.bytebuddy.asm.Advice;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n-@AutoService(Instrumenter.class)\n-public final class HandlerAdapterInstrumentation extends Instrumenter.Default {\n-\n-  public HandlerAdapterInstrumentation() {\n-    super(\"spring-web\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n-    // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.servlet.HandlerAdapter\");\n-  }\n+public final class HandlerAdapterInstrumentation implements TypeInstrumentation {", "originalCommit": "d7cd2e640634d4531fb642391839d52f4c77c2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NDM0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516564345", "bodyText": "Nope, do not need. Thanks for catching this!", "author": "mateuszrzeszutek", "createdAt": "2020-11-03T10:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "chunk": "diff --git a/instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java b/instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java\nindex 93601cdc9b..55a3de6798 100644\n--- a/instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java\n+++ b/instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java\n\n@@ -28,7 +29,13 @@ import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n-public final class HandlerAdapterInstrumentation implements TypeInstrumentation {\n+final class HandlerAdapterInstrumentation implements TypeInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return hasClassesNamed(\"org.springframework.web.servlet.HandlerAdapter\");\n+  }\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTU2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516431561", "bodyText": "The only unfortunate change is that these optimizations for expensive type matcher aren't next to the optimized type matcher anymore. I don't know if that means it's good to accept classloaderMatcher on typeinstrumentation as well or not, wonder what others think.", "author": "anuraaga", "createdAt": "2020-11-03T05:13:33Z", "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.List;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class SpringMvcInstrumentationModule extends InstrumentationModule {\n+  public SpringMvcInstrumentationModule() {\n+    super(\"spring-mvc\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatchers.\n+    return hasClassesNamed(\n+        \"org.springframework.context.support.AbstractApplicationContext\",", "originalCommit": "d7cd2e640634d4531fb642391839d52f4c77c2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0Mzc1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516443755", "bodyText": "\ud83d\udc4d that would be nice to keep them next to each other somehow", "author": "trask", "createdAt": "2020-11-03T06:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NDE5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516564191", "bodyText": "Hmm, that is true. I think that we have 2 pattern of classLoaderMatcher() usage (correct me if I'm wrong):\n\nOptimization for extends()/implements() typeMatcher()\nlibrary version check, e.g. requiring a class that is present in a particular instrumented library version.\n\nI believe that 2. should stay in the InstrumentationModule - 1. should be placed in TypeInstrumentation though, as it 's and optimization for a single type instrumentation. I'll add another classLoaderMatcher() method to TypeInstrumentation and just and() those two.", "author": "mateuszrzeszutek", "createdAt": "2020-11-03T10:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "chunk": "diff --git a/instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java b/instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java\nindex af6371d330..198940844d 100644\n--- a/instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java\n+++ b/instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java\n\n@@ -5,14 +5,12 @@\n \n package io.opentelemetry.javaagent.instrumentation.springwebmvc;\n \n-import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Arrays.asList;\n \n import com.google.auto.service.AutoService;\n import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n-import java.util.Arrays;\n import java.util.List;\n-import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(InstrumentationModule.class)\n public final class SpringMvcInstrumentationModule extends InstrumentationModule {\n"}}, {"oid": "9f9fd82404de40da81b7b0ed9b807ba901df9687", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f9fd82404de40da81b7b0ed9b807ba901df9687", "message": "Run muzzle once per instrumented library - introducing InstrumentationModule", "committedDate": "2020-11-03T10:51:12Z", "type": "commit"}, {"oid": "654acad1cb077e5c933de002c924338e44924092", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/654acad1cb077e5c933de002c924338e44924092", "message": "spotless", "committedDate": "2020-11-03T10:51:12Z", "type": "commit"}, {"oid": "744d9125e693e778ad9637467bb72a58e4168311", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/744d9125e693e778ad9637467bb72a58e4168311", "message": "Fix muzzle", "committedDate": "2020-11-03T10:51:12Z", "type": "commit"}, {"oid": "97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "message": "Apply code review comments", "committedDate": "2020-11-03T11:15:16Z", "type": "commit"}, {"oid": "97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "message": "Apply code review comments", "committedDate": "2020-11-03T11:15:16Z", "type": "forcePushed"}]}