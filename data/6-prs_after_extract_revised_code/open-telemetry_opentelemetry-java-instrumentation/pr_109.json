{"pr_number": 109, "pr_title": "Bring back Kafka Streams, RabbitMQ, and AWS Java SDK 2.2 instrumentation", "pr_createdAt": "2020-01-29T23:49:07Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/109", "timeline": [{"oid": "a46db0fa426cd42101a637663c161b31d2d11e4e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a46db0fa426cd42101a637663c161b31d2d11e4e", "message": "Bring back Kafka Streams instrumentation", "committedDate": "2020-01-29T23:47:22Z", "type": "commit"}, {"oid": "c2bee6ed38e1bbe1d238686f09d713351afcb130", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c2bee6ed38e1bbe1d238686f09d713351afcb130", "message": "Bring back AWS Java SDK 2.2 instrumentation", "committedDate": "2020-01-29T23:47:22Z", "type": "commit"}, {"oid": "fc00e32c341ff18c31d5f20bfbe1d00b0b9817e5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc00e32c341ff18c31d5f20bfbe1d00b0b9817e5", "message": "Bring back RabbitMQ instrumentation", "committedDate": "2020-01-30T00:35:32Z", "type": "commit"}, {"oid": "3c3d0e28ed4218f4150306ffc4a5c6521cfcccf7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3c3d0e28ed4218f4150306ffc4a5c6521cfcccf7", "message": "Merge remote-tracking branch 'upstream/master' into bring-back-some-instrumentation", "committedDate": "2020-02-01T21:11:22Z", "type": "commit"}, {"oid": "55299a5ddbb04f8b1fc1b6560f8c1c36c8b42f3c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/55299a5ddbb04f8b1fc1b6560f8c1c36c8b42f3c", "message": "Fix merge", "committedDate": "2020-02-01T21:43:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMTA5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/109#discussion_r373231095", "bodyText": "I think this is acceptable and probably a better option than relying on activeSpan().  Any risk of this getting out of sync somehow?", "author": "tylerbenson", "createdAt": "2020-01-30T22:35:48Z", "path": "instrumentation/kafka-streams-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafka_streams/KafkaStreamsProcessorInstrumentation.java", "diffHunk": "@@ -35,6 +32,10 @@\n   // Also this instrumentation doesn't define 'producer' making it 'asymmetric' - resulting\n   // in awkward tests and traces. We may want to revisit this in the future.\n \n+  public static class SpanScopeHolder {\n+    public static final ThreadLocal<SpanScopePair> CURRENT = new ThreadLocal<>();", "originalCommit": "fc00e32c341ff18c31d5f20bfbe1d00b0b9817e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MjUxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/109#discussion_r374392516", "bodyText": "I don't think it can get out of sync, unless there are future changes to the kafka streams lib that invalidate the assumption of our instrumentation:\n    public boolean process() {\n        final StampedRecord record = partitionGroup.nextRecord(recordInfo);\n        ...\n        <on exit (success or failure), if CURRENT was set, then end span and clear>\n    }\n\n    StampedRecord nextRecord(RecordInfo info) {\n        ...\n        <on successful exit, start span and set CURRENT>\n    }\n\nIt could be better though, I just pushed a change to make the instrumentation more future-proof (e.g. in case there are changes to kafka streams lib).", "author": "trask", "createdAt": "2020-02-03T23:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMTA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d39d0858a4a480f44af5b5f1c4062337c724e873", "chunk": "diff --git a/instrumentation/kafka-streams-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafka_streams/KafkaStreamsProcessorInstrumentation.java b/instrumentation/kafka-streams-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafka_streams/KafkaStreamsProcessorInstrumentation.java\nindex 2a66d39be4..cb0ecacadf 100644\n--- a/instrumentation/kafka-streams-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafka_streams/KafkaStreamsProcessorInstrumentation.java\n+++ b/instrumentation/kafka-streams-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafka_streams/KafkaStreamsProcessorInstrumentation.java\n\n@@ -27,13 +27,13 @@ import org.apache.kafka.streams.processor.internals.StampedRecord;\n public class KafkaStreamsProcessorInstrumentation {\n   // These two instrumentations work together to apply StreamTask.process.\n   // The combination of these is needed because there's no good instrumentation point.\n-  // FIXME: this instrumentation takes somewhat strange approach. It looks like Kafka Streams\n-  // defines notions of 'processor', 'source' and 'sink'. There is no 'consumer' as such.\n-  // Also this instrumentation doesn't define 'producer' making it 'asymmetric' - resulting\n-  // in awkward tests and traces. We may want to revisit this in the future.\n+\n+  public static class SpanScopeThreadLocal {\n+    public static final ThreadLocal<SpanScopeHolder> HOLDER = new ThreadLocal<>();\n+  }\n \n   public static class SpanScopeHolder {\n-    public static final ThreadLocal<SpanScopePair> CURRENT = new ThreadLocal<>();\n+    public SpanScopePair spanScopePair;\n   }\n \n   @AutoService(Instrumenter.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMTYzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/109#discussion_r373231638", "bodyText": "Static import CURRENT", "author": "tylerbenson", "createdAt": "2020-01-30T22:37:10Z", "path": "instrumentation/aws-java-sdk-2.2/src/main/java/io/opentelemetry/auto/instrumentation/aws/v2/AwsHttpClientInstrumentation.java", "diffHunk": "@@ -58,8 +57,9 @@\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static boolean methodEnter(@Advice.This final Object thiz) {\n       if (thiz instanceof MakeAsyncHttpRequestStage) {\n-        final AgentScope scope = activeScope();\n+        final Scope scope = TracingExecutionInterceptor.ScopeHolder.CURRENT.get();", "originalCommit": "fc00e32c341ff18c31d5f20bfbe1d00b0b9817e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f214ebec206b86f2da4fb511c0587b7e77de573", "chunk": "diff --git a/instrumentation/aws-java-sdk-2.2/src/main/java/io/opentelemetry/auto/instrumentation/aws/v2/AwsHttpClientInstrumentation.java b/instrumentation/aws-java-sdk-2.2/src/main/java/io/opentelemetry/auto/instrumentation/aws/v2/AwsHttpClientInstrumentation.java\nindex fd0e505a94..047161e9f3 100644\n--- a/instrumentation/aws-java-sdk-2.2/src/main/java/io/opentelemetry/auto/instrumentation/aws/v2/AwsHttpClientInstrumentation.java\n+++ b/instrumentation/aws-java-sdk-2.2/src/main/java/io/opentelemetry/auto/instrumentation/aws/v2/AwsHttpClientInstrumentation.java\n\n@@ -57,9 +58,9 @@ public final class AwsHttpClientInstrumentation extends AbstractAwsClientInstrum\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static boolean methodEnter(@Advice.This final Object thiz) {\n       if (thiz instanceof MakeAsyncHttpRequestStage) {\n-        final Scope scope = TracingExecutionInterceptor.ScopeHolder.CURRENT.get();\n+        final Scope scope = CURRENT.get();\n         if (scope != null) {\n-          TracingExecutionInterceptor.ScopeHolder.CURRENT.set(null);\n+          CURRENT.set(null);\n           scope.close();\n           return true;\n         }\n"}}, {"oid": "6f214ebec206b86f2da4fb511c0587b7e77de573", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6f214ebec206b86f2da4fb511c0587b7e77de573", "message": "Static import CURRENT", "committedDate": "2020-02-03T20:42:33Z", "type": "commit"}, {"oid": "3275f0b927c4f38c7ace89cf8170cb2c953d26cb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3275f0b927c4f38c7ace89cf8170cb2c953d26cb", "message": "Merge branch 'master' into bring-back-some-instrumentation", "committedDate": "2020-02-03T20:44:25Z", "type": "commit"}, {"oid": "3ba43410f7df187b19a36bfd401da54f38024452", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ba43410f7df187b19a36bfd401da54f38024452", "message": "Remove outdated comment", "committedDate": "2020-02-03T21:44:46Z", "type": "commit"}, {"oid": "d39d0858a4a480f44af5b5f1c4062337c724e873", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d39d0858a4a480f44af5b5f1c4062337c724e873", "message": "Make kafka streams instrumentation more future proof", "committedDate": "2020-02-03T23:03:48Z", "type": "commit"}, {"oid": "38c829efeafe7280cea94352e4e0be67f45070ed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38c829efeafe7280cea94352e4e0be67f45070ed", "message": "Fix muzzle", "committedDate": "2020-02-04T00:46:24Z", "type": "commit"}, {"oid": "3b8dc605fb9374abfdbb91c4d5b06744daaed6c9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b8dc605fb9374abfdbb91c4d5b06744daaed6c9", "message": "Simplify", "committedDate": "2020-02-04T17:34:20Z", "type": "commit"}]}