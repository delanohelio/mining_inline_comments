{"pr_number": 651, "pr_title": "Kubernetes java client instrumenting", "pr_createdAt": "2020-07-09T05:32:35Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651", "timeline": [{"oid": "4aba93f8f2962cb79976f0368df522f4330248de", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4aba93f8f2962cb79976f0368df522f4330248de", "message": "kubernetes java client support", "committedDate": "2020-07-09T05:32:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MDgxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452060813", "bodyText": "We usually don't have these tags here. Please remove.", "author": "iNikem", "createdAt": "2020-07-09T08:45:01Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import okhttp3.Interceptor;\n+\n+/**\n+ * @author zuoxiu.jm\n+ * @version : KubernetesClientInstrumentation.java, v 0.1 2020\u5e7407\u670808\u65e5 4:35 PM zuoxiu.jm Exp $", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExOTg0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452119842", "bodyText": "oh oversight, should have swipe all these generated comments", "author": "yue9944882", "createdAt": "2020-07-09T10:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MDgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\nindex 3829036bc8..83fbf2fcfa 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\n\n@@ -16,6 +16,7 @@\n \n package io.opentelemetry.auto.instrumentation.kubernetes;\n \n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n import static java.util.Collections.singletonMap;\n import static net.bytebuddy.matcher.ElementMatchers.named;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MTE2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452061169", "bodyText": "Please add class loader matcher as well. There are plenty of examples in other instrumenters.", "author": "iNikem", "createdAt": "2020-07-09T08:45:35Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import okhttp3.Interceptor;\n+\n+/**\n+ * @author zuoxiu.jm\n+ * @version : KubernetesClientInstrumentation.java, v 0.1 2020\u5e7407\u670808\u65e5 4:35 PM zuoxiu.jm Exp $\n+ */\n+@AutoService(Instrumenter.class)\n+public class KubernetesClientInstrumentation extends Instrumenter.Default {\n+\n+  public KubernetesClientInstrumentation() {\n+    super(\"kubernetes\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyMDM0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452120342", "bodyText": "i wrapped the name matcher w/ extendsClass(..), is that what you're expecting?", "author": "yue9944882", "createdAt": "2020-07-09T10:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MTQzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452151436", "bodyText": "No, I mean\n@Override\n  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n    return hasClassesNamed(\"io.kubernetes.client.openapi.ApiClient\");\n  }", "author": "iNikem", "createdAt": "2020-07-09T11:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MTE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\nindex 3829036bc8..83fbf2fcfa 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\n\n@@ -16,6 +16,7 @@\n \n package io.opentelemetry.auto.instrumentation.kubernetes;\n \n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n import static java.util.Collections.singletonMap;\n import static net.bytebuddy.matcher.ElementMatchers.named;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MjQ3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452062478", "bodyText": "Can you modify incoming parameter interceptors and add a new one there? I don't know this API, so don't have any hard preferences :)", "author": "iNikem", "createdAt": "2020-07-09T08:47:47Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import okhttp3.Interceptor;\n+\n+/**\n+ * @author zuoxiu.jm\n+ * @version : KubernetesClientInstrumentation.java, v 0.1 2020\u5e7407\u670808\u65e5 4:35 PM zuoxiu.jm Exp $\n+ */\n+@AutoService(Instrumenter.class)\n+public class KubernetesClientInstrumentation extends Instrumenter.Default {\n+\n+  public KubernetesClientInstrumentation() {\n+    super(\"kubernetes\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"io.kubernetes.client.openapi.ApiClient\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".KubernetesClientDecorator\",\n+      packageName + \".TracingInterceptor\",\n+      packageName + \".KubernetesRequestDigest\",\n+      packageName + \".KubernetesResource\",\n+      packageName + \".KubernetesVerb\",\n+      packageName + \".ParseKubernetesResourceException\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        ElementMatchers.isMethod()\n+            .and(named(\"initHttpClient\"))\n+            .and(ElementMatchers.takesArguments(1))\n+            .and(ElementMatchers.takesArgument(0, named(\"java.util.List\"))),\n+        KubernetesClientInstrumentation.class.getName() + \"$KubernetesAdvice\");\n+  }\n+\n+  public static class KubernetesAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void addTracingInterceptor(\n+        @Advice.This ApiClient apiClient,\n+        @Advice.Argument(0) final List<Interceptor> interceptors) {\n+\n+      for (final Interceptor interceptor : interceptors) {\n+        if (interceptor instanceof TracingInterceptor) {\n+          return;\n+        }\n+      }\n+\n+      apiClient.setHttpClient(", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyMTE5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452121196", "bodyText": "the interceptors are immutable so i have to craft a new list instead of updating in-place..\nhttps://github.com/kubernetes-client/java/blob/d5b80572498122bb45c830c74f89b871dbbdfc92/kubernetes/src/main/java/io/kubernetes/client/openapi/ApiClient.java#L93", "author": "yue9944882", "createdAt": "2020-07-09T10:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MjQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MzA1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452153051", "bodyText": "You can change this method to Advice.OnMethodEnter, change interceptors argument to readOnly = false and construct new list which includes both old value of interceptors and TracingInterceptor", "author": "iNikem", "createdAt": "2020-07-09T11:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MjQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\nindex 3829036bc8..83fbf2fcfa 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java\n\n@@ -16,6 +16,7 @@\n \n package io.opentelemetry.auto.instrumentation.kubernetes;\n \n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n import static java.util.Collections.singletonMap;\n import static net.bytebuddy.matcher.ElementMatchers.named;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NTUyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451985523", "bodyText": "Does it make sense to reuse our normal okhttp decorator?\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/okhttp/okhttp-3.0/src/main/java/io/opentelemetry/auto/instrumentation/okhttp/v3_0/OkHttpClientDecorator.java#L26\nIt's currently not that much code but could grow into more and more duplication", "author": "anuraaga", "createdAt": "2020-07-09T06:12:42Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientDecorator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class KubernetesClientDecorator extends HttpClientDecorator<Request, Response> {", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNDM1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452124355", "bodyText": "yeah i actually started by trying to import the okhttp3 instrument code, but in the end it turns out that there're only 20-ish lines of duplication.. additionally am not sure if cross-referencing between instrumenting libraries are legal in the project?", "author": "yue9944882", "createdAt": "2020-07-09T10:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NTUyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjE1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451986158", "bodyText": "Make everything except the instrumentation and interceptor package private", "author": "anuraaga", "createdAt": "2020-07-09T06:14:33Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;\n+\n+public class KubernetesRequestDigest {", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNDY0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452124641", "bodyText": "stripped public modifiers, PTAL", "author": "yue9944882", "createdAt": "2020-07-09T10:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\nindex 88b0701f58..d3f9572bcb 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n\n@@ -16,18 +16,24 @@\n \n package io.opentelemetry.auto.instrumentation.kubernetes;\n \n+import com.google.common.base.Strings;\n import java.util.regex.Pattern;\n import okhttp3.Request;\n-import org.apache.commons.lang.StringUtils;\n \n-public class KubernetesRequestDigest {\n+class KubernetesRequestDigest {\n \n   public static final Pattern RESOURCE_URL_PATH_PATTERN =\n       Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n \n-  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+  KubernetesRequestDigest(\n+      String urlPath,\n+      boolean isNonResourceRequest,\n+      KubernetesResource resourceMeta,\n+      KubernetesVerb verb) {\n     this.urlPath = urlPath;\n     this.isNonResourceRequest = isNonResourceRequest;\n+    this.resourceMeta = resourceMeta;\n+    this.verb = verb;\n   }\n \n   public static KubernetesRequestDigest parse(Request request) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4Njg5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451986894", "bodyText": "commons lang is leaked in but is not one of our standard libraries, either use guava or just inline the checks since it's not much code here", "author": "anuraaga", "createdAt": "2020-07-09T06:16:15Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNDg2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452124861", "bodyText": "refactored to guava Strings helpers", "author": "yue9944882", "createdAt": "2020-07-09T10:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4Njg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\nindex 88b0701f58..d3f9572bcb 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n\n@@ -16,18 +16,24 @@\n \n package io.opentelemetry.auto.instrumentation.kubernetes;\n \n+import com.google.common.base.Strings;\n import java.util.regex.Pattern;\n import okhttp3.Request;\n-import org.apache.commons.lang.StringUtils;\n \n-public class KubernetesRequestDigest {\n+class KubernetesRequestDigest {\n \n   public static final Pattern RESOURCE_URL_PATH_PATTERN =\n       Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n \n-  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+  KubernetesRequestDigest(\n+      String urlPath,\n+      boolean isNonResourceRequest,\n+      KubernetesResource resourceMeta,\n+      KubernetesVerb verb) {\n     this.urlPath = urlPath;\n     this.isNonResourceRequest = isNonResourceRequest;\n+    this.resourceMeta = resourceMeta;\n+    this.verb = verb;\n   }\n \n   public static KubernetesRequestDigest parse(Request request) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NzEyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451987123", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (StringUtils.startsWith(urlPath, \"/api/v1\")) {\n          \n          \n            \n                  if (urlPath.startsWith(\"/api/v1\")) {\n          \n      \n    \n    \n  \n\nDoesn't seem like it can be null but if it can do an explicit null check instead probably in isResourceRequest", "author": "anuraaga", "createdAt": "2020-07-09T06:16:53Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;\n+\n+public class KubernetesRequestDigest {\n+\n+  public static final Pattern RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n+\n+  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+    this.urlPath = urlPath;\n+    this.isNonResourceRequest = isNonResourceRequest;\n+  }\n+\n+  public static KubernetesRequestDigest parse(Request request) {\n+    String urlPath = request.url().encodedPath();\n+    if (!isResourceRequest(urlPath)) {\n+      return nonResource(urlPath);\n+    }\n+    try {\n+      KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, false);\n+      if (StringUtils.startsWith(urlPath, \"/api/v1\")) {", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNTA0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452125041", "bodyText": "done", "author": "yue9944882", "createdAt": "2020-07-09T10:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NzEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\nindex 88b0701f58..d3f9572bcb 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n\n@@ -16,18 +16,24 @@\n \n package io.opentelemetry.auto.instrumentation.kubernetes;\n \n+import com.google.common.base.Strings;\n import java.util.regex.Pattern;\n import okhttp3.Request;\n-import org.apache.commons.lang.StringUtils;\n \n-public class KubernetesRequestDigest {\n+class KubernetesRequestDigest {\n \n   public static final Pattern RESOURCE_URL_PATH_PATTERN =\n       Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n \n-  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+  KubernetesRequestDigest(\n+      String urlPath,\n+      boolean isNonResourceRequest,\n+      KubernetesResource resourceMeta,\n+      KubernetesVerb verb) {\n     this.urlPath = urlPath;\n     this.isNonResourceRequest = isNonResourceRequest;\n+    this.resourceMeta = resourceMeta;\n+    this.verb = verb;\n   }\n \n   public static KubernetesRequestDigest parse(Request request) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NzQyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451987429", "bodyText": "Use concatenation of StringBuilder instead of String.format", "author": "anuraaga", "createdAt": "2020-07-09T06:17:42Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;\n+\n+public class KubernetesRequestDigest {\n+\n+  public static final Pattern RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n+\n+  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+    this.urlPath = urlPath;\n+    this.isNonResourceRequest = isNonResourceRequest;\n+  }\n+\n+  public static KubernetesRequestDigest parse(Request request) {\n+    String urlPath = request.url().encodedPath();\n+    if (!isResourceRequest(urlPath)) {\n+      return nonResource(urlPath);\n+    }\n+    try {\n+      KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, false);\n+      if (StringUtils.startsWith(urlPath, \"/api/v1\")) {\n+        digest.resourceMeta = KubernetesResource.parseCoreResource(urlPath);\n+      } else {\n+        digest.resourceMeta = KubernetesResource.parseRegularResource(urlPath);\n+      }\n+      digest.verb =\n+          KubernetesVerb.of(\n+              request.method(),\n+              hasNamePathParameter(digest.resourceMeta),\n+              hasWatchParameter(request));\n+      return digest;\n+    } catch (ParseKubernetesResourceException e) {\n+      return nonResource(urlPath);\n+    }\n+  }\n+\n+  private static KubernetesRequestDigest nonResource(String urlPath) {\n+    KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, true);\n+    return digest;\n+  }\n+\n+  public static boolean isResourceRequest(String urlPath) {\n+    return RESOURCE_URL_PATH_PATTERN.matcher(urlPath).matches();\n+  }\n+\n+  private static boolean hasWatchParameter(Request request) {\n+    return !StringUtils.isEmpty(request.url().queryParameter(\"watch\"));\n+  }\n+\n+  private static boolean hasNamePathParameter(KubernetesResource resource) {\n+    return !StringUtils.isEmpty(resource.getName());\n+  }\n+\n+  private final String urlPath;\n+  private final boolean isNonResourceRequest;\n+\n+  private KubernetesResource resourceMeta;\n+  private KubernetesVerb verb;\n+\n+  public String getUrlPath() {\n+    return urlPath;\n+  }\n+\n+  public boolean isNonResourceRequest() {\n+    return isNonResourceRequest;\n+  }\n+\n+  public KubernetesResource getResourceMeta() {\n+    return resourceMeta;\n+  }\n+\n+  public KubernetesVerb getVerb() {\n+    return verb;\n+  }\n+\n+  @Override\n+  public String toString() {", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNjY3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452126671", "bodyText": "replaced w/ StringBuilder", "author": "yue9944882", "createdAt": "2020-07-09T10:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NzQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\nindex 88b0701f58..d3f9572bcb 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n\n@@ -16,18 +16,24 @@\n \n package io.opentelemetry.auto.instrumentation.kubernetes;\n \n+import com.google.common.base.Strings;\n import java.util.regex.Pattern;\n import okhttp3.Request;\n-import org.apache.commons.lang.StringUtils;\n \n-public class KubernetesRequestDigest {\n+class KubernetesRequestDigest {\n \n   public static final Pattern RESOURCE_URL_PATH_PATTERN =\n       Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n \n-  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+  KubernetesRequestDigest(\n+      String urlPath,\n+      boolean isNonResourceRequest,\n+      KubernetesResource resourceMeta,\n+      KubernetesVerb verb) {\n     this.urlPath = urlPath;\n     this.isNonResourceRequest = isNonResourceRequest;\n+    this.resourceMeta = resourceMeta;\n+    this.verb = verb;\n   }\n \n   public static KubernetesRequestDigest parse(Request request) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4ODc5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451988790", "bodyText": "Pass these into constructor and make final as well", "author": "anuraaga", "createdAt": "2020-07-09T06:21:22Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;\n+\n+public class KubernetesRequestDigest {\n+\n+  public static final Pattern RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n+\n+  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+    this.urlPath = urlPath;\n+    this.isNonResourceRequest = isNonResourceRequest;\n+  }\n+\n+  public static KubernetesRequestDigest parse(Request request) {\n+    String urlPath = request.url().encodedPath();\n+    if (!isResourceRequest(urlPath)) {\n+      return nonResource(urlPath);\n+    }\n+    try {\n+      KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, false);\n+      if (StringUtils.startsWith(urlPath, \"/api/v1\")) {\n+        digest.resourceMeta = KubernetesResource.parseCoreResource(urlPath);\n+      } else {\n+        digest.resourceMeta = KubernetesResource.parseRegularResource(urlPath);\n+      }\n+      digest.verb =\n+          KubernetesVerb.of(\n+              request.method(),\n+              hasNamePathParameter(digest.resourceMeta),\n+              hasWatchParameter(request));\n+      return digest;\n+    } catch (ParseKubernetesResourceException e) {\n+      return nonResource(urlPath);\n+    }\n+  }\n+\n+  private static KubernetesRequestDigest nonResource(String urlPath) {\n+    KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, true);\n+    return digest;\n+  }\n+\n+  public static boolean isResourceRequest(String urlPath) {\n+    return RESOURCE_URL_PATH_PATTERN.matcher(urlPath).matches();\n+  }\n+\n+  private static boolean hasWatchParameter(Request request) {\n+    return !StringUtils.isEmpty(request.url().queryParameter(\"watch\"));\n+  }\n+\n+  private static boolean hasNamePathParameter(KubernetesResource resource) {\n+    return !StringUtils.isEmpty(resource.getName());\n+  }\n+\n+  private final String urlPath;\n+  private final boolean isNonResourceRequest;\n+\n+  private KubernetesResource resourceMeta;", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNjcyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452126721", "bodyText": "done", "author": "yue9944882", "createdAt": "2020-07-09T10:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4ODc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\nindex 88b0701f58..d3f9572bcb 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java\n\n@@ -16,18 +16,24 @@\n \n package io.opentelemetry.auto.instrumentation.kubernetes;\n \n+import com.google.common.base.Strings;\n import java.util.regex.Pattern;\n import okhttp3.Request;\n-import org.apache.commons.lang.StringUtils;\n \n-public class KubernetesRequestDigest {\n+class KubernetesRequestDigest {\n \n   public static final Pattern RESOURCE_URL_PATH_PATTERN =\n       Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n \n-  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+  KubernetesRequestDigest(\n+      String urlPath,\n+      boolean isNonResourceRequest,\n+      KubernetesResource resourceMeta,\n+      KubernetesVerb verb) {\n     this.urlPath = urlPath;\n     this.isNonResourceRequest = isNonResourceRequest;\n+    this.resourceMeta = resourceMeta;\n+    this.verb = verb;\n   }\n \n   public static KubernetesRequestDigest parse(Request request) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODAxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452068014", "bodyText": "Make final and pass in through constructor", "author": "anuraaga", "createdAt": "2020-07-09T08:56:40Z", "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class KubernetesResource {\n+\n+  public static final Pattern CORE_RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\n+          \"^/api/v1(/namespaces/(?<namespace>[\\\\w-]+))?/(?<resource>[\\\\w-]+)(/(?<name>[\\\\w-]+))?(/(?<subresource>[\\\\w-]+))?\");\n+\n+  public static final Pattern REGULAR_RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\n+          \"^/apis/(?<group>\\\\S+?)/(?<version>\\\\S+?)(/namespaces/(?<namespace>[\\\\w-]+))?/(?<resource>[\\\\w-]+)(/(?<name>[\\\\w-]+))?(/(?<subresource>[\\\\w-]+))?\");\n+\n+  public static KubernetesResource parseCoreResource(String urlPath)\n+      throws ParseKubernetesResourceException {\n+    Matcher matcher = CORE_RESOURCE_URL_PATH_PATTERN.matcher(urlPath);\n+    if (!matcher.matches()) {\n+      throw new ParseKubernetesResourceException();\n+    }\n+    KubernetesResource resource = new KubernetesResource();\n+    resource.apiGroup = \"\";\n+    resource.apiVersion = \"v1\";\n+    resource.resource = matcher.group(\"resource\");\n+    resource.subResource = matcher.group(\"subresource\");\n+    resource.namespace = matcher.group(\"namespace\");\n+    resource.name = matcher.group(\"name\");\n+    return resource;\n+  }\n+\n+  public static KubernetesResource parseRegularResource(String urlPath)\n+      throws ParseKubernetesResourceException {\n+    Matcher matcher = REGULAR_RESOURCE_URL_PATH_PATTERN.matcher(urlPath);\n+    if (!matcher.matches()) {\n+      throw new ParseKubernetesResourceException();\n+    }\n+    KubernetesResource resource = new KubernetesResource();\n+    resource.apiGroup = matcher.group(\"group\");\n+    resource.apiVersion = matcher.group(\"version\");\n+    resource.resource = matcher.group(\"resource\");\n+    resource.subResource = matcher.group(\"subresource\");\n+    resource.namespace = matcher.group(\"namespace\");\n+    resource.name = matcher.group(\"name\");\n+    return resource;\n+  }\n+\n+  private String apiGroup;", "originalCommit": "4aba93f8f2962cb79976f0368df522f4330248de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNjc5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452126795", "bodyText": "done", "author": "yue9944882", "createdAt": "2020-07-09T10:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "130e543597467090fe7b428a3626896919b33e1e", "chunk": "diff --git a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesResource.java b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesResource.java\nindex ff60e98c40..a21ebf8e7d 100644\n--- a/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesResource.java\n+++ b/instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesResource.java\n\n@@ -19,7 +19,7 @@ package io.opentelemetry.auto.instrumentation.kubernetes;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-public class KubernetesResource {\n+class KubernetesResource {\n \n   public static final Pattern CORE_RESOURCE_URL_PATH_PATTERN =\n       Pattern.compile(\n"}}, {"oid": "130e543597467090fe7b428a3626896919b33e1e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/130e543597467090fe7b428a3626896919b33e1e", "message": "addressing review comments", "committedDate": "2020-07-09T10:40:21Z", "type": "forcePushed"}, {"oid": "56637a031023bbb417734ee96885091e3ac53536", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/56637a031023bbb417734ee96885091e3ac53536", "message": "addressing review comments", "committedDate": "2020-07-09T17:01:25Z", "type": "forcePushed"}, {"oid": "dc6a4b6c809bb73a7a502d182c3e276466fe96a4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc6a4b6c809bb73a7a502d182c3e276466fe96a4", "message": "addressing review comments", "committedDate": "2020-07-10T06:21:41Z", "type": "forcePushed"}, {"oid": "75da85520c53b58d5e6c94ad655193714d096eac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/75da85520c53b58d5e6c94ad655193714d096eac", "message": "addressing review comments", "committedDate": "2020-07-10T06:54:18Z", "type": "forcePushed"}, {"oid": "995db0becbc0b915212ec6b95998a152aa97c44f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/995db0becbc0b915212ec6b95998a152aa97c44f", "message": "addressing review comments", "committedDate": "2020-07-10T13:10:17Z", "type": "commit"}, {"oid": "995db0becbc0b915212ec6b95998a152aa97c44f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/995db0becbc0b915212ec6b95998a152aa97c44f", "message": "addressing review comments", "committedDate": "2020-07-10T13:10:17Z", "type": "forcePushed"}]}