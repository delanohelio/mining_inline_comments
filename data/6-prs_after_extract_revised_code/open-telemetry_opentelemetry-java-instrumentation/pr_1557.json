{"pr_number": 1557, "pr_title": "Refactor Instrumenters into InstrumentationModules - D, E, F, G, H", "pr_createdAt": "2020-11-04T18:19:57Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557", "timeline": [{"oid": "33825a4bb01c05503219f0182e00d8e33ab20175", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/33825a4bb01c05503219f0182e00d8e33ab20175", "message": "Refactor Instrumenters into InstrumentationModules - D, E, F, G, H", "committedDate": "2020-11-05T13:36:54Z", "type": "commit"}, {"oid": "33825a4bb01c05503219f0182e00d8e33ab20175", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/33825a4bb01c05503219f0182e00d8e33ab20175", "message": "Refactor Instrumenters into InstrumentationModules - D, E, F, G, H", "committedDate": "2020-11-05T13:36:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNDU4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557#discussion_r518534589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Not Using AutoService to hook up this instrumentation", "author": "trask", "createdAt": "2020-11-06T05:42:10Z", "path": "instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java", "diffHunk": "@@ -52,39 +56,32 @@ public TraceConfigInstrumentation() {\n         tracedMethods.removeAll(entry.getValue());\n       }\n     }\n+\n+    typeInstrumentations =\n+        classMethodsToTrace.entrySet().stream()\n+            .filter(e -> !e.getValue().isEmpty())\n+            .map(e -> new TracerClassInstrumentation(e.getKey(), e.getValue()))\n+            .collect(Collectors.toList());\n   }\n \n   @Override\n-  public AgentBuilder instrument(AgentBuilder agentBuilder) {\n-    if (classMethodsToTrace.isEmpty()) {\n-      return agentBuilder;\n-    }\n-\n-    for (Map.Entry<String, Set<String>> entry : classMethodsToTrace.entrySet()) {\n-      TracerClassInstrumentation tracerConfigClass =\n-          new TracerClassInstrumentation(entry.getKey(), entry.getValue());\n-      agentBuilder = tracerConfigClass.instrument(agentBuilder);\n-    }\n-    return agentBuilder;\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TraceAnnotationTracer\",\n+    };\n   }\n \n   @Override\n-  public int getOrder() {\n-    return 0;\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return typeInstrumentations;\n   }\n \n   // Not Using AutoService to hook up this instrumentation", "originalCommit": "33825a4bb01c05503219f0182e00d8e33ab20175", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NjIzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557#discussion_r518646230", "bodyText": "\ud83e\udd85 \ud83d\udc41\ufe0f", "author": "mateuszrzeszutek", "createdAt": "2020-11-06T10:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNDU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee079a56ecf06ded49e2da85c609b9d2ed0b259c", "chunk": "diff --git a/instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java b/instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java\nindex 8615362c07..6507d97788 100644\n--- a/instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java\n+++ b/instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java\n\n@@ -76,7 +76,6 @@ public class TraceConfigInstrumentationModule extends InstrumentationModule {\n     return typeInstrumentations;\n   }\n \n-  // Not Using AutoService to hook up this instrumentation\n   private static final class TracerClassInstrumentation implements TypeInstrumentation {\n     private final String className;\n     private final Set<String> methodNames;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzOTcwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557#discussion_r518539708", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-11-06T06:00:42Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "diffHunk": "@@ -107,15 +98,6 @@ public static void assertInstrumentationMuzzled(\n     // run helper injector on all instrumenters\n     if (assertPass) {\n       for (Object instrumenter : loadAllInstrumenters(agentClassLoader)) {\n-        if (instrumenter.getClass().getName().endsWith(\"TraceConfigInstrumentation\")) {\n-          // TraceConfigInstrumentation doesn't do muzzle checks\n-          // check on TracerClassInstrumentation instead\n-          instrumenter =\n-              agentClassLoader\n-                  .loadClass(instrumenter.getClass().getName() + \"$TracerClassInstrumentation\")\n-                  .getDeclaredConstructor()\n-                  .newInstance();\n-        }", "originalCommit": "33825a4bb01c05503219f0182e00d8e33ab20175", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzOTczNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557#discussion_r518539734", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-11-06T06:00:46Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "diffHunk": "@@ -50,15 +50,6 @@ public static void assertInstrumentationMuzzled(\n       throws Exception {\n     // muzzle validate all instrumenters\n     for (Object instrumenter : loadAllInstrumenters(agentClassLoader)) {\n-      if (instrumenter.getClass().getName().endsWith(\"TraceConfigInstrumentation\")) {\n-        // TraceConfigInstrumentation doesn't do muzzle checks\n-        // check on TracerClassInstrumentation instead\n-        instrumenter =\n-            agentClassLoader\n-                .loadClass(instrumenter.getClass().getName() + \"$TracerClassInstrumentation\")\n-                .getDeclaredConstructor()\n-                .newInstance();\n-      }", "originalCommit": "33825a4bb01c05503219f0182e00d8e33ab20175", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ee079a56ecf06ded49e2da85c609b9d2ed0b259c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ee079a56ecf06ded49e2da85c609b9d2ed0b259c", "message": "Update instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-11-06T10:03:43Z", "type": "commit"}]}