{"pr_number": 491, "pr_title": "Embed exporters into agent jar", "pr_createdAt": "2020-06-10T13:55:50Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491", "timeline": [{"oid": "ab804d34737b4262b88ffff93043b86bf9de6810", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ab804d34737b4262b88ffff93043b86bf9de6810", "message": "Embed all exporters into agent jar", "committedDate": "2020-06-10T10:11:44Z", "type": "commit"}, {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6c74e2cd14b0a835057ce6f81cc9f8ab4f898868", "message": "Publish agent with exporters and without", "committedDate": "2020-06-10T13:42:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMTA2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438411068", "bodyText": "oh, nice, I didn't realize there was a default port for OTLP", "author": "trask", "createdAt": "2020-06-10T21:12:06Z", "path": "auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n   @Override\n   public MetricExporter fromConfig(final Config config) {\n-    final String otlpEndpoint = config.getString(OTLP_ENDPOINT, \"\");\n+    final String otlpEndpoint = config.getString(OTLP_ENDPOINT, \"localhost:55680\");", "originalCommit": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0OTEzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438549132", "bodyText": "Took that from Otel collector.", "author": "iNikem", "createdAt": "2020-06-11T05:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMTA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b9c52af3cdbdfc888623b8bd001a1c953a27e52d", "chunk": "diff --git a/auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java b/auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java\nindex 911021e839..d8aa4fe1bb 100644\n--- a/auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java\n+++ b/auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java\n\n@@ -16,9 +16,9 @@\n package io.opentelemetry.auto.exporters.otlp;\n \n import io.grpc.ManagedChannelBuilder;\n-import io.opentelemetry.auto.exportersupport.MetricExporterFactory;\n import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n import io.opentelemetry.sdk.contrib.auto.config.Config;\n+import io.opentelemetry.sdk.contrib.auto.config.MetricExporterFactory;\n import io.opentelemetry.sdk.metrics.export.MetricExporter;\n \n public class OtlpMetricExporterFactory implements MetricExporterFactory {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438415754", "bodyText": "this seems a little fragile, and we only have smoke tests for the logging exporter at this point, maybe add a comment to each of the SpanExporterFactory classes about this dependency on their names?", "author": "trask", "createdAt": "2020-06-10T21:22:28Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -54,7 +60,33 @@ public static synchronized void installAgentTracer() {\n     PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n-  @VisibleForTesting\n+  private static synchronized void installExporters(final String exporterName) {\n+    final SpanExporterFactory spanExporterFactory = findSpanExporterFactory(exporterName);\n+    if (spanExporterFactory != null) {\n+      final DefaultExporterConfig config = new DefaultExporterConfig(\"exporter\");\n+      installExporter(spanExporterFactory, config);\n+    } else {\n+      log.warn(\"No {} span exporter found\", exporterName);\n+      log.warn(\"No valid span exporter found. Tracing will run but spans are dropped\");\n+    }\n+  }\n+\n+  private static SpanExporterFactory findSpanExporterFactory(String exporterName) {\n+    final ServiceLoader<SpanExporterFactory> serviceLoader =\n+        ServiceLoader.load(SpanExporterFactory.class, TracerInstaller.class.getClassLoader());\n+\n+    for (SpanExporterFactory spanExporterFactory : serviceLoader) {\n+      if (spanExporterFactory\n+          .getClass()\n+          .getSimpleName()\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {\n+        return spanExporterFactory;\n+      }", "originalCommit": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0OTYxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438549618", "bodyText": "Yeah, I didn't like it neither. But I could not come up with any other way to identify implementations of SpanExporterFactory.", "author": "iNikem", "createdAt": "2020-06-11T05:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MzE4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438553188", "bodyText": "Maybe it makes sense to open an issue in otel-java to add some id/name method to SpanExporterFactory?", "author": "iNikem", "createdAt": "2020-06-11T05:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NTUxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438555518", "bodyText": "Yes, I like that, I forgot that SpanExporterFactory is basically just for auto-instrumentation anyways, so no reason not to add stuff in there that we need \ud83d\udc4d", "author": "trask", "createdAt": "2020-06-11T05:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1ODExMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438558113", "bodyText": "Then I will leave this as it is now for now and open an issue in otel-java. After that is done, will update this condition here in a future PR.", "author": "iNikem", "createdAt": "2020-06-11T05:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNjMwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438416301", "bodyText": "exporter can't be null here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (exporter != null) {\n          \n          \n            \n                      installExporters(exporter);\n          \n          \n            \n                    } else {\n          \n          \n            \n                      log.warn(\"No exporter is enabled. Tracing will run but spans are dropped\");\n          \n          \n            \n                    }\n          \n          \n            \n                    installExporters(exporter);", "author": "trask", "createdAt": "2020-06-10T21:23:44Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -36,16 +35,23 @@\n @Slf4j\n public class TracerInstaller {\n   /** Register agent tracer if no agent tracer is already registered. */\n+  @SuppressWarnings(\"unused\")\n   public static synchronized void installAgentTracer() {\n     if (Config.get().isTraceEnabled()) {\n \n       configure();\n-      // Try to create an exporter\n+      // Try to create an exporter from external jar file\n       final String exporterJar = Config.get().getExporterJar();\n       if (exporterJar != null) {\n         installExportersFromJar(exporterJar);\n       } else {\n-        log.warn(\"No exporter is specified. Tracing will run but spans are dropped\");\n+        // Try to create embedded exporter\n+        final String exporter = Config.get().getExporter();\n+        if (exporter != null) {\n+          installExporters(exporter);\n+        } else {\n+          log.warn(\"No exporter is enabled. Tracing will run but spans are dropped\");\n+        }", "originalCommit": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a096d2f222345d5b001c4fdf12a68f9c4632886b", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\nindex b7ae503c63..1d7a17cfe1 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\n\n@@ -46,12 +46,7 @@ public class TracerInstaller {\n         installExportersFromJar(exporterJar);\n       } else {\n         // Try to create embedded exporter\n-        final String exporter = Config.get().getExporter();\n-        if (exporter != null) {\n-          installExporters(exporter);\n-        } else {\n-          log.warn(\"No exporter is enabled. Tracing will run but spans are dropped\");\n-        }\n+        installExporters(Config.get().getExporter());\n       }\n     } else {\n       log.info(\"Tracing is disabled.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438421028", "bodyText": "this will be confusing for zipkin and jaeger users\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else {\n          \n          \n            \n                  log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "author": "trask", "createdAt": "2020-06-10T21:34:11Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,33 +102,46 @@ private static synchronized void installExportersFromJar(final String exporterJa\n \n     final SpanExporterFactory spanExporterFactory =\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n+\n     if (spanExporterFactory != null) {\n-      final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      BatchSpanProcessor spanProcessor =\n-          BatchSpanProcessor.newBuilder(spanExporter)\n-              .readEnvironmentVariables()\n-              .readSystemProperties()\n-              .build();\n-      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(spanProcessor);\n-      log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n+      installExporter(spanExporterFactory, config);\n     } else {\n-      log.warn(\"No matching providers in jar \" + exporterJar);\n+      log.warn(\"No span exporter found in {}\", exporterJar);\n       log.warn(\"No valid exporter found. Tracing will run but spans are dropped\");\n     }\n \n     final MetricExporterFactory metricExporterFactory =\n         getExporterFactory(MetricExporterFactory.class, exporterLoader);\n     if (metricExporterFactory != null) {\n-      final MetricExporter metricExporter = metricExporterFactory.fromConfig(config);\n-      IntervalMetricReader.builder()\n-          .setMetricExporter(metricExporter)\n-          .setMetricProducers(\n-              Collections.singleton(OpenTelemetrySdk.getMeterProvider().getMetricProducer()))\n-          .build();\n-      log.info(\"Installed metric exporter: \" + metricExporter.getClass().getName());\n+      installExporter(metricExporterFactory, config);\n+    } else {\n+      log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "originalCommit": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MDU1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438550557", "bodyText": "What is the plan for metric exporters and their configuration? If I want to send spans to Zipkin and metrics to Prometheus, how should I configure my agent?", "author": "iNikem", "createdAt": "2020-06-11T05:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NjYwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438556606", "bodyText": "Good question. Can you open an issue to track this?", "author": "trask", "createdAt": "2020-06-11T05:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1ODk1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438558958", "bodyText": "#496", "author": "iNikem", "createdAt": "2020-06-11T05:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a096d2f222345d5b001c4fdf12a68f9c4632886b", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\nindex b7ae503c63..1d7a17cfe1 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\n\n@@ -114,8 +109,6 @@ public class TracerInstaller {\n         getExporterFactory(MetricExporterFactory.class, exporterLoader);\n     if (metricExporterFactory != null) {\n       installExporter(metricExporterFactory, config);\n-    } else {\n-      log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);\n     }\n   }\n \n"}}, {"oid": "a096d2f222345d5b001c4fdf12a68f9c4632886b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a096d2f222345d5b001c4fdf12a68f9c4632886b", "message": "Polish", "committedDate": "2020-06-11T05:35:50Z", "type": "commit"}, {"oid": "b9c52af3cdbdfc888623b8bd001a1c953a27e52d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b9c52af3cdbdfc888623b8bd001a1c953a27e52d", "message": "Merge remote-tracking branch 'upstream/master' into embed-exporters", "committedDate": "2020-06-11T06:00:53Z", "type": "commit"}, {"oid": "15ad459ab9874fc45982415f90ff580148c8e1de", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/15ad459ab9874fc45982415f90ff580148c8e1de", "message": "Merge branch 'master' into embed-exporters", "committedDate": "2020-06-11T06:41:00Z", "type": "commit"}]}