{"pr_number": 920, "pr_title": "Add instrumentation for Armeria WebClient.", "pr_createdAt": "2020-08-07T08:41:21Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920", "timeline": [{"oid": "5d6478ff400388a564919202758953b8233d6f4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5d6478ff400388a564919202758953b8233d6f4d", "message": "Add instrumentation for Armeria WebClient.", "committedDate": "2020-08-07T08:43:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTQ1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r466905456", "bodyText": "This craziness is the only pattern I could find for suppressing a non-void method", "author": "anuraaga", "createdAt": "2020-08-07T08:41:49Z", "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.armeria.v1_0;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import io.opentelemetry.auto.instrumentation.armeria.v1_0.shaded.server.OpenTelemetryService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ArmeriaServerBuilderInstrumentation extends AbstractArmeriaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"com.linecorp.armeria.server.ServerBuilder\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isConstructor(),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$ConstructorAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"decorator\").and(takesArgument(0, Function.class))),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$SuppressDecoratorAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class ConstructorAdvice {\n+    @Advice.OnMethodExit\n+    public static void construct(@Advice.This ServerBuilder builder) {\n+      builder.decorator(OpenTelemetryService.newDecorator());\n+    }\n+  }\n+\n+  public static class SuppressDecoratorAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)\n+    public static boolean suppressDecorator(@Advice.Argument(0) Function<?, ?> decorator) {\n+      return decorator\n+          .getClass()\n+          .getName()\n+          .equals(\n+              \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService$Decorator\");\n+    }\n+\n+    @Advice.OnMethodExit\n+    public static void handleSuppression(", "originalCommit": "4a7a083c07dcb67b2f44aea2feeee2648b96a9c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NjYxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467686614", "bodyText": "Please add some documentation about what you are trying to achieve here", "author": "iNikem", "createdAt": "2020-08-10T04:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "85c5872f19b5d9a03afd977ca46772df0a84fae6", "chunk": "diff --git a/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java b/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java\nindex 1e446937c7..c0a4a118d1 100644\n--- a/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java\n+++ b/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java\n\n@@ -24,8 +24,8 @@ import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n \n import com.google.auto.service.AutoService;\n import com.linecorp.armeria.server.ServerBuilder;\n-import io.opentelemetry.auto.instrumentation.armeria.v1_0.shaded.server.OpenTelemetryService;\n import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.function.Function;\n"}}, {"oid": "5d6478ff400388a564919202758953b8233d6f4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5d6478ff400388a564919202758953b8233d6f4d", "message": "Add instrumentation for Armeria WebClient.", "committedDate": "2020-08-07T08:43:05Z", "type": "forcePushed"}, {"oid": "9c68f80800813cb5704a209390798546da76ca51", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c68f80800813cb5704a209390798546da76ca51", "message": "Format:", "committedDate": "2020-08-07T08:59:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MTg5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467361890", "bodyText": "i think #892 will break this because it will shade this constant also. there are ways to prevent the string from getting shaded (e.g. make it a constant NAME = \"_io.opentelemetry...\".substring(1)\".\nanother option for suppressing library instrumentation that might be easier to generalize, is to make the coordination more explicit, e.g. have a method in instrumentation-api like isAutoEnabled(instrumentationName), and the library instrumentation can explicitly check that to see if there is auto instrumentation with the same name enabled\nin this case i guess that would mean returning a no-op decorator, or changing the API to expose a method that registers a decorator on the ServerBuilder so we can no-op the registration in this case\nI'll add this note to #903, no need to decide/address in this PR", "author": "trask", "createdAt": "2020-08-08T04:49:50Z", "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.armeria.v1_0;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import io.opentelemetry.auto.instrumentation.armeria.v1_0.shaded.server.OpenTelemetryService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ArmeriaServerBuilderInstrumentation extends AbstractArmeriaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"com.linecorp.armeria.server.ServerBuilder\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isConstructor(),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$ConstructorAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"decorator\").and(takesArgument(0, Function.class))),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$SuppressDecoratorAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class ConstructorAdvice {\n+    @Advice.OnMethodExit\n+    public static void construct(@Advice.This ServerBuilder builder) {\n+      builder.decorator(OpenTelemetryService.newDecorator());\n+    }\n+  }\n+\n+  public static class SuppressDecoratorAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)\n+    public static boolean suppressDecorator(@Advice.Argument(0) Function<?, ?> decorator) {\n+      return decorator\n+          .getClass()\n+          .getName()\n+          .equals(\n+              \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService$Decorator\");", "originalCommit": "9c68f80800813cb5704a209390798546da76ca51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2NTQ2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r469065465", "bodyText": "I ended up needing yet a different pattern because of the shading change making the classnames the same. I guess it's actually a bit more robust now and we'll revisit in #903 for an inversion of control.", "author": "anuraaga", "createdAt": "2020-08-12T07:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MTg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "85c5872f19b5d9a03afd977ca46772df0a84fae6", "chunk": "diff --git a/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java b/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java\nindex 1e446937c7..c0a4a118d1 100644\n--- a/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java\n+++ b/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java\n\n@@ -24,8 +24,8 @@ import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n \n import com.google.auto.service.AutoService;\n import com.linecorp.armeria.server.ServerBuilder;\n-import io.opentelemetry.auto.instrumentation.armeria.v1_0.shaded.server.OpenTelemetryService;\n import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.function.Function;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NTY1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467685654", "bodyText": "Not sure if this comment is helping or confusing :)", "author": "iNikem", "createdAt": "2020-08-10T04:44:53Z", "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/AbstractArmeriaInstrumentation.java", "diffHunk": "@@ -29,7 +29,12 @@ public AbstractArmeriaInstrumentation() {\n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n-      packageName + \".shaded.internal.ContextUtil\",\n+      packageName + \".shaded.client.ArmeriaClientTracer\",\n+      packageName + \".shaded.client.ArmeriaClientTracer$ArmeriaSetter\",\n+      packageName + \".shaded.client.OpenTelemetryClient\",\n+      packageName + \".shaded.client.OpenTelemetryClient$Decorator\",\n+      // .thenAccept(log -> lambda", "originalCommit": "9c68f80800813cb5704a209390798546da76ca51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MjA5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r469062092", "bodyText": "Tried a bit harder", "author": "anuraaga", "createdAt": "2020-08-12T07:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NTY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "7cbf47d9990c1f09a6395c45e8340c21a0dab72d", "chunk": "diff --git a/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/AbstractArmeriaInstrumentation.java b/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/AbstractArmeriaInstrumentation.java\nindex 03c66bbe8f..e26770653b 100644\n--- a/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/AbstractArmeriaInstrumentation.java\n+++ b/instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/AbstractArmeriaInstrumentation.java\n\n@@ -29,18 +29,18 @@ public abstract class AbstractArmeriaInstrumentation extends Instrumenter.Defaul\n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n-      packageName + \".shaded.client.ArmeriaClientTracer\",\n-      packageName + \".shaded.client.ArmeriaClientTracer$ArmeriaSetter\",\n-      packageName + \".shaded.client.OpenTelemetryClient\",\n-      packageName + \".shaded.client.OpenTelemetryClient$Decorator\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.client.ArmeriaClientTracer\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.client.ArmeriaClientTracer$ArmeriaSetter\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.client.OpenTelemetryClient\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.client.OpenTelemetryClient$Decorator\",\n       // .thenAccept(log -> lambda\n-      packageName + \".shaded.client.OpenTelemetryClient$1\",\n-      packageName + \".shaded.server.ArmeriaServerTracer\",\n-      packageName + \".shaded.server.ArmeriaServerTracer$ArmeriaGetter\",\n-      packageName + \".shaded.server.OpenTelemetryService\",\n-      packageName + \".shaded.server.OpenTelemetryService$Decorator\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.client.OpenTelemetryClient$1\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.server.ArmeriaServerTracer\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.server.ArmeriaServerTracer$ArmeriaGetter\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService$Decorator\",\n       // .thenAccept(log -> lambda\n-      packageName + \".shaded.server.OpenTelemetryService$1\",\n+      \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService$1\",\n     };\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NzA3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467687078", "bodyText": "Although this is a nice way to ensure only one instance of the class exists in JVM, it differs from all other instrumentations. Unless there is some strong reason for such differences, I prefer to have uniform codebase.", "author": "iNikem", "createdAt": "2020-08-10T04:53:07Z", "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/ArmeriaClientTracer.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v1_0.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+public class ArmeriaClientTracer extends HttpClientTracer<ClientRequestContext, RequestLog> {\n+\n+  ArmeriaClientTracer() {}\n+\n+  ArmeriaClientTracer(Tracer tracer) {\n+    super(tracer);\n+  }\n+\n+  @Override\n+  protected String method(ClientRequestContext ctx) {\n+    return ctx.method().name();\n+  }\n+\n+  @Override\n+  protected URI url(ClientRequestContext ctx) throws URISyntaxException {\n+    return ctx.request().uri();\n+  }\n+\n+  @Override\n+  protected Integer status(RequestLog log) {\n+    return log.responseHeaders().status().code();\n+  }\n+\n+  @Override\n+  protected String requestHeader(ClientRequestContext ctx, String name) {\n+    return ctx.request().headers().get(name);\n+  }\n+\n+  @Override\n+  protected String responseHeader(RequestLog log, String name) {\n+    return log.responseHeaders().get(name);\n+  }\n+\n+  @Override\n+  protected Setter<ClientRequestContext> getSetter() {\n+    return ArmeriaSetter.INSTANCE;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.armeria-1.0\";\n+  }\n+\n+  private enum ArmeriaSetter implements Setter<ClientRequestContext> {", "originalCommit": "9c68f80800813cb5704a209390798546da76ca51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85c5872f19b5d9a03afd977ca46772df0a84fae6", "chunk": "diff --git a/instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/ArmeriaClientTracer.java b/instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/ArmeriaClientTracer.java\nindex 074aa09b68..f098317da8 100644\n--- a/instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/ArmeriaClientTracer.java\n+++ b/instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/ArmeriaClientTracer.java\n\n@@ -18,8 +18,8 @@ package io.opentelemetry.instrumentation.armeria.v1_0.client;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.common.logging.RequestLog;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientTracer;\n import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.instrumentation.api.decorator.HttpClientTracer;\n import io.opentelemetry.trace.Tracer;\n import java.net.URI;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NzQ1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467687454", "bodyText": "Just to be sure: you start new scope even if span is not recording?", "author": "iNikem", "createdAt": "2020-08-10T04:55:08Z", "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v1_0.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/** Decorates an {@link HttpClient} to trace outbound {@link HttpResponse}s. */\n+public class OpenTelemetryClient extends SimpleDecoratingHttpClient {\n+\n+  /** Creates a new tracing {@link HttpClient} decorator using the default {@link Tracer}. */\n+  public static OpenTelemetryClient.Decorator newDecorator() {\n+    return new Decorator(new ArmeriaClientTracer());\n+  }\n+\n+  /** Creates a new tracing {@link HttpClient} decorator using the specified {@link Tracer}. */\n+  public static OpenTelemetryClient.Decorator newDecorator(Tracer tracer) {\n+    return new Decorator(new ArmeriaClientTracer(tracer));\n+  }\n+\n+  /**\n+   * Creates a new tracing {@link HttpClient} decorator using the specified {@link\n+   * ArmeriaClientTracer}.\n+   */\n+  public static OpenTelemetryClient.Decorator newDecorator(ArmeriaClientTracer clientTracer) {\n+    return new Decorator(clientTracer);\n+  }\n+\n+  private final ArmeriaClientTracer clientTracer;\n+\n+  private OpenTelemetryClient(HttpClient delegate, ArmeriaClientTracer clientTracer) {\n+    super(delegate);\n+    this.clientTracer = clientTracer;\n+  }\n+\n+  @Override\n+  public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+    // Always available in practice.\n+    long requestStartTimeMicros =\n+        ctx.log().ensureAvailable(RequestLogProperty.REQUEST_START_TIME).requestStartTimeMicros();\n+    long requestStartTimeNanos = TimeUnit.MICROSECONDS.toNanos(requestStartTimeMicros);\n+    Span span = clientTracer.startSpan(ctx, requestStartTimeNanos);\n+\n+    if (span.isRecording()) {\n+      ctx.log()\n+          .whenComplete()\n+          .thenAccept(\n+              log -> {\n+                BaseTracer.onPeerConnection(span, ctx.remoteAddress());\n+\n+                long requestEndTimeNanos = requestStartTimeNanos + log.responseDurationNanos();\n+                if (log.responseCause() != null) {\n+                  clientTracer.endExceptionally(\n+                      span, log, log.responseCause(), requestEndTimeNanos);\n+                } else {\n+                  clientTracer.end(span, log, requestEndTimeNanos);\n+                }\n+              });\n+    }\n+\n+    try (Scope ignored = clientTracer.startScope(span, ctx)) {", "originalCommit": "9c68f80800813cb5704a209390798546da76ca51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NjUzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r469096530", "bodyText": "Yeah - I think it's required for logs injection", "author": "anuraaga", "createdAt": "2020-08-12T08:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NzQ1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMTQ4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r469431486", "bodyText": "ah, interesting, hadn't thought of that \ud83d\udc4d", "author": "trask", "createdAt": "2020-08-12T17:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NzQ1NA=="}], "type": "inlineReview", "revised_code": {"commit": "85c5872f19b5d9a03afd977ca46772df0a84fae6", "chunk": "diff --git a/instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java b/instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java\nindex 2f013d3b0a..23210e21d3 100644\n--- a/instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java\n+++ b/instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java\n\n@@ -22,8 +22,8 @@ import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.logging.RequestLogProperty;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.decorator.BaseTracer;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.util.concurrent.TimeUnit;\n"}}, {"oid": "7cbf47d9990c1f09a6395c45e8340c21a0dab72d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7cbf47d9990c1f09a6395c45e8340c21a0dab72d", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into armeria-client-instrumentation", "committedDate": "2020-08-12T04:25:03Z", "type": "commit"}, {"oid": "85c5872f19b5d9a03afd977ca46772df0a84fae6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/85c5872f19b5d9a03afd977ca46772df0a84fae6", "message": "httpurlconnection", "committedDate": "2020-08-12T07:24:29Z", "type": "commit"}, {"oid": "cb33a1844898e960f7d63e771ca9830ab6d17d20", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cb33a1844898e960f7d63e771ca9830ab6d17d20", "message": "Docs and consistency:", "committedDate": "2020-08-12T07:38:27Z", "type": "commit"}]}