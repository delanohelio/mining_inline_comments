{"pr_number": 1650, "pr_title": "AWS lambda tracing - http propagation for non-stream handler / wrapper", "pr_createdAt": "2020-11-16T18:13:22Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650", "timeline": [{"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e9625ad33396952c0509544f07d3fc3e01919e6d", "message": "AWS lambda tracing - http propagation for non-stream handler / wrapper", "committedDate": "2020-11-17T09:02:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MTE2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524991165", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (values != null && !values.isEmpty() ? values.get(0) : null);\n          \n          \n            \n                    return (values != null && !values.isEmpty()) ? values.get(0) : null;\n          \n      \n    \n    \n  \n\nI think", "author": "anuraaga", "createdAt": "2020-11-17T09:06:25Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -42,9 +45,16 @@ static ApiGatewayProxyRequest forStream(final InputStream source) throws IOExcep\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n+  private static final Function<Map.Entry<String, List<String>>, String> EXTRACTOR =\n+      (entry -> {\n+        List<String> values = entry.getValue();\n+        return (values != null && !values.isEmpty() ? values.get(0) : null);", "originalCommit": "e9625ad33396952c0509544f07d3fc3e01919e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyMDAyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525020025", "bodyText": "+1 :)", "author": "kubawach", "createdAt": "2020-11-17T09:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MTE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "chunk": "diff --git a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\nindex 19e24f964d..2c0a3c5f4c 100644\n--- a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\n+++ b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\n\n@@ -45,16 +44,20 @@ abstract class ApiGatewayProxyRequest {\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n-  private static final Function<Map.Entry<String, List<String>>, String> EXTRACTOR =\n-      (entry -> {\n-        List<String> values = entry.getValue();\n-        return (values != null && !values.isEmpty() ? values.get(0) : null);\n-      });\n+  private static boolean nullOrEmpty(List<String> values) {\n+    return ((values == null) || values.isEmpty());\n+  }\n+\n+  private static String extractFirstValue(Map.Entry<String, List<String>> entry) {\n+    List<String> values = entry.getValue();\n+    return (nullOrEmpty(values) ? null : values.get(0));\n+  }\n \n   @Nullable\n   Map<String, String> getHeaders() throws IOException {\n     Headers headers = ofStream(freshStream());\n-    return headers.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, EXTRACTOR));\n+    return headers.entrySet().stream()\n+        .collect(Collectors.toMap(Map.Entry::getKey, ApiGatewayProxyRequest::extractFirstValue));\n   }\n \n   abstract InputStream freshStream() throws IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MTY0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524991640", "bodyText": "Consider defining a method and using a method reference", "author": "anuraaga", "createdAt": "2020-11-17T09:07:11Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -42,9 +45,16 @@ static ApiGatewayProxyRequest forStream(final InputStream source) throws IOExcep\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n+  private static final Function<Map.Entry<String, List<String>>, String> EXTRACTOR =", "originalCommit": "e9625ad33396952c0509544f07d3fc3e01919e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyMDIyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525020224", "bodyText": "Good idea!", "author": "kubawach", "createdAt": "2020-11-17T09:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MTY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "chunk": "diff --git a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\nindex 19e24f964d..2c0a3c5f4c 100644\n--- a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\n+++ b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\n\n@@ -45,16 +44,20 @@ abstract class ApiGatewayProxyRequest {\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n-  private static final Function<Map.Entry<String, List<String>>, String> EXTRACTOR =\n-      (entry -> {\n-        List<String> values = entry.getValue();\n-        return (values != null && !values.isEmpty() ? values.get(0) : null);\n-      });\n+  private static boolean nullOrEmpty(List<String> values) {\n+    return ((values == null) || values.isEmpty());\n+  }\n+\n+  private static String extractFirstValue(Map.Entry<String, List<String>> entry) {\n+    List<String> values = entry.getValue();\n+    return (nullOrEmpty(values) ? null : values.get(0));\n+  }\n \n   @Nullable\n   Map<String, String> getHeaders() throws IOException {\n     Headers headers = ofStream(freshStream());\n-    return headers.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, EXTRACTOR));\n+    return headers.entrySet().stream()\n+        .collect(Collectors.toMap(Map.Entry::getKey, ApiGatewayProxyRequest::extractFirstValue));\n   }\n \n   abstract InputStream freshStream() throws IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjIwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524992208", "bodyText": "e -> e.getKey() == null ? null\n:O:O:O\nWow", "author": "anuraaga", "createdAt": "2020-11-17T09:08:05Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java", "diffHunk": "@@ -5,35 +5,28 @@\n \n package io.opentelemetry.instrumentation.awslambda.v1_0;\n \n-import com.amazonaws.serverless.proxy.model.Headers;\n import io.opentelemetry.api.OpenTelemetry;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.propagation.TextMapPropagator;\n import java.util.Collections;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n \n public class ParentContextExtractor {\n \n-  static Context fromHttpHeaders(Headers headers) {\n-\n+  static Context fromHttpHeaders(Map<String, String> headers) {\n     return OpenTelemetry.getGlobalPropagators()\n         .getTextMapPropagator()\n-        .extract(io.opentelemetry.context.Context.current(), headers, HeadersGetter.INSTANCE);\n+        .extract(\n+            io.opentelemetry.context.Context.current(), lowercaseMap(headers), MapGetter.INSTANCE);\n   }\n \n-  private static class HeadersGetter implements TextMapPropagator.Getter<Headers> {\n-\n-    private static final HeadersGetter INSTANCE = new HeadersGetter();\n-\n-    @Override\n-    public Iterable<String> keys(Headers map) {\n-      return map.keySet();\n-    }\n-\n-    @Override\n-    public String get(Headers headers, String s) {\n-      return headers.getFirst(s);\n-    }\n+  private static Map<String, String> lowercaseMap(Map<String, String> source) {\n+    return source.entrySet().stream()\n+        .collect(\n+            Collectors.toMap(\n+                e -> e.getKey() == null ? null : e.getKey().toLowerCase(), Entry::getValue));", "originalCommit": "e9625ad33396952c0509544f07d3fc3e01919e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjUzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524992532", "bodyText": "What do you think about .filter(e -> e.getKey() != null)?", "author": "anuraaga", "createdAt": "2020-11-17T09:08:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyMDg4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525020889", "bodyText": "The idea here was a typical one - some map implementations allow NULLed keys. But since it's about HTTP headers, filtering out makes sense. Thanks :)", "author": "kubawach", "createdAt": "2020-11-17T09:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "chunk": "diff --git a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java\nindex fb84ab7c52..21d15a38e1 100644\n--- a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java\n+++ b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java\n\n@@ -24,19 +24,19 @@ public class ParentContextExtractor {\n \n   private static Map<String, String> lowercaseMap(Map<String, String> source) {\n     return source.entrySet().stream()\n-        .collect(\n-            Collectors.toMap(\n-                e -> e.getKey() == null ? null : e.getKey().toLowerCase(), Entry::getValue));\n+        .filter(e -> e.getKey() != null)\n+        .collect(Collectors.toMap(e -> e.getKey().toLowerCase(), Entry::getValue));\n   }\n \n-  static final String AWS_TRACE_HEADER_PROPAGATOR_KEY = \"X-Amzn-Trace-Id\";\n+  // lower-case map getter used for extraction\n+  static final String AWS_TRACE_HEADER_PROPAGATOR_KEY = \"x-amzn-trace-id\";\n \n   static Context fromXRayHeader(String parentHeader) {\n     return OpenTelemetry.getGlobalPropagators()\n         .getTextMapPropagator()\n         .extract(\n             Context.current(),\n-            Collections.singletonMap(AWS_TRACE_HEADER_PROPAGATOR_KEY.toLowerCase(), parentHeader),\n+            Collections.singletonMap(AWS_TRACE_HEADER_PROPAGATOR_KEY, parentHeader),\n             MapGetter.INSTANCE);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjkwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524992902", "bodyText": "It would be nice to store the lowercased as a constant", "author": "anuraaga", "createdAt": "2020-11-17T09:09:12Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java", "diffHunk": "@@ -43,7 +36,7 @@ static Context fromXRayHeader(String parentHeader) {\n         .getTextMapPropagator()\n         .extract(\n             Context.current(),\n-            Collections.singletonMap(AWS_TRACE_HEADER_PROPAGATOR_KEY, parentHeader),\n+            Collections.singletonMap(AWS_TRACE_HEADER_PROPAGATOR_KEY.toLowerCase(), parentHeader),", "originalCommit": "e9625ad33396952c0509544f07d3fc3e01919e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNjQwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525026409", "bodyText": "+1", "author": "kubawach", "createdAt": "2020-11-17T09:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "chunk": "diff --git a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java\nindex fb84ab7c52..21d15a38e1 100644\n--- a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java\n+++ b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java\n\n@@ -24,19 +24,19 @@ public class ParentContextExtractor {\n \n   private static Map<String, String> lowercaseMap(Map<String, String> source) {\n     return source.entrySet().stream()\n-        .collect(\n-            Collectors.toMap(\n-                e -> e.getKey() == null ? null : e.getKey().toLowerCase(), Entry::getValue));\n+        .filter(e -> e.getKey() != null)\n+        .collect(Collectors.toMap(e -> e.getKey().toLowerCase(), Entry::getValue));\n   }\n \n-  static final String AWS_TRACE_HEADER_PROPAGATOR_KEY = \"X-Amzn-Trace-Id\";\n+  // lower-case map getter used for extraction\n+  static final String AWS_TRACE_HEADER_PROPAGATOR_KEY = \"x-amzn-trace-id\";\n \n   static Context fromXRayHeader(String parentHeader) {\n     return OpenTelemetry.getGlobalPropagators()\n         .getTextMapPropagator()\n         .extract(\n             Context.current(),\n-            Collections.singletonMap(AWS_TRACE_HEADER_PROPAGATOR_KEY.toLowerCase(), parentHeader),\n+            Collections.singletonMap(AWS_TRACE_HEADER_PROPAGATOR_KEY, parentHeader),\n             MapGetter.INSTANCE);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MzUxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524993514", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              // one of the methods has last param context ?\n          \n          \n            \n                              // only one of the methods has last param context ?", "author": "anuraaga", "createdAt": "2020-11-17T09:10:06Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java", "diffHunk": "@@ -106,12 +107,19 @@ Method getRequestTargetMethod() {\n                   if (a.getParameterCount() != b.getParameterCount()) {\n                     return b.getParameterCount() - a.getParameterCount();\n                   }\n-                  if (isLastParameterContext(a.getParameters())) {\n-                    return -1;\n-                  } else if (isLastParameterContext(b.getParameters())) {\n-                    return 1;\n+                  boolean firstCtx = isLastParameterContext(a.getParameters());\n+                  boolean secondCtx = isLastParameterContext(b.getParameters());\n+                  // one of the methods has last param context ?", "originalCommit": "e9625ad33396952c0509544f07d3fc3e01919e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNzMxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525027315", "bodyText": "+1", "author": "kubawach", "createdAt": "2020-11-17T09:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MzUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "chunk": "diff --git a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\nindex bf715f6179..320145a132 100644\n--- a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\n+++ b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\n\n@@ -103,16 +106,17 @@ class WrappedLambda {\n             .filter((Method m) -> m.getName().equals(targetMethodName))\n             .sorted(\n                 (Method a, Method b) -> {\n-                  // sort descending (reverse of default ascending)\n+                  // larger number of params wins\n                   if (a.getParameterCount() != b.getParameterCount()) {\n                     return b.getParameterCount() - a.getParameterCount();\n                   }\n                   boolean firstCtx = isLastParameterContext(a.getParameters());\n                   boolean secondCtx = isLastParameterContext(b.getParameters());\n-                  // one of the methods has last param context ?\n+                  // only one of the methods has last param context ?\n                   if (firstCtx ^ secondCtx) {\n                     return (firstCtx ? -1 : 1);\n                   }\n+                  // one of the methods is a bridge\n                   boolean firstBridge = a.isBridge();\n                   boolean secondBridge = b.isBridge();\n                   if (firstBridge ^ secondBridge) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDE4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524994188", "bodyText": "This logic has gotten pretty mysterious - would it be possible to add some example method signatures to the javadoc to explain it?", "author": "anuraaga", "createdAt": "2020-11-17T09:11:10Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java", "diffHunk": "@@ -106,12 +107,19 @@ Method getRequestTargetMethod() {\n                   if (a.getParameterCount() != b.getParameterCount()) {\n                     return b.getParameterCount() - a.getParameterCount();\n                   }\n-                  if (isLastParameterContext(a.getParameters())) {\n-                    return -1;\n-                  } else if (isLastParameterContext(b.getParameters())) {\n-                    return 1;\n+                  boolean firstCtx = isLastParameterContext(a.getParameters());\n+                  boolean secondCtx = isLastParameterContext(b.getParameters());\n+                  // one of the methods has last param context ?\n+                  if (firstCtx ^ secondCtx) {", "originalCommit": "e9625ad33396952c0509544f07d3fc3e01919e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0MjgwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525042800", "bodyText": "Added :)", "author": "kubawach", "createdAt": "2020-11-17T10:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "chunk": "diff --git a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\nindex bf715f6179..320145a132 100644\n--- a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\n+++ b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\n\n@@ -103,16 +106,17 @@ class WrappedLambda {\n             .filter((Method m) -> m.getName().equals(targetMethodName))\n             .sorted(\n                 (Method a, Method b) -> {\n-                  // sort descending (reverse of default ascending)\n+                  // larger number of params wins\n                   if (a.getParameterCount() != b.getParameterCount()) {\n                     return b.getParameterCount() - a.getParameterCount();\n                   }\n                   boolean firstCtx = isLastParameterContext(a.getParameters());\n                   boolean secondCtx = isLastParameterContext(b.getParameters());\n-                  // one of the methods has last param context ?\n+                  // only one of the methods has last param context ?\n                   if (firstCtx ^ secondCtx) {\n                     return (firstCtx ? -1 : 1);\n                   }\n+                  // one of the methods is a bridge\n                   boolean firstBridge = a.isBridge();\n                   boolean secondBridge = b.isBridge();\n                   if (firstBridge ^ secondBridge) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4Mjg1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525082856", "bodyText": "How about\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<String> values = entry.getValue();\n          \n          \n            \n                return (nullOrEmpty(values) ? null : values.get(0));\n          \n          \n            \n                return entry.getValue().stream()\n          \n          \n            \n                    .findFirst()\n          \n          \n            \n                    .orElse(null);\n          \n      \n    \n    \n  \n\ninstead?", "author": "mateuszrzeszutek", "createdAt": "2020-11-17T11:28:35Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -42,9 +44,20 @@ static ApiGatewayProxyRequest forStream(final InputStream source) throws IOExcep\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n+  private static boolean nullOrEmpty(List<String> values) {\n+    return ((values == null) || values.isEmpty());\n+  }\n+\n+  private static String extractFirstValue(Map.Entry<String, List<String>> entry) {\n+    List<String> values = entry.getValue();\n+    return (nullOrEmpty(values) ? null : values.get(0));", "originalCommit": "8130bccc32b481c8b60eba343840fe5e7bf15ba6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwMTgwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525101806", "bodyText": "More readable, less performant I guess (streaming the list vs checking for empty()). Also, null values list is not handled properly.", "author": "kubawach", "createdAt": "2020-11-17T12:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4Mjg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "967bb912307900a2cb9eb9af92822537db4feeac", "chunk": "diff --git a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\nindex 1eb68a5b0a..86fffe8806 100644\n--- a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\n+++ b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java\n\n@@ -44,20 +45,16 @@ abstract class ApiGatewayProxyRequest {\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n-  private static boolean nullOrEmpty(List<String> values) {\n-    return ((values == null) || values.isEmpty());\n-  }\n-\n-  private static String extractFirstValue(Map.Entry<String, List<String>> entry) {\n-    List<String> values = entry.getValue();\n-    return (nullOrEmpty(values) ? null : values.get(0));\n-  }\n+  private static final Function<Map.Entry<String, List<String>>, String> EXTRACTOR =\n+      (entry -> {\n+        List<String> values = entry.getValue();\n+        return (values != null && !values.isEmpty() ? values.get(0) : null);\n+      });\n \n   @Nullable\n   Map<String, String> getHeaders() throws IOException {\n     Headers headers = ofStream(freshStream());\n-    return headers.entrySet().stream()\n-        .collect(Collectors.toMap(Map.Entry::getKey, ApiGatewayProxyRequest::extractFirstValue));\n+    return headers.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, EXTRACTOR));\n   }\n \n   abstract InputStream freshStream() throws IOException;\n"}}, {"oid": "967bb912307900a2cb9eb9af92822537db4feeac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/967bb912307900a2cb9eb9af92822537db4feeac", "message": "AWS lambda tracing - http propagation for non-stream handler / wrapper", "committedDate": "2020-11-20T08:18:06Z", "type": "commit"}, {"oid": "9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "message": "code review", "committedDate": "2020-11-20T08:18:11Z", "type": "commit"}, {"oid": "daccae84bc6037426d830ea8aa8204076b90877f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/daccae84bc6037426d830ea8aa8204076b90877f", "message": "null-handling improvements", "committedDate": "2020-11-20T08:20:53Z", "type": "commit"}, {"oid": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "message": "rebase to newest master", "committedDate": "2020-11-20T14:29:33Z", "type": "commit"}, {"oid": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "message": "rebase to newest master", "committedDate": "2020-11-20T14:29:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MTI5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r527791294", "bodyText": "I'm definitely not a fan of using an O as a type parameter. It looks way too much like a 0.", "author": "jkwatson", "createdAt": "2020-11-20T16:03:03Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestWrapperBase.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Base abstract wrapper for {@link TracingRequestHandler}. Provides: - delegation to a lambda via\n+ * env property OTEL_LAMBDA_HANDLER in package.ClassName::methodName format\n+ */\n+abstract class TracingRequestWrapperBase<I, O> extends TracingRequestHandler<I, O> {", "originalCommit": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODc3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r528858772", "bodyText": "It's a copy from the root handler I (input), O (ouput). Would leave that to maintain consistency :)", "author": "kubawach", "createdAt": "2020-11-23T17:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MTI5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MjYxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r527792619", "bodyText": "personally I'd avoid using rarely used boolean operators like this. I had to look up that this was an xor. It makes the code harder to read.", "author": "jkwatson", "createdAt": "2020-11-20T16:05:08Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java", "diffHunk": "@@ -92,24 +92,38 @@ Method getRequestTargetMethod() {\n        - Context can be omitted\n        - Select the method with the largest number of parameters.\n        - If two or more methods have the same number of parameters, AWS Lambda selects the method that has the Context as the last parameter.\n+       - Non-Bridge methods are preferred\n        - If none or all of these methods have the Context parameter, then the behavior is undefined.\n+\n+       Examples:\n+       - handleA(String, String, Integer), handleB(String, Context) - handleA is selected (number of parameters)\n+       - handleA(String, String, Integer), handleB(String, String, Context) - handleB is selected (has Context as the last parameter)\n+       - generic method handleG(T, U, Context), implementation (T, U - String) handleA(String, String, Context), bridge method handleB(Object, Object, Context) - handleA is selected (non-bridge)\n     */\n     List<Method> methods = Arrays.asList(targetClass.getMethods());\n     Optional<Method> firstOptional =\n         methods.stream()\n             .filter((Method m) -> m.getName().equals(targetMethodName))\n             .sorted(\n                 (Method a, Method b) -> {\n-                  // sort descending (reverse of default ascending)\n+                  // larger number of params wins\n                   if (a.getParameterCount() != b.getParameterCount()) {\n                     return b.getParameterCount() - a.getParameterCount();\n                   }\n-                  if (isLastParameterContext(a.getParameters())) {\n-                    return -1;\n-                  } else if (isLastParameterContext(b.getParameters())) {\n-                    return 1;\n+                  boolean firstCtx = isLastParameterContext(a.getParameters());\n+                  boolean secondCtx = isLastParameterContext(b.getParameters());\n+                  // only one of the methods has last param context ?\n+                  if (firstCtx ^ secondCtx) {", "originalCommit": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MzYwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r527793604", "bodyText": "I also recommend putting all of this code into a method with a clear name. I honestly have no idea what the purpose of all this stuff is.", "author": "jkwatson", "createdAt": "2020-11-20T16:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MjYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NDQ5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r527794492", "bodyText": "Also, are there tests for these changes?", "author": "jkwatson", "createdAt": "2020-11-20T16:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MjYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNTI1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r527815257", "bodyText": "Honestly I had the same reaction, including the xor double take. The added javadoc helps a lot but if this can be restructured for more readability that would be nice - if it was just me whatever, but seems to be more general :)", "author": "anuraaga", "createdAt": "2020-11-20T16:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MjYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1OTM2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r528859364", "bodyText": "Yeah, I'm not fond of XOR either, however in this context - mutual exclusion - seemed to fit the bill nicely. However can restructure as requested.", "author": "kubawach", "createdAt": "2020-11-23T17:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MjYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "597df75f686763a1ca10a4660475e82d0c50df78", "chunk": "diff --git a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\nindex 320145a132..902942dc53 100644\n--- a/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\n+++ b/instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java\n\n@@ -86,45 +86,12 @@ class WrappedLambda {\n   }\n \n   Method getRequestTargetMethod() {\n-    /*\n-       Per method selection specifications\n-       http://docs.aws.amazon.com/lambda/latest/dg/java-programming-model-handler-types.html\n-       - Context can be omitted\n-       - Select the method with the largest number of parameters.\n-       - If two or more methods have the same number of parameters, AWS Lambda selects the method that has the Context as the last parameter.\n-       - Non-Bridge methods are preferred\n-       - If none or all of these methods have the Context parameter, then the behavior is undefined.\n-\n-       Examples:\n-       - handleA(String, String, Integer), handleB(String, Context) - handleA is selected (number of parameters)\n-       - handleA(String, String, Integer), handleB(String, String, Context) - handleB is selected (has Context as the last parameter)\n-       - generic method handleG(T, U, Context), implementation (T, U - String) handleA(String, String, Context), bridge method handleB(Object, Object, Context) - handleA is selected (non-bridge)\n-    */\n+\n     List<Method> methods = Arrays.asList(targetClass.getMethods());\n     Optional<Method> firstOptional =\n         methods.stream()\n             .filter((Method m) -> m.getName().equals(targetMethodName))\n-            .sorted(\n-                (Method a, Method b) -> {\n-                  // larger number of params wins\n-                  if (a.getParameterCount() != b.getParameterCount()) {\n-                    return b.getParameterCount() - a.getParameterCount();\n-                  }\n-                  boolean firstCtx = isLastParameterContext(a.getParameters());\n-                  boolean secondCtx = isLastParameterContext(b.getParameters());\n-                  // only one of the methods has last param context ?\n-                  if (firstCtx ^ secondCtx) {\n-                    return (firstCtx ? -1 : 1);\n-                  }\n-                  // one of the methods is a bridge\n-                  boolean firstBridge = a.isBridge();\n-                  boolean secondBridge = b.isBridge();\n-                  if (firstBridge ^ secondBridge) {\n-                    return (firstBridge ? 1 : -1);\n-                  }\n-                  // undefined = methods are equal\n-                  return 0;\n-                })\n+            .sorted(this::methodComparator)\n             .findFirst();\n     if (!firstOptional.isPresent()) {\n       throw new RuntimeException(\"Method \" + targetMethodName + \" not found\");\n"}}, {"oid": "597df75f686763a1ca10a4660475e82d0c50df78", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/597df75f686763a1ca10a4660475e82d0c50df78", "message": "code review", "committedDate": "2020-11-23T17:16:28Z", "type": "commit"}, {"oid": "b45d4cfa3c0c83cbf55c5d7ba3a36838818784d2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b45d4cfa3c0c83cbf55c5d7ba3a36838818784d2", "message": "less dependencies, lower coupling", "committedDate": "2020-11-23T20:39:37Z", "type": "commit"}]}