{"pr_number": 1576, "pr_title": "Refactor Instrumenters into InstrumentationModules - R, S, T, V", "pr_createdAt": "2020-11-06T15:31:34Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1576", "timeline": [{"oid": "23fc2e5f283f918c4d22fb84123dbb34d3a4b658", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/23fc2e5f283f918c4d22fb84123dbb34d3a4b658", "message": "Refactor Instrumenters into InstrumentationModules - R, S, T, V", "committedDate": "2020-11-06T15:49:32Z", "type": "forcePushed"}, {"oid": "6358679579bba5a40c0669bc2b8d746c29c2d708", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6358679579bba5a40c0669bc2b8d746c29c2d708", "message": "Refactor Instrumenters into InstrumentationModules - R, S, T, V", "committedDate": "2020-11-06T17:21:21Z", "type": "forcePushed"}, {"oid": "dfbeebe463a2b4af358c35b54702ab787a2a3c98", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dfbeebe463a2b4af358c35b54702ab787a2a3c98", "message": "Refactor Instrumenters into InstrumentationModules - R, S, T, V", "committedDate": "2020-11-09T10:41:25Z", "type": "commit"}, {"oid": "dfbeebe463a2b4af358c35b54702ab787a2a3c98", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dfbeebe463a2b4af358c35b54702ab787a2a3c98", "message": "Refactor Instrumenters into InstrumentationModules - R, S, T, V", "committedDate": "2020-11-09T10:41:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI0NDE2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1576#discussion_r520244164", "bodyText": "nice to get rid of these \ud83d\udc4d", "author": "trask", "createdAt": "2020-11-10T02:23:37Z", "path": "instrumentation/rabbitmq-2.7/src/main/java/io/opentelemetry/javaagent/instrumentation/rabbitmq/amqp/RabbitCommandInstrumentation.java", "diffHunk": "@@ -72,14 +55,5 @@ public static void setSpanNameAddHeaders(@Advice.This Command command) {\n         tracer().onCommand(span, command);\n       }\n     }\n-\n-    /**\n-     * This instrumentation will match with 2.6, but the channel instrumentation only matches with\n-     * 2.7 because of TracedDelegatingConsumer. This unused method is added to ensure consistent\n-     * muzzle validation by preventing match with 2.6.\n-     */\n-    public static void muzzleCheck(TracedDelegatingConsumer consumer) {\n-      consumer.handleRecoverOk(null);\n-    }", "originalCommit": "dfbeebe463a2b4af358c35b54702ab787a2a3c98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI0NTc2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1576#discussion_r520245764", "bodyText": "the splitting up of classLoaderMatcher() turned out nice \ud83d\udc4d", "author": "trask", "createdAt": "2020-11-10T02:29:03Z", "path": "instrumentation/servlet/servlet-2.2/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v2_2/ServletAndFilterChainInstrumentation.java", "diffHunk": "@@ -11,52 +11,27 @@\n import static java.util.Collections.singletonMap;\n import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n import static net.bytebuddy.matcher.ElementMatchers.named;\n-import static net.bytebuddy.matcher.ElementMatchers.not;\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n \n-import com.google.auto.service.AutoService;\n-import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n import java.util.Map;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n-@AutoService(Instrumenter.class)\n-public final class Servlet2Instrumentation extends Instrumenter.Default {\n+final class ServletAndFilterChainInstrumentation implements TypeInstrumentation {\n \n-  public Servlet2Instrumentation() {\n-    super(\"servlet\", \"servlet-2\");\n-  }\n-\n-  // this is required to make sure servlet 2 instrumentation won't apply to servlet 3\n   @Override\n   public ElementMatcher<ClassLoader> classLoaderMatcher() {\n     // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"javax.servlet.http.HttpServlet\")\n-        .and(not(hasClassesNamed(\"javax.servlet.AsyncEvent\", \"javax.servlet.AsyncListener\")));\n+    return hasClassesNamed(\"javax.servlet.http.HttpServlet\");", "originalCommit": "dfbeebe463a2b4af358c35b54702ab787a2a3c98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}