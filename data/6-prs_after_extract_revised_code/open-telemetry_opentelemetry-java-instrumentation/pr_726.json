{"pr_number": 726, "pr_title": "feat(servlet): content length", "pr_createdAt": "2020-07-18T00:41:26Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726", "timeline": [{"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ff22b26030b7523acf6d6820091dd97a9fbebefc", "message": "feat(servlet): content length\n\nadd content length tag for v3 servlets as per https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#common-attributes", "committedDate": "2020-07-18T01:01:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODM2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456738362", "bodyText": "If I recall correctly this was already released in otel 0.6.0, is it not part of SemanticAttributes?", "author": "anuraaga", "createdAt": "2020-07-18T02:34:54Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/instrumentation/api/MoreAttributes.java", "diffHunk": "@@ -19,6 +19,7 @@\n public class MoreAttributes {\n   public static final String HTTP_QUERY = \"http.query.string\";\n   public static final String HTTP_FRAGMENT = \"http.fragment.string\";\n+  public static final String HTTP_RESPONSE_CONTENT_LENGTH = \"http.response_content_length\";", "originalCommit": "ff22b26030b7523acf6d6820091dd97a9fbebefc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NTk0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456765944", "bodyText": "I did a project wide search for the string before adding it. Is that defined elsewhere?", "author": "FrankSpitulski", "createdAt": "2020-07-18T08:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MjA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456772099", "bodyText": "Yeah it's in the SDK repo\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "author": "anuraaga", "createdAt": "2020-07-18T09:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6476633c33c59a04227650798df9a9a93c949810", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/instrumentation/api/MoreAttributes.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/instrumentation/api/MoreAttributes.java\nindex 6c08ad663e..545fd869fd 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/instrumentation/api/MoreAttributes.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/instrumentation/api/MoreAttributes.java\n\n@@ -19,7 +19,6 @@ package io.opentelemetry.auto.instrumentation.api;\n public class MoreAttributes {\n   public static final String HTTP_QUERY = \"http.query.string\";\n   public static final String HTTP_FRAGMENT = \"http.fragment.string\";\n-  public static final String HTTP_RESPONSE_CONTENT_LENGTH = \"http.response_content_length\";\n \n   public static final String USER_NAME = \"user.principal\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODg4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456738887", "bodyText": "I think we may need counting for cases like chunked responses but a huge majority will have a content length header. What do you think about starting with that to get most bang for buck? We could do it in HttpServerTracer I think.\nEither way we probably want to avoid adding this wrapper when the response has a content length header. We could use the content length in a future PR instead.", "author": "anuraaga", "createdAt": "2020-07-18T02:40:42Z", "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {", "originalCommit": "ff22b26030b7523acf6d6820091dd97a9fbebefc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NTg3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456765870", "bodyText": "From my testing the set Content Length method is not invoked by springboot's rest controller. Counting the bytes was the only reliable way to get the size. I also tried to stick it in the http server tracer but the wrapper was introduced in servlet 2.3 and causes issues in the servlet 2.2 instrumentation.", "author": "FrankSpitulski", "createdAt": "2020-07-18T08:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MjE0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456772147", "bodyText": "I see that sounds like for servlet we'll need to ignore the content length header always, thanks for the background", "author": "anuraaga", "createdAt": "2020-07-18T09:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6476633c33c59a04227650798df9a9a93c949810", "chunk": "diff --git a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\nindex 5004c26eed..195f790164 100644\n--- a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n+++ b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\n@@ -17,6 +17,9 @@\n package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n \n import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n import javax.servlet.ServletOutputStream;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpServletResponseWrapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgxNzcxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456817717", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  counter += len - off;\n          \n          \n            \n                  counter += len;", "author": "trask", "createdAt": "2020-07-18T18:54:55Z", "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  public int getContentLength() {\n+    return outputStream.counter;\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;\n+    private int counter = 0;\n+\n+    public CountingServletOutputStream(ServletOutputStream delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+      delegate.write(b);\n+      counter++;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+      delegate.write(b);\n+      counter += b.length;\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      delegate.write(b, off, len);\n+      counter += len - off;", "originalCommit": "ff22b26030b7523acf6d6820091dd97a9fbebefc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMjg0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456822842", "bodyText": "Good catch", "author": "FrankSpitulski", "createdAt": "2020-07-18T20:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgxNzcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "6476633c33c59a04227650798df9a9a93c949810", "chunk": "diff --git a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\nindex 5004c26eed..195f790164 100644\n--- a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n+++ b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\n@@ -17,6 +17,9 @@\n package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n \n import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n import javax.servlet.ServletOutputStream;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpServletResponseWrapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzczMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456943732", "bodyText": "The design principal of Tracers (as opposed to old Decorators) is to expose as small API as possible. For this reason I don't really like this new public method here. I don't have better idea though right now.", "author": "iNikem", "createdAt": "2020-07-19T19:09:09Z", "path": "instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -109,4 +109,8 @@ public void setPrincipal(Span span, HttpServletRequest request) {\n       span.setAttribute(MoreAttributes.USER_NAME, principal.getName());\n     }\n   }\n+\n+  public void setContentLength(Span span, int length) {", "originalCommit": "ff22b26030b7523acf6d6820091dd97a9fbebefc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0ODQzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456948430", "bodyText": "It could go in the servlet 3 advice class. I originally put it here because that seemed to be the pattern.", "author": "FrankSpitulski", "createdAt": "2020-07-19T19:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2MTE1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r457061157", "bodyText": "I opened #733 so we can leave this as-is in this PR", "author": "trask", "createdAt": "2020-07-20T05:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzczMg=="}], "type": "inlineReview", "revised_code": {"commit": "6476633c33c59a04227650798df9a9a93c949810", "chunk": "diff --git a/instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java b/instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java\nindex b40b75debb..001eb4c19b 100644\n--- a/instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java\n+++ b/instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java\n\n@@ -111,6 +112,6 @@ public abstract class ServletHttpServerTracer\n   }\n \n   public void setContentLength(Span span, int length) {\n-    span.setAttribute(MoreAttributes.HTTP_RESPONSE_CONTENT_LENGTH, length);\n+    SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.set(span, String.valueOf(length));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MDY0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r457080645", "bodyText": "Use packageName as below", "author": "iNikem", "createdAt": "2020-07-20T06:02:56Z", "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/AsyncContextInstrumentation.java", "diffHunk": "@@ -50,6 +50,9 @@ public AsyncContextInstrumentation() {\n     return new String[] {\n       \"io.opentelemetry.instrumentation.servlet.HttpServletRequestGetter\",\n       \"io.opentelemetry.instrumentation.servlet.ServletHttpServerTracer\",\n+      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.CountingHttpServletResponse\",", "originalCommit": "ff22b26030b7523acf6d6820091dd97a9fbebefc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6476633c33c59a04227650798df9a9a93c949810", "chunk": "diff --git a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/AsyncContextInstrumentation.java b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/AsyncContextInstrumentation.java\nindex d35f563583..2048bb36e1 100644\n--- a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/AsyncContextInstrumentation.java\n+++ b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/AsyncContextInstrumentation.java\n\n@@ -50,9 +50,9 @@ public final class AsyncContextInstrumentation extends Instrumenter.Default {\n     return new String[] {\n       \"io.opentelemetry.instrumentation.servlet.HttpServletRequestGetter\",\n       \"io.opentelemetry.instrumentation.servlet.ServletHttpServerTracer\",\n-      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.CountingHttpServletResponse\",\n-      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.CountingHttpServletResponse$CountingServletOutputStream\",\n-      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.TagSettingAsyncListener\",\n+      packageName + \".CountingHttpServletResponse\",\n+      packageName + \".CountingHttpServletResponse$CountingServletOutputStream\",\n+      packageName + \".TagSettingAsyncListener\",\n       packageName + \".Servlet3HttpServerTracer\"\n     };\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MTA1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r457081059", "bodyText": "Use packageName as below", "author": "iNikem", "createdAt": "2020-07-20T06:03:53Z", "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3Instrumentation.java", "diffHunk": "@@ -54,6 +54,9 @@ public Servlet3Instrumentation() {\n     return new String[] {\n       \"io.opentelemetry.instrumentation.servlet.HttpServletRequestGetter\",\n       \"io.opentelemetry.instrumentation.servlet.ServletHttpServerTracer\",\n+      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.CountingHttpServletResponse\",", "originalCommit": "ff22b26030b7523acf6d6820091dd97a9fbebefc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6476633c33c59a04227650798df9a9a93c949810", "chunk": "diff --git a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3Instrumentation.java b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3Instrumentation.java\nindex 68dcd237a1..c394ec258f 100644\n--- a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3Instrumentation.java\n+++ b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3Instrumentation.java\n\n@@ -54,9 +54,10 @@ public final class Servlet3Instrumentation extends Instrumenter.Default {\n     return new String[] {\n       \"io.opentelemetry.instrumentation.servlet.HttpServletRequestGetter\",\n       \"io.opentelemetry.instrumentation.servlet.ServletHttpServerTracer\",\n-      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.CountingHttpServletResponse\",\n-      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.CountingHttpServletResponse$CountingServletOutputStream\",\n-      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.Servlet3Advice\",\n+      packageName + \".CountingHttpServletResponse\",\n+      packageName + \".CountingHttpServletResponse$CountingServletOutputStream\",\n+      packageName + \".CountingHttpServletResponse$CountingPrintWriter\",\n+      packageName + \".Servlet3Advice\",\n       packageName + \".Servlet3HttpServerTracer\",\n       packageName + \".TagSettingAsyncListener\"\n     };\n"}}, {"oid": "6476633c33c59a04227650798df9a9a93c949810", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6476633c33c59a04227650798df9a9a93c949810", "message": "count printwriter and add null checks", "committedDate": "2020-07-20T19:47:27Z", "type": "forcePushed"}, {"oid": "920bd1822de43917fbc98f1859e7f2c1673ce6d2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/920bd1822de43917fbc98f1859e7f2c1673ce6d2", "message": "feat(servlet): content length\n\nadd content length tag for v3 servlets as per https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#common-attributes", "committedDate": "2020-07-21T03:28:35Z", "type": "commit"}, {"oid": "0a624085c7c3cc33102f9bae3474cc53d1a0deb7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0a624085c7c3cc33102f9bae3474cc53d1a0deb7", "message": "address bugs in PR", "committedDate": "2020-07-21T03:28:35Z", "type": "commit"}, {"oid": "8f4c061cbed18ca770d5c5c1ba99028e4b47e93c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f4c061cbed18ca770d5c5c1ba99028e4b47e93c", "message": "count printwriter and add null checks", "committedDate": "2020-07-21T03:28:35Z", "type": "commit"}, {"oid": "0f6a6ab4fa476e4557f53d15edbfee6b5710deb5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0f6a6ab4fa476e4557f53d15edbfee6b5710deb5", "message": "add tests", "committedDate": "2020-07-21T03:28:35Z", "type": "commit"}, {"oid": "7e0f082b750a00bf2ddac207481031a86c76e40a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7e0f082b750a00bf2ddac207481031a86c76e40a", "message": "git demands that I push this file", "committedDate": "2020-07-21T03:29:30Z", "type": "forcePushed"}, {"oid": "c7eedc45fccd3bc25d2f4036bd84aae0b0e6684c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c7eedc45fccd3bc25d2f4036bd84aae0b0e6684c", "message": "fix servlet 2 test and GlassFishServerTest", "committedDate": "2020-07-21T04:47:22Z", "type": "forcePushed"}, {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec0f05a63b58da64092f54d31047d93e22bf0cd0", "message": "fix tests", "committedDate": "2020-07-21T05:52:57Z", "type": "commit"}, {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec0f05a63b58da64092f54d31047d93e22bf0cd0", "message": "fix tests", "committedDate": "2020-07-21T05:52:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2Njc1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458066759", "bodyText": "Is a volatile enough? Writes from different threads sure but is it possible to have simultaneous writes?\nEither way sticking with atomic for safety is fine too", "author": "anuraaga", "createdAt": "2020-07-21T12:44:49Z", "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+  private CountingPrintWriter printWriter = null;\n+  private int errorLength = 0;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  @Override\n+  public PrintWriter getWriter() throws IOException {\n+    if (printWriter == null) {\n+      printWriter = new CountingPrintWriter(super.getWriter());\n+    }\n+    return printWriter;\n+  }\n+\n+  public int getContentLength() {\n+    int contentLength = errorLength;\n+    if (outputStream != null) {\n+      contentLength += outputStream.counter;\n+    }\n+    if (printWriter != null) {\n+      contentLength += printWriter.counter.get();\n+    }\n+    return contentLength;\n+  }\n+\n+  /** sendError bypasses the servlet response writers and writes directly to the response */\n+  @Override\n+  public void sendError(int sc, String msg) throws IOException {\n+    super.sendError(sc, msg);\n+    if (msg != null) {\n+      errorLength += msg.length();\n+    }\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;\n+    private int counter = 0;\n+\n+    public CountingServletOutputStream(ServletOutputStream delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+      delegate.write(b);\n+      counter++;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+      delegate.write(b);\n+      counter += b.length;\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      delegate.write(b, off, len);\n+      counter += len;\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+      delegate.flush();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      delegate.close();\n+    }\n+  }\n+\n+  static class CountingPrintWriter extends PrintWriter {\n+    // PrintWriter is synchronised, so the counter has to be atomic\n+    private AtomicInteger counter = new AtomicInteger(0);", "originalCommit": "ec0f05a63b58da64092f54d31047d93e22bf0cd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MjEyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458272126", "bodyText": "The jdk implementation uses an internal lock to synchronise pretty much every method. Since I can't grab that lock I can imagine a situation under high load where two of those methods are called, pulled off of the cpu, then scheduled on two cpus at the same time.", "author": "FrankSpitulski", "createdAt": "2020-07-21T17:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2Njc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjM3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458352370", "bodyText": "I think the Servlet Spec comes to our rescue here:\n\nOther than the startAsync and complete methods, implementations of the request\nand response objects are not guaranteed to be thread safe. This means that they\nshould either only be used within the scope of the request handling thread or the\napplication must ensure that access to the request and response objects are thread\nsafe.\n\nMy reading of this is that we don't even need volatile here (similar to implementation above in CountingServletOutputStream).", "author": "trask", "createdAt": "2020-07-21T19:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2Njc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7df25960bba4ded00bc15eb432762c4da45a3c7c", "chunk": "diff --git a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\nindex 50168d4e90..551c017504 100644\n--- a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n+++ b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\n@@ -77,7 +77,7 @@ public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n \n   static class CountingServletOutputStream extends ServletOutputStream {\n \n-    private ServletOutputStream delegate;\n+    private final ServletOutputStream delegate;\n     private int counter = 0;\n \n     public CountingServletOutputStream(ServletOutputStream delegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDQ1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458340452", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ServletOutputStream delegate;\n          \n          \n            \n                private final ServletOutputStream delegate;", "author": "trask", "createdAt": "2020-07-21T19:36:04Z", "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+  private CountingPrintWriter printWriter = null;\n+  private int errorLength = 0;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  @Override\n+  public PrintWriter getWriter() throws IOException {\n+    if (printWriter == null) {\n+      printWriter = new CountingPrintWriter(super.getWriter());\n+    }\n+    return printWriter;\n+  }\n+\n+  public int getContentLength() {\n+    int contentLength = errorLength;\n+    if (outputStream != null) {\n+      contentLength += outputStream.counter;\n+    }\n+    if (printWriter != null) {\n+      contentLength += printWriter.counter.get();\n+    }\n+    return contentLength;\n+  }\n+\n+  /** sendError bypasses the servlet response writers and writes directly to the response */\n+  @Override\n+  public void sendError(int sc, String msg) throws IOException {\n+    super.sendError(sc, msg);\n+    if (msg != null) {\n+      errorLength += msg.length();\n+    }\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;", "originalCommit": "ec0f05a63b58da64092f54d31047d93e22bf0cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7df25960bba4ded00bc15eb432762c4da45a3c7c", "chunk": "diff --git a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\nindex 50168d4e90..551c017504 100644\n--- a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n+++ b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\n@@ -77,7 +77,7 @@ public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n \n   static class CountingServletOutputStream extends ServletOutputStream {\n \n-    private ServletOutputStream delegate;\n+    private final ServletOutputStream delegate;\n     private int counter = 0;\n \n     public CountingServletOutputStream(ServletOutputStream delegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDYxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458340613", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private AtomicInteger counter = new AtomicInteger(0);\n          \n          \n            \n                private final AtomicInteger counter = new AtomicInteger(0);", "author": "trask", "createdAt": "2020-07-21T19:36:25Z", "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+  private CountingPrintWriter printWriter = null;\n+  private int errorLength = 0;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  @Override\n+  public PrintWriter getWriter() throws IOException {\n+    if (printWriter == null) {\n+      printWriter = new CountingPrintWriter(super.getWriter());\n+    }\n+    return printWriter;\n+  }\n+\n+  public int getContentLength() {\n+    int contentLength = errorLength;\n+    if (outputStream != null) {\n+      contentLength += outputStream.counter;\n+    }\n+    if (printWriter != null) {\n+      contentLength += printWriter.counter.get();\n+    }\n+    return contentLength;\n+  }\n+\n+  /** sendError bypasses the servlet response writers and writes directly to the response */\n+  @Override\n+  public void sendError(int sc, String msg) throws IOException {\n+    super.sendError(sc, msg);\n+    if (msg != null) {\n+      errorLength += msg.length();\n+    }\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;\n+    private int counter = 0;\n+\n+    public CountingServletOutputStream(ServletOutputStream delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+      delegate.write(b);\n+      counter++;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+      delegate.write(b);\n+      counter += b.length;\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      delegate.write(b, off, len);\n+      counter += len;\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+      delegate.flush();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      delegate.close();\n+    }\n+  }\n+\n+  static class CountingPrintWriter extends PrintWriter {\n+    // PrintWriter is synchronised, so the counter has to be atomic\n+    private AtomicInteger counter = new AtomicInteger(0);", "originalCommit": "ec0f05a63b58da64092f54d31047d93e22bf0cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7df25960bba4ded00bc15eb432762c4da45a3c7c", "chunk": "diff --git a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\nindex 50168d4e90..551c017504 100644\n--- a/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n+++ b/instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\n@@ -77,7 +77,7 @@ public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n \n   static class CountingServletOutputStream extends ServletOutputStream {\n \n-    private ServletOutputStream delegate;\n+    private final ServletOutputStream delegate;\n     private int counter = 0;\n \n     public CountingServletOutputStream(ServletOutputStream delegate) {\n"}}, {"oid": "7df25960bba4ded00bc15eb432762c4da45a3c7c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7df25960bba4ded00bc15eb432762c4da45a3c7c", "message": "Update instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-21T21:36:51Z", "type": "commit"}, {"oid": "c7884a6f39b047261ab26b25f381a9bee1b26f9c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c7884a6f39b047261ab26b25f381a9bee1b26f9c", "message": "Update instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-21T21:37:00Z", "type": "commit"}, {"oid": "f799b7f719916d951d3e254a52aab7185edacc04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f799b7f719916d951d3e254a52aab7185edacc04", "message": "remove atomic print writer counter\n\nrefactor tests", "committedDate": "2020-07-21T22:25:30Z", "type": "forcePushed"}, {"oid": "ad2589938f10650c91b9f9cd319890cc30fc583a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad2589938f10650c91b9f9cd319890cc30fc583a", "message": "remove atomic print writer counter\n\nrefactor tests", "committedDate": "2020-07-21T22:56:02Z", "type": "commit"}, {"oid": "ad2589938f10650c91b9f9cd319890cc30fc583a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad2589938f10650c91b9f9cd319890cc30fc583a", "message": "remove atomic print writer counter\n\nrefactor tests", "committedDate": "2020-07-21T22:56:02Z", "type": "forcePushed"}, {"oid": "d44057872142b37b016f19c0118455d894640849", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d44057872142b37b016f19c0118455d894640849", "message": "Merge remote-tracking branch 'upstream/master' into frankspitulski", "committedDate": "2020-07-22T02:31:06Z", "type": "commit"}]}