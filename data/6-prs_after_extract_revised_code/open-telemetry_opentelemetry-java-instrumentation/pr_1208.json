{"pr_number": 1208, "pr_title": "Logback MDC auto-instrumentation gets muzzled and does not work", "pr_createdAt": "2020-09-15T17:37:02Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg0ODY4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r488848680", "bodyText": "I'll replace \"traceId\" and others either here or in #1200 - depending on which one gets merged first.", "author": "mateuszrzeszutek", "createdAt": "2020-09-15T17:38:02Z", "path": "instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.logback.v1_0_0;\n+\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner.Typing;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class LoggingEventInstrumentation extends Instrumenter.Default {\n+  public LoggingEventInstrumentation() {\n+    super(\"logback\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap\",\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap$ConcatenatedSet\",\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap$ConcatenatedSet$ConcatenatedSetIterator\"\n+    };\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"ch.qos.logback.classic.spi.ILoggingEvent\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"ch.qos.logback.classic.spi.ILoggingEvent\", Span.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"getMDCPropertyMap\").or(named(\"getMdc\")))\n+            .and(takesArguments(0)),\n+        LoggingEventInstrumentation.class.getName() + \"$GetMdcAdvice\");\n+  }\n+\n+  public static class GetMdcAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(\n+        @Advice.This ILoggingEvent event,\n+        @Advice.Return(typing = Typing.DYNAMIC, readOnly = false) Map<String, String> contextData) {\n+      if (contextData != null && contextData.containsKey(\"traceId\")) {", "originalCommit": "ae73a1b81b32b102d0d1e43e17fd3b45b0716255", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70f37c7a95cfed228f86e601700bc3a35c17f851", "chunk": "diff --git a/instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java b/instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java\nindex 7aed12e409..fc96f574a8 100644\n--- a/instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java\n+++ b/instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java\n\n@@ -84,7 +84,7 @@ public class LoggingEventInstrumentation extends Instrumenter.Default {\n       }\n \n       Span currentSpan = InstrumentationContext.get(ILoggingEvent.class, Span.class).get(event);\n-      if (currentSpan != null && !currentSpan.getContext().isValid()) {\n+      if (currentSpan == null || !currentSpan.getContext().isValid()) {\n         return;\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMDk5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r489130997", "bodyText": "I think this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (currentSpan != null && !currentSpan.getContext().isValid()) {\n          \n          \n            \n                  if (currentSpan == null || !currentSpan.getContext().isValid()) {", "author": "trask", "createdAt": "2020-09-16T02:55:12Z", "path": "instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.logback.v1_0_0;\n+\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner.Typing;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class LoggingEventInstrumentation extends Instrumenter.Default {\n+  public LoggingEventInstrumentation() {\n+    super(\"logback\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap\",\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap$ConcatenatedSet\",\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap$ConcatenatedSet$ConcatenatedSetIterator\"\n+    };\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"ch.qos.logback.classic.spi.ILoggingEvent\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"ch.qos.logback.classic.spi.ILoggingEvent\", Span.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"getMDCPropertyMap\").or(named(\"getMdc\")))\n+            .and(takesArguments(0)),\n+        LoggingEventInstrumentation.class.getName() + \"$GetMdcAdvice\");\n+  }\n+\n+  public static class GetMdcAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(\n+        @Advice.This ILoggingEvent event,\n+        @Advice.Return(typing = Typing.DYNAMIC, readOnly = false) Map<String, String> contextData) {\n+      if (contextData != null && contextData.containsKey(\"traceId\")) {\n+        // Assume already instrumented event if traceId is present.\n+        return;\n+      }\n+\n+      Span currentSpan = InstrumentationContext.get(ILoggingEvent.class, Span.class).get(event);\n+      if (currentSpan != null && !currentSpan.getContext().isValid()) {", "originalCommit": "ae73a1b81b32b102d0d1e43e17fd3b45b0716255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1MTg3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r489251878", "bodyText": "\ud83e\udd26  - that's correct, that was a stupid mistake on my side.", "author": "mateuszrzeszutek", "createdAt": "2020-09-16T08:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMDk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "70f37c7a95cfed228f86e601700bc3a35c17f851", "chunk": "diff --git a/instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java b/instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java\nindex 7aed12e409..fc96f574a8 100644\n--- a/instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java\n+++ b/instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java\n\n@@ -84,7 +84,7 @@ public class LoggingEventInstrumentation extends Instrumenter.Default {\n       }\n \n       Span currentSpan = InstrumentationContext.get(ILoggingEvent.class, Span.class).get(event);\n-      if (currentSpan != null && !currentSpan.getContext().isValid()) {\n+      if (currentSpan == null || !currentSpan.getContext().isValid()) {\n         return;\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODQ5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r489158491", "bodyText": "Can you move this into a subpackage internal? We shouldn't add this to our public API", "author": "anuraaga", "createdAt": "2020-09-16T04:45:16Z", "path": "instrumentation/logback/logback-1.0.0/library/src/main/java/io/opentelemetry/instrumentation/logback/v1_0_0/UnionMap.java", "diffHunk": "@@ -29,14 +29,14 @@\n  * An immutable view over two maps, with keys resolving from the first map first, or otherwise the\n  * second if not present in the first.\n  */\n-final class UnionMap<K, V> extends AbstractMap<K, V> {\n+public final class UnionMap<K, V> extends AbstractMap<K, V> {", "originalCommit": "ae73a1b81b32b102d0d1e43e17fd3b45b0716255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NDQ1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r489254450", "bodyText": "Done, thanks!", "author": "mateuszrzeszutek", "createdAt": "2020-09-16T08:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODQ5MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "573b2eb56921c53191faa550af511f72db7ed48b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/573b2eb56921c53191faa550af511f72db7ed48b", "message": "Logback MDC auto-instrumentation gets muzzled and does not work", "committedDate": "2020-09-16T08:23:00Z", "type": "commit"}, {"oid": "70f37c7a95cfed228f86e601700bc3a35c17f851", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/70f37c7a95cfed228f86e601700bc3a35c17f851", "message": "Update instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-09-16T08:23:00Z", "type": "commit"}, {"oid": "3e560f62432a1c977d73f395d5ba306b48cc1446", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3e560f62432a1c977d73f395d5ba306b48cc1446", "message": "Logback MDC auto-instrumentation gets muzzled and does not work\n\nMoved UnionMap to internal package", "committedDate": "2020-09-16T08:23:00Z", "type": "commit"}, {"oid": "3e560f62432a1c977d73f395d5ba306b48cc1446", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3e560f62432a1c977d73f395d5ba306b48cc1446", "message": "Logback MDC auto-instrumentation gets muzzled and does not work\n\nMoved UnionMap to internal package", "committedDate": "2020-09-16T08:23:00Z", "type": "forcePushed"}]}