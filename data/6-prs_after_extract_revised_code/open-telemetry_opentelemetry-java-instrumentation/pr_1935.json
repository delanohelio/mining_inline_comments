{"pr_number": 1935, "pr_title": "end to end latency benchmark", "pr_createdAt": "2020-12-18T04:07:44Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935", "timeline": [{"oid": "5503986fb91ecab64ab6308a741cc697e2429aaf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5503986fb91ecab64ab6308a741cc697e2429aaf", "message": "end to end latency benchmark", "committedDate": "2020-12-18T04:06:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2MzQyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r545563420", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static String app = System.getenv(\"APP_IMAGE\");\n          \n          \n            \n              private static final String APP_NAME = System.getenv(\"APP_IMAGE\", \"ghcr.io/open-telemetry/java-test-containers:smoke-springboot-jdk8-20201204.400701583\");", "author": "anuraaga", "createdAt": "2020-12-18T04:19:01Z", "path": "benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.e2ebenchmark;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n+\n+public class E2EAgentBenchmark {\n+  private static String app = System.getenv(\"APP_IMAGE\");", "originalCommit": "5503986fb91ecab64ab6308a741cc697e2429aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NzE4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r545567187", "bodyText": "Sorry I did not understand this suggestion. System.gentenv() accepts 1 String param right?", "author": "bhautikpip", "createdAt": "2020-12-18T04:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2MzQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NzM0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r545567343", "bodyText": "Oops - sorry System.getenv().getOrDefault", "author": "anuraaga", "createdAt": "2020-12-18T04:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2MzQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "604077460f453c29d56f664ac738d7aa36bfdacd", "chunk": "diff --git a/benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java b/benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java\nindex f5df2634dd..0333c45085 100644\n--- a/benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java\n+++ b/benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java\n\n@@ -25,13 +25,13 @@ import org.testcontainers.utility.DockerImageName;\n import org.testcontainers.utility.MountableFile;\n \n public class E2EAgentBenchmark {\n-  private static String app = System.getenv(\"APP_IMAGE\");\n+  private static String APP_NAME = System.getenv().getOrDefault(\"APP_IMAGE\", \"ghcr.io/open-telemetry/java-test-containers:smoke-springboot-jdk8-20201204.400701583\");\n \n   private List<GenericContainer<?>> containers;\n   private static final Logger LOG = LoggerFactory.getLogger(E2EAgentBenchmark.class);\n \n   // docker images\n-  private static final DockerImageName APP_IMAGE = DockerImageName.parse(app);\n+  private static final DockerImageName APP_IMAGE = DockerImageName.parse(APP_NAME);\n   private static final DockerImageName OTLP_COLLECTOR_IMAGE =\n       DockerImageName.parse(\"otel/opentelemetry-collector-dev:latest\");\n   private static final DockerImageName WRK_IMAGE = DockerImageName.parse(\"quay.io/dim/wrk:stable\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2MzU1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r545563558", "bodyText": "Can remove these lines with above suggestion", "author": "anuraaga", "createdAt": "2020-12-18T04:19:26Z", "path": "benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.e2ebenchmark;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n+\n+public class E2EAgentBenchmark {\n+  private static String app = System.getenv(\"APP_IMAGE\");\n+\n+  private List<GenericContainer<?>> containers;\n+  private static final Logger LOG = LoggerFactory.getLogger(E2EAgentBenchmark.class);\n+\n+  // docker images\n+  private static final DockerImageName APP_IMAGE = DockerImageName.parse(app);\n+  private static final DockerImageName OTLP_COLLECTOR_IMAGE =\n+      DockerImageName.parse(\"otel/opentelemetry-collector-dev:latest\");\n+  private static final DockerImageName WRK_IMAGE = DockerImageName.parse(\"quay.io/dim/wrk:stable\");\n+\n+  @BeforeEach\n+  void setUp() {\n+    containers = new ArrayList<>();\n+  }\n+\n+  @AfterEach\n+  void tearDown() {\n+    containers.forEach(GenericContainer::stop);\n+  }\n+\n+  @Test\n+  void run() throws Exception {\n+    runBenchmark();\n+  }\n+\n+  private void runBenchmark() throws Exception {\n+    if (app == null || app.equals(\"\")) {", "originalCommit": "5503986fb91ecab64ab6308a741cc697e2429aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "604077460f453c29d56f664ac738d7aa36bfdacd", "chunk": "diff --git a/benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java b/benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java\nindex f5df2634dd..0333c45085 100644\n--- a/benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java\n+++ b/benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java\n\n@@ -25,13 +25,13 @@ import org.testcontainers.utility.DockerImageName;\n import org.testcontainers.utility.MountableFile;\n \n public class E2EAgentBenchmark {\n-  private static String app = System.getenv(\"APP_IMAGE\");\n+  private static String APP_NAME = System.getenv().getOrDefault(\"APP_IMAGE\", \"ghcr.io/open-telemetry/java-test-containers:smoke-springboot-jdk8-20201204.400701583\");\n \n   private List<GenericContainer<?>> containers;\n   private static final Logger LOG = LoggerFactory.getLogger(E2EAgentBenchmark.class);\n \n   // docker images\n-  private static final DockerImageName APP_IMAGE = DockerImageName.parse(app);\n+  private static final DockerImageName APP_IMAGE = DockerImageName.parse(APP_NAME);\n   private static final DockerImageName OTLP_COLLECTOR_IMAGE =\n       DockerImageName.parse(\"otel/opentelemetry-collector-dev:latest\");\n   private static final DockerImageName WRK_IMAGE = DockerImageName.parse(\"quay.io/dim/wrk:stable\");\n"}}, {"oid": "604077460f453c29d56f664ac738d7aa36bfdacd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/604077460f453c29d56f664ac738d7aa36bfdacd", "message": "minor changes", "committedDate": "2020-12-18T04:44:53Z", "type": "commit"}, {"oid": "0bf38b8ddcc53141ca4601e9d2c550138c4624bd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0bf38b8ddcc53141ca4601e9d2c550138c4624bd", "message": "added final", "committedDate": "2020-12-18T04:45:56Z", "type": "commit"}, {"oid": "1042e4d225a91105076af5a5cd3e063bdcd46215", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1042e4d225a91105076af5a5cd3e063bdcd46215", "message": "fix spotless check", "committedDate": "2020-12-18T05:17:03Z", "type": "commit"}]}