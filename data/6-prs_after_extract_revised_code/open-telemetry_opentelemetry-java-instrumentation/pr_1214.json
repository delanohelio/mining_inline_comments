{"pr_number": 1214, "pr_title": "Review semantic convention for Http Client spans", "pr_createdAt": "2020-09-17T11:37:43Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214", "timeline": [{"oid": "e2f1e5ae23137d42a78f4cef15f1c10604d84840", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e2f1e5ae23137d42a78f4cef15f1c10604d84840", "message": "Review semantic convention for Http Client spans", "committedDate": "2020-09-17T11:37:17Z", "type": "commit"}, {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5b6d6577343eee77a7695ab1344549151f40da3e", "message": "Polish", "committedDate": "2020-09-17T12:36:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzYzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490687636", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-09-18T03:55:36Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -93,13 +90,8 @@\n \n   private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n \n-  private static final boolean DEFAULT_HTTP_SERVER_TAG_QUERY_STRING = false;\n-  private static final boolean DEFAULT_HTTP_CLIENT_TAG_QUERY_STRING = false;\n   private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n \n-  public static final boolean DEFAULT_LOG_INJECTION_ENABLED = false;\n-  public static final String DEFAULT_EXPERIMENTAL_LOG_CAPTURE_THRESHOLD = null;", "originalCommit": "5b6d6577343eee77a7695ab1344549151f40da3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzczNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490687736", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-09-18T03:56:04Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -76,8 +75,6 @@\n   public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n   public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n   public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String HTTP_SERVER_TAG_QUERY_STRING = \"http.server.tag.query-string\";\n-  public static final String HTTP_CLIENT_TAG_QUERY_STRING = \"http.client.tag.query-string\";", "originalCommit": "5b6d6577343eee77a7695ab1344549151f40da3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MzgxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490693819", "bodyText": "interesting, makes sense for a negotiated connection, where we don't know flavor ahead of time", "author": "trask", "createdAt": "2020-09-18T04:22:02Z", "path": "instrumentation/java-httpclient/src/main/java/io/opentelemetry/instrumentation/auto/httpclient/JdkHttpClientTracer.java", "diffHunk": "@@ -66,10 +70,22 @@ protected String requestHeader(HttpRequest httpRequest, String name) {\n   }\n \n   @Override\n-  protected String responseHeader(HttpResponse httpResponse, String name) {\n+  protected String responseHeader(HttpResponse<?> httpResponse, String name) {\n     return httpResponse.headers().firstValue(name).orElse(null);\n   }\n \n+  @Override\n+  protected Span onResponse(Span span, HttpResponse<?> httpResponse) {\n+    span = super.onResponse(span, httpResponse);\n+\n+    if (httpResponse != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(\n+          span, httpResponse.version() == Version.HTTP_1_1 ? \"1.1\" : \"2.0\");", "originalCommit": "5b6d6577343eee77a7695ab1344549151f40da3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490696226", "bodyText": "I like this placement (type annotation) \ud83d\udc4d", "author": "trask", "createdAt": "2020-09-18T04:33:05Z", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/instrumentation/auto/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -46,6 +47,11 @@ protected String method(HttpRequest request) {\n     }\n   }\n \n+  @Override\n+  protected @Nullable String flavor(HttpRequest httpRequest) {", "originalCommit": "5b6d6577343eee77a7695ab1344549151f40da3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwNDQ5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490704494", "bodyText": "I don't :) It is IDEA's doing, so I have to accept :(", "author": "iNikem", "createdAt": "2020-09-18T05:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxODA3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490718076", "bodyText": "Reformat code puts the annotation there? I haven't seen that before. I agree with @iNikem that for normal methods, annotation above looks a bit better mostly due to how annotations end up getting colored in IDE GitHub etc. @iNikem Is it not worth manually fixing these?", "author": "anuraaga", "createdAt": "2020-09-18T05:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxOTY2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490719668", "bodyText": "Not reformat but \"implement missing method\", I think.\nI don't want to fix this manually every time IDEA generates code for me. I can do it here, but it will not be sustainable", "author": "iNikem", "createdAt": "2020-09-18T06:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MzUzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r491173537", "bodyText": "ya, i like type annotations, but they are not common. i'm very surprised Intellij does the \"right thing\" \ud83d\ude09", "author": "trask", "createdAt": "2020-09-18T20:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a424f0837e52553629a4a7f3b70d2c506e3b2310", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a424f0837e52553629a4a7f3b70d2c506e3b2310", "message": "Update instrumentation/google-http-client-1.19/src/test/groovy/AbstractGoogleHttpClientTest.groovy\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-09-18T07:42:47Z", "type": "commit"}, {"oid": "f3475193346be56c1695e5178cacab16dc843494", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f3475193346be56c1695e5178cacab16dc843494", "message": "Merge from main", "committedDate": "2020-09-18T12:17:34Z", "type": "commit"}, {"oid": "20c0053004a9d859bef32ba833ae6f3b354a05e7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/20c0053004a9d859bef32ba833ae6f3b354a05e7", "message": "Merge remote-tracking branch 'origin/http-client-convention' into http-client-convention", "committedDate": "2020-09-18T12:31:37Z", "type": "commit"}]}