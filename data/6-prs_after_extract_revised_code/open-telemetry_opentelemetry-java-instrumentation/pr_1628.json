{"pr_number": 1628, "pr_title": "Autoinstrumentation for Struts2 actions", "pr_createdAt": "2020-11-13T09:59:45Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628", "timeline": [{"oid": "222c77d973e6732f7b8d695290ba98e0fd44093d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/222c77d973e6732f7b8d695290ba98e0fd44093d", "message": "Struts PoC", "committedDate": "2020-11-09T07:29:55Z", "type": "commit"}, {"oid": "148d25c1455a854df3dcb0105dfd9f647deaac0b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/148d25c1455a854df3dcb0105dfd9f647deaac0b", "message": "Instrument ActionInvocation to get correct timings. Refactor to use latest o11y SDK and API.", "committedDate": "2020-11-09T13:47:18Z", "type": "commit"}, {"oid": "545968f91b3666866af523ab158c8ee51bddaac4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/545968f91b3666866af523ab158c8ee51bddaac4", "message": "Fix license header.", "committedDate": "2020-11-09T14:06:50Z", "type": "commit"}, {"oid": "b0a1d0f4a2c8c9d8d5c3a1bb3251eddb2bf9dc6e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b0a1d0f4a2c8c9d8d5c3a1bb3251eddb2bf9dc6e", "message": "Revert accidental Gradle configuration change.", "committedDate": "2020-11-09T16:34:23Z", "type": "commit"}, {"oid": "691ca980a22e18a72f2a957c071087191089c120", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/691ca980a22e18a72f2a957c071087191089c120", "message": "First passing test for struts instrumentation.", "committedDate": "2020-11-10T11:35:42Z", "type": "commit"}, {"oid": "5925bdd73a39e2e38f630550d7dab2540839efe4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5925bdd73a39e2e38f630550d7dab2540839efe4", "message": "Cleanup", "committedDate": "2020-11-10T13:11:21Z", "type": "commit"}, {"oid": "be529d7316bc01808df783846eec2c67df4025ec", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/be529d7316bc01808df783846eec2c67df4025ec", "message": "Convert Struts test to HttpServerTest.", "committedDate": "2020-11-11T10:56:08Z", "type": "commit"}, {"oid": "08ffc22ef54d9ec2e2186590acb9571a9fa6c361", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/08ffc22ef54d9ec2e2186590acb9571a9fa6c361", "message": "Fix Spotless formatting issues.", "committedDate": "2020-11-11T13:32:47Z", "type": "commit"}, {"oid": "9bcdfa69cc926edd6e05c2d2fbc380bc8b7c29b8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9bcdfa69cc926edd6e05c2d2fbc380bc8b7c29b8", "message": "Manage scope properly in Struts advice. Use existing handlerSpan method to assert struts handler span detection. Make Struts controller behave similarly with other HttpServerTest implementations.", "committedDate": "2020-11-11T19:14:00Z", "type": "commit"}, {"oid": "d7ba2ad1c4057b8d7d269b8594406f814fc8842a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d7ba2ad1c4057b8d7d269b8594406f814fc8842a", "message": "Rename method.", "committedDate": "2020-11-11T19:21:13Z", "type": "commit"}, {"oid": "84b41daf36846d1185591ed99a1ae519cbf32a10", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84b41daf36846d1185591ed99a1ae519cbf32a10", "message": "Update server span name when path params are used.", "committedDate": "2020-11-13T08:30:19Z", "type": "commit"}, {"oid": "7f87c66efddcf6acd897ee678791aa84f5f49356", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7f87c66efddcf6acd897ee678791aa84f5f49356", "message": "Struts PoC", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "70fed543175562a882bbbfc18174847f431089cb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/70fed543175562a882bbbfc18174847f431089cb", "message": "Instrument ActionInvocation to get correct timings. Refactor to use latest o11y SDK and API.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "908189069b16ed4f38dc237f38b3f1e594d01f87", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/908189069b16ed4f38dc237f38b3f1e594d01f87", "message": "Fix license header.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "35751553fc705f9060ddc2908e5b328eb8198454", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/35751553fc705f9060ddc2908e5b328eb8198454", "message": "Revert accidental Gradle configuration change.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "d7c0b0fb9b8d0676672d266040738e4329f18421", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d7c0b0fb9b8d0676672d266040738e4329f18421", "message": "First passing test for struts instrumentation.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "e270752d7ccbdd29be80cf35f2385f472ab701b1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e270752d7ccbdd29be80cf35f2385f472ab701b1", "message": "Cleanup", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "e888d3a8b26880ad33cd7a4007823e343b6fc4c2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e888d3a8b26880ad33cd7a4007823e343b6fc4c2", "message": "Convert Struts test to HttpServerTest.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "5fae45d5e1a49b3c686ca1949b323a3442feff00", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5fae45d5e1a49b3c686ca1949b323a3442feff00", "message": "Fix Spotless formatting issues.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "3f209ddcad9b0c0bc10292e57afa3ce6fd234bdd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3f209ddcad9b0c0bc10292e57afa3ce6fd234bdd", "message": "Manage scope properly in Struts advice. Use existing handlerSpan method to assert struts handler span detection. Make Struts controller behave similarly with other HttpServerTest implementations.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "2f9392e59aa5aa21f0bea0293c0fdffd4703a55d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2f9392e59aa5aa21f0bea0293c0fdffd4703a55d", "message": "Rename method.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "de3d859350922774614b3ba7329e4c22d414de37", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/de3d859350922774614b3ba7329e4c22d414de37", "message": "Update server span name when path params are used.", "committedDate": "2020-11-13T08:33:24Z", "type": "commit"}, {"oid": "ad0abfad7b43c80c0ebf518cd5bd600339d9b67e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad0abfad7b43c80c0ebf518cd5bd600339d9b67e", "message": "Merge remote-tracking branch 'origin/struts' into struts", "committedDate": "2020-11-13T08:33:37Z", "type": "commit"}, {"oid": "8ca891a41f3cf5cfe90defdae2db10d04f73dddf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ca891a41f3cf5cfe90defdae2db10d04f73dddf", "message": "Account for GStrings in asserted values.", "committedDate": "2020-11-13T11:38:29Z", "type": "commit"}, {"oid": "9342e7180444cab1b31d4dd543c7775ea414e1cb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9342e7180444cab1b31d4dd543c7775ea414e1cb", "message": "Use Groovy friendly Assert.", "committedDate": "2020-11-13T13:19:54Z", "type": "commit"}, {"oid": "351a3467d9f5c3e8033c82fb2001d060fa6c0ebe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/351a3467d9f5c3e8033c82fb2001d060fa6c0ebe", "message": "Giving up on getting to work user-friendly assertion messages. Moving controller to a package, as ognl inside struts can't handle classes with no packagaes.", "committedDate": "2020-11-13T14:30:47Z", "type": "commit"}, {"oid": "09576c457199438fd466923774682631adf488bb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/09576c457199438fd466923774682631adf488bb", "message": "Make codeNarc happy.", "committedDate": "2020-11-13T19:11:34Z", "type": "commit"}, {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ef6377ab3566382358abd292b2df990be7ec1c95", "message": "Make spotless happy.", "committedDate": "2020-11-13T19:54:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NDY0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523244642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.auto.struts-2\";\n          \n          \n            \n                return \"io.opentelemetry.auto.struts-2.0\";", "author": "trask", "createdAt": "2020-11-13T21:35:12Z", "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);\n+    }\n+\n+    return strutsSpan;\n+  }\n+\n+  // Handle cases where action parameters are encoded into URL path\n+  public void updateServerSpanName(Context context, ActionProxy actionProxy) {\n+    Span serverSpan = getCurrentServerSpan();\n+    if (serverSpan == null) {\n+      return;\n+    }\n+\n+    // We take name from the config, because it contains the path pattern from the\n+    // configuration.\n+    String result = actionProxy.getConfig().getName();\n+\n+    String actionNamespace = actionProxy.getNamespace();\n+    if (actionNamespace != null && !actionNamespace.isEmpty()) {\n+      if (actionNamespace.endsWith(\"/\") || result.startsWith(\"/\")) {\n+        result = actionNamespace + result;\n+      } else {\n+        result = actionNamespace + \"/\" + result;\n+      }\n+    }\n+\n+    if (!result.startsWith(\"/\")) {\n+      result = \"/\" + result;\n+    }\n+\n+    if (!result.contains(\"{\")) {\n+      // If there are no braces, then there are no path parameters encoded in\n+      // the action name, so let's not change existing server span name, because\n+      // path is good enough. Wildcards like * in action name may glue\n+      // several endpoints into one action name, which we do not want -- we want\n+      // normalize parameters, not actions.\n+      return;\n+    }\n+\n+    getCurrentServerSpan().updateName(ServletContextPath.prepend(context, result));\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.struts-2\";", "originalCommit": "ef6377ab3566382358abd292b2df990be7ec1c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMTU0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523401540", "bodyText": "Renamed struts-2 to struts-2.3 everywhere.", "author": "vovencij", "createdAt": "2020-11-14T09:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NDY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0e223627a549a794e6633525c1bff3ba705d0c69", "chunk": "diff --git a/instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\nsimilarity index 98%\nrename from instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\nrename to instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\nindex 1ca3f783f4..6f434e128c 100644\n--- a/instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\n+++ b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\n\n@@ -71,6 +71,6 @@ public class Struts2Tracer extends BaseTracer {\n \n   @Override\n   protected String getInstrumentationName() {\n-    return \"io.opentelemetry.auto.struts-2\";\n+    return \"io.opentelemetry.auto.struts-2.3\";\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523246765", "bodyText": "can you submit a PR to opentelemetry-java to add these to SemanticAttributes?", "author": "trask", "createdAt": "2020-11-13T21:40:38Z", "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "originalCommit": "ef6377ab3566382358abd292b2df990be7ec1c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMjgzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523402839", "bodyText": "Will do.", "author": "vovencij", "createdAt": "2020-11-14T10:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQxMTMyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523411326", "bodyText": "Do I understand correctly, that to update SemanticAttributes.java I have to update https://github.com/open-telemetry/opentelemetry-specification/blob/master/semantic_conventions/trace/general.yaml from which SemanticAttributes.java s eventually generated?", "author": "vovencij", "createdAt": "2020-11-14T11:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ1MDQ0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523450449", "bodyText": "oh yes, good find, I believe that's the correct spot", "author": "trask", "createdAt": "2020-11-14T18:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NDc4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r525084785", "bodyText": "open-telemetry/opentelemetry-specification#1229", "author": "vovencij", "createdAt": "2020-11-17T11:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3OTg2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r525379866", "bodyText": "@trask are you Ok with merging this PR before we have spec updated, right?", "author": "iNikem", "createdAt": "2020-11-17T18:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4ODY4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r525388680", "bodyText": "yes \ud83d\udc4d", "author": "trask", "createdAt": "2020-11-17T18:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e223627a549a794e6633525c1bff3ba705d0c69", "chunk": "diff --git a/instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\nsimilarity index 98%\nrename from instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\nrename to instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\nindex 1ca3f783f4..6f434e128c 100644\n--- a/instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\n+++ b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\n\n@@ -71,6 +71,6 @@ public class Struts2Tracer extends BaseTracer {\n \n   @Override\n   protected String getInstrumentationName() {\n-    return \"io.opentelemetry.auto.struts-2\";\n+    return \"io.opentelemetry.auto.struts-2.3\";\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODYyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523248629", "bodyText": "based on recent discussion in #1579\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"struts-2\");\n          \n          \n            \n                super(\"struts\", \"struts-2.0\");", "author": "trask", "createdAt": "2020-11-13T21:45:17Z", "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static java.util.Collections.singletonList;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+\n+@AutoService(InstrumentationModule.class)\n+public class Struts2InstrumentationModule extends InstrumentationModule {\n+\n+  public Struts2InstrumentationModule() {\n+    super(\"struts-2\");", "originalCommit": "ef6377ab3566382358abd292b2df990be7ec1c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMTU4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523401582", "bodyText": "Renamed struts-2 to struts-2.3 everywhere.", "author": "vovencij", "createdAt": "2020-11-14T10:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e223627a549a794e6633525c1bff3ba705d0c69", "chunk": "diff --git a/instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java\nsimilarity index 95%\nrename from instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java\nrename to instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java\nindex e3b9369970..ae5c90b176 100644\n--- a/instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java\n+++ b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java\n\n@@ -16,7 +16,7 @@ import java.util.List;\n public class Struts2InstrumentationModule extends InstrumentationModule {\n \n   public Struts2InstrumentationModule() {\n-    super(\"struts-2\");\n+    super(\"struts\", \"struts-2.3\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDg2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523380862", "bodyText": "It looks like struts has the concept of interceptors\nhttps://struts.apache.org/core-developers/interceptors.html\nIs it possible to define an interceptor and register it, instead of instrumenting the action invocation directly? While it wouldn't need to be in this PR, it would make it much easier to separate out library, nonagent instrumentation.", "author": "anuraaga", "createdAt": "2020-11-14T05:46:41Z", "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ActionInvocationAdvice {", "originalCommit": "ef6377ab3566382358abd292b2df990be7ec1c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMTc1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523401751", "bodyText": "Yes, interceptors definitely can be used for a library. Moved current instrumentation to javaagent sub-project to accommodate for the library version. Which I will do as a separate PR.", "author": "vovencij", "createdAt": "2020-11-14T10:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ae07c3e2caf216ea3992a1f4d2f70216f3005ee", "chunk": "diff --git a/instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java\nsimilarity index 78%\nrename from instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java\nrename to instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java\nindex c433e7234d..99f339fde1 100644\n--- a/instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java\n+++ b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java\n\n@@ -5,7 +5,7 @@\n \n package io.opentelemetry.javaagent.instrumentation.struts2;\n \n-import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.tracer;\n \n import com.opensymphony.xwork2.ActionInvocation;\n import io.opentelemetry.api.trace.Span;\n"}}, {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e223627a549a794e6633525c1bff3ba705d0c69", "message": "Rename struts-2 to struts-2.3. Move autoinstrumentation to javaagent sub-folder to accommodate for library.", "committedDate": "2020-11-14T09:58:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2OTgzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524069839", "bodyText": "We have recently switched to using tracer()", "author": "iNikem", "createdAt": "2020-11-16T10:11:32Z", "path": "instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ActionInvocationAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This ActionInvocation actionInvocation,\n+      @Advice.Local(\"otelSpan\") Span span,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    span = TRACER.startSpan(actionInvocation);\n+    scope = TRACER.startScope(span);\n+\n+    TRACER.updateServerSpanName(Java8BytecodeBridge.currentContext(), actionInvocation.getProxy());", "originalCommit": "0e223627a549a794e6633525c1bff3ba705d0c69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ae07c3e2caf216ea3992a1f4d2f70216f3005ee", "chunk": "diff --git a/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java\nindex c433e7234d..99f339fde1 100644\n--- a/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java\n+++ b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java\n\n@@ -5,7 +5,7 @@\n \n package io.opentelemetry.javaagent.instrumentation.struts2;\n \n-import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.tracer;\n \n import com.opensymphony.xwork2.ActionInvocation;\n import io.opentelemetry.api.trace.Span;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MTcxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524071716", "bodyText": "You already have this as serverSpan local variable.", "author": "iNikem", "createdAt": "2020-11-16T10:13:15Z", "path": "instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);\n+    }\n+\n+    return strutsSpan;\n+  }\n+\n+  // Handle cases where action parameters are encoded into URL path\n+  public void updateServerSpanName(Context context, ActionProxy actionProxy) {\n+    Span serverSpan = getCurrentServerSpan();\n+    if (serverSpan == null) {\n+      return;\n+    }\n+\n+    // We take name from the config, because it contains the path pattern from the\n+    // configuration.\n+    String result = actionProxy.getConfig().getName();\n+\n+    String actionNamespace = actionProxy.getNamespace();\n+    if (actionNamespace != null && !actionNamespace.isEmpty()) {\n+      if (actionNamespace.endsWith(\"/\") || result.startsWith(\"/\")) {\n+        result = actionNamespace + result;\n+      } else {\n+        result = actionNamespace + \"/\" + result;\n+      }\n+    }\n+\n+    if (!result.startsWith(\"/\")) {\n+      result = \"/\" + result;\n+    }\n+\n+    if (!result.contains(\"{\")) {\n+      // If there are no braces, then there are no path parameters encoded in\n+      // the action name, so let's not change existing server span name, because\n+      // path is good enough. Wildcards like * in action name may glue\n+      // several endpoints into one action name, which we do not want -- we want\n+      // normalize parameters, not actions.\n+      return;\n+    }\n+\n+    getCurrentServerSpan().updateName(ServletContextPath.prepend(context, result));", "originalCommit": "0e223627a549a794e6633525c1bff3ba705d0c69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ae07c3e2caf216ea3992a1f4d2f70216f3005ee", "chunk": "diff --git a/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\nindex 6f434e128c..563c95734a 100644\n--- a/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\n+++ b/instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java\n\n@@ -14,7 +14,11 @@ import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n \n public class Struts2Tracer extends BaseTracer {\n \n-  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+  private static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public static Struts2Tracer tracer() {\n+    return TRACER;\n+  }\n \n   public Span startSpan(ActionInvocation actionInvocation) {\n     Object action = actionInvocation.getAction();\n"}}, {"oid": "8ae07c3e2caf216ea3992a1f4d2f70216f3005ee", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ae07c3e2caf216ea3992a1f4d2f70216f3005ee", "message": "Use tracer() instead of TRACER and other minor tweaks.", "committedDate": "2020-11-17T08:58:32Z", "type": "commit"}, {"oid": "c8d74f0cffda169195904f9d5a2649c2c656b0f6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c8d74f0cffda169195904f9d5a2649c2c656b0f6", "message": "Nicer way for asserting values returned from a method call.", "committedDate": "2020-11-17T09:03:21Z", "type": "commit"}, {"oid": "ed95366fb14054f5c5fe433872dfcd26856cbef9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed95366fb14054f5c5fe433872dfcd26856cbef9", "message": "Fix formatting.", "committedDate": "2020-11-17T10:24:36Z", "type": "commit"}]}