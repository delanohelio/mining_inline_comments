{"pr_number": 1635, "pr_title": "Prepare a single test bootstrap jar at top level.", "pr_createdAt": "2020-11-14T08:02:17Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635", "timeline": [{"oid": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91520f75c4a0afa2bb0298a570c3e65a6f16f3e1", "message": "Prepare a single test bootstrap jar at top level.", "committedDate": "2020-11-14T07:47:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzY2MTIwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523661207", "bodyText": "what does this line do?\ntask.getInputs().property(\"testing-bootstrap-jar\", testingBootstrapJar);", "author": "trask", "createdAt": "2020-11-15T02:39:19Z", "path": "buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java", "diffHunk": "@@ -29,106 +21,20 @@\n // TODO(anuraaga): Migrate more build logic into this plugin to avoid having two places for it.\n public class AutoInstrumentationPlugin implements Plugin<Project> {\n \n-  /**\n-   * An exact copy of {@code\n-   * io.opentelemetry.javaagent.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}. We can't reference it\n-   * directly since this file needs to be compiled before the other packages.\n-   */\n-  public static final String[] BOOTSTRAP_PACKAGE_PREFIXES_COPY = {\n-    \"io.opentelemetry.javaagent.common.exec\",\n-    \"io.opentelemetry.javaagent.slf4j\",\n-    \"io.opentelemetry.javaagent.bootstrap\",\n-    \"io.opentelemetry.javaagent.shaded\",\n-    \"io.opentelemetry.javaagent.instrumentation.api\",\n-  };\n-\n-  // Aditional classes we need only for tests and aren't shared with the agent business logic.\n-  private static final String[] TEST_BOOTSTRAP_PREFIXES;\n-\n-  static {\n-    String[] testBS = {\n-      \"io.opentelemetry.instrumentation.api\",\n-      \"io.opentelemetry.api\", // OpenTelemetry API\n-      \"io.opentelemetry.context\", // OpenTelemetry API\n-      \"org.slf4j\",\n-      \"ch.qos.logback\",\n-      // Tomcat's servlet classes must be on boostrap\n-      // when running tomcat test\n-      \"javax.servlet.ServletContainerInitializer\",\n-      \"javax.servlet.ServletContext\"\n-    };\n-    TEST_BOOTSTRAP_PREFIXES =\n-        Arrays.copyOf(\n-            BOOTSTRAP_PACKAGE_PREFIXES_COPY,\n-            BOOTSTRAP_PACKAGE_PREFIXES_COPY.length + testBS.length);\n-    System.arraycopy(\n-        testBS, 0, TEST_BOOTSTRAP_PREFIXES, BOOTSTRAP_PACKAGE_PREFIXES_COPY.length, testBS.length);\n-    for (int i = 0; i < TEST_BOOTSTRAP_PREFIXES.length; i++) {\n-      TEST_BOOTSTRAP_PREFIXES[i] = TEST_BOOTSTRAP_PREFIXES[i].replace('.', '/');\n-    }\n-  }\n-\n   @Override\n   public void apply(Project project) {\n     project.getPlugins().apply(JavaLibraryPlugin.class);\n-\n     project\n         .getTasks()\n         .withType(\n             Test.class,\n             task -> {\n-              TaskProvider<Jar> bootstrapJar =\n-                  project.getTasks().register(task.getName() + \"BootstrapJar\", Jar.class);\n-\n-              Configuration testClasspath =\n-                  project.getConfigurations().findByName(task.getName() + \"RuntimeClasspath\");\n-              if (testClasspath == null) {\n-                // Same classpath as default test task\n-                testClasspath =\n-                    project\n-                        .getConfigurations()\n-                        .findByName(JavaPlugin.TEST_RUNTIME_CLASSPATH_CONFIGURATION_NAME);\n-              }\n-\n-              String bootstrapJarName = task.getName() + \"-bootstrap.jar\";\n-\n-              Configuration testClasspath0 = testClasspath;\n-              bootstrapJar.configure(\n-                  jar -> {\n-                    jar.dependsOn(testClasspath0.getBuildDependencies());\n-                    jar.getArchiveFileName().set(bootstrapJarName);\n-                    jar.setIncludeEmptyDirs(false);\n-                    // Classpath is ordered in priority, but later writes into the JAR would take\n-                    // priority, so we exclude the later ones (we need this to make sure logback is\n-                    // picked up).\n-                    jar.setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE);\n-                    jar.from(\n-                        project.files(\n-                            // Needs to be a Callable so it's executed lazily at runtime, instead of\n-                            // configuration time where the classpath may still be getting built up.\n-                            (Callable<?>)\n-                                () ->\n-                                    testClasspath0.resolve().stream()\n-                                        .filter(\n-                                            file ->\n-                                                !file.isDirectory()\n-                                                    && file.getName().endsWith(\".jar\"))\n-                                        .map(project::zipTree)\n-                                        .collect(toList())));\n-\n-                    jar.eachFile(\n-                        file -> {\n-                          if (!isBootstrapClass(file.getPath())) {\n-                            file.exclude();\n-                          }\n-                        });\n-                  });\n-\n-              task.dependsOn(bootstrapJar);\n-              task.getJvmArgumentProviders()\n-                  .add(\n-                      new InstrumentationTestArgs(\n-                          new File(project.getBuildDir(), \"libs/\" + bootstrapJarName)));\n+              task.dependsOn(\":testing-bootstrap:shadowJar\");\n+              File testingBootstrapJar =\n+                  new File(\n+                      project.getRootDir(), \"testing-bootstrap/build/libs/testing-bootstrap.jar\");\n+              task.getInputs().property(\"testing-bootstrap-jar\", testingBootstrapJar);", "originalCommit": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcxNTIxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523715210", "bodyText": "Good callout, added a comment", "author": "anuraaga", "createdAt": "2020-11-15T06:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzY2MTIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "8179d3103e301190b568baee01a3d44773669f81", "chunk": "diff --git a/buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java b/buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java\nindex e16796c014..33797cd1f9 100644\n--- a/buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java\n+++ b/buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java\n\n@@ -33,6 +33,7 @@ public class AutoInstrumentationPlugin implements Plugin<Project> {\n               File testingBootstrapJar =\n                   new File(\n                       project.getRootDir(), \"testing-bootstrap/build/libs/testing-bootstrap.jar\");\n+              // Make sure tests get rerun if the contents of the testing-bootstrap.jar change\n               task.getInputs().property(\"testing-bootstrap-jar\", testingBootstrapJar);\n               task.getJvmArgumentProviders().add(new InstrumentationTestArgs(testingBootstrapJar));\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwMzE3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523703175", "bodyText": "does this PR close this TODO?", "author": "trask", "createdAt": "2020-11-15T03:50:10Z", "path": "buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java", "diffHunk": "@@ -29,106 +21,20 @@\n // TODO(anuraaga): Migrate more build logic into this plugin to avoid having two places for it.", "originalCommit": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcxNTMxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523715316", "bodyText": "Don't think so - I previously used a Java plugin for this since it was complicated, and wanted to share the Constants.java list of classes here with copy-paste. Now I'll probably move this into the .gradle file in a followup since it's barely any code.", "author": "anuraaga", "createdAt": "2020-11-15T06:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwMzE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8179d3103e301190b568baee01a3d44773669f81", "chunk": "diff --git a/buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java b/buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java\nindex e16796c014..33797cd1f9 100644\n--- a/buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java\n+++ b/buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java\n\n@@ -33,6 +33,7 @@ public class AutoInstrumentationPlugin implements Plugin<Project> {\n               File testingBootstrapJar =\n                   new File(\n                       project.getRootDir(), \"testing-bootstrap/build/libs/testing-bootstrap.jar\");\n+              // Make sure tests get rerun if the contents of the testing-bootstrap.jar change\n               task.getInputs().property(\"testing-bootstrap-jar\", testingBootstrapJar);\n               task.getJvmArgumentProviders().add(new InstrumentationTestArgs(testingBootstrapJar));\n             });\n"}}, {"oid": "c719a5da073d42b3c9300c8884a1039b7f4e4c97", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c719a5da073d42b3c9300c8884a1039b7f4e4c97", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into single-test-bootstrap", "committedDate": "2020-11-15T06:23:36Z", "type": "commit"}, {"oid": "06cc41985972216166e8dfd4a32e1e042ac6b211", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/06cc41985972216166e8dfd4a32e1e042ac6b211", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-11-15T06:28:25Z", "type": "commit"}, {"oid": "bc356edd2009304a1b8b3d7e25a4afaa8d9c78e1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc356edd2009304a1b8b3d7e25a4afaa8d9c78e1", "message": "Merge branch 'single-test-bootstrap' of github.com:anuraaga/opentelemetry-java-instrumentation into single-test-bootstrap", "committedDate": "2020-11-15T06:28:35Z", "type": "commit"}, {"oid": "8179d3103e301190b568baee01a3d44773669f81", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8179d3103e301190b568baee01a3d44773669f81", "message": "Add comment", "committedDate": "2020-11-15T06:34:19Z", "type": "commit"}, {"oid": "2e52ccc9c9d0cbd0671fdc5e30918deefd64db4f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e52ccc9c9d0cbd0671fdc5e30918deefd64db4f", "message": "Use buildDir instead of build", "committedDate": "2020-11-15T08:18:45Z", "type": "commit"}, {"oid": "2e52ccc9c9d0cbd0671fdc5e30918deefd64db4f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e52ccc9c9d0cbd0671fdc5e30918deefd64db4f", "message": "Use buildDir instead of build", "committedDate": "2020-11-15T08:18:45Z", "type": "forcePushed"}, {"oid": "cdf4750399bd39f716e5c112ba83e926d57a5e89", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cdf4750399bd39f716e5c112ba83e926d57a5e89", "message": "Testing SDK also in bootstrap", "committedDate": "2020-11-15T09:52:16Z", "type": "commit"}, {"oid": "3427122c09812b4b05aa53462057e219cda0fa67", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3427122c09812b4b05aa53462057e219cda0fa67", "message": "Remove sdk from testing bootstrap loader", "committedDate": "2020-11-15T19:30:58Z", "type": "commit"}]}