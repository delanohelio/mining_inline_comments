{"pr_number": 503, "pr_title": "Vert.x instrumentation improvements", "pr_createdAt": "2020-06-12T09:55:29Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503", "timeline": [{"oid": "ac05caa00f59df5415e70bfbaf6e4fdcf6100495", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac05caa00f59df5415e70bfbaf6e4fdcf6100495", "message": "Support for Vert.x rx-java async tasks", "committedDate": "2020-06-11T11:56:07Z", "type": "commit"}, {"oid": "9f48b4dcbe0995a0faacaa290a5cf4e77f15e03b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f48b4dcbe0995a0faacaa290a5cf4e77f15e03b", "message": "Use Vert.x route for server span name", "committedDate": "2020-06-11T14:22:42Z", "type": "commit"}, {"oid": "8ce56421683ee6593efab69c43492bfb74c2e28c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ce56421683ee6593efab69c43492bfb74c2e28c", "message": "Move reactive Vert.x instrumentation into separate module", "committedDate": "2020-06-12T09:47:09Z", "type": "commit"}, {"oid": "8681c1c585c1236135e209cbd17e9da022dc8695", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8681c1c585c1236135e209cbd17e9da022dc8695", "message": "Merge remote-tracking branch 'upstream/master' into vertx", "committedDate": "2020-06-12T09:52:04Z", "type": "commit"}, {"oid": "9628685031d422f9d75efd82c9cc164458bd5990", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9628685031d422f9d75efd82c9cc164458bd5990", "message": "Test fixes", "committedDate": "2020-06-12T18:50:24Z", "type": "commit"}, {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "message": "Format fixes", "committedDate": "2020-06-12T19:25:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4ODMwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439688300", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-06-13T00:29:39Z", "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/** This is used to wrap Vert.x Handlers to provide nice user-friendly SERVER span names */\n+@Slf4j\n+public final class RoutingContextHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> handler;\n+\n+  public RoutingContextHandlerWrapper(final Handler<RoutingContext> handler) {\n+    this.handler = handler;\n+  }\n+\n+  @Override\n+  public void handle(RoutingContext context) {\n+    try {\n+      Span currentSpan = TRACER.getCurrentSpan();\n+      if (currentSpan.getContext().isValid()) {\n+        // TODO should update only SERVER span using\n+        // https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/465", "originalCommit": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzM1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697351", "bodyText": "for better or worse(?), instrumentation typically catches Throwable", "author": "trask", "createdAt": "2020-06-13T01:37:45Z", "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/** This is used to wrap Vert.x Handlers to provide nice user-friendly SERVER span names */\n+@Slf4j\n+public final class RoutingContextHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> handler;\n+\n+  public RoutingContextHandlerWrapper(final Handler<RoutingContext> handler) {\n+    this.handler = handler;\n+  }\n+\n+  @Override\n+  public void handle(RoutingContext context) {\n+    try {\n+      Span currentSpan = TRACER.getCurrentSpan();\n+      if (currentSpan.getContext().isValid()) {\n+        // TODO should update only SERVER span using\n+        // https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/465\n+        currentSpan.updateName(context.currentRoute().getPath());\n+      }\n+    } catch (Exception ex) {", "originalCommit": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMDE0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439730140", "bodyText": "I think for worse :)", "author": "iNikem", "createdAt": "2020-06-13T10:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzM1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzY2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697661", "bodyText": "i don't think there's a need to provide vert.x alias\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"vertx\", \"vert.x\");\n          \n          \n            \n                super(\"vertx\");", "author": "trask", "createdAt": "2020-06-13T01:41:47Z", "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RouteInstrumentation.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class RouteInstrumentation extends Instrumenter.Default {\n+\n+  public RouteInstrumentation() {\n+    super(\"vertx\", \"vert.x\");", "originalCommit": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b1bcd80e1b5911a65d30ecbc40b8e49241751aa", "chunk": "diff --git a/instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RouteInstrumentation.java b/instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RouteInstrumentation.java\nindex b11dafcbef..725e59f676 100644\n--- a/instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RouteInstrumentation.java\n+++ b/instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RouteInstrumentation.java\n\n@@ -38,7 +38,7 @@ import net.bytebuddy.matcher.ElementMatcher;\n public final class RouteInstrumentation extends Instrumenter.Default {\n \n   public RouteInstrumentation() {\n-    super(\"vertx\", \"vert.x\");\n+    super(\"vertx\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTAwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439701005", "bodyText": "i don't think there's a need to provide vert.x alias\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"vertx\", \"vert.x\");\n          \n          \n            \n                super(\"vertx\");", "author": "trask", "createdAt": "2020-06-13T02:24:44Z", "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/VertxRxInstrumentation.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx.reactive;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.reactive.VertxDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/** This instrumentation allows span context propagation across Vert.x reactive executions. */\n+@AutoService(Instrumenter.class)\n+public class VertxRxInstrumentation extends Instrumenter.Default {\n+\n+  public VertxRxInstrumentation() {\n+    super(\"vertx\", \"vert.x\");", "originalCommit": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b1bcd80e1b5911a65d30ecbc40b8e49241751aa", "chunk": "diff --git a/instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/VertxRxInstrumentation.java b/instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/VertxRxInstrumentation.java\nindex 1fe13e17c2..48fa4e5001 100644\n--- a/instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/VertxRxInstrumentation.java\n+++ b/instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/VertxRxInstrumentation.java\n\n@@ -38,7 +38,7 @@ import net.bytebuddy.matcher.ElementMatcher;\n public class VertxRxInstrumentation extends Instrumenter.Default {\n \n   public VertxRxInstrumentation() {\n-    super(\"vertx\", \"vert.x\");\n+    super(\"vertx\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTUxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439701517", "bodyText": "we should start propagating the Context instead of propagating (only) the parent Span, but this applies to lots of places, I'll open an issue for it", "author": "trask", "createdAt": "2020-06-13T02:31:27Z", "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/AsyncResultConsumerWrapper.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx.reactive;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.reactive.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import java.util.function.Consumer;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class AsyncResultConsumerWrapper implements Consumer<Handler<AsyncResult<?>>> {\n+  private final Consumer<Handler<AsyncResult<?>>> delegate;\n+  private final Span parentSpan;", "originalCommit": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTkwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439701907", "bodyText": "opened #507", "author": "trask", "createdAt": "2020-06-13T02:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTUxNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9b1bcd80e1b5911a65d30ecbc40b8e49241751aa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9b1bcd80e1b5911a65d30ecbc40b8e49241751aa", "message": "Polish", "committedDate": "2020-06-13T13:50:27Z", "type": "commit"}, {"oid": "ab14e74e1693bfb74cdf61e7ec0d28adb566f7bf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ab14e74e1693bfb74cdf61e7ec0d28adb566f7bf", "message": "Merge branch 'master' into vertx", "committedDate": "2020-06-13T17:33:52Z", "type": "commit"}, {"oid": "27b2335d4b5f615e65a7e0038340d4095cbd5806", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/27b2335d4b5f615e65a7e0038340d4095cbd5806", "message": "Fix license header", "committedDate": "2020-06-13T19:21:48Z", "type": "commit"}, {"oid": "80bcd08ea556d14b92908b256e16f7f968a4d8e3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/80bcd08ea556d14b92908b256e16f7f968a4d8e3", "message": "Add Vert.x to README", "committedDate": "2020-06-13T19:39:56Z", "type": "commit"}]}