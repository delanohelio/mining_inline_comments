{"pr_number": 1379, "pr_title": "Muzzle improvements: docs, javadocs, renamings and minor refactoring", "pr_createdAt": "2020-10-13T12:58:41Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTU4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504131583", "bodyText": "\ud83d\ude2e I didn't know about named regex groups!", "author": "trask", "createdAt": "2020-10-13T17:25:07Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/MuzzleCodeGenerator.java", "diffHunk": "@@ -462,9 +465,21 @@ public void visitEnd() {\n       super.visitEnd();\n     }\n \n-    /** Append a field initializer to the end of a method. */\n-    public class InitializeFieldVisitor extends MethodVisitor {\n-      public InitializeFieldVisitor(MethodVisitor methodVisitor) {\n+    private static final Pattern ANONYMOUS_ENUM_CONSTANT_CLASS =\n+        Pattern.compile(\"(?<enumClass>.*)\\\\$[0-9]+$\");\n+\n+    // drops \"$1\" suffix for enum constants that override/implement super class methods\n+    private String getEnumClassInternalName(Reference.Flag flag) {\n+      String fullInternalName = Utils.getInternalName(flag.getClass().getName());\n+      Matcher m = ANONYMOUS_ENUM_CONSTANT_CLASS.matcher(fullInternalName);\n+      return m.matches() ? m.group(\"enumClass\") : fullInternalName;", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTQ3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504545471", "bodyText": "It's a really awesome feature when you're working with large patterns with many groups - although I use them pretty much everywhere, just for the readability benefit \ud83d\ude04", "author": "mateuszrzeszutek", "createdAt": "2020-10-14T09:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTU4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzA4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504133082", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-10-13T17:27:42Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -62,20 +72,22 @@\n \n       try (InputStream in =\n           checkNotNull(\n-              loader.getResourceAsStream(Utils.getResourceName(className)),\n+              ReferenceCollector.class\n+                  .getClassLoader()\n+                  .getResourceAsStream(Utils.getResourceName(className)),", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzM1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504133357", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Flag computeMinimumFieldAccess(Type from, Type to) {\n          \n          \n            \n              private static MinimumVisibilityFlag computeMinimumFieldAccess(Type from, Type to) {", "author": "trask", "createdAt": "2020-10-13T17:28:08Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -126,16 +138,16 @@ private static String internalPackageName(String internalName) {\n    *\n    * @return A reference flag with the required level of access.\n    */\n-  private static Reference.Flag computeMinimumFieldAccess(Type from, Type to) {\n+  private static Flag computeMinimumFieldAccess(Type from, Type to) {", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae7023acbdaf6b9a9fb8ee2060380fb222b662f8", "chunk": "diff --git a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\nindex 03ab3d7b6b..30c97299ce 100644\n--- a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n+++ b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n\n@@ -138,7 +138,7 @@ public class ReferenceCollector extends ClassVisitor {\n    *\n    * @return A reference flag with the required level of access.\n    */\n-  private static Flag computeMinimumFieldAccess(Type from, Type to) {\n+  private static MinimumVisibilityFlag computeMinimumFieldAccess(Type from, Type to) {\n     if (from.getInternalName().equalsIgnoreCase(to.getInternalName())) {\n       return MinimumVisibilityFlag.PRIVATE_OR_HIGHER;\n     } else if (internalPackageName(from.getInternalName())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNDcxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504134713", "bodyText": "feels a little odd to return two different kinds of enum from this method, maybe add MinimumVisibilityFlag.PUBLIC\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Flag computeMinimumClassAccess(Type from, Type to) {\n          \n          \n            \n              private static MinimumVisibilityFlag computeMinimumClassAccess(Type from, Type to) {", "author": "trask", "createdAt": "2020-10-13T17:30:28Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -110,14 +122,14 @@ private static String internalPackageName(String internalName) {\n    *\n    * @return A reference flag with the required level of access.\n    */\n-  private static Reference.Flag computeMinimumClassAccess(Type from, Type to) {\n+  private static Flag computeMinimumClassAccess(Type from, Type to) {", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2NDA4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504564084", "bodyText": "Done.", "author": "mateuszrzeszutek", "createdAt": "2020-10-14T10:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNDcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d700aeed2ee88b3c7e581f6a908714bd68560f23", "chunk": "diff --git a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\nindex 03ab3d7b6b..ead4d0e11d 100644\n--- a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n+++ b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n\n@@ -122,14 +122,14 @@ public class ReferenceCollector extends ClassVisitor {\n    *\n    * @return A reference flag with the required level of access.\n    */\n-  private static Flag computeMinimumClassAccess(Type from, Type to) {\n+  private static MinimumVisibilityFlag computeMinimumClassAccess(Type from, Type to) {\n     if (from.getInternalName().equalsIgnoreCase(to.getInternalName())) {\n       return MinimumVisibilityFlag.PRIVATE_OR_HIGHER;\n     } else if (internalPackageName(from.getInternalName())\n         .equals(internalPackageName(to.getInternalName()))) {\n       return MinimumVisibilityFlag.PACKAGE_OR_HIGHER;\n     } else {\n-      return VisibilityFlag.PUBLIC;\n+      return MinimumVisibilityFlag.PUBLIC;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNTAxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504135015", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Flag computeMinimumMethodAccess(Type from, Type to, Type methodType) {\n          \n          \n            \n              private static MinimumVisibilityFlag computeMinimumMethodAccess(Type from, Type to, Type methodType) {", "author": "trask", "createdAt": "2020-10-13T17:30:56Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -144,13 +156,13 @@ private static String internalPackageName(String internalName) {\n    *\n    * @return A reference flag with the required level of access.\n    */\n-  private static Reference.Flag computeMinimumMethodAccess(Type from, Type to, Type methodType) {\n+  private static Flag computeMinimumMethodAccess(Type from, Type to, Type methodType) {", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae7023acbdaf6b9a9fb8ee2060380fb222b662f8", "chunk": "diff --git a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\nindex 03ab3d7b6b..30c97299ce 100644\n--- a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n+++ b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n\n@@ -156,7 +156,7 @@ public class ReferenceCollector extends ClassVisitor {\n    *\n    * @return A reference flag with the required level of access.\n    */\n-  private static Flag computeMinimumMethodAccess(Type from, Type to, Type methodType) {\n+  private static MinimumVisibilityFlag computeMinimumMethodAccess(Type from, Type to, Type methodType) {\n     if (from.getInternalName().equalsIgnoreCase(to.getInternalName())) {\n       return MinimumVisibilityFlag.PRIVATE_OR_HIGHER;\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNTY5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504135694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Flag computeVisibilityFlag(int access) {\n          \n          \n            \n              private static VisibilityFlag computeVisibilityFlag(int access) {", "author": "trask", "createdAt": "2020-10-13T17:32:16Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -275,36 +287,33 @@ public MethodVisitor visitMethod(\n         super.visitMethod(access, name, descriptor, signature, exceptions));\n   }\n \n-  /** @see net.bytebuddy.description.modifier.Visibility */\n   private static Flag computeVisibilityFlag(int access) {", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae7023acbdaf6b9a9fb8ee2060380fb222b662f8", "chunk": "diff --git a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\nindex 03ab3d7b6b..30c97299ce 100644\n--- a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n+++ b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n\n@@ -287,7 +287,7 @@ public class ReferenceCollector extends ClassVisitor {\n         super.visitMethod(access, name, descriptor, signature, exceptions));\n   }\n \n-  private static Flag computeVisibilityFlag(int access) {\n+  private static VisibilityFlag computeVisibilityFlag(int access) {\n     if (VisibilityFlag.PUBLIC.matches(access)) {\n       return VisibilityFlag.PUBLIC;\n     } else if (VisibilityFlag.PROTECTED.matches(access)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNTkyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504135920", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Flag computeOwnershipFlag(int access) {\n          \n          \n            \n              private static OwnershipFlag computeOwnershipFlag(int access) {", "author": "trask", "createdAt": "2020-10-13T17:32:42Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -275,36 +287,33 @@ public MethodVisitor visitMethod(\n         super.visitMethod(access, name, descriptor, signature, exceptions));\n   }\n \n-  /** @see net.bytebuddy.description.modifier.Visibility */\n   private static Flag computeVisibilityFlag(int access) {\n-    if (Flag.PUBLIC.matches(access)) {\n-      return Flag.PUBLIC;\n-    } else if (Flag.PROTECTED.matches(access)) {\n-      return Flag.PROTECTED;\n-    } else if (Flag.PACKAGE.matches(access)) {\n-      return Flag.PACKAGE;\n+    if (VisibilityFlag.PUBLIC.matches(access)) {\n+      return VisibilityFlag.PUBLIC;\n+    } else if (VisibilityFlag.PROTECTED.matches(access)) {\n+      return VisibilityFlag.PROTECTED;\n+    } else if (VisibilityFlag.PACKAGE.matches(access)) {\n+      return VisibilityFlag.PACKAGE;\n     } else {\n-      return Flag.PRIVATE;\n+      return VisibilityFlag.PRIVATE;\n     }\n   }\n \n-  /** @see net.bytebuddy.description.modifier.Ownership */\n   private static Flag computeOwnershipFlag(int access) {", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae7023acbdaf6b9a9fb8ee2060380fb222b662f8", "chunk": "diff --git a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\nindex 03ab3d7b6b..30c97299ce 100644\n--- a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n+++ b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n\n@@ -287,7 +287,7 @@ public class ReferenceCollector extends ClassVisitor {\n         super.visitMethod(access, name, descriptor, signature, exceptions));\n   }\n \n-  private static Flag computeVisibilityFlag(int access) {\n+  private static VisibilityFlag computeVisibilityFlag(int access) {\n     if (VisibilityFlag.PUBLIC.matches(access)) {\n       return VisibilityFlag.PUBLIC;\n     } else if (VisibilityFlag.PROTECTED.matches(access)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNjAwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504136002", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Flag computeTypeManifestationFlag(int access) {\n          \n          \n            \n              private static ManifestationFlag computeTypeManifestationFlag(int access) {", "author": "trask", "createdAt": "2020-10-13T17:32:52Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -275,36 +287,33 @@ public MethodVisitor visitMethod(\n         super.visitMethod(access, name, descriptor, signature, exceptions));\n   }\n \n-  /** @see net.bytebuddy.description.modifier.Visibility */\n   private static Flag computeVisibilityFlag(int access) {\n-    if (Flag.PUBLIC.matches(access)) {\n-      return Flag.PUBLIC;\n-    } else if (Flag.PROTECTED.matches(access)) {\n-      return Flag.PROTECTED;\n-    } else if (Flag.PACKAGE.matches(access)) {\n-      return Flag.PACKAGE;\n+    if (VisibilityFlag.PUBLIC.matches(access)) {\n+      return VisibilityFlag.PUBLIC;\n+    } else if (VisibilityFlag.PROTECTED.matches(access)) {\n+      return VisibilityFlag.PROTECTED;\n+    } else if (VisibilityFlag.PACKAGE.matches(access)) {\n+      return VisibilityFlag.PACKAGE;\n     } else {\n-      return Flag.PRIVATE;\n+      return VisibilityFlag.PRIVATE;\n     }\n   }\n \n-  /** @see net.bytebuddy.description.modifier.Ownership */\n   private static Flag computeOwnershipFlag(int access) {\n-    if (Flag.STATIC.matches(access)) {\n-      return Flag.STATIC;\n+    if (OwnershipFlag.STATIC.matches(access)) {\n+      return OwnershipFlag.STATIC;\n     } else {\n-      return Flag.NON_STATIC;\n+      return OwnershipFlag.NON_STATIC;\n     }\n   }\n \n-  /** @see net.bytebuddy.description.modifier.TypeManifestation */\n   private static Flag computeTypeManifestationFlag(int access) {", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae7023acbdaf6b9a9fb8ee2060380fb222b662f8", "chunk": "diff --git a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\nindex 03ab3d7b6b..30c97299ce 100644\n--- a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n+++ b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java\n\n@@ -287,7 +287,7 @@ public class ReferenceCollector extends ClassVisitor {\n         super.visitMethod(access, name, descriptor, signature, exceptions));\n   }\n \n-  private static Flag computeVisibilityFlag(int access) {\n+  private static VisibilityFlag computeVisibilityFlag(int access) {\n     if (VisibilityFlag.PUBLIC.matches(access)) {\n       return VisibilityFlag.PUBLIC;\n     } else if (VisibilityFlag.PROTECTED.matches(access)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MDAzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1379#discussion_r504140037", "bodyText": "nice simplifications to this class \ud83d\udc4d", "author": "trask", "createdAt": "2020-10-13T17:40:15Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/HelperReferenceWrapper.java", "diffHunk": "@@ -35,10 +33,10 @@\n    * @return An iterable containing the wrapped type's super class (if exists) and implemented\n    *     interfaces.\n    */\n-  Iterable<HelperReferenceWrapper> getSuperTypes();\n+  Stream<HelperReferenceWrapper> getSuperTypes();\n \n   /** @return An iterable with all non-private, non-static methods declared in the wrapped type. */\n-  Iterable<Method> getMethods();\n+  Stream<Method> getMethods();\n \n   final class Method {", "originalCommit": "9b6c56c40b0aad7ea3f03dc23bbfc67f1ad90c95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "74c533f83183a71b28d156dbe98f0d868e4d4ebf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/74c533f83183a71b28d156dbe98f0d868e4d4ebf", "message": "Muzzle improvements: docs, javadocs, renamings and minor refactoring", "committedDate": "2020-10-14T09:49:19Z", "type": "commit"}, {"oid": "ae7023acbdaf6b9a9fb8ee2060380fb222b662f8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ae7023acbdaf6b9a9fb8ee2060380fb222b662f8", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-10-14T09:49:19Z", "type": "commit"}, {"oid": "d700aeed2ee88b3c7e581f6a908714bd68560f23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d700aeed2ee88b3c7e581f6a908714bd68560f23", "message": "Muzzle improvements: docs, javadocs, renamings and minor refactoring", "committedDate": "2020-10-14T10:16:33Z", "type": "commit"}, {"oid": "d700aeed2ee88b3c7e581f6a908714bd68560f23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d700aeed2ee88b3c7e581f6a908714bd68560f23", "message": "Muzzle improvements: docs, javadocs, renamings and minor refactoring", "committedDate": "2020-10-14T10:16:33Z", "type": "forcePushed"}]}