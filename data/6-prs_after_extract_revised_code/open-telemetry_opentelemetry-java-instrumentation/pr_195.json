{"pr_number": 195, "pr_title": "Proof of Concept of \"Typed Spans\"", "pr_createdAt": "2020-02-29T19:44:43Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195", "timeline": [{"oid": "c425e222c590e84e3e57eca46b94780312c14371", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c425e222c590e84e3e57eca46b94780312c14371", "message": "Proof of Concept of \"Typed Spans\"\n\n[skip ci]\n\nPrimary goal is to maintain a simple and semantic interface for the code using it. See `HttpClientTracerDemonstration` for example usage.", "committedDate": "2020-02-29T19:42:44Z", "type": "commit"}, {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e7a42aacb399a14bb8cec1c5876bb233e3778b74", "message": "Add additional startSpan methods and restructure to allow tracer.extract at build time.\n\n[skip ci]", "committedDate": "2020-02-29T21:56:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1ODQ4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386058480", "bodyText": "See here for example usage.", "author": "tylerbenson", "createdAt": "2020-02-29T21:58:39Z", "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.opentelemetry.auto.typed;\n+\n+import io.opentelemetry.context.Scope;\n+\n+class HttpClientTracerDemonstration {", "originalCommit": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ff83219dee7febe10ef04bccd59a69331185880", "chunk": "diff --git a/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java b/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\nsimilarity index 78%\nrename from agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java\nrename to agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\nindex 5eedc330df..0a5b34895b 100644\n--- a/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java\n+++ b/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\n\n@@ -1,8 +1,12 @@\n package io.opentelemetry.auto.typed;\n \n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedSpan;\n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedTracer;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedSpan;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedTracer;\n import io.opentelemetry.context.Scope;\n \n-class HttpClientTracerDemonstration {\n+class TypedTracerDemonstration {\n \n   private void serverDemonstration() {\n     SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwOTQ3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386809476", "bodyText": "I like end() taking either response or throwable, makes usage very clear \ud83d\udc4d", "author": "trask", "createdAt": "2020-03-03T05:42:48Z", "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.opentelemetry.auto.typed;\n+\n+import io.opentelemetry.context.Scope;\n+\n+class HttpClientTracerDemonstration {\n+\n+  private void serverDemonstration() {\n+    SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n+\n+    SampleHttpServerTypedSpan span = tracer.startSpan(\"request instance\");\n+    // span.onRequest(\"request instance\"); // implicitly called on start.\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      // make request\n+      String response = \"response instance\";\n+\n+      // span.onResponse(\"response instance\"); // implicitly called on end.\n+      span.end(response);\n+    } catch (Exception ex) {\n+      span.end(ex);", "originalCommit": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ff83219dee7febe10ef04bccd59a69331185880", "chunk": "diff --git a/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java b/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\nsimilarity index 78%\nrename from agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java\nrename to agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\nindex 5eedc330df..0a5b34895b 100644\n--- a/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java\n+++ b/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\n\n@@ -1,8 +1,12 @@\n package io.opentelemetry.auto.typed;\n \n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedSpan;\n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedTracer;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedSpan;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedTracer;\n import io.opentelemetry.context.Scope;\n \n-class HttpClientTracerDemonstration {\n+class TypedTracerDemonstration {\n \n   private void serverDemonstration() {\n     SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxMjU3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386812574", "bodyText": "Can onRequest() and onResponse() be protected so it's not confusing whether or not they need to be called?", "author": "trask", "createdAt": "2020-03-03T05:55:38Z", "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.opentelemetry.auto.typed;\n+\n+import io.opentelemetry.context.Scope;\n+\n+class HttpClientTracerDemonstration {\n+\n+  private void serverDemonstration() {\n+    SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n+\n+    SampleHttpServerTypedSpan span = tracer.startSpan(\"request instance\");\n+    // span.onRequest(\"request instance\"); // implicitly called on start.", "originalCommit": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Nzg5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387257899", "bodyText": "Ok, I redid the package structure to allow this... I had to put the tracer and the span in the same package for it to work.", "author": "tylerbenson", "createdAt": "2020-03-03T19:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxMjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "3ff83219dee7febe10ef04bccd59a69331185880", "chunk": "diff --git a/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java b/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\nsimilarity index 78%\nrename from agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java\nrename to agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\nindex 5eedc330df..0a5b34895b 100644\n--- a/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java\n+++ b/agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java\n\n@@ -1,8 +1,12 @@\n package io.opentelemetry.auto.typed;\n \n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedSpan;\n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedTracer;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedSpan;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedTracer;\n import io.opentelemetry.context.Scope;\n \n-class HttpClientTracerDemonstration {\n+class TypedTracerDemonstration {\n \n   private void serverDemonstration() {\n     SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNDkxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386814918", "bodyText": "It would be nice if BaseTypedSpan didn't have these two end() methods, so that we could have some typed span hierarchies where they don't exist and it's super clear that you have to call either end(response) or end(throwable)", "author": "trask", "createdAt": "2020-03-03T06:04:49Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/DelegatingSpan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.opentelemetry.auto.typed.span;\n+\n+import io.opentelemetry.trace.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+\n+import java.util.Map;\n+\n+// TODO: This should be moved into the API.\n+public class DelegatingSpan implements Span {\n+  protected final Span delegate;\n+\n+  public DelegatingSpan(Span delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, String value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, long value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, double value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, boolean value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, AttributeValue value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void addEvent(String name) {\n+    delegate.addEvent(name);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, long timestamp) {\n+    delegate.addEvent(name, timestamp);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, Map<String, AttributeValue> attributes) {\n+    delegate.addEvent(name, attributes);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, Map<String, AttributeValue> attributes, long timestamp) {\n+    delegate.addEvent(name, attributes, timestamp);\n+  }\n+\n+  @Override\n+  public void addEvent(Event event) {\n+    delegate.addEvent(event);\n+  }\n+\n+  @Override\n+  public void addEvent(Event event, long timestamp) {\n+    delegate.addEvent(event, timestamp);\n+  }\n+\n+  @Override\n+  public void setStatus(Status status) {\n+    delegate.setStatus(status);\n+  }\n+\n+  @Override\n+  public void updateName(String name) {\n+    delegate.updateName(name);\n+  }\n+\n+  @Override\n+  public void end() {\n+    delegate.end();\n+  }\n+\n+  @Override\n+  public void end(EndSpanOptions endOptions) {\n+    delegate.end(endOptions);\n+  }", "originalCommit": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzODc5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387238791", "bodyText": "The problem is it extends from Span, which allows it to be put into Scope as-is.  The alternative would be to override the method and throw an exception.", "author": "tylerbenson", "createdAt": "2020-03-03T19:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MDMyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387240324", "bodyText": "Good point. I want to say maybe override and mark @Deprecated so that IDEs will give hint that you shouldn't be calling it, but @Deprecated isn't quite right, any idea some other way to get IDEs to hint that you shouldn't call it?", "author": "trask", "createdAt": "2020-03-03T19:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3MTI3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387271273", "bodyText": "Oh, I found example where I'd seen this kind of thing before, Guava's ImmutableList:\n  /**\n   * Guaranteed to throw an exception and leave the list unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.\n   */\n  @Deprecated\n  @Override\n  public final void add(int index, E element) {\n    throw new UnsupportedOperationException();\n  }\n\nI think it would be helpful to add this kind of override for end() and end(endOptions) methods in ClientTypedSpan and ServerTypedSpan to help avoid confusion of which end(...) method to call.\nMy extra comment above isn't showing down here, so copying it:\n\nAlthough API is not supposed to throw exceptions, and we're hoping these might someday be there, so maybe mark deprecated, but no-op instead of throw exception?", "author": "trask", "createdAt": "2020-03-03T20:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3MjE3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387272170", "bodyText": "Although API is not supposed to throw exceptions, and we're hoping these might someday be there, so maybe mark deprecated, but no-op instead of throw exception?", "author": "trask", "createdAt": "2020-03-03T20:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNDkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "3ff83219dee7febe10ef04bccd59a69331185880", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/DelegatingSpan.java b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/DelegatingSpan.java\nsimilarity index 98%\nrename from agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/DelegatingSpan.java\nrename to agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/DelegatingSpan.java\nindex 0b27f172dc..392dcb3555 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/DelegatingSpan.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/DelegatingSpan.java\n\n@@ -1,4 +1,4 @@\n-package io.opentelemetry.auto.typed.span;\n+package io.opentelemetry.auto.typed.base;\n \n import io.opentelemetry.trace.AttributeValue;\n import io.opentelemetry.trace.EndSpanOptions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNTg3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386815879", "bodyText": "What do you think about putting this method in the typed tracer?", "author": "trask", "createdAt": "2020-03-03T06:09:05Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package io.opentelemetry.auto.typed.span;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+public abstract class HttpClientTypedSpan<T extends HttpClientTypedSpan, REQUEST, RESPONSE>\n+    extends ClientTypedSpan<T, REQUEST, RESPONSE> {\n+\n+  public HttpClientTypedSpan(Tracer tracer, Span delegate) {\n+    super(tracer, delegate);\n+  }\n+\n+  public T onRequest(REQUEST request) {\n+    tracer.getHttpTextFormat().inject(getContext(), request, getSetter());\n+    return self();\n+  }\n+\n+  protected abstract HttpTextFormat.Setter<REQUEST> getSetter();", "originalCommit": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1ODE4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387258185", "bodyText": "done.", "author": "tylerbenson", "createdAt": "2020-03-03T19:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNTg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ff83219dee7febe10ef04bccd59a69331185880", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java\ndeleted file mode 100644\nindex c6b05a90c7..0000000000\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java\n+++ /dev/null\n\n@@ -1,20 +0,0 @@\n-package io.opentelemetry.auto.typed.span;\n-\n-import io.opentelemetry.context.propagation.HttpTextFormat;\n-import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n-\n-public abstract class HttpClientTypedSpan<T extends HttpClientTypedSpan, REQUEST, RESPONSE>\n-    extends ClientTypedSpan<T, REQUEST, RESPONSE> {\n-\n-  public HttpClientTypedSpan(Tracer tracer, Span delegate) {\n-    super(tracer, delegate);\n-  }\n-\n-  public T onRequest(REQUEST request) {\n-    tracer.getHttpTextFormat().inject(getContext(), request, getSetter());\n-    return self();\n-  }\n-\n-  protected abstract HttpTextFormat.Setter<REQUEST> getSetter();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTYzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386819639", "bodyText": "Eeek \ud83d\ude06", "author": "trask", "createdAt": "2020-03-03T06:23:58Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/tracer/ClientTypedTracer.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.opentelemetry.auto.typed.tracer;\n+\n+import io.opentelemetry.auto.typed.span.ClientTypedSpan;\n+import io.opentelemetry.trace.Span;\n+\n+public abstract class ClientTypedTracer<\n+        T extends ClientTypedSpan<T, REQUEST, RESPONSE>, REQUEST, RESPONSE>", "originalCommit": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNzY0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387237647", "bodyText": "yeah, there wasn't a good way to ensure the return types were strongly typed without some extra generics complexity.", "author": "tylerbenson", "createdAt": "2020-03-03T19:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ff83219dee7febe10ef04bccd59a69331185880", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/tracer/ClientTypedTracer.java b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/client/ClientTypedTracer.java\nsimilarity index 79%\nrename from agent-tooling/src/main/java/io/opentelemetry/auto/typed/tracer/ClientTypedTracer.java\nrename to agent-tooling/src/main/java/io/opentelemetry/auto/typed/client/ClientTypedTracer.java\nindex 9bb821cdd4..50d1460c2c 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/tracer/ClientTypedTracer.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/client/ClientTypedTracer.java\n\n@@ -1,6 +1,6 @@\n-package io.opentelemetry.auto.typed.tracer;\n+package io.opentelemetry.auto.typed.client;\n \n-import io.opentelemetry.auto.typed.span.ClientTypedSpan;\n+import io.opentelemetry.auto.typed.base.BaseTypedTracer;\n import io.opentelemetry.trace.Span;\n \n public abstract class ClientTypedTracer<\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMjAzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386822033", "bodyText": "Can this be moved to the tracer? (similar to how extraction is done in the HttpServerTypedTracer below)\nAdded benefit is then I don't think the tracer field in BaseTypedSpan would be needed.", "author": "trask", "createdAt": "2020-03-03T06:33:17Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package io.opentelemetry.auto.typed.span;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+public abstract class HttpClientTypedSpan<T extends HttpClientTypedSpan, REQUEST, RESPONSE>\n+    extends ClientTypedSpan<T, REQUEST, RESPONSE> {\n+\n+  public HttpClientTypedSpan(Tracer tracer, Span delegate) {\n+    super(tracer, delegate);\n+  }\n+\n+  public T onRequest(REQUEST request) {\n+    tracer.getHttpTextFormat().inject(getContext(), request, getSetter());", "originalCommit": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1ODMyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387258324", "bodyText": "done.", "author": "tylerbenson", "createdAt": "2020-03-03T19:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMjAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "3ff83219dee7febe10ef04bccd59a69331185880", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java\ndeleted file mode 100644\nindex c6b05a90c7..0000000000\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java\n+++ /dev/null\n\n@@ -1,20 +0,0 @@\n-package io.opentelemetry.auto.typed.span;\n-\n-import io.opentelemetry.context.propagation.HttpTextFormat;\n-import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n-\n-public abstract class HttpClientTypedSpan<T extends HttpClientTypedSpan, REQUEST, RESPONSE>\n-    extends ClientTypedSpan<T, REQUEST, RESPONSE> {\n-\n-  public HttpClientTypedSpan(Tracer tracer, Span delegate) {\n-    super(tracer, delegate);\n-  }\n-\n-  public T onRequest(REQUEST request) {\n-    tracer.getHttpTextFormat().inject(getContext(), request, getSetter());\n-    return self();\n-  }\n-\n-  protected abstract HttpTextFormat.Setter<REQUEST> getSetter();\n-}\n"}}, {"oid": "3ff83219dee7febe10ef04bccd59a69331185880", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ff83219dee7febe10ef04bccd59a69331185880", "message": "Move classes into a different package structure to enable less visibility.\n\nAnd move setter method to tracer.", "committedDate": "2020-03-03T19:54:11Z", "type": "commit"}, {"oid": "b2d6f514f862242eda35f964e71681725b5b4609", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b2d6f514f862242eda35f964e71681725b5b4609", "message": "Add deprecation warnings to unused end methods\n\n[skip ci]", "committedDate": "2020-03-03T20:01:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2Njg0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387266846", "bodyText": "This doesn't look like it's used anymore", "author": "trask", "createdAt": "2020-03-03T20:12:35Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedSpan.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.opentelemetry.auto.typed.base;\n+\n+import io.opentelemetry.trace.Span;\n+\n+public abstract class BaseTypedSpan<T extends BaseTypedSpan> extends DelegatingSpan {\n+\n+  public BaseTypedSpan(Span delegate) {\n+    super(delegate);\n+  }\n+\n+  public void end(Throwable throwable) {\n+    // add error details to the span.\n+    super.end();\n+  }\n+\n+  protected abstract T self();", "originalCommit": "3ff83219dee7febe10ef04bccd59a69331185880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNzM0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387327346", "bodyText": "I think it will still be necessary if we override any methods that return T.", "author": "tylerbenson", "createdAt": "2020-03-03T22:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2Njg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b82f271a38e972f3b403cdf5edc4b3968dafb87a", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedSpan.java b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedSpan.java\nindex d6adf06dc9..c06b7018ac 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedSpan.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedSpan.java\n\n@@ -1,5 +1,6 @@\n package io.opentelemetry.auto.typed.base;\n \n+import io.opentelemetry.trace.EndSpanOptions;\n import io.opentelemetry.trace.Span;\n \n public abstract class BaseTypedSpan<T extends BaseTypedSpan> extends DelegatingSpan {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3ODIzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r391778237", "bodyText": "I would not provide this method and instead force the user to provide the request already in startSpan, so that all attributes are set on the builder and thus available to samplers (and onStart callbacks of SpanProcessors)", "author": "Oberon00", "createdAt": "2020-03-12T17:27:36Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/server/ServerTypedSpan.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package io.opentelemetry.auto.typed.server;\n+\n+import io.opentelemetry.auto.typed.base.BaseTypedSpan;\n+import io.opentelemetry.trace.Span;\n+\n+public abstract class ServerTypedSpan<T extends ServerTypedSpan, REQUEST, RESPONSE>\n+    extends BaseTypedSpan<T> {\n+\n+  public ServerTypedSpan(Span delegate) {\n+    super(delegate);\n+  }\n+\n+  protected abstract T onRequest(REQUEST request);", "originalCommit": "3ff83219dee7febe10ef04bccd59a69331185880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0NzMwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r391847308", "bodyText": "This method is not exposed to the user... it's intended for implementation by the concrete class.  Sounds like you think it's not necessary though?", "author": "tylerbenson", "createdAt": "2020-03-12T19:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3ODIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "49a6aa2c8e1b583297251e2a18244b73a05bb6e2", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/server/ServerTypedSpan.java b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/server/ServerTypedSpan.java\nindex 6f66a38859..1b1017e724 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/typed/server/ServerTypedSpan.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/typed/server/ServerTypedSpan.java\n\n@@ -1,3 +1,18 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package io.opentelemetry.auto.typed.server;\n \n import io.opentelemetry.auto.typed.base.BaseTypedSpan;\n"}}, {"oid": "b82f271a38e972f3b403cdf5edc4b3968dafb87a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b82f271a38e972f3b403cdf5edc4b3968dafb87a", "message": "Remove nullable.", "committedDate": "2020-03-12T21:47:42Z", "type": "commit"}, {"oid": "49a6aa2c8e1b583297251e2a18244b73a05bb6e2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/49a6aa2c8e1b583297251e2a18244b73a05bb6e2", "message": "Add headers.", "committedDate": "2020-03-12T22:17:26Z", "type": "commit"}, {"oid": "0873848dcafa32a5e70f957b2d84bc8f0e86c215", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0873848dcafa32a5e70f957b2d84bc8f0e86c215", "message": "Merge branch 'master' into tyler/POC-typed-tracers", "committedDate": "2020-03-12T22:35:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3OTQ1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r407279451", "bodyText": "suggestion: make a static class Request and Response as tracer.startSpan(\"request instance\"); looks very much like a normal start of a span with a pre-canned name", "author": "codefromthecrypt", "createdAt": "2020-04-13T01:28:01Z", "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.typed;\n+\n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedSpan;\n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedTracer;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedSpan;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedTracer;\n+import io.opentelemetry.context.Scope;\n+\n+class TypedTracerDemonstration {\n+\n+  private void serverDemonstration() {\n+    SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n+\n+    SampleHttpServerTypedSpan span = tracer.startSpan(\"request instance\");\n+    // span.onRequest(\"request instance\"); // implicitly called on start.\n+\n+    try (Scope scope = tracer.withSpan(span)) {", "originalCommit": "0873848dcafa32a5e70f957b2d84bc8f0e86c215", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}