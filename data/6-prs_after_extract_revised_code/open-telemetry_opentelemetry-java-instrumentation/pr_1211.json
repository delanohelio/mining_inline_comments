{"pr_number": 1211, "pr_title": "Implement MDC auto-instrumentation for log4j1", "pr_createdAt": "2020-09-16T14:16:47Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211", "timeline": [{"oid": "5bbff34247b2250c22a0b955716fd3605b714b34", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5bbff34247b2250c22a0b955716fd3605b714b34", "message": "Implement MDC auto-instrumentation for log4j1", "committedDate": "2020-09-16T14:27:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4NTUxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r489685519", "bodyText": "typically this uses the same class as typeMatcher, if there's a reason for it to be different can you add a comment here?", "author": "trask", "createdAt": "2020-09-16T19:09:10Z", "path": "instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1Instrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.log4j.v1_2;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n+@AutoService(Instrumenter.class)\n+public class Log4j1Instrumentation extends Instrumenter.Default {\n+  public Log4j1Instrumentation() {\n+    super(\"log4j1\", \"log4j\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"org.apache.log4j.MDC\");", "originalCommit": "5bbff34247b2250c22a0b955716fd3605b714b34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk0MjQ1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r489942455", "bodyText": "Also just to check, when the type matcher is a simple named we'd usually leave out classLoaderMatcher @trask?", "author": "anuraaga", "createdAt": "2020-09-17T03:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4NTUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk0Nzg0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r489947840", "bodyText": "oh yes, you're right \ud83d\udc4d", "author": "trask", "createdAt": "2020-09-17T03:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4NTUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1ODY2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r490058666", "bodyText": "OK, I've removed it altogether.\nBy the way, it would be great if classLoaderMatcher()'s Javadoc contained a short explanation of how, why and when we should use it; some common pattern etc. I'd add it but I don't feel confident about being able to explain it correctly \ud83d\ude05", "author": "mateuszrzeszutek", "createdAt": "2020-09-17T08:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4NTUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "chunk": "diff --git a/instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1Instrumentation.java b/instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1Instrumentation.java\nindex c3fdb54771..46d214e945 100644\n--- a/instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1Instrumentation.java\n+++ b/instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1Instrumentation.java\n\n@@ -16,7 +16,6 @@\n \n package io.opentelemetry.instrumentation.auto.log4j.v1_2;\n \n-import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n import static java.util.Collections.singletonMap;\n import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4NjU4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r489686587", "bodyText": "same comment as above", "author": "trask", "createdAt": "2020-09-16T19:10:01Z", "path": "instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1LoggingEventInstrumentation.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.log4j.v1_2;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.log4j.MDC;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n+@AutoService(Instrumenter.class)\n+public class Log4j1LoggingEventInstrumentation extends Instrumenter.Default {\n+  public Log4j1LoggingEventInstrumentation() {\n+    super(\"log4j1\", \"log4j\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"org.apache.log4j.MDC\");", "originalCommit": "5bbff34247b2250c22a0b955716fd3605b714b34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "chunk": "diff --git a/instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1LoggingEventInstrumentation.java b/instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1LoggingEventInstrumentation.java\nindex 6768e9fa29..c186076fca 100644\n--- a/instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1LoggingEventInstrumentation.java\n+++ b/instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1LoggingEventInstrumentation.java\n\n@@ -16,7 +16,6 @@\n \n package io.opentelemetry.instrumentation.auto.log4j.v1_2;\n \n-import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n import static java.util.Collections.singletonMap;\n import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n"}}, {"oid": "44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "message": "Implement MDC auto-instrumentation for log4j1", "committedDate": "2020-09-17T08:14:43Z", "type": "commit"}, {"oid": "44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "message": "Implement MDC auto-instrumentation for log4j1", "committedDate": "2020-09-17T08:14:43Z", "type": "forcePushed"}]}