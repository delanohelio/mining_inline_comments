{"pr_number": 389, "pr_title": "Initial Propagators support.", "pr_createdAt": "2020-05-06T21:54:29Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389", "timeline": [{"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d982b89a3e1f7f39d9c2e39b761f4c3f425714b1", "message": "Initial Propagators support.", "committedDate": "2020-05-06T21:44:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4OTU0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r421289548", "bodyText": "Instead of Config.get().getPropagators() shouldn't you use propagatorList parameter?", "author": "iNikem", "createdAt": "2020-05-07T07:18:09Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.tooling;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.contrib.trace.propagation.B3Propagator;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class PropagatorsInitializer {\n+  private static final String TRACE_CONTEXT = \"tracecontext\";\n+  private static final String B3 = \"b3\";\n+\n+  private static final String SEPARATOR = \",\";\n+\n+  private static final Map<String, HttpTextFormat> TEXTMAP_PROPAGATORS = ImmutableMap.of(\n+        TRACE_CONTEXT, new HttpTraceContext(),\n+        B3, new B3Propagator()\n+  );\n+\n+  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  public static void initializePropagators(String propagatorList) {\n+    DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n+\n+    for (String propagatorId : Config.get().getPropagators().split(SEPARATOR)) {", "originalCommit": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODg0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423778848", "bodyText": "Not a strong feeling, so we can update this to be propagatorsList instead.", "author": "carlosalberto", "createdAt": "2020-05-12T14:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4OTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4MTk3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423881977", "bodyText": "See my suggestions in Config", "author": "trask", "createdAt": "2020-05-12T16:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4OTU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "0dfd68a6eaa2bb3be27da608d2e71e6a78461484", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java\nindex 124d0aaf40..bd43133d0a 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java\n\n@@ -17,12 +17,11 @@ package io.opentelemetry.auto.tooling;\n \n import com.google.common.collect.ImmutableMap;\n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.auto.config.Config;\n import io.opentelemetry.context.propagation.DefaultContextPropagators;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.contrib.trace.propagation.B3Propagator;\n import io.opentelemetry.trace.propagation.HttpTraceContext;\n-import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import lombok.extern.slf4j.Slf4j;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4MDY1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423880659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                propagators = getSettingFromEnvironment(PROPAGATORS, null);\n          \n          \n            \n                propagators = getListSettingFromEnvironment(PROPAGATORS, null);", "author": "trask", "createdAt": "2020-05-12T16:44:10Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -150,6 +152,7 @@\n   Config() {\n     propertiesFromConfigFile = loadConfigurationFile();\n \n+    propagators = getSettingFromEnvironment(PROPAGATORS, null);", "originalCommit": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfd68a6eaa2bb3be27da608d2e71e6a78461484", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\nindex 6e45b94cf0..3e2243edbf 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\n\n@@ -152,7 +152,7 @@ public class Config {\n   Config() {\n     propertiesFromConfigFile = loadConfigurationFile();\n \n-    propagators = getSettingFromEnvironment(PROPAGATORS, null);\n+    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n     exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n     serviceName = getSettingFromEnvironment(SERVICE, \"(unknown)\");\n     traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4MDcxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423880712", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Getter private final String propagators;\n          \n          \n            \n              @Getter private final List<String> propagators;", "author": "trask", "createdAt": "2020-05-12T16:44:16Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -104,6 +105,7 @@\n \n   @Getter private final String exporterJar;\n   @Getter private final String serviceName;\n+  @Getter private final String propagators;", "originalCommit": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfd68a6eaa2bb3be27da608d2e71e6a78461484", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\nindex 6e45b94cf0..3e2243edbf 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\n\n@@ -105,7 +105,7 @@ public class Config {\n \n   @Getter private final String exporterJar;\n   @Getter private final String serviceName;\n-  @Getter private final String propagators;\n+  @Getter private final List<String> propagators;\n   @Getter private final boolean traceEnabled;\n   @Getter private final boolean integrationsEnabled;\n   @Getter private final List<String> excludedClasses;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4MTM4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423881382", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                propagators = properties.getProperty(PROPAGATORS, parent.propagators);\n          \n          \n            \n                propagators = getPropertyListValue(properties, PROPAGATORS, parent.propagators);", "author": "trask", "createdAt": "2020-05-12T16:45:20Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -210,6 +213,7 @@\n   private Config(final Properties properties, final Config parent) {\n     exporterJar = properties.getProperty(EXPORTER_JAR, parent.exporterJar);\n     serviceName = properties.getProperty(SERVICE, parent.serviceName);\n+    propagators = properties.getProperty(PROPAGATORS, parent.propagators);", "originalCommit": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfd68a6eaa2bb3be27da608d2e71e6a78461484", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\nindex 6e45b94cf0..3e2243edbf 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java\n\n@@ -213,7 +213,8 @@ public class Config {\n   private Config(final Properties properties, final Config parent) {\n     exporterJar = properties.getProperty(EXPORTER_JAR, parent.exporterJar);\n     serviceName = properties.getProperty(SERVICE, parent.serviceName);\n-    propagators = properties.getProperty(PROPAGATORS, parent.propagators);\n+\n+    propagators = getPropertyListValue(properties, PROPAGATORS, parent.propagators);\n \n     traceEnabled = getPropertyBooleanValue(properties, TRACE_ENABLED, parent.traceEnabled);\n     integrationsEnabled =\n"}}, {"oid": "0dfd68a6eaa2bb3be27da608d2e71e6a78461484", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0dfd68a6eaa2bb3be27da608d2e71e6a78461484", "message": "Parse the propagators value from Config.", "committedDate": "2020-05-14T14:27:10Z", "type": "commit"}, {"oid": "db96cd436043a2b3df92f833a3cc3d3468fa85c9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db96cd436043a2b3df92f833a3cc3d3468fa85c9", "message": "Merge branch 'master' into initial_propagators_support", "committedDate": "2020-05-14T17:01:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTM5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r425355391", "bodyText": "null check is not needed, Config.getListSettingFromEnvironment always returns non-null\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (Config.get().getPropagators() != null) {\n          \n          \n            \n                  PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n          \n          \n            \n                }\n          \n          \n            \n                PropagatorsInitializer.initializePropagators(Config.get().getPropagators());", "author": "trask", "createdAt": "2020-05-14T18:44:22Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -48,6 +48,10 @@ public static synchronized void installAgentTracer() {\n     } else {\n       log.info(\"Tracing is disabled.\");\n     }\n+\n+    if (Config.get().getPropagators() != null) {\n+      PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n+    }", "originalCommit": "db96cd436043a2b3df92f833a3cc3d3468fa85c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e01e4d7ab8e0e03f017993246f28c2233f921337", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\nindex 9582e7aeb1..31b0f0664f 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\n\n@@ -49,9 +49,7 @@ public class TracerInstaller {\n       log.info(\"Tracing is disabled.\");\n     }\n \n-    if (Config.get().getPropagators() != null) {\n-      PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n-    }\n+    PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n   @VisibleForTesting\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTkwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r425355909", "bodyText": "null check is not needed, Config.getListSettingFromEnvironment always returns non-null\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (propagators == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "author": "trask", "createdAt": "2020-05-14T18:45:15Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.tooling;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.contrib.trace.propagation.B3Propagator;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class PropagatorsInitializer {\n+  private static final String TRACE_CONTEXT = \"tracecontext\";\n+  private static final String B3 = \"b3\";\n+\n+  private static final Map<String, HttpTextFormat> TEXTMAP_PROPAGATORS =\n+      ImmutableMap.of(\n+          TRACE_CONTEXT, new HttpTraceContext(),\n+          B3, new B3Propagator());\n+\n+  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  public static void initializePropagators(List<String> propagators) {\n+    if (propagators == null) {\n+      return;\n+    }\n+", "originalCommit": "db96cd436043a2b3df92f833a3cc3d3468fa85c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e01e4d7ab8e0e03f017993246f28c2233f921337", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java\nindex bd43133d0a..a04ebe3047 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java\n\n@@ -37,7 +37,8 @@ public class PropagatorsInitializer {\n \n   /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n   public static void initializePropagators(List<String> propagators) {\n-    if (propagators == null) {\n+    /* Only override the default propagators *if* the user specified any. */\n+    if (propagators.size() == 0) {\n       return;\n     }\n \n"}}, {"oid": "e01e4d7ab8e0e03f017993246f28c2233f921337", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e01e4d7ab8e0e03f017993246f28c2233f921337", "message": "Do not check for null, but size.", "committedDate": "2020-05-14T23:05:40Z", "type": "commit"}, {"oid": "1302f3b6dd02e97f5fab83fef2df40356d0ce52a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1302f3b6dd02e97f5fab83fef2df40356d0ce52a", "message": "Merge branch 'master' into initial_propagators_support", "committedDate": "2020-05-14T23:40:18Z", "type": "commit"}]}