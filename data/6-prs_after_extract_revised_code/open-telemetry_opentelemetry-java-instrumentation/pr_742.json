{"pr_number": 742, "pr_title": "Refactor net.peer.name and net.peer.ip", "pr_createdAt": "2020-07-20T23:24:10Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742", "timeline": [{"oid": "0831bb2f3cbadd438d9d7de9cddebb408f201fac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0831bb2f3cbadd438d9d7de9cddebb408f201fac", "message": "Use a central method to set net.peer.name and net.peer.ip", "committedDate": "2020-07-20T21:37:43Z", "type": "commit"}, {"oid": "748a4e067335595f673fa0ede15d3792b4023ea9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/748a4e067335595f673fa0ede15d3792b4023ea9", "message": "Fix test failures", "committedDate": "2020-07-21T01:06:01Z", "type": "commit"}, {"oid": "2349bad930c15d528febf65ba799eba17d1d1c11", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2349bad930c15d528febf65ba799eba17d1d1c11", "message": "Fix Elasticsearch2 tests", "committedDate": "2020-07-21T01:34:50Z", "type": "commit"}, {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c19a3277d5b71908db6261c3708c08497bdf9646", "message": "Fix lettuce-5.1 test failures", "committedDate": "2020-07-21T04:55:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzY1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458433650", "bodyText": "i think inlining this var is nice\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String peerName = remoteConnection.getHostString();\n          \n          \n            \n                    setPeer(span, peerName, null);\n          \n          \n            \n                    setPeer(span, remoteConnection.getHostString(), null);", "author": "trask", "createdAt": "2020-07-21T22:49:49Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -83,12 +83,8 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n         onPeerConnection(span, remoteAddress);\n       } else {\n         // Failed DNS lookup, the host string is the name.\n-        String hostString = remoteConnection.getHostString();\n-        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), hostString);\n-        String peerService = mapToPeer(hostString);\n-        if (peerService != null) {\n-          span.setAttribute(\"peer.service\", peerService);\n-        }\n+        String peerName = remoteConnection.getHostString();\n+        setPeer(span, peerName, null);", "originalCommit": "c19a3277d5b71908db6261c3708c08497bdf9646", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ace0912f382ff60864b68521895755c4f95eeb9", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\nindex c93217d2b3..c7b7090b2f 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n\n@@ -83,8 +83,7 @@ public abstract class BaseDecorator {\n         onPeerConnection(span, remoteAddress);\n       } else {\n         // Failed DNS lookup, the host string is the name.\n-        String peerName = remoteConnection.getHostString();\n-        setPeer(span, peerName, null);\n+        setPeer(span, remoteConnection.getHostString(), null);\n       }\n       span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), remoteConnection.getPort());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDY1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458434650", "bodyText": "i think remove this method and call setPeer(span, peerName, null) directly, and i think restructure setPeer below a bit to not to delegate to this method", "author": "trask", "createdAt": "2020-07-21T22:52:44Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n-    }\n+  private static void setPeer(final Span span, String peerName) {\n+    assert span != null;\n+    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    String peerService = mapToPeer(peerName);\n     if (peerService != null) {\n       span.setAttribute(\"peer.service\", peerService);\n     }\n-    return span;\n+  }", "originalCommit": "c19a3277d5b71908db6261c3708c08497bdf9646", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47a7d92649c1469fcebd6fcbfd02222132296e7f", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\nindex c93217d2b3..2048d39c0f 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n\n@@ -93,38 +93,22 @@ public abstract class BaseDecorator {\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String peerName = remoteAddress.getHostName();\n-    String peerIp = remoteAddress.getHostAddress();\n-    setPeer(span, peerName, peerIp);\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n     return span;\n   }\n \n-  private static void setPeer(final Span span, String peerName) {\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n     assert span != null;\n-    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    if (peerName != null && !peerName.equals(peerIp)) {\n+      SemanticAttributes.NET_PEER_NAME.set(span, peerName);\n+    }\n+    if (peerIp != null) {\n+      SemanticAttributes.NET_PEER_IP.set(span, peerIp);\n+    }\n     String peerService = mapToPeer(peerName);\n+    peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;\n     if (peerService != null) {\n-      span.setAttribute(\"peer.service\", peerService);\n-    }\n-  }\n-\n-  public static void setPeer(final Span span, String peerName, String peerIp) {\n-    assert span != null;\n-    if (peerIp == null) {\n-      setPeer(span, peerName);\n-    } else {\n-      if (peerName != null && !peerName.equals(peerIp)) {\n-        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n-      }\n-      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), peerIp);\n-\n-      String peerService = mapToPeer(peerName);\n-      if (peerService == null) {\n-        peerService = mapToPeer(peerIp);\n-      }\n-      if (peerService != null) {\n-        span.setAttribute(\"peer.service\", peerService);\n-      }\n+      SemanticAttributes.PEER_SERVICE.set(span, peerService);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDg1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458434850", "bodyText": "can probably inline above vars here and still stay in a single line \ud83d\ude04", "author": "trask", "createdAt": "2020-07-21T22:53:22Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);", "originalCommit": "c19a3277d5b71908db6261c3708c08497bdf9646", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47a7d92649c1469fcebd6fcbfd02222132296e7f", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\nindex c93217d2b3..2048d39c0f 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n\n@@ -93,38 +93,22 @@ public abstract class BaseDecorator {\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String peerName = remoteAddress.getHostName();\n-    String peerIp = remoteAddress.getHostAddress();\n-    setPeer(span, peerName, peerIp);\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n     return span;\n   }\n \n-  private static void setPeer(final Span span, String peerName) {\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n     assert span != null;\n-    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    if (peerName != null && !peerName.equals(peerIp)) {\n+      SemanticAttributes.NET_PEER_NAME.set(span, peerName);\n+    }\n+    if (peerIp != null) {\n+      SemanticAttributes.NET_PEER_IP.set(span, peerIp);\n+    }\n     String peerService = mapToPeer(peerName);\n+    peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;\n     if (peerService != null) {\n-      span.setAttribute(\"peer.service\", peerService);\n-    }\n-  }\n-\n-  public static void setPeer(final Span span, String peerName, String peerIp) {\n-    assert span != null;\n-    if (peerIp == null) {\n-      setPeer(span, peerName);\n-    } else {\n-      if (peerName != null && !peerName.equals(peerIp)) {\n-        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n-      }\n-      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), peerIp);\n-\n-      String peerService = mapToPeer(peerName);\n-      if (peerService == null) {\n-        peerService = mapToPeer(peerIp);\n-      }\n-      if (peerService != null) {\n-        span.setAttribute(\"peer.service\", peerService);\n-      }\n+      SemanticAttributes.PEER_SERVICE.set(span, peerService);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MjU5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458562593", "bodyText": "Please use this form: SemanticAttributes.NET_PEER_NAME.set(span, peerName)", "author": "iNikem", "createdAt": "2020-07-22T06:27:03Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n-    }\n+  private static void setPeer(final Span span, String peerName) {\n+    assert span != null;\n+    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    String peerService = mapToPeer(peerName);\n     if (peerService != null) {\n       span.setAttribute(\"peer.service\", peerService);\n     }\n-    return span;\n+  }\n+\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n+    assert span != null;\n+    if (peerIp == null) {\n+      setPeer(span, peerName);\n+    } else {\n+      if (peerName != null && !peerName.equals(peerIp)) {\n+        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);", "originalCommit": "c19a3277d5b71908db6261c3708c08497bdf9646", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47a7d92649c1469fcebd6fcbfd02222132296e7f", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\nindex c93217d2b3..2048d39c0f 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n\n@@ -93,38 +93,22 @@ public abstract class BaseDecorator {\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String peerName = remoteAddress.getHostName();\n-    String peerIp = remoteAddress.getHostAddress();\n-    setPeer(span, peerName, peerIp);\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n     return span;\n   }\n \n-  private static void setPeer(final Span span, String peerName) {\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n     assert span != null;\n-    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    if (peerName != null && !peerName.equals(peerIp)) {\n+      SemanticAttributes.NET_PEER_NAME.set(span, peerName);\n+    }\n+    if (peerIp != null) {\n+      SemanticAttributes.NET_PEER_IP.set(span, peerIp);\n+    }\n     String peerService = mapToPeer(peerName);\n+    peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;\n     if (peerService != null) {\n-      span.setAttribute(\"peer.service\", peerService);\n-    }\n-  }\n-\n-  public static void setPeer(final Span span, String peerName, String peerIp) {\n-    assert span != null;\n-    if (peerIp == null) {\n-      setPeer(span, peerName);\n-    } else {\n-      if (peerName != null && !peerName.equals(peerIp)) {\n-        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n-      }\n-      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), peerIp);\n-\n-      String peerService = mapToPeer(peerName);\n-      if (peerService == null) {\n-        peerService = mapToPeer(peerIp);\n-      }\n-      if (peerService != null) {\n-        span.setAttribute(\"peer.service\", peerService);\n-      }\n+      SemanticAttributes.PEER_SERVICE.set(span, peerService);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2Mjk3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458562972", "bodyText": "Use if/else", "author": "iNikem", "createdAt": "2020-07-22T06:27:59Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n-    }\n+  private static void setPeer(final Span span, String peerName) {\n+    assert span != null;\n+    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    String peerService = mapToPeer(peerName);\n     if (peerService != null) {\n       span.setAttribute(\"peer.service\", peerService);\n     }\n-    return span;\n+  }\n+\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n+    assert span != null;\n+    if (peerIp == null) {\n+      setPeer(span, peerName);\n+    } else {\n+      if (peerName != null && !peerName.equals(peerIp)) {\n+        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+      }\n+      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), peerIp);\n+\n+      String peerService = mapToPeer(peerName);\n+      if (peerService == null) {\n+        peerService = mapToPeer(peerIp);\n+      }\n+      if (peerService != null) {", "originalCommit": "c19a3277d5b71908db6261c3708c08497bdf9646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5MzYyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458993623", "bodyText": "I changed it to use the conditional operator instead.", "author": "heyams", "createdAt": "2020-07-22T18:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2Mjk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "47a7d92649c1469fcebd6fcbfd02222132296e7f", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\nindex c93217d2b3..2048d39c0f 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n\n@@ -93,38 +93,22 @@ public abstract class BaseDecorator {\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String peerName = remoteAddress.getHostName();\n-    String peerIp = remoteAddress.getHostAddress();\n-    setPeer(span, peerName, peerIp);\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n     return span;\n   }\n \n-  private static void setPeer(final Span span, String peerName) {\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n     assert span != null;\n-    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    if (peerName != null && !peerName.equals(peerIp)) {\n+      SemanticAttributes.NET_PEER_NAME.set(span, peerName);\n+    }\n+    if (peerIp != null) {\n+      SemanticAttributes.NET_PEER_IP.set(span, peerIp);\n+    }\n     String peerService = mapToPeer(peerName);\n+    peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;\n     if (peerService != null) {\n-      span.setAttribute(\"peer.service\", peerService);\n-    }\n-  }\n-\n-  public static void setPeer(final Span span, String peerName, String peerIp) {\n-    assert span != null;\n-    if (peerIp == null) {\n-      setPeer(span, peerName);\n-    } else {\n-      if (peerName != null && !peerName.equals(peerIp)) {\n-        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n-      }\n-      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), peerIp);\n-\n-      String peerService = mapToPeer(peerName);\n-      if (peerService == null) {\n-        peerService = mapToPeer(peerIp);\n-      }\n-      if (peerService != null) {\n-        span.setAttribute(\"peer.service\", peerService);\n-      }\n+      SemanticAttributes.PEER_SERVICE.set(span, peerService);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MzcyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458563723", "bodyText": "Please create BaseTracer, define setPeer method there and then delegate to BaseDecorator as here. Then we will have to change only one place when in the future we replace all decorators with tracers", "author": "iNikem", "createdAt": "2020-07-22T06:29:58Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "diffHunk": "@@ -151,8 +151,7 @@ protected void onPeerConnection(final Span span, final InetSocketAddress remoteC\n \n   protected void onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     if (remoteAddress != null) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+      BaseDecorator.setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());", "originalCommit": "c19a3277d5b71908db6261c3708c08497bdf9646", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "803f5eae5f465008a691deb85ebae81b7e9c7fd2", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java\nindex ef882606e4..cea4658145 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java\n\n@@ -151,7 +151,7 @@ public abstract class DatabaseClientTracer<CONNECTION, QUERY> {\n \n   protected void onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     if (remoteAddress != null) {\n-      BaseDecorator.setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n+      setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458564482", "bodyText": "Please put it back :)", "author": "iNikem", "createdAt": "2020-07-22T06:31:55Z", "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -98,7 +98,7 @@ public TraceContext getTraceContext() {\n     private final Context context;\n \n     OpenTelemetryTraceContext() {\n-      this.context = Context.current();\n+      context = Context.current();", "originalCommit": "c19a3277d5b71908db6261c3708c08497bdf9646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDcyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458970729", "bodyText": "Find Action removes 'this.' when I hit ctrl+s.  Will do.", "author": "heyams", "createdAt": "2020-07-22T17:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4OTc5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458989799", "bodyText": "I need to uncheck this box in order to revert: \"Remove unnecessary this to field or method\".  Should we update the contributing.md to turn this off completely?", "author": "heyams", "createdAt": "2020-07-22T18:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNzUzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r459037531", "bodyText": "good question. I'm ok either way on that particular save action. @iNikem do you want to turn off that save action, or did you only want to revert here since it was unrelated to this PR (no other changes to this file)?", "author": "trask", "createdAt": "2020-07-22T19:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzODM5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r459038391", "bodyText": "I just really like this in constructors.", "author": "iNikem", "createdAt": "2020-07-22T19:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0NTczOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r459045738", "bodyText": "Opened #761 to remove it from the Save Actions", "author": "trask", "createdAt": "2020-07-22T19:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "47a7d92649c1469fcebd6fcbfd02222132296e7f", "chunk": "diff --git a/instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java b/instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java\nindex 926ae04f6a..49db623bc5 100644\n--- a/instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java\n+++ b/instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java\n\n@@ -98,7 +98,7 @@ public enum OpenTelemetryTracing implements Tracing {\n     private final Context context;\n \n     OpenTelemetryTraceContext() {\n-      context = Context.current();\n+      this.context = Context.current();\n     }\n \n     public Context getContext() {\n"}}, {"oid": "3ace0912f382ff60864b68521895755c4f95eeb9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ace0912f382ff60864b68521895755c4f95eeb9", "message": "Use inline var.\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-22T17:40:54Z", "type": "commit"}, {"oid": "47a7d92649c1469fcebd6fcbfd02222132296e7f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/47a7d92649c1469fcebd6fcbfd02222132296e7f", "message": "Address comments", "committedDate": "2020-07-22T18:19:15Z", "type": "commit"}, {"oid": "92f83fc6110599948562c3ef34db149a01603cf9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/92f83fc6110599948562c3ef34db149a01603cf9", "message": "Merge branch 'heya/refactor-net-peer' of https://github.com/heyams/opentelemetry-java-instrumentation into heya/refactor-net-peer", "committedDate": "2020-07-22T18:20:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMTU1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r459001551", "bodyText": "i think this reads a little clearer:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;\n          \n          \n            \n                if (peerService == null) {\n          \n          \n            \n                  peerService = mapToPeer(peerIp);\n          \n          \n            \n                }", "author": "trask", "createdAt": "2020-07-22T18:35:31Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +92,23 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n+    assert span != null;\n+    if (peerName != null && !peerName.equals(peerIp)) {\n+      SemanticAttributes.NET_PEER_NAME.set(span, peerName);\n+    }\n+    if (peerIp != null) {\n+      SemanticAttributes.NET_PEER_IP.set(span, peerIp);\n     }\n+    String peerService = mapToPeer(peerName);\n+    peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;", "originalCommit": "92f83fc6110599948562c3ef34db149a01603cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "803f5eae5f465008a691deb85ebae81b7e9c7fd2", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\nindex 82b2cf8d07..0989510b1f 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java\n\n@@ -105,7 +105,9 @@ public abstract class BaseDecorator {\n       SemanticAttributes.NET_PEER_IP.set(span, peerIp);\n     }\n     String peerService = mapToPeer(peerName);\n-    peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;\n+    if (peerService == null) {\n+      peerService = mapToPeer(peerIp);\n+    }\n     if (peerService != null) {\n       SemanticAttributes.PEER_SERVICE.set(span, peerService);\n     }\n"}}, {"oid": "803f5eae5f465008a691deb85ebae81b7e9c7fd2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/803f5eae5f465008a691deb85ebae81b7e9c7fd2", "message": "Create BaseTracer", "committedDate": "2020-07-22T19:01:38Z", "type": "commit"}, {"oid": "7c274a4bbbf9adb7e3a9d71f45d2fddf118bb48f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c274a4bbbf9adb7e3a9d71f45d2fddf118bb48f", "message": "Merge remote-tracking branch 'upstream/master' into heya/refactor-net-peer", "committedDate": "2020-07-22T19:14:07Z", "type": "commit"}, {"oid": "8a393753262ea0ae1061bfec24b9bc1ead1b2aa8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8a393753262ea0ae1061bfec24b9bc1ead1b2aa8", "message": "Use BaseTracer.setPeer", "committedDate": "2020-07-22T19:20:20Z", "type": "commit"}]}