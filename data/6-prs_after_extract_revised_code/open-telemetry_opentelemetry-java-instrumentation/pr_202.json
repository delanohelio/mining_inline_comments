{"pr_number": 202, "pr_title": "Made gRPC instrumenter compliant with semantic conventions", "pr_createdAt": "2020-03-02T22:26:08Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202", "timeline": [{"oid": "f42b3cfcd0a54538fd3a7846dc3a4e8d4509dd4e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f42b3cfcd0a54538fd3a7846dc3a4e8d4509dd4e", "message": "Added service name and corrected span name", "committedDate": "2020-03-02T16:32:14Z", "type": "commit"}, {"oid": "179545e344498696d409e0916292ee17db9175b1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/179545e344498696d409e0916292ee17db9175b1", "message": "Support peer address for clients", "committedDate": "2020-03-02T20:50:21Z", "type": "commit"}, {"oid": "86eb6a938f7c09d8991056122ad04604c00814ab", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/86eb6a938f7c09d8991056122ad04604c00814ab", "message": "Added server peer address resolution", "committedDate": "2020-03-02T21:56:43Z", "type": "commit"}, {"oid": "4253e94c1b326e69a7c37f3b578d76a5e9515b0a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4253e94c1b326e69a7c37f3b578d76a5e9515b0a", "message": "Added constants for new tag names", "committedDate": "2020-03-02T22:17:47Z", "type": "commit"}, {"oid": "47f8a02f790c94a4aa4d4bee8b8dd75f1116a20c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/47f8a02f790c94a4aa4d4bee8b8dd75f1116a20c", "message": "Cosmetic change", "committedDate": "2020-03-02T22:23:37Z", "type": "commit"}, {"oid": "72697a11a221252c2be2d01dc26a578dbcd09b70", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72697a11a221252c2be2d01dc26a578dbcd09b70", "message": "Fixed muzzle issue", "committedDate": "2020-03-02T22:42:46Z", "type": "commit"}, {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e224b263d84123fdc3f320b92616ee56be4332e5", "message": "Better handling of addresses", "committedDate": "2020-03-03T03:20:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNjIxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386826210", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"))\n          \n          \n            \n                    .or(named(\"io.grpc.ManagedChannelBuilder\"));\n          \n          \n            \n                return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"));\n          \n      \n    \n    \n  \n\nsafeHasSuperType includes itself already", "author": "trask", "createdAt": "2020-03-03T06:48:42Z", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java", "diffHunk": "@@ -38,7 +43,8 @@ public GrpcClientBuilderInstrumentation() {\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return named(\"io.grpc.internal.AbstractManagedChannelImplBuilder\");\n+    return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"))\n+        .or(named(\"io.grpc.ManagedChannelBuilder\"));", "originalCommit": "e224b263d84123fdc3f320b92616ee56be4332e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxODc5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387018798", "bodyText": "Done!", "author": "prydin", "createdAt": "2020-03-03T13:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNjIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "c3b50db1465e4ade50e8f8748a78cbed5c725522", "chunk": "diff --git a/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java b/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java\nindex 5498724a2c..a7ccd4517c 100644\n--- a/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java\n+++ b/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java\n\n@@ -43,8 +45,7 @@ public class GrpcClientBuilderInstrumentation extends Instrumenter.Default {\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"))\n-        .or(named(\"io.grpc.ManagedChannelBuilder\"));\n+    return extendsClass(named(\"io.grpc.ManagedChannelBuilder\"));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzg2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386827866", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                span.setAttribute(MoreTags.RESOURCE_NAME, methodName);\n          \n      \n    \n    \n  \n\nlet's remove RESOURCE_NAME here. @tylerbenson has mentioned previously that in general RESOURCE_NAME should be migrated to span name", "author": "trask", "createdAt": "2020-03-03T06:54:40Z", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -30,27 +30,34 @@\n import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.grpc.common.GrpcHelper;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.AttributeValue;\n import io.opentelemetry.trace.Span;\n+import java.net.InetSocketAddress;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n \n public class TracingClientInterceptor implements ClientInterceptor {\n+  private final InetSocketAddress peerAddress;\n \n-  public static final TracingClientInterceptor INSTANCE = new TracingClientInterceptor();\n+  public TracingClientInterceptor(final InetSocketAddress peerAddress) {\n+    this.peerAddress = peerAddress;\n+  }\n \n   @Override\n   public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n       final MethodDescriptor<ReqT, RespT> method,\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final Span span = TRACER.spanBuilder(\"grpc.client\").setSpanKind(CLIENT).startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    final String methodName = method.getFullMethodName();\n+    final Span span = TRACER.spanBuilder(methodName).setSpanKind(CLIENT).startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);", "originalCommit": "e224b263d84123fdc3f320b92616ee56be4332e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0Nzk4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387047981", "bodyText": "Done!", "author": "prydin", "createdAt": "2020-03-03T14:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c3b50db1465e4ade50e8f8748a78cbed5c725522", "chunk": "diff --git a/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java b/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\nindex be27d59c2f..ec69909646 100644\n--- a/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n+++ b/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n\n@@ -29,7 +29,6 @@ import io.grpc.ForwardingClientCallListener;\n import io.grpc.Metadata;\n import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n-import io.opentelemetry.auto.instrumentation.api.MoreTags;\n import io.opentelemetry.auto.instrumentation.grpc.common.GrpcHelper;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.AttributeValue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTA1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386829051", "bodyText": "There's a fancy (and more efficient) way to do this.\nCheck out the context store functionality, e.g. here and here\nUsing this will inject a field into ManagedChannelBuilder to track the InetSocketAddress if possible (and if not it will fall back to using WeakMap)", "author": "trask", "createdAt": "2020-03-03T06:58:54Z", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.grpc.common;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.bootstrap.WeakMap;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.trace.Span;\n+import java.net.InetSocketAddress;\n+\n+public class GrpcHelper {\n+  private static final WeakMap<ManagedChannelBuilder, InetSocketAddress> builderToAddress =\n+      WeakMap.Provider.newWeakMap();", "originalCommit": "e224b263d84123fdc3f320b92616ee56be4332e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NTI2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387045262", "bodyText": "Done!", "author": "prydin", "createdAt": "2020-03-03T14:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3b50db1465e4ade50e8f8748a78cbed5c725522", "chunk": "diff --git a/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java b/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java\nindex e1b3dcd4df..7020c3c9fd 100644\n--- a/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java\n+++ b/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java\n\n@@ -15,16 +15,11 @@\n  */\n package io.opentelemetry.auto.instrumentation.grpc.common;\n \n-import io.grpc.ManagedChannelBuilder;\n-import io.opentelemetry.auto.bootstrap.WeakMap;\n import io.opentelemetry.auto.instrumentation.api.MoreTags;\n import io.opentelemetry.trace.Span;\n import java.net.InetSocketAddress;\n \n public class GrpcHelper {\n-  private static final WeakMap<ManagedChannelBuilder, InetSocketAddress> builderToAddress =\n-      WeakMap.Provider.newWeakMap();\n-\n   public static void prepareSpan(\n       final Span span, final String methodName, final InetSocketAddress peerAddress) {\n     String serviceName =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTg4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386829887", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                span.setAttribute(MoreTags.RESOURCE_NAME, methodName);\n          \n      \n    \n    \n  \n\nsame comment as above", "author": "trask", "createdAt": "2020-03-03T07:01:48Z", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -57,7 +62,11 @@ private TracingServerInterceptor() {}\n       spanBuilder.setNoParent();\n     }\n     final Span span = spanBuilder.startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, call.getMethodDescriptor().getFullMethodName());\n+    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);", "originalCommit": "e224b263d84123fdc3f320b92616ee56be4332e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0ODE1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387048155", "bodyText": "Done", "author": "prydin", "createdAt": "2020-03-03T14:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c3b50db1465e4ade50e8f8748a78cbed5c725522", "chunk": "diff --git a/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java b/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\nindex 94e0062ef1..d44c99247d 100644\n--- a/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n+++ b/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n\n@@ -62,7 +61,6 @@ public class TracingServerInterceptor implements ServerInterceptor {\n       spanBuilder.setNoParent();\n     }\n     final Span span = spanBuilder.startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);\n     final SocketAddress addr = call.getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);\n     final InetSocketAddress iAddr =\n         addr instanceof InetSocketAddress ? (InetSocketAddress) addr : null;\n"}}, {"oid": "b1f79c595fd94df82df0fa595400a5719ad360b3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1f79c595fd94df82df0fa595400a5719ad360b3", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-auto-instr-java into prydin-grpc-semantics", "committedDate": "2020-03-03T13:21:17Z", "type": "commit"}, {"oid": "c3b50db1465e4ade50e8f8748a78cbed5c725522", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c3b50db1465e4ade50e8f8748a78cbed5c725522", "message": "Addressed PR comments", "committedDate": "2020-03-03T14:20:39Z", "type": "commit"}]}