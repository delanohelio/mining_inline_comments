{"pr_number": 735, "pr_title": "Inject span context into log4j2 2.13.2+ context.", "pr_createdAt": "2020-07-20T08:48:36Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735", "timeline": [{"oid": "b38abb562b7795ae8ae965d36979c7053d0dee30", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b38abb562b7795ae8ae965d36979c7053d0dee30", "message": "Inject span context into log4j2 context.", "committedDate": "2020-07-20T08:42:22Z", "type": "commit"}, {"oid": "5c50516bfb07d6689ae4078dc4e6bba18656abb1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5c50516bfb07d6689ae4078dc4e6bba18656abb1", "message": "Newline", "committedDate": "2020-07-20T08:48:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4ODgzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457188835", "bodyText": "Blargh, wish trace ID was a string! /cc @jkwatson", "author": "anuraaga", "createdAt": "2020-07-20T08:49:44Z", "path": "instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.log4j.v2_13_2;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+@AutoService(ContextDataProvider.class)\n+public class OpenTelemetryContextDataProvider implements ContextDataProvider {\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Span currentSpan = TracingContextUtils.getCurrentSpan();\n+    if (currentSpan == null || !currentSpan.getContext().isValid()) {\n+      return Collections.emptyMap();\n+    }\n+\n+    Map<String, String> contextData = new HashMap<>();\n+    SpanContext spanContext = currentSpan.getContext();\n+    contextData.put(\"traceId\", spanContext.getTraceId().toLowerBase16());", "originalCommit": "5c50516bfb07d6689ae4078dc4e6bba18656abb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczOTcyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457739728", "bodyText": "yes yes yes. me, too", "author": "jkwatson", "createdAt": "2020-07-20T23:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4ODgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "00dad0e4b1ca8136d162e0d93d892d447655b0ea", "chunk": "diff --git a/instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java b/instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java\nindex 352390233..7fdbfc2a9 100644\n--- a/instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java\n+++ b/instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java\n\n@@ -30,7 +30,7 @@ public class OpenTelemetryContextDataProvider implements ContextDataProvider {\n   @Override\n   public Map<String, String> supplyContextData() {\n     Span currentSpan = TracingContextUtils.getCurrentSpan();\n-    if (currentSpan == null || !currentSpan.getContext().isValid()) {\n+    if (!currentSpan.getContext().isValid()) {\n       return Collections.emptyMap();\n     }\n \n"}}, {"oid": "b454f9fc449ce4ea8033eacdf1d4d49851eb20ce", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b454f9fc449ce4ea8033eacdf1d4d49851eb20ce", "message": "Newline", "committedDate": "2020-07-20T08:50:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjAxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457222012", "bodyText": "getCurrentSpan never returns null", "author": "iNikem", "createdAt": "2020-07-20T09:33:24Z", "path": "instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.log4j.v2_13_2;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+@AutoService(ContextDataProvider.class)\n+public class OpenTelemetryContextDataProvider implements ContextDataProvider {\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Span currentSpan = TracingContextUtils.getCurrentSpan();\n+    if (currentSpan == null || !currentSpan.getContext().isValid()) {", "originalCommit": "b454f9fc449ce4ea8033eacdf1d4d49851eb20ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00dad0e4b1ca8136d162e0d93d892d447655b0ea", "chunk": "diff --git a/instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java b/instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java\nindex 352390233..7fdbfc2a9 100644\n--- a/instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java\n+++ b/instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java\n\n@@ -30,7 +30,7 @@ public class OpenTelemetryContextDataProvider implements ContextDataProvider {\n   @Override\n   public Map<String, String> supplyContextData() {\n     Span currentSpan = TracingContextUtils.getCurrentSpan();\n-    if (currentSpan == null || !currentSpan.getContext().isValid()) {\n+    if (!currentSpan.getContext().isValid()) {\n       return Collections.emptyMap();\n     }\n \n"}}, {"oid": "00dad0e4b1ca8136d162e0d93d892d447655b0ea", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/00dad0e4b1ca8136d162e0d93d892d447655b0ea", "message": "Docs", "committedDate": "2020-07-20T09:49:29Z", "type": "commit"}, {"oid": "b48c4a7aff3955f698cf9495ae42f37ec9e808ac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b48c4a7aff3955f698cf9495ae42f37ec9e808ac", "message": "Spotless.md", "committedDate": "2020-07-20T09:53:09Z", "type": "commit"}, {"oid": "f2e32b9ef0c391ccb1e27d16f2d14c54abb6c7df", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f2e32b9ef0c391ccb1e27d16f2d14c54abb6c7df", "message": "Add traceFlags and some Javadoc\n\nCo-authored-by: David Poncelow <dponcelow@splunk.com>", "committedDate": "2020-07-20T10:18:10Z", "type": "commit"}, {"oid": "620c195030dea4ce4b480b6ab337891f56abfdd1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/620c195030dea4ce4b480b6ab337891f56abfdd1", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-20T23:05:07Z", "type": "commit"}]}