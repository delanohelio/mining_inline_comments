{"pr_number": 583, "pr_title": "Merge changes from dd-trace-java 0.56.0", "pr_createdAt": "2020-06-26T06:07:49Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445988422", "bodyText": "Realize it's the same as the previous pattern so optional update, we should probably set this to an unmodifaibleSet in the constructor instead of passing a mutable object around?", "author": "anuraaga", "createdAt": "2020-06-26T06:17:47Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -16,53 +16,80 @@\n \n package io.opentelemetry.auto.bootstrap;\n \n+import io.opentelemetry.auto.bootstrap.instrumentation.api.Pair;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n-import java.nio.file.NoSuchFileException;\n import java.security.Permission;\n import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class InternalJarURLHandler extends URLStreamHandler {\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n-  private JarFile bootstrapJarFile;\n+\n+  private static final WeakReference<Pair<String, JarEntry>> NULL = new WeakReference<>(null);\n+\n+  private final String name;\n+  private final FileNotInInternalJar notFound;\n+  private final Set<String> packages = new HashSet<>();", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNDcwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446024708", "bodyText": "This is only used within a very narrow context where (in the Datadog codebase, at least) we will not mutate the set once it's built, making the unmodifiable wrapper a pointless cost. If we wanted to present a view of this set to untrusted callers, we would have wrapped it.", "author": "richardstartin", "createdAt": "2020-06-26T07:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNjQ5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446036490", "bodyText": "Note that in this fork, you're not actually using the set at all, so I recommend just removing it and saving a bit of space.", "author": "richardstartin", "createdAt": "2020-06-26T08:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446583727", "bodyText": "thx! removed", "author": "trask", "createdAt": "2020-06-28T00:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\nindex 828e1453dc..a707b5d082 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\n\n@@ -27,9 +27,6 @@ import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n import java.security.Permission;\n-import java.util.Enumeration;\n-import java.util.HashSet;\n-import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445989574", "bodyText": "Just curious, is it possible for this class to be accessed from multiple threads? I wonder how many, if there are a lot of copies of this buffer, it's unfortunate they all get stuck in memory after classloading is done sort of lean towards not using a threadlocal for it, string seems pretty small.", "author": "anuraaga", "createdAt": "2020-06-26T06:21:46Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -75,12 +102,32 @@ protected URLConnection openConnection(final URL url) throws IOException {\n       // nullInputStream() is not available until Java 11\n       return new InternalJarURLConnection(url, new ByteArrayInputStream(new byte[0]));\n     }\n-    final JarEntry entry = filenameToEntry.get(filename);\n-    if (null != entry) {\n-      return new InternalJarURLConnection(url, bootstrapJarFile.getInputStream(entry));\n+    // believe it or not, we're going to get called twice for this,\n+    // and the key will be a new object each time.\n+    Pair<String, JarEntry> pair = cache.get();\n+    if (null == pair || !filename.equals(pair.getLeft())) {\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDMxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446580319", "bodyText": "it will come here from any thread that triggers class loading for AgentClassLoader, so likely not too many different threads, as the various instrumentation classes will only be loaded the first time they are used\nwe could do ThreadLocal<WeakReference<StringBuilder>>, but that wouldn't get it out of the ThreadLocal map, which is also nice to reduce collisions\nso maybe WeakReference<ThreadLocal<StringBuilder>>?\n(i'm also ok with no change here)\n@richardstartin wdyt?", "author": "trask", "createdAt": "2020-06-27T23:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MTY5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446591696", "bodyText": "I sort of lean towards not using the threadlocal optimization for these small strings and let it all be garbage that can be collected, over the complexity of weak references, since I suspect this is a tiny part of the optimization in the attached PR.\nBut if we're only leaking a few hundred bytes it's not so bad either.", "author": "anuraaga", "createdAt": "2020-06-28T02:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzMTQ2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446631469", "bodyText": "@trask actually this was an insurance policy against there ever being more than one thread accessing the variable. We haven't seen any negative consequences in our benchmarks, but I think it's a question of \"take it or leave it\" - if it doesn't look right to you, please just change it.", "author": "richardstartin", "createdAt": "2020-06-28T10:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyMDg5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446820897", "bodyText": "removed the ThreadLocal<StringBuilder>", "author": "trask", "createdAt": "2020-06-29T07:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\nindex 828e1453dc..a707b5d082 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\n\n@@ -107,7 +80,7 @@ public class InternalJarURLHandler extends URLStreamHandler {\n     Pair<String, JarEntry> pair = cache.get();\n     if (null == pair || !filename.equals(pair.getLeft())) {\n       StringBuilder sb = JAR_ENTRY_QUERY.get();\n-      sb.append(this.name).append(filename);\n+      sb.append(name).append(filename);\n       if (filename.endsWith(\".class\")) {\n         sb.append(\"data\");\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445992323", "bodyText": "This is because this is a performance optimization, not for correctness, I'm presuming", "author": "anuraaga", "createdAt": "2020-06-26T06:30:14Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -75,12 +102,32 @@ protected URLConnection openConnection(final URL url) throws IOException {\n       // nullInputStream() is not available until Java 11\n       return new InternalJarURLConnection(url, new ByteArrayInputStream(new byte[0]));\n     }\n-    final JarEntry entry = filenameToEntry.get(filename);\n-    if (null != entry) {\n-      return new InternalJarURLConnection(url, bootstrapJarFile.getInputStream(entry));\n+    // believe it or not, we're going to get called twice for this,\n+    // and the key will be a new object each time.\n+    Pair<String, JarEntry> pair = cache.get();\n+    if (null == pair || !filename.equals(pair.getLeft())) {\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();\n+      sb.append(this.name).append(filename);\n+      if (filename.endsWith(\".class\")) {\n+        sb.append(\"data\");\n+      }\n+      String classFileName = sb.toString();\n+      sb.setLength(0);\n+      JarEntry entry = bootstrapJarFile.getJarEntry(classFileName);\n+      if (null != entry) {\n+        pair = Pair.of(filename, entry);\n+        // this mechanism intentionally does not ensure visibility of this write, because it doesn't", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzQ4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446023482", "bodyText": "Reference assignment is atomic so this cannot lead to inconsistency.\nIf some other thread doesn't see the write, they just see another instance or null, and may or may not do extra work.", "author": "richardstartin", "createdAt": "2020-06-26T07:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNTAwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446025008", "bodyText": "may or may not do extra work.\n\nSo the answer is yes :) I think the comment can be more self-explantory by talking about the motivation instead of the detail\n// This is a performance optimization, so in the rare event this write is not visible to another thread, it just means the same work is recomputed but does not affect consistency.", "author": "anuraaga", "createdAt": "2020-06-26T07:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mzg1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446583858", "bodyText": "updated comment", "author": "trask", "createdAt": "2020-06-28T00:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\nindex 828e1453dc..a707b5d082 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\n\n@@ -107,7 +80,7 @@ public class InternalJarURLHandler extends URLStreamHandler {\n     Pair<String, JarEntry> pair = cache.get();\n     if (null == pair || !filename.equals(pair.getLeft())) {\n       StringBuilder sb = JAR_ENTRY_QUERY.get();\n-      sb.append(this.name).append(filename);\n+      sb.append(name).append(filename);\n       if (filename.endsWith(\".class\")) {\n         sb.append(\"data\");\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMjY2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446332669", "bodyText": "If I understand correctly, all these changes to this class are performance optimisations, no? Is there any benchmark or, even better, a real use-case, which demonstrate the benefit of this?", "author": "iNikem", "createdAt": "2020-06-26T18:02:56Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -16,53 +16,80 @@\n \n package io.opentelemetry.auto.bootstrap;\n \n+import io.opentelemetry.auto.bootstrap.instrumentation.api.Pair;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n-import java.nio.file.NoSuchFileException;\n import java.security.Permission;\n import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class InternalJarURLHandler extends URLStreamHandler {\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n-  private JarFile bootstrapJarFile;\n+\n+  private static final WeakReference<Pair<String, JarEntry>> NULL = new WeakReference<>(null);\n+\n+  private final String name;\n+  private final FileNotInInternalJar notFound;", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3NjI3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446576277", "bodyText": "see DataDog/dd-trace-java#1598", "author": "trask", "createdAt": "2020-06-27T22:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMjY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\nindex 828e1453dc..a707b5d082 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java\n\n@@ -27,9 +27,6 @@ import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n import java.security.Permission;\n-import java.util.Enumeration;\n-import java.util.HashSet;\n-import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDMxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446334310", "bodyText": "I would love to see some explanations, why these class loaders in particular are listed.", "author": "iNikem", "createdAt": "2020-06-26T18:06:35Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -116,7 +116,11 @@ public boolean matches(final T target) {\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")) {\n+                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3ODM0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446778342", "bodyText": "this was not changed in this PR, but class loaders are listed in here so that java-classloader instrumentation will not be skipped. the way these are caught and added here is that AgentTestRunner does not use AdditionalLibraryIgnoresMatcher, and then it validates that there are no classes that were instrumented that would have been skipped by AdditionalLibraryIgnoresMatcher, and so the test fails, and then you add suppress the class from being skipped in here", "author": "trask", "createdAt": "2020-06-29T05:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/AdditionalLibraryIgnoresMatcher.java b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/AdditionalLibraryIgnoresMatcher.java\nindex 935552cc87..6e8765323c 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/AdditionalLibraryIgnoresMatcher.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/AdditionalLibraryIgnoresMatcher.java\n\n@@ -116,11 +116,7 @@ public class AdditionalLibraryIgnoresMatcher<T extends TypeDescription>\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n-            || name.equals(\n-                \"org.springframework.boot.context.embedded.EmbeddedWebApplicationContext\")\n-            || name.equals(\n-                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")) {\n+                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")) {\n           return false;\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTE0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446335146", "bodyText": "What is the motivation of this optimisation?", "author": "iNikem", "createdAt": "2020-06-26T18:08:25Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -293,4 +300,19 @@ private static boolean matchesPrimitive(String longName, String shortName) {\n     }\n     return null;\n   }\n+\n+  private static List<Mismatch> lazyAdd(List<Mismatch> mismatches, Mismatch mismatch) {", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NTU1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446355551", "bodyText": "I suggest you review the original PR.", "author": "tylerbenson", "createdAt": "2020-06-26T18:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTE3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446581172", "bodyText": "added comment", "author": "trask", "createdAt": "2020-06-28T00:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "chunk": "diff --git a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/muzzle/ReferenceMatcher.java b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/muzzle/ReferenceMatcher.java\nindex 7d00ca1013..c50f3d9060 100644\n--- a/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/muzzle/ReferenceMatcher.java\n+++ b/agent-tooling/src/main/java/io/opentelemetry/auto/tooling/muzzle/ReferenceMatcher.java\n\n@@ -301,12 +301,14 @@ public final class ReferenceMatcher {\n     return null;\n   }\n \n+  // optimization to avoid ArrayList allocation in the common case when there are no mismatches\n   private static List<Mismatch> lazyAdd(List<Mismatch> mismatches, Mismatch mismatch) {\n     List<Mismatch> result = mismatches.isEmpty() ? new ArrayList<Mismatch>() : mismatches;\n     result.add(mismatch);\n     return result;\n   }\n \n+  // optimization to avoid ArrayList allocation in the common case when there are no mismatches\n   private static List<Mismatch> lazyAddAll(List<Mismatch> mismatches, List<Mismatch> toAdd) {\n     if (!toAdd.isEmpty()) {\n       List<Mismatch> result = mismatches.isEmpty() ? new ArrayList<Mismatch>() : mismatches;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzAxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337017", "bodyText": "Why extract this to a field? It is still used only inside one method, no?", "author": "iNikem", "createdAt": "2020-06-26T18:12:14Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/AgentClassLoader.java", "diffHunk": "@@ -36,11 +36,14 @@\n \n   private static final String AGENT_INITIALIZER_JAR = System.getProperty(\"ota.initializer.jar\", \"\");\n \n+  protected final InternalJarURLHandler internalJarURLHandler;", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDQ1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446584454", "bodyText": "updated", "author": "trask", "createdAt": "2020-06-28T00:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/AgentClassLoader.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/AgentClassLoader.java\nindex ba24176d96..583f8f7ec0 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/AgentClassLoader.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/AgentClassLoader.java\n\n@@ -36,8 +36,6 @@ public class AgentClassLoader extends URLClassLoader {\n \n   private static final String AGENT_INITIALIZER_JAR = System.getProperty(\"ota.initializer.jar\", \"\");\n \n-  protected final InternalJarURLHandler internalJarURLHandler;\n-\n   // Calling java.lang.instrument.Instrumentation#appendToBootstrapClassLoaderSearch\n   // adds a jar to the bootstrap class lookup, but not to the resource lookup.\n   // As a workaround, we keep a reference to the bootstrap jar\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446340583", "bodyText": "This attribute is certainly not from semantic convention. Why should we want this into Otel?", "author": "iNikem", "createdAt": "2020-06-26T18:19:59Z", "path": "instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafkaclients/KafkaProducerInstrumentation.java", "diffHunk": "@@ -93,6 +93,11 @@ public static SpanWithScope onEnter(\n \n       callback = new ProducerCallback(callback, span);\n \n+      boolean isTombstone = record.value() == null && !record.headers().iterator().hasNext();\n+      if (isTombstone) {\n+        span.setAttribute(\"tombstone\", true);", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5NjMyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446596328", "bodyText": "we (currently at least) capture lots of span attributes that are not defined by semantic conventions\nmaybe better if we prefixed this, e.g. kafka.tombstone, so it doesn't look like a semantic attribute?", "author": "trask", "createdAt": "2020-06-28T03:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTQyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446651427", "bodyText": "\"We are already doing strange things, let us do more strange things\" is not exactly good reason :) We already have unanswered questions \"why do we have this attribute here\", such as dispatcher.target or servlet.origin. I am hesitant to add more.", "author": "iNikem", "createdAt": "2020-06-28T13:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NjY5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446686695", "bodyText": "i created #602 to track and make decision about this", "author": "trask", "createdAt": "2020-06-28T19:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "chunk": "diff --git a/instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafkaclients/KafkaProducerInstrumentation.java b/instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafkaclients/KafkaProducerInstrumentation.java\nindex 0c5d668400..60dd5dbfea 100644\n--- a/instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafkaclients/KafkaProducerInstrumentation.java\n+++ b/instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafkaclients/KafkaProducerInstrumentation.java\n\n@@ -93,11 +93,6 @@ public final class KafkaProducerInstrumentation extends Instrumenter.Default {\n \n       callback = new ProducerCallback(callback, span);\n \n-      boolean isTombstone = record.value() == null && !record.headers().iterator().hasNext();\n-      if (isTombstone) {\n-        span.setAttribute(\"tombstone\", true);\n-      }\n-\n       // Do not inject headers for batch versions below 2\n       // This is how similar check is being done in Kafka client itself:\n       // https://github.com/apache/kafka/blob/05fcfde8f69b0349216553f711fdfc3f0259c601/clients/src/main/java/org/apache/kafka/common/record/MemoryRecordsBuilder.java#L411-L412\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0Mjc1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446342750", "bodyText": "This will benefit from documentation. This is a good place to document how different instrumentation coordinate with each other and for what purpose.", "author": "iNikem", "createdAt": "2020-06-26T18:25:02Z", "path": "instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springwebmvc/WebApplicationContextInstrumentation.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+\n+@AutoService(Instrumenter.class)", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "chunk": "diff --git a/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springwebmvc/WebApplicationContextInstrumentation.java b/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springwebmvc/WebApplicationContextInstrumentation.java\ndeleted file mode 100644\nindex 2d3e6b4c3a..0000000000\n--- a/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springwebmvc/WebApplicationContextInstrumentation.java\n+++ /dev/null\n\n@@ -1,93 +0,0 @@\n-/*\n- * Copyright The OpenTelemetry Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.opentelemetry.auto.instrumentation.springwebmvc;\n-\n-import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n-import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n-import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n-import static java.util.Collections.singletonMap;\n-import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n-import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n-\n-import com.google.auto.service.AutoService;\n-import io.opentelemetry.auto.tooling.Instrumenter;\n-import java.util.Map;\n-import net.bytebuddy.asm.Advice;\n-import net.bytebuddy.description.method.MethodDescription;\n-import net.bytebuddy.description.type.TypeDescription;\n-import net.bytebuddy.matcher.ElementMatcher;\n-import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n-import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n-\n-@AutoService(Instrumenter.class)\n-public class WebApplicationContextInstrumentation extends Instrumenter.Default {\n-  public WebApplicationContextInstrumentation() {\n-    super(\"spring-web\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n-    // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\n-        \"org.springframework.context.support.AbstractApplicationContext\",\n-        \"org.springframework.web.context.WebApplicationContext\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<TypeDescription> typeMatcher() {\n-    return extendsClass(named(\"org.springframework.context.support.AbstractApplicationContext\"))\n-        .and(implementsInterface(named(\"org.springframework.web.context.WebApplicationContext\")));\n-  }\n-\n-  @Override\n-  public String[] helperClassNames() {\n-    return new String[] {\n-      packageName + \".SpringWebMvcDecorator\",\n-      packageName + \".HandlerMappingResourceNameFilter\",\n-      packageName + \".HandlerMappingResourceNameFilter$BeanDefinition\",\n-    };\n-  }\n-\n-  @Override\n-  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-\n-    return singletonMap(\n-        isMethod()\n-            .and(named(\"postProcessBeanFactory\"))\n-            .and(\n-                takesArgument(\n-                    0,\n-                    named(\n-                        \"org.springframework.beans.factory.config.ConfigurableListableBeanFactory\"))),\n-        WebApplicationContextInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n-  }\n-\n-  public static class FilterInjectingAdvice {\n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static void onEnter(\n-        @Advice.Argument(0) final ConfigurableListableBeanFactory beanFactory) {\n-      if (beanFactory instanceof BeanDefinitionRegistry\n-          && !beanFactory.containsBean(\"otelAutoDispatcherFilter\")) {\n-\n-        ((BeanDefinitionRegistry) beanFactory)\n-            .registerBeanDefinition(\n-                \"otelAutoDispatcherFilter\", new HandlerMappingResourceNameFilter.BeanDefinition());\n-      }\n-    }\n-  }\n-}\n"}}, {"oid": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "message": "Add comment", "committedDate": "2020-06-29T05:55:53Z", "type": "forcePushed"}, {"oid": "9c0cb20ef66cb32eceeedf0c1b4547f2b4c03a0c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c0cb20ef66cb32eceeedf0c1b4547f2b4c03a0c", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)", "committedDate": "2020-06-29T05:58:04Z", "type": "forcePushed"}, {"oid": "0982ce3fa8b2c3e7d0a6f174d37d4693cc6363a9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0982ce3fa8b2c3e7d0a6f174d37d4693cc6363a9", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)", "committedDate": "2020-06-29T16:31:08Z", "type": "forcePushed"}, {"oid": "6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "message": "Shorten jar names (prefixes of runtime classnames) (DataDog/dd-trace-java#1592)", "committedDate": "2020-06-30T18:13:20Z", "type": "commit"}, {"oid": "abd9744accf0f57e7c6fa58355eedc790e228449", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/abd9744accf0f57e7c6fa58355eedc790e228449", "message": "Route classloads to classloader by package (DataDog/dd-trace-java#1598)", "committedDate": "2020-06-30T18:13:20Z", "type": "commit"}, {"oid": "dfa000d92ce4f3fff4273513d9d7923ea871bae5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dfa000d92ce4f3fff4273513d9d7923ea871bae5", "message": "Do not eagerly load classfiles at startup (DataDog/dd-trace-java#1606)", "committedDate": "2020-06-30T18:13:20Z", "type": "commit"}, {"oid": "45dc02d9649bddd18342fd1141b676fc301474a7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/45dc02d9649bddd18342fd1141b676fc301474a7", "message": "Fix Spring handler mapping affecting character encoding (DataDog/dd-trace-java#1595)", "committedDate": "2020-06-30T18:13:20Z", "type": "commit"}, {"oid": "d2e6c62a8de64e12c4b1ae275964f7d5ee188eac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d2e6c62a8de64e12c4b1ae275964f7d5ee188eac", "message": "Enable build cache (DataDog/dd-trace-java#1607)", "committedDate": "2020-06-30T18:13:21Z", "type": "commit"}, {"oid": "cab03e058024a2a94eba372cd101d9ca630d0c3d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cab03e058024a2a94eba372cd101d9ca630d0c3d", "message": "Remove anonymous class from spring webmvc-3.1 (DataDog/dd-trace-java#1611)", "committedDate": "2020-06-30T18:13:21Z", "type": "commit"}, {"oid": "6b0ee86c99897bafd1b16f2d22967ae2fcdb5e5e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6b0ee86c99897bafd1b16f2d22967ae2fcdb5e5e", "message": "Exclude JDK class references at build time, reduce allocation in ReferenceMatcher (DataDog/dd-trace-java#1613)", "committedDate": "2020-06-30T18:13:21Z", "type": "commit"}, {"oid": "de1aa4bf9bcb42a82ae284922095675ff6911020", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/de1aa4bf9bcb42a82ae284922095675ff6911020", "message": "Remove noisy logging in InternalJarURLHandler (DataDog/dd-trace-java#1609)", "committedDate": "2020-06-30T18:13:21Z", "type": "commit"}, {"oid": "b558c5022925dcbfe71cba756f37ce4de5507b64", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b558c5022925dcbfe71cba756f37ce4de5507b64", "message": "Add missing classloader matchers for expensive matchers (DataDog/dd-trace-java#1617)", "committedDate": "2020-06-30T18:13:22Z", "type": "commit"}, {"oid": "4a943c8411127c4b3bf702e6e4d1ee3f5377f8a7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4a943c8411127c4b3bf702e6e4d1ee3f5377f8a7", "message": "Use Spotless for formatting (DataDog/dd-trace-java#1619)", "committedDate": "2020-06-30T18:15:48Z", "type": "commit"}, {"oid": "9e28828cb5d4769562af7a0e77ce91a0ca43dea0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9e28828cb5d4769562af7a0e77ce91a0ca43dea0", "message": "Handle kafka tombstones (DataDog/dd-trace-java#1622)", "committedDate": "2020-06-30T18:15:50Z", "type": "commit"}, {"oid": "91ad9965d3f7d2bd21e59beff4662431b390c5d6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91ad9965d3f7d2bd21e59beff4662431b390c5d6", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)", "committedDate": "2020-06-30T18:15:50Z", "type": "commit"}, {"oid": "91ad9965d3f7d2bd21e59beff4662431b390c5d6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91ad9965d3f7d2bd21e59beff4662431b390c5d6", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)", "committedDate": "2020-06-30T18:15:50Z", "type": "forcePushed"}]}