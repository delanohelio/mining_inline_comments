{"pr_number": 1309, "pr_title": "Add system metrics", "pr_createdAt": "2020-10-02T12:50:16Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309", "timeline": [{"oid": "3b216ea5fcc3a5ac70b0e45f5ab4f373a4eacf53", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b216ea5fcc3a5ac70b0e45f5ab4f373a4eacf53", "message": "initial system metrics\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-02T12:42:36Z", "type": "commit"}, {"oid": "b64b61a37d36c458415917ac74c701058cffd1fe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b64b61a37d36c458415917ac74c701058cffd1fe", "message": "Merge branch 'master' into system-metrics", "committedDate": "2020-10-02T12:46:57Z", "type": "commit"}, {"oid": "93c986e6ca1b922837301e0a9e4b0b47f617fcd9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/93c986e6ca1b922837301e0a9e4b0b47f617fcd9", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics", "committedDate": "2020-10-05T12:20:18Z", "type": "commit"}, {"oid": "0053ccf7b664551c94d2ac752eb89e67564fb286", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0053ccf7b664551c94d2ac752eb89e67564fb286", "message": "update copyright\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-05T13:54:59Z", "type": "commit"}, {"oid": "fa2b7de9f12a26f39a10457a08c4dfdb4740125b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa2b7de9f12a26f39a10457a08c4dfdb4740125b", "message": "add system.disk callbacks\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-06T13:18:28Z", "type": "commit"}, {"oid": "eb33c8e7b21174a6f3db8b228d30dfd9eeb774f6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eb33c8e7b21174a6f3db8b228d30dfd9eeb774f6", "message": "add java metrics and tests\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-07T14:21:25Z", "type": "commit"}, {"oid": "38d554eb2c418e13d905f866f8b10438d4b06ae2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38d554eb2c418e13d905f866f8b10438d4b06ae2", "message": "Merge branch 'master' into system-metrics", "committedDate": "2020-10-07T15:33:30Z", "type": "commit"}, {"oid": "9a1888132c045349cd053eefd687c14884f5ef2f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a1888132c045349cd053eefd687c14884f5ef2f", "message": "update observers type and tests\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-08T12:50:24Z", "type": "commit"}, {"oid": "05c6bf3ce0d9ce573e14296060d21663640725ef", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/05c6bf3ce0d9ce573e14296060d21663640725ef", "message": "Merge branch 'master' into system-metrics", "committedDate": "2020-10-21T12:18:32Z", "type": "commit"}, {"oid": "77abab95e199bb1982b2f58299dd2a1d17ef8620", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/77abab95e199bb1982b2f58299dd2a1d17ef8620", "message": "move metrics to instrumentation/oshi/library\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-21T13:08:07Z", "type": "commit"}, {"oid": "c675ce1e048e931a957f296c4851695eb9494de2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c675ce1e048e931a957f296c4851695eb9494de2", "message": "update oshi to 5.3.1\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-21T13:09:34Z", "type": "commit"}, {"oid": "5e520f46e75b1ec50e8c90b21f2841c1e021a942", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5e520f46e75b1ec50e8c90b21f2841c1e021a942", "message": "Merge branch 'master' into system-metrics", "committedDate": "2020-10-23T02:28:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1OTU5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512259599", "bodyText": "maybe rename to ProcessMetrics to make clear these are not just standard Java-provided metrics?", "author": "trask", "createdAt": "2020-10-26T20:50:38Z", "path": "instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/JavaMetrics.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.oshi;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.metrics.AsynchronousInstrument.Callback;\n+import io.opentelemetry.metrics.AsynchronousInstrument.DoubleResult;\n+import io.opentelemetry.metrics.AsynchronousInstrument.LongResult;\n+import io.opentelemetry.metrics.Meter;\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import oshi.SystemInfo;\n+import oshi.software.os.OSProcess;\n+import oshi.software.os.OperatingSystem;\n+\n+/** Java Runtime Metrics Utility */\n+public class JavaMetrics {", "originalCommit": "5e520f46e75b1ec50e8c90b21f2841c1e021a942", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4MjIwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512382206", "bodyText": "renamed", "author": "malafeev", "createdAt": "2020-10-27T02:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1OTU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b8dfeff4e44dbbe31145f15f5b80e6f7d17ac03a", "chunk": "diff --git a/instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/JavaMetrics.java b/instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/ProcessMetrics.java\nsimilarity index 95%\nrename from instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/JavaMetrics.java\nrename to instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/ProcessMetrics.java\nindex 65332d7a98..9cd20214a4 100644\n--- a/instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/JavaMetrics.java\n+++ b/instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/ProcessMetrics.java\n\n@@ -18,14 +18,14 @@ import oshi.software.os.OSProcess;\n import oshi.software.os.OperatingSystem;\n \n /** Java Runtime Metrics Utility */\n-public class JavaMetrics {\n+public class ProcessMetrics {\n   private static final String TYPE_LABEL_KEY = \"type\";\n \n-  private JavaMetrics() {}\n+  private ProcessMetrics() {}\n \n   /** Register observers for java runtime metrics */\n   public static void registerObservers() {\n-    Meter meter = OpenTelemetry.getMeterProvider().get(JavaMetrics.class.getName());\n+    Meter meter = OpenTelemetry.getMeterProvider().get(ProcessMetrics.class.getName());\n     SystemInfo systemInfo = new SystemInfo();\n     OperatingSystem osInfo = systemInfo.getOperatingSystem();\n     OSProcess processInfo = osInfo.getProcess(osInfo.getProcessId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDI2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512260264", "bodyText": "can this be part of the other (future) module that only depends on JVM-provided metrics?", "author": "trask", "createdAt": "2020-10-26T20:51:44Z", "path": "instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/JavaMetrics.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.oshi;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.metrics.AsynchronousInstrument.Callback;\n+import io.opentelemetry.metrics.AsynchronousInstrument.DoubleResult;\n+import io.opentelemetry.metrics.AsynchronousInstrument.LongResult;\n+import io.opentelemetry.metrics.Meter;\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import oshi.SystemInfo;\n+import oshi.software.os.OSProcess;\n+import oshi.software.os.OperatingSystem;\n+\n+/** Java Runtime Metrics Utility */\n+public class JavaMetrics {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+\n+  private JavaMetrics() {}\n+\n+  /** Register observers for java runtime metrics */\n+  public static void registerObservers() {\n+    Meter meter = OpenTelemetry.getMeterProvider().get(JavaMetrics.class.getName());\n+    SystemInfo systemInfo = new SystemInfo();\n+    OperatingSystem osInfo = systemInfo.getOperatingSystem();\n+    OSProcess processInfo = osInfo.getProcess(osInfo.getProcessId());\n+\n+    meter\n+        .longUpDownSumObserverBuilder(\"runtime.java.memory\")\n+        .setDescription(\"Runtime Java memory\")\n+        .setUnit(\"bytes\")\n+        .build()\n+        .setCallback(\n+            new Callback<LongResult>() {\n+              @Override\n+              public void update(LongResult r) {\n+                processInfo.updateAttributes();\n+                r.observe(processInfo.getResidentSetSize(), Labels.of(TYPE_LABEL_KEY, \"rss\"));\n+                r.observe(processInfo.getVirtualSize(), Labels.of(TYPE_LABEL_KEY, \"vms\"));\n+              }\n+            });\n+\n+    meter\n+        .doubleValueObserverBuilder(\"runtime.java.cpu_time\")\n+        .setDescription(\"Runtime Java CPU time\")\n+        .setUnit(\"seconds\")\n+        .build()\n+        .setCallback(\n+            new Callback<DoubleResult>() {\n+              @Override\n+              public void update(DoubleResult r) {\n+                processInfo.updateAttributes();\n+                r.observe(processInfo.getUserTime() * 1000, Labels.of(TYPE_LABEL_KEY, \"user\"));\n+                r.observe(processInfo.getKernelTime() * 1000, Labels.of(TYPE_LABEL_KEY, \"system\"));\n+              }\n+            });\n+\n+    meter\n+        .longValueObserverBuilder(\"runtime.java.gc_count\")\n+        .setDescription(\"Runtime Java GC count\")\n+        .setUnit(\"counts\")\n+        .build()\n+        .setCallback(\n+            new Callback<LongResult>() {\n+              @Override\n+              public void update(LongResult r) {\n+                long gcCount = 0;\n+                for (final GarbageCollectorMXBean gcBean :\n+                    ManagementFactory.getGarbageCollectorMXBeans()) {\n+                  gcCount += gcBean.getCollectionCount();\n+                }\n+\n+                r.observe(gcCount, Labels.of(TYPE_LABEL_KEY, \"count\"));\n+              }\n+            });", "originalCommit": "5e520f46e75b1ec50e8c90b21f2841c1e021a942", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4MTYzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512381639", "bodyText": "It depends on oshi.\nIf I will move it to separate module it will have the same dependency on oshi as system metrics.\nActivation will be the same: presence of oshi dependency.\nTherefore I doubt to split it to two modules.", "author": "malafeev", "createdAt": "2020-10-27T02:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4MjU4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512382584", "bodyText": "runtime.java.gc_count metric has dependency on oshi?", "author": "trask", "createdAt": "2020-10-27T02:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4MzA3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512383078", "bodyText": "oh, you mean only this specific metric, I thought you are talking about all jvm metrics here.", "author": "malafeev", "createdAt": "2020-10-27T02:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4MzYzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512383635", "bodyText": "I can create separate instrumentation/jvm/libarary with only this metric.", "author": "malafeev", "createdAt": "2020-10-27T02:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTExNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512385116", "bodyText": "\ud83d\udc4d how about removing runtime.java.gc_count from this PR and then we'll merge this (sorry again it took so long!), and u can send separate PR with instrumentation/jvm/library?", "author": "trask", "createdAt": "2020-10-27T02:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NjA1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1309#discussion_r512386054", "bodyText": "removed", "author": "malafeev", "createdAt": "2020-10-27T02:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "b8dfeff4e44dbbe31145f15f5b80e6f7d17ac03a", "chunk": "diff --git a/instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/JavaMetrics.java b/instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/ProcessMetrics.java\nsimilarity index 95%\nrename from instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/JavaMetrics.java\nrename to instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/ProcessMetrics.java\nindex 65332d7a98..9cd20214a4 100644\n--- a/instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/JavaMetrics.java\n+++ b/instrumentation/oshi/library/src/main/java/io/opentelemetry/instrumentation/oshi/ProcessMetrics.java\n\n@@ -18,14 +18,14 @@ import oshi.software.os.OSProcess;\n import oshi.software.os.OperatingSystem;\n \n /** Java Runtime Metrics Utility */\n-public class JavaMetrics {\n+public class ProcessMetrics {\n   private static final String TYPE_LABEL_KEY = \"type\";\n \n-  private JavaMetrics() {}\n+  private ProcessMetrics() {}\n \n   /** Register observers for java runtime metrics */\n   public static void registerObservers() {\n-    Meter meter = OpenTelemetry.getMeterProvider().get(JavaMetrics.class.getName());\n+    Meter meter = OpenTelemetry.getMeterProvider().get(ProcessMetrics.class.getName());\n     SystemInfo systemInfo = new SystemInfo();\n     OperatingSystem osInfo = systemInfo.getOperatingSystem();\n     OSProcess processInfo = osInfo.getProcess(osInfo.getProcessId());\n"}}, {"oid": "b8dfeff4e44dbbe31145f15f5b80e6f7d17ac03a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b8dfeff4e44dbbe31145f15f5b80e6f7d17ac03a", "message": "rename JavaMetrics to ProcessMetrics\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-27T02:39:07Z", "type": "commit"}, {"oid": "f02697573169218e71623426fa3dfe9e16bec732", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f02697573169218e71623426fa3dfe9e16bec732", "message": "get rid of runtime.java.gc_count\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-27T02:52:57Z", "type": "commit"}, {"oid": "ed75264a4696a16d84c3a1eac903d0d80adbc7d7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed75264a4696a16d84c3a1eac903d0d80adbc7d7", "message": "update observer for system.memory.utilization\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-27T02:59:16Z", "type": "commit"}, {"oid": "a762928f5d224d16965d75b3efa3a01f72879035", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a762928f5d224d16965d75b3efa3a01f72879035", "message": "fix tests\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-27T03:55:00Z", "type": "commit"}, {"oid": "6483731ce7c581be0d87749331bf480020e9d94f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6483731ce7c581be0d87749331bf480020e9d94f", "message": "Merge branch 'master' into system-metrics", "committedDate": "2020-10-27T03:58:04Z", "type": "commit"}, {"oid": "02c908483bc459d9e9cf50b9869b1311809690d1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/02c908483bc459d9e9cf50b9869b1311809690d1", "message": "sync with master\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-27T04:18:53Z", "type": "commit"}, {"oid": "1f192cad4222e72c224c9247ee370879a04e0cb4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1f192cad4222e72c224c9247ee370879a04e0cb4", "message": "sync with master\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-27T04:20:18Z", "type": "commit"}, {"oid": "6172a68731fb5d76f2901daffadf95701268d9f6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6172a68731fb5d76f2901daffadf95701268d9f6", "message": "Merge branch 'master' into system-metrics", "committedDate": "2020-10-27T13:18:45Z", "type": "commit"}]}