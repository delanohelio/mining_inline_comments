{"pr_number": 1963, "pr_title": "Move QueuedThreadPool from executors to jetty ", "pr_createdAt": "2020-12-23T19:57:12Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963", "timeline": [{"oid": "ac194182bf159599a6dfde547a671db2e5deeeb3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac194182bf159599a6dfde547a671db2e5deeeb3", "message": "rename to be more specific before introducing new module", "committedDate": "2020-12-23T00:05:38Z", "type": "commit"}, {"oid": "e1459281cac99cf9d961f418803539de3551faf8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1459281cac99cf9d961f418803539de3551faf8", "message": "move module over to jetty", "committedDate": "2020-12-23T18:14:01Z", "type": "commit"}, {"oid": "8c2b7fe98f024021c5486ec339f1b6ca86e2fdf2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8c2b7fe98f024021c5486ec339f1b6ca86e2fdf2", "message": "reinstante QueuedThreadPool so that the executor functionality is covered.", "committedDate": "2020-12-23T19:52:42Z", "type": "commit"}, {"oid": "8d734c1963db0c563f865b77a8a22de56acd4228", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8d734c1963db0c563f865b77a8a22de56acd4228", "message": "add tests", "committedDate": "2020-12-23T19:52:52Z", "type": "commit"}, {"oid": "13d9029464b97335c110c6a923c00408be913f41", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/13d9029464b97335c110c6a923c00408be913f41", "message": "afraid of stars.", "committedDate": "2020-12-23T21:10:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNDY5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r548324699", "bodyText": "I don't think this needs to be a separate InstrumentationModule, and can glob onto the existing jetty InstrumentationModule", "author": "trask", "createdAt": "2020-12-23T23:58:28Z", "path": "instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.jetty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class JettyQueuedThreadPoolModule extends InstrumentationModule {", "originalCommit": "13d9029464b97335c110c6a923c00408be913f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MzY2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r551463667", "bodyText": "Why not keep them separate?  Is it a problem to do that?  If we do combine them, we'll want to rename the existing module then probably from JettyHandlerInstrumentationModule to just JettyInstrumentationModule or something because it will no longer be handler specific.\nI can make that change, just not clear on the advantage.  I'm also uncertain about bringing over the contextStore() override since it doesn't necessarily seem to apply to jetty handlers.", "author": "breedx-splk", "createdAt": "2021-01-04T17:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNDY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI2NDY4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r552264689", "bodyText": "the advantage of having a single InstrumentationModule is that we know either all or none of the instrumentation will be applied (not muzzled), which reduces the number of states we have to think about when developing or troubleshooting\nthe contextStore() is ok, at the InstrumentationModule level it's just a combination of all context stores needed for instrumentation in the module", "author": "trask", "createdAt": "2021-01-05T23:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNDY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f03c8678ce85116ec5817556e5727343a7589bd7", "chunk": "diff --git a/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java b/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\nindex ab9058fafa..f3d2469f04 100644\n--- a/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n+++ b/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n\n@@ -48,11 +48,6 @@ public class JettyQueuedThreadPoolModule extends InstrumentationModule {\n \n   public static class JettyQueuedThreadPoolInstrumentation implements TypeInstrumentation {\n \n-    @Override\n-    public ElementMatcher<ClassLoader> classLoaderOptimization() {\n-      return any();\n-    }\n-\n     @Override\n     public ElementMatcher<TypeDescription> typeMatcher() {\n       return named(\"org.eclipse.jetty.util.thread.QueuedThreadPool\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNDgzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r548324837", "bodyText": "should be able to leave this out\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public ElementMatcher<ClassLoader> classLoaderOptimization() {\n          \n          \n            \n                  return any();\n          \n          \n            \n                }", "author": "trask", "createdAt": "2020-12-23T23:59:08Z", "path": "instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.jetty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class JettyQueuedThreadPoolModule extends InstrumentationModule {\n+\n+  public JettyQueuedThreadPoolModule() {\n+    super(\"executor\", \"non-standard-executor\");\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new JettyQueuedThreadPoolInstrumentation());\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  public static class JettyQueuedThreadPoolInstrumentation implements TypeInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<ClassLoader> classLoaderOptimization() {\n+      return any();\n+    }\n+", "originalCommit": "13d9029464b97335c110c6a923c00408be913f41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f03c8678ce85116ec5817556e5727343a7589bd7", "chunk": "diff --git a/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java b/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\nindex ab9058fafa..f3d2469f04 100644\n--- a/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n+++ b/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n\n@@ -48,11 +48,6 @@ public class JettyQueuedThreadPoolModule extends InstrumentationModule {\n \n   public static class JettyQueuedThreadPoolInstrumentation implements TypeInstrumentation {\n \n-    @Override\n-    public ElementMatcher<ClassLoader> classLoaderOptimization() {\n-      return any();\n-    }\n-\n     @Override\n     public ElementMatcher<TypeDescription> typeMatcher() {\n       return named(\"org.eclipse.jetty.util.thread.QueuedThreadPool\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNDk1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r548324952", "bodyText": "I think this is clear enough from typeMatcher\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // org.eclipse.jetty.util.thread.QueuedThreadPool", "author": "trask", "createdAt": "2020-12-23T23:59:43Z", "path": "instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.jetty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class JettyQueuedThreadPoolModule extends InstrumentationModule {\n+\n+  public JettyQueuedThreadPoolModule() {\n+    super(\"executor\", \"non-standard-executor\");\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new JettyQueuedThreadPoolInstrumentation());\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  public static class JettyQueuedThreadPoolInstrumentation implements TypeInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<ClassLoader> classLoaderOptimization() {\n+      return any();\n+    }\n+\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"org.eclipse.jetty.util.thread.QueuedThreadPool\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+\n+      transformers.put(\n+          // org.eclipse.jetty.util.thread.QueuedThreadPool", "originalCommit": "13d9029464b97335c110c6a923c00408be913f41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f03c8678ce85116ec5817556e5727343a7589bd7", "chunk": "diff --git a/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java b/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\nindex ab9058fafa..f3d2469f04 100644\n--- a/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n+++ b/instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n\n@@ -48,11 +48,6 @@ public class JettyQueuedThreadPoolModule extends InstrumentationModule {\n \n   public static class JettyQueuedThreadPoolInstrumentation implements TypeInstrumentation {\n \n-    @Override\n-    public ElementMatcher<ClassLoader> classLoaderOptimization() {\n-      return any();\n-    }\n-\n     @Override\n     public ElementMatcher<TypeDescription> typeMatcher() {\n       return named(\"org.eclipse.jetty.util.thread.QueuedThreadPool\");\n"}}, {"oid": "f03c8678ce85116ec5817556e5727343a7589bd7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f03c8678ce85116ec5817556e5727343a7589bd7", "message": "Update instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2021-01-04T17:21:34Z", "type": "commit"}, {"oid": "dc9bbaf035e12bb8d77c9994e4bdb61e8986e5ac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc9bbaf035e12bb8d77c9994e4bdb61e8986e5ac", "message": "Update instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2021-01-04T17:22:04Z", "type": "commit"}, {"oid": "94f6d580f7ac609613f84c9668731b85fb3b5ced", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/94f6d580f7ac609613f84c9668731b85fb3b5ced", "message": "move JettyQueuedThreadPoolModule into the other module.", "committedDate": "2021-01-06T17:41:45Z", "type": "commit"}, {"oid": "cfe273f1dd15e6bf371266a4bf8893bba9b94a44", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cfe273f1dd15e6bf371266a4bf8893bba9b94a44", "message": "rename module", "committedDate": "2021-01-06T17:52:23Z", "type": "commit"}]}