{"pr_number": 1893, "pr_title": "HTTP client instrumentation cleanup, part 0", "pr_createdAt": "2020-12-13T22:21:31Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893", "timeline": [{"oid": "2c6e639de19221c66c0346b3e0c36b5758fa4412", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c6e639de19221c66c0346b3e0c36b5758fa4412", "message": "HTTP client instrumentation cleanup, part 0", "committedDate": "2020-12-13T22:20:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542076374", "bodyText": "I'd put this method in a PR with at least one usage of it - inClientSpan / withClientSpan are quite clear here, but not this method which isn't used. One way to keep PRs small is to change just one usage in one PR, and remaining usages in a mechanical way in another.", "author": "anuraaga", "createdAt": "2020-12-14T02:50:01Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "originalCommit": "2c6e639de19221c66c0346b3e0c36b5758fa4412", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3Nzc0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542077745", "bodyText": "added example", "author": "trask", "createdAt": "2020-12-14T02:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMTY5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542111699", "bodyText": "I think a while ago we had a thought that this pattern is technically the most precise\nThrowable err = null;\ntry (context.makeCurrent()) {\n  doWork();\n} catch (Throwable t) {\n  err = t;\n} finally {\n  span.end\n}\nIf so I guess this class isn't only useful for bytecode manipulation - do you think we can remove the two variants and merge into a single end method eventually?", "author": "anuraaga", "createdAt": "2020-12-14T04:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMzcxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542123714", "bodyText": "Added TODO comment on this method to revisit", "author": "trask", "createdAt": "2020-12-14T05:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "cfd546702150fcb003785f44a9acc32fd7827435", "chunk": "diff --git a/instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java b/instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java\nindex 83da530bae..06261ba5ae 100644\n--- a/instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java\n+++ b/instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java\n\n@@ -117,7 +117,8 @@ public abstract class HttpClientTracer<REQUEST, CARRIER, RESPONSE> extends BaseT\n   }\n \n   /** Convenience method primarily for bytecode instrumentation. */\n-  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {\n+  public void endMaybeExceptionally(\n+      Context context, RESPONSE response, @Nullable Throwable throwable) {\n     if (throwable != null) {\n       endExceptionally(context, throwable);\n     } else {\n"}}, {"oid": "a03ecc075e3b0c18ef3375a0447972342c402fdb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a03ecc075e3b0c18ef3375a0447972342c402fdb", "message": "Add an example", "committedDate": "2020-12-14T02:55:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMjA0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542112045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {\n          \n          \n            \n              public void endMaybeExceptionally(Context context, RESPONSE response, @Nullable Throwable throwable) {", "author": "anuraaga", "createdAt": "2020-12-14T04:57:49Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "originalCommit": "a03ecc075e3b0c18ef3375a0447972342c402fdb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cfd546702150fcb003785f44a9acc32fd7827435", "chunk": "diff --git a/instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java b/instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java\nindex 83da530bae..06261ba5ae 100644\n--- a/instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java\n+++ b/instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java\n\n@@ -117,7 +117,8 @@ public abstract class HttpClientTracer<REQUEST, CARRIER, RESPONSE> extends BaseT\n   }\n \n   /** Convenience method primarily for bytecode instrumentation. */\n-  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {\n+  public void endMaybeExceptionally(\n+      Context context, RESPONSE response, @Nullable Throwable throwable) {\n     if (throwable != null) {\n       endExceptionally(context, throwable);\n     } else {\n"}}, {"oid": "cfd546702150fcb003785f44a9acc32fd7827435", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cfd546702150fcb003785f44a9acc32fd7827435", "message": "Mark param Nullable", "committedDate": "2020-12-14T05:29:09Z", "type": "commit"}, {"oid": "1b7d1ed0615c792e084a5b4ff120fcfbfaf3041d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1b7d1ed0615c792e084a5b4ff120fcfbfaf3041d", "message": "Add comment", "committedDate": "2020-12-14T05:35:58Z", "type": "commit"}, {"oid": "48ac23a9242cdcc9c0e8cdb82f34c23c62d3686d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/48ac23a9242cdcc9c0e8cdb82f34c23c62d3686d", "message": "Merge remote-tracking branch 'upstream/master' into http-client-instrumentation-part-0", "committedDate": "2020-12-14T23:42:49Z", "type": "commit"}]}