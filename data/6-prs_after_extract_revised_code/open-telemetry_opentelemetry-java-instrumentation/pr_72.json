{"pr_number": 72, "pr_title": "Refactored grpc instumenter", "pr_createdAt": "2020-01-18T02:49:49Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72", "timeline": [{"oid": "ae2b67b05029a93a9dfefb1b311f43fac2387878", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ae2b67b05029a93a9dfefb1b311f43fac2387878", "message": "Refactored grpc instrumenter", "committedDate": "2020-01-18T02:21:33Z", "type": "commit"}, {"oid": "b98e4f96a8935b4a5475fe08fd941c7e0fa7b4bc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b98e4f96a8935b4a5475fe08fd941c7e0fa7b4bc", "message": "Cleaned up formatting", "committedDate": "2020-01-18T02:40:42Z", "type": "commit"}, {"oid": "9e5b64df7b352ed4471e586ad87868f03a303634", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9e5b64df7b352ed4471e586ad87868f03a303634", "message": "Simplified interceptors", "committedDate": "2020-01-18T02:48:42Z", "type": "commit"}, {"oid": "9ee2715e5b34d1bf62a4bf7e9521a6c24dea8324", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9ee2715e5b34d1bf62a4bf7e9521a6c24dea8324", "message": "Fixed some more formatting", "committedDate": "2020-01-18T03:03:08Z", "type": "commit"}, {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "message": "Formatting", "committedDate": "2020-01-18T03:13:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzc0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203746", "bodyText": "let's keep the scope activation:\ntry (final Scope scope = TRACER.withSpan(span)) {\n  ...\n}", "author": "trask", "createdAt": "2020-01-18T03:50:05Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\nindex 7c2238c9b5..2ae3a4d1be 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n\n@@ -28,19 +29,21 @@ public class TracingClientInterceptor implements ClientInterceptor {\n \n     final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n     span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    DECORATE.afterStart(span);\n-\n-    final ClientCall<ReqT, RespT> result;\n-    try {\n-      // call other interceptors\n-      result = next.newCall(method, callOptions);\n-    } catch (final Throwable e) {\n-      DECORATE.onError(span, e);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n-      throw e;\n+    try (final Scope scope = TRACER.withSpan(span)) {\n+      DECORATE.afterStart(span);\n+\n+      final ClientCall<ReqT, RespT> result;\n+      try {\n+        // call other interceptors\n+        result = next.newCall(method, callOptions);\n+      } catch (final Throwable e) {\n+        DECORATE.onError(span, e);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        throw e;\n+      }\n+      return new TracingClientCall<>(span, result);\n     }\n-    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzg0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203848", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T03:51:45Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\nindex 7c2238c9b5..2ae3a4d1be 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n\n@@ -28,19 +29,21 @@ public class TracingClientInterceptor implements ClientInterceptor {\n \n     final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n     span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    DECORATE.afterStart(span);\n-\n-    final ClientCall<ReqT, RespT> result;\n-    try {\n-      // call other interceptors\n-      result = next.newCall(method, callOptions);\n-    } catch (final Throwable e) {\n-      DECORATE.onError(span, e);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n-      throw e;\n+    try (final Scope scope = TRACER.withSpan(span)) {\n+      DECORATE.afterStart(span);\n+\n+      final ClientCall<ReqT, RespT> result;\n+      try {\n+        // call other interceptors\n+        result = next.newCall(method, callOptions);\n+      } catch (final Throwable e) {\n+        DECORATE.onError(span, e);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        throw e;\n+      }\n+      return new TracingClientCall<>(span, result);\n     }\n-    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzg2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203865", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T03:52:21Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\nindex 7c2238c9b5..2ae3a4d1be 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n\n@@ -28,19 +29,21 @@ public class TracingClientInterceptor implements ClientInterceptor {\n \n     final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n     span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    DECORATE.afterStart(span);\n-\n-    final ClientCall<ReqT, RespT> result;\n-    try {\n-      // call other interceptors\n-      result = next.newCall(method, callOptions);\n-    } catch (final Throwable e) {\n-      DECORATE.onError(span, e);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n-      throw e;\n+    try (final Scope scope = TRACER.withSpan(span)) {\n+      DECORATE.afterStart(span);\n+\n+      final ClientCall<ReqT, RespT> result;\n+      try {\n+        // call other interceptors\n+        result = next.newCall(method, callOptions);\n+      } catch (final Throwable e) {\n+        DECORATE.onError(span, e);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        throw e;\n+      }\n+      return new TracingClientCall<>(span, result);\n     }\n-    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzg4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203880", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  System.out.println(\"onMessage\");", "author": "trask", "createdAt": "2020-01-18T03:52:45Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         super.sendMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n   }\n \n   static final class TracingClientCallListener<RespT>\n       extends ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCallListener(final AgentSpan span, final ClientCall.Listener<RespT> delegate) {\n+    TracingClientCallListener(final Span span, final ClientCall.Listener<RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final RespT message) {\n-      final AgentSpan messageSpan =\n-          startSpan(\"grpc.message\", span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      System.out.println(\"onMessage\");", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\nindex 7c2238c9b5..2ae3a4d1be 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n\n@@ -28,19 +29,21 @@ public class TracingClientInterceptor implements ClientInterceptor {\n \n     final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n     span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    DECORATE.afterStart(span);\n-\n-    final ClientCall<ReqT, RespT> result;\n-    try {\n-      // call other interceptors\n-      result = next.newCall(method, callOptions);\n-    } catch (final Throwable e) {\n-      DECORATE.onError(span, e);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n-      throw e;\n+    try (final Scope scope = TRACER.withSpan(span)) {\n+      DECORATE.afterStart(span);\n+\n+      final ClientCall<ReqT, RespT> result;\n+      try {\n+        // call other interceptors\n+        result = next.newCall(method, callOptions);\n+      } catch (final Throwable e) {\n+        DECORATE.onError(span, e);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        throw e;\n+      }\n+      return new TracingClientCall<>(span, result);\n     }\n-    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzk4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203985", "bodyText": "let's keep the scope activation:\nfinal Scope scope = TRACER.withSpan(messageSpan);", "author": "trask", "createdAt": "2020-01-18T03:54:43Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         super.sendMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n   }\n \n   static final class TracingClientCallListener<RespT>\n       extends ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCallListener(final AgentSpan span, final ClientCall.Listener<RespT> delegate) {\n+    TracingClientCallListener(final Span span, final ClientCall.Listener<RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final RespT message) {\n-      final AgentSpan messageSpan =\n-          startSpan(\"grpc.message\", span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      System.out.println(\"onMessage\");\n+      final Span messageSpan = TRACER.spanBuilder(\"grpc.message\").setParent(span).startSpan();\n+      messageSpan.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(messageSpan);\n-      final AgentScope scope = activateSpan(messageSpan, true);", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\nindex 7c2238c9b5..2ae3a4d1be 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n\n@@ -28,19 +29,21 @@ public class TracingClientInterceptor implements ClientInterceptor {\n \n     final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n     span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    DECORATE.afterStart(span);\n-\n-    final ClientCall<ReqT, RespT> result;\n-    try {\n-      // call other interceptors\n-      result = next.newCall(method, callOptions);\n-    } catch (final Throwable e) {\n-      DECORATE.onError(span, e);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n-      throw e;\n+    try (final Scope scope = TRACER.withSpan(span)) {\n+      DECORATE.afterStart(span);\n+\n+      final ClientCall<ReqT, RespT> result;\n+      try {\n+        // call other interceptors\n+        result = next.newCall(method, callOptions);\n+      } catch (final Throwable e) {\n+        DECORATE.onError(span, e);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        throw e;\n+      }\n+      return new TracingClientCall<>(span, result);\n     }\n-    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDAxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204014", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T03:55:38Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         super.sendMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n   }\n \n   static final class TracingClientCallListener<RespT>\n       extends ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCallListener(final AgentSpan span, final ClientCall.Listener<RespT> delegate) {\n+    TracingClientCallListener(final Span span, final ClientCall.Listener<RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final RespT message) {\n-      final AgentSpan messageSpan =\n-          startSpan(\"grpc.message\", span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      System.out.println(\"onMessage\");\n+      final Span messageSpan = TRACER.spanBuilder(\"grpc.message\").setParent(span).startSpan();\n+      messageSpan.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(messageSpan);\n-      final AgentScope scope = activateSpan(messageSpan, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(messageSpan, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(messageSpan);\n-        scope.close();\n+        messageSpan.end();\n       }\n     }\n \n     @Override\n     public void onClose(final Status status, final Metadata trailers) {\n       DECORATE.onClose(span, status);\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\nindex 7c2238c9b5..2ae3a4d1be 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n\n@@ -28,19 +29,21 @@ public class TracingClientInterceptor implements ClientInterceptor {\n \n     final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n     span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    DECORATE.afterStart(span);\n-\n-    final ClientCall<ReqT, RespT> result;\n-    try {\n-      // call other interceptors\n-      result = next.newCall(method, callOptions);\n-    } catch (final Throwable e) {\n-      DECORATE.onError(span, e);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n-      throw e;\n+    try (final Scope scope = TRACER.withSpan(span)) {\n+      DECORATE.afterStart(span);\n+\n+      final ClientCall<ReqT, RespT> result;\n+      try {\n+        // call other interceptors\n+        result = next.newCall(method, callOptions);\n+      } catch (final Throwable e) {\n+        DECORATE.onError(span, e);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        throw e;\n+      }\n+      return new TracingClientCall<>(span, result);\n     }\n-    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDAzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204031", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T03:55:52Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         super.sendMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n   }\n \n   static final class TracingClientCallListener<RespT>\n       extends ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCallListener(final AgentSpan span, final ClientCall.Listener<RespT> delegate) {\n+    TracingClientCallListener(final Span span, final ClientCall.Listener<RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final RespT message) {\n-      final AgentSpan messageSpan =\n-          startSpan(\"grpc.message\", span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      System.out.println(\"onMessage\");\n+      final Span messageSpan = TRACER.spanBuilder(\"grpc.message\").setParent(span).startSpan();\n+      messageSpan.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(messageSpan);\n-      final AgentScope scope = activateSpan(messageSpan, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(messageSpan, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(messageSpan);\n-        scope.close();\n+        messageSpan.end();\n       }\n     }\n \n     @Override\n     public void onClose(final Status status, final Metadata trailers) {\n       DECORATE.onClose(span, status);\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onClose(status, trailers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onReady() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\nindex 7c2238c9b5..2ae3a4d1be 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java\n\n@@ -28,19 +29,21 @@ public class TracingClientInterceptor implements ClientInterceptor {\n \n     final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n     span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    DECORATE.afterStart(span);\n-\n-    final ClientCall<ReqT, RespT> result;\n-    try {\n-      // call other interceptors\n-      result = next.newCall(method, callOptions);\n-    } catch (final Throwable e) {\n-      DECORATE.onError(span, e);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n-      throw e;\n+    try (final Scope scope = TRACER.withSpan(span)) {\n+      DECORATE.afterStart(span);\n+\n+      final ClientCall<ReqT, RespT> result;\n+      try {\n+        // call other interceptors\n+        result = next.newCall(method, callOptions);\n+      } catch (final Throwable e) {\n+        DECORATE.onError(span, e);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        throw e;\n+      }\n+      return new TracingClientCall<>(span, result);\n     }\n-    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDA4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204086", "bodyText": "let's stay consistent with above and import io.opentelemetry.trace.Status and fully qualify io.grpc.Status", "author": "trask", "createdAt": "2020-01-18T03:57:23Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/GrpcServerDecorator.java", "diffHunk": "@@ -23,16 +26,16 @@ protected String component() {\n     return \"grpc-server\";\n   }\n \n-  public AgentSpan onClose(final AgentSpan span, final Status status) {\n+  public Span onClose(final Span span, final Status status) {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDE1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204155", "bodyText": "let's keep the scope activation", "author": "trask", "createdAt": "2020-01-18T03:58:51Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -30,13 +27,11 @@ private TracingServerInterceptor() {}\n       final Metadata headers,\n       final ServerCallHandler<ReqT, RespT> next) {\n \n-    final Context spanContext = propagate().extract(headers, GETTER);\n-    final AgentSpan span =\n-        startSpan(\"grpc.server\", spanContext)\n-            .setAttribute(MoreTags.RESOURCE_NAME, call.getMethodDescriptor().getFullMethodName());\n-    DECORATE.afterStart(span);\n+    final SpanContext spanContext = TRACER.getHttpTextFormat().extract(headers, GETTER);\n+    final Span span = TRACER.spanBuilder(\"grpc.server\").setParent(spanContext).startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, call.getMethodDescriptor().getFullMethodName());\n \n-    final AgentScope scope = activateSpan(span, false);", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\nindex d94877b112..10a7f44ebf 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n\n@@ -34,18 +35,22 @@ public class TracingServerInterceptor implements ServerInterceptor {\n     DECORATE.afterStart(span);\n \n     final ServerCall.Listener<ReqT> result;\n-    try {\n-      // Wrap the server call so that we can decorate the span\n-      // with the resulting status\n-      final TracingServerCall<ReqT, RespT> tracingServerCall = new TracingServerCall<>(span, call);\n-\n-      // call other interceptors\n-      result = next.startCall(tracingServerCall, headers);\n-    } catch (final Throwable e) {\n-      DECORATE.onError(span, e);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n-      throw e;\n+    try (final Scope scope = TRACER.withSpan(span)) {\n+\n+      try {\n+        // Wrap the server call so that we can decorate the span\n+        // with the resulting status\n+        final TracingServerCall<ReqT, RespT> tracingServerCall =\n+            new TracingServerCall<>(span, call);\n+\n+        // call other interceptors\n+        result = next.startCall(tracingServerCall, headers);\n+      } catch (final Throwable e) {\n+        DECORATE.onError(span, e);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        throw e;\n+      }\n     }\n \n     // This ensures the server implementation can see the span in scope\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDE4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T03:59:48Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -61,17 +54,17 @@ private TracingServerInterceptor() {}\n \n   static final class TracingServerCall<ReqT, RespT>\n       extends ForwardingServerCall.SimpleForwardingServerCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingServerCall(final AgentSpan span, final ServerCall<ReqT, RespT> delegate) {\n+    TracingServerCall(final Span span, final ServerCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void close(final Status status, final Metadata trailers) {\n       DECORATE.onClose(span, status);\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\nindex d94877b112..10a7f44ebf 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n\n@@ -64,7 +69,7 @@ public class TracingServerInterceptor implements ServerInterceptor {\n     @Override\n     public void close(final Status status, final Metadata trailers) {\n       DECORATE.onClose(span, status);\n-      try {\n+      try (final Scope scope = TRACER.withSpan(span)) {\n         delegate().close(status, trailers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDIxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204218", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T04:00:37Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -82,82 +75,81 @@ public void close(final Status status, final Metadata trailers) {\n \n   static final class TracingServerCallListener<ReqT>\n       extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {\n-    private final AgentSpan span;\n+    private final Span span;\n \n-    TracingServerCallListener(final AgentSpan span, final ServerCall.Listener<ReqT> delegate) {\n+    TracingServerCallListener(final Span span, final ServerCall.Listener<ReqT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final ReqT message) {\n-      final AgentSpan span =\n-          startSpan(\"grpc.message\", this.span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      final Span span =\n+          TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n+      span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n-      final AgentScope scope = activateSpan(span, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(this.span);\n-        this.span.finish();\n+        this.span.end();\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        scope.close();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onHalfClose() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\nindex d94877b112..10a7f44ebf 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n\n@@ -88,6 +93,7 @@ public class TracingServerInterceptor implements ServerInterceptor {\n           TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n       span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n+      final Scope scope = TRACER.withSpan(span);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDIzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204235", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T04:01:03Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -82,82 +75,81 @@ public void close(final Status status, final Metadata trailers) {\n \n   static final class TracingServerCallListener<ReqT>\n       extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {\n-    private final AgentSpan span;\n+    private final Span span;\n \n-    TracingServerCallListener(final AgentSpan span, final ServerCall.Listener<ReqT> delegate) {\n+    TracingServerCallListener(final Span span, final ServerCall.Listener<ReqT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final ReqT message) {\n-      final AgentSpan span =\n-          startSpan(\"grpc.message\", this.span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      final Span span =\n+          TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n+      span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n-      final AgentScope scope = activateSpan(span, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(this.span);\n-        this.span.finish();\n+        this.span.end();\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        scope.close();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onHalfClose() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onHalfClose();\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void onCancel() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\nindex d94877b112..10a7f44ebf 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n\n@@ -88,6 +93,7 @@ public class TracingServerInterceptor implements ServerInterceptor {\n           TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n       span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n+      final Scope scope = TRACER.withSpan(span);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDI1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204250", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T04:01:28Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -82,82 +75,81 @@ public void close(final Status status, final Metadata trailers) {\n \n   static final class TracingServerCallListener<ReqT>\n       extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {\n-    private final AgentSpan span;\n+    private final Span span;\n \n-    TracingServerCallListener(final AgentSpan span, final ServerCall.Listener<ReqT> delegate) {\n+    TracingServerCallListener(final Span span, final ServerCall.Listener<ReqT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final ReqT message) {\n-      final AgentSpan span =\n-          startSpan(\"grpc.message\", this.span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      final Span span =\n+          TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n+      span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n-      final AgentScope scope = activateSpan(span, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(this.span);\n-        this.span.finish();\n+        this.span.end();\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        scope.close();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onHalfClose() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onHalfClose();\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void onCancel() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onCancel();\n         span.setAttribute(\"canceled\", true);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onComplete() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\nindex d94877b112..10a7f44ebf 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n\n@@ -88,6 +93,7 @@ public class TracingServerInterceptor implements ServerInterceptor {\n           TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n       span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n+      final Scope scope = TRACER.withSpan(span);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDI2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204261", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "author": "trask", "createdAt": "2020-01-18T04:01:40Z", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -82,82 +75,81 @@ public void close(final Status status, final Metadata trailers) {\n \n   static final class TracingServerCallListener<ReqT>\n       extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {\n-    private final AgentSpan span;\n+    private final Span span;\n \n-    TracingServerCallListener(final AgentSpan span, final ServerCall.Listener<ReqT> delegate) {\n+    TracingServerCallListener(final Span span, final ServerCall.Listener<ReqT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final ReqT message) {\n-      final AgentSpan span =\n-          startSpan(\"grpc.message\", this.span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      final Span span =\n+          TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n+      span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n-      final AgentScope scope = activateSpan(span, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(this.span);\n-        this.span.finish();\n+        this.span.end();\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        scope.close();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onHalfClose() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onHalfClose();\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void onCancel() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onCancel();\n         span.setAttribute(\"canceled\", true);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onComplete() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onComplete();\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onReady() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\nindex d94877b112..10a7f44ebf 100644\n--- a/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n+++ b/java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java\n\n@@ -88,6 +93,7 @@ public class TracingServerInterceptor implements ServerInterceptor {\n           TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n       span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n+      final Scope scope = TRACER.withSpan(span);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDQ4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204484", "bodyText": "it's just test code, but do u mind parameterizing, e.g.\nlog.debug(\"SPAN START: {} id={} traceid={} parent={}\", sd.getName(), sd.getSpanId(), sd.getTraceId(), sd.getParentSpanId());", "author": "trask", "createdAt": "2020-01-18T04:08:01Z", "path": "java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java", "diffHunk": "@@ -40,11 +42,31 @@\n \n   @Override\n   public void onStart(final ReadableSpan readableSpan) {\n+    final SpanData sd = readableSpan.toSpanData();\n+    log.debug(\n+        \"SPAN START: \"\n+            + sd.getName()\n+            + \" id=\"\n+            + sd.getSpanId()\n+            + \" traceid=\"\n+            + sd.getTraceId()\n+            + \" parent=\"\n+            + sd.getParentSpanId());", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java b/java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java\nindex 2f9cc50756..e46d21129e 100644\n--- a/java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java\n+++ b/java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java\n\n@@ -44,14 +44,11 @@ public class ListWriter implements SpanProcessor {\n   public void onStart(final ReadableSpan readableSpan) {\n     final SpanData sd = readableSpan.toSpanData();\n     log.debug(\n-        \"SPAN START: \"\n-            + sd.getName()\n-            + \" id=\"\n-            + sd.getSpanId()\n-            + \" traceid=\"\n-            + sd.getTraceId()\n-            + \" parent=\"\n-            + sd.getParentSpanId());\n+        \">>> SPAN START: {} id={} traceid={} parent={}\",\n+        sd.getName(),\n+        sd.getSpanId().toLowerBase16(),\n+        sd.getTraceId().toLowerBase16(),\n+        sd.getParentSpanId().toLowerBase16());\n     spanOrders.put(readableSpan.getSpanContext().getSpanId(), nextSpanOrder.getAndIncrement());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDUzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204537", "bodyText": "same as above re: parameterizing", "author": "trask", "createdAt": "2020-01-18T04:09:05Z", "path": "java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java", "diffHunk": "@@ -40,11 +42,31 @@\n \n   @Override\n   public void onStart(final ReadableSpan readableSpan) {\n+    final SpanData sd = readableSpan.toSpanData();\n+    log.debug(\n+        \"SPAN START: \"\n+            + sd.getName()\n+            + \" id=\"\n+            + sd.getSpanId()\n+            + \" traceid=\"\n+            + sd.getTraceId()\n+            + \" parent=\"\n+            + sd.getParentSpanId());\n     spanOrders.put(readableSpan.getSpanContext().getSpanId(), nextSpanOrder.getAndIncrement());\n   }\n \n   @Override\n   public void onEnd(final ReadableSpan readableSpan) {\n+    final SpanData sd = readableSpan.toSpanData();\n+    log.debug(\n+        \"SPAN END: \"\n+            + sd.getName()\n+            + \" id=\"\n+            + sd.getSpanId()\n+            + \" traceid=\"\n+            + sd.getTraceId()\n+            + \" parent=\"\n+            + sd.getParentSpanId());", "originalCommit": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "chunk": "diff --git a/java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java b/java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java\nindex 2f9cc50756..e46d21129e 100644\n--- a/java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java\n+++ b/java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java\n\n@@ -44,14 +44,11 @@ public class ListWriter implements SpanProcessor {\n   public void onStart(final ReadableSpan readableSpan) {\n     final SpanData sd = readableSpan.toSpanData();\n     log.debug(\n-        \"SPAN START: \"\n-            + sd.getName()\n-            + \" id=\"\n-            + sd.getSpanId()\n-            + \" traceid=\"\n-            + sd.getTraceId()\n-            + \" parent=\"\n-            + sd.getParentSpanId());\n+        \">>> SPAN START: {} id={} traceid={} parent={}\",\n+        sd.getName(),\n+        sd.getSpanId().toLowerBase16(),\n+        sd.getTraceId().toLowerBase16(),\n+        sd.getParentSpanId().toLowerBase16());\n     spanOrders.put(readableSpan.getSpanContext().getSpanId(), nextSpanOrder.getAndIncrement());\n   }\n \n"}}, {"oid": "4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4309ebc059d234ea9c1e2ee6e65bf0eef5c56e76", "message": "Addressed maintainer comments", "committedDate": "2020-01-18T13:35:56Z", "type": "commit"}]}