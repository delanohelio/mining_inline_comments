{"pr_number": 1618, "pr_title": "Use Kotlin context element in agent instrumentation", "pr_createdAt": "2020-11-11T09:22:49Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MzYyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521773626", "bodyText": "is @NotNull useful here (and below)?", "author": "trask", "createdAt": "2020-11-12T02:13:33Z", "path": "instrumentation/kotlin-coroutines/library/src/main/java/io/opentelemetry/instrumentation/kotlincoroutines/ContextElement.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.instrumentation.kotlincoroutines;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+\n+public class ContextElement implements ThreadContextElement<Scope> {\n+\n+  static final CoroutineContext.Key<ContextElement> KEY =\n+      new CoroutineContext.Key<ContextElement>() {};\n+\n+  private final Context context;\n+\n+  public ContextElement(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @NotNull", "originalCommit": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a8011b9d46c339d0a626e58b6c0d99519240148", "chunk": "diff --git a/instrumentation/kotlin-coroutines/library/src/main/java/io/opentelemetry/instrumentation/kotlincoroutines/ContextElement.java b/instrumentation/kotlin-coroutines/library/src/main/java/io/opentelemetry/instrumentation/kotlincoroutines/ContextElement.java\ndeleted file mode 100644\nindex 1627bb6f80..0000000000\n--- a/instrumentation/kotlin-coroutines/library/src/main/java/io/opentelemetry/instrumentation/kotlincoroutines/ContextElement.java\n+++ /dev/null\n\n@@ -1,65 +0,0 @@\n-package io.opentelemetry.instrumentation.kotlincoroutines;\n-\n-import org.jetbrains.annotations.NotNull;\n-import org.jetbrains.annotations.Nullable;\n-import io.opentelemetry.context.Context;\n-import io.opentelemetry.context.Scope;\n-import kotlin.coroutines.CoroutineContext;\n-import kotlin.jvm.functions.Function2;\n-import kotlinx.coroutines.ThreadContextElement;\n-\n-public class ContextElement implements ThreadContextElement<Scope> {\n-\n-  static final CoroutineContext.Key<ContextElement> KEY =\n-      new CoroutineContext.Key<ContextElement>() {};\n-\n-  private final Context context;\n-\n-  public ContextElement(Context context) {\n-    this.context = context;\n-  }\n-\n-  Context getContext() {\n-    return context;\n-  }\n-\n-  @NotNull\n-  @Override\n-  public Key<?> getKey() {\n-    return KEY;\n-  }\n-\n-  @Override\n-  public Scope updateThreadContext(@NotNull CoroutineContext coroutineContext) {\n-    return context.makeCurrent();\n-  }\n-\n-  @Override\n-  public void restoreThreadContext(@NotNull CoroutineContext coroutineContext, Scope scope) {\n-    scope.close();\n-  }\n-\n-  @NotNull\n-  @Override\n-  public CoroutineContext plus(@NotNull CoroutineContext coroutineContext) {\n-    return CoroutineContext.DefaultImpls.plus(this, coroutineContext);\n-  }\n-\n-  @Override\n-  public <R> R fold(\n-      R initial, @NotNull Function2<? super R, ? super Element, ? extends R> operation) {\n-    return CoroutineContext.Element.DefaultImpls.fold(this, initial, operation);\n-  }\n-\n-  @Nullable\n-  @Override\n-  public <E extends Element> E get(@NotNull Key<E> key) {\n-    return CoroutineContext.Element.DefaultImpls.get(this, key);\n-  }\n-\n-  @NotNull\n-  @Override\n-  public CoroutineContext minusKey(@NotNull Key<?> key) {\n-    return CoroutineContext.Element.DefaultImpls.minusKey(this, key);\n-  }\n-}\n"}}, {"oid": "9a8011b9d46c339d0a626e58b6c0d99519240148", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a8011b9d46c339d0a626e58b6c0d99519240148", "message": "Use SDK helper", "committedDate": "2020-11-25T08:02:00Z", "type": "commit"}, {"oid": "9a8011b9d46c339d0a626e58b6c0d99519240148", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a8011b9d46c339d0a626e58b6c0d99519240148", "message": "Use SDK helper", "committedDate": "2020-11-25T08:02:00Z", "type": "forcePushed"}, {"oid": "b1e40ed6178f649e60533fad3532909f2bd314f5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1e40ed6178f649e60533fad3532909f2bd314f5", "message": "Revert unintended.", "committedDate": "2020-11-25T08:03:25Z", "type": "commit"}]}