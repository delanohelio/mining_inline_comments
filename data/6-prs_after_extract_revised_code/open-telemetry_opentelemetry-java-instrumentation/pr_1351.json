{"pr_number": 1351, "pr_title": "Remove unnecessary scopes", "pr_createdAt": "2020-10-09T03:42:06Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1351", "timeline": [{"oid": "3eac4aa651fa5586a00beae9bded018611fe6257", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3eac4aa651fa5586a00beae9bded018611fe6257", "message": "Remove unnecessary scopes", "committedDate": "2020-10-09T03:40:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNTAyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1351#discussion_r502315024", "bodyText": "Here the correct parent span is important. I think this change breaks it.", "author": "iNikem", "createdAt": "2020-10-09T09:47:27Z", "path": "instrumentation/servlet/servlet-common/src/main/java/io/opentelemetry/instrumentation/auto/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -115,18 +114,16 @@ public static void start(\n         parent = servletContext;\n       }\n \n-      try (Scope ignored = ContextUtils.withScopedContext(parent)) {\n-        span = TRACER.startSpan(method);\n+      span = TRACER.startSpan(method);", "originalCommit": "3eac4aa651fa5586a00beae9bded018611fe6257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MjE5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1351#discussion_r502582198", "bodyText": "Eeek, thanks for catching this!", "author": "trask", "createdAt": "2020-10-09T17:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NTg0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1351#discussion_r502795847", "bodyText": "Can we add a test for it?", "author": "anuraaga", "createdAt": "2020-10-10T14:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2Mzc0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1351#discussion_r502963740", "bodyText": "done", "author": "trask", "createdAt": "2020-10-11T20:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNTAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "d4ee45955fc1594f77e2cfe708e69f0e5baf6d4e", "chunk": "diff --git a/instrumentation/servlet/servlet-common/src/main/java/io/opentelemetry/instrumentation/auto/servlet/dispatcher/RequestDispatcherInstrumentation.java b/instrumentation/servlet/servlet-common/src/main/java/io/opentelemetry/instrumentation/auto/servlet/dispatcher/RequestDispatcherInstrumentation.java\nindex ae9486832..86ed962eb 100644\n--- a/instrumentation/servlet/servlet-common/src/main/java/io/opentelemetry/instrumentation/auto/servlet/dispatcher/RequestDispatcherInstrumentation.java\n+++ b/instrumentation/servlet/servlet-common/src/main/java/io/opentelemetry/instrumentation/auto/servlet/dispatcher/RequestDispatcherInstrumentation.java\n\n@@ -114,16 +115,18 @@ public final class RequestDispatcherInstrumentation extends Instrumenter.Default\n         parent = servletContext;\n       }\n \n-      span = TRACER.startSpan(method);\n+      try (Scope ignored = ContextUtils.withScopedContext(parent)) {\n+        span = TRACER.startSpan(method);\n \n-      // save the original servlet span before overwriting the request attribute, so that it can\n-      // be restored on method exit\n-      originalContext = request.getAttribute(CONTEXT_ATTRIBUTE);\n-\n-      // this tells the dispatched servlet to use the current span as the parent for its work\n-      Context newContext = withSpan(span, Context.current());\n-      request.setAttribute(CONTEXT_ATTRIBUTE, newContext);\n+        // save the original servlet span before overwriting the request attribute, so that it can\n+        // be\n+        // restored on method exit\n+        originalContext = request.getAttribute(CONTEXT_ATTRIBUTE);\n \n+        // this tells the dispatched servlet to use the current span as the parent for its work\n+        Context newContext = withSpan(span, Context.current());\n+        request.setAttribute(CONTEXT_ATTRIBUTE, newContext);\n+      }\n       scope = TRACER.startScope(span);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNTQ0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1351#discussion_r502315444", "bodyText": "What if processResult creates new spans? Will their parent change now?", "author": "iNikem", "createdAt": "2020-10-09T09:48:15Z", "path": "instrumentation/spymemcached-2.12/src/main/java/io/opentelemetry/instrumentation/auto/spymemcached/CompletionListener.java", "diffHunk": "@@ -28,29 +26,27 @@ public CompletionListener(MemcachedConnection connection, String methodName) {\n   }\n \n   protected void closeAsyncSpan(T future) {\n-    try (Scope ignored = currentContextWith(span)) {\n-      try {\n-        processResult(span, future);\n-      } catch (CancellationException e) {\n+    try {\n+      processResult(span, future);", "originalCommit": "3eac4aa651fa5586a00beae9bded018611fe6257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MjU5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1351#discussion_r502582591", "bodyText": "processResult is only used to populate span attributes, it doesn't make callbacks into the user code, so I think this is ok", "author": "trask", "createdAt": "2020-10-09T17:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNTQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "861239089f86c928bc826e6024afeeeb76dd1f21", "chunk": "diff --git a/instrumentation/spymemcached-2.12/src/main/java/io/opentelemetry/instrumentation/auto/spymemcached/CompletionListener.java b/instrumentation/spymemcached-2.12/src/main/java/io/opentelemetry/instrumentation/auto/spymemcached/CompletionListener.java\ndeleted file mode 100644\nindex 8112cc5cb..000000000\n--- a/instrumentation/spymemcached-2.12/src/main/java/io/opentelemetry/instrumentation/auto/spymemcached/CompletionListener.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Copyright The OpenTelemetry Authors\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package io.opentelemetry.instrumentation.auto.spymemcached;\n-\n-import static io.opentelemetry.instrumentation.auto.spymemcached.MemcacheClientTracer.TRACER;\n-\n-import io.opentelemetry.trace.Span;\n-import java.util.concurrent.CancellationException;\n-import java.util.concurrent.ExecutionException;\n-import net.spy.memcached.MemcachedConnection;\n-\n-public abstract class CompletionListener<T> {\n-\n-  static final String DB_COMMAND_CANCELLED = \"db.command.cancelled\";\n-  static final String MEMCACHED_RESULT = \"memcaced.result\";\n-  static final String HIT = \"hit\";\n-  static final String MISS = \"miss\";\n-\n-  private final Span span;\n-\n-  public CompletionListener(MemcachedConnection connection, String methodName) {\n-    span = TRACER.startSpan(connection, methodName);\n-  }\n-\n-  protected void closeAsyncSpan(T future) {\n-    try {\n-      processResult(span, future);\n-    } catch (CancellationException e) {\n-      span.setAttribute(DB_COMMAND_CANCELLED, true);\n-    } catch (ExecutionException e) {\n-      if (e.getCause() instanceof CancellationException) {\n-        // Looks like underlying OperationFuture wraps CancellationException into\n-        // ExecutionException\n-        span.setAttribute(DB_COMMAND_CANCELLED, true);\n-      } else {\n-        TRACER.endExceptionally(span, e);\n-      }\n-    } catch (InterruptedException e) {\n-      // Avoid swallowing InterruptedException\n-      TRACER.endExceptionally(span, e);\n-      Thread.currentThread().interrupt();\n-    } catch (Exception e) {\n-      // This should never happen, just in case to make sure we cover all unexpected exceptions\n-      TRACER.endExceptionally(span, e);\n-    } finally {\n-      TRACER.end(span);\n-    }\n-  }\n-\n-  protected void closeSyncSpan(Throwable thrown) {\n-    TRACER.endExceptionally(span, thrown);\n-  }\n-\n-  protected abstract void processResult(Span span, T future)\n-      throws ExecutionException, InterruptedException;\n-\n-  protected void setResultTag(Span span, boolean hit) {\n-    span.setAttribute(MEMCACHED_RESULT, hit ? HIT : MISS);\n-  }\n-}\n"}}, {"oid": "d4ee45955fc1594f77e2cfe708e69f0e5baf6d4e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4ee45955fc1594f77e2cfe708e69f0e5baf6d4e", "message": "revert", "committedDate": "2020-10-09T17:39:40Z", "type": "commit"}, {"oid": "8e62f8c59bf4bcfa598cc02411e2f4d357b11069", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e62f8c59bf4bcfa598cc02411e2f4d357b11069", "message": "Merge remote-tracking branch 'upstream/master' into unnecessary-scopes", "committedDate": "2020-10-09T17:42:08Z", "type": "commit"}, {"oid": "78158abb0268f4f66763decc6f6dcda1a3cde4b2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78158abb0268f4f66763decc6f6dcda1a3cde4b2", "message": "spotless", "committedDate": "2020-10-11T18:21:28Z", "type": "commit"}, {"oid": "b89cdd792bf5cbea58234b6840784b9f5728babc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b89cdd792bf5cbea58234b6840784b9f5728babc", "message": "Add test", "committedDate": "2020-10-11T20:44:32Z", "type": "commit"}, {"oid": "861239089f86c928bc826e6024afeeeb76dd1f21", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/861239089f86c928bc826e6024afeeeb76dd1f21", "message": "Merge remote-tracking branch 'upstream/master' into unnecessary-scopes", "committedDate": "2020-10-11T20:56:17Z", "type": "commit"}]}