{"pr_number": 902, "pr_title": "Add @Withspan functionality using spring-aop", "pr_createdAt": "2020-08-06T00:01:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902", "timeline": [{"oid": "c413a4763aab93956ae758644f937794ae550583", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c413a4763aab93956ae758644f937794ae550583", "message": "first shot at withspan support", "committedDate": "2020-08-06T00:46:12Z", "type": "commit"}, {"oid": "a726ac44294f6e624ad8579427b4316f968c81af", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a726ac44294f6e624ad8579427b4316f968c81af", "message": "Update spring-starter.gradle", "committedDate": "2020-08-06T00:46:12Z", "type": "commit"}, {"oid": "cfa005c404eb3f6d4dfe92dcf29d2df8fc83c003", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cfa005c404eb3f6d4dfe92dcf29d2df8fc83c003", "message": "with span working version", "committedDate": "2020-08-06T00:46:12Z", "type": "commit"}, {"oid": "d078fbaa58ba545bbec0fd42bf34444229f5af7f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d078fbaa58ba545bbec0fd42bf34444229f5af7f", "message": "clean up with span", "committedDate": "2020-08-06T00:46:12Z", "type": "commit"}, {"oid": "05ee92815845daa783ae80ed80bfed5025052cfc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/05ee92815845daa783ae80ed80bfed5025052cfc", "message": "fix property name", "committedDate": "2020-08-06T00:46:12Z", "type": "commit"}, {"oid": "e758a8b7f8495b3c9de1a17a0e71d944ede6b122", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e758a8b7f8495b3c9de1a17a0e71d944ede6b122", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-08-06T00:46:12Z", "type": "commit"}, {"oid": "156500e80fe7202b922c55cfc63da3f08dec4336", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/156500e80fe7202b922c55cfc63da3f08dec4336", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-08-06T00:46:12Z", "type": "commit"}, {"oid": "156500e80fe7202b922c55cfc63da3f08dec4336", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/156500e80fe7202b922c55cfc63da3f08dec4336", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-08-06T00:46:12Z", "type": "forcePushed"}, {"oid": "572d6296dd67d3239618428cb69a6c13ebd66ba8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/572d6296dd67d3239618428cb69a6c13ebd66ba8", "message": "Update WithSpanAspect.java", "committedDate": "2020-08-06T01:22:45Z", "type": "commit"}, {"oid": "fc2b230140e0394a01d0009b98b3ce77a5cd138b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc2b230140e0394a01d0009b98b3ce77a5cd138b", "message": "Update WithSpanAspect.java", "committedDate": "2020-08-06T01:23:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMDQxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466100414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String message = t.getMessage();\n          \n          \n            \n                span.addEvent(message);\n          \n          \n            \n                span.setAttribute(\"error\", true);\n          \n          \n            \n                span.setStatus(Status.UNKNOWN);\n          \n          \n            \n                span.recordException(t);\n          \n          \n            \n                span.setStatus(Status.INTERNAL);", "author": "trask", "createdAt": "2020-08-06T01:57:41Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed\n+ * by the Spring container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(final ProceedingJoinPoint pjp) {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      spanName = method.getName();\n+    }\n+    return spanName;\n+  }\n+\n+  private void errorHandler(Span span, Throwable t) {\n+    String message = t.getMessage();\n+    span.addEvent(message);\n+    span.setAttribute(\"error\", true);\n+    span.setStatus(Status.UNKNOWN);", "originalCommit": "fc2b230140e0394a01d0009b98b3ce77a5cd138b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d72be973657d572c9e37d54f83872bfbaf4a5eca", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex 8d7ae29f6f..ca5efb8bc6 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -31,8 +31,8 @@ import org.aspectj.lang.reflect.MethodSignature;\n  * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n  * io.opentelemetry.trace.Span}.\n  *\n- * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed\n- * by the Spring container.\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n  */\n @Aspect\n public class WithSpanAspect {\n"}}, {"oid": "d72be973657d572c9e37d54f83872bfbaf4a5eca", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d72be973657d572c9e37d54f83872bfbaf4a5eca", "message": "format", "committedDate": "2020-08-06T02:27:32Z", "type": "commit"}, {"oid": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6dc5be6ec6deac77ac6629ff440ff6edba21b3b8", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-08-06T02:29:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjYxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466152616", "bodyText": "It should be className.methodName", "author": "iNikem", "createdAt": "2020-08-06T05:21:30Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(final ProceedingJoinPoint pjp) {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      spanName = method.getName();", "originalCommit": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "699022ca0782dfcf44b4b8603b312fd9968b4d72", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex 03ff1059bd..366462ba55 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -64,7 +64,7 @@ public class WithSpanAspect {\n \n     String spanName = withSpan.value();\n     if (spanName.isEmpty()) {\n-      spanName = method.getName();\n+      spanName = method.getClass().getSimpleName() + \".\" + method.getName();\n     }\n     return spanName;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjgyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466152825", "bodyText": "WithSpan now supports kind attribute as well for setting span kind. Do you want to support this as well?", "author": "iNikem", "createdAt": "2020-08-06T05:22:24Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();", "originalCommit": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "699022ca0782dfcf44b4b8603b312fd9968b4d72", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex 03ff1059bd..366462ba55 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -64,7 +64,7 @@ public class WithSpanAspect {\n \n     String spanName = withSpan.value();\n     if (spanName.isEmpty()) {\n-      spanName = method.getName();\n+      spanName = method.getClass().getSimpleName() + \".\" + method.getName();\n     }\n     return spanName;\n   }\n"}}, {"oid": "a28eae4aef2d01626ab291e7d8d2b7f07d392649", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a28eae4aef2d01626ab291e7d8d2b7f07d392649", "message": "aspect autoconfiguration test", "committedDate": "2020-08-06T15:02:42Z", "type": "commit"}, {"oid": "699022ca0782dfcf44b4b8603b312fd9968b4d72", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/699022ca0782dfcf44b4b8603b312fd9968b4d72", "message": "rename span name to include class", "committedDate": "2020-08-06T15:20:53Z", "type": "commit"}, {"oid": "df1981bb46c8b530baa6b26b20a075a379d88b64", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df1981bb46c8b530baa6b26b20a075a379d88b64", "message": "add span kind", "committedDate": "2020-08-06T16:17:15Z", "type": "commit"}, {"oid": "df1981bb46c8b530baa6b26b20a075a379d88b64", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df1981bb46c8b530baa6b26b20a075a379d88b64", "message": "add span kind", "committedDate": "2020-08-06T16:17:15Z", "type": "forcePushed"}, {"oid": "12de6ee128fa20f3ccbd69f4654641db630eb2e2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/12de6ee128fa20f3ccbd69f4654641db630eb2e2", "message": "add tests for aspect", "committedDate": "2020-08-06T20:53:37Z", "type": "commit"}, {"oid": "848d8b197d5bdd97c2dc5f1714a9204806c07bfa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/848d8b197d5bdd97c2dc5f1714a9204806c07bfa", "message": "fix name", "committedDate": "2020-08-06T20:57:39Z", "type": "commit"}, {"oid": "848d8b197d5bdd97c2dc5f1714a9204806c07bfa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/848d8b197d5bdd97c2dc5f1714a9204806c07bfa", "message": "fix name", "committedDate": "2020-08-06T20:57:39Z", "type": "forcePushed"}, {"oid": "ac12024d8c5e1398b53c8d6b4285de0e812d6805", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac12024d8c5e1398b53c8d6b4285de0e812d6805", "message": "better solution for testing aspects", "committedDate": "2020-08-06T21:31:44Z", "type": "commit"}, {"oid": "6a30c41eb3feae3ccbbabbebd1fb5322bff679f2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6a30c41eb3feae3ccbbabbebd1fb5322bff679f2", "message": "better solution for testing aspects", "committedDate": "2020-08-06T21:32:15Z", "type": "commit"}, {"oid": "91d66fcafe9bd344ecfdfa7ac0f04a53597b2232", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91d66fcafe9bd344ecfdfa7ac0f04a53597b2232", "message": "add exception to verify", "committedDate": "2020-08-06T21:45:14Z", "type": "commit"}, {"oid": "5292fc1525b2c534031ee1235f36dca44f919f2f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5292fc1525b2c534031ee1235f36dca44f919f2f", "message": "add java docs", "committedDate": "2020-08-06T22:06:02Z", "type": "forcePushed"}, {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1287187549e16f88c7b7ced32edebb80b270bf0b", "message": "add java docs", "committedDate": "2020-08-06T23:06:07Z", "type": "commit"}, {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1287187549e16f88c7b7ced32edebb80b270bf0b", "message": "add java docs", "committedDate": "2020-08-06T23:06:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTU5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configures {@link WithSpanAspect} to trace spring beans. */\n          \n          \n            \n            /** Configures {@link WithSpanAspect} to trace bean methods annotated with {@link WithSpan}. */", "author": "anuraaga", "createdAt": "2020-08-07T05:00:23Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/** Configures {@link WithSpanAspect} to trace spring beans. */", "originalCommit": "1287187549e16f88c7b7ced32edebb80b270bf0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16a261787c17ad871330bb6b5d1f9d343b9ef87b", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java\nindex fff77899fa..34ca63c55c 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java\n\n@@ -25,7 +25,7 @@ import org.springframework.boot.context.properties.EnableConfigurationProperties\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-/** Configures {@link WithSpanAspect} to trace spring beans. */\n+/** Configures {@link WithSpanAspect} to trace bean methods annotated with {@link WithSpan}. */\n @Configuration\n @EnableConfigurationProperties(TraceAspectProperties.class)\n @ConditionalOnProperty(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTYxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821617", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configuration for enabling aspects. */\n          \n          \n            \n            /** Configuration for enabling tracing aspects. */", "author": "anuraaga", "createdAt": "2020-08-07T05:00:33Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/** Configuration for enabling aspects. */", "originalCommit": "1287187549e16f88c7b7ced32edebb80b270bf0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "706570ba8eb0abe13105f8efddcbd997045fca40", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java\nindex 247f6793d5..1b643cc244 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java\n\n@@ -18,7 +18,7 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n \n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-/** Configuration for enabling aspects. */\n+/** Configuration for enabling tracing aspects. */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.aspects\")\n public final class TraceAspectProperties {\n   private boolean enabled;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTgyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821825", "bodyText": "Statics before non-statics", "author": "anuraaga", "createdAt": "2020-08-07T05:01:22Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);", "originalCommit": "1287187549e16f88c7b7ced32edebb80b270bf0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5NjcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467096727", "bodyText": "I removed the logger", "author": "mabdinur", "createdAt": "2020-08-07T15:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "eec539f45045a0f6fedc863cb343a899d8f4aec4", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex b642767eac..1885e5cf97 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -19,7 +19,6 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.extensions.auto.annotations.WithSpan;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Span.Kind;\n import io.opentelemetry.trace.Status;\n import io.opentelemetry.trace.Tracer;\n import java.lang.reflect.Method;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTg3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821877", "bodyText": "Don't think we need final in the arguments", "author": "anuraaga", "createdAt": "2020-08-07T05:01:36Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {", "originalCommit": "1287187549e16f88c7b7ced32edebb80b270bf0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMjY4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467202687", "bodyText": "ya our convention here is not clear, i opened #921 to clarify and sync up our codebase to match our desired convention", "author": "trask", "createdAt": "2020-08-07T18:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "eec539f45045a0f6fedc863cb343a899d8f4aec4", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex b642767eac..1885e5cf97 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -19,7 +19,6 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.extensions.auto.annotations.WithSpan;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Span.Kind;\n import io.opentelemetry.trace.Status;\n import io.opentelemetry.trace.Tracer;\n import java.lang.reflect.Method;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTkyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821926", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(getSpanName(pjp));", "author": "anuraaga", "createdAt": "2020-08-07T05:01:49Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).setSpanKind(Kind.INTERNAL).startSpan();\n+    logger.info(getSpanName(pjp));", "originalCommit": "1287187549e16f88c7b7ced32edebb80b270bf0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eec539f45045a0f6fedc863cb343a899d8f4aec4", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex b642767eac..1885e5cf97 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -19,7 +19,6 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.extensions.auto.annotations.WithSpan;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Span.Kind;\n import io.opentelemetry.trace.Status;\n import io.opentelemetry.trace.Tracer;\n import java.lang.reflect.Method;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzODc2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466838763", "bodyText": "You should take kind from WithSpan annotation, if that is present.", "author": "iNikem", "createdAt": "2020-08-07T06:04:44Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).setSpanKind(Kind.INTERNAL).startSpan();", "originalCommit": "1287187549e16f88c7b7ced32edebb80b270bf0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eec539f45045a0f6fedc863cb343a899d8f4aec4", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex b642767eac..1885e5cf97 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -19,7 +19,6 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.extensions.auto.annotations.WithSpan;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Span.Kind;\n import io.opentelemetry.trace.Status;\n import io.opentelemetry.trace.Tracer;\n import java.lang.reflect.Method;\n"}}, {"oid": "eec539f45045a0f6fedc863cb343a899d8f4aec4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eec539f45045a0f6fedc863cb343a899d8f4aec4", "message": "kind tests and refactor to use withspan.kind", "committedDate": "2020-08-07T15:00:50Z", "type": "commit"}, {"oid": "16a261787c17ad871330bb6b5d1f9d343b9ef87b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/16a261787c17ad871330bb6b5d1f9d343b9ef87b", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-08-07T15:01:38Z", "type": "commit"}, {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/706570ba8eb0abe13105f8efddcbd997045fca40", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-08-07T16:19:53Z", "type": "commit"}, {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/706570ba8eb0abe13105f8efddcbd997045fca40", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-08-07T16:19:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNDQzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467204432", "bodyText": "i think these two lines will read better inlined into the catch block", "author": "trask", "createdAt": "2020-08-07T18:31:54Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(ProceedingJoinPoint pjp) throws Throwable {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    Span span =\n+        tracer.spanBuilder(getSpanName(withSpan, method)).setSpanKind(withSpan.kind()).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(WithSpan withSpan, Method method) {\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      return method.getDeclaringClass().getSimpleName() + \".\" + method.getName();\n+    }\n+    return spanName;\n+  }\n+\n+  private void errorHandler(Span span, Throwable t) {\n+    span.recordException(t);\n+    span.setStatus(Status.INTERNAL);\n+  }", "originalCommit": "706570ba8eb0abe13105f8efddcbd997045fca40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12a9b3f78c2c1d714f0a42b766d460daa0335ecd", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex 1885e5cf97..97547c1d2a 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -54,7 +54,8 @@ public class WithSpanAspect {\n     try (Scope scope = tracer.withSpan(span)) {\n       return pjp.proceed();\n     } catch (Throwable t) {\n-      errorHandler(span, t);\n+      span.setStatus(Status.INTERNAL);\n+      span.recordException(t);\n       throw t;\n     } finally {\n       span.end();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNTIwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467205201", "bodyText": "nice tests \ud83d\udc4d", "author": "trask", "createdAt": "2020-08-07T18:33:48Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n+\n+/** Spring AOP Test for {@link WithSpanAspect} */\n+@ExtendWith(MockitoExtension.class)\n+public class WithSpanAspectTest {", "originalCommit": "706570ba8eb0abe13105f8efddcbd997045fca40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51e4e638b7ee30b95ad19187930bd53b4c641b7f", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java\nindex 2d065a8732..6f653924a0 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java\n\n@@ -37,7 +37,12 @@ import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n \n-/** Spring AOP Test for {@link WithSpanAspect} */\n+/** \n+* Spring AOP Test for {@link WithSpanAspect}\n+* \n+*<p> Note: {@link WithSpanAspect} uses spring-aop to proxy beans. Therefore \n+* the {@link WithSpan} annotation can not be applied to constructors\n+*/\n @ExtendWith(MockitoExtension.class)\n public class WithSpanAspectTest {\n   static class WithSpanTester {\n"}}, {"oid": "12a9b3f78c2c1d714f0a42b766d460daa0335ecd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/12a9b3f78c2c1d714f0a42b766d460daa0335ecd", "message": "Update WithSpanAspect.java", "committedDate": "2020-08-07T21:38:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NzA2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467347061", "bodyText": "Can you add a test with a constructor? We document that it works so should test it (not sure if it would, since usually constructors happen before becoming a bean). If it doesn't work let's update the javadoc", "author": "anuraaga", "createdAt": "2020-08-08T01:53:21Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n+\n+/** Spring AOP Test for {@link WithSpanAspect} */\n+@ExtendWith(MockitoExtension.class)\n+public class WithSpanAspectTest {\n+  static class WithSpanTester {\n+    @WithSpan", "originalCommit": "12a9b3f78c2c1d714f0a42b766d460daa0335ecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0ODA0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467348045", "bodyText": "I will update the java docs. This spring aspect won't work on a constructor. It only proxies beans after initialization", "author": "mabdinur", "createdAt": "2020-08-08T02:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NzA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "51e4e638b7ee30b95ad19187930bd53b4c641b7f", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java\nindex 2d065a8732..6f653924a0 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java\n\n@@ -37,7 +37,12 @@ import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n \n-/** Spring AOP Test for {@link WithSpanAspect} */\n+/** \n+* Spring AOP Test for {@link WithSpanAspect}\n+* \n+*<p> Note: {@link WithSpanAspect} uses spring-aop to proxy beans. Therefore \n+* the {@link WithSpan} annotation can not be applied to constructors\n+*/\n @ExtendWith(MockitoExtension.class)\n public class WithSpanAspectTest {\n   static class WithSpanTester {\n"}}, {"oid": "51e4e638b7ee30b95ad19187930bd53b4c641b7f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/51e4e638b7ee30b95ad19187930bd53b4c641b7f", "message": "Update WithSpanAspectTest.java", "committedDate": "2020-08-08T02:08:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0ODg3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467348873", "bodyText": "Ah sorry I meant this doc", "author": "anuraaga", "createdAt": "2020-08-08T02:10:59Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link", "originalCommit": "51e4e638b7ee30b95ad19187930bd53b4c641b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c64fabb2cb650670f525fe3aaf4e9a4b481b05db", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\nindex 97547c1d2a..ebd1e83ede 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\n@@ -28,11 +28,14 @@ import org.aspectj.lang.annotation.Aspect;\n import org.aspectj.lang.reflect.MethodSignature;\n \n /**\n- * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * Uses Spring-AOP to wrap methods marked by {@link WithSpan} in a {@link\n  * io.opentelemetry.trace.Span}.\n  *\n  * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n  * container.\n+ *\n+ * <p> Note: This Aspect uses spring-aop to proxy beans. Therefore \n+ * the {@link WithSpan} annotation can not be applied to constructors.\n  */\n @Aspect\n public class WithSpanAspect {\n"}}, {"oid": "a1ff1f84ea0445007bd016030f3aa6d5c74d3059", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a1ff1f84ea0445007bd016030f3aa6d5c74d3059", "message": "Update WithSpanAspectTest.java", "committedDate": "2020-08-08T02:12:56Z", "type": "commit"}, {"oid": "c64fabb2cb650670f525fe3aaf4e9a4b481b05db", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c64fabb2cb650670f525fe3aaf4e9a4b481b05db", "message": "Update WithSpanAspect.java", "committedDate": "2020-08-08T02:14:25Z", "type": "commit"}, {"oid": "b1a5dcc0fb46d1db611f9cea9e3fa1b0cc966c4e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1a5dcc0fb46d1db611f9cea9e3fa1b0cc966c4e", "message": "format", "committedDate": "2020-08-08T02:45:47Z", "type": "commit"}]}