{"pr_number": 918, "pr_title": "Change aws-sdk client decorators to tracers", "pr_createdAt": "2020-08-07T01:29:56Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjU0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466772541", "bodyText": "I did try to replace SpanWithScope with Scope, but I have a problem getting the span out of the Scope.\nI need some feedback on howto.", "author": "heyams", "createdAt": "2020-08-07T01:34:51Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -74,14 +74,12 @@ public static void methodExit(\n         @Advice.Argument(value = 0, optional = true) final Request<?> request,\n         @Advice.Thrown final Throwable throwable) {\n       if (throwable != null) {\n-        SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-        if (spanWithScope != null) {\n+        SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+        if (scope != null) {\n           request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-          Span span = spanWithScope.getSpan();\n-          DECORATE.onError(span, throwable);\n-          DECORATE.beforeFinish(span);\n-          span.end();\n-          spanWithScope.closeScope();\n+          Span span = scope.getSpan();", "originalCommit": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MTMyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467191325", "bodyText": "i'm not sure what to do about this either, i recommend out of scope for this PR", "author": "trask", "createdAt": "2020-08-07T18:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyOTU0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467229540", "bodyText": "Not sure how to setup onMethodEnter... so that we can take local \"otelSpan\" as parameter and then onMethodExit can pass that span as an incoming parameter.. that's the pattern we have elsewhere.  @anuraaga might be able to help with this?", "author": "heyams", "createdAt": "2020-08-07T19:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1a18ec798f6d4d523c020ce29501723f48124d5", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java\nindex 97b8abdbf3..28628d650b 100644\n--- a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java\n+++ b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java\n\n@@ -74,12 +74,14 @@ public class AWSHttpClientInstrumentation extends Instrumenter.Default {\n         @Advice.Argument(value = 0, optional = true) final Request<?> request,\n         @Advice.Thrown final Throwable throwable) {\n       if (throwable != null) {\n-        SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-        if (scope != null) {\n+        SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+        if (spanWithScope != null) {\n           request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-          Span span = scope.getSpan();\n-          ERROR_TRACER.endExceptionally(span, throwable);\n-          scope.closeScope();\n+          Span span = spanWithScope.getSpan();\n+          DECORATE.onError(span, throwable);\n+          DECORATE.beforeFinish(span);\n+          span.end();\n+          spanWithScope.closeScope();\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjYzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466772635", "bodyText": "Same as above.", "author": "heyams", "createdAt": "2020-08-07T01:35:07Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -112,14 +110,12 @@ public static void methodExit(\n           @Advice.FieldValue(\"request\") final Request<?> request,\n           @Advice.Thrown final Throwable throwable) {\n         if (throwable != null) {\n-          SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-          if (spanWithScope != null) {\n+          SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+          if (scope != null) {\n             request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-            Span span = spanWithScope.getSpan();\n-            DECORATE.onError(span, throwable);\n-            DECORATE.beforeFinish(span);\n-            span.end();\n-            spanWithScope.closeScope();\n+            Span span = scope.getSpan();", "originalCommit": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a18ec798f6d4d523c020ce29501723f48124d5", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java\nindex 97b8abdbf3..28628d650b 100644\n--- a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java\n+++ b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java\n\n@@ -110,12 +112,14 @@ public class AWSHttpClientInstrumentation extends Instrumenter.Default {\n           @Advice.FieldValue(\"request\") final Request<?> request,\n           @Advice.Thrown final Throwable throwable) {\n         if (throwable != null) {\n-          SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-          if (scope != null) {\n+          SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+          if (spanWithScope != null) {\n             request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-            Span span = scope.getSpan();\n-            ERROR_TRACER.endExceptionally(span, throwable);\n-            scope.closeScope();\n+            Span span = spanWithScope.getSpan();\n+            DECORATE.onError(span, throwable);\n+            DECORATE.beforeFinish(span);\n+            span.end();\n+            spanWithScope.closeScope();\n           }\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3Mjg2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466772866", "bodyText": "Not sure if i have followed the right naming convention here.", "author": "heyams", "createdAt": "2020-08-07T01:36:00Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorTracer.java", "diffHunk": "@@ -16,8 +16,13 @@\n \n package io.opentelemetry.auto.instrumentation.awssdk.v1_11;\n \n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseDecorator;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n \n-public class OnErrorDecorator extends BaseDecorator {\n-  public static final OnErrorDecorator DECORATE = new OnErrorDecorator();\n+public class OnErrorTracer extends BaseTracer {\n+  public static final OnErrorTracer ERROR_TRACER = new OnErrorTracer();\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.aws-sdk-1.11-error\";", "originalCommit": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NzEwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467197103", "bodyText": "current convention is for this to be based on module name only, e.g. io.opentelemetry.auto.aws-sdk-1.11", "author": "trask", "createdAt": "2020-08-07T18:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3Mjg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNzMyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467227327", "bodyText": "AwsSdkClientTracer has already used \"io.opentelemetry.auto.aws-sdk-1.11\".", "author": "heyams", "createdAt": "2020-08-07T19:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3Mjg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MzA3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467243072", "bodyText": "it's ok, the SDK will return the same Tracer when we re-use the same instrumentationName / instrumentationVersion pair", "author": "trask", "createdAt": "2020-08-07T20:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3Mjg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMTUxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467311514", "bodyText": "This is removed in #922.", "author": "heyams", "createdAt": "2020-08-07T22:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3Mjg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b1a18ec798f6d4d523c020ce29501723f48124d5", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorTracer.java b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorDecorator.java\nsimilarity index 74%\nrename from instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorTracer.java\nrename to instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorDecorator.java\nindex c5a547ba9b..67c8eed491 100644\n--- a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorTracer.java\n+++ b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorDecorator.java\n\n@@ -16,13 +16,8 @@\n \n package io.opentelemetry.auto.instrumentation.awssdk.v1_11;\n \n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseDecorator;\n \n-public class OnErrorTracer extends BaseTracer {\n-  public static final OnErrorTracer ERROR_TRACER = new OnErrorTracer();\n-\n-  @Override\n-  protected String getInstrumentationName() {\n-    return \"io.opentelemetry.auto.aws-sdk-1.11-error\";\n-  }\n+public class OnErrorDecorator extends BaseDecorator {\n+  public static final OnErrorDecorator DECORATE = new OnErrorDecorator();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODE1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466778153", "bodyText": "this is used by TracingExecutionInterceptor.beforeExecution.", "author": "heyams", "createdAt": "2020-08-07T01:56:57Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public abstract class ClientTracer extends BaseTracer {\n+\n+  // Keeps track of the client span in a subtree corresponding to a client request.\n+  // Visible for testing\n+  static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n+      Context.key(\"opentelemetry-trace-auto-client-span-key\");\n+\n+  /**\n+   * Returns a new client {@link Span} if there is no client {@link Span} in the current {@link\n+   * Context}, or an invalid {@link Span} otherwise.\n+   */\n+  public Span getOrCreateSpan(String name, Tracer tracer) {", "originalCommit": "c03f0432ef415b8dac816648a27ecb093b7b90ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NTkzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467355931", "bodyText": "hopefully we can use the normal startSpan in the future, since it's almost the same as this method\nfor now since this is only needed from aws-sdk-2.2, i think better put it in the AwsSdkClientTracer subclass\nalso, can remove Tracer param, and it will use the protected tracer field from BaseTracer super class", "author": "trask", "createdAt": "2020-08-08T03:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2ODg3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468168876", "bodyText": "This is also used in spring-webflux-5.0.", "author": "heyams", "createdAt": "2020-08-10T20:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5f7059931e3e3d7761a7c770cdbab01b17b80445", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java b/library-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/ClientTracer.java\nsimilarity index 96%\nrename from agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java\nrename to library-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/ClientTracer.java\nindex d363be9ee9..0ed7e1c0c3 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java\n+++ b/library-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/ClientTracer.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+package io.opentelemetry.instrumentation.api.decorator;\n \n import io.grpc.Context;\n import io.opentelemetry.trace.DefaultSpan;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODMxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466778317", "bodyText": "this is needed by TracingExecutionInterceptor.afterMarshalling (2.2)", "author": "heyams", "createdAt": "2020-08-07T01:57:31Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -100,7 +100,7 @@ private Span startSpan(REQUEST request, String name) {\n     return span;\n   }\n \n-  private Span onRequest(final Span span, final REQUEST request) {\n+  public Span onRequest(final Span span, final REQUEST request) {", "originalCommit": "c03f0432ef415b8dac816648a27ecb093b7b90ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java\nindex 1abca888e6..6bdb1570f7 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java\n\n@@ -100,7 +100,7 @@ public abstract class HttpClientTracer<REQUEST, RESPONSE> extends ClientTracer {\n     return span;\n   }\n \n-  public Span onRequest(final Span span, final REQUEST request) {\n+  protected Span onRequest(final Span span, final REQUEST request) {\n     assert span != null;\n     if (request != null) {\n       span.setAttribute(SemanticAttributes.HTTP_METHOD.key(), method(request));\n"}}, {"oid": "b1a18ec798f6d4d523c020ce29501723f48124d5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1a18ec798f6d4d523c020ce29501723f48124d5", "message": "Change AwsSdkClientDecorator to tracer", "committedDate": "2020-08-07T02:23:09Z", "type": "commit"}, {"oid": "c5fd4380b94681e38ce0f426fac5b63dfdf118ca", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c5fd4380b94681e38ce0f426fac5b63dfdf118ca", "message": "Change awsclient 1.11 decorator to tracer", "committedDate": "2020-08-07T02:23:09Z", "type": "commit"}, {"oid": "044c7cf66f4cda1f59f040eac685fa7b2b95b7da", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/044c7cf66f4cda1f59f040eac685fa7b2b95b7da", "message": "Use startSpan", "committedDate": "2020-08-07T02:23:09Z", "type": "commit"}, {"oid": "6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "message": "Remove unused method", "committedDate": "2020-08-07T02:23:09Z", "type": "commit"}, {"oid": "6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "message": "Remove unused method", "committedDate": "2020-08-07T02:23:09Z", "type": "forcePushed"}, {"oid": "17dde6e21e2ad4bbdc99f6b005283c90412a1347", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17dde6e21e2ad4bbdc99f6b005283c90412a1347", "message": "Fix a muzzle failure", "committedDate": "2020-08-07T02:44:14Z", "type": "commit"}, {"oid": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "message": "Make onRequest protected", "committedDate": "2020-08-07T17:33:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDM2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467194361", "bodyText": "i think consolidating these into a single method would be nice, e.g.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  TRACER.onRequest(span, context.httpRequest());\n          \n          \n            \n                  TRACER.onSdkRequest(span, context.request());\n          \n          \n            \n                  TRACER.onAttributes(span, executionAttributes);\n          \n          \n            \n                  TRACER.afterMarshalling(span, context, executionAttributes);", "author": "trask", "createdAt": "2020-08-07T18:10:15Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -53,9 +50,9 @@ public void afterMarshalling(\n     Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n \n     if (span != null) {\n-      DECORATE.onRequest(span, context.httpRequest());\n-      DECORATE.onSdkRequest(span, context.request());\n-      DECORATE.onAttributes(span, executionAttributes);\n+      TRACER.onRequest(span, context.httpRequest());\n+      TRACER.onSdkRequest(span, context.request());\n+      TRACER.onAttributes(span, executionAttributes);", "originalCommit": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MzQxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467243412", "bodyText": "Create a method called afterMarshalling in AwsSdkClientTracer or HttpClientTracer? There is no such a method in TRACER yet.", "author": "heyams", "createdAt": "2020-08-07T20:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\nindex 5d61d39fbf..6e0bfda455 100644\n--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\n+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\n\n@@ -47,26 +47,13 @@ final class TracingExecutionInterceptor implements ExecutionInterceptor {\n   @Override\n   public void afterMarshalling(\n       final Context.AfterMarshalling context, final ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n-\n-    if (span != null) {\n-      TRACER.onRequest(span, context.httpRequest());\n-      TRACER.onSdkRequest(span, context.request());\n-      TRACER.onAttributes(span, executionAttributes);\n-    }\n+    TRACER.afterMarshalling(context, executionAttributes);\n   }\n \n   @Override\n   public void afterExecution(\n       final Context.AfterExecution context, final ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n-    if (span != null) {\n-      executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n-      TRACER.afterExecution(span, context.httpRequest());\n-      // Call onResponse on both types of responses:\n-      TRACER.onSdkResponse(span, context.response());\n-      TRACER.end(span, context.httpResponse());\n-    }\n+    TRACER.afterExecution(context, executionAttributes);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTk0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467195949", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  TRACER.afterExecution(span, context.httpRequest());\n          \n          \n            \n                  // Call onResponse on both types of responses:\n          \n          \n            \n                  TRACER.onSdkResponse(span, context.response());\n          \n          \n            \n                  TRACER.end(span, context.httpResponse());\n          \n          \n            \n                  TRACER.afterExecution(span, context);", "author": "trask", "createdAt": "2020-08-07T18:13:39Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -64,16 +61,11 @@ public void afterExecution(\n       final Context.AfterExecution context, final ExecutionAttributes executionAttributes) {\n     Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n     if (span != null) {\n-      try {\n-        executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n-        DECORATE.afterExecution(span, context.httpRequest());\n-        // Call onResponse on both types of responses:\n-        DECORATE.onSdkResponse(span, context.response());\n-        DECORATE.onResponse(span, context.httpResponse());\n-        DECORATE.beforeFinish(span);\n-      } finally {\n-        span.end();\n-      }\n+      executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n+      TRACER.afterExecution(span, context.httpRequest());\n+      // Call onResponse on both types of responses:\n+      TRACER.onSdkResponse(span, context.response());\n+      TRACER.end(span, context.httpResponse());", "originalCommit": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\nindex 5d61d39fbf..6e0bfda455 100644\n--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\n+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\n\n@@ -47,26 +47,13 @@ final class TracingExecutionInterceptor implements ExecutionInterceptor {\n   @Override\n   public void afterMarshalling(\n       final Context.AfterMarshalling context, final ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n-\n-    if (span != null) {\n-      TRACER.onRequest(span, context.httpRequest());\n-      TRACER.onSdkRequest(span, context.request());\n-      TRACER.onAttributes(span, executionAttributes);\n-    }\n+    TRACER.afterMarshalling(context, executionAttributes);\n   }\n \n   @Override\n   public void afterExecution(\n       final Context.AfterExecution context, final ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n-    if (span != null) {\n-      executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n-      TRACER.afterExecution(span, context.httpRequest());\n-      // Call onResponse on both types of responses:\n-      TRACER.onSdkResponse(span, context.response());\n-      TRACER.end(span, context.httpResponse());\n-    }\n+    TRACER.afterExecution(context, executionAttributes);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5ODA2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467198065", "bodyText": "i think this can stay private for now at least", "author": "trask", "createdAt": "2020-08-07T18:18:06Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -172,7 +171,7 @@ private Span onResponse(final Span span, final RESPONSE response) {\n     return span;\n   }\n \n-  private String spanNameForRequest(final REQUEST request) {\n+  protected String spanNameForRequest(final REQUEST request) {", "originalCommit": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0Mzc2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467243767", "bodyText": "It is needed in the branch 3.", "author": "heyams", "createdAt": "2020-08-07T20:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5ODA2NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "message": "Address feedback", "committedDate": "2020-08-07T22:34:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1Njg1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467356851", "bodyText": "these changes doesn't follow pattern used elsewhere, would be better to make this kind of change to convention in a separate PR, and across all modules, so we don't end up following different patterns in different places", "author": "trask", "createdAt": "2020-08-08T03:45:50Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdk.java", "diffHunk": "@@ -40,12 +40,12 @@\n  */\n public class AwsSdk {\n \n-  private static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.aws-sdk-2.2\");\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracerProvider().get(AwsSdkClientTracer.TRACER.getInstrumentationName());\n \n   /** Returns the {@link Tracer} used to instrument the AWS SDK. */\n   public static Tracer tracer() {\n-    return TRACER;\n+    return tracer;", "originalCommit": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2ODEwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468168104", "bodyText": "getOrCreateSpan is also used by spring-webflux-5.0 in another PR.", "author": "heyams", "createdAt": "2020-08-10T20:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1Njg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2OTQ0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468169445", "bodyText": "this is a rename of the instance variable.  i didn't introduce a new pattern.. it exists like this before.", "author": "heyams", "createdAt": "2020-08-10T20:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1Njg1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzA5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357090", "bodyText": "can you (either in this PR or add to #912) change DatabaseClientTracer to extend ClientTracer and remove DatabaseClientTracer.CONTEXT_CLIENT_SPAN_KEY since that's a duplicate of this now?", "author": "trask", "createdAt": "2020-08-08T03:48:52Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public abstract class ClientTracer extends BaseTracer {\n+\n+  // Keeps track of the client span in a subtree corresponding to a client request.\n+  // Visible for testing\n+  static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n+      Context.key(\"opentelemetry-trace-auto-client-span-key\");", "originalCommit": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f7059931e3e3d7761a7c770cdbab01b17b80445", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java b/library-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/ClientTracer.java\nsimilarity index 96%\nrename from agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java\nrename to library-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/ClientTracer.java\nindex d363be9ee9..0ed7e1c0c3 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java\n+++ b/library-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/ClientTracer.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+package io.opentelemetry.instrumentation.api.decorator;\n \n import io.grpc.Context;\n import io.opentelemetry.trace.DefaultSpan;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzQxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357413", "bodyText": "this will look a little nicer i think\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Span span = scope.getSpan();\n          \n          \n            \n                  tracer.end(span, response);\n          \n          \n            \n                  tracer.end(scope.getSpan(), response);", "author": "trask", "createdAt": "2020-08-08T03:52:47Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java", "diffHunk": "@@ -49,38 +45,31 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    Span span = decorate.getOrCreateSpan(request, TRACER);\n-    decorate.afterStart(span);\n-    decorate.onRequest(span, request);\n+    Span span = tracer.startSpan(request);\n     request.addHandlerContext(\n         SPAN_SCOPE_PAIR_CONTEXT_KEY,\n-        new SpanWithScope(\n-            span, ContextUtils.withScopedContext(ClientDecorator.currentContextWith(span))));\n+        new SpanWithScope(span, withScopedContext(currentContextWith(span))));\n   }\n \n   @Override\n   public void afterResponse(final Request<?> request, final Response<?> response) {\n-    SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-    if (spanWithScope != null) {\n+    SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+    if (scope != null) {\n       request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-      spanWithScope.closeScope();\n-      Span span = spanWithScope.getSpan();\n-      decorate.onResponse(span, response);\n-      decorate.beforeFinish(span);\n-      span.end();\n+      scope.closeScope();\n+      Span span = scope.getSpan();\n+      tracer.end(span, response);", "originalCommit": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java\nindex c77472cdfa..95a96412d8 100644\n--- a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java\n+++ b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java\n\n@@ -57,8 +57,7 @@ public class TracingRequestHandler extends RequestHandler2 {\n     if (scope != null) {\n       request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n       scope.closeScope();\n-      Span span = scope.getSpan();\n-      tracer.end(span, response);\n+      TRACER.end(scope.getSpan(), response);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzQzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357437", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Span span = scope.getSpan();\n          \n          \n            \n                  tracer.endExceptionally(span, e);\n          \n          \n            \n                  tracer.endExceptionally(scope.getSpan(), e);", "author": "trask", "createdAt": "2020-08-08T03:53:05Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java", "diffHunk": "@@ -49,38 +45,31 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    Span span = decorate.getOrCreateSpan(request, TRACER);\n-    decorate.afterStart(span);\n-    decorate.onRequest(span, request);\n+    Span span = tracer.startSpan(request);\n     request.addHandlerContext(\n         SPAN_SCOPE_PAIR_CONTEXT_KEY,\n-        new SpanWithScope(\n-            span, ContextUtils.withScopedContext(ClientDecorator.currentContextWith(span))));\n+        new SpanWithScope(span, withScopedContext(currentContextWith(span))));\n   }\n \n   @Override\n   public void afterResponse(final Request<?> request, final Response<?> response) {\n-    SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-    if (spanWithScope != null) {\n+    SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+    if (scope != null) {\n       request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-      spanWithScope.closeScope();\n-      Span span = spanWithScope.getSpan();\n-      decorate.onResponse(span, response);\n-      decorate.beforeFinish(span);\n-      span.end();\n+      scope.closeScope();\n+      Span span = scope.getSpan();\n+      tracer.end(span, response);\n     }\n   }\n \n   @Override\n   public void afterError(final Request<?> request, final Response<?> response, final Exception e) {\n-    SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-    if (spanWithScope != null) {\n+    SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+    if (scope != null) {\n       request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-      spanWithScope.closeScope();\n-      Span span = spanWithScope.getSpan();\n-      decorate.onError(span, e);\n-      decorate.beforeFinish(span);\n-      span.end();\n+      scope.closeScope();\n+      Span span = scope.getSpan();\n+      tracer.endExceptionally(span, e);", "originalCommit": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java\nindex c77472cdfa..95a96412d8 100644\n--- a/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java\n+++ b/instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java\n\n@@ -57,8 +57,7 @@ public class TracingRequestHandler extends RequestHandler2 {\n     if (scope != null) {\n       request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n       scope.closeScope();\n-      Span span = scope.getSpan();\n-      tracer.end(span, response);\n+      TRACER.end(scope.getSpan(), response);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzQ3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357472", "bodyText": "it looks like this method is not needed since only calls super\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              protected Span onRequest(Span span, SdkHttpRequest sdkHttpRequest) {\n          \n          \n            \n                return super.onRequest(span, sdkHttpRequest);\n          \n          \n            \n              }", "author": "trask", "createdAt": "2020-08-08T03:53:55Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java", "diffHunk": "@@ -115,7 +119,43 @@ protected String responseHeader(SdkHttpResponse sdkHttpResponse, String name) {\n     return header(sdkHttpResponse, name);\n   }\n \n+  @Override\n+  protected Setter<SdkHttpRequest> getSetter() {\n+    return null;\n+  }\n+\n   private static String header(SdkHttpHeaders headers, String name) {\n     return headers.firstMatchingHeader(name).orElse(null);\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.aws-sdk-2.2\";\n+  }\n+\n+  @Override\n+  protected Span onRequest(Span span, SdkHttpRequest sdkHttpRequest) {\n+    return super.onRequest(span, sdkHttpRequest);\n+  }", "originalCommit": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3OTE1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468179155", "bodyText": "Yeah, onRequest is now called inside afterMarshalling in the same class.  this is no longer needed.", "author": "heyams", "createdAt": "2020-08-10T20:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "369031cf05ad843e2dd9e374f522b155e96c97fb", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\nindex fdb9e17554..bb6bae8a00 100644\n--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\n+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\n\n@@ -133,11 +133,6 @@ final class AwsSdkClientTracer extends HttpClientTracer<SdkHttpRequest, SdkHttpR\n     return \"io.opentelemetry.auto.aws-sdk-2.2\";\n   }\n \n-  @Override\n-  protected Span onRequest(Span span, SdkHttpRequest sdkHttpRequest) {\n-    return super.onRequest(span, sdkHttpRequest);\n-  }\n-\n   public void afterMarshalling(\n       final Context.AfterMarshalling context, final ExecutionAttributes executionAttributes) {\n     Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1Nzg0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357841", "bodyText": "i think better to handle executionAttributes.get/putAttribute(SPAN_ATTRIBUTE) consistently in one place, so either all of them in this class or all of them in TracingExecutionInterceptor. then also i think you can make SPAN_ATTRIBUTE private (in whichever class you choose to handle this in)", "author": "trask", "createdAt": "2020-08-08T03:58:15Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java", "diffHunk": "@@ -115,7 +119,43 @@ protected String responseHeader(SdkHttpResponse sdkHttpResponse, String name) {\n     return header(sdkHttpResponse, name);\n   }\n \n+  @Override\n+  protected Setter<SdkHttpRequest> getSetter() {\n+    return null;\n+  }\n+\n   private static String header(SdkHttpHeaders headers, String name) {\n     return headers.firstMatchingHeader(name).orElse(null);\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.aws-sdk-2.2\";\n+  }\n+\n+  @Override\n+  protected Span onRequest(Span span, SdkHttpRequest sdkHttpRequest) {\n+    return super.onRequest(span, sdkHttpRequest);\n+  }\n+\n+  public void afterMarshalling(\n+      final Context.AfterMarshalling context, final ExecutionAttributes executionAttributes) {\n+    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);", "originalCommit": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MzgzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468173830", "bodyText": "it's not clear to me.  let's sync up on this offline.", "author": "heyams", "createdAt": "2020-08-10T20:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1Nzg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxMjE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468512189", "bodyText": "I sort of agree it's a bit weird to copy interceptor lifecycle methods into the tracer - I don't think we have to delegate everything into tracer, keeping the latter closer to the normal lifecycle methods of tracer is easier to reason about.", "author": "anuraaga", "createdAt": "2020-08-11T11:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1Nzg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "369031cf05ad843e2dd9e374f522b155e96c97fb", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\nindex fdb9e17554..bb6bae8a00 100644\n--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\n+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\n\n@@ -133,11 +133,6 @@ final class AwsSdkClientTracer extends HttpClientTracer<SdkHttpRequest, SdkHttpR\n     return \"io.opentelemetry.auto.aws-sdk-2.2\";\n   }\n \n-  @Override\n-  protected Span onRequest(Span span, SdkHttpRequest sdkHttpRequest) {\n-    return super.onRequest(span, sdkHttpRequest);\n-  }\n-\n   public void afterMarshalling(\n       final Context.AfterMarshalling context, final ExecutionAttributes executionAttributes) {\n     Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n"}}, {"oid": "5f7059931e3e3d7761a7c770cdbab01b17b80445", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f7059931e3e3d7761a7c770cdbab01b17b80445", "message": "Merge remote-tracking branch 'upstream/master' into heyams-http-client-tracers-2", "committedDate": "2020-08-10T06:03:14Z", "type": "commit"}, {"oid": "6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "message": "Address feedback", "committedDate": "2020-08-10T20:45:24Z", "type": "commit"}, {"oid": "369031cf05ad843e2dd9e374f522b155e96c97fb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/369031cf05ad843e2dd9e374f522b155e96c97fb", "message": "Remove an overridden method", "committedDate": "2020-08-10T20:51:35Z", "type": "commit"}, {"oid": "7f8df4d296b08016ef03962bff0cc3b6f141dcd1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7f8df4d296b08016ef03962bff0cc3b6f141dcd1", "message": "Fix build", "committedDate": "2020-08-10T22:39:53Z", "type": "commit"}, {"oid": "1c1fcad70884bc22656543de2dd704d462cd5d69", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1c1fcad70884bc22656543de2dd704d462cd5d69", "message": "Fix nullpointerexception", "committedDate": "2020-08-10T22:41:34Z", "type": "commit"}, {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/327757e48651a8f15fe53064a3f61b9a222d95fa", "message": "Remove BaseTracer", "committedDate": "2020-08-10T23:35:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDQ5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468250499", "bodyText": "I think reads a little nicer\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      Span span = scope.getSpan();\n          \n          \n            \n                      ERROR_TRACER.endExceptionally(span, throwable);\n          \n          \n            \n                      ERROR_TRACER.endExceptionally(scope.getSpan(), throwable);", "author": "trask", "createdAt": "2020-08-11T00:01:13Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -74,14 +74,12 @@ public static void methodExit(\n         @Advice.Argument(value = 0, optional = true) final Request<?> request,\n         @Advice.Thrown final Throwable throwable) {\n       if (throwable != null) {\n-        SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-        if (spanWithScope != null) {\n+        SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+        if (scope != null) {\n           request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-          Span span = spanWithScope.getSpan();\n-          DECORATE.onError(span, throwable);\n-          DECORATE.beforeFinish(span);\n-          span.end();\n-          spanWithScope.closeScope();\n+          Span span = scope.getSpan();\n+          ERROR_TRACER.endExceptionally(span, throwable);", "originalCommit": "327757e48651a8f15fe53064a3f61b9a222d95fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1OTA0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468259045", "bodyText": "Fixed in #922.  There is no longer ERROR_TRACER.", "author": "heyams", "createdAt": "2020-08-11T00:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDQ5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDY1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468250653", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Span span = scope.getSpan();\n          \n          \n            \n                        ERROR_TRACER.endExceptionally(span, throwable);\n          \n          \n            \n                        ERROR_TRACER.endExceptionally(scope.getSpan(), throwable);", "author": "trask", "createdAt": "2020-08-11T00:01:47Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -112,14 +110,12 @@ public static void methodExit(\n           @Advice.FieldValue(\"request\") final Request<?> request,\n           @Advice.Thrown final Throwable throwable) {\n         if (throwable != null) {\n-          SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-          if (spanWithScope != null) {\n+          SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+          if (scope != null) {\n             request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-            Span span = spanWithScope.getSpan();\n-            DECORATE.onError(span, throwable);\n-            DECORATE.beforeFinish(span);\n-            span.end();\n-            spanWithScope.closeScope();\n+            Span span = scope.getSpan();\n+            ERROR_TRACER.endExceptionally(span, throwable);", "originalCommit": "327757e48651a8f15fe53064a3f61b9a222d95fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1ODkwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468258907", "bodyText": "Fixed it in branch 3.", "author": "heyams", "createdAt": "2020-08-11T00:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDY1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468367936", "bodyText": "Why is this null?", "author": "iNikem", "createdAt": "2020-08-11T07:02:32Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AwsSdkClientTracer.java", "diffHunk": "@@ -125,4 +125,14 @@ protected String requestHeader(Request<?> request, String name) {\n   protected String responseHeader(Response<?> response, String name) {\n     return response.getHttpResponse().getHeaders().get(name);\n   }\n+\n+  @Override\n+  protected Setter<Request<?>> getSetter() {\n+    return null;", "originalCommit": "327757e48651a8f15fe53064a3f61b9a222d95fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0OTk1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468749953", "bodyText": "There is no SETTER.", "author": "heyams", "createdAt": "2020-08-11T17:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2NDc0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468764748", "bodyText": "#893 (comment)", "author": "heyams", "createdAt": "2020-08-11T18:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwMDk2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468800964", "bodyText": "I don't understand. Do you want to say that one cannot inject new headers into aws sdk Request? And we cannot propagate context with it?", "author": "iNikem", "createdAt": "2020-08-11T19:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwMzgxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468803814", "bodyText": "aws sdk doesn't need to inject headers into its request.  @trask might know the reason why?", "author": "heyams", "createdAt": "2020-08-11T19:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNTMyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468805323", "bodyText": "my understanding is that no need to inject headers, since requests are all going to backend AWS services", "author": "trask", "createdAt": "2020-08-11T19:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxNTg4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468815884", "bodyText": "Then should it be HttpClientTracer? It has startScope method which will throw an exception if it gets null setter. So everybody has to remember not to call startScope for AwsSdkClientTracer which extends HttpClientTracer", "author": "iNikem", "createdAt": "2020-08-11T19:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyNTU4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468825584", "bodyText": "yeah, there's lots of stuff in aws-sdk instrumentation that doesn't follow the normal Tracer pattern so this may make sense.\nI'll open a separate issue for this, so we can move this PR forward.", "author": "trask", "createdAt": "2020-08-11T19:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyNzY2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468827665", "bodyText": "Opened #944", "author": "trask", "createdAt": "2020-08-11T19:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2ODg2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468368869", "bodyText": "I think this logic should be in tracer.startScope", "author": "iNikem", "createdAt": "2020-08-11T07:04:43Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java", "diffHunk": "@@ -49,38 +45,29 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    Span span = decorate.getOrCreateSpan(request, TRACER);\n-    decorate.afterStart(span);\n-    decorate.onRequest(span, request);\n+    Span span = tracer.startSpan(request);\n     request.addHandlerContext(\n         SPAN_SCOPE_PAIR_CONTEXT_KEY,\n-        new SpanWithScope(\n-            span, ContextUtils.withScopedContext(ClientDecorator.currentContextWith(span))));\n+        new SpanWithScope(span, withScopedContext(currentContextWith(span))));", "originalCommit": "327757e48651a8f15fe53064a3f61b9a222d95fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDEzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468750137", "bodyText": "This has been refactored in #922.", "author": "heyams", "createdAt": "2020-08-11T17:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2ODg2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2OTUwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468369506", "bodyText": "Why is this null?", "author": "iNikem", "createdAt": "2020-08-11T07:06:00Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java", "diffHunk": "@@ -115,7 +123,55 @@ protected String responseHeader(SdkHttpResponse sdkHttpResponse, String name) {\n     return header(sdkHttpResponse, name);\n   }\n \n+  @Override\n+  protected Setter<SdkHttpRequest> getSetter() {\n+    return null;", "originalCommit": "327757e48651a8f15fe53064a3f61b9a222d95fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1MDcyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468750722", "bodyText": "no SETTER.", "author": "heyams", "createdAt": "2020-08-11T17:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2OTUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\nindex c05dd1c911..4c7664bd6d 100644\n--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\n+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java\n\n@@ -137,27 +134,6 @@ final class AwsSdkClientTracer extends HttpClientTracer<SdkHttpRequest, SdkHttpR\n     return \"io.opentelemetry.auto.aws-sdk-2.2\";\n   }\n \n-  public void afterMarshalling(\n-      final Context.AfterMarshalling context, final ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n-    if (span != null) {\n-      onRequest(span, context.httpRequest());\n-      onSdkRequest(span, context.request());\n-      onAttributes(span, executionAttributes);\n-    }\n-  }\n-\n-  public void afterExecution(\n-      final Context.AfterExecution context, final ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n-    if (span != null) {\n-      executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n-      afterExecution(span, context.httpRequest());\n-      onSdkResponse(span, context.response());\n-      end(span, context.httpResponse());\n-    }\n-  }\n-\n   /**\n    * Returns a new client {@link Span} if there is no client {@link Span} in the current {@link\n    * io.grpc.Context }, or an invalid {@link Span} otherwise.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468370977", "bodyText": "Do you really need to call spanName separately? Why getOrCreateSpan cannot handle this?", "author": "iNikem", "createdAt": "2020-08-11T07:09:20Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -41,54 +40,29 @@\n   @Override\n   public void beforeExecution(\n       final Context.BeforeExecution context, final ExecutionAttributes executionAttributes) {\n-    Span span =\n-        ClientDecorator.getOrCreateSpan(DECORATE.spanName(executionAttributes), AwsSdk.tracer());\n-    DECORATE.afterStart(span);\n+    Span span = TRACER.getOrCreateSpan(TRACER.spanName(executionAttributes), AwsSdk.tracer());", "originalCommit": "327757e48651a8f15fe53064a3f61b9a222d95fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2NzEzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468767135", "bodyText": "We don't have the request.", "author": "heyams", "createdAt": "2020-08-11T18:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwMTg4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468801884", "bodyText": "What do you mean? You can pass executionAttributes into TRACER.getOrCreateSpan, no? Tracer's startSpan method (or its analogue) can accept all data that is needed for him to create a new span. In this case tracer needs ExecutionAttributes to deduce span name.", "author": "iNikem", "createdAt": "2020-08-11T19:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNTY4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468805682", "bodyText": "getOrCreateSpan takes Tracer as one of the input parameters.\npublic Span getOrCreateSpan(String name, Tracer tracer) \nCan't use startSpan because getting the span is needed in beforeExecution and onRequest is called inside afterMarshalling.  ExecutionInterceptor has its own lifecycle.", "author": "heyams", "createdAt": "2020-08-11T19:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNzM0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468807346", "bodyText": "@iNikem are you suggesting adding startSpan overload in AwsSdkClientTracer that also accepts executionAttributes?", "author": "trask", "createdAt": "2020-08-11T19:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjU3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468822571", "bodyText": "This getOrCreateSpan is already defined in AwsSdkClientTracer and used only from here. Just pass executionAttributes as first parameter and that's it, API surface is already smaller.\nAlso, AwsSdk.tracer() should not go here, it should go into the constructor of the tracer. There is io.opentelemetry.instrumentation.api.decorator.BaseTracer#tracer for that.", "author": "iNikem", "createdAt": "2020-08-11T19:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzg5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468837899", "bodyText": "moved spanName helper method to interceptor class.", "author": "heyams", "createdAt": "2020-08-11T20:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzMzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r469003335", "bodyText": "I beg your pardon? My intention was to move as much code as possible from this interceptor into the tracer. You did the exact opposite??", "author": "iNikem", "createdAt": "2020-08-12T04:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzg0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r469003845", "bodyText": "I think this is related to my comment here\n#918 (comment)\nI found it hard to understand the tracer when it had so much of the AWS SDK lifecycle copied into it.", "author": "anuraaga", "createdAt": "2020-08-12T04:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTQ5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r469611490", "bodyText": "this spanName method is customizing the span name.  It is only used in the interceptor and nowhere else.\nI also moved a few other helper methods related to AWS SDK lifecycle to the interceptor class.\n@trask has created an issue to clean up AwsSdkClientTracer.  I think we all agreed that AWS SDK doesn't fit well with the HttpClientTracer pattern.", "author": "heyams", "createdAt": "2020-08-12T23:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "chunk": "diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\nindex 6e0bfda455..7f17c8e210 100644\n--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\n+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\n\n@@ -47,13 +47,24 @@ final class TracingExecutionInterceptor implements ExecutionInterceptor {\n   @Override\n   public void afterMarshalling(\n       final Context.AfterMarshalling context, final ExecutionAttributes executionAttributes) {\n-    TRACER.afterMarshalling(context, executionAttributes);\n+    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    if (span != null) {\n+      TRACER.onRequest(span, context.httpRequest());\n+      TRACER.onSdkRequest(span, context.request());\n+      TRACER.onAttributes(span, executionAttributes);\n+    }\n   }\n \n   @Override\n   public void afterExecution(\n       final Context.AfterExecution context, final ExecutionAttributes executionAttributes) {\n-    TRACER.afterExecution(context, executionAttributes);\n+    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    if (span != null) {\n+      executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n+      TRACER.afterExecution(span, context.httpRequest());\n+      TRACER.onSdkResponse(span, context.response());\n+      TRACER.end(span, context.httpResponse());\n+    }\n   }\n \n   @Override\n"}}, {"oid": "67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "message": "Undo afterMarshalling and afterExecution in the tracer class", "committedDate": "2020-08-11T18:24:36Z", "type": "commit"}, {"oid": "2655d28220ae7148983809c5cf47843e2e02fe4b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2655d28220ae7148983809c5cf47843e2e02fe4b", "message": "Move spanName method to interceptor class", "committedDate": "2020-08-11T20:13:51Z", "type": "commit"}]}