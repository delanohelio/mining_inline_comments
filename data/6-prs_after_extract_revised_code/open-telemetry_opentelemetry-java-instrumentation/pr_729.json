{"pr_number": 729, "pr_title": "add exporter configurations to springboot autoconfigure", "pr_createdAt": "2020-07-19T03:00:50Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzOTU5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457239598", "bodyText": "Let's go ahead and remove this, and instead add javadoc to at least the getters.", "author": "anuraaga", "createdAt": "2020-07-20T09:57:29Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -16,18 +16,24 @@\n \n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n+import javax.validation.constraints.DecimalMax;\n+import javax.validation.constraints.DecimalMin;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n /**\n  * Configuration for OpenTelemetry Tracer\n  *\n- * <p>Configures LoggingExporter and sets default tracer name\n+ * <p>Sets default tracer name and sampler probability", "originalCommit": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MTg5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457551896", "bodyText": "Sorry. I forgot to clean up the java docs before creating this review. I'll fix this up now", "author": "mabdinur", "createdAt": "2020-07-20T16:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzOTU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "97ff9ae902575f59ca337b3dea3605d53befa24c", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java\nindex 8f69b52620..d66d878657 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java\n\n@@ -23,7 +23,9 @@ import org.springframework.boot.context.properties.ConfigurationProperties;\n /**\n  * Configuration for OpenTelemetry Tracer\n  *\n- * <p>Sets default tracer name and sampler probability\n+ * <p>Get Tracer Name {@link getName()}\n+ *\n+ * <p>Get Sampling Probability {@link getSamplerProbability()}\n  */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.tracer\")\n public final class TracerProperties {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTQ2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465465", "bodyText": "[Suggestion] Drop the extra newline here.", "author": "udekel", "createdAt": "2020-07-22T00:32:55Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,67 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+", "originalCommit": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97ff9ae902575f59ca337b3dea3605d53befa24c", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\nindex cda7f2e3d9..73324a83f7 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\n\n@@ -64,7 +64,6 @@ public class TracerAutoConfiguration {\n   }\n \n   private void addSpanProcessors(List<SpanExporter> spanExporters) {\n-\n     List<SpanProcessor> spanProcessors =\n         spanExporters.stream()\n             .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTcyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465728", "bodyText": "[Question] Is that always guaranteed to be a valid value?", "author": "udekel", "createdAt": "2020-07-22T00:33:55Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,67 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+\n+    List<SpanProcessor> spanProcessors =\n+        spanExporters.stream()\n+            .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n+            .collect(Collectors.toList());\n+\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(MultiSpanProcessor.create(spanProcessors));\n+  }\n \n-    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n-    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+  private void setSampler(TracerProperties tracerProperties) {\n+    TraceConfig.getDefault()\n+        .toBuilder()\n+        .setSampler(Samplers.probability(tracerProperties.getSamplerProbability()))", "originalCommit": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNjY1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458906655", "bodyText": "Yes, I added validators to the TracerProperties class that bounds the decimal value between 0 and 1", "author": "mabdinur", "createdAt": "2020-07-22T16:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "97ff9ae902575f59ca337b3dea3605d53befa24c", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\nindex cda7f2e3d9..73324a83f7 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\n\n@@ -64,7 +64,6 @@ public class TracerAutoConfiguration {\n   }\n \n   private void addSpanProcessors(List<SpanExporter> spanExporters) {\n-\n     List<SpanProcessor> spanProcessors =\n         spanExporters.stream()\n             .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTk2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465969", "bodyText": "Here and elsewhere: You don't need usually need to provide a list of the methods of the class in its documentation. IS there a special convention for beans?", "author": "udekel", "createdAt": "2020-07-22T00:34:51Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -16,18 +16,26 @@\n \n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n+import javax.validation.constraints.DecimalMax;\n+import javax.validation.constraints.DecimalMin;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n /**\n  * Configuration for OpenTelemetry Tracer\n  *\n- * <p>Configures LoggingExporter and sets default tracer name\n+ * <p>Get Tracer Name {@link getName()}", "originalCommit": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97ff9ae902575f59ca337b3dea3605d53befa24c", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java\nindex 0519606b5c..d66d878657 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java\n\n@@ -33,6 +33,7 @@ public final class TracerProperties {\n \n   private String name = \"otel-spring-tracer\";\n \n+  /** If Sample probability == 1: always sample If Sample probability == 0: never sample */\n   @DecimalMin(\"0.0\")\n   @DecimalMax(\"1.0\")\n   private double samplerProbability = 1.0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjE2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466163", "bodyText": "Is it worth documenting that 0.0 / 1.0 have special values?", "author": "udekel", "createdAt": "2020-07-22T00:35:21Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -37,11 +45,11 @@ public void setName(String name) {\n     this.name = name;\n   }\n \n-  public boolean isLoggingExporterEnabled() {\n-    return loggingExporterEnabled;\n+  public double getSamplerProbability() {\n+    return samplerProbability;\n   }\n \n-  public void setLoggingExporterEnabled(boolean loggingExporterEnabled) {\n-    this.loggingExporterEnabled = loggingExporterEnabled;\n+  public void setSamplerProbability(double samplerProbability) {", "originalCommit": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjQ0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466443", "bodyText": "[Note] I'm not sure about the convention, but I'd consider making the defaults part of the class documentation.\nI'd also add a link to where that 14250 is coming from.", "author": "udekel", "createdAt": "2020-07-22T00:36:20Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches {@link getDeadline()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;", "originalCommit": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97ff9ae902575f59ca337b3dea3605d53befa24c", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\nindex 0694d0eb16..7d4a3a87b8 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n\n@@ -22,13 +22,13 @@ import org.springframework.boot.context.properties.ConfigurationProperties;\n /**\n  * Configuration for {@link JaegerSpanExporter}\n  *\n- * <p>Get Exporter Service Name {@link getServiceName()}\n+ * <p>Get Exporter Service Name\n  *\n- * <p>Get Exporter Host Name {@link getHost()}\n+ * <p>Get Exporter Host Name\n  *\n- * <p>Get Exporter Port {@link getPort()}\n+ * <p>Get Exporter Port\n  *\n- * <p>Get max wait time for Collector to process Span Batches {@link getDeadline()}\n+ * <p>Get max wait time for Collector to process Span Batches\n  */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n public final class JaegerSpanExporterProperties {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjQ5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466495", "bodyText": "I think you can just use ofSeconds(1)", "author": "udekel", "createdAt": "2020-07-22T00:36:31Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches {@link getDeadline()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n+  private String host = \"localhost\";\n+  private int port = 14250;\n+  private Duration deadline = Duration.ofMillis(1000L);", "originalCommit": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97ff9ae902575f59ca337b3dea3605d53befa24c", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\nindex 0694d0eb16..7d4a3a87b8 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n\n@@ -22,13 +22,13 @@ import org.springframework.boot.context.properties.ConfigurationProperties;\n /**\n  * Configuration for {@link JaegerSpanExporter}\n  *\n- * <p>Get Exporter Service Name {@link getServiceName()}\n+ * <p>Get Exporter Service Name\n  *\n- * <p>Get Exporter Host Name {@link getHost()}\n+ * <p>Get Exporter Host Name\n  *\n- * <p>Get Exporter Port {@link getPort()}\n+ * <p>Get Exporter Port\n  *\n- * <p>Get max wait time for Collector to process Span Batches {@link getDeadline()}\n+ * <p>Get max wait time for Collector to process Span Batches\n  */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n public final class JaegerSpanExporterProperties {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjE2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459076166", "bodyText": "i think good to align default serviceName with SDK\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "author": "trask", "createdAt": "2020-07-22T20:52:45Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";", "originalCommit": "f8f59d2226c7ed345d03163421cf955f8877d62b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerExporterProperties.java\nsimilarity index 80%\nrename from instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\nrename to instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerExporterProperties.java\nindex 7d4a3a87b8..6e27582660 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerExporterProperties.java\n\n@@ -19,27 +19,15 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n import java.time.Duration;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-/**\n- * Configuration for {@link JaegerSpanExporter}\n- *\n- * <p>Get Exporter Service Name\n- *\n- * <p>Get Exporter Host Name\n- *\n- * <p>Get Exporter Port\n- *\n- * <p>Get max wait time for Collector to process Span Batches\n- */\n+/** Configuration for JaegerExporter */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n-public final class JaegerSpanExporterProperties {\n+public class JaegerExporterProperties {\n \n   private boolean enabled = true;\n   private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n   private String host = \"localhost\";\n-  /** Default port from {@link JaegerSpanExporter.DEFAULT_JAEGER_ENDPOINT} */\n   private int port = 14250;\n-\n-  private Duration deadline = Duration.ofSeconds(1);\n+  private Duration deadline = Duration.ofMillis(1000L);\n \n   public boolean isEnabled() {\n     return enabled;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjQ3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459076478", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-zipkin-otlp\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "author": "trask", "createdAt": "2020-07-22T20:53:25Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.otlp;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link OTLPGrpcSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.otlp\")\n+public final class OtlpGrpcSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-otlp\";", "originalCommit": "f8f59d2226c7ed345d03163421cf955f8877d62b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\nindex 4f92277075..591303ac1b 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\n\n@@ -19,27 +19,15 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.otlp;\n import java.time.Duration;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-/**\n- * Configuration for {@link OTLPGrpcSpanExporter}\n- *\n- * <p>Get Exporter Service Name\n- *\n- * <p>Get Exporter Host Name\n- *\n- * <p>Get Exporter Port\n- *\n- * <p>Get max wait time for Collector to process Span Batches\n- */\n+/** Configuration for JaegerExporter */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.otlp\")\n-public final class OtlpGrpcSpanExporterProperties {\n+public class OtlpGrpcSpanExporterProperties {\n \n   private boolean enabled = true;\n   private String serviceName = \"otel-spring-boot-zipkin-otlp\";\n   private String host = \"localhost\";\n-  /** Default end point in {@link OTLPGrpcSpanExporter.OTEL_OTLP_ENDPOINT} */\n   private int port = 14250;\n-\n-  private Duration deadline = Duration.ofSeconds(1);\n+  private Duration deadline = Duration.ofMillis(1000L);\n \n   public boolean isEnabled() {\n     return enabled;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NzMxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459077313", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-zipkin-exporter\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "author": "trask", "createdAt": "2020-07-22T20:55:04Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.zipkin;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link ZipkinSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.zipkin\")\n+public class ZipkinSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-exporter\";", "originalCommit": "f8f59d2226c7ed345d03163421cf955f8877d62b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\nindex ff62ab592f..4e2088fc54 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\n\n@@ -18,22 +18,13 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.zipkin;\n \n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-/**\n- * Configuration for {@link ZipkinSpanExporter}\n- *\n- * <p>Get Exporter Service Name {@link getServiceName()}\n- *\n- * <p>Get Exporter Host Name {@link getHost()}\n- *\n- * <p>Get Exporter Port {@link getPort()}\n- */\n+/** Configuration for JaegerExporter */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.zipkin\")\n public class ZipkinSpanExporterProperties {\n \n   private boolean enabled = true;\n   private String serviceName = \"otel-spring-boot-zipkin-exporter\";\n-  private String host = \"http://localhost\";\n-  /** Default end point in {@link ZipkinSpanExporter.OTEL_ZIPKIN_ENDPOINT} */\n+  private String host = \"localhost\";\n   private int port = 14250;\n \n   public boolean isEnabled() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MjU3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459082575", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"http://localhost\";\n          \n          \n            \n              /** Default end point in {@link ZipkinSpanExporter.OTEL_ZIPKIN_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"http://localhost:14250\";", "author": "trask", "createdAt": "2020-07-22T21:05:10Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.zipkin;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link ZipkinSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.zipkin\")\n+public class ZipkinSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-exporter\";\n+  private String host = \"http://localhost\";\n+  /** Default end point in {@link ZipkinSpanExporter.OTEL_ZIPKIN_ENDPOINT} */\n+  private int port = 14250;", "originalCommit": "f8f59d2226c7ed345d03163421cf955f8877d62b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\nindex ff62ab592f..4e2088fc54 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\n\n@@ -18,22 +18,13 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.zipkin;\n \n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-/**\n- * Configuration for {@link ZipkinSpanExporter}\n- *\n- * <p>Get Exporter Service Name {@link getServiceName()}\n- *\n- * <p>Get Exporter Host Name {@link getHost()}\n- *\n- * <p>Get Exporter Port {@link getPort()}\n- */\n+/** Configuration for JaegerExporter */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.zipkin\")\n public class ZipkinSpanExporterProperties {\n \n   private boolean enabled = true;\n   private String serviceName = \"otel-spring-boot-zipkin-exporter\";\n-  private String host = \"http://localhost\";\n-  /** Default end point in {@link ZipkinSpanExporter.OTEL_ZIPKIN_ENDPOINT} */\n+  private String host = \"localhost\";\n   private int port = 14250;\n \n   public boolean isEnabled() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MzYxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459083613", "bodyText": "combine these into single endpoint to match recommended configuration properties coming in open-telemetry/opentelemetry-specification#666\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"localhost\";\n          \n          \n            \n              /** Default port from {@link JaegerSpanExporter.DEFAULT_JAEGER_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"localhost:14250\";", "author": "trask", "createdAt": "2020-07-22T21:07:17Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n+  private String host = \"localhost\";\n+  /** Default port from {@link JaegerSpanExporter.DEFAULT_JAEGER_ENDPOINT} */\n+  private int port = 14250;", "originalCommit": "f8f59d2226c7ed345d03163421cf955f8877d62b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerExporterProperties.java\nsimilarity index 80%\nrename from instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\nrename to instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerExporterProperties.java\nindex 7d4a3a87b8..6e27582660 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerExporterProperties.java\n\n@@ -19,27 +19,15 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n import java.time.Duration;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-/**\n- * Configuration for {@link JaegerSpanExporter}\n- *\n- * <p>Get Exporter Service Name\n- *\n- * <p>Get Exporter Host Name\n- *\n- * <p>Get Exporter Port\n- *\n- * <p>Get max wait time for Collector to process Span Batches\n- */\n+/** Configuration for JaegerExporter */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n-public final class JaegerSpanExporterProperties {\n+public class JaegerExporterProperties {\n \n   private boolean enabled = true;\n   private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n   private String host = \"localhost\";\n-  /** Default port from {@link JaegerSpanExporter.DEFAULT_JAEGER_ENDPOINT} */\n   private int port = 14250;\n-\n-  private Duration deadline = Duration.ofSeconds(1);\n+  private Duration deadline = Duration.ofMillis(1000L);\n \n   public boolean isEnabled() {\n     return enabled;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4Mzg4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459083887", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"localhost\";\n          \n          \n            \n              /** Default end point in {@link OTLPGrpcSpanExporter.OTEL_OTLP_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"localhost:14250\";", "author": "trask", "createdAt": "2020-07-22T21:07:45Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.otlp;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link OTLPGrpcSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.otlp\")\n+public final class OtlpGrpcSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-otlp\";\n+  private String host = \"localhost\";\n+  /** Default end point in {@link OTLPGrpcSpanExporter.OTEL_OTLP_ENDPOINT} */\n+  private int port = 14250;", "originalCommit": "f8f59d2226c7ed345d03163421cf955f8877d62b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\nindex 4f92277075..591303ac1b 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\n\n@@ -19,27 +19,15 @@ package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.otlp;\n import java.time.Duration;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-/**\n- * Configuration for {@link OTLPGrpcSpanExporter}\n- *\n- * <p>Get Exporter Service Name\n- *\n- * <p>Get Exporter Host Name\n- *\n- * <p>Get Exporter Port\n- *\n- * <p>Get max wait time for Collector to process Span Batches\n- */\n+/** Configuration for JaegerExporter */\n @ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.otlp\")\n-public final class OtlpGrpcSpanExporterProperties {\n+public class OtlpGrpcSpanExporterProperties {\n \n   private boolean enabled = true;\n   private String serviceName = \"otel-spring-boot-zipkin-otlp\";\n   private String host = \"localhost\";\n-  /** Default end point in {@link OTLPGrpcSpanExporter.OTEL_OTLP_ENDPOINT} */\n   private int port = 14250;\n-\n-  private Duration deadline = Duration.ofSeconds(1);\n+  private Duration deadline = Duration.ofMillis(1000L);\n \n   public boolean isEnabled() {\n     return enabled;\n"}}, {"oid": "97ff9ae902575f59ca337b3dea3605d53befa24c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97ff9ae902575f59ca337b3dea3605d53befa24c", "message": "edit host name", "committedDate": "2020-07-23T00:35:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MDAwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459590003", "bodyText": "need to call OpenTelemetrySdk.getTracerProvider().updateActiveTraceConfig(...)", "author": "trask", "createdAt": "2020-07-23T16:51:20Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,66 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+    List<SpanProcessor> spanProcessors =\n+        spanExporters.stream()\n+            .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n+            .collect(Collectors.toList());\n+\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(MultiSpanProcessor.create(spanProcessors));\n+  }\n \n-    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n-    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+  private void setSampler(TracerProperties tracerProperties) {\n+    TraceConfig.getDefault()\n+        .toBuilder()\n+        .setSampler(Samplers.probability(tracerProperties.getSamplerProbability()))\n+        .build();", "originalCommit": "fa074ab692b84819f66559c9256060c5845a4eb5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "chunk": "diff --git a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\nindex 73324a83f7..d28b039c69 100644\n--- a/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\n+++ b/instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java\n\n@@ -34,12 +34,11 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n+ * Create an {@link io.opentelemetry.trace.Tracer}.\n  *\n- * <p>Adds span exporter beans to the active tracer provider {@code\n- * OpenTelemetrySdk.getTracerProvider()}\n+ * <p>Adds Open Telemetry SpanProcessors to the tracer provider using available exporter beans\n  *\n- * <p>Sets {@link TraceConfig} sampler probability\n+ * <p>Sets Sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n"}}, {"oid": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "message": "add exporter configurations to springboot autoconfigure", "committedDate": "2020-07-24T21:32:40Z", "type": "commit"}, {"oid": "bbed77676cf5a7af117a86071fb6ff56793615ee", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bbed77676cf5a7af117a86071fb6ff56793615ee", "message": "clean up javadoc and jaegerspanexporter name", "committedDate": "2020-07-24T21:32:40Z", "type": "commit"}, {"oid": "df0a0e246af44407c777b36bd898a27d930330ab", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df0a0e246af44407c777b36bd898a27d930330ab", "message": "format", "committedDate": "2020-07-24T21:32:40Z", "type": "commit"}, {"oid": "e3cc7e247b2d63aea4e316dc28bc0cecd8ad549b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e3cc7e247b2d63aea4e316dc28bc0cecd8ad549b", "message": "fix javadoc", "committedDate": "2020-07-24T21:32:40Z", "type": "commit"}, {"oid": "7b20642b6591e857838e676d9fcba701b4214364", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7b20642b6591e857838e676d9fcba701b4214364", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-07-24T21:32:40Z", "type": "commit"}, {"oid": "4d49d6682f9da5f5a00f30ffe22ea78dd1e4fae3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4d49d6682f9da5f5a00f30ffe22ea78dd1e4fae3", "message": "format and clean up java docs", "committedDate": "2020-07-24T21:32:40Z", "type": "commit"}, {"oid": "36f415dd8616a3ca1041ebdc4080b88c2c03187c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/36f415dd8616a3ca1041ebdc4080b88c2c03187c", "message": "review changes", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "d1259478c2d53eb2b143d793d70f74d5d614cfdf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d1259478c2d53eb2b143d793d70f74d5d614cfdf", "message": "edit host name", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "925cc1c629e920e324bd7d5bdfb893c042a31970", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/925cc1c629e920e324bd7d5bdfb893c042a31970", "message": "Update TracerProperties.java", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "9b4d492e70fb07dfcaa2513637f88bfbb2b70685", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9b4d492e70fb07dfcaa2513637f88bfbb2b70685", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "0d6109f69d0cf764723c9c7339cda460bb7916e8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0d6109f69d0cf764723c9c7339cda460bb7916e8", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "d52ebd7c26f9f6795f6a03cee874a49b6c6623e9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d52ebd7c26f9f6795f6a03cee874a49b6c6623e9", "message": "format", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "81ac0315a4300232961ea9d523a370211cde2276", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/81ac0315a4300232961ea9d523a370211cde2276", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "8c6696f74d680beca5670c11112aca24e5233741", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8c6696f74d680beca5670c11112aca24e5233741", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "9deec575fedaa88cb5eb8bc30521fb01475a2f10", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9deec575fedaa88cb5eb8bc30521fb01475a2f10", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "87f4faa066c1c781c9ca432a2a88e4d37f7741e2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/87f4faa066c1c781c9ca432a2a88e4d37f7741e2", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "cdd426339308d27e9b698a3df4fc2f7298b48677", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cdd426339308d27e9b698a3df4fc2f7298b48677", "message": "fixed properties", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "a370c042690300657d7047236c1bc54e7808b77e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a370c042690300657d7047236c1bc54e7808b77e", "message": "update active tracer config with sampling probability and clean up host/port property javadocs", "committedDate": "2020-07-24T21:32:41Z", "type": "commit"}, {"oid": "6535eda035ea91310b15157f98ecf15ef1050d51", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6535eda035ea91310b15157f98ecf15ef1050d51", "message": "fix duration property name to align with docs", "committedDate": "2020-07-24T21:32:42Z", "type": "commit"}, {"oid": "6535eda035ea91310b15157f98ecf15ef1050d51", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6535eda035ea91310b15157f98ecf15ef1050d51", "message": "fix duration property name to align with docs", "committedDate": "2020-07-24T21:32:42Z", "type": "forcePushed"}, {"oid": "4d53a80abbddef5ba6b85d7660aa587aa793e7fb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4d53a80abbddef5ba6b85d7660aa587aa793e7fb", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-07-25T04:05:47Z", "type": "commit"}, {"oid": "8465b752962bb0951405d848aa4569ec11cd373e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8465b752962bb0951405d848aa4569ec11cd373e", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-07-25T15:20:48Z", "type": "commit"}, {"oid": "6fc41bf842bd4a355d7b7e6e7c2741013490382a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6fc41bf842bd4a355d7b7e6e7c2741013490382a", "message": "Update spring-boot-autoconfigure.gradle", "committedDate": "2020-07-26T21:05:02Z", "type": "commit"}, {"oid": "02f3da1af9a427058fad231dab9a540d56d13e48", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/02f3da1af9a427058fad231dab9a540d56d13e48", "message": "add conditional on managed channel", "committedDate": "2020-07-26T23:47:39Z", "type": "commit"}, {"oid": "7737f3d39cf6d710be0a49683b0247ec80e31758", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7737f3d39cf6d710be0a49683b0247ec80e31758", "message": "conditional on managed channel", "committedDate": "2020-07-26T23:48:36Z", "type": "commit"}]}