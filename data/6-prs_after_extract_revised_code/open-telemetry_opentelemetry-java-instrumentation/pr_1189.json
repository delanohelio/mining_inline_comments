{"pr_number": 1189, "pr_title": "Reactor bugs", "pr_createdAt": "2020-09-10T13:26:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189", "timeline": [{"oid": "c15e00d91876364c5571a5180a0fbcac85c85d04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c15e00d91876364c5571a5180a0fbcac85c85d04", "message": "Demonstrating bugs with Project Reactor and Reactor Netty support", "committedDate": "2020-09-10T09:12:23Z", "type": "commit"}, {"oid": "5d98938e836a5ccf5942107f33412ad907b3d3ee", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5d98938e836a5ccf5942107f33412ad907b3d3ee", "message": "Intermediate kinda working state", "committedDate": "2020-09-10T09:12:23Z", "type": "commit"}, {"oid": "3faf38050e80a1a73c630c140c300e997a8f5268", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3faf38050e80a1a73c630c140c300e997a8f5268", "message": "Seems to work", "committedDate": "2020-09-10T11:36:15Z", "type": "commit"}, {"oid": "97bc8a48bae861850646baeed0d3c504bce2ecee", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97bc8a48bae861850646baeed0d3c504bce2ecee", "message": "Format", "committedDate": "2020-09-10T13:24:43Z", "type": "commit"}, {"oid": "259c56a383ae43b84699053d46cc960235b31797", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/259c56a383ae43b84699053d46cc960235b31797", "message": "Always use context active during subscription", "committedDate": "2020-09-10T16:40:58Z", "type": "commit"}, {"oid": "fc8d38185b024d3fe2858b46610e586697e57eb6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc8d38185b024d3fe2858b46610e586697e57eb6", "message": "Fix muzzle", "committedDate": "2020-09-10T17:45:19Z", "type": "commit"}, {"oid": "fe6eecf8307a4ade93e8024d7281779fc815bf23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fe6eecf8307a4ade93e8024d7281779fc815bf23", "message": "Format", "committedDate": "2020-09-10T18:28:28Z", "type": "commit"}, {"oid": "094c83c1901a62f01955971355c38ffd98df4521", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/094c83c1901a62f01955971355c38ffd98df4521", "message": "Test fix", "committedDate": "2020-09-11T05:56:06Z", "type": "commit"}, {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1867995a1f4fb3d19325fa76bae6f265b290b089", "message": "Ignore failing test for now", "committedDate": "2020-09-11T07:21:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486828727", "bodyText": "I think this needs to return the same reference for reset to work", "author": "anuraaga", "createdAt": "2020-09-11T07:33:01Z", "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {\n+\n+  /**\n+   * Registers a hook that applies to every operator, propagating {@link Context} to downstream\n+   * callbacks to ensure spans in the {@link Context} are available throughout the lifetime of a\n+   * reactive stream. This should generally be called in a static initializer block in your\n+   * application.\n+   */\n+  public static void registerOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());\n+  }\n+\n+  /** Unregisters the hook registered by {@link #registerOnEachOperator()}. */\n+  public static void resetOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());\n+  }\n+\n+  private static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingLift() {\n+    return Operators.lift(new Lifter<>());", "originalCommit": "1867995a1f4fb3d19325fa76bae6f265b290b089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2MjE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486862189", "bodyText": "I don't quite understand. You mean cache the result of lift? This is copy-pasted from OpenTracing: https://github.com/opentracing-contrib/java-reactor/blob/master/src/main/java/io/opentracing/contrib/reactor/TracedSubscriber.java", "author": "iNikem", "createdAt": "2020-09-11T08:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyMTczOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486921739", "bodyText": "Yeah like private static final Function<? super Publisher<T>, ? extends Publisher<T>>  TRACING_LIFTER = Operators.lift(new Lifter<>()); and return TRACING_LIFTER;. I didn't look at the implementation of reset in detail but I can't conceive it's possible without it being the same reference.", "author": "anuraaga", "createdAt": "2020-09-11T09:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwNzAzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487007033", "bodyText": "That was actual bug, thank you :) Solved now", "author": "iNikem", "createdAt": "2020-09-11T12:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "5cf47321cfe244095b58cb2a8c338b04a09d6394", "chunk": "diff --git a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\nindex b128e50fce..40d8b6ae06 100644\n--- a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\n+++ b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\n\n@@ -36,12 +36,12 @@ public class TracingOperator {\n    * application.\n    */\n   public static void registerOnEachOperator() {\n-    Hooks.onEachOperator(tracingLift());\n+    Hooks.onEachOperator(TracingSubscriber.class.getName(), tracingLift());\n   }\n \n   /** Unregisters the hook registered by {@link #registerOnEachOperator()}. */\n   public static void resetOnEachOperator() {\n-    Hooks.onEachOperator(tracingLift());\n+    Hooks.resetOnEachOperator(TracingSubscriber.class.getName());\n   }\n \n   private static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingLift() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODk5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486828998", "bodyText": "/cc @minwoox do you mind providing any thoughts on this instrumentation? I guess you've already experienced all the corner cases since LINE uses reactor a lot. It will affect Armeria users too if they start using OpenTelemetry :)", "author": "anuraaga", "createdAt": "2020-09-11T07:33:39Z", "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {", "originalCommit": "1867995a1f4fb3d19325fa76bae6f265b290b089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4MzMzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486883331", "bodyText": "Well, LINE uses RxJava a lot. \ud83e\udd23\nRecently we got a few customers who use Reactor with Armeria, so I guess I didn't experience all the corner cases yet.\nThis implementation looks good and if I found something I will leave comments though. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-09-11T09:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "5cf47321cfe244095b58cb2a8c338b04a09d6394", "chunk": "diff --git a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\nindex b128e50fce..40d8b6ae06 100644\n--- a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\n+++ b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\n\n@@ -36,12 +36,12 @@ public class TracingOperator {\n    * application.\n    */\n   public static void registerOnEachOperator() {\n-    Hooks.onEachOperator(tracingLift());\n+    Hooks.onEachOperator(TracingSubscriber.class.getName(), tracingLift());\n   }\n \n   /** Unregisters the hook registered by {@link #registerOnEachOperator()}. */\n   public static void resetOnEachOperator() {\n-    Hooks.onEachOperator(tracingLift());\n+    Hooks.resetOnEachOperator(TracingSubscriber.class.getName());\n   }\n \n   private static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingLift() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyOTgyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486829829", "bodyText": "Since we don't have @author anywhere else I would recommend not including it here too even for copied files.\nIdeally we fix spotless to allow us to have two copyright headers on a file. In the meantime, I took a NOTICE approach to referencing copied code which I think is the bare minimum legally (@author doesn't help at all legally)\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/logback/logback-1.0.0/library/NOTICE.txt", "author": "anuraaga", "createdAt": "2020-09-11T07:35:19Z", "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java", "diffHunk": "@@ -18,132 +18,65 @@\n \n import io.opentelemetry.context.ContextUtils;\n import io.opentelemetry.context.Scope;\n+import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n import reactor.core.CoreSubscriber;\n-import reactor.core.Fuseable;\n-import reactor.core.Scannable;\n import reactor.util.context.Context;\n \n-public class TracingSubscriber<T>\n-    implements Subscription, CoreSubscriber<T>, Fuseable.QueueSubscription<T>, Scannable {\n-\n-  private final io.grpc.Context upstreamContext;\n-  private final CoreSubscriber<T> delegate;\n+/**\n+ * Based on Spring Sleuth's Reactor instrumentation. A trace representation of the {@link\n+ * Subscriber}\n+ *\n+ * @author Jose Montoya", "originalCommit": "1867995a1f4fb3d19325fa76bae6f265b290b089", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df7b781fcb5403a4973d75ee48052ec56d23ee1f", "chunk": "diff --git a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java\nindex 887e2ead6e..5b3820137a 100644\n--- a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java\n+++ b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java\n\n@@ -24,10 +24,8 @@ import reactor.core.CoreSubscriber;\n import reactor.util.context.Context;\n \n /**\n- * Based on Spring Sleuth's Reactor instrumentation. A trace representation of the {@link\n- * Subscriber}\n- *\n- * @author Jose Montoya\n+ * Based on OpenTracing code.\n+ * https://github.com/opentracing-contrib/java-reactor/blob/master/src/main/java/io/opentracing/contrib/reactor/TracedSubscriber.java\n  */\n public class TracingSubscriber<T> implements CoreSubscriber<T> {\n   private final io.grpc.Context traceContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzNDAwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486834001", "bodyText": "Can you add permalinks to original of all copied classes?", "author": "anuraaga", "createdAt": "2020-09-11T07:43:40Z", "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java", "diffHunk": "@@ -18,132 +18,65 @@\n \n import io.opentelemetry.context.ContextUtils;\n import io.opentelemetry.context.Scope;\n+import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n import reactor.core.CoreSubscriber;\n-import reactor.core.Fuseable;\n-import reactor.core.Scannable;\n import reactor.util.context.Context;\n \n-public class TracingSubscriber<T>\n-    implements Subscription, CoreSubscriber<T>, Fuseable.QueueSubscription<T>, Scannable {\n-\n-  private final io.grpc.Context upstreamContext;\n-  private final CoreSubscriber<T> delegate;\n+/**\n+ * Based on Spring Sleuth's Reactor instrumentation. A trace representation of the {@link", "originalCommit": "1867995a1f4fb3d19325fa76bae6f265b290b089", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df7b781fcb5403a4973d75ee48052ec56d23ee1f", "chunk": "diff --git a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java\nindex 887e2ead6e..5b3820137a 100644\n--- a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java\n+++ b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java\n\n@@ -24,10 +24,8 @@ import reactor.core.CoreSubscriber;\n import reactor.util.context.Context;\n \n /**\n- * Based on Spring Sleuth's Reactor instrumentation. A trace representation of the {@link\n- * Subscriber}\n- *\n- * @author Jose Montoya\n+ * Based on OpenTracing code.\n+ * https://github.com/opentracing-contrib/java-reactor/blob/master/src/main/java/io/opentracing/contrib/reactor/TracedSubscriber.java\n  */\n public class TracingSubscriber<T> implements CoreSubscriber<T> {\n   private final io.grpc.Context traceContext;\n"}}, {"oid": "df7b781fcb5403a4973d75ee48052ec56d23ee1f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df7b781fcb5403a4973d75ee48052ec56d23ee1f", "message": "Add attribution and links to borrowed code", "committedDate": "2020-09-11T08:38:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyMTk4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486921983", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Hooks.onEachOperator(tracingLift());\n          \n          \n            \n                Hooks.resetOnEachOperator(tracingLift());\n          \n      \n    \n    \n  \n\nCan you add a test for reset?", "author": "anuraaga", "createdAt": "2020-09-11T09:43:30Z", "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {\n+\n+  /**\n+   * Registers a hook that applies to every operator, propagating {@link Context} to downstream\n+   * callbacks to ensure spans in the {@link Context} are available throughout the lifetime of a\n+   * reactive stream. This should generally be called in a static initializer block in your\n+   * application.\n+   */\n+  public static void registerOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());\n+  }\n+\n+  /** Unregisters the hook registered by {@link #registerOnEachOperator()}. */\n+  public static void resetOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());", "originalCommit": "df7b781fcb5403a4973d75ee48052ec56d23ee1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cf47321cfe244095b58cb2a8c338b04a09d6394", "chunk": "diff --git a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\nindex b128e50fce..40d8b6ae06 100644\n--- a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\n+++ b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\n\n@@ -36,12 +36,12 @@ public class TracingOperator {\n    * application.\n    */\n   public static void registerOnEachOperator() {\n-    Hooks.onEachOperator(tracingLift());\n+    Hooks.onEachOperator(TracingSubscriber.class.getName(), tracingLift());\n   }\n \n   /** Unregisters the hook registered by {@link #registerOnEachOperator()}. */\n   public static void resetOnEachOperator() {\n-    Hooks.onEachOperator(tracingLift());\n+    Hooks.resetOnEachOperator(TracingSubscriber.class.getName());\n   }\n \n   private static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingLift() {\n"}}, {"oid": "5cf47321cfe244095b58cb2a8c338b04a09d6394", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5cf47321cfe244095b58cb2a8c338b04a09d6394", "message": "Fix hook reset", "committedDate": "2020-09-11T12:19:23Z", "type": "commit"}, {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7e6feedb1acef99360c99ae13befe6b49032df8b", "message": "Polish", "committedDate": "2020-09-11T12:26:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NDA4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487344082", "bodyText": "can you revert this change, in favor of #1194?", "author": "trask", "createdAt": "2020-09-12T00:36:33Z", "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java", "diffHunk": "@@ -104,7 +104,7 @@\n     INSTRUMENTATION = ByteBuddyAgent.getInstrumentation();\n \n     ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.WARN);\n-    ((Logger) LoggerFactory.getLogger(\"io.opentelemetry.auto\")).setLevel(Level.DEBUG);\n+    ((Logger) LoggerFactory.getLogger(\"io.opentelemetry.javaagent\")).setLevel(Level.DEBUG);", "originalCommit": "7e6feedb1acef99360c99ae13befe6b49032df8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be0e5a2e4c2e8edfa73f760e3ddea972d8e74de0", "chunk": "diff --git a/testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java b/testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java\nindex 6af9aed1de..da31839555 100644\n--- a/testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java\n+++ b/testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java\n\n@@ -104,7 +104,7 @@ public abstract class AgentTestRunner extends AgentSpecification {\n     INSTRUMENTATION = ByteBuddyAgent.getInstrumentation();\n \n     ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.WARN);\n-    ((Logger) LoggerFactory.getLogger(\"io.opentelemetry.javaagent\")).setLevel(Level.DEBUG);\n+    ((Logger) LoggerFactory.getLogger(\"io.opentelemetry\")).setLevel(Level.DEBUG);\n \n     TEST_WRITER = new InMemoryExporter();\n     OpenTelemetrySdk.getTracerProvider().addSpanProcessor(TEST_WRITER);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTA2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487345060", "bodyText": "we don't use the @author tag anywhere else (in favor of git history/blame). maybe permalink(s) to the source file(s) in order to effectively cite the author via that repo's git history/blame?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @author Based on Spring Sleuth's Reactor instrumentation.\n          \n          \n            \n             * @author Marcin Grzejszczak\n          \n          \n            \n             * Based on Spring Sleuth's Reactor instrumentation.", "author": "trask", "createdAt": "2020-09-12T00:43:41Z", "path": "instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -20,51 +20,53 @@\n \n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import java.util.List;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import reactor.core.CoreSubscriber;\n import reactor.core.publisher.Mono;\n \n+/**\n+ * @author Based on Spring Sleuth's Reactor instrumentation.\n+ * @author Marcin Grzejszczak", "originalCommit": "7e6feedb1acef99360c99ae13befe6b49032df8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "106b2c0a8c4a317d733a5095d0eeaaf35098f88d", "chunk": "diff --git a/instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java b/instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java\nindex 7c899840bd..d127a63ef9 100644\n--- a/instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java\n+++ b/instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java\n\n@@ -29,8 +29,8 @@ import reactor.core.CoreSubscriber;\n import reactor.core.publisher.Mono;\n \n /**\n- * @author Based on Spring Sleuth's Reactor instrumentation.\n- * @author Marcin Grzejszczak\n+ * Based on Spring Sleuth's Reactor instrumentation.\n+ * https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientBeanPostProcessor.java\n  */\n public class WebClientTracingFilter implements ExchangeFilterFunction {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTA4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487345088", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** @author Based on Spring Sleuth's Reactor instrumentation. */\n          \n          \n            \n            /** Based on Spring Sleuth's Reactor instrumentation. */", "author": "trask", "createdAt": "2020-09-12T00:43:58Z", "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */", "originalCommit": "7e6feedb1acef99360c99ae13befe6b49032df8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "106b2c0a8c4a317d733a5095d0eeaaf35098f88d", "chunk": "diff --git a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\nindex 40d8b6ae06..2481e42210 100644\n--- a/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\n+++ b/instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java\n\n@@ -26,7 +26,7 @@ import reactor.core.Scannable;\n import reactor.core.publisher.Hooks;\n import reactor.core.publisher.Operators;\n \n-/** @author Based on Spring Sleuth's Reactor instrumentation. */\n+/** Based on Spring Sleuth's Reactor instrumentation. */\n public class TracingOperator {\n \n   /**\n"}}, {"oid": "be0e5a2e4c2e8edfa73f760e3ddea972d8e74de0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/be0e5a2e4c2e8edfa73f760e3ddea972d8e74de0", "message": "Merge remote-tracking branch 'upstream/master' into reactor-bugs", "committedDate": "2020-09-14T11:15:02Z", "type": "commit"}, {"oid": "489536e466810c7586c2991acce19db9aded9500", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/489536e466810c7586c2991acce19db9aded9500", "message": "Revert \"Ignore failing test for now\"\n\nThis reverts commit 1867995a", "committedDate": "2020-09-14T11:36:21Z", "type": "commit"}, {"oid": "106b2c0a8c4a317d733a5095d0eeaaf35098f88d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/106b2c0a8c4a317d733a5095d0eeaaf35098f88d", "message": "Polish", "committedDate": "2020-09-14T11:43:08Z", "type": "commit"}, {"oid": "20396f810738bcc3fdf926f38fb7a47a1e2e28ba", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/20396f810738bcc3fdf926f38fb7a47a1e2e28ba", "message": "Fixes #1103", "committedDate": "2020-09-14T17:17:21Z", "type": "commit"}]}