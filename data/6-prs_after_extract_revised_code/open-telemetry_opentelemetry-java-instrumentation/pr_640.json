{"pr_number": 640, "pr_title": "[1] Create spring-core project in instrumentation-core/spring", "pr_createdAt": "2020-07-06T19:22:33Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNTA5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450635095", "bodyText": "This class should not be named Test. Also, this is an interceptor that uses opentelemetry, so better name is OpenTelemetryRequestInterceptor", "author": "anuraaga", "createdAt": "2020-07-07T06:21:38Z", "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptorTest implements ClientHttpRequestInterceptor {", "originalCommit": "d461aee72d9dc63fa0db81d23c211d3421608460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NTg0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450875849", "bodyText": "Yes, this was a mistake. I though I renamed a test and not the main java file. I'll fix this", "author": "mabdinur", "createdAt": "2020-07-07T13:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNTA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "62ad14b55f1bac8044781717a60287489574372d", "chunk": "diff --git a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nsimilarity index 58%\nrename from instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\nrename to instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nindex 118b9a884c..8a0be8955a 100644\n--- a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\n+++ b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\n\n@@ -14,12 +14,12 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.spring.instrumentation.httpclients;\n+package io.opentelemetry.instrumentation.spring.httpclients;\n+\n+import static io.opentelemetry.instrumentation.spring.httpclients.RestTemplateDecorator.DECORATE;\n \n import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNjI1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450636252", "bodyText": "Package should be io.opentelemetry.instrumentation.spring.httpclients", "author": "anuraaga", "createdAt": "2020-07-07T06:24:40Z", "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;", "originalCommit": "d461aee72d9dc63fa0db81d23c211d3421608460", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62ad14b55f1bac8044781717a60287489574372d", "chunk": "diff --git a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nsimilarity index 58%\nrename from instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\nrename to instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nindex 118b9a884c..8a0be8955a 100644\n--- a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\n+++ b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\n\n@@ -14,12 +14,12 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.spring.instrumentation.httpclients;\n+package io.opentelemetry.instrumentation.spring.httpclients;\n+\n+import static io.opentelemetry.instrumentation.spring.httpclients.RestTemplateDecorator.DECORATE;\n \n import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNjQzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450636437", "bodyText": "@Autowired perhaps", "author": "anuraaga", "createdAt": "2020-07-07T06:25:14Z", "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptorTest implements ClientHttpRequestInterceptor {\n+\n+  private static final HttpTextFormat.Setter<HttpRequest> SETTER =\n+      new HttpTextFormat.Setter<HttpRequest>() {\n+        @Override\n+        public void set(HttpRequest carrier, String key, String value) {\n+          carrier.getHeaders().set(key, value);\n+        }\n+      };\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateInterceptorTest(Tracer tracer) {", "originalCommit": "d461aee72d9dc63fa0db81d23c211d3421608460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg5NjE0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450896142", "bodyText": "I'm not sure if autowiring the Tracer in RestTemplateInterceptor makes the most sense here. I plan to initialize a RestTemplateInterceptor object in an autoconfigure project using this constructor RestTemplateInterceptor(Tracer tracer). Based on my current design this object will never be handle by Spring's IoC container. Does this approach make sense?", "author": "mabdinur", "createdAt": "2020-07-07T14:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNjQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "62ad14b55f1bac8044781717a60287489574372d", "chunk": "diff --git a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nsimilarity index 58%\nrename from instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\nrename to instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nindex 118b9a884c..8a0be8955a 100644\n--- a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\n+++ b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\n\n@@ -14,12 +14,12 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.spring.instrumentation.httpclients;\n+package io.opentelemetry.instrumentation.spring.httpclients;\n+\n+import static io.opentelemetry.instrumentation.spring.httpclients.RestTemplateDecorator.DECORATE;\n \n import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzODA2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450638062", "bodyText": "@jkwatson @carlosalberto I haven't followed up on the injection + context issue yet, but wanted to point out this code looks pretty confusing to me, instrumentation just wants to inject a span so round-tripping through context is obtuse. We can save some thread-local lookups by reading the current context before creating the span and creating a new context with explicit propagation, but that would be even more complexity that goes away if just injecting a span.", "author": "anuraaga", "createdAt": "2020-07-07T06:29:22Z", "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptorTest implements ClientHttpRequestInterceptor {\n+\n+  private static final HttpTextFormat.Setter<HttpRequest> SETTER =\n+      new HttpTextFormat.Setter<HttpRequest>() {\n+        @Override\n+        public void set(HttpRequest carrier, String key, String value) {\n+          carrier.getHeaders().set(key, value);\n+        }\n+      };\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateInterceptorTest(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public ClientHttpResponse intercept(\n+      HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {\n+\n+    String spanName = createSpanName(request);\n+    Span currentSpan = tracer.spanBuilder(spanName).setSpanKind(Span.Kind.CLIENT).startSpan();\n+\n+    try (Scope scope = tracer.withSpan(currentSpan)) {\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), request, SETTER);", "originalCommit": "d461aee72d9dc63fa0db81d23c211d3421608460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyODc5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r451028797", "bodyText": "I moved the span context injection to a decorator", "author": "mabdinur", "createdAt": "2020-07-07T17:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzODA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "62ad14b55f1bac8044781717a60287489574372d", "chunk": "diff --git a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nsimilarity index 58%\nrename from instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\nrename to instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nindex 118b9a884c..8a0be8955a 100644\n--- a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\n+++ b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\n\n@@ -14,12 +14,12 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.spring.instrumentation.httpclients;\n+package io.opentelemetry.instrumentation.spring.httpclients;\n+\n+import static io.opentelemetry.instrumentation.spring.httpclients.RestTemplateDecorator.DECORATE;\n \n import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzOTIyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450639229", "bodyText": "We should be using HttpClientDecorator which abstracts this sort of logic away. Otherwise, we don't want to put the URI here in a client since it has too high cardinality\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#name", "author": "anuraaga", "createdAt": "2020-07-07T06:32:28Z", "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptorTest implements ClientHttpRequestInterceptor {\n+\n+  private static final HttpTextFormat.Setter<HttpRequest> SETTER =\n+      new HttpTextFormat.Setter<HttpRequest>() {\n+        @Override\n+        public void set(HttpRequest carrier, String key, String value) {\n+          carrier.getHeaders().set(key, value);\n+        }\n+      };\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateInterceptorTest(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public ClientHttpResponse intercept(\n+      HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {\n+\n+    String spanName = createSpanName(request);\n+    Span currentSpan = tracer.spanBuilder(spanName).setSpanKind(Span.Kind.CLIENT).startSpan();\n+\n+    try (Scope scope = tracer.withSpan(currentSpan)) {\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), request, SETTER);\n+      ClientHttpResponse response = execution.execute(request, body);\n+      return response;\n+    } finally {\n+      currentSpan.end();\n+    }\n+  }\n+\n+  private String createSpanName(HttpRequest request) {", "originalCommit": "d461aee72d9dc63fa0db81d23c211d3421608460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3MTg0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450971842", "bodyText": "I removed this and created a new decorator that handles this logic", "author": "mabdinur", "createdAt": "2020-07-07T15:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzOTIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "62ad14b55f1bac8044781717a60287489574372d", "chunk": "diff --git a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nsimilarity index 58%\nrename from instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\nrename to instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\nindex 118b9a884c..8a0be8955a 100644\n--- a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java\n+++ b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java\n\n@@ -14,12 +14,12 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.spring.instrumentation.httpclients;\n+package io.opentelemetry.instrumentation.spring.httpclients;\n+\n+import static io.opentelemetry.instrumentation.spring.httpclients.RestTemplateDecorator.DECORATE;\n \n import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.io.IOException;\n"}}, {"oid": "62ad14b55f1bac8044781717a60287489574372d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/62ad14b55f1bac8044781717a60287489574372d", "message": "add spring-core project", "committedDate": "2020-07-08T03:18:59Z", "type": "forcePushed"}, {"oid": "4e4ee7d465700d027b12f89429a83ec98939f5a6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e4ee7d465700d027b12f89429a83ec98939f5a6", "message": "add spring-core project", "committedDate": "2020-07-08T03:32:51Z", "type": "forcePushed"}, {"oid": "c706e1d98b6657ca3d5a89cf6a6f23d851b6120b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c706e1d98b6657ca3d5a89cf6a6f23d851b6120b", "message": "add spring-core project", "committedDate": "2020-07-08T03:50:42Z", "type": "forcePushed"}, {"oid": "2e55ad8ab56dab9885e7e2836bccf83ed6b3bafd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e55ad8ab56dab9885e7e2836bccf83ed6b3bafd", "message": "add spring-core project", "committedDate": "2020-07-08T03:57:09Z", "type": "commit"}, {"oid": "2e55ad8ab56dab9885e7e2836bccf83ed6b3bafd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e55ad8ab56dab9885e7e2836bccf83ed6b3bafd", "message": "add spring-core project", "committedDate": "2020-07-08T03:57:09Z", "type": "forcePushed"}, {"oid": "8c217f156a4528c0e4db3fc68925df947e686cdb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8c217f156a4528c0e4db3fc68925df947e686cdb", "message": "update decorator and gradle file", "committedDate": "2020-07-08T04:45:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMTU5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r451321594", "bodyText": "Let's keep package private unless we later find a use case for exposing it", "author": "anuraaga", "createdAt": "2020-07-08T06:54:18Z", "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/HttpHeadersInjectAdapter.java", "diffHunk": "@@ -14,15 +14,17 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.instrumentation.spring;\n+package io.opentelemetry.instrumentation.spring.httpclients;\n \n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import org.springframework.http.HttpRequest;\n \n-@SpringBootApplication\n-public class Application {\n+public class HttpHeadersInjectAdapter implements HttpTextFormat.Setter<HttpRequest> {\n ", "originalCommit": "8c217f156a4528c0e4db3fc68925df947e686cdb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "chunk": "diff --git a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/HttpHeadersInjectAdapter.java b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/HttpHeadersInjectAdapter.java\nindex e9a9d60746..ec3718f50c 100644\n--- a/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/HttpHeadersInjectAdapter.java\n+++ b/instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/HttpHeadersInjectAdapter.java\n\n@@ -19,7 +19,7 @@ package io.opentelemetry.instrumentation.spring.httpclients;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import org.springframework.http.HttpRequest;\n \n-public class HttpHeadersInjectAdapter implements HttpTextFormat.Setter<HttpRequest> {\n+class HttpHeadersInjectAdapter implements HttpTextFormat.Setter<HttpRequest> {\n \n   public static final HttpHeadersInjectAdapter SETTER = new HttpHeadersInjectAdapter();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMTkzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r451321932", "bodyText": "So for now let's make only this class public and the rest package private", "author": "anuraaga", "createdAt": "2020-07-08T06:55:00Z", "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.httpclients;\n+\n+import static io.opentelemetry.instrumentation.spring.httpclients.RestTemplateDecorator.DECORATE;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptor implements ClientHttpRequestInterceptor {", "originalCommit": "8c217f156a4528c0e4db3fc68925df947e686cdb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "message": "update dependencies", "committedDate": "2020-07-08T14:57:53Z", "type": "commit"}, {"oid": "8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "message": "update dependencies", "committedDate": "2020-07-08T14:57:53Z", "type": "forcePushed"}, {"oid": "50b6467854b134b19f0a53b2ad2eb1264fe350ae", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/50b6467854b134b19f0a53b2ad2eb1264fe350ae", "message": "Merge branch 'master' into master", "committedDate": "2020-07-09T00:58:10Z", "type": "commit"}, {"oid": "7b3434fc30470e9bd7a6011ebab800e43b547e92", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7b3434fc30470e9bd7a6011ebab800e43b547e92", "message": "Update RestTemplateDecorator.java", "committedDate": "2020-07-09T00:59:03Z", "type": "commit"}, {"oid": "7766b6114827ad540b56062d82aaa70cba25b861", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7766b6114827ad540b56062d82aaa70cba25b861", "message": "Update settings.gradle", "committedDate": "2020-07-09T00:59:40Z", "type": "commit"}, {"oid": "677962ceb550a5d36f980d089ef873e08471227f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/677962ceb550a5d36f980d089ef873e08471227f", "message": "Update instrumentation-core/spring/spring-core/spring-core.gradle\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-09T02:57:18Z", "type": "commit"}, {"oid": "9c7cb9a29442ef5d6da3065761cfd3a3c895b97c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c7cb9a29442ef5d6da3065761cfd3a3c895b97c", "message": "rename project to spring-web", "committedDate": "2020-07-09T03:07:13Z", "type": "commit"}]}