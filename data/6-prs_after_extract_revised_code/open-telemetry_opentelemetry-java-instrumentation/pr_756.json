{"pr_number": 756, "pr_title": "Add instrumentation for Armeria (server)", "pr_createdAt": "2020-07-22T11:26:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756", "timeline": [{"oid": "0bcec1c679af505e598b9baed77607a50b102312", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0bcec1c679af505e598b9baed77607a50b102312", "message": "Add instrumentation for Armeria (server)", "committedDate": "2020-07-22T11:23:28Z", "type": "commit"}, {"oid": "886be612d50090262c68e98e6df9e7350848c61a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/886be612d50090262c68e98e6df9e7350848c61a", "message": "Spotless", "committedDate": "2020-07-22T14:32:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MjU3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459182575", "bodyText": "Curious if we can utilize ctx.log().serviceName()", "author": "trustin", "createdAt": "2020-07-23T02:20:47Z", "path": "instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v0_99.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Route;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/** Decorates an {@link HttpService} to trace inbound {@link HttpRequest}s. */\n+public class OpenTelemetryService extends SimpleDecoratingHttpService {\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the default {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator() {\n+    return service -> new OpenTelemetryService(service, new ArmeriaServerTracer());\n+  }\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the specified {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator(Tracer tracer) {\n+    return service -> new OpenTelemetryService(service, new ArmeriaServerTracer(tracer));\n+  }\n+\n+  private final ArmeriaServerTracer serverTracer;\n+\n+  private OpenTelemetryService(HttpService delegate, ArmeriaServerTracer serverTracer) {\n+    super(delegate);\n+    this.serverTracer = serverTracer;\n+  }\n+\n+  @Override\n+  public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+    String route = route(ctx);\n+    String spanName = route != null ? route : \"HTTP \" + req.method().name();", "originalCommit": "886be612d50090262c68e98e6df9e7350848c61a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMDQxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459210418", "bodyText": "Yeah let me check it in a followup PR where I add tests for armeria-grpc with it, for now I want to focus on the minimum HTTP behavior. Especially with auto instrumentation we might have some issue due to applying both instrumentations.\nIn the meantime maybe you can help with this one :)\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756/files#diff-a63d5fb32f3eb41b3cde769b7807b2e6R87", "author": "anuraaga", "createdAt": "2020-07-23T04:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MjU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0952b63b7db3aaa6e19ecea6eb2d96da7ab0e2f8", "chunk": "diff --git a/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java b/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java\nindex 2fed197a79..e57e770cfe 100644\n--- a/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java\n+++ b/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java\n\n@@ -59,9 +59,8 @@ public class OpenTelemetryService extends SimpleDecoratingHttpService {\n     // Always available in practice.\n     long requestStartTimeMicros =\n         ctx.log().ensureAvailable(RequestLogProperty.REQUEST_START_TIME).requestStartTimeMicros();\n-    Span span =\n-        serverTracer.startSpan(\n-            req, ctx, spanName, TimeUnit.MICROSECONDS.toNanos(requestStartTimeMicros));\n+    long requestStartTimeNanos = TimeUnit.MICROSECONDS.toNanos(requestStartTimeMicros);\n+    Span span = serverTracer.startSpan(req, ctx, spanName, requestStartTimeNanos);\n \n     // For non-recording spans, nothing special to do.\n     if (!span.isRecording()) {\n"}}, {"oid": "7c5feae4eede08e295f1820d86fba077a7021f3c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c5feae4eede08e295f1820d86fba077a7021f3c", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into armeria-instrumentation", "committedDate": "2020-07-23T04:52:35Z", "type": "commit"}, {"oid": "0952b63b7db3aaa6e19ecea6eb2d96da7ab0e2f8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0952b63b7db3aaa6e19ecea6eb2d96da7ab0e2f8", "message": "Use end timestamp too and fix auto test by not using ClassRule", "committedDate": "2020-07-23T05:20:56Z", "type": "commit"}, {"oid": "c82f98816d2e8584646e979581827c1cbdba2298", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c82f98816d2e8584646e979581827c1cbdba2298", "message": "Reduce number of less useful lambdas and add reference to useful lambda.", "committedDate": "2020-07-23T06:21:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MDYyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459840622", "bodyText": "this is intended to be version of the instrumentation, e.g. ${project.version}, but we haven't implemented yet\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Version.get(\"armeria\").artifactVersion();\n          \n          \n            \n                return null;", "author": "trask", "createdAt": "2020-07-24T03:55:04Z", "path": "instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v0_99.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.Version;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.instrumentation.armeria.v0_99.internal.ContextUtil;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+\n+final class ArmeriaServerTracer\n+    extends HttpServerTracer<HttpRequest, ServiceRequestContext, RequestContext> {\n+\n+  ArmeriaServerTracer() {}\n+\n+  ArmeriaServerTracer(Tracer tracer) {\n+    super(tracer);\n+  }\n+\n+  @Override\n+  public Context getServerContext(RequestContext ctx) {\n+    return ContextUtil.getContext(ctx);\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.armeria-0.99\";\n+  }\n+\n+  @Override\n+  protected String getVersion() {\n+    return Version.get(\"armeria\").artifactVersion();", "originalCommit": "c82f98816d2e8584646e979581827c1cbdba2298", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "914d52a1d323244002e88b5d48325d758d4b8b42", "chunk": "diff --git a/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java b/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java\nindex a07f80b5b0..325ec5f8d7 100644\n--- a/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java\n+++ b/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java\n\n@@ -18,7 +18,6 @@ package io.opentelemetry.instrumentation.armeria.v0_99.server;\n \n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.RequestContext;\n-import com.linecorp.armeria.common.util.Version;\n import com.linecorp.armeria.server.ServiceRequestContext;\n import io.grpc.Context;\n import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MjMzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459842332", "bodyText": "it looks like we aren't using the STORAGE parameter, e.g. no calls to getServerContext\nif that's the case, maybe good to be explicit about this (similar to AkkaHttpServerTracer)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                extends HttpServerTracer<HttpRequest, ServiceRequestContext, RequestContext> {\n          \n          \n            \n                extends HttpServerTracer<HttpRequest, ServiceRequestContext, Void> {", "author": "trask", "createdAt": "2020-07-24T04:04:54Z", "path": "instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v0_99.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.Version;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.instrumentation.armeria.v0_99.internal.ContextUtil;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+\n+final class ArmeriaServerTracer\n+    extends HttpServerTracer<HttpRequest, ServiceRequestContext, RequestContext> {", "originalCommit": "c82f98816d2e8584646e979581827c1cbdba2298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4NjMwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459886305", "bodyText": "It's used in startScope I think", "author": "anuraaga", "createdAt": "2020-07-24T07:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NzM1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r460367352", "bodyText": "ya, it's attached in startScope, but then never read after that", "author": "trask", "createdAt": "2020-07-25T05:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDEyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r460474125", "bodyText": "Hmm I think I want to keep it like this, Armeria does provide a storage implementation, whether that's actually used or not is more a decision of HttpServerTracer than the armeria instrumentation from what I can tell.", "author": "anuraaga", "createdAt": "2020-07-26T03:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NzU3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r460477576", "bodyText": "whether that's actually used or not is more a decision of HttpServerTracer than the armeria instrumentation from what I can tell\n\nso, confusingly, this is not the case. it's up to the individual instrumentation to use what's in STORAGE if they need it for propagation\nit seems likely we will need it in the armeria instrumentation in the future, e.g. for propagating context to some async handlers, so we can keep it, though maybe a comment about it not being used currently?\n@iNikem please correct me if I'm missing something about the STORAGE param (either current or future plans).", "author": "trask", "createdAt": "2020-07-26T04:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NzY0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r460477645", "bodyText": "oh yes, and i opened #791 to document the STORAGE param, it is confusing when/if to use it", "author": "trask", "createdAt": "2020-07-26T04:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3OTU5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r460479598", "bodyText": "Ok less complexity makes sense. I'll revisit after instrumenting client and introducing some more complex async scenarios.", "author": "anuraaga", "createdAt": "2020-07-26T05:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MjMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "914d52a1d323244002e88b5d48325d758d4b8b42", "chunk": "diff --git a/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java b/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java\nindex a07f80b5b0..325ec5f8d7 100644\n--- a/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java\n+++ b/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java\n\n@@ -18,7 +18,6 @@ package io.opentelemetry.instrumentation.armeria.v0_99.server;\n \n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.RequestContext;\n-import com.linecorp.armeria.common.util.Version;\n import com.linecorp.armeria.server.ServiceRequestContext;\n import io.grpc.Context;\n import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MzI1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459843256", "bodyText": "maybe wrap this in span.isRecording() and then don't need above condition/short-circuit?", "author": "trask", "createdAt": "2020-07-24T04:10:15Z", "path": "instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v0_99.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Route;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/** Decorates an {@link HttpService} to trace inbound {@link HttpRequest}s. */\n+public class OpenTelemetryService extends SimpleDecoratingHttpService {\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the default {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator() {\n+    return new Decorator(new ArmeriaServerTracer());\n+  }\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the specified {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator(Tracer tracer) {\n+    return new Decorator(new ArmeriaServerTracer(tracer));\n+  }\n+\n+  private final ArmeriaServerTracer serverTracer;\n+\n+  private OpenTelemetryService(HttpService delegate, ArmeriaServerTracer serverTracer) {\n+    super(delegate);\n+    this.serverTracer = serverTracer;\n+  }\n+\n+  @Override\n+  public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+    String route = route(ctx);\n+    String spanName = route != null ? route : \"HTTP \" + req.method().name();\n+\n+    // Always available in practice.\n+    long requestStartTimeMicros =\n+        ctx.log().ensureAvailable(RequestLogProperty.REQUEST_START_TIME).requestStartTimeMicros();\n+    long requestStartTimeNanos = TimeUnit.MICROSECONDS.toNanos(requestStartTimeMicros);\n+    Span span = serverTracer.startSpan(req, ctx, spanName, requestStartTimeNanos);\n+\n+    // For non-recording spans, nothing special to do.\n+    if (!span.isRecording()) {\n+      try (Scope ignored = serverTracer.startScope(span, ctx)) {\n+        return unwrap().serve(ctx, req);\n+      }\n+    }\n+\n+    ctx.log()", "originalCommit": "c82f98816d2e8584646e979581827c1cbdba2298", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "914d52a1d323244002e88b5d48325d758d4b8b42", "chunk": "diff --git a/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java b/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java\nindex df1b5816df..3314c7165b 100644\n--- a/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java\n+++ b/instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java\n\n@@ -36,12 +36,18 @@ public class OpenTelemetryService extends SimpleDecoratingHttpService {\n \n   /** Creates a new tracing {@link HttpService} decorator using the default {@link Tracer}. */\n   public static Function<? super HttpService, OpenTelemetryService> newDecorator() {\n-    return new Decorator(new ArmeriaServerTracer());\n+    return newDecorator(new ArmeriaServerTracer());\n   }\n \n   /** Creates a new tracing {@link HttpService} decorator using the specified {@link Tracer}. */\n   public static Function<? super HttpService, OpenTelemetryService> newDecorator(Tracer tracer) {\n-    return new Decorator(new ArmeriaServerTracer(tracer));\n+    return newDecorator(new ArmeriaServerTracer(tracer));\n+  }\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the specified {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator(\n+      ArmeriaServerTracer serverTracer) {\n+    return new Decorator(serverTracer);\n   }\n \n   private final ArmeriaServerTracer serverTracer;\n"}}, {"oid": "cf3bfbd74e82206ebe3fb467867f04e3e0a798cc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cf3bfbd74e82206ebe3fb467867f04e3e0a798cc", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into armeria-instrumentation", "committedDate": "2020-07-24T05:13:22Z", "type": "commit"}, {"oid": "914d52a1d323244002e88b5d48325d758d4b8b42", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/914d52a1d323244002e88b5d48325d758d4b8b42", "message": "Cleanup", "committedDate": "2020-07-24T07:14:52Z", "type": "commit"}, {"oid": "2c8b32f8ea8cf77eb1e5f8c776b8df3d4f1e2af6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c8b32f8ea8cf77eb1e5f8c776b8df3d4f1e2af6", "message": "README", "committedDate": "2020-07-25T01:47:09Z", "type": "commit"}, {"oid": "3ee6f2d2c8e65b5085a46038bbb24e54fb74ed0a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ee6f2d2c8e65b5085a46038bbb24e54fb74ed0a", "message": "Move package to v1_0", "committedDate": "2020-07-26T03:59:16Z", "type": "commit"}, {"oid": "61661f3ac59f281edf0deb6411ef00d86e678330", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/61661f3ac59f281edf0deb6411ef00d86e678330", "message": "No storage", "committedDate": "2020-07-26T05:11:28Z", "type": "commit"}]}