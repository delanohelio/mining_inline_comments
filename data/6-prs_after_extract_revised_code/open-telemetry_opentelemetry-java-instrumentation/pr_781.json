{"pr_number": 781, "pr_title": "Add Database Typed Spans", "pr_createdAt": "2020-07-24T08:19:06Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/781", "timeline": [{"oid": "4e4c600765afae317cff3aa233f7040edb1ee260", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e4c600765afae317cff3aa233f7040edb1ee260", "message": "Add Database Typed Spans", "committedDate": "2020-07-24T08:14:44Z", "type": "commit"}, {"oid": "5691e12af338df1609e3af2d5600353da458c9e7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5691e12af338df1609e3af2d5600353da458c9e7", "message": "Style", "committedDate": "2020-07-24T08:17:26Z", "type": "commit"}, {"oid": "c6ce5a7546dbf1280fa559896cfd47f73c9ee60c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c6ce5a7546dbf1280fa559896cfd47f73c9ee60c", "message": "Update boostrap classes", "committedDate": "2020-07-25T06:06:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MjQyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/781#discussion_r460552424", "bodyText": "package protected?", "author": "trask", "createdAt": "2020-07-26T17:24:42Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/typedspan/DelegatingSpan.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.typedspan;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+\n+public class DelegatingSpan implements Span {", "originalCommit": "c6ce5a7546dbf1280fa559896cfd47f73c9ee60c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MzM4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/781#discussion_r460553388", "bodyText": "it looks like we are starting with AttributeStatus.EMPTY and modifying the internal content of the enum, which will carry over to the next time that the enum is used", "author": "trask", "createdAt": "2020-07-26T17:33:58Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/typedspan/DbSpan.java", "diffHunk": "@@ -0,0 +1,492 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.typedspan;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.logging.Logger;\n+\n+/**\n+ * <b>Required attributes:</b>\n+ *\n+ * <ul>\n+ *   <li>db.system: An identifier for the database management system (DBMS) product being used. See\n+ *       below for a list of well-known identifiers.\n+ * </ul>\n+ *\n+ * <b>Conditional attributes:</b>\n+ *\n+ * <ul>\n+ *   <li>db.name: If no tech-specific attribute is defined, this attribute is used to report the\n+ *       name of the database being accessed. For commands that switch the database, this should be\n+ *       set to the target database (even if the command fails).\n+ *   <li>db.statement: The database statement being executed.\n+ *   <li>db.operation: The name of the operation being executed, e.g. the [MongoDB command\n+ *       name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as\n+ *       `findAndModify`.\n+ *   <li>net.peer.name: Remote hostname or similar, see note below.\n+ *   <li>net.peer.ip: Remote address of the peer (dotted decimal for IPv4 or\n+ *       [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6)\n+ *   <li>net.peer.port: Remote port number.\n+ *   <li>net.transport: Transport protocol used. See note below.\n+ * </ul>\n+ *\n+ * <b>Additional constraints</b>\n+ *\n+ * <p>At least one of the following must be set:\n+ *\n+ * <ul>\n+ *   <li>net.peer.name\n+ *   <li>net.peer.ip\n+ * </ul>\n+ */\n+public class DbSpan extends DelegatingSpan implements DbSemanticConvention {\n+\n+  enum AttributeStatus {\n+    EMPTY,\n+    DB_SYSTEM,\n+    DB_CONNECTION_STRING,\n+    DB_USER,\n+    DB_JDBC_DRIVER_CLASSNAME,\n+    DB_NAME,\n+    DB_STATEMENT,\n+    DB_OPERATION,\n+    NET_PEER_NAME,\n+    NET_PEER_IP,\n+    NET_PEER_PORT,\n+    NET_TRANSPORT;\n+\n+    @SuppressWarnings(\"ImmutableEnumChecker\")\n+    private long flag;", "originalCommit": "c6ce5a7546dbf1280fa559896cfd47f73c9ee60c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1920ce43f371a7c53c7878d6ac958e7d6f971901", "chunk": "diff --git a/agent-bootstrap/src/main/java/io/opentelemetry/auto/typedspan/DbSpan.java b/agent-bootstrap/src/main/java/io/opentelemetry/auto/typedspan/DbSpan.java\nindex 1ccbd0dda..4921c225d 100644\n--- a/agent-bootstrap/src/main/java/io/opentelemetry/auto/typedspan/DbSpan.java\n+++ b/agent-bootstrap/src/main/java/io/opentelemetry/auto/typedspan/DbSpan.java\n\n@@ -19,90 +19,11 @@ package io.opentelemetry.auto.typedspan;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.Tracer;\n-import java.util.logging.Logger;\n \n-/**\n- * <b>Required attributes:</b>\n- *\n- * <ul>\n- *   <li>db.system: An identifier for the database management system (DBMS) product being used. See\n- *       below for a list of well-known identifiers.\n- * </ul>\n- *\n- * <b>Conditional attributes:</b>\n- *\n- * <ul>\n- *   <li>db.name: If no tech-specific attribute is defined, this attribute is used to report the\n- *       name of the database being accessed. For commands that switch the database, this should be\n- *       set to the target database (even if the command fails).\n- *   <li>db.statement: The database statement being executed.\n- *   <li>db.operation: The name of the operation being executed, e.g. the [MongoDB command\n- *       name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as\n- *       `findAndModify`.\n- *   <li>net.peer.name: Remote hostname or similar, see note below.\n- *   <li>net.peer.ip: Remote address of the peer (dotted decimal for IPv4 or\n- *       [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6)\n- *   <li>net.peer.port: Remote port number.\n- *   <li>net.transport: Transport protocol used. See note below.\n- * </ul>\n- *\n- * <b>Additional constraints</b>\n- *\n- * <p>At least one of the following must be set:\n- *\n- * <ul>\n- *   <li>net.peer.name\n- *   <li>net.peer.ip\n- * </ul>\n- */\n public class DbSpan extends DelegatingSpan implements DbSemanticConvention {\n \n-  enum AttributeStatus {\n-    EMPTY,\n-    DB_SYSTEM,\n-    DB_CONNECTION_STRING,\n-    DB_USER,\n-    DB_JDBC_DRIVER_CLASSNAME,\n-    DB_NAME,\n-    DB_STATEMENT,\n-    DB_OPERATION,\n-    NET_PEER_NAME,\n-    NET_PEER_IP,\n-    NET_PEER_PORT,\n-    NET_TRANSPORT;\n-\n-    @SuppressWarnings(\"ImmutableEnumChecker\")\n-    private long flag;\n-\n-    AttributeStatus() {\n-      this.flag = 1L << this.ordinal();\n-    }\n-\n-    public boolean isSet(AttributeStatus attribute) {\n-      return (this.flag & attribute.flag) > 0;\n-    }\n-\n-    public void set(AttributeStatus attribute) {\n-      this.flag |= attribute.flag;\n-    }\n-\n-    public void set(long attribute) {\n-      this.flag = attribute;\n-    }\n-\n-    public long getValue() {\n-      return flag;\n-    }\n-  }\n-\n-  @SuppressWarnings(\"unused\")\n-  private static final Logger logger = Logger.getLogger(DbSpan.class.getName());\n-\n-  public final AttributeStatus status;\n-\n-  protected DbSpan(Span span, AttributeStatus status) {\n+  protected DbSpan(Span span) {\n     super(span);\n-    this.status = status;\n   }\n \n   /**\n"}}, {"oid": "1920ce43f371a7c53c7878d6ac958e7d6f971901", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1920ce43f371a7c53c7878d6ac958e7d6f971901", "message": "Remove required attributes check", "committedDate": "2020-07-28T05:59:09Z", "type": "commit"}]}