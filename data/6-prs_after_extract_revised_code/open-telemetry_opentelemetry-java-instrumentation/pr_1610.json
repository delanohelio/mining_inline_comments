{"pr_number": 1610, "pr_title": "Remove Instrumenter.Default", "pr_createdAt": "2020-11-10T10:56:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610", "timeline": [{"oid": "12bb249eb90243bbc237d881b15d71d94b755556", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/12bb249eb90243bbc237d881b15d71d94b755556", "message": "Remove Instrumenter.Default", "committedDate": "2020-11-10T15:41:27Z", "type": "commit"}, {"oid": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "message": "Remove Instrumenter.Default - fix tests", "committedDate": "2020-11-10T15:41:27Z", "type": "commit"}, {"oid": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "message": "Remove Instrumenter.Default - fix tests", "committedDate": "2020-11-10T15:41:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0OTM3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520749377", "bodyText": "just checking if intentional", "author": "trask", "createdAt": "2020-11-10T17:40:59Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "diffHunk": "@@ -135,55 +120,37 @@ public static void assertInstrumentationMuzzled(\n   }\n \n   /**\n-   * Prints all references from all instrumenters present in the passed {@code\n+   * Prints all references from all instrumentation modules present in the passed {@code\n    * instrumentationClassLoader}.\n    *\n    * <p>Called by the {@code printMuzzleReferences} gradle task.\n    */\n   public static void printMuzzleReferences(ClassLoader instrumentationClassLoader) {\n-    for (Object instrumenter : loadAllInstrumenters(instrumentationClassLoader)) {\n-      if (instrumenter instanceof Instrumenter.Default\n-          || instrumenter instanceof InstrumentationModule) {\n+    for (InstrumentationModule instrumentationModule :\n+        ServiceLoader.load(InstrumentationModule.class, instrumentationClassLoader)) {\n+      try {\n+        Method getMuzzleMethod =\n+            instrumentationModule.getClass().getDeclaredMethod(\"getMuzzleReferenceMatcher\");\n+        ReferenceMatcher muzzle;\n         try {\n-          Method getMuzzleMethod =\n-              instrumenter.getClass().getDeclaredMethod(\"getMuzzleReferenceMatcher\");\n-          ReferenceMatcher muzzle;\n-          try {\n-            getMuzzleMethod.setAccessible(true);\n-            muzzle = (ReferenceMatcher) getMuzzleMethod.invoke(instrumenter);\n-          } finally {\n-            getMuzzleMethod.setAccessible(false);\n-          }\n-          System.out.println(instrumenter.getClass().getName());\n-          for (Reference ref : muzzle.getReferences()) {\n-            System.out.println(prettyPrint(\"  \", ref));\n-          }\n-        } catch (Exception e) {\n-          System.out.println(\n-              \"Unexpected exception printing references for \" + instrumenter.getClass().getName());\n-          throw new RuntimeException(e);\n+          getMuzzleMethod.setAccessible(true);\n+          muzzle = (ReferenceMatcher) getMuzzleMethod.invoke(instrumentationModule);\n+        } finally {\n+          getMuzzleMethod.setAccessible(false);\n+        }\n+        System.out.println(instrumentationModule.getClass().getName());\n+        for (Reference ref : muzzle.getReferences()) {\n+          System.out.println(prettyPrint(\"  \", ref));\n         }", "originalCommit": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MTY1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520761650", "bodyText": "Sysout? Yes, this class is just a helper that's only run from the Gradle muzzle plugin.", "author": "mateuszrzeszutek", "createdAt": "2020-11-10T17:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0OTM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MDg2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520860863", "bodyText": "oh sorry! i missed that this is inside of printMuzzleReferences \ud83d\ude01", "author": "trask", "createdAt": "2020-11-10T20:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0OTM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2be88a85e646dc68827edf2bd0d9fb76e6bd8f2c", "chunk": "diff --git a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java\nindex 2c4c063624..c581538102 100644\n--- a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java\n+++ b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java\n\n@@ -143,10 +143,11 @@ public final class MuzzleGradlePluginUtil {\n           System.out.println(prettyPrint(\"  \", ref));\n         }\n       } catch (Exception e) {\n-        System.out.println(\n+        String message =\n             \"Unexpected exception printing references for \"\n-                + instrumentationModule.getClass().getName());\n-        throw new RuntimeException(e);\n+                + instrumentationModule.getClass().getName();\n+        System.out.println(message);\n+        throw new RuntimeException(message, e);\n       }\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MDQyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520750422", "bodyText": "include message in the re-thrown exception instead of sysout?", "author": "trask", "createdAt": "2020-11-10T17:42:37Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "diffHunk": "@@ -135,55 +120,37 @@ public static void assertInstrumentationMuzzled(\n   }\n \n   /**\n-   * Prints all references from all instrumenters present in the passed {@code\n+   * Prints all references from all instrumentation modules present in the passed {@code\n    * instrumentationClassLoader}.\n    *\n    * <p>Called by the {@code printMuzzleReferences} gradle task.\n    */\n   public static void printMuzzleReferences(ClassLoader instrumentationClassLoader) {\n-    for (Object instrumenter : loadAllInstrumenters(instrumentationClassLoader)) {\n-      if (instrumenter instanceof Instrumenter.Default\n-          || instrumenter instanceof InstrumentationModule) {\n+    for (InstrumentationModule instrumentationModule :\n+        ServiceLoader.load(InstrumentationModule.class, instrumentationClassLoader)) {\n+      try {\n+        Method getMuzzleMethod =\n+            instrumentationModule.getClass().getDeclaredMethod(\"getMuzzleReferenceMatcher\");\n+        ReferenceMatcher muzzle;\n         try {\n-          Method getMuzzleMethod =\n-              instrumenter.getClass().getDeclaredMethod(\"getMuzzleReferenceMatcher\");\n-          ReferenceMatcher muzzle;\n-          try {\n-            getMuzzleMethod.setAccessible(true);\n-            muzzle = (ReferenceMatcher) getMuzzleMethod.invoke(instrumenter);\n-          } finally {\n-            getMuzzleMethod.setAccessible(false);\n-          }\n-          System.out.println(instrumenter.getClass().getName());\n-          for (Reference ref : muzzle.getReferences()) {\n-            System.out.println(prettyPrint(\"  \", ref));\n-          }\n-        } catch (Exception e) {\n-          System.out.println(\n-              \"Unexpected exception printing references for \" + instrumenter.getClass().getName());\n-          throw new RuntimeException(e);\n+          getMuzzleMethod.setAccessible(true);\n+          muzzle = (ReferenceMatcher) getMuzzleMethod.invoke(instrumentationModule);\n+        } finally {\n+          getMuzzleMethod.setAccessible(false);\n+        }\n+        System.out.println(instrumentationModule.getClass().getName());\n+        for (Reference ref : muzzle.getReferences()) {\n+          System.out.println(prettyPrint(\"  \", ref));\n         }\n-      } else {\n-        throw new RuntimeException(\n-            \"class \"\n-                + instrumenter.getClass().getName()\n-                + \" is not a default instrumenter. No refs to print.\");\n+      } catch (Exception e) {\n+        System.out.println(\n+            \"Unexpected exception printing references for \"\n+                + instrumentationModule.getClass().getName());\n+        throw new RuntimeException(e);", "originalCommit": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MjM2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520762366", "bodyText": "I'll do both - as I mentioned in another comment, this class is supposed to print out what it's doing since it's a part of the Gradle plugin.", "author": "mateuszrzeszutek", "createdAt": "2020-11-10T18:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MDQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2be88a85e646dc68827edf2bd0d9fb76e6bd8f2c", "chunk": "diff --git a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java\nindex 2c4c063624..c581538102 100644\n--- a/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java\n+++ b/javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java\n\n@@ -143,10 +143,11 @@ public final class MuzzleGradlePluginUtil {\n           System.out.println(prettyPrint(\"  \", ref));\n         }\n       } catch (Exception e) {\n-        System.out.println(\n+        String message =\n             \"Unexpected exception printing references for \"\n-                + instrumentationModule.getClass().getName());\n-        throw new RuntimeException(e);\n+                + instrumentationModule.getClass().getName();\n+        System.out.println(message);\n+        throw new RuntimeException(message, e);\n       }\n     }\n   }\n"}}, {"oid": "44230cbb3b20a438a5df757203d99827c0cca1a6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44230cbb3b20a438a5df757203d99827c0cca1a6", "message": "Update docs/contributing/muzzle.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-11-10T17:57:07Z", "type": "commit"}, {"oid": "2be88a85e646dc68827edf2bd0d9fb76e6bd8f2c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2be88a85e646dc68827edf2bd0d9fb76e6bd8f2c", "message": "Apply code review comments", "committedDate": "2020-11-10T18:03:34Z", "type": "commit"}]}