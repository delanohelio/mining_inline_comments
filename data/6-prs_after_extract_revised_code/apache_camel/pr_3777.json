{"pr_number": 3777, "pr_title": "CAMEL-2983 - resteasy component", "pr_createdAt": "2020-04-24T19:33:10Z", "pr_url": "https://github.com/apache/camel/pull/3777", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5OTY3Nw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r414999677", "bodyText": "Looks like this is from test period debug :)", "author": "dmvolod", "createdAt": "2020-04-25T06:58:22Z", "path": "components/camel-resteasy/src/test/java/org/apache/camel/component/resteasy/test/ResteasyConsumerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy.test;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Files;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.component.resteasy.test.beans.Customer;\n+import org.apache.camel.component.resteasy.test.beans.CustomerList;\n+import org.apache.camel.component.resteasy.test.beans.CustomerService;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.junit.InSequence;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.shrinkwrap.resolver.api.maven.Maven;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class ResteasyConsumerTest {\n+\n+    @ArquillianResource\n+    URI baseUri;\n+\n+    @Deployment\n+    public static Archive<?> createTestArchive() {\n+        \n+        return ShrinkWrap.create(WebArchive.class, \"test.war\")\n+                .addClasses(Customer.class, CustomerService.class, CustomerList.class)\n+                .addPackage(\"org.apache.camel.component.resteasy\")\n+                .addPackage(\"org.apache.camel.component.resteasy.servlet\")\n+                .addAsLibraries(Maven.resolver().loadPomFromFile(\"pom.xml\")\n+                        .importRuntimeAndTestDependencies().resolve().withTransitivity().asFile())\n+                .addAsWebInfResource(new File(\"src/test/resources/contexts/basicConsumer.xml\"), \"applicationContext.xml\")\n+                .addAsWebInfResource(\"web.xml\");\n+\n+    }\n+\n+    private Response createCustomer(Customer customer) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        WebTarget target = client.target(baseUri.toString() + \"customer/createCustomer\");\n+        Response response = target.request(MediaType.APPLICATION_JSON)\n+                .post(Entity.entity(customer, MediaType.APPLICATION_JSON_TYPE));\n+\n+        Assert.assertEquals(200, response.getStatus());\n+        return response;\n+    }\n+\n+    private Response deleteCustomer(int id) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        WebTarget target = client.target(baseUri.toString() + \"customer/deleteCustomer?id=\" + id);\n+        Response response = target.request().delete();\n+\n+        Assert.assertEquals(200, response.getStatus());\n+\n+        return response;\n+    }\n+\n+    private Customer getCustomer(int id) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        WebTarget target = client.target(baseUri.toString() + \"customer/getCustomer?id=\" + id);\n+        Response response = target.request().get();\n+\n+        Assert.assertEquals(200, response.getStatus());\n+\n+        return response.readEntity(Customer.class);\n+    }\n+\n+    @Test\n+    @InSequence(1)\n+    public void testGetAll() throws Exception {\n+        String expectedUser1 = \"{\\\"name\\\":\\\"Roman\\\",\\\"surname\\\":\\\"Jakubco\\\",\\\"id\\\":1}\";\n+        String expectedUser2 = \"{\\\"name\\\":\\\"Camel\\\",\\\"surname\\\":\\\"Rider\\\",\\\"id\\\":2}\";\n+\n+        Client client = ClientBuilder.newBuilder().build();\n+        WebTarget target = client.target(baseUri.toString() + \"customer/getAll\");\n+        Response response = target.request().get();\n+\n+        Assert.assertEquals(200, response.getStatus());\n+\n+        String users = response.readEntity(String.class);\n+        Assert.assertTrue(users.contains(expectedUser1));\n+        Assert.assertTrue(users.contains(expectedUser2));\n+\n+        File file = new File(\"target/test/consumerTest/all.txt\");\n+        byte[] encoded = Files.readAllBytes(file.toPath());\n+        String responseBody = new String(encoded);\n+\n+        Assert.assertTrue(responseBody.contains(expectedUser1));\n+        Assert.assertTrue(responseBody.contains(expectedUser2));\n+    }\n+\n+    @Test\n+    public void testGet() throws Exception {\n+        Customer customer = getCustomer(2);\n+\n+        Assert.assertEquals(new Customer(\"Camel\", \"Rider\", 2), customer);\n+\n+        File file = new File(\"target/test/consumerTest/get.txt\");\n+        byte[] encoded = Files.readAllBytes(file.toPath());\n+        String responseBody = new String(encoded);\n+\n+        Assert.assertEquals(\"{\\\"name\\\":\\\"Camel\\\",\\\"surname\\\":\\\"Rider\\\",\\\"id\\\":2}\", responseBody);\n+    }\n+\n+    @Test\n+    public void testPost() throws Exception {\n+\n+        String expectedResponse = \"Customer added : Customer{name='TestCreate', surname='TestCreate', id=3}\";\n+        int customerId = 3;\n+\n+        Customer customer = new Customer(\"TestCreate\", \"TestCreate\", customerId);\n+        Response response = createCustomer(customer);\n+        System.out.println(response.readEntity(String.class));", "originalCommit": "03a1cd73cc052474ff2df4f28b5d3d940d33b3bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAwOTcyOA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415009728", "bodyText": "nice catch :)", "author": "onderson", "createdAt": "2020-04-25T08:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5OTY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "chunk": "diff --git a/components/camel-resteasy/src/test/java/org/apache/camel/component/resteasy/test/ResteasyConsumerTest.java b/components/camel-resteasy/src/test/java/org/apache/camel/component/resteasy/test/ResteasyConsumerTest.java\nindex 1745377b850..b5f9067dbb6 100644\n--- a/components/camel-resteasy/src/test/java/org/apache/camel/component/resteasy/test/ResteasyConsumerTest.java\n+++ b/components/camel-resteasy/src/test/java/org/apache/camel/component/resteasy/test/ResteasyConsumerTest.java\n\n@@ -139,7 +139,6 @@ public class ResteasyConsumerTest {\n \n         Customer customer = new Customer(\"TestCreate\", \"TestCreate\", customerId);\n         Response response = createCustomer(customer);\n-        System.out.println(response.readEntity(String.class));\n         // Assert.assertEquals(expectedResponse,\n         // response.readEntity(String.class));\n \n"}}, {"oid": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "url": "https://github.com/apache/camel/commit/6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "message": "CAMEL-2933 - resteasy component", "committedDate": "2020-04-25T08:23:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzExNg==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415837116", "bodyText": "Use {} placeholders in logger and not + concat", "author": "davsclaus", "createdAt": "2020-04-27T13:59:48Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n+import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The default Resteasy binding implementation\n+ */\n+public class DefaultResteasyHttpBinding implements ResteasyHttpBinding {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultResteasyHttpBinding.class);\n+\n+    private HeaderFilterStrategy headerFilterStrategy;\n+\n+    public HeaderFilterStrategy getHeaderFilterStrategy() {\n+        return headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {\n+        this.headerFilterStrategy = headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public Response populateResteasyRequestFromExchangeAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        String body = exchange.getIn().getBody(String.class);\n+\n+        LOG.debug(\"Body in producer: \" + body);", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "159eb7539de625840e9f67881f6fb5d27363bce9", "chunk": "diff --git a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\nindex 8c4591818b3..d8330cd691d 100644\n--- a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n+++ b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n\n@@ -33,7 +33,6 @@ import org.apache.camel.Exchange;\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.support.MessageHelper;\n import org.apache.camel.util.ObjectHelper;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzY2OA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415837668", "bodyText": "This forces the body to be string based. Wonder if we should in the future support inputstream and byte[] too", "author": "davsclaus", "createdAt": "2020-04-27T14:00:33Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n+import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The default Resteasy binding implementation\n+ */\n+public class DefaultResteasyHttpBinding implements ResteasyHttpBinding {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultResteasyHttpBinding.class);\n+\n+    private HeaderFilterStrategy headerFilterStrategy;\n+\n+    public HeaderFilterStrategy getHeaderFilterStrategy() {\n+        return headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {\n+        this.headerFilterStrategy = headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public Response populateResteasyRequestFromExchangeAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        String body = exchange.getIn().getBody(String.class);", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NTE2Mw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417145163", "bodyText": "might be improved later maybe??", "author": "onderson", "createdAt": "2020-04-29T08:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNTUxOA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426515518", "bodyText": "https://issues.apache.org/jira/browse/CAMEL-15039", "author": "onderson", "createdAt": "2020-05-18T10:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "159eb7539de625840e9f67881f6fb5d27363bce9", "chunk": "diff --git a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\nindex 8c4591818b3..d8330cd691d 100644\n--- a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n+++ b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n\n@@ -33,7 +33,6 @@ import org.apache.camel.Exchange;\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.support.MessageHelper;\n import org.apache.camel.util.ObjectHelper;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODUwNw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415838507", "bodyText": "Hmm I would rather have no surprise, and that we have a autoMethod=Basic you configure on the endpoint or component.", "author": "davsclaus", "createdAt": "2020-04-27T14:01:34Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n+import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The default Resteasy binding implementation\n+ */\n+public class DefaultResteasyHttpBinding implements ResteasyHttpBinding {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultResteasyHttpBinding.class);\n+\n+    private HeaderFilterStrategy headerFilterStrategy;\n+\n+    public HeaderFilterStrategy getHeaderFilterStrategy() {\n+        return headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {\n+        this.headerFilterStrategy = headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public Response populateResteasyRequestFromExchangeAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        String body = exchange.getIn().getBody(String.class);\n+\n+        LOG.debug(\"Body in producer: \" + body);\n+\n+        String mediaType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class);\n+\n+        WebTarget target = client.target(uri);\n+\n+        LOG.debug(\"Populate Resteasy request from exchange body: {} using media type {}\", body, mediaType);\n+\n+        Invocation.Builder builder;\n+        if (mediaType != null) {\n+            builder = target.request(mediaType);\n+        } else {\n+            builder = target.request();\n+        }\n+\n+\n+        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {\n+            String key = entry.getKey();\n+            Object value = entry.getValue();\n+            if (headerFilterStrategy != null\n+                    && !headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {\n+                builder.header(key, value);\n+                LOG.debug(\"Populate Resteasy request from exchange header: {} value: {}\", key, value);\n+            }\n+        }\n+\n+        if (parameters.get(\"username\") != null && parameters.get(\"password\") != null) {\n+            target.register(new BasicAuthentication(parameters.get(\"username\"), parameters.get(\"password\")));\n+        }\n+        LOG.debug(\"Basic authentication was applied\");\n+        String method = parameters.get(\"method\");\n+\n+        if (method.equals(\"GET\")) {\n+            return builder.get();\n+        }\n+        if (method.equals(\"POST\")) {\n+            return  builder.post(Entity.entity(body, mediaType));\n+        }\n+        if (method.equals(\"PUT\")) {\n+            return  builder.put(Entity.entity(body, mediaType));\n+        }\n+        if (method.equals(\"DELETE\")) {\n+            return  builder.delete();\n+        }\n+        if (method.equals(\"OPTIONS\")) {\n+            return  builder.options();\n+        }\n+        if (method.equals(\"TRACE\")) {\n+            return  builder.trace();\n+        }\n+        if (method.equals(\"HEAD\")) {\n+            return  builder.head();\n+        }\n+\n+        // maybe throw exception because not method was correct\n+        throw new IllegalArgumentException(\"Method '\" + method + \"' is not supported method\");\n+    }\n+\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n+    public void populateProxyResteasyRequestAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+\n+        WebTarget target = client.target(uri);\n+\n+        if (parameters.get(\"username\") != null && parameters.get(\"password\") != null) {\n+            target.register(new BasicAuthentication(parameters.get(\"username\"), parameters.get(\"password\")));", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MzM3Mw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417143373", "bodyText": "not sure if i got this one right? this might be something i am missing. can you please give a little bit more details?", "author": "onderson", "createdAt": "2020-04-29T08:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzQ0NQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418443445", "bodyText": "You just assume username/password requires basic auth. But they may just be query parameters for something else. Instead we should have an option to turn on authentication first. And so only do this if that option is turned on.", "author": "davsclaus", "createdAt": "2020-05-01T07:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNTMzNA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426515334", "bodyText": "done", "author": "onderson", "createdAt": "2020-05-18T10:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "159eb7539de625840e9f67881f6fb5d27363bce9", "chunk": "diff --git a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\nindex 8c4591818b3..d8330cd691d 100644\n--- a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n+++ b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n\n@@ -33,7 +33,6 @@ import org.apache.camel.Exchange;\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.support.MessageHelper;\n import org.apache.camel.util.ObjectHelper;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415838960", "bodyText": "Dont load classes via Class.forName. What is this proxyClassName use-case?", "author": "davsclaus", "createdAt": "2020-04-27T14:02:06Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n+import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The default Resteasy binding implementation\n+ */\n+public class DefaultResteasyHttpBinding implements ResteasyHttpBinding {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultResteasyHttpBinding.class);\n+\n+    private HeaderFilterStrategy headerFilterStrategy;\n+\n+    public HeaderFilterStrategy getHeaderFilterStrategy() {\n+        return headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {\n+        this.headerFilterStrategy = headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public Response populateResteasyRequestFromExchangeAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        String body = exchange.getIn().getBody(String.class);\n+\n+        LOG.debug(\"Body in producer: \" + body);\n+\n+        String mediaType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class);\n+\n+        WebTarget target = client.target(uri);\n+\n+        LOG.debug(\"Populate Resteasy request from exchange body: {} using media type {}\", body, mediaType);\n+\n+        Invocation.Builder builder;\n+        if (mediaType != null) {\n+            builder = target.request(mediaType);\n+        } else {\n+            builder = target.request();\n+        }\n+\n+\n+        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {\n+            String key = entry.getKey();\n+            Object value = entry.getValue();\n+            if (headerFilterStrategy != null\n+                    && !headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {\n+                builder.header(key, value);\n+                LOG.debug(\"Populate Resteasy request from exchange header: {} value: {}\", key, value);\n+            }\n+        }\n+\n+        if (parameters.get(\"username\") != null && parameters.get(\"password\") != null) {\n+            target.register(new BasicAuthentication(parameters.get(\"username\"), parameters.get(\"password\")));\n+        }\n+        LOG.debug(\"Basic authentication was applied\");\n+        String method = parameters.get(\"method\");\n+\n+        if (method.equals(\"GET\")) {\n+            return builder.get();\n+        }\n+        if (method.equals(\"POST\")) {\n+            return  builder.post(Entity.entity(body, mediaType));\n+        }\n+        if (method.equals(\"PUT\")) {\n+            return  builder.put(Entity.entity(body, mediaType));\n+        }\n+        if (method.equals(\"DELETE\")) {\n+            return  builder.delete();\n+        }\n+        if (method.equals(\"OPTIONS\")) {\n+            return  builder.options();\n+        }\n+        if (method.equals(\"TRACE\")) {\n+            return  builder.trace();\n+        }\n+        if (method.equals(\"HEAD\")) {\n+            return  builder.head();\n+        }\n+\n+        // maybe throw exception because not method was correct\n+        throw new IllegalArgumentException(\"Method '\" + method + \"' is not supported method\");\n+    }\n+\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n+    public void populateProxyResteasyRequestAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+\n+        WebTarget target = client.target(uri);\n+\n+        if (parameters.get(\"username\") != null && parameters.get(\"password\") != null) {\n+            target.register(new BasicAuthentication(parameters.get(\"username\"), parameters.get(\"password\")));\n+        }\n+\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Basic authentication was applied\");\n+        }\n+\n+        Class realClazz;\n+        Object object = null;\n+        try {\n+            realClazz = Class.forName(parameters.get(\"proxyClassName\"));", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExOTEyNA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417119124", "bodyText": "i think it is to support proxy framework which is part of resteasy\nhttps://docs.jboss.org/resteasy/docs/4.5.3.Final/userguide/html/RESTEasy_Client_Framework.html#proxies", "author": "onderson", "createdAt": "2020-04-29T07:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MjY5Mg==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417142692", "bodyText": "yes i am aware of the efforts of removing reflections and not sure this feature what to do about this feature, either removing or dropping might be fine as this is a feature in resteasy.", "author": "onderson", "createdAt": "2020-04-29T08:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NDU0NA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418444544", "bodyText": "So is this mandatory? Do I really need to write a class with annotations to call a remote HTTP REST service?", "author": "davsclaus", "createdAt": "2020-05-01T07:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NzkxMg==", "url": "https://github.com/apache/camel/pull/3777#discussion_r419167912", "bodyText": "in earlier versions the client framework was a bit limited in resteasy. there are other ways but looks like this is one of the prior methods considering API support coming from resteasy's history. to consider adding / removing such features, engagement with resteasy community might be good but can be said of being not strong ATM", "author": "onderson", "createdAt": "2020-05-03T22:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNTEyNA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426515124", "bodyText": "https://issues.apache.org/jira/browse/CAMEL-15040", "author": "onderson", "createdAt": "2020-05-18T10:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "159eb7539de625840e9f67881f6fb5d27363bce9", "chunk": "diff --git a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\nindex 8c4591818b3..d8330cd691d 100644\n--- a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n+++ b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n\n@@ -33,7 +33,6 @@ import org.apache.camel.Exchange;\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.support.MessageHelper;\n import org.apache.camel.util.ObjectHelper;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0MTQwOQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415841409", "bodyText": "Dont ignore exception, but log via logger or fail fast or something", "author": "davsclaus", "createdAt": "2020-04-27T14:05:16Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/servlet/ResteasyCamelServlet.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy.servlet;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Proxy;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.component.resteasy.DefaultHttpRegistry;\n+import org.apache.camel.component.resteasy.HttpRegistry;\n+import org.apache.camel.component.resteasy.ResteasyComponent;\n+import org.apache.camel.component.resteasy.ResteasyConstants;\n+import org.apache.camel.component.resteasy.ResteasyEndpoint;\n+import org.apache.camel.http.common.HttpConsumer;\n+import org.apache.camel.http.common.HttpHelper;\n+import org.apache.camel.http.common.HttpMessage;\n+import org.apache.camel.support.DefaultExchange;\n+import org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class extending HttpServletDispatcher from Resteasy and representing servlet used as Camel Consumer. This servlet\n+ * needs to be used in application if you want to use Camel Resteasy consumer in your camel routes.\n+ */\n+public class ResteasyCamelServlet extends HttpServletDispatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(ResteasyCamelServlet.class);\n+\n+    private HttpRegistry httpRegistry;\n+\n+    private String servletName;\n+\n+    private final ConcurrentMap<String, HttpConsumer> consumers = new ConcurrentHashMap<String, HttpConsumer>();\n+\n+\n+    /**\n+     * Init method for ResteasyCamelServlet, which registering servlets to HttpRegistry and it is also registering\n+     * proxy classes to Resteasy dispatcher\n+     *\n+     * @param servletConfig configuration of the servlet\n+     * @throws ServletException exception thrown from the super method\n+     */\n+    @SuppressWarnings(\"rawtypes\")\n+    @Override\n+    public void init(ServletConfig servletConfig) throws ServletException {\n+        super.init(servletConfig);\n+\n+        String name = servletConfig.getServletName();\n+        if (httpRegistry == null) {\n+            httpRegistry = DefaultHttpRegistry.getHttpRegistry(name);\n+            ResteasyCamelServlet existing = httpRegistry.getCamelServlet(name);\n+            if (existing != null) {\n+                String msg = \"Duplicate ServletName detected: \" + name + \". Existing: \" + existing + \" This: \" + this.toString()\n+                        + \". Its advised to use unique ServletName per Camel application.\";\n+                // always log so people can see it easier\n+                LOG.info(msg);\n+            }\n+            httpRegistry.register(this);\n+        }\n+\n+\n+        for (Map.Entry<String, HttpConsumer> entry : consumers.entrySet()) {\n+            String proxyClasses = ((ResteasyComponent)getServletEndpoint(entry.getValue()).getComponent()).getProxyConsumersClasses();\n+            if (proxyClasses != null) {\n+                String[] classes = proxyClasses.split(\",\");\n+                LOG.debug(\"Proxy classes defined in the component {}\", Arrays.asList(classes));\n+\n+                for (String clazz : classes) {\n+                    try {\n+                        Class realClazz = Class.forName(clazz);\n+                        // Create dynamic proxy class implementing interface\n+                        InvocationHandler handler = new ResteasyInvocationHandler();\n+                        Object  proxy = Proxy.newProxyInstance(realClazz.getClassLoader(), new Class[]{realClazz}, handler);\n+\n+                        // register new created proxy to the resteasy registry\n+                        getDispatcher().getRegistry().addSingletonResource(proxy);\n+                    } catch (ClassNotFoundException e) {\n+                        e.printStackTrace();", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "159eb7539de625840e9f67881f6fb5d27363bce9", "chunk": "diff --git a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/servlet/ResteasyCamelServlet.java b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/servlet/ResteasyCamelServlet.java\nindex e7dbac1db4b..1108c6640a2 100644\n--- a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/servlet/ResteasyCamelServlet.java\n+++ b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/servlet/ResteasyCamelServlet.java\n\n@@ -79,10 +79,8 @@ public class ResteasyCamelServlet extends HttpServletDispatcher {\n             httpRegistry = DefaultHttpRegistry.getHttpRegistry(name);\n             ResteasyCamelServlet existing = httpRegistry.getCamelServlet(name);\n             if (existing != null) {\n-                String msg = \"Duplicate ServletName detected: \" + name + \". Existing: \" + existing + \" This: \" + this.toString()\n-                        + \". Its advised to use unique ServletName per Camel application.\";\n-                // always log so people can see it easier\n-                LOG.info(msg);\n+                LOG.info(\"Duplicate ServletName detected: {}. Existing: {} This: {}. \" \n+                    + \"Its advised to use unique ServletName per Camel application.\", name, existing, this.toString());\n             }\n             httpRegistry.register(this);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0MzUwOQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415843509", "bodyText": "is it consumer only or was there also a producer?", "author": "davsclaus", "createdAt": "2020-04-27T14:07:52Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/ResteasyEndpoint.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.http.HttpClientConfigurer;\n+import org.apache.camel.component.http.HttpEndpoint;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.spi.HeaderFilterStrategyAware;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.http.conn.HttpClientConnectionManager;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+\n+/**\n+ * Defines the Resteasy Endpoint.\n+ * It contains a list of properties for Resteasy endpoint including {@link org.apache.camel.component.resteasy.ResteasyHttpBinding},\n+ * and {@link HeaderFilterStrategy}.\n+ *\n+ */\n+@UriEndpoint(firstVersion = \"3.3.0\", scheme = \"resteasy\",  extendsScheme = \"http\", \n+        title = \"Resteasy\", syntax = \"resteasy:contextPath\", consumerOnly = true, label = \"rest\")", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExOTkyNw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417119927", "bodyText": "there is a producer. to be amended.", "author": "onderson", "createdAt": "2020-04-29T07:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0MzUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "159eb7539de625840e9f67881f6fb5d27363bce9", "chunk": "diff --git a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/ResteasyEndpoint.java b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/ResteasyEndpoint.java\nindex 3b9a237dc64..21ea00f45a5 100644\n--- a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/ResteasyEndpoint.java\n+++ b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/ResteasyEndpoint.java\n\n@@ -38,7 +38,7 @@ import org.apache.http.impl.client.HttpClientBuilder;\n  *\n  */\n @UriEndpoint(firstVersion = \"3.3.0\", scheme = \"resteasy\",  extendsScheme = \"http\", \n-        title = \"Resteasy\", syntax = \"resteasy:contextPath\", consumerOnly = true, label = \"rest\")\n+        title = \"Resteasy\", syntax = \"resteasy:contextPath\", label = \"rest\")\n public class ResteasyEndpoint extends HttpEndpoint implements HeaderFilterStrategyAware {\n     @UriParam\n     private  String resteasyMethod = \"GET\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NTA3OA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418445078", "bodyText": "This will read the entire stream into memory.\nCamel has a stream caching feature. Maybe we should revisit this later.", "author": "davsclaus", "createdAt": "2020-05-01T07:22:37Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/servlet/ResteasyServletInputStreamCopier.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy.servlet;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import javax.servlet.ReadListener;\n+import javax.servlet.ServletInputStream;\n+\n+/**\n+ * Class for copying input stream from HttpRequest\n+ */\n+public class ResteasyServletInputStreamCopier extends ServletInputStream {\n+    \n+    private InputStream input;\n+    private ByteArrayOutputStream copy;\n+\n+    public ResteasyServletInputStreamCopier(InputStream inputStream) {\n+        /* create a new input stream from the cached request body */\n+        this.input = inputStream;\n+        this.copy = new ByteArrayOutputStream();", "originalCommit": "369b23ca99d7b849acf559101fc485738cdbac29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNDU2NQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426514565", "bodyText": "https://issues.apache.org/jira/browse/CAMEL-15042", "author": "onderson", "createdAt": "2020-05-18T10:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NTA3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NjQzNA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418446434", "bodyText": "Can you avoid using this - Camel has api for working with exceptions. We should avoid adding a 3rd party JAR just to use a single api which we have ourselves or easily can write a few lines of code.", "author": "davsclaus", "createdAt": "2020-05-01T07:28:56Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;", "originalCommit": "369b23ca99d7b849acf559101fc485738cdbac29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "159eb7539de625840e9f67881f6fb5d27363bce9", "chunk": "diff --git a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\nindex e0966fedc3f..d8330cd691d 100644\n--- a/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n+++ b/components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java\n\n@@ -33,7 +33,6 @@ import org.apache.camel.Exchange;\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.support.MessageHelper;\n import org.apache.camel.util.ObjectHelper;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n import org.slf4j.Logger;\n"}}, {"oid": "159eb7539de625840e9f67881f6fb5d27363bce9", "url": "https://github.com/apache/camel/commit/159eb7539de625840e9f67881f6fb5d27363bce9", "message": "CAMEL-2933 - remove exceptionutils", "committedDate": "2020-05-05T09:15:28Z", "type": "forcePushed"}, {"oid": "51a917f49800180e4b3a2e70e207eccf673678ac", "url": "https://github.com/apache/camel/commit/51a917f49800180e4b3a2e70e207eccf673678ac", "message": "CAMEL-2933 - move some servlet classes to http-common and use registry interface and defaulthttpregistry from that dependency", "committedDate": "2020-05-06T15:11:08Z", "type": "forcePushed"}, {"oid": "31bf0a2800de7bca6df8463d48ba71d60d6a63e4", "url": "https://github.com/apache/camel/commit/31bf0a2800de7bca6df8463d48ba71d60d6a63e4", "message": "CAMEL-2933 - add basicAuth endpoint param", "committedDate": "2020-05-07T09:49:10Z", "type": "forcePushed"}, {"oid": "231fc044fe61154dde0c3e74e9abd1accf555b41", "url": "https://github.com/apache/camel/commit/231fc044fe61154dde0c3e74e9abd1accf555b41", "message": "CAMEL-2933 - add basicAuth endpoint param", "committedDate": "2020-05-07T16:12:39Z", "type": "forcePushed"}, {"oid": "7493e216e2fccec709ae36bee32e2241a113be05", "url": "https://github.com/apache/camel/commit/7493e216e2fccec709ae36bee32e2241a113be05", "message": "CAMEL-2933 - regen", "committedDate": "2020-05-09T08:33:10Z", "type": "forcePushed"}, {"oid": "438b4b3ddfd9e9d62061b29e5e2dd1f4aa05eddd", "url": "https://github.com/apache/camel/commit/438b4b3ddfd9e9d62061b29e5e2dd1f4aa05eddd", "message": "CAMEL-15041 - rename options with more descriptive ones and regen", "committedDate": "2020-05-16T12:49:13Z", "type": "forcePushed"}, {"oid": "85f41d486f6ed4619feefbb5ba0b43de3145749f", "url": "https://github.com/apache/camel/commit/85f41d486f6ed4619feefbb5ba0b43de3145749f", "message": "update resteasy-component.adoc", "committedDate": "2020-05-18T10:30:09Z", "type": "forcePushed"}, {"oid": "2ee60fa34e6fb954a1c885dcd354721e5a1b600f", "url": "https://github.com/apache/camel/commit/2ee60fa34e6fb954a1c885dcd354721e5a1b600f", "message": "CAMEL-2983 - camel-resteasy component", "committedDate": "2020-05-18T10:36:03Z", "type": "commit"}, {"oid": "2ee60fa34e6fb954a1c885dcd354721e5a1b600f", "url": "https://github.com/apache/camel/commit/2ee60fa34e6fb954a1c885dcd354721e5a1b600f", "message": "CAMEL-2983 - camel-resteasy component", "committedDate": "2020-05-18T10:36:03Z", "type": "forcePushed"}]}