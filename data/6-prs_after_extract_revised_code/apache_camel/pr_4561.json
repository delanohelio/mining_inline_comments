{"pr_number": 4561, "pr_title": "[CAMEL-15804] - DataSonnet Expression Language Support", "pr_createdAt": "2020-11-04T06:23:05Z", "pr_url": "https://github.com/apache/camel/pull/4561", "timeline": [{"oid": "93a978122ee268ddfd5e3790983e1a5dbae89974", "url": "https://github.com/apache/camel/commit/93a978122ee268ddfd5e3790983e1a5dbae89974", "message": "datasonnet: adds language", "committedDate": "2020-11-04T00:09:52Z", "type": "commit"}, {"oid": "909682168f7249c38d5449aec27508eca89fda78", "url": "https://github.com/apache/camel/commit/909682168f7249c38d5449aec27508eca89fda78", "message": "sets up cml library", "committedDate": "2020-11-04T00:11:54Z", "type": "commit"}, {"oid": "2ae4eafc9b4e8a2174312f26e9f709f475f9d42a", "url": "https://github.com/apache/camel/commit/2ae4eafc9b4e8a2174312f26e9f709f475f9d42a", "message": "upgrade datasonnet mapper", "committedDate": "2020-11-04T00:11:55Z", "type": "commit"}, {"oid": "155d9bec01ad6a026ad874f1ff87bec2fa0ce3b3", "url": "https://github.com/apache/camel/commit/155d9bec01ad6a026ad874f1ff87bec2fa0ce3b3", "message": "formatting", "committedDate": "2020-11-04T00:11:55Z", "type": "commit"}, {"oid": "5211dfdef78b17428c43667461e481deb4e285ea", "url": "https://github.com/apache/camel/commit/5211dfdef78b17428c43667461e481deb4e285ea", "message": "refactors valuebuilder optional params", "committedDate": "2020-11-04T00:11:55Z", "type": "commit"}, {"oid": "9bfb2438a8e5fdae9f9a9bc5e844bafa4d5d525d", "url": "https://github.com/apache/camel/commit/9bfb2438a8e5fdae9f9a9bc5e844bafa4d5d525d", "message": "renames mimetype to mediatype\n\nalso moves datasonnet builder to camel-datasonnet", "committedDate": "2020-11-04T00:11:55Z", "type": "commit"}, {"oid": "ed17ed8ad1f2888aa6c4a1659267ce03a8447b41", "url": "https://github.com/apache/camel/commit/ed17ed8ad1f2888aa6c4a1659267ce03a8447b41", "message": "Revert delegating ValueBuilder to camel-datasonnet\n\nThis partially reverts commit d2202f7ee78daccacec2cec3f85925f4e8b8411e.", "committedDate": "2020-11-04T00:11:55Z", "type": "commit"}, {"oid": "7aa2167f6ef1e41c9dc23eb5c1de7a3f93d00317", "url": "https://github.com/apache/camel/commit/7aa2167f6ef1e41c9dc23eb5c1de7a3f93d00317", "message": "refactor headers and exchange properties to functions", "committedDate": "2020-11-04T00:11:55Z", "type": "commit"}, {"oid": "b238092b08bfca6844890fe3b94c275e278ff5c6", "url": "https://github.com/apache/camel/commit/b238092b08bfca6844890fe3b94c275e278ff5c6", "message": "defaults to output Document unless result specified", "committedDate": "2020-11-04T00:11:55Z", "type": "commit"}, {"oid": "4533b75414e625bfd2ca6b8ba1db3922c7d073bf", "url": "https://github.com/apache/camel/commit/4533b75414e625bfd2ca6b8ba1db3922c7d073bf", "message": "bump datasonnet-mapper ver", "committedDate": "2020-11-04T00:11:56Z", "type": "commit"}, {"oid": "b623272c4e6dfb988d7f1b66fc22c887e3390dec", "url": "https://github.com/apache/camel/commit/b623272c4e6dfb988d7f1b66fc22c887e3390dec", "message": "bump ds mapper version", "committedDate": "2020-11-04T00:11:56Z", "type": "commit"}, {"oid": "5beffbc844814a0e7f513b07e3628333f570c9e7", "url": "https://github.com/apache/camel/commit/5beffbc844814a0e7f513b07e3628333f570c9e7", "message": "add dep", "committedDate": "2020-11-04T00:11:56Z", "type": "commit"}, {"oid": "8ef083017b764850af7098b995466aa1d6cf2746", "url": "https://github.com/apache/camel/commit/8ef083017b764850af7098b995466aa1d6cf2746", "message": "fix scala directory", "committedDate": "2020-11-04T00:11:56Z", "type": "commit"}, {"oid": "70a8d6cc187f19e71e72effffed0669da6ff45a3", "url": "https://github.com/apache/camel/commit/70a8d6cc187f19e71e72effffed0669da6ff45a3", "message": "rebase 3.7.0-SNAPSHOT", "committedDate": "2020-11-04T00:11:56Z", "type": "commit"}, {"oid": "4c8c615f86847728aba3863056613b364ef2dcd5", "url": "https://github.com/apache/camel/commit/4c8c615f86847728aba3863056613b364ef2dcd5", "message": "fix cml library", "committedDate": "2020-11-04T00:11:56Z", "type": "commit"}, {"oid": "d1863c60b2ac835bcb6e93d7b391af4415842d72", "url": "https://github.com/apache/camel/commit/d1863c60b2ac835bcb6e93d7b391af4415842d72", "message": "adds docs", "committedDate": "2020-11-04T00:11:57Z", "type": "commit"}, {"oid": "48e36a45da67c4bb0ac19abf76479a145e10105c", "url": "https://github.com/apache/camel/commit/48e36a45da67c4bb0ac19abf76479a145e10105c", "message": "bump last ms3 ds version", "committedDate": "2020-11-04T00:11:57Z", "type": "commit"}, {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8", "url": "https://github.com/apache/camel/commit/c96b0639c08232ff5e9737ffe66959566815cbe8", "message": "Refactor reifier and language", "committedDate": "2020-11-04T00:11:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Nzc3Nw==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057777", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:40:50Z", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java\nindex 01ab07e61cd..201648bbd20 100644\n--- a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java\n+++ b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.lang.annotation.Documented;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzkwMg==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057902", "bodyText": "remove TODO", "author": "oscerd", "createdAt": "2020-11-05T13:41:01Z", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.apache.camel.language.datasonnet;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apache.camel.support.language.LanguageAnnotation;\n+\n+/**\n+ * Datasonnet TODO: 7/21/20 docs", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java\nindex 01ab07e61cd..201648bbd20 100644\n--- a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java\n+++ b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.lang.annotation.Documented;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Nzk5Nw==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057997", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:41:10Z", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetConstants.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetConstants.java b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetConstants.java\nindex 5c93d607c44..fb202640530 100644\n--- a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetConstants.java\n+++ b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetConstants.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n public class DatasonnetConstants {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODA1OQ==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058059", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:41:16Z", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\nindex 57aaa541dc6..ca63dad9e3c 100644\n--- a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\n+++ b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.io.File;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODMyMA==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058320", "bodyText": "Remove TODO", "author": "oscerd", "createdAt": "2020-11-05T13:41:37Z", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.datasonnet.Mapper;\n+import com.datasonnet.MapperBuilder;\n+import com.datasonnet.document.DefaultDocument;\n+import com.datasonnet.document.Document;\n+import com.datasonnet.document.MediaType;\n+import com.datasonnet.document.MediaTypes;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ScanResult;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Expression;\n+import org.apache.camel.RuntimeExpressionException;\n+import org.apache.camel.spi.ExpressionResultTypeAware;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.support.ExpressionAdapter;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatasonnetExpression extends ExpressionAdapter implements ExpressionResultTypeAware {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DatasonnetExpression.class);\n+    private static final Map<String, String> CLASSPATH_IMPORTS = new HashMap<>();\n+\n+    static {\n+        LOGGER.debug(\"One time classpath search...\");\n+        try (ScanResult scanResult = new ClassGraph().whitelistPaths(\"/\").scan()) {\n+            scanResult.getResourcesWithExtension(\"libsonnet\")\n+                    .forEachByteArray((resource, bytes) -> {\n+                        LOGGER.debug(\"Loading DataSonnet library: \" + resource.getPath());\n+                        CLASSPATH_IMPORTS.put(resource.getPath(), new String(bytes, StandardCharsets.UTF_8));\n+                    });\n+        }\n+    }\n+\n+    private String expression;\n+    private Expression metaExpression;\n+    private MediaType bodyMediaType;\n+    private MediaType outputMediaType;\n+    private Class<?> resultType;\n+    private Collection<String> libraryPaths;\n+\n+    public DatasonnetExpression(String expression) {\n+        this.expression = expression;\n+    }\n+\n+    public DatasonnetExpression(Expression expression) {\n+        this.metaExpression = expression;\n+    }\n+\n+    @Override\n+    public boolean matches(Exchange exchange) {\n+        this.outputMediaType = MediaTypes.APPLICATION_JAVA;\n+        return evaluate(exchange, Boolean.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T> T evaluate(Exchange exchange, Class<T> type) {\n+        try {\n+            if (metaExpression != null) {\n+                expression = metaExpression.evaluate(exchange, String.class);\n+            }\n+\n+            Objects.requireNonNull(expression, \"String expression property must be set!\");\n+\n+            Document<?> result = doEvaluate(exchange);\n+            // TODO: 9/8/20 see if we can offload some of this to a Document specific custom type converter", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\nindex 57aaa541dc6..ca63dad9e3c 100644\n--- a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\n+++ b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.io.File;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODU0MA==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058540", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:42:00Z", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetLanguage.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetLanguage.java b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetLanguage.java\nindex 6e7e11aca11..78d6cd01b8d 100644\n--- a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetLanguage.java\n+++ b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetLanguage.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODc2MQ==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058761", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:42:20Z", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\nindex 4abdb5209fd..c81e80d2225 100644\n--- a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\n+++ b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.io.InputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODg2NA==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058864", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:42:29Z", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/ExpressionsInJavaTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/ExpressionsInJavaTest.java b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/ExpressionsInJavaTest.java\nindex 40b884c7758..bd7087dde5e 100644\n--- a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/ExpressionsInJavaTest.java\n+++ b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/ExpressionsInJavaTest.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import org.apache.camel.EndpointInject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODk4NQ==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058985", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:42:39Z", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Gizmo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Gizmo.java b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Gizmo.java\nindex a1c153a2ffe..619aaa009d7 100644\n--- a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Gizmo.java\n+++ b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Gizmo.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.util.Date;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTEwNg==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059106", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:42:48Z", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Manufacturer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Manufacturer.java b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Manufacturer.java\nindex 929769e2ded..e6c4a9ada32 100644\n--- a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Manufacturer.java\n+++ b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Manufacturer.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.util.Objects;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTE5Ng==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059196", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:42:58Z", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/PropertiesTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.apache.camel.language.datasonnet;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "chunk": "diff --git a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/PropertiesTest.java b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/PropertiesTest.java\nindex 5854cd93af2..be6146220b7 100644\n--- a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/PropertiesTest.java\n+++ b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/PropertiesTest.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.language.datasonnet;\n \n import java.util.Properties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MTA2OA==", "url": "https://github.com/apache/camel/pull/4561#discussion_r518061068", "bodyText": "Add ASF license please", "author": "oscerd", "createdAt": "2020-11-05T13:45:41Z", "path": "core/camel-core-model/src/main/java/org/apache/camel/model/language/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.apache.camel.model.language;", "originalCommit": "c96b0639c08232ff5e9737ffe66959566815cbe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7385ff51b85cc6d89dfb99f381a90d3cc0c5124", "chunk": "diff --git a/core/camel-core-model/src/main/java/org/apache/camel/model/language/DatasonnetExpression.java b/core/camel-core-model/src/main/java/org/apache/camel/model/language/DatasonnetExpression.java\nindex 93fad569874..a08d76872e7 100644\n--- a/core/camel-core-model/src/main/java/org/apache/camel/model/language/DatasonnetExpression.java\n+++ b/core/camel-core-model/src/main/java/org/apache/camel/model/language/DatasonnetExpression.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.camel.model.language;\n \n import javax.xml.bind.annotation.XmlAccessType;\n"}}, {"oid": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "url": "https://github.com/apache/camel/commit/aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "message": "adds ASF license where possible", "committedDate": "2020-11-05T16:57:27Z", "type": "commit"}, {"oid": "30a86bd33865a8d3e0a8601c8447ad3186a1db88", "url": "https://github.com/apache/camel/commit/30a86bd33865a8d3e0a8601c8447ad3186a1db88", "message": "uses parent/pom for dep versions", "committedDate": "2020-11-05T17:06:34Z", "type": "commit"}, {"oid": "b7385ff51b85cc6d89dfb99f381a90d3cc0c5124", "url": "https://github.com/apache/camel/commit/b7385ff51b85cc6d89dfb99f381a90d3cc0c5124", "message": "adds licenses in core-model", "committedDate": "2020-11-05T17:30:56Z", "type": "commit"}, {"oid": "704e851cfa7846ce33a5ad6da4d594128c86446f", "url": "https://github.com/apache/camel/commit/704e851cfa7846ce33a5ad6da4d594128c86446f", "message": "addresses checkstyle", "committedDate": "2020-11-05T17:32:38Z", "type": "commit"}, {"oid": "43533afb0e4c725965dac4863df5cb6b124c5390", "url": "https://github.com/apache/camel/commit/43533afb0e4c725965dac4863df5cb6b124c5390", "message": "align scala deps", "committedDate": "2020-11-05T19:34:05Z", "type": "commit"}, {"oid": "c8efb72c7de33835c85dcd0db14d43d719316bd2", "url": "https://github.com/apache/camel/commit/c8efb72c7de33835c85dcd0db14d43d719316bd2", "message": "uses parent/pom for dep versions", "committedDate": "2020-11-05T23:00:29Z", "type": "commit"}, {"oid": "3a7c3b5b19e378230c78fadedd46826f21c83fe3", "url": "https://github.com/apache/camel/commit/3a7c3b5b19e378230c78fadedd46826f21c83fe3", "message": "maven central mapper version", "committedDate": "2020-11-18T15:23:10Z", "type": "commit"}, {"oid": "9ecb6a4a7a3fc1246cc82a2fad01afbfa2c10045", "url": "https://github.com/apache/camel/commit/9ecb6a4a7a3fc1246cc82a2fad01afbfa2c10045", "message": "supportlevel preview", "committedDate": "2020-11-18T15:24:10Z", "type": "commit"}, {"oid": "1497845418aabedb89081403140d4f08fefb32cf", "url": "https://github.com/apache/camel/commit/1497845418aabedb89081403140d4f08fefb32cf", "message": "remvoe todos", "committedDate": "2020-11-18T15:29:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTY0OA==", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169648", "bodyText": "I would like to see this moved to the Language class, and do this in its doInit method.", "author": "davsclaus", "createdAt": "2020-11-21T08:47:31Z", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.datasonnet.Mapper;\n+import com.datasonnet.MapperBuilder;\n+import com.datasonnet.document.DefaultDocument;\n+import com.datasonnet.document.Document;\n+import com.datasonnet.document.MediaType;\n+import com.datasonnet.document.MediaTypes;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ScanResult;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Expression;\n+import org.apache.camel.RuntimeExpressionException;\n+import org.apache.camel.spi.ExpressionResultTypeAware;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.support.ExpressionAdapter;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatasonnetExpression extends ExpressionAdapter implements ExpressionResultTypeAware {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DatasonnetExpression.class);\n+    private static final Map<String, String> CLASSPATH_IMPORTS = new HashMap<>();\n+\n+    static {\n+        LOGGER.debug(\"One time classpath search...\");", "originalCommit": "1497845418aabedb89081403140d4f08fefb32cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NzQyNQ==", "url": "https://github.com/apache/camel/pull/4561#discussion_r530577425", "bodyText": "moved :)", "author": "jam01", "createdAt": "2020-11-25T18:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "bea79a6d14527eb0ac3ccd0e8465775334667249", "chunk": "diff --git a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\nindex 7b34378d577..f7af9214f8b 100644\n--- a/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\n+++ b/components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java\n\n@@ -36,8 +36,6 @@ import com.datasonnet.document.DefaultDocument;\n import com.datasonnet.document.Document;\n import com.datasonnet.document.MediaType;\n import com.datasonnet.document.MediaTypes;\n-import io.github.classgraph.ClassGraph;\n-import io.github.classgraph.ScanResult;\n import org.apache.camel.Exchange;\n import org.apache.camel.Expression;\n import org.apache.camel.RuntimeExpressionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3MDAxNA==", "url": "https://github.com/apache/camel/pull/4561#discussion_r528170014", "bodyText": "Fix this TODO", "author": "davsclaus", "createdAt": "2020-11-21T08:51:42Z", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/language.datasonnet/camel-context.xml\");\n+    }\n+\n+    @Test\n+    public void testTransform() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:basicTransform\");\n+    }\n+\n+    @Test\n+    public void testTransformXML() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.xml\"),\n+                loadResourceAsString(\"readXMLExtTest.json\"),\n+                \"direct:transformXML\");\n+    }\n+\n+    @Test\n+    public void testTransformCSV() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.csv\"),\n+                \"{\\\"account\\\":\\\"123\\\"}\",\n+                \"direct:transformCSV\");\n+    }\n+\n+    @Test\n+    public void testDatasonnetScript() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:datasonnetScript\");\n+    }\n+\n+    @Test\n+    public void testNamedImports() throws Exception {\n+        runCamelTest(\"{}\",\n+                loadResourceAsString(\"namedImports_result.json\"),\n+                \"direct:namedImports\");\n+    }\n+\n+    // TODO: 9/8/20 need to pass result type param to language", "originalCommit": "1497845418aabedb89081403140d4f08fefb32cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d0feb15a6ac52f5eae04d49850dc8bec0dfd4db", "chunk": "diff --git a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\nindex c81e80d2225..bafe5f4772d 100644\n--- a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\n+++ b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\n\n@@ -146,7 +146,6 @@ public class CamelDatasonnetTest extends CamelSpringTestSupport {\n         mock = getMockEndpoint(\"mock:direct:end\");\n         Exchange exchange = mock.assertExchangeReceived(mock.getReceivedCounter() - 1);\n         String response = exchange.getIn().getBody().toString();\n-        System.out.println(\"RESPONSE IS \" + response);\n         JSONAssert.assertEquals(expectedJson, response, true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3MDA0Nw==", "url": "https://github.com/apache/camel/pull/4561#discussion_r528170047", "bodyText": "Remove system out or do a LOG", "author": "davsclaus", "createdAt": "2020-11-21T08:51:58Z", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/language.datasonnet/camel-context.xml\");\n+    }\n+\n+    @Test\n+    public void testTransform() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:basicTransform\");\n+    }\n+\n+    @Test\n+    public void testTransformXML() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.xml\"),\n+                loadResourceAsString(\"readXMLExtTest.json\"),\n+                \"direct:transformXML\");\n+    }\n+\n+    @Test\n+    public void testTransformCSV() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.csv\"),\n+                \"{\\\"account\\\":\\\"123\\\"}\",\n+                \"direct:transformCSV\");\n+    }\n+\n+    @Test\n+    public void testDatasonnetScript() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:datasonnetScript\");\n+    }\n+\n+    @Test\n+    public void testNamedImports() throws Exception {\n+        runCamelTest(\"{}\",\n+                loadResourceAsString(\"namedImports_result.json\"),\n+                \"direct:namedImports\");\n+    }\n+\n+    // TODO: 9/8/20 need to pass result type param to language\n+    @Disabled\n+    @Test\n+    public void testExpressionLanguage() throws Exception {\n+        runCamelTest(\"World\",\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:expressionLanguage\");\n+    }\n+\n+    @Test\n+    public void testNullInput() throws Exception {\n+        runCamelTest(\"\",\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:nullInput\");\n+        runCamelTest(null,\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:nullInput\");\n+    }\n+\n+    @Test\n+    public void testReadJava() throws Exception {\n+        Gizmo theGizmo = new Gizmo();\n+        theGizmo.setName(\"gizmo\");\n+        theGizmo.setQuantity(123);\n+        theGizmo.setInStock(true);\n+        theGizmo.setColors(Arrays.asList(\"red\", \"white\", \"blue\"));\n+\n+        Manufacturer manufacturer = new Manufacturer();\n+        manufacturer.setManufacturerName(\"ACME Corp.\");\n+        manufacturer.setManufacturerCode(\"ACME123\");\n+        theGizmo.setManufacturer(manufacturer);\n+\n+        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        theGizmo.setDate(df.parse(\"2020-01-06\"));\n+\n+        runCamelTest(theGizmo,\n+                loadResourceAsString(\"javaTest.json\"),\n+                \"direct:readJava\");\n+    }\n+\n+    @Test\n+    public void testWriteJava() throws Exception {\n+        Gizmo theGizmo = new Gizmo();\n+        theGizmo.setName(\"gizmo\");\n+        theGizmo.setQuantity(123);\n+        theGizmo.setInStock(true);\n+        theGizmo.setColors(Arrays.asList(\"red\", \"white\", \"blue\"));\n+\n+        Manufacturer manufacturer = new Manufacturer();\n+        manufacturer.setManufacturerName(\"ACME Corp.\");\n+        manufacturer.setManufacturerCode(\"ACME123\");\n+        theGizmo.setManufacturer(manufacturer);\n+\n+        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        theGizmo.setDate(df.parse(\"2020-01-06\"));\n+\n+        String payload = loadResourceAsString(\"javaTest.json\");\n+\n+        template.sendBody(\"direct:writeJava\", payload);\n+        mock = getMockEndpoint(\"mock:direct:end\");\n+        Exchange exchange = mock.assertExchangeReceived(mock.getReceivedCounter() - 1);\n+        Object response = exchange.getIn().getBody();\n+\n+        assertEquals(theGizmo, response);\n+    }\n+\n+    private void runCamelTest(Object payload, String expectedJson, String uri) throws Exception {\n+        template.sendBody(uri, payload);\n+        mock = getMockEndpoint(\"mock:direct:end\");\n+        Exchange exchange = mock.assertExchangeReceived(mock.getReceivedCounter() - 1);\n+        String response = exchange.getIn().getBody().toString();\n+        System.out.println(\"RESPONSE IS \" + response);", "originalCommit": "1497845418aabedb89081403140d4f08fefb32cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d0feb15a6ac52f5eae04d49850dc8bec0dfd4db", "chunk": "diff --git a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\nindex c81e80d2225..bafe5f4772d 100644\n--- a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\n+++ b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\n\n@@ -146,7 +146,6 @@ public class CamelDatasonnetTest extends CamelSpringTestSupport {\n         mock = getMockEndpoint(\"mock:direct:end\");\n         Exchange exchange = mock.assertExchangeReceived(mock.getReceivedCounter() - 1);\n         String response = exchange.getIn().getBody().toString();\n-        System.out.println(\"RESPONSE IS \" + response);\n         JSONAssert.assertEquals(expectedJson, response, true);\n     }\n \n"}}, {"oid": "3d0feb15a6ac52f5eae04d49850dc8bec0dfd4db", "url": "https://github.com/apache/camel/commit/3d0feb15a6ac52f5eae04d49850dc8bec0dfd4db", "message": "Removed System print line in test", "committedDate": "2020-11-25T17:20:55Z", "type": "commit"}, {"oid": "eddb4d3ac5d130314de0ce510e98db8a90df4d0b", "url": "https://github.com/apache/camel/commit/eddb4d3ac5d130314de0ce510e98db8a90df4d0b", "message": "Replaced Spring DSL with XML DSL", "committedDate": "2020-11-25T17:21:04Z", "type": "commit"}, {"oid": "40701a24e8e642b670a6c8193dffad0efe80788d", "url": "https://github.com/apache/camel/commit/40701a24e8e642b670a6c8193dffad0efe80788d", "message": "Removed ms3inc repository from camel-datasonnet pom", "committedDate": "2020-11-25T17:21:14Z", "type": "commit"}, {"oid": "1fa2576f6d573ff44735a290f389f45cdff89aa4", "url": "https://github.com/apache/camel/commit/1fa2576f6d573ff44735a290f389f45cdff89aa4", "message": "clarify use of cml.properties in docs", "committedDate": "2020-11-25T17:35:39Z", "type": "commit"}, {"oid": "9e47486dd680856ba4af59c0412e3a94d16d61c5", "url": "https://github.com/apache/camel/commit/9e47486dd680856ba4af59c0412e3a94d16d61c5", "message": "fixes issues with mapper version", "committedDate": "2020-11-25T18:19:31Z", "type": "commit"}, {"oid": "b997dc1c66ec074a0b4b58f36e97686e2f6819b0", "url": "https://github.com/apache/camel/commit/b997dc1c66ec074a0b4b58f36e97686e2f6819b0", "message": "remove maven compiler properties", "committedDate": "2020-11-25T18:22:14Z", "type": "commit"}, {"oid": "8ae50f51d6fc04a730898b892b7c927434104c79", "url": "https://github.com/apache/camel/commit/8ae50f51d6fc04a730898b892b7c927434104c79", "message": "fix language test", "committedDate": "2020-11-25T18:33:36Z", "type": "commit"}, {"oid": "bea79a6d14527eb0ac3ccd0e8465775334667249", "url": "https://github.com/apache/camel/commit/bea79a6d14527eb0ac3ccd0e8465775334667249", "message": "moves classpath scanning to language", "committedDate": "2020-11-25T18:40:42Z", "type": "commit"}, {"oid": "58ff22669d023fb8ea9cf2847401aaf60e2e9e23", "url": "https://github.com/apache/camel/commit/58ff22669d023fb8ea9cf2847401aaf60e2e9e23", "message": "converts CML.scala to java", "committedDate": "2020-12-02T22:31:03Z", "type": "commit"}, {"oid": "972f4d14ffb947987854ce0f00b4961084f62787", "url": "https://github.com/apache/camel/commit/972f4d14ffb947987854ce0f00b4961084f62787", "message": "reverts scala deps changes", "committedDate": "2020-12-02T22:48:03Z", "type": "commit"}, {"oid": "60814387fda6af057f677f6ee403914fe31fa129", "url": "https://github.com/apache/camel/commit/60814387fda6af057f677f6ee403914fe31fa129", "message": "Merge branch 'master' into datasonnet-3.7", "committedDate": "2020-12-02T22:55:26Z", "type": "commit"}, {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3", "url": "https://github.com/apache/camel/commit/e60b159ffdaa6bc0269b045ac0763447ac109cc3", "message": "address checkstyle errors", "committedDate": "2020-12-02T23:28:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng==", "url": "https://github.com/apache/camel/pull/4561#discussion_r535017776", "bodyText": "I dont see any extra value of having its own Builder class, we do not really do this for other data formats - only xml and xpath have a special builder etc. Can this be removed", "author": "davsclaus", "createdAt": "2020-12-03T09:43:05Z", "path": "core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.builder;\n+\n+import org.apache.camel.Expression;\n+import org.apache.camel.model.language.DatasonnetExpression;\n+\n+public class DatasonnetBuilder extends ValueBuilder {", "originalCommit": "e60b159ffdaa6bc0269b045ac0763447ac109cc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzMTQyMw==", "url": "https://github.com/apache/camel/pull/4561#discussion_r535331423", "bodyText": "I think we based this on one of those builders. The reason comes from bodyMediaType and outputMediaType being both individually optional, so we could have any of these:\n// here we don't use the body, and the default output is fine\n.transform(datasonnet(\"hello, world\", String.class))\n\n// here we need to be explicit about the input, maybe the content-type header does not apply, for example\n.transform(datasonnet(\"payload\", String.class).bodyMediaType(\"application/json\")) \n\n// here we want the component to look in other locations for the input (eg. content-type header)\n// but we need a different output than default\n.transform(datasonnet(\"payload\", String.class).outputMediaType(\"application/xml\")))\n\n// here both are needed\n.transform(datasonnet(\"some-expression\", String.class)\n    .outputMediaType(\"application/json\")\n    .bodyMediaType(\"application/xml\")))\n\nSo the value is being able to be selectively explicit with the input and output types. Otherwise we'd have to do\n// we could have a 'all defaults' type of constructor\n.transform(datasonnet(\"hello, world\", String.class))\n\n.transform(datasonnet(\"payload\", String.class, \"application/json\", null)) \n\n.transform(datasonnet(\"payload\", String.class, null, \"application/json\")) \n\n.transform(datasonnet(\"some-expression\", String.class, \"application/json\", \"application/xml\"))\n\nSo I guess ultimately it's about readability since both options are functionally the same. I think a predicate is one particular scenario that might be confusing\n// if we needed to be explicit on the body, do we leave the output as null so the default is used?\n// or do we make it Java as it should be, either way the component forces Java for predicates\n// but the extra null could be confusing to devs, or misleading if they wrote something other than null or Java\n.when(datasonnet(\"payload.predicate == 'yes'\", \"application/json\", null))\n   ...\n// the output type would be ignored\n.when(datasonnet(\"payload.predicate == 'yes'\", \"application/json\", \"application/json\"))\n\nI hope that expresses the value we see in the Builder.\nThis wasn't actually a widely discussed decision internally, I just saw those other Builders you mentioned and seemed like the right way to achieve what I described. So we're all ears :)\nIf there's a more \"camel way\" to achieve this we'd be happy to refactor. Or if the Builder class should be moved to the datasonnet component (I think the XML one is) in order to move maintenance there, we can do that. Or if ultimately this doesn't fit with the Builder's design we can remove it.", "author": "jam01", "createdAt": "2020-12-03T15:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ2Mjk5Mw==", "url": "https://github.com/apache/camel/pull/4561#discussion_r535462993", "bodyText": "Well I am afraid thats how the other data formats do it with optional parameters, is that they have a number of methods for different combinations, and that you would have to pass in null for some of them.\nThere is no room for having specialized builders at this moment. The architecture of dataformats and how its too tightly coupled into the model/core is something we want to address in future Camel - such as Camel 4 or sooner if we can make it possible in 3.x.", "author": "davsclaus", "createdAt": "2020-12-03T18:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwMDQyOA==", "url": "https://github.com/apache/camel/pull/4561#discussion_r535500428", "bodyText": "Ah! Copy that. Would it be OK if we alternatively move the extra methods to the camel-datasonnet DatasonnetExpression? I see XPath has support for building expressions from both camel-core-model BuilderSupport and also from camel-xpath's XPathBuilder. The camel-xpath one actually has optional parameter support, just as we were looking for, as showcased in this test. Here's an example of the camel-xpath one being used in a route instead of the RouteBuilder one.\nSo developers could use the BuilderSupport one if they just want default media types, or the camel-datasonnet one if they want to be explicit in either one or both. Additionally this would allow us to user DataSonnet's formal MediaType objects instead of their String representation. I used the String representation in the BuilderSupport as to not have core-model depend on the DataSonnet Mapper. This would translate into some performance gains as the String will not need to be parsed on each expression evaluation.", "author": "jam01", "createdAt": "2020-12-03T18:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwMzUxOA==", "url": "https://github.com/apache/camel/pull/4561#discussion_r535503518", "bodyText": "Yes this is a good idea", "author": "davsclaus", "createdAt": "2020-12-03T19:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cc505df8100530ff5c90a70bfe261fab606595ea", "chunk": "diff --git a/core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java b/core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java\ndeleted file mode 100644\nindex 9ee0b2fe738..00000000000\n--- a/core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.builder;\n-\n-import org.apache.camel.Expression;\n-import org.apache.camel.model.language.DatasonnetExpression;\n-\n-public class DatasonnetBuilder extends ValueBuilder {\n-    public DatasonnetBuilder(DatasonnetExpression expression) {\n-        super(expression);\n-    }\n-\n-    public static DatasonnetBuilder datasonnet(String expression) {\n-        return new DatasonnetBuilder(new DatasonnetExpression(expression));\n-    }\n-\n-    public static DatasonnetBuilder datasonnet(Expression expression) {\n-        return new DatasonnetBuilder(new DatasonnetExpression(expression));\n-    }\n-\n-    public static DatasonnetBuilder datasonnet(String expression, Class<?> resultType) {\n-        DatasonnetExpression exp = new DatasonnetExpression(expression);\n-        exp.setResultType(resultType);\n-        return new DatasonnetBuilder(exp);\n-    }\n-\n-    public static DatasonnetBuilder datasonnet(Expression expression, Class<?> resultType) {\n-        DatasonnetExpression exp = new DatasonnetExpression(expression);\n-        exp.setResultType(resultType);\n-        return new DatasonnetBuilder(exp);\n-    }\n-\n-    public DatasonnetBuilder bodyMediaType(String bodyMediaType) {\n-        ((DatasonnetExpression) getExpression()).setBodyMediaType(bodyMediaType);\n-        return this;\n-    }\n-\n-    public DatasonnetBuilder outputMediaType(String outputMediaType) {\n-        ((DatasonnetExpression) getExpression()).setOutputMediaType(outputMediaType);\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyMDIwNg==", "url": "https://github.com/apache/camel/pull/4561#discussion_r535020206", "bodyText": "remove the left over code in the comment", "author": "davsclaus", "createdAt": "2020-12-03T09:45:22Z", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.TimeZone;\n+\n+import com.datasonnet.document.Document;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");", "originalCommit": "e60b159ffdaa6bc0269b045ac0763447ac109cc3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "860f98aae60dd03d0aeccb0ed9dddb1a08bc2543", "chunk": "diff --git a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\nindex a4d942367f7..a4f2938dafd 100644\n--- a/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\n+++ b/components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java\n\n@@ -35,7 +35,7 @@ import org.springframework.context.support.ClassPathXmlApplicationContext;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n public class CamelDatasonnetTest extends CamelSpringTestSupport {\n-    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");\n+    private MockEndpoint mock;\n \n     @Override\n     protected AbstractApplicationContext createApplicationContext() {\n"}}, {"oid": "8e5f3bc54d9bee7f2624fe27542932a3f5c37eab", "url": "https://github.com/apache/camel/commit/8e5f3bc54d9bee7f2624fe27542932a3f5c37eab", "message": "fixed scala dep issue", "committedDate": "2020-12-04T05:09:25Z", "type": "commit"}, {"oid": "cc505df8100530ff5c90a70bfe261fab606595ea", "url": "https://github.com/apache/camel/commit/cc505df8100530ff5c90a70bfe261fab606595ea", "message": "move datasonnet expression builder", "committedDate": "2020-12-04T05:29:06Z", "type": "commit"}, {"oid": "860f98aae60dd03d0aeccb0ed9dddb1a08bc2543", "url": "https://github.com/apache/camel/commit/860f98aae60dd03d0aeccb0ed9dddb1a08bc2543", "message": "remove comment", "committedDate": "2020-12-04T05:29:06Z", "type": "commit"}, {"oid": "02a6a8508319c3c9438a5ea94c5291ea16013401", "url": "https://github.com/apache/camel/commit/02a6a8508319c3c9438a5ea94c5291ea16013401", "message": "bump ds mapper version", "committedDate": "2020-12-04T17:08:14Z", "type": "commit"}]}