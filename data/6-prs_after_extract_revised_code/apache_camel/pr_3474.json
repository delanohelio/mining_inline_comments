{"pr_number": 3474, "pr_title": "CAMEL-14385: add a camel-cron component", "pr_createdAt": "2020-01-10T12:33:16Z", "pr_url": "https://github.com/apache/camel/pull/3474", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjAzNA==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512034", "bodyText": "I am not a fan of this, cant we move this to doStart so its initialized there?", "author": "davsclaus", "createdAt": "2020-01-11T09:58:41Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import java.util.Map;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.spi.Metadata;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.DefaultComponent;\n+import org.apache.camel.util.ObjectHelper;\n+\n+/**\n+ * The Camel cron component.\n+ */\n+@Component(\"cron\")\n+public class CronComponent extends DefaultComponent {\n+\n+    @Metadata(label = \"advanced\")\n+    private String cronService;\n+\n+    private CamelCronService service;\n+\n+    public CronComponent() {\n+    }\n+\n+    @Override\n+    public Endpoint createEndpoint(String uri, String remaining, Map<String, Object> properties) throws Exception {\n+        initCamelCronService();\n+\n+        CamelCronConfiguration configuration = new CamelCronConfiguration();\n+        configuration.setName(remaining);\n+        setProperties(configuration, properties);\n+        validate(configuration);\n+\n+        Endpoint delegate = this.service.createEndpoint(configuration);\n+        CronEndpoint cronEndpoint = new CronEndpoint(uri, this, delegate, configuration);\n+\n+        if (properties.size() > 0) {\n+            // Additional endpoint properties present\n+            setProperties(cronEndpoint, properties);\n+        }\n+\n+        return cronEndpoint;\n+    }\n+\n+    /**\n+     * Lazy creation of the CamelCronService\n+     */\n+    public synchronized void initCamelCronService() {", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "594b2bf66559a783df840797499e1ecf0acde55a", "chunk": "diff --git a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java\nindex 19192fcabc7..acc6e8fb50f 100644\n--- a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java\n+++ b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java\n\n@@ -83,10 +83,6 @@ public class CronComponent extends DefaultComponent {\n         }\n     }\n \n-    public CamelCronService getService() {\n-        return service;\n-    }\n-\n     public String getCronService() {\n         return cronService;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjE4MQ==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512181", "bodyText": "You need also to do\nconfigureConsumer(consumer)", "author": "davsclaus", "createdAt": "2020-01-11T10:02:25Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import org.apache.camel.Component;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.DelegateEndpoint;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.spi.ExceptionHandler;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.support.DefaultEndpoint;\n+\n+@UriEndpoint(firstVersion = \"3.1.0\", scheme = \"cron\", title = \"Cron\", syntax = \"cron:name\", consumerOnly = true, label = \"scheduling\")\n+public class CronEndpoint extends DefaultEndpoint implements DelegateEndpoint {\n+\n+    private Endpoint delegate;\n+\n+    @UriParam\n+    private CamelCronConfiguration configuration;\n+\n+    public CronEndpoint(String endpointUri, Component component, Endpoint delegate, CamelCronConfiguration configuration) {\n+        super(endpointUri, component);\n+        this.delegate = delegate;\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public Endpoint getEndpoint() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public Producer createProducer() throws Exception {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Consumer createConsumer(Processor processor) throws Exception {\n+        return delegate.createConsumer(processor);", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93c107741cbdc95ee21a3daba701119963296db4", "chunk": "diff --git a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java\nindex d1ed013d787..41dbcec133f 100644\n--- a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java\n+++ b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java\n\n@@ -55,7 +55,9 @@ public class CronEndpoint extends DefaultEndpoint implements DelegateEndpoint {\n \n     @Override\n     public Consumer createConsumer(Processor processor) throws Exception {\n-        return delegate.createConsumer(processor);\n+        Consumer consumer = delegate.createConsumer(processor);\n+        configureConsumer(consumer);\n+        return consumer;\n     }\n \n     public CamelCronConfiguration getConfiguration() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjI3MA==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512270", "bodyText": "Ah yeah we may need to do this on other delegate endpoints (create a jira ticket)", "author": "davsclaus", "createdAt": "2020-01-11T10:04:26Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import org.apache.camel.Component;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.DelegateEndpoint;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.spi.ExceptionHandler;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.support.DefaultEndpoint;\n+\n+@UriEndpoint(firstVersion = \"3.1.0\", scheme = \"cron\", title = \"Cron\", syntax = \"cron:name\", consumerOnly = true, label = \"scheduling\")\n+public class CronEndpoint extends DefaultEndpoint implements DelegateEndpoint {\n+\n+    private Endpoint delegate;\n+\n+    @UriParam\n+    private CamelCronConfiguration configuration;\n+\n+    public CronEndpoint(String endpointUri, Component component, Endpoint delegate, CamelCronConfiguration configuration) {\n+        super(endpointUri, component);\n+        this.delegate = delegate;\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public Endpoint getEndpoint() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public Producer createProducer() throws Exception {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Consumer createConsumer(Processor processor) throws Exception {\n+        return delegate.createConsumer(processor);\n+    }\n+\n+    public CamelCronConfiguration getConfiguration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public void setSynchronous(boolean synchronous) {", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93c107741cbdc95ee21a3daba701119963296db4", "chunk": "diff --git a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java\nindex d1ed013d787..41dbcec133f 100644\n--- a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java\n+++ b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java\n\n@@ -55,7 +55,9 @@ public class CronEndpoint extends DefaultEndpoint implements DelegateEndpoint {\n \n     @Override\n     public Consumer createConsumer(Processor processor) throws Exception {\n-        return delegate.createConsumer(processor);\n+        Consumer consumer = delegate.createConsumer(processor);\n+        configureConsumer(consumer);\n+        return consumer;\n     }\n \n     public CamelCronConfiguration getConfiguration() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjM4Mw==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512383", "bodyText": "In Camel we have FactoryFinder as our way of loading these kind of stuff. It made it work in OSGi too. However maybe service loader is okay in these modern cloud days.", "author": "davsclaus", "createdAt": "2020-01-11T10:07:21Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.TreeMap;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.support.CamelContextHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CronHelper {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CronHelper.class);\n+\n+    private CronHelper() {\n+    }\n+\n+    /**\n+     * Helper to lookup/create an instance of {@link CamelCronService}\n+     */\n+    public static CamelCronService resolveCamelCronService(CamelContext context, String name) {\n+        // Lookup the registry first\n+        CamelCronService service = ObjectHelper.isEmpty(name)\n+                ? CamelContextHelper.findByType(context, CamelCronService.class)\n+                : CamelContextHelper.lookup(context, name, CamelCronService.class);\n+\n+        if (service != null) {\n+            // If the service is bound to the registry we assume it is already\n+            // configured so let's return it as it is.\n+            return service;\n+        }\n+\n+        // Fallback to service loader", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "chunk": "diff --git a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronHelper.java b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronHelper.java\nindex 208c0e1e0dd..d2d9deb0081 100644\n--- a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronHelper.java\n+++ b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronHelper.java\n\n@@ -16,12 +16,12 @@\n  */\n package org.apache.camel.component.cron;\n \n-import java.util.Map;\n-import java.util.ServiceLoader;\n-import java.util.TreeMap;\n-\n import org.apache.camel.CamelContext;\n+import org.apache.camel.ExtendedCamelContext;\n+import org.apache.camel.NoFactoryAvailableException;\n+import org.apache.camel.RuntimeCamelException;\n import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.spi.FactoryFinder;\n import org.apache.camel.support.CamelContextHelper;\n import org.apache.camel.util.ObjectHelper;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4Njk3NQ==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365686975", "bodyText": "Wonder if after we get https://issues.apache.org/jira/browse/CAMEL-14389 done we should start using the type-safe dsl for scenario like this one as it would ease refactoring/deprecations", "author": "lburgazzoli", "createdAt": "2020-01-13T08:38:47Z", "path": "components/camel-quartz/src/main/java/org/apache/camel/component/quartz/cron/CamelQuartzCronService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.quartz.cron;\n+\n+import java.util.Collections;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.CamelContextAware;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.component.quartz.QuartzComponent;\n+import org.apache.camel.util.URISupport;\n+\n+/**\n+ * Allows the camel-quartz component to be used as implementation for camel-cron endpoints.\n+ */\n+public class CamelQuartzCronService implements CamelCronService, CamelContextAware {\n+\n+    private CamelContext context;\n+\n+    @Override\n+    public Endpoint createEndpoint(CamelCronConfiguration configuration) throws Exception {\n+        String schedule = convertSchedule(configuration.getSchedule());\n+\n+        String uriPath = \"quartz://\" + configuration.getName();\n+        String query = URISupport.createQueryString(Collections.singletonMap(\"cron\", schedule));\n+        String uri = uriPath + \"?\" + query;\n+\n+        QuartzComponent quartz = context.getComponent(\"quartz\", QuartzComponent.class);\n+        return quartz.createEndpoint(uri);", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4NzU3NQ==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365687575", "bodyText": "Maybe we should implement DelegateEndpoint", "author": "lburgazzoli", "createdAt": "2020-01-13T08:40:33Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import java.util.Map;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.spi.Metadata;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.DefaultComponent;\n+import org.apache.camel.util.ObjectHelper;\n+\n+/**\n+ * The Camel cron component.\n+ */\n+@Component(\"cron\")\n+public class CronComponent extends DefaultComponent {", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxNzM2MQ==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365717361", "bodyText": "You mean.. providing kinda DelegateEndpointSupport?", "author": "nicolaferraro", "createdAt": "2020-01-13T09:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4NzU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "594b2bf66559a783df840797499e1ecf0acde55a", "chunk": "diff --git a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java\nindex 19192fcabc7..acc6e8fb50f 100644\n--- a/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java\n+++ b/components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java\n\n@@ -83,10 +83,6 @@ public class CronComponent extends DefaultComponent {\n         }\n     }\n \n-    public CamelCronService getService() {\n-        return service;\n-    }\n-\n     public String getCronService() {\n         return cronService;\n     }\n"}}, {"oid": "594b2bf66559a783df840797499e1ecf0acde55a", "url": "https://github.com/apache/camel/commit/594b2bf66559a783df840797499e1ecf0acde55a", "message": "CAMEL-14385: add a camel-cron component", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "f21734bb6ea6511de9674e5307875eda8d045f6d", "url": "https://github.com/apache/camel/commit/f21734bb6ea6511de9674e5307875eda8d045f6d", "message": "CAMEL-14385: update docs and manifests for camel-cron component", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "778693c14f694d17c499e5a90246a1e1d3716876", "url": "https://github.com/apache/camel/commit/778693c14f694d17c499e5a90246a1e1d3716876", "message": "CAMEL-14385: add more tests", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "ec06556ea00f74fa21fc9619770e1ad2ee9f233a", "url": "https://github.com/apache/camel/commit/ec06556ea00f74fa21fc9619770e1ad2ee9f233a", "message": "CAMEL-14385: remove commented config", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "7b1a1a6cc433cb5684e263f8c90a09a76e6b2383", "url": "https://github.com/apache/camel/commit/7b1a1a6cc433cb5684e263f8c90a09a76e6b2383", "message": "CAMEL-14385: moving initialization to doStart", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "57b25adb43a25f7b4ac4873646583972adf43768", "url": "https://github.com/apache/camel/commit/57b25adb43a25f7b4ac4873646583972adf43768", "message": "CAMEL-14385: support cron component in camel-spring", "committedDate": "2020-01-13T10:10:20Z", "type": "commit"}, {"oid": "93c107741cbdc95ee21a3daba701119963296db4", "url": "https://github.com/apache/camel/commit/93c107741cbdc95ee21a3daba701119963296db4", "message": "CAMEL-14385: fix configure consumer", "committedDate": "2020-01-13T10:10:20Z", "type": "commit"}, {"oid": "987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "url": "https://github.com/apache/camel/commit/987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "message": "CAMEL-14385: switch to factory finder", "committedDate": "2020-01-13T10:10:21Z", "type": "commit"}, {"oid": "987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "url": "https://github.com/apache/camel/commit/987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "message": "CAMEL-14385: switch to factory finder", "committedDate": "2020-01-13T10:10:21Z", "type": "forcePushed"}]}