{"pr_number": 3478, "pr_title": "CAMEL-14397: DefaultComponent should prefer getting the configurers f\u2026", "pr_createdAt": "2020-01-14T08:00:51Z", "pr_url": "https://github.com/apache/camel/pull/3478", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5ODg1NQ==", "url": "https://github.com/apache/camel/pull/3478#discussion_r366198855", "bodyText": "The name should have -configurer, eg -component-configurer", "author": "davsclaus", "createdAt": "2020-01-14T08:14:49Z", "path": "core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java", "diffHunk": "@@ -406,17 +407,25 @@ protected void doInit() throws Exception {\n                 name = StringHelper.before(name, \",\");\n             }\n             try {\n+                final Registry registry = getCamelContext().getRegistry();\n                 log.trace(\"Discovering optional component property configurer class for component: {}\", name);\n-                Optional<Class<?>> clazz = getCamelContext().adapt(ExtendedCamelContext.class).getFactoryFinder(RESOURCE_PATH)\n-                        .findOptionalClass(name + \"-component\", null);\n-                clazz.ifPresent(c -> componentPropertyConfigurer = org.apache.camel.support.ObjectHelper.newInstance(c, GeneratedPropertyConfigurer.class));\n+                componentPropertyConfigurer = registry.lookupByNameAndType(name + \"-component\", GeneratedPropertyConfigurer.class);", "originalCommit": "5f05f1a0c485177bd0602ac48a6a7c2c674a3643", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwODc3OQ==", "url": "https://github.com/apache/camel/pull/3478#discussion_r366208779", "bodyText": "That would introduce a discrepancy between the name of the property file and the name used for the registration of the service in the Camel registry. That would in turn require special code for registering the configurers in Camel Quarkus, which I think we'd like to avoid ( cc @lburgazzoli ?) So if you really want the registry name to have the -configurer suffix, could we please also rename the property files?", "author": "ppalaga", "createdAt": "2020-01-14T08:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5ODg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIzNTEyOQ==", "url": "https://github.com/apache/camel/pull/3478#discussion_r366235129", "bodyText": "I have added 14c5188 that renames both the property files and the keys used to register the configurers to the registry.", "author": "ppalaga", "createdAt": "2020-01-14T09:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5ODg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI1NTAyMQ==", "url": "https://github.com/apache/camel/pull/3478#discussion_r366255021", "bodyText": "The name of the property file is based on its FQN folder name, where its parent folder name is configurer. Not sure what you do on the quarkus side, but you should not change the APT code", "author": "davsclaus", "createdAt": "2020-01-14T10:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5ODg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyMTI1Ng==", "url": "https://github.com/apache/camel/pull/3478#discussion_r366321256", "bodyText": "OK, let me remove the second commit.\nBack to your original proposal\n\nThe name should have -configurer, eg -component-configurer\n\nCould you please explain why? I just want to understand your motivation.", "author": "ppalaga", "createdAt": "2020-01-14T12:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5ODg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMjk2MQ==", "url": "https://github.com/apache/camel/pull/3478#discussion_r366332961", "bodyText": "The registry is end user facing and they can register things too, and some register components with foo-component, etc so you end up with naming clashes too.", "author": "davsclaus", "createdAt": "2020-01-14T13:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5ODg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "14c51885d9352498c8b5edaf1a104beed0d5ef4c", "chunk": "diff --git a/core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java b/core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java\nindex d6f87735eca..3181180614d 100644\n--- a/core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java\n+++ b/core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java\n\n@@ -409,25 +409,33 @@ public abstract class DefaultComponent extends ServiceSupport implements Compone\n             try {\n                 final Registry registry = getCamelContext().getRegistry();\n                 log.trace(\"Discovering optional component property configurer class for component: {}\", name);\n-                componentPropertyConfigurer = registry.lookupByNameAndType(name + \"-component\", GeneratedPropertyConfigurer.class);\n+                final String componentConfigurerName = name + \"-component-configurer\";\n+                componentPropertyConfigurer = registry.lookupByNameAndType(componentConfigurerName, GeneratedPropertyConfigurer.class);\n+                if (log.isDebugEnabled() && componentPropertyConfigurer != null) {\n+                    log.debug(\"Discovered component property configurer using the Camel registry: {} -> {}\", name, componentPropertyConfigurer);\n+                }\n                 if (componentPropertyConfigurer == null) {\n                     final Optional<Class<?>> clazz = getCamelContext().adapt(ExtendedCamelContext.class).getFactoryFinder(RESOURCE_PATH)\n-                            .findOptionalClass(name + \"-component\", null);\n+                            .findOptionalClass(componentConfigurerName, null);\n                     clazz.ifPresent(c -> componentPropertyConfigurer = org.apache.camel.support.ObjectHelper.newInstance(c, GeneratedPropertyConfigurer.class));\n                 }\n                 if (log.isDebugEnabled() && componentPropertyConfigurer != null) {\n-                    log.debug(\"Discovered component property configurer: {} -> {}\", name, componentPropertyConfigurer);\n+                    log.debug(\"Discovered component property configurer using the FactoryFinder: {} -> {}\", name, componentPropertyConfigurer);\n                 }\n \n                 log.trace(\"Discovering optional endpoint property configurer class for component: {}\", name);\n-                endpointPropertyConfigurer = registry.lookupByNameAndType(name + \"-endpoint\", GeneratedPropertyConfigurer.class);\n+                final String endpointConfigurerName = name + \"-endpoint-configurer\";\n+                endpointPropertyConfigurer = registry.lookupByNameAndType(endpointConfigurerName, GeneratedPropertyConfigurer.class);\n+                if (log.isDebugEnabled() && endpointPropertyConfigurer != null) {\n+                    log.debug(\"Discovered endpoint property configurer using the Camel registry: {} -> {}\", name, endpointPropertyConfigurer);\n+                }\n                 if (endpointPropertyConfigurer == null) {\n                     final Optional<Class<?>> clazz = getCamelContext().adapt(ExtendedCamelContext.class).getFactoryFinder(RESOURCE_PATH)\n-                            .findOptionalClass(name + \"-endpoint\", null);\n+                            .findOptionalClass(endpointConfigurerName, null);\n                     clazz.ifPresent(c -> endpointPropertyConfigurer = org.apache.camel.support.ObjectHelper.newInstance(c, GeneratedPropertyConfigurer.class));\n                 }\n                 if (log.isDebugEnabled() && endpointPropertyConfigurer != null) {\n-                    log.debug(\"Discovered endpoint property configurer: {} -> {}\", name, endpointPropertyConfigurer);\n+                    log.debug(\"Discovered endpoint property configurer using the FactoryFinder: {} -> {}\", name, endpointPropertyConfigurer);\n                 }\n             } catch (NoFactoryAvailableException e) {\n                 // ignore\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5ODkzNA==", "url": "https://github.com/apache/camel/pull/3478#discussion_r366198934", "bodyText": "The name should have -configurer, eg -endpoint-configurer", "author": "davsclaus", "createdAt": "2020-01-14T08:15:01Z", "path": "core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java", "diffHunk": "@@ -406,17 +407,25 @@ protected void doInit() throws Exception {\n                 name = StringHelper.before(name, \",\");\n             }\n             try {\n+                final Registry registry = getCamelContext().getRegistry();\n                 log.trace(\"Discovering optional component property configurer class for component: {}\", name);\n-                Optional<Class<?>> clazz = getCamelContext().adapt(ExtendedCamelContext.class).getFactoryFinder(RESOURCE_PATH)\n-                        .findOptionalClass(name + \"-component\", null);\n-                clazz.ifPresent(c -> componentPropertyConfigurer = org.apache.camel.support.ObjectHelper.newInstance(c, GeneratedPropertyConfigurer.class));\n+                componentPropertyConfigurer = registry.lookupByNameAndType(name + \"-component\", GeneratedPropertyConfigurer.class);\n+                if (componentPropertyConfigurer == null) {\n+                    final Optional<Class<?>> clazz = getCamelContext().adapt(ExtendedCamelContext.class).getFactoryFinder(RESOURCE_PATH)\n+                            .findOptionalClass(name + \"-component\", null);\n+                    clazz.ifPresent(c -> componentPropertyConfigurer = org.apache.camel.support.ObjectHelper.newInstance(c, GeneratedPropertyConfigurer.class));\n+                }\n                 if (log.isDebugEnabled() && componentPropertyConfigurer != null) {\n                     log.debug(\"Discovered component property configurer: {} -> {}\", name, componentPropertyConfigurer);\n                 }\n+\n                 log.trace(\"Discovering optional endpoint property configurer class for component: {}\", name);\n-                clazz = getCamelContext().adapt(ExtendedCamelContext.class).getFactoryFinder(RESOURCE_PATH)\n-                        .findOptionalClass(name + \"-endpoint\", null);\n-                clazz.ifPresent(c -> endpointPropertyConfigurer = org.apache.camel.support.ObjectHelper.newInstance(c, GeneratedPropertyConfigurer.class));\n+                endpointPropertyConfigurer = registry.lookupByNameAndType(name + \"-endpoint\", GeneratedPropertyConfigurer.class);", "originalCommit": "5f05f1a0c485177bd0602ac48a6a7c2c674a3643", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14c51885d9352498c8b5edaf1a104beed0d5ef4c", "chunk": "diff --git a/core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java b/core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java\nindex d6f87735eca..3181180614d 100644\n--- a/core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java\n+++ b/core/camel-support/src/main/java/org/apache/camel/support/DefaultComponent.java\n\n@@ -409,25 +409,33 @@ public abstract class DefaultComponent extends ServiceSupport implements Compone\n             try {\n                 final Registry registry = getCamelContext().getRegistry();\n                 log.trace(\"Discovering optional component property configurer class for component: {}\", name);\n-                componentPropertyConfigurer = registry.lookupByNameAndType(name + \"-component\", GeneratedPropertyConfigurer.class);\n+                final String componentConfigurerName = name + \"-component-configurer\";\n+                componentPropertyConfigurer = registry.lookupByNameAndType(componentConfigurerName, GeneratedPropertyConfigurer.class);\n+                if (log.isDebugEnabled() && componentPropertyConfigurer != null) {\n+                    log.debug(\"Discovered component property configurer using the Camel registry: {} -> {}\", name, componentPropertyConfigurer);\n+                }\n                 if (componentPropertyConfigurer == null) {\n                     final Optional<Class<?>> clazz = getCamelContext().adapt(ExtendedCamelContext.class).getFactoryFinder(RESOURCE_PATH)\n-                            .findOptionalClass(name + \"-component\", null);\n+                            .findOptionalClass(componentConfigurerName, null);\n                     clazz.ifPresent(c -> componentPropertyConfigurer = org.apache.camel.support.ObjectHelper.newInstance(c, GeneratedPropertyConfigurer.class));\n                 }\n                 if (log.isDebugEnabled() && componentPropertyConfigurer != null) {\n-                    log.debug(\"Discovered component property configurer: {} -> {}\", name, componentPropertyConfigurer);\n+                    log.debug(\"Discovered component property configurer using the FactoryFinder: {} -> {}\", name, componentPropertyConfigurer);\n                 }\n \n                 log.trace(\"Discovering optional endpoint property configurer class for component: {}\", name);\n-                endpointPropertyConfigurer = registry.lookupByNameAndType(name + \"-endpoint\", GeneratedPropertyConfigurer.class);\n+                final String endpointConfigurerName = name + \"-endpoint-configurer\";\n+                endpointPropertyConfigurer = registry.lookupByNameAndType(endpointConfigurerName, GeneratedPropertyConfigurer.class);\n+                if (log.isDebugEnabled() && endpointPropertyConfigurer != null) {\n+                    log.debug(\"Discovered endpoint property configurer using the Camel registry: {} -> {}\", name, endpointPropertyConfigurer);\n+                }\n                 if (endpointPropertyConfigurer == null) {\n                     final Optional<Class<?>> clazz = getCamelContext().adapt(ExtendedCamelContext.class).getFactoryFinder(RESOURCE_PATH)\n-                            .findOptionalClass(name + \"-endpoint\", null);\n+                            .findOptionalClass(endpointConfigurerName, null);\n                     clazz.ifPresent(c -> endpointPropertyConfigurer = org.apache.camel.support.ObjectHelper.newInstance(c, GeneratedPropertyConfigurer.class));\n                 }\n                 if (log.isDebugEnabled() && endpointPropertyConfigurer != null) {\n-                    log.debug(\"Discovered endpoint property configurer: {} -> {}\", name, endpointPropertyConfigurer);\n+                    log.debug(\"Discovered endpoint property configurer using the FactoryFinder: {} -> {}\", name, endpointPropertyConfigurer);\n                 }\n             } catch (NoFactoryAvailableException e) {\n                 // ignore\n"}}, {"oid": "14c51885d9352498c8b5edaf1a104beed0d5ef4c", "url": "https://github.com/apache/camel/commit/14c51885d9352498c8b5edaf1a104beed0d5ef4c", "message": "CAMEL-14397: Rename the configurer property files", "committedDate": "2020-01-14T09:37:28Z", "type": "forcePushed"}, {"oid": "804f0bab824b08c188feab65f23d2a7d0eea30d2", "url": "https://github.com/apache/camel/commit/804f0bab824b08c188feab65f23d2a7d0eea30d2", "message": "CAMEL-14397: DefaultComponent should prefer getting the configurers from\nthe registry before checking the FactoryFinder", "committedDate": "2020-01-14T13:16:30Z", "type": "commit"}, {"oid": "804f0bab824b08c188feab65f23d2a7d0eea30d2", "url": "https://github.com/apache/camel/commit/804f0bab824b08c188feab65f23d2a7d0eea30d2", "message": "CAMEL-14397: DefaultComponent should prefer getting the configurers from\nthe registry before checking the FactoryFinder", "committedDate": "2020-01-14T13:16:30Z", "type": "forcePushed"}]}