{"pr_number": 3706, "pr_title": "CAMEL-14626 : api maven plugin - Cannot load <T> class", "pr_createdAt": "2020-04-02T15:55:24Z", "pr_url": "https://github.com/apache/camel/pull/3706", "timeline": [{"oid": "7bb580b27d8be1de7098614cb84fd1fe57f6e4c9", "url": "https://github.com/apache/camel/commit/7bb580b27d8be1de7098614cb84fd1fe57f6e4c9", "message": "CAMEL-14626 : api maven plugin - Cannot load <T> class", "committedDate": "2020-04-02T15:53:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNzI5NQ==", "url": "https://github.com/apache/camel/pull/3706#discussion_r402427295", "bodyText": "Could also do it at line 335, but I think this approach is more universal.", "author": "manonthegithub", "createdAt": "2020-04-02T15:59:44Z", "path": "tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java", "diffHunk": "@@ -344,9 +344,15 @@ public String getCanonicalName(ApiMethodArg argument) throws MojoExecutionExcept\n                         parameterizedType.append(\n                             getCanonicalName(getProjectClassLoader().loadClass(\"java.lang.\" + argType)));\n                     } catch (ClassNotFoundException e1) {\n-                        log.warn(\"Ignoring type parameters <\" + typeArgs + \"> for argument \" + argument.getName()\n-                                 + \", unable to load parametric type argument \" + argType, e1);\n-                        ignore = true;\n+                        // if the length of the artType is 1, we think that it's variable type parameter (like T in List<T>)\n+                        // not perfect solution, but should work in most of the cases\n+                        if (argType.trim().length() > 1) {", "originalCommit": "7bb580b27d8be1de7098614cb84fd1fe57f6e4c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "007d1ad2629ecc7be01258cc0db6fbcd67935c42", "chunk": "diff --git a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java\nindex e127f5a3d00..a043d2dc346 100644\n--- a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java\n+++ b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java\n\n@@ -344,30 +343,23 @@ public abstract class AbstractApiMethodGeneratorMojo extends AbstractApiMethodBa\n                         parameterizedType.append(\n                             getCanonicalName(getProjectClassLoader().loadClass(\"java.lang.\" + argType)));\n                     } catch (ClassNotFoundException e1) {\n+                        parameterizedType.append(\"?\");\n                         // if the length of the artType is 1, we think that it's variable type parameter (like T in List<T>)\n                         // not perfect solution, but should work in most of the cases\n                         if (argType.trim().length() > 1) {\n                             log.warn(\"Ignoring type parameters <\" + typeArgs + \"> for argument \" + argument.getName()\n                                     + \", unable to load parametric type argument \" + argType, e1);\n-                            ignore = true;\n-                        } else {\n-                            parameterizedType.append(\"?\");\n                         }\n                     }\n                 }\n \n-                if (ignore) {\n-                    // give up\n-                    break;\n-                } else if (++i < nTypes) {\n+                if (++i < nTypes) {\n                     parameterizedType.append(\",\");\n                 }\n             }\n \n-            if (!ignore) {\n-                parameterizedType.append('>');\n-                canonicalName = parameterizedType.toString();\n-            }\n+            parameterizedType.append('>');\n+            canonicalName = parameterizedType.toString();\n         }\n \n         return canonicalName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTMwOQ==", "url": "https://github.com/apache/camel/pull/3706#discussion_r402461309", "bodyText": "@manonthegithub I'm not sure, but we could try to implement more elegant solution, like cast to (T) and catch ClassCastException?", "author": "dmvolod", "createdAt": "2020-04-02T16:50:26Z", "path": "tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java", "diffHunk": "@@ -344,9 +344,15 @@ public String getCanonicalName(ApiMethodArg argument) throws MojoExecutionExcept\n                         parameterizedType.append(\n                             getCanonicalName(getProjectClassLoader().loadClass(\"java.lang.\" + argType)));\n                     } catch (ClassNotFoundException e1) {\n-                        log.warn(\"Ignoring type parameters <\" + typeArgs + \"> for argument \" + argument.getName()\n-                                 + \", unable to load parametric type argument \" + argType, e1);\n-                        ignore = true;\n+                        // if the length of the artType is 1, we think that it's variable type parameter (like T in List<T>)\n+                        // not perfect solution, but should work in most of the cases\n+                        if (argType.trim().length() > 1) {", "originalCommit": "7bb580b27d8be1de7098614cb84fd1fe57f6e4c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NTQ4MQ==", "url": "https://github.com/apache/camel/pull/3706#discussion_r402465481", "bodyText": "@dmvolod it is already checked that the clas does not exits on the line 335 and then 344, how would additional check help?", "author": "manonthegithub", "createdAt": "2020-04-02T16:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3MTA0Nw==", "url": "https://github.com/apache/camel/pull/3706#discussion_r402471047", "bodyText": "Didn't do much of class casting, but I think it's impossible to cast having only string value of a class name.", "author": "manonthegithub", "createdAt": "2020-04-02T17:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3MjkwNA==", "url": "https://github.com/apache/camel/pull/3706#discussion_r402472904", "bodyText": "I mean a String in runtime with the name of type arg", "author": "manonthegithub", "createdAt": "2020-04-02T17:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3Njk3NA==", "url": "https://github.com/apache/camel/pull/3706#discussion_r402476974", "bodyText": "Yes, you are right, but looks like not handles all generics variants. But may be it's enough for current cases.", "author": "dmvolod", "createdAt": "2020-04-02T17:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4NjY5OQ==", "url": "https://github.com/apache/camel/pull/3706#discussion_r402486699", "bodyText": "That is true, but it's not really possible to distinguish here between Generic parameter and nonexistent class.", "author": "manonthegithub", "createdAt": "2020-04-02T17:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "007d1ad2629ecc7be01258cc0db6fbcd67935c42", "chunk": "diff --git a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java\nindex e127f5a3d00..a043d2dc346 100644\n--- a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java\n+++ b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java\n\n@@ -344,30 +343,23 @@ public abstract class AbstractApiMethodGeneratorMojo extends AbstractApiMethodBa\n                         parameterizedType.append(\n                             getCanonicalName(getProjectClassLoader().loadClass(\"java.lang.\" + argType)));\n                     } catch (ClassNotFoundException e1) {\n+                        parameterizedType.append(\"?\");\n                         // if the length of the artType is 1, we think that it's variable type parameter (like T in List<T>)\n                         // not perfect solution, but should work in most of the cases\n                         if (argType.trim().length() > 1) {\n                             log.warn(\"Ignoring type parameters <\" + typeArgs + \"> for argument \" + argument.getName()\n                                     + \", unable to load parametric type argument \" + argType, e1);\n-                            ignore = true;\n-                        } else {\n-                            parameterizedType.append(\"?\");\n                         }\n                     }\n                 }\n \n-                if (ignore) {\n-                    // give up\n-                    break;\n-                } else if (++i < nTypes) {\n+                if (++i < nTypes) {\n                     parameterizedType.append(\",\");\n                 }\n             }\n \n-            if (!ignore) {\n-                parameterizedType.append('>');\n-                canonicalName = parameterizedType.toString();\n-            }\n+            parameterizedType.append('>');\n+            canonicalName = parameterizedType.toString();\n         }\n \n         return canonicalName;\n"}}, {"oid": "007d1ad2629ecc7be01258cc0db6fbcd67935c42", "url": "https://github.com/apache/camel/commit/007d1ad2629ecc7be01258cc0db6fbcd67935c42", "message": "improved parser to handle multiple generic args, fixed ignoring", "committedDate": "2020-04-04T16:02:38Z", "type": "commit"}]}