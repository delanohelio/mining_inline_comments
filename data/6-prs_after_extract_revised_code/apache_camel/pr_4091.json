{"pr_number": 4091, "pr_title": "CAMEL-15356: Add Azure EventHubs component", "pr_createdAt": "2020-08-14T12:48:40Z", "pr_url": "https://github.com/apache/camel/pull/4091", "timeline": [{"oid": "c8ad94d8f58457b4a3fd6f650a80dddb12abc308", "url": "https://github.com/apache/camel/commit/c8ad94d8f58457b4a3fd6f650a80dddb12abc308", "message": "CAMEL-15356: Add initial client configurations", "committedDate": "2020-08-04T08:50:59Z", "type": "commit"}, {"oid": "8a517b0f36e24b7fd6de1d326faab528b7b8ec69", "url": "https://github.com/apache/camel/commit/8a517b0f36e24b7fd6de1d326faab528b7b8ec69", "message": "CAMEL-15356: Add initial client configurations", "committedDate": "2020-08-04T08:51:43Z", "type": "commit"}, {"oid": "bf9e187860d1316a4c17c770d1932d45585682a3", "url": "https://github.com/apache/camel/commit/bf9e187860d1316a4c17c770d1932d45585682a3", "message": "CAMEL-15356: Add client and unit tests", "committedDate": "2020-08-04T14:43:56Z", "type": "commit"}, {"oid": "9269d96a1208edc1b8338b72514d82b7ecafbe61", "url": "https://github.com/apache/camel/commit/9269d96a1208edc1b8338b72514d82b7ecafbe61", "message": "CAMEL-15356: Add producer operation", "committedDate": "2020-08-10T12:44:58Z", "type": "commit"}, {"oid": "5bf5a47a61d8c65377d400141706d7d1a5e09073", "url": "https://github.com/apache/camel/commit/5bf5a47a61d8c65377d400141706d7d1a5e09073", "message": "CAMEL-15356: Add consumer operation", "committedDate": "2020-08-11T15:54:56Z", "type": "commit"}, {"oid": "109b43f60ffd15f9961022a0c8f80e7126b6a756", "url": "https://github.com/apache/camel/commit/109b43f60ffd15f9961022a0c8f80e7126b6a756", "message": "CAMEL-15356: Finish up the consumer with unit/IT tests", "committedDate": "2020-08-12T17:02:33Z", "type": "commit"}, {"oid": "5877901b4fea1b63de6eea9e5ac2586e19150fff", "url": "https://github.com/apache/camel/commit/5877901b4fea1b63de6eea9e5ac2586e19150fff", "message": "CAMEL-15356: Fix CS and polish it up", "committedDate": "2020-08-13T13:26:57Z", "type": "commit"}, {"oid": "2ef239cae681acbc469b99296326e9782455fdc5", "url": "https://github.com/apache/camel/commit/2ef239cae681acbc469b99296326e9782455fdc5", "message": "CAMEL-15356: Add docs", "committedDate": "2020-08-14T12:44:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MjUwNQ==", "url": "https://github.com/apache/camel/pull/4091#discussion_r470942505", "bodyText": "guard with != null as if camel fails to startup then this start method may not have been invoked and camel will call stop", "author": "davsclaus", "createdAt": "2020-08-15T05:54:01Z", "path": "components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsConsumer.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.azure.eventhubs;\n+\n+import com.azure.messaging.eventhubs.EventProcessorClient;\n+import com.azure.messaging.eventhubs.models.ErrorContext;\n+import com.azure.messaging.eventhubs.models.EventContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExtendedExchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.azure.eventhubs.client.EventHubsClientFactory;\n+import org.apache.camel.spi.Synchronization;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class EventHubsConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(EventHubsConsumer.class);\n+\n+    // we use the EventProcessorClient as recommended by Azure docs to consume from all partitions\n+    private EventProcessorClient processorClient;\n+\n+    public EventHubsConsumer(final EventHubsEndpoint endpoint, final Processor processor) {\n+        super(endpoint, processor);\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+\n+        // create the client\n+        processorClient = EventHubsClientFactory.createEventProcessorClient(getConfiguration(),\n+                this::onEventListener, this::onErrorListener);\n+\n+        // start the client but we will rely on the Azure Client Scheduler for thread management\n+        processorClient.start();\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        // shutdown the client\n+        processorClient.stop();", "originalCommit": "2ef239cae681acbc469b99296326e9782455fdc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de0594c91b29e813e79b4b2e79e49bd5b32fdbc", "chunk": "diff --git a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsConsumer.java b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsConsumer.java\nindex 9f8e2204583..cff9ba729b5 100644\n--- a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsConsumer.java\n+++ b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsConsumer.java\n\n@@ -53,8 +53,10 @@ public class EventHubsConsumer extends DefaultConsumer {\n \n     @Override\n     protected void doStop() throws Exception {\n-        // shutdown the client\n-        processorClient.stop();\n+        if (processorClient != null) {\n+            // shutdown the client\n+            processorClient.stop();\n+        }\n \n         // shutdown camel consumer\n         super.doStop();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MjY0NQ==", "url": "https://github.com/apache/camel/pull/4091#discussion_r470942645", "bodyText": "Call configureConsumer(consumer) also, see other components how-to", "author": "davsclaus", "createdAt": "2020-08-15T05:55:30Z", "path": "components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsEndpoint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.azure.eventhubs;\n+\n+import com.azure.messaging.eventhubs.models.ErrorContext;\n+import com.azure.messaging.eventhubs.models.EventContext;\n+import org.apache.camel.Category;\n+import org.apache.camel.Component;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.support.DefaultEndpoint;\n+\n+/**\n+ * The azure-eventhubs component that integrates Azure Event Hubs using AMQP protocol. Azure EventHubs is a highly scalable publish-subscribe service that\n+ * can ingest millions of events per second and stream them to multiple consumers.\n+ */\n+@UriEndpoint(firstVersion = \"3.5.0\", scheme = \"azure-eventhubs\", title = \"Azure Event Hubs\", syntax = \"azure-eventhubs:namespace/eventHubName\", category = {\n+        Category.CLOUD, Category.MESSAGING })\n+public class EventHubsEndpoint extends DefaultEndpoint {\n+\n+    @UriParam\n+    private EventHubsConfiguration configuration;\n+\n+    public EventHubsEndpoint(final String uri, final Component component, final EventHubsConfiguration configuration) {\n+        super(uri, component);\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public Producer createProducer() throws Exception {\n+        return new EventHubsProducer(this);\n+    }\n+\n+    @Override\n+    public Consumer createConsumer(Processor processor) throws Exception {\n+        return new EventHubsConsumer(this, processor);", "originalCommit": "2ef239cae681acbc469b99296326e9782455fdc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de0594c91b29e813e79b4b2e79e49bd5b32fdbc", "chunk": "diff --git a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsEndpoint.java b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsEndpoint.java\nindex eb8f95b5a09..43e6f379798 100644\n--- a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsEndpoint.java\n+++ b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsEndpoint.java\n\n@@ -52,7 +52,10 @@ public class EventHubsEndpoint extends DefaultEndpoint {\n \n     @Override\n     public Consumer createConsumer(Processor processor) throws Exception {\n-        return new EventHubsConsumer(this, processor);\n+        final Consumer eventHubConsumer = new EventHubsConsumer(this, processor);\n+        configureConsumer(eventHubConsumer);\n+\n+        return eventHubConsumer;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MjY4Nw==", "url": "https://github.com/apache/camel/pull/4091#discussion_r470942687", "bodyText": "The != null here", "author": "davsclaus", "createdAt": "2020-08-15T05:56:21Z", "path": "components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsProducer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.azure.eventhubs;\n+\n+import com.azure.messaging.eventhubs.EventHubProducerAsyncClient;\n+import org.apache.camel.AsyncCallback;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.azure.eventhubs.client.EventHubsClientFactory;\n+import org.apache.camel.component.azure.eventhubs.operations.EventHubsProducerOperations;\n+import org.apache.camel.support.DefaultAsyncProducer;\n+\n+public class EventHubsProducer extends DefaultAsyncProducer {\n+\n+    private EventHubProducerAsyncClient producerAsyncClient;\n+    private EventHubsProducerOperations producerOperations;\n+\n+    public EventHubsProducer(final Endpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+\n+        // create the client\n+        producerAsyncClient = EventHubsClientFactory.createEventHubProducerAsyncClient(getEndpoint().getConfiguration());\n+\n+        // create our operations\n+        producerOperations = new EventHubsProducerOperations(producerAsyncClient, getConfiguration());\n+    }\n+\n+    @Override\n+    public boolean process(Exchange exchange, AsyncCallback callback) {\n+        try {\n+            return producerOperations.sendEvents(exchange, callback);\n+        } catch (Exception e) {\n+            exchange.setException(e);\n+            callback.done(true);\n+            return true;\n+        }\n+\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        // shutdown async client\n+        producerAsyncClient.close();", "originalCommit": "2ef239cae681acbc469b99296326e9782455fdc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de0594c91b29e813e79b4b2e79e49bd5b32fdbc", "chunk": "diff --git a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsProducer.java b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsProducer.java\nindex b434ae9a513..1164156f8b4 100644\n--- a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsProducer.java\n+++ b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsProducer.java\n\n@@ -58,8 +58,10 @@ public class EventHubsProducer extends DefaultAsyncProducer {\n \n     @Override\n     protected void doStop() throws Exception {\n-        // shutdown async client\n-        producerAsyncClient.close();\n+        if (producerAsyncClient != null) {\n+            // shutdown async client\n+            producerAsyncClient.close();\n+        }\n \n         super.doStop();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MzE0NA==", "url": "https://github.com/apache/camel/pull/4091#discussion_r470943144", "bodyText": "The asyncCallback must only be invoked once, not sure if the 3 branches below can cause it to be invoked twice etc.\nSo you should essentially only return true if the method exits early and its the same thread that called this method that is calling the callback.\nSo I would remove the atomic boolean, and make this method return false. And then in the sendAsyncEventsWithSuitableMethod you call the callback with (false) as parameter as it must match what this method returned.", "author": "davsclaus", "createdAt": "2020-08-15T06:03:01Z", "path": "components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.azure.eventhubs.operations;\n+\n+import java.util.Collections;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import com.azure.messaging.eventhubs.EventData;\n+import com.azure.messaging.eventhubs.EventHubProducerAsyncClient;\n+import com.azure.messaging.eventhubs.models.SendOptions;\n+import org.apache.camel.AsyncCallback;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.azure.eventhubs.EventHubsConfiguration;\n+import org.apache.camel.component.azure.eventhubs.EventHubsConfigurationOptionsProxy;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+public class EventHubsProducerOperations {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(EventHubsProducerOperations.class);\n+\n+    private final EventHubProducerAsyncClient producerAsyncClient;\n+    private final EventHubsConfigurationOptionsProxy configurationOptionsProxy;\n+\n+    public EventHubsProducerOperations(final EventHubProducerAsyncClient producerAsyncClient, final EventHubsConfiguration configuration) {\n+        ObjectHelper.notNull(producerAsyncClient, \"client cannot be null\");\n+\n+        this.producerAsyncClient = producerAsyncClient;\n+        configurationOptionsProxy = new EventHubsConfigurationOptionsProxy(configuration);\n+    }\n+\n+    public boolean sendEvents(final Exchange exchange, final AsyncCallback callback) {\n+        ObjectHelper.notNull(exchange, \"exchange cannot be null\");\n+        ObjectHelper.notNull(callback, \"callback cannot be null\");\n+\n+        final SendOptions sendOptions = createSendOptions(configurationOptionsProxy.getPartitionKey(exchange), configurationOptionsProxy.getPartitionId(exchange));\n+        final Iterable<EventData> eventData = createEventData(exchange);\n+\n+        return sendAsyncEvents(eventData, sendOptions, exchange, callback);\n+    }\n+\n+    private boolean sendAsyncEvents(final Iterable<EventData> eventData, final SendOptions sendOptions, final Exchange exchange, final AsyncCallback asyncCallback) {\n+        final AtomicBoolean done = new AtomicBoolean(false);", "originalCommit": "2ef239cae681acbc469b99296326e9782455fdc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MzIwMw==", "url": "https://github.com/apache/camel/pull/4091#discussion_r470943203", "bodyText": "Also does the subcribe event below make any sense to react on? I would assume its either only the error or the completion.", "author": "davsclaus", "createdAt": "2020-08-15T06:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MzE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7de0594c91b29e813e79b4b2e79e49bd5b32fdbc", "chunk": "diff --git a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java\nindex 705a735ffca..bf787f1a017 100644\n--- a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java\n+++ b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java\n\n@@ -17,7 +17,6 @@\n package org.apache.camel.component.azure.eventhubs.operations;\n \n import java.util.Collections;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n import com.azure.messaging.eventhubs.EventData;\n import com.azure.messaging.eventhubs.EventHubProducerAsyncClient;\n"}}, {"oid": "7de0594c91b29e813e79b4b2e79e49bd5b32fdbc", "url": "https://github.com/apache/camel/commit/7de0594c91b29e813e79b4b2e79e49bd5b32fdbc", "message": "CAMEL-15356: Improve async callbacks", "committedDate": "2020-08-17T08:13:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNjU2Nw==", "url": "https://github.com/apache/camel/pull/4091#discussion_r471336567", "bodyText": "I would asumme this asyncCallback.done(false) should be in the previous method inside those 2 callbacks after ( // error but we continue) and also after ( // we are done from everything, so mark it as sync done). As this Camel callback should only be invoked when the azure client is fully complete with its work (either in error or with success).", "author": "davsclaus", "createdAt": "2020-08-17T08:54:12Z", "path": "components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.azure.eventhubs.operations;\n+\n+import java.util.Collections;\n+\n+import com.azure.messaging.eventhubs.EventData;\n+import com.azure.messaging.eventhubs.EventHubProducerAsyncClient;\n+import com.azure.messaging.eventhubs.models.SendOptions;\n+import org.apache.camel.AsyncCallback;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.azure.eventhubs.EventHubsConfiguration;\n+import org.apache.camel.component.azure.eventhubs.EventHubsConfigurationOptionsProxy;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+public class EventHubsProducerOperations {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(EventHubsProducerOperations.class);\n+\n+    private final EventHubProducerAsyncClient producerAsyncClient;\n+    private final EventHubsConfigurationOptionsProxy configurationOptionsProxy;\n+\n+    public EventHubsProducerOperations(final EventHubProducerAsyncClient producerAsyncClient, final EventHubsConfiguration configuration) {\n+        ObjectHelper.notNull(producerAsyncClient, \"client cannot be null\");\n+\n+        this.producerAsyncClient = producerAsyncClient;\n+        configurationOptionsProxy = new EventHubsConfigurationOptionsProxy(configuration);\n+    }\n+\n+    public boolean sendEvents(final Exchange exchange, final AsyncCallback callback) {\n+        ObjectHelper.notNull(exchange, \"exchange cannot be null\");\n+        ObjectHelper.notNull(callback, \"callback cannot be null\");\n+\n+        final SendOptions sendOptions = createSendOptions(configurationOptionsProxy.getPartitionKey(exchange), configurationOptionsProxy.getPartitionId(exchange));\n+        final Iterable<EventData> eventData = createEventData(exchange);\n+\n+        return sendAsyncEvents(eventData, sendOptions, exchange, callback);\n+    }\n+\n+    private boolean sendAsyncEvents(final Iterable<EventData> eventData, final SendOptions sendOptions, final Exchange exchange, final AsyncCallback asyncCallback) {\n+        sendAsyncEventsWithSuitableMethod(eventData, sendOptions, asyncCallback)\n+                .subscribe(unused -> LOG.debug(\"Processed one event...\"), error -> {\n+                    // error but we continue\n+                    LOG.debug(\"Error processing async exchange with error:\" + error.getMessage());\n+                    exchange.setException(error);\n+                }, () -> {\n+                    // we are done from everything, so mark it as sync done\n+                    LOG.debug(\"All events with exchange have been sent successfully.\");\n+                });\n+\n+        return false;\n+    }\n+\n+    private Mono<Void> sendAsyncEventsWithSuitableMethod(final Iterable<EventData> eventData, final SendOptions sendOptions,\n+                                                         final AsyncCallback asyncCallback) {\n+        final Mono<Void> deferredSendResult;\n+\n+        if (ObjectHelper.isEmpty(sendOptions)) {\n+            deferredSendResult = producerAsyncClient.send(eventData);\n+        } else {\n+            deferredSendResult = producerAsyncClient.send(eventData, sendOptions);\n+        }\n+\n+        // call callback on false since this process is running on the scheduler method of reactor and not needed\n+        // to have callback to returns true. Also false, will tell camel async to watch method to which it returns\n+        asyncCallback.done(false);", "originalCommit": "7de0594c91b29e813e79b4b2e79e49bd5b32fdbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc89c8796b326906898ae8d1ab518e07578047ee", "chunk": "diff --git a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java\nindex bf787f1a017..292259d6e34 100644\n--- a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java\n+++ b/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/operations/EventHubsProducerOperations.java\n\n@@ -55,34 +55,27 @@ public class EventHubsProducerOperations {\n     }\n \n     private boolean sendAsyncEvents(final Iterable<EventData> eventData, final SendOptions sendOptions, final Exchange exchange, final AsyncCallback asyncCallback) {\n-        sendAsyncEventsWithSuitableMethod(eventData, sendOptions, asyncCallback)\n+        sendAsyncEventsWithSuitableMethod(eventData, sendOptions)\n                 .subscribe(unused -> LOG.debug(\"Processed one event...\"), error -> {\n                     // error but we continue\n                     LOG.debug(\"Error processing async exchange with error:\" + error.getMessage());\n                     exchange.setException(error);\n+                    asyncCallback.done(false);\n                 }, () -> {\n                     // we are done from everything, so mark it as sync done\n                     LOG.debug(\"All events with exchange have been sent successfully.\");\n+                    asyncCallback.done(false);\n                 });\n \n         return false;\n     }\n \n-    private Mono<Void> sendAsyncEventsWithSuitableMethod(final Iterable<EventData> eventData, final SendOptions sendOptions,\n-                                                         final AsyncCallback asyncCallback) {\n-        final Mono<Void> deferredSendResult;\n-\n+    private Mono<Void> sendAsyncEventsWithSuitableMethod(final Iterable<EventData> eventData, final SendOptions sendOptions) {\n         if (ObjectHelper.isEmpty(sendOptions)) {\n-            deferredSendResult = producerAsyncClient.send(eventData);\n-        } else {\n-            deferredSendResult = producerAsyncClient.send(eventData, sendOptions);\n+            return producerAsyncClient.send(eventData);\n         }\n \n-        // call callback on false since this process is running on the scheduler method of reactor and not needed\n-        // to have callback to returns true. Also false, will tell camel async to watch method to which it returns\n-        asyncCallback.done(false);\n-\n-        return deferredSendResult;\n+        return producerAsyncClient.send(eventData, sendOptions);\n     }\n \n     private SendOptions createSendOptions(final String partitionKey, final String partitionId) {\n"}}, {"oid": "cc89c8796b326906898ae8d1ab518e07578047ee", "url": "https://github.com/apache/camel/commit/cc89c8796b326906898ae8d1ab518e07578047ee", "message": "CAMEL-15356: Improve async callbacks", "committedDate": "2020-08-17T09:00:04Z", "type": "commit"}]}