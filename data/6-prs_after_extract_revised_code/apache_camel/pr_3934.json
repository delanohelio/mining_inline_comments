{"pr_number": 3934, "pr_title": "[CAMEL-15253] camel-oaipmh - basic implementation", "pr_createdAt": "2020-06-18T21:32:21Z", "pr_url": "https://github.com/apache/camel/pull/3934", "timeline": [{"oid": "3cc8ca4f027a9c19fb32df42eaadd0583e983ffe", "url": "https://github.com/apache/camel/commit/3cc8ca4f027a9c19fb32df42eaadd0583e983ffe", "message": "[CAMEL-15253] camel-oaipmh - implementation", "committedDate": "2020-07-26T21:21:23Z", "type": "commit"}, {"oid": "2c23cdec6dc8115cfbf03636145ef9ea53fbc2a1", "url": "https://github.com/apache/camel/commit/2c23cdec6dc8115cfbf03636145ef9ea53fbc2a1", "message": "Documentation fix", "committedDate": "2020-07-27T01:20:56Z", "type": "commit"}, {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "url": "https://github.com/apache/camel/commit/2b1bdc9e44f1190caea333240d9b0469733a2a16", "message": "Improvements:\n\n- Implement HTTPS test.\n- Add parameter: ignoreSSLWarnings\n- Regen", "committedDate": "2020-07-30T23:38:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4NDQzMA==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463484430", "bodyText": "I see these imports are not used here", "author": "omarsmak", "createdAt": "2020-07-31T08:45:12Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.handler;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.KeyManagementException;", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java\nindex b0491150a27..9f190bba00c 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java\n\n@@ -19,9 +19,6 @@ package org.apache.camel.oaipmh.handler;\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.security.KeyManagementException;\n-import java.security.KeyStoreException;\n-import java.security.NoSuchAlgorithmException;\n import java.util.List;\n import java.util.Optional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4NDcwNA==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463484704", "bodyText": "I don't think you need to throw all these exception since you are throwing Exception.", "author": "omarsmak", "createdAt": "2020-07-31T08:45:40Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.handler;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.xml.sax.SAXException;\n+\n+import org.apache.camel.oaipmh.component.model.OAIPMHVerb;\n+import org.apache.camel.oaipmh.model.OAIPMHResponse;\n+import org.apache.camel.oaipmh.utils.OAIPMHHttpClient;\n+\n+public class Harvester {\n+\n+    private static final String NO_TOKEN = null;\n+    private String resumptionToken = NO_TOKEN;\n+    private URI baseURI;\n+    private String verb;\n+    private String metadata;\n+    private String until;\n+    private String from;\n+    private String set;\n+    private String identifier;\n+    private OAIPMHHttpClient httpClient;\n+    private ResponseHandler oaipmhResponseHandler;\n+\n+    private boolean empty;\n+\n+    public Harvester(ResponseHandler oaipmhResponseHandler, URI baseURI, String verb, String metadata, String until, String from, String set, String identifier) {\n+        this.baseURI = baseURI;\n+        this.verb = verb;\n+        this.metadata = metadata;\n+        this.until = until;\n+        this.from = from;\n+        this.set = set;\n+        this.identifier = identifier;\n+        this.httpClient = new OAIPMHHttpClient();\n+        this.oaipmhResponseHandler = oaipmhResponseHandler;\n+\n+        if (OAIPMHVerb.valueOf(verb) == OAIPMHVerb.Identify) {\n+            this.metadata = null;\n+            this.until = null;\n+            this.from = null;\n+            this.set = null;\n+            this.identifier = null;\n+        }\n+\n+    }\n+\n+    private boolean harvest() throws IOException, URISyntaxException, ParserConfigurationException, SAXException, Exception {", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java\nindex b0491150a27..9f190bba00c 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java\n\n@@ -19,9 +19,6 @@ package org.apache.camel.oaipmh.handler;\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.security.KeyManagementException;\n-import java.security.KeyStoreException;\n-import java.security.NoSuchAlgorithmException;\n import java.util.List;\n import java.util.Optional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4NzE2NA==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463487164", "bodyText": "I'd prefer to put all headers key string constants in a different class, example", "author": "omarsmak", "createdAt": "2020-07-31T08:50:33Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.component;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.oaipmh.handler.Harvester;\n+import org.apache.camel.oaipmh.handler.ProducerResponseHandler;\n+import org.apache.camel.support.DefaultProducer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The OAIPMH producer.\n+ */\n+public class OAIPMHProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHProducer.class);\n+    private OAIPMHEndpoint endpoint;\n+\n+    public OAIPMHProducer(OAIPMHEndpoint endpoint) {\n+        super(endpoint);\n+        this.endpoint = endpoint;\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Harvester harvester = new Harvester(\n+                new ProducerResponseHandler(),\n+                endpoint.getUrl(),\n+                endpoint.getVerb(),\n+                endpoint.getMetadataPrefix(),\n+                endpoint.getUntil(),\n+                endpoint.getFrom(),\n+                endpoint.getSet(),\n+                endpoint.getIdentitier());\n+        overrideHarvesterConfigs(exchange.getIn(), harvester);\n+        if (endpoint.isIgnoreSSLWarnings()) {\n+            harvester.getHttpClient().setIgnoreSSLWarnings(true);\n+        }\n+        List<String> synHarvest = harvester.synHarvest(endpoint.isOnlyFirst());\n+        exchange.getMessage().setBody(synHarvest);\n+        if (endpoint.isOnlyFirst() && harvester.getResumptionToken() != null) {\n+            exchange.getMessage().setHeader(\"CamelOaimphResumptionToken\", harvester.getResumptionToken());\n+        } else {\n+            exchange.getMessage().removeHeader(\"CamelOaimphResumptionToken\");\n+        }\n+    }\n+\n+    private void overrideHarvesterConfigs(Message msg, Harvester harvester) {\n+        String header = msg.getHeader(\"CamelOaimphUrl\", String.class);", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java\nindex b523a07200e..1ce48df6a46 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java\n\n@@ -18,12 +18,15 @@ package org.apache.camel.oaipmh.component;\n \n import java.net.URI;\n import java.util.List;\n+import java.util.function.Consumer;\n \n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n+import org.apache.camel.oaipmh.component.model.OAIPMHConstants;\n import org.apache.camel.oaipmh.handler.Harvester;\n import org.apache.camel.oaipmh.handler.ProducerResponseHandler;\n import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.util.ObjectHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NTc2NA==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463495764", "bodyText": "I think these kind of validations, could be simplified into a function that takes lambda as argument, example:\nprivate <T> void checkAndSetConfigs(final Message message, final String key, final Consumer<T> fn, final Class<T> type) {\n        final T header = message.getHeader(key, type);\n        if (!ObjectHelper.isEmpty(header)) {\n            fn.accept(header);\n        }\n    }\n\nto call it:\ncheckAndSetConfigs(msg, \"CamelOaimphVerb\", harvester::setVerb, String.class);\n\nFor the URI, you may need to add the a wrapper from URI to String somewhere that creates URI.create(header)", "author": "omarsmak", "createdAt": "2020-07-31T09:08:12Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.component;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.oaipmh.handler.Harvester;\n+import org.apache.camel.oaipmh.handler.ProducerResponseHandler;\n+import org.apache.camel.support.DefaultProducer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The OAIPMH producer.\n+ */\n+public class OAIPMHProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHProducer.class);\n+    private OAIPMHEndpoint endpoint;\n+\n+    public OAIPMHProducer(OAIPMHEndpoint endpoint) {\n+        super(endpoint);\n+        this.endpoint = endpoint;\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Harvester harvester = new Harvester(\n+                new ProducerResponseHandler(),\n+                endpoint.getUrl(),\n+                endpoint.getVerb(),\n+                endpoint.getMetadataPrefix(),\n+                endpoint.getUntil(),\n+                endpoint.getFrom(),\n+                endpoint.getSet(),\n+                endpoint.getIdentitier());\n+        overrideHarvesterConfigs(exchange.getIn(), harvester);\n+        if (endpoint.isIgnoreSSLWarnings()) {\n+            harvester.getHttpClient().setIgnoreSSLWarnings(true);\n+        }\n+        List<String> synHarvest = harvester.synHarvest(endpoint.isOnlyFirst());\n+        exchange.getMessage().setBody(synHarvest);\n+        if (endpoint.isOnlyFirst() && harvester.getResumptionToken() != null) {\n+            exchange.getMessage().setHeader(\"CamelOaimphResumptionToken\", harvester.getResumptionToken());\n+        } else {\n+            exchange.getMessage().removeHeader(\"CamelOaimphResumptionToken\");\n+        }\n+    }\n+\n+    private void overrideHarvesterConfigs(Message msg, Harvester harvester) {\n+        String header = msg.getHeader(\"CamelOaimphUrl\", String.class);\n+        if (header != null) {\n+            harvester.setBaseURI(URI.create(header));\n+        }\n+\n+        header = msg.getHeader(\"CamelOaimphEndpointUrl\", String.class);\n+        if (header != null) {", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java\nindex b523a07200e..1ce48df6a46 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java\n\n@@ -18,12 +18,15 @@ package org.apache.camel.oaipmh.component;\n \n import java.net.URI;\n import java.util.List;\n+import java.util.function.Consumer;\n \n import org.apache.camel.Exchange;\n import org.apache.camel.Message;\n+import org.apache.camel.oaipmh.component.model.OAIPMHConstants;\n import org.apache.camel.oaipmh.handler.Harvester;\n import org.apache.camel.oaipmh.handler.ProducerResponseHandler;\n import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.util.ObjectHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NzMyMw==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463497323", "bodyText": "You can replace it with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                   try (CloseableHttpClient httpclient = getCloseableHttpClient()) {", "author": "omarsmak", "createdAt": "2020-07-31T09:11:13Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\nindex 7dd340b459e..720b6289541 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n\n@@ -20,6 +20,9 @@ import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.HttpResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5ODQyNQ==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463498425", "bodyText": "I am just wondering, do we need to check that we really have two params split with =?", "author": "omarsmak", "createdAt": "2020-07-31T09:13:36Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {\n+\n+            URIBuilder builder = new URIBuilder();\n+            builder.setScheme(baseURI.getScheme())\n+                    .setHost(baseURI.getHost())\n+                    .setPort(baseURI.getPort())\n+                    .setPath(baseURI.getPath())\n+                    .addParameter(\"verb\", verb);\n+\n+            if (baseURI.getQuery() != null && !baseURI.getQuery().isEmpty()) {\n+                for (String param : baseURI.getQuery().split(\"&\")) {\n+                    builder.addParameter(param.split(\"=\")[0], param.split(\"=\")[1]);", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\nindex 7dd340b459e..720b6289541 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n\n@@ -20,6 +20,9 @@ import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.HttpResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5OTIxMg==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463499212", "bodyText": "unnecessary comments here", "author": "omarsmak", "createdAt": "2020-07-31T09:15:12Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {\n+\n+            URIBuilder builder = new URIBuilder();\n+            builder.setScheme(baseURI.getScheme())\n+                    .setHost(baseURI.getHost())\n+                    .setPort(baseURI.getPort())\n+                    .setPath(baseURI.getPath())\n+                    .addParameter(\"verb\", verb);\n+\n+            if (baseURI.getQuery() != null && !baseURI.getQuery().isEmpty()) {\n+                for (String param : baseURI.getQuery().split(\"&\")) {\n+                    builder.addParameter(param.split(\"=\")[0], param.split(\"=\")[1]);\n+                }\n+            }\n+\n+            if (identifier != null) {\n+                builder.addParameter(\"identifier\", identifier);\n+            }\n+\n+            if (token != null) {\n+                builder.addParameter(\"resumptionToken\", token);\n+            } else {\n+                if (metadataPrefix != null) {\n+                    builder.addParameter(\"metadataPrefix\", metadataPrefix);\n+                }\n+                if (set != null) {\n+                    builder.addParameter(\"set\", set);\n+                }\n+                if (from != null) {\n+                    builder.addParameter(\"from\", from);\n+                }\n+                if (until != null) {\n+                    builder.addParameter(\"until\", until);\n+                }\n+            }\n+\n+            HttpGet httpget = new HttpGet(builder.build());\n+\n+            RequestLine requestLine = httpget.getRequestLine();\n+\n+            LOG.info(\"Executing request: {} \", requestLine);\n+\n+            // Create a custom response handler\n+            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {\n+\n+                @Override\n+                public String handleResponse(final HttpResponse response) throws IOException {\n+                    int status = response.getStatusLine().getStatusCode();\n+                    if (status >= 200 && status < 300) {\n+                        HttpEntity entity = response.getEntity();\n+                        if (entity == null) {\n+                            throw new IOException(\"No response received\");\n+                        }\n+                        return EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n+                    } else {\n+                        throw new ClientProtocolException(\"Unexpected response status: \" + status);\n+                    }\n+                }\n+\n+            };\n+            String responseBody = httpclient.execute(httpget, responseHandler);\n+\n+//            String uri = requestLine.getUri();", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\nindex 7dd340b459e..720b6289541 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n\n@@ -20,6 +20,9 @@ import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.HttpResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMDIzMA==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463500230", "bodyText": "If you are catching the exception and then throw it again, makes no sense. However, I don't feel comfortable of throwing generic Exception here, please be specific on which exception you want to throw here", "author": "omarsmak", "createdAt": "2020-07-31T09:17:19Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {\n+\n+            URIBuilder builder = new URIBuilder();\n+            builder.setScheme(baseURI.getScheme())\n+                    .setHost(baseURI.getHost())\n+                    .setPort(baseURI.getPort())\n+                    .setPath(baseURI.getPath())\n+                    .addParameter(\"verb\", verb);\n+\n+            if (baseURI.getQuery() != null && !baseURI.getQuery().isEmpty()) {\n+                for (String param : baseURI.getQuery().split(\"&\")) {\n+                    builder.addParameter(param.split(\"=\")[0], param.split(\"=\")[1]);\n+                }\n+            }\n+\n+            if (identifier != null) {\n+                builder.addParameter(\"identifier\", identifier);\n+            }\n+\n+            if (token != null) {\n+                builder.addParameter(\"resumptionToken\", token);\n+            } else {\n+                if (metadataPrefix != null) {\n+                    builder.addParameter(\"metadataPrefix\", metadataPrefix);\n+                }\n+                if (set != null) {\n+                    builder.addParameter(\"set\", set);\n+                }\n+                if (from != null) {\n+                    builder.addParameter(\"from\", from);\n+                }\n+                if (until != null) {\n+                    builder.addParameter(\"until\", until);\n+                }\n+            }\n+\n+            HttpGet httpget = new HttpGet(builder.build());\n+\n+            RequestLine requestLine = httpget.getRequestLine();\n+\n+            LOG.info(\"Executing request: {} \", requestLine);\n+\n+            // Create a custom response handler\n+            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {\n+\n+                @Override\n+                public String handleResponse(final HttpResponse response) throws IOException {\n+                    int status = response.getStatusLine().getStatusCode();\n+                    if (status >= 200 && status < 300) {\n+                        HttpEntity entity = response.getEntity();\n+                        if (entity == null) {\n+                            throw new IOException(\"No response received\");\n+                        }\n+                        return EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n+                    } else {\n+                        throw new ClientProtocolException(\"Unexpected response status: \" + status);\n+                    }\n+                }\n+\n+            };\n+            String responseBody = httpclient.execute(httpget, responseHandler);\n+\n+//            String uri = requestLine.getUri();\n+//            System.out.println(uri);\n+//            String sha256Hex = DigestUtils.sha256Hex(uri.split(\".org\")[1]);\n+//            System.out.println (\"File:\"+sha256Hex);\n+//            BufferedWriter writer = new BufferedWriter(new FileWriter(\"/tmp/tests/test4/\" + sha256Hex + \".xml\"));\n+//            writer.write(responseBody);\n+//            writer.close();\n+            LOG.debug(\"Response received: {}\", responseBody);\n+\n+            return responseBody;\n+        } finally {\n+            httpclient.close();\n+        }\n+    }\n+\n+    protected CloseableHttpClient getCloseableHttpClient() throws Exception {\n+        if (isIgnoreSSLWarnings()) {\n+            try {\n+                SSLContextBuilder builder = new SSLContextBuilder();\n+                builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());\n+                SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(\n+                        builder.build());\n+                return HttpClients.custom().setSSLSocketFactory(\n+                        sslsf).build();\n+            } catch (Exception ex) {", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\nindex 7dd340b459e..720b6289541 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n\n@@ -20,6 +20,9 @@ import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.HttpResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMDcwMg==", "url": "https://github.com/apache/camel/pull/3934#discussion_r463500702", "bodyText": "This looks deprecated.", "author": "omarsmak", "createdAt": "2020-07-31T09:18:12Z", "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {\n+\n+            URIBuilder builder = new URIBuilder();\n+            builder.setScheme(baseURI.getScheme())\n+                    .setHost(baseURI.getHost())\n+                    .setPort(baseURI.getPort())\n+                    .setPath(baseURI.getPath())\n+                    .addParameter(\"verb\", verb);\n+\n+            if (baseURI.getQuery() != null && !baseURI.getQuery().isEmpty()) {\n+                for (String param : baseURI.getQuery().split(\"&\")) {\n+                    builder.addParameter(param.split(\"=\")[0], param.split(\"=\")[1]);\n+                }\n+            }\n+\n+            if (identifier != null) {\n+                builder.addParameter(\"identifier\", identifier);\n+            }\n+\n+            if (token != null) {\n+                builder.addParameter(\"resumptionToken\", token);\n+            } else {\n+                if (metadataPrefix != null) {\n+                    builder.addParameter(\"metadataPrefix\", metadataPrefix);\n+                }\n+                if (set != null) {\n+                    builder.addParameter(\"set\", set);\n+                }\n+                if (from != null) {\n+                    builder.addParameter(\"from\", from);\n+                }\n+                if (until != null) {\n+                    builder.addParameter(\"until\", until);\n+                }\n+            }\n+\n+            HttpGet httpget = new HttpGet(builder.build());\n+\n+            RequestLine requestLine = httpget.getRequestLine();\n+\n+            LOG.info(\"Executing request: {} \", requestLine);\n+\n+            // Create a custom response handler\n+            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {\n+\n+                @Override\n+                public String handleResponse(final HttpResponse response) throws IOException {\n+                    int status = response.getStatusLine().getStatusCode();\n+                    if (status >= 200 && status < 300) {\n+                        HttpEntity entity = response.getEntity();\n+                        if (entity == null) {\n+                            throw new IOException(\"No response received\");\n+                        }\n+                        return EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n+                    } else {\n+                        throw new ClientProtocolException(\"Unexpected response status: \" + status);\n+                    }\n+                }\n+\n+            };\n+            String responseBody = httpclient.execute(httpget, responseHandler);\n+\n+//            String uri = requestLine.getUri();\n+//            System.out.println(uri);\n+//            String sha256Hex = DigestUtils.sha256Hex(uri.split(\".org\")[1]);\n+//            System.out.println (\"File:\"+sha256Hex);\n+//            BufferedWriter writer = new BufferedWriter(new FileWriter(\"/tmp/tests/test4/\" + sha256Hex + \".xml\"));\n+//            writer.write(responseBody);\n+//            writer.close();\n+            LOG.debug(\"Response received: {}\", responseBody);\n+\n+            return responseBody;\n+        } finally {\n+            httpclient.close();\n+        }\n+    }\n+\n+    protected CloseableHttpClient getCloseableHttpClient() throws Exception {\n+        if (isIgnoreSSLWarnings()) {\n+            try {\n+                SSLContextBuilder builder = new SSLContextBuilder();", "originalCommit": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "305b642f123c96b4523b89b249ea7df5357e8061", "chunk": "diff --git a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\nindex 7dd340b459e..720b6289541 100644\n--- a/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n+++ b/components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java\n\n@@ -20,6 +20,9 @@ import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n \n import org.apache.http.HttpEntity;\n import org.apache.http.HttpResponse;\n"}}, {"oid": "305b642f123c96b4523b89b249ea7df5357e8061", "url": "https://github.com/apache/camel/commit/305b642f123c96b4523b89b249ea7df5357e8061", "message": "Improvements:\n\n- Remove unnecessary comments.\n- Add constants file.\n- Remove deprecated code.", "committedDate": "2020-08-07T04:59:24Z", "type": "commit"}]}