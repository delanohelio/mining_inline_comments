{"pr_number": 4086, "pr_title": "Inprove PropertyBindingSupport", "pr_createdAt": "2020-08-12T08:22:13Z", "pr_url": "https://github.com/apache/camel/pull/4086", "timeline": [{"oid": "5623af6a5b447e6da714b3a4907d8cc692231dea", "url": "https://github.com/apache/camel/commit/5623af6a5b447e6da714b3a4907d8cc692231dea", "message": "Inprove PropertyBindingSupport (CAMEL-15396, CAMEL-15397)\n\nThis PR adds support for arrays in PropertyBindingSupport and fix issues when binding to list when properties have gaps.\n\nSee tests in:\n- PropertyBindingSupportArrayTest\n- PropertyBindingSupportListTest", "committedDate": "2020-08-12T08:32:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5Nzc2OA==", "url": "https://github.com/apache/camel/pull/4086#discussion_r469097768", "bodyText": "Looks a bit copy/paste mistake, as this is Array and not Map", "author": "davsclaus", "createdAt": "2020-08-12T08:35:55Z", "path": "core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java", "diffHunk": "@@ -804,6 +826,38 @@ private static Object getOrElseProperty(CamelContext context, Object target, Str\n                     answer = list.get(list.size() - 1);\n                 }\n             }\n+        } else if (type != null && type.isArray() && lookupKey != null) {\n+            int idx = Integer.parseInt(lookupKey);\n+            int size = answer != null ? Array.getLength(answer) : 0;\n+            if (idx >= size) {\n+                answer = answer != null ? Arrays.copyOf((Object[]) answer, idx + 1) : Array.newInstance(Object.class, idx + 1);\n+            }\n+\n+            Object result = Array.get(answer, idx);\n+            if (result == null) {\n+                result = context.getInjector().newInstance(type.getComponentType());\n+                Array.set(answer, idx, result);\n+            }\n+\n+            if (idx >= size) {\n+                // replace array\n+                if (configurer != null) {\n+                    configurer.configure(context, target, key, answer, true);\n+                } else {\n+                    // fallback to reflection\n+                    boolean hit;\n+                    try {\n+                        hit = IntrospectionSupport.setProperty(context.getTypeConverter(), target, key, answer);\n+                    } catch (Exception e) {\n+                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as a Map because target bean has no setter method for the Map\");", "originalCommit": "5623af6a5b447e6da714b3a4907d8cc692231dea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "chunk": "diff --git a/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java b/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\nindex b8735626501..5a8308bddf3 100644\n--- a/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\n+++ b/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\n\n@@ -849,10 +850,10 @@ public final class PropertyBindingSupport {\n                     try {\n                         hit = IntrospectionSupport.setProperty(context.getTypeConverter(), target, key, answer);\n                     } catch (Exception e) {\n-                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as a Map because target bean has no setter method for the Map\");\n+                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as an array because target bean has no setter method for the array\");\n                     }\n                     if (!hit) {\n-                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as a Map because target bean has no setter method for the Map\");\n+                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as an array because target bean has no setter method for the array\");\n                     }\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NzgyNQ==", "url": "https://github.com/apache/camel/pull/4086#discussion_r469097825", "bodyText": "Looks a bit copy/paste mistake, as this is Array and not Map", "author": "davsclaus", "createdAt": "2020-08-12T08:36:02Z", "path": "core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java", "diffHunk": "@@ -804,6 +826,38 @@ private static Object getOrElseProperty(CamelContext context, Object target, Str\n                     answer = list.get(list.size() - 1);\n                 }\n             }\n+        } else if (type != null && type.isArray() && lookupKey != null) {\n+            int idx = Integer.parseInt(lookupKey);\n+            int size = answer != null ? Array.getLength(answer) : 0;\n+            if (idx >= size) {\n+                answer = answer != null ? Arrays.copyOf((Object[]) answer, idx + 1) : Array.newInstance(Object.class, idx + 1);\n+            }\n+\n+            Object result = Array.get(answer, idx);\n+            if (result == null) {\n+                result = context.getInjector().newInstance(type.getComponentType());\n+                Array.set(answer, idx, result);\n+            }\n+\n+            if (idx >= size) {\n+                // replace array\n+                if (configurer != null) {\n+                    configurer.configure(context, target, key, answer, true);\n+                } else {\n+                    // fallback to reflection\n+                    boolean hit;\n+                    try {\n+                        hit = IntrospectionSupport.setProperty(context.getTypeConverter(), target, key, answer);\n+                    } catch (Exception e) {\n+                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as a Map because target bean has no setter method for the Map\");\n+                    }\n+                    if (!hit) {\n+                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as a Map because target bean has no setter method for the Map\");", "originalCommit": "5623af6a5b447e6da714b3a4907d8cc692231dea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "chunk": "diff --git a/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java b/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\nindex b8735626501..5a8308bddf3 100644\n--- a/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\n+++ b/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\n\n@@ -849,10 +850,10 @@ public final class PropertyBindingSupport {\n                     try {\n                         hit = IntrospectionSupport.setProperty(context.getTypeConverter(), target, key, answer);\n                     } catch (Exception e) {\n-                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as a Map because target bean has no setter method for the Map\");\n+                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as an array because target bean has no setter method for the array\");\n                     }\n                     if (!hit) {\n-                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as a Map because target bean has no setter method for the Map\");\n+                        throw new IllegalArgumentException(\"Cannot set property: \" + key + \" as an array because target bean has no setter method for the array\");\n                     }\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5OTE0Mw==", "url": "https://github.com/apache/camel/pull/4086#discussion_r469099143", "bodyText": "Maybe this can be done later as you override type in case answer != null and other bits. So wonder if this can be moved down, and to get the type only if you have not computed it", "author": "davsclaus", "createdAt": "2020-08-12T08:38:22Z", "path": "core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java", "diffHunk": "@@ -778,17 +781,36 @@ private static Object getOrElseProperty(CamelContext context, Object target, Str\n \n         // use configurer if possible\n         Object answer = null;\n-        GeneratedPropertyConfigurer configurer = context.adapt(ExtendedCamelContext.class).getConfigurerResolver().resolvePropertyConfigurer(target.getClass().getSimpleName(), context);\n+        Class<?> type = null;\n+\n+        GeneratedPropertyConfigurer configurer = PropertyConfigurerHelper.resolvePropertyConfigurer(context, target);\n         if (configurer instanceof PropertyConfigurerGetter) {\n-            answer = ((PropertyConfigurerGetter) configurer).getOptionValue(target, key, ignoreCase);\n+            type = (Class<?>)((PropertyConfigurerGetter)configurer).getAllOptions(target).get(key);", "originalCommit": "5623af6a5b447e6da714b3a4907d8cc692231dea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "chunk": "diff --git a/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java b/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\nindex b8735626501..5a8308bddf3 100644\n--- a/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\n+++ b/core/camel-support/src/main/java/org/apache/camel/support/PropertyBindingSupport.java\n\n@@ -785,7 +785,6 @@ public final class PropertyBindingSupport {\n \n         GeneratedPropertyConfigurer configurer = PropertyConfigurerHelper.resolvePropertyConfigurer(context, target);\n         if (configurer instanceof PropertyConfigurerGetter) {\n-            type = (Class<?>)((PropertyConfigurerGetter)configurer).getAllOptions(target).get(key);\n             answer = ((PropertyConfigurerGetter)configurer).getOptionValue(target, key, ignoreCase);\n             if (answer == null) {\n                 answer = defaultValue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5OTc1MA==", "url": "https://github.com/apache/camel/pull/4086#discussion_r469099750", "bodyText": "Wrong exception message Map -> Array", "author": "davsclaus", "createdAt": "2020-08-12T08:39:31Z", "path": "core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java", "diffHunk": "@@ -646,11 +649,43 @@ public static boolean setProperty(CamelContext context, TypeConverter typeConver\n                     value = CamelContextHelper.lookup(context, s);\n                 }\n                 if (isNotEmpty(lookupKey)) {\n-                    int idx = Integer.valueOf(lookupKey);\n-                    list.add(idx, value);\n+                    int idx = Integer.parseInt(lookupKey);\n+                    if (idx < list.size()) {\n+                        list.set(idx, value);\n+                    } else if (idx == list.size()) {\n+                        list.add(value);\n+                    } else {\n+                        if (list instanceof ArrayList) {\n+                            ((ArrayList) list).ensureCapacity(idx + 1);\n+                        }\n+                        while (list.size() < idx) {\n+                            list.add(null);\n+                        }\n+                        list.add(idx, value);\n+                    }\n                 } else {\n                     list.add(value);\n                 }\n+                return true;\n+            } else if (obj.getClass().isArray() && lookupKey != null) {\n+                if (context != null && refName != null && value == null) {\n+                    String s = StringHelper.replaceAll(refName, \"#\", \"\");\n+                    value = CamelContextHelper.lookup(context, s);\n+                }\n+                int idx = Integer.parseInt(lookupKey);\n+                int size = Array.getLength(obj);\n+                if (idx >= size) {\n+                    obj = Arrays.copyOf((Object[])obj, idx + 1);\n+\n+                    // replace array\n+                    boolean hit = IntrospectionSupport.setProperty(context, target, key, obj);\n+                    if (!hit) {\n+                        throw new IllegalArgumentException(\"Cannot set property: \" + name + \" as a Map because target bean has no setter method for the Map\");", "originalCommit": "5623af6a5b447e6da714b3a4907d8cc692231dea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "chunk": "diff --git a/core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java b/core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java\nindex 52988e86ed1..5dcefabd60c 100644\n--- a/core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java\n+++ b/core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java\n\n@@ -655,6 +655,12 @@ public final class IntrospectionSupport {\n                     } else if (idx == list.size()) {\n                         list.add(value);\n                     } else {\n+                        // If the list implementation is based on an array, we\n+                        // can increase tha capacity to the required value to\n+                        // avoid potential re-allocation weh invoking List::add.\n+                        //\n+                        // Note that ArrayList is the default List impl that\n+                        // is automatically created if the property is null.\n                         if (list instanceof ArrayList) {\n                             ((ArrayList) list).ensureCapacity(idx + 1);\n                         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMDEwNw==", "url": "https://github.com/apache/camel/pull/4086#discussion_r469100107", "bodyText": "Maybe add a code comment why you do this, eg to expand the array when there is gaps in the index", "author": "davsclaus", "createdAt": "2020-08-12T08:40:04Z", "path": "core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java", "diffHunk": "@@ -646,11 +649,43 @@ public static boolean setProperty(CamelContext context, TypeConverter typeConver\n                     value = CamelContextHelper.lookup(context, s);\n                 }\n                 if (isNotEmpty(lookupKey)) {\n-                    int idx = Integer.valueOf(lookupKey);\n-                    list.add(idx, value);\n+                    int idx = Integer.parseInt(lookupKey);\n+                    if (idx < list.size()) {\n+                        list.set(idx, value);\n+                    } else if (idx == list.size()) {\n+                        list.add(value);\n+                    } else {\n+                        if (list instanceof ArrayList) {", "originalCommit": "5623af6a5b447e6da714b3a4907d8cc692231dea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "chunk": "diff --git a/core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java b/core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java\nindex 52988e86ed1..5dcefabd60c 100644\n--- a/core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java\n+++ b/core/camel-support/src/main/java/org/apache/camel/support/IntrospectionSupport.java\n\n@@ -655,6 +655,12 @@ public final class IntrospectionSupport {\n                     } else if (idx == list.size()) {\n                         list.add(value);\n                     } else {\n+                        // If the list implementation is based on an array, we\n+                        // can increase tha capacity to the required value to\n+                        // avoid potential re-allocation weh invoking List::add.\n+                        //\n+                        // Note that ArrayList is the default List impl that\n+                        // is automatically created if the property is null.\n                         if (list instanceof ArrayList) {\n                             ((ArrayList) list).ensureCapacity(idx + 1);\n                         }\n"}}, {"oid": "e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "url": "https://github.com/apache/camel/commit/e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "message": "Inprove PropertyBindingSupport (CAMEL-15396, CAMEL-15397)\n\nThis PR adds support for arrays in PropertyBindingSupport and fix issues when binding to list when properties have gaps.\n\nSee tests in:\n- PropertyBindingSupportArrayTest\n- PropertyBindingSupportListTest", "committedDate": "2020-08-12T09:01:27Z", "type": "commit"}, {"oid": "e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "url": "https://github.com/apache/camel/commit/e784dd5c5d2a44e6141c731442dceb7fc4c0b082", "message": "Inprove PropertyBindingSupport (CAMEL-15396, CAMEL-15397)\n\nThis PR adds support for arrays in PropertyBindingSupport and fix issues when binding to list when properties have gaps.\n\nSee tests in:\n- PropertyBindingSupportArrayTest\n- PropertyBindingSupportListTest", "committedDate": "2020-08-12T09:01:27Z", "type": "forcePushed"}]}