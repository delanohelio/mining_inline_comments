{"pr_number": 2659, "pr_title": "Add `Server.blockUntilShutdown()`", "pr_createdAt": "2020-04-09T16:23:17Z", "pr_url": "https://github.com/line/armeria/pull/2659", "timeline": [{"oid": "7af0d4aaa0514670e4b9263605ef6adab0064699", "url": "https://github.com/line/armeria/commit/7af0d4aaa0514670e4b9263605ef6adab0064699", "message": "added build unitl shutdown method", "committedDate": "2020-04-09T16:16:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg==", "url": "https://github.com/line/armeria/pull/2659#discussion_r407059152", "bodyText": "I think we don't need to return an object here. How about making the return type void?", "author": "ikhoon", "createdAt": "2020-04-11T12:38:08Z", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Returns the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public Object blockUntilShutdown() throws Exception {", "originalCommit": "7af0d4aaa0514670e4b9263605ef6adab0064699", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTk5MA==", "url": "https://github.com/line/armeria/pull/2659#discussion_r407059990", "bodyText": "It would be nice to add a test that registers a ServerListener to the test server and could check serverStopped(...) serverStopping(...) was invoked.", "author": "ikhoon", "createdAt": "2020-04-11T12:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMzU4Mg==", "url": "https://github.com/line/armeria/pull/2659#discussion_r409333582", "bodyText": "Hi,\nI changed the method, but I'm having trouble with the test. I don't know how to check if server stop has been invoked. Can you help? Thanks!", "author": "Charliocat", "createdAt": "2020-04-16T07:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjkxOA==", "url": "https://github.com/line/armeria/pull/2659#discussion_r410026918", "bodyText": "You could do this:\nassertThat(server.activePorts()).isEmpty();", "author": "trustin", "createdAt": "2020-04-17T06:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyOTI3NA==", "url": "https://github.com/line/armeria/pull/2659#discussion_r410029274", "bodyText": "You can test the method like the following.\n@Test\nvoid testShutdownServer() {\n    final AtomicBoolean stopped = new AtomicBoolean();\n    final Server server = Server.builder()\n                                .service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK))\n                                .serverListener(new ServerListenerAdapter() {\n                                    @Override\n                                    public void serverStopping(Server server) throws Exception {\n                                        stopped.set(true);\n                                    }\n                                })\n                                .build();\n    server.start().join();\n    CommonPools.blockingTaskExecutor().schedule(server::close, 1, TimeUnit.SECONDS);\n    server.whenClosed().join(); // replace with new method\n    assertThat(stopped).isTrue();\n}", "author": "ikhoon", "createdAt": "2020-04-17T07:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4NzUyNw==", "url": "https://github.com/line/armeria/pull/2659#discussion_r410087527", "bodyText": "I see.. I was going for a ServerTest and a ThreadRecordingServerListener as a listener, thanks!", "author": "Charliocat", "createdAt": "2020-04-17T08:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ac1dcc252fc0578afd9da83b4ec706de72563a71", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/Server.java b/core/src/main/java/com/linecorp/armeria/server/Server.java\nindex 97bbc890d9..74c69a0237 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/Server.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/Server.java\n\n@@ -329,11 +329,11 @@ public final class Server implements ListenableAsyncCloseable {\n     }\n \n     /**\n-     * Returns the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * Waits until the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n      * {@link #closeAsync()} operation is completed.\n      */\n-    public Object blockUntilShutdown() throws Exception {\n-        return whenClosed().get();\n+    public void blockUntilShutdown() throws Exception {\n+        whenClosed().get();\n     }\n \n     /**\n"}}, {"oid": "ac1dcc252fc0578afd9da83b4ec706de72563a71", "url": "https://github.com/line/armeria/commit/ac1dcc252fc0578afd9da83b4ec706de72563a71", "message": "return void and new test", "committedDate": "2020-04-17T08:57:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxMDAzNw==", "url": "https://github.com/line/armeria/pull/2659#discussion_r411210037", "bodyText": "Could you use more specific throws clause? e.g. throws InterruptedException, ...", "author": "trustin", "createdAt": "2020-04-20T08:57:47Z", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Waits until the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public void blockUntilShutdown() throws Exception {", "originalCommit": "ac1dcc252fc0578afd9da83b4ec706de72563a71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32af1c7a83d8a8e7c7f6c3808f49dd8896382a72", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/Server.java b/core/src/main/java/com/linecorp/armeria/server/Server.java\nindex 74c69a0237..2863ba921f 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/Server.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/Server.java\n\n@@ -332,7 +333,7 @@ public final class Server implements ListenableAsyncCloseable {\n      * Waits until the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n      * {@link #closeAsync()} operation is completed.\n      */\n-    public void blockUntilShutdown() throws Exception {\n+    public void blockUntilShutdown() throws ExecutionException, InterruptedException {\n         whenClosed().get();\n     }\n \n"}}, {"oid": "32af1c7a83d8a8e7c7f6c3808f49dd8896382a72", "url": "https://github.com/line/armeria/commit/32af1c7a83d8a8e7c7f6c3808f49dd8896382a72", "message": "change to specific exceptions", "committedDate": "2020-04-20T17:53:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwNTkxMw==", "url": "https://github.com/line/armeria/pull/2659#discussion_r412605913", "bodyText": "After thinking a little bit, how about catching ExecutionException and turning it into CompletionException? i.e.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void blockUntilShutdown() throws ExecutionException, InterruptedException {\n          \n          \n            \n                    whenClosed().get();\n          \n          \n            \n                }\n          \n          \n            \n                public void blockUntilShutdown() throws InterruptedException {\n          \n          \n            \n                    try {\n          \n          \n            \n                        whenClosed().get();\n          \n          \n            \n                    } catch (ExecutionException e) {\n          \n          \n            \n                        throw new CompletionException(e.toString(), Exceptions.peel(e));\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\n.. because we do not usually use ExecutionException in our API.", "author": "trustin", "createdAt": "2020-04-22T01:39:09Z", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -332,7 +333,7 @@ public int numConnections() {\n      * Waits until the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n      * {@link #closeAsync()} operation is completed.\n      */\n-    public void blockUntilShutdown() throws Exception {\n+    public void blockUntilShutdown() throws ExecutionException, InterruptedException {\n         whenClosed().get();\n     }", "originalCommit": "32af1c7a83d8a8e7c7f6c3808f49dd8896382a72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5Nzc0OQ==", "url": "https://github.com/line/armeria/pull/2659#discussion_r413297749", "bodyText": "Yes I can change that. It makes sense to me.", "author": "Charliocat", "createdAt": "2020-04-22T20:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwNTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "b0e95866d82ad7049477e0001088248a558a7fa9", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/Server.java b/core/src/main/java/com/linecorp/armeria/server/Server.java\nindex 2863ba921f..6a602ac6b4 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/Server.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/Server.java\n\n@@ -332,9 +334,15 @@ public final class Server implements ListenableAsyncCloseable {\n     /**\n      * Waits until the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n      * {@link #closeAsync()} operation is completed.\n+     *\n+     * @throws InterruptedException\n      */\n-    public void blockUntilShutdown() throws ExecutionException, InterruptedException {\n-        whenClosed().get();\n+    public void blockUntilShutdown() throws InterruptedException {\n+        try {\n+            whenClosed().get();\n+        } catch (ExecutionException e) {\n+            throw new CompletionException(e.toString(), Exceptions.peel(e));\n+        }\n     }\n \n     /**\n"}}, {"oid": "b0e95866d82ad7049477e0001088248a558a7fa9", "url": "https://github.com/line/armeria/commit/b0e95866d82ad7049477e0001088248a558a7fa9", "message": "wrapped ExecutionException to CompletionException", "committedDate": "2020-04-22T20:25:38Z", "type": "commit"}, {"oid": "a51ece4add2c5c81db4dc0d2d160920bc598cb3d", "url": "https://github.com/line/armeria/commit/a51ece4add2c5c81db4dc0d2d160920bc598cb3d", "message": "Checkstyle", "committedDate": "2020-04-24T03:28:28Z", "type": "commit"}]}