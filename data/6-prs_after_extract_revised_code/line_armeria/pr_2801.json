{"pr_number": 2801, "pr_title": "Complete session after SessionProtocol and ProxyConnectionEvent are t\u2026", "pr_createdAt": "2020-06-16T07:43:21Z", "pr_url": "https://github.com/line/armeria/pull/2801", "timeline": [{"oid": "0c703e3b34edb7bb0e60a0e7a6849e6c36d195c8", "url": "https://github.com/line/armeria/commit/0c703e3b34edb7bb0e60a0e7a6849e6c36d195c8", "message": "Complete session after SessionProtocol and ProxyConnectionEvent are triggered\nMotivation:\nWhen we use client-side proxy, we use the channel as soon as it's established to the proxy.\nHowever, the writing to the channel is pending until the proxy connects to the final destination.\nThis causes a problem especially the distance is far away between the proxy and the final destionation because\nit triggers `WriteTimeoutException`.\n\nModification:\n- Complete sesessin after `SessionProtocol` event and `ProxyConnectionEvent` are triggered.\n\nResult:\n- Close #2606\n- You no longer see `WriteTimeoutException` due to the pending write when using client-side proxy.", "committedDate": "2020-06-16T07:42:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMjU3MQ==", "url": "https://github.com/line/armeria/pull/2801#discussion_r440712571", "bodyText": "Could you add some comments about what this sentence does? e.g. why we block the event loop", "author": "trustin", "createdAt": "2020-06-16T09:25:30Z", "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -546,6 +544,17 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) thro\n         }\n     }\n \n+    private static final class SleepHandler extends ChannelInboundHandlerAdapter {\n+\n+        @Override\n+        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+            if (evt instanceof ProxySuccessEvent) {\n+                Thread.sleep(Flags.defaultWriteTimeoutMillis());", "originalCommit": "0c703e3b34edb7bb0e60a0e7a6849e6c36d195c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNDg1MQ==", "url": "https://github.com/line/armeria/pull/2801#discussion_r441304851", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-17T06:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMjU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "be53ca72ce9a9b08f470f4c24361fe0869d777b0", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java b/core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java\nindex edc058cc11..c0a58acc0b 100644\n--- a/core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java\n\n@@ -549,6 +549,8 @@ public class ProxyClientIntegrationTest {\n         @Override\n         public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n             if (evt instanceof ProxySuccessEvent) {\n+                // Sleep as much as defaultWriteTimeoutMillis in order to make sure that the first writing to the channel\n+                // occurs after ProxySuccessEvent is triggered.\n                 Thread.sleep(Flags.defaultWriteTimeoutMillis());\n             }\n             super.userEventTriggered(ctx, evt);\n"}}, {"oid": "be53ca72ce9a9b08f470f4c24361fe0869d777b0", "url": "https://github.com/line/armeria/commit/be53ca72ce9a9b08f470f4c24361fe0869d777b0", "message": "Address the comment by @trustin", "committedDate": "2020-06-17T06:18:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNTI1OQ==", "url": "https://github.com/line/armeria/pull/2801#discussion_r441305259", "bodyText": "nit: Not strong here \ud83d\ude09\nuseProxyConnection = proxyConfig.proxyType() != ProxyType.DIRECT;", "author": "ikhoon", "createdAt": "2020-06-17T06:19:26Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -120,6 +123,16 @@\n         this.useHttp1Pipelining = useHttp1Pipelining;\n         this.idleTimeoutMillis = idleTimeoutMillis;\n         this.pingIntervalMillis = pingIntervalMillis;\n+\n+        switch (proxyConfig.proxyType()) {\n+            case SOCKS4:\n+            case SOCKS5:\n+            case CONNECT:\n+                useProxyConnection = true;\n+                break;\n+            default:\n+                useProxyConnection = false;\n+        }", "originalCommit": "0c703e3b34edb7bb0e60a0e7a6849e6c36d195c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNTQzNg==", "url": "https://github.com/line/armeria/pull/2801#discussion_r441305436", "bodyText": "better using explicit case and throwing something at default?", "author": "trustin", "createdAt": "2020-06-17T06:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNTI1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMzc4MA==", "url": "https://github.com/line/armeria/pull/2801#discussion_r441313780", "bodyText": "useProxyConnection = proxyConfig.proxyType() != ProxyType.DIRECT;\n\nA user might implement his own ProxyConfig and returns null for proxyType(). So we should check it explicitly.\n\nbetter using explicit case and throwing something at default?\n\nWe've already gone through the logic here which just leaves a warning log.\nI thought we don't have to leave logs twice. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-06-17T06:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNTI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a444888c9b498ca8295311dd9c70d3319aa7a413", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java b/core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java\nindex c310a3cb4c..7843881d62 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java\n\n@@ -125,13 +125,16 @@ final class HttpSessionHandler extends ChannelDuplexHandler implements HttpSessi\n         this.pingIntervalMillis = pingIntervalMillis;\n \n         switch (proxyConfig.proxyType()) {\n+            case DIRECT:\n+                useProxyConnection = false;\n+                break;\n             case SOCKS4:\n             case SOCKS5:\n             case CONNECT:\n                 useProxyConnection = true;\n                 break;\n             default:\n-                useProxyConnection = false;\n+                throw new Error(); // Should never reach here.\n         }\n     }\n \n"}}, {"oid": "1efba52df8bf16508761cc630259f7dd0798cd9a", "url": "https://github.com/line/armeria/commit/1efba52df8bf16508761cc630259f7dd0798cd9a", "message": "Add comment", "committedDate": "2020-06-17T06:21:17Z", "type": "commit"}, {"oid": "d0d163829c2cf000456ba04ce450bbb4f2714446", "url": "https://github.com/line/armeria/commit/d0d163829c2cf000456ba04ce450bbb4f2714446", "message": "Fix checkstyle", "committedDate": "2020-06-17T06:43:00Z", "type": "commit"}, {"oid": "a444888c9b498ca8295311dd9c70d3319aa7a413", "url": "https://github.com/line/armeria/commit/a444888c9b498ca8295311dd9c70d3319aa7a413", "message": "Throw error on default", "committedDate": "2020-06-17T07:06:44Z", "type": "commit"}]}