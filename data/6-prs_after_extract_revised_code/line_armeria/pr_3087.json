{"pr_number": 3087, "pr_title": "Enable to receive compressed request from client", "pr_createdAt": "2020-09-28T09:06:12Z", "pr_url": "https://github.com/line/armeria/pull/3087", "timeline": [{"oid": "b4e944a080fdd2621a38958b30d690887acd62a0", "url": "https://github.com/line/armeria/commit/b4e944a080fdd2621a38958b30d690887acd62a0", "message": "add package-info.java for new package", "committedDate": "2020-09-28T08:42:13Z", "type": "commit"}, {"oid": "87435ea0f849c942a4734add98c1f72fde8d7bc3", "url": "https://github.com/line/armeria/commit/87435ea0f849c942a4734add98c1f72fde8d7bc3", "message": "add HttpDecodedRequest for decoding gzipped(or deflate) content from client(similar to HttpDecodedResponse)", "committedDate": "2020-09-28T08:45:24Z", "type": "commit"}, {"oid": "3d82738daab993bb770cf633746dd7a2710137b7", "url": "https://github.com/line/armeria/commit/3d82738daab993bb770cf633746dd7a2710137b7", "message": "decorating service for decode gzipped(or deflate) content from client with using HttpDecodedRequest", "committedDate": "2020-09-28T08:46:17Z", "type": "commit"}, {"oid": "cb5bb9e74a70af7bab37f331fa285ee29a36488b", "url": "https://github.com/line/armeria/commit/cb5bb9e74a70af7bab37f331fa285ee29a36488b", "message": "add DecodingServiceTest for test DecodingService", "committedDate": "2020-09-28T08:46:46Z", "type": "commit"}, {"oid": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "url": "https://github.com/line/armeria/commit/8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "message": "add HttpDecodedRequestTest for testing HttpDecodedRequest", "committedDate": "2020-09-28T08:47:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0MzA1OA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495843058", "bodyText": "Oops... this is client module. \ud83d\ude31 \ud83e\udd14\nIt is not natural to use client-side code on server-side.", "author": "ikhoon", "createdAt": "2020-09-28T10:33:58Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;", "originalCommit": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0OTUxMA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495849510", "bodyText": "I also think StreamDecoderFactory class move from client to common...but I don't do this because i'm not a main contributer", "author": "joonhaeng", "createdAt": "2020-09-28T10:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0MzA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "cbec60339003d13fa16b612eeedef3af8e279b3d", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\nindex fd296f299..aa574ea87 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n\n@@ -36,7 +36,7 @@ import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n  * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n  * content of an {@link HttpRequest}.\n  */\n-public class DecodingService extends SimpleDecoratingHttpService {\n+public final class DecodingService extends SimpleDecoratingHttpService {\n \n     /**\n      * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NDA4MA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495844080", "bodyText": "Could remove public and add final?", "author": "ikhoon", "createdAt": "2020-09-28T10:35:59Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoder;\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * A {@link FilteredHttpRequest} that applies HTTP decoding to {@link HttpObject}s as they are published.\n+ */\n+public class HttpDecodedRequest extends FilteredHttpRequest {", "originalCommit": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1MjQ5Nw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495852497", "bodyText": "fix it!", "author": "joonhaeng", "createdAt": "2020-09-28T10:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NDA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "cbec60339003d13fa16b612eeedef3af8e279b3d", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java b/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\nindex 00b13b837..67d299bfc 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\n\n@@ -37,7 +37,7 @@ import io.netty.buffer.ByteBufAllocator;\n /**\n  * A {@link FilteredHttpRequest} that applies HTTP decoding to {@link HttpObject}s as they are published.\n  */\n-public class HttpDecodedRequest extends FilteredHttpRequest {\n+final class HttpDecodedRequest extends FilteredHttpRequest {\n \n     private final Map<String, StreamDecoderFactory> availableDecoders;\n     private final ByteBufAllocator alloc;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NDUxNQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495844515", "bodyText": "Add final?", "author": "ikhoon", "createdAt": "2020-09-28T10:36:53Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public class DecodingService extends SimpleDecoratingHttpService {", "originalCommit": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1MjUzMg==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495852532", "bodyText": "fix it!", "author": "joonhaeng", "createdAt": "2020-09-28T10:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NDUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbec60339003d13fa16b612eeedef3af8e279b3d", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\nindex fd296f299..aa574ea87 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n\n@@ -36,7 +36,7 @@ import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n  * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n  * content of an {@link HttpRequest}.\n  */\n-public class DecodingService extends SimpleDecoratingHttpService {\n+public final class DecodingService extends SimpleDecoratingHttpService {\n \n     /**\n      * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NTExOA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495845118", "bodyText": "Could be private?", "author": "ikhoon", "createdAt": "2020-09-28T10:38:10Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {\n+        return delegate -> new DecodingService(delegate, ImmutableList\n+                .of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));\n+    }\n+\n+    private final Map<String, StreamDecoderFactory> decoderFactories;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpService} with the provided decoders.\n+     */\n+    protected DecodingService(HttpService delegate, Iterable<? extends StreamDecoderFactory> decoderFactories) {", "originalCommit": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1MjU0OQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495852549", "bodyText": "fix it!", "author": "joonhaeng", "createdAt": "2020-09-28T10:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NTExOA=="}], "type": "inlineReview", "revised_code": {"commit": "cbec60339003d13fa16b612eeedef3af8e279b3d", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\nindex fd296f299..aa574ea87 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n\n@@ -36,7 +36,7 @@ import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n  * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n  * content of an {@link HttpRequest}.\n  */\n-public class DecodingService extends SimpleDecoratingHttpService {\n+public final class DecodingService extends SimpleDecoratingHttpService {\n \n     /**\n      * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NzMzNA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495847334", "bodyText": "Users might want to customize StreamDecoderFactorys.\nThe following factories would be useful for that case.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/encoding/DecodingClient.java\n    \n    \n        Lines 51 to 62\n      in\n      eb33d2b\n    \n    \n    \n    \n\n        \n          \n               public static Function<? super HttpClient, DecodingClient> \n        \n\n        \n          \n               newDecorator(StreamDecoderFactory... decoderFactories) { \n        \n\n        \n          \n                   return newDecorator(ImmutableList.copyOf(decoderFactories)); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               /** \n        \n\n        \n          \n                * Creates a new {@link DecodingClient} decorator with the specified {@link StreamDecoderFactory}s. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               public static Function<? super HttpClient, DecodingClient> newDecorator( \n        \n\n        \n          \n                       Iterable<? extends StreamDecoderFactory> decoderFactories) { \n        \n\n        \n          \n                   return client -> new DecodingClient(client, decoderFactories); \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nBy the way, We need to discuss StreamDecoderFactory issue before going further.", "author": "ikhoon", "createdAt": "2020-09-28T10:42:20Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {", "originalCommit": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NjY0Mw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495856643", "bodyText": "In my opinion, StreamDecoderFactory, StreamDecoderFactories and ZlibStreamDecoder package need to move from com.linecorp.armeria.client.encoding to com.linecorp.armeria.common because roles are not tied to the client. but this action bring many class changes.", "author": "joonhaeng", "createdAt": "2020-09-28T11:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NjIwMw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495876203", "bodyText": "To avoid breaking changes, how about?\n\nDeprecate client.encoding required in server-side too.\nCopy the code to common.encoding", "author": "ikhoon", "createdAt": "2020-09-28T11:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4MDIzNQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r495880235", "bodyText": "That's a good idea. Can I do that?", "author": "joonhaeng", "createdAt": "2020-09-28T11:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzODUyNg==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496338526", "bodyText": "Sure! Please do that. \ud83d\ude4f", "author": "ikhoon", "createdAt": "2020-09-29T02:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2NzE2OA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496467168", "bodyText": "I just finished it and pushed.", "author": "joonhaeng", "createdAt": "2020-09-29T07:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NzMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "cbec60339003d13fa16b612eeedef3af8e279b3d", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\nindex fd296f299..aa574ea87 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n\n@@ -36,7 +36,7 @@ import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n  * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n  * content of an {@link HttpRequest}.\n  */\n-public class DecodingService extends SimpleDecoratingHttpService {\n+public final class DecodingService extends SimpleDecoratingHttpService {\n \n     /**\n      * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n"}}, {"oid": "cbec60339003d13fa16b612eeedef3af8e279b3d", "url": "https://github.com/line/armeria/commit/cbec60339003d13fa16b612eeedef3af8e279b3d", "message": "fix: from public to final", "committedDate": "2020-09-28T10:50:02Z", "type": "commit"}, {"oid": "499e93fdc955e82188ee1a1b9514ea49ba841c61", "url": "https://github.com/line/armeria/commit/499e93fdc955e82188ee1a1b9514ea49ba841c61", "message": "fix: add newDecorator(args...) method to customize DecodingService", "committedDate": "2020-09-28T11:35:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNTc0Nw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496335747", "bodyText": "And how about adding EncodingClient for the completing data flow - compressing by client and decompressing by server?\nYou can do that this PR or in the following PR. \ud83d\ude09", "author": "ikhoon", "createdAt": "2020-09-29T02:05:12Z", "path": "core/src/test/java/com/linecorp/armeria/server/decoding/DecodingServiceTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.zip.DeflaterOutputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class DecodingServiceTest {\n+\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            final HttpService httpService = (ctx, req) -> HttpResponse.from(\n+                    req.aggregate()\n+                       .thenApply(aggregated -> {\n+                           final ResponseHeaders responseHeaders =\n+                                   ResponseHeaders.of(HttpStatus.OK,\n+                                                      HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8);\n+                           return HttpResponse.of(responseHeaders,\n+                                                  HttpData.ofUtf8(\"Hello \" + aggregated.contentUtf8() + '!'));\n+                       }));\n+            sb.decorator(\"/decodeTest\", DecodingService.newDecorator());\n+            sb.service(\"/decodeTest\", httpService);\n+\n+            sb.decoratorUnder(\"/\", (delegate, ctx, req) -> {\n+                return delegate.serve(ctx, req);\n+            });\n+        }\n+    };\n+\n+    @Test\n+    void decodingGzippedPayloadFromClient() throws IOException {\n+\n+        final WebClient client = WebClient.builder(server.httpUri()).build();\n+        final RequestHeaders headers = RequestHeaders.of(HttpMethod.POST, \"/decodeTest\",\n+                                                         HttpHeaderNames.CONTENT_ENCODING, \"gzip\");\n+        final ByteArrayOutputStream encodedStream = new ByteArrayOutputStream();\n+        final DeflaterOutputStream encodingStream = new GZIPOutputStream(encodedStream, true);\n+\n+        final byte[] testByteArray = \"Armeria Gzip Test\".getBytes(StandardCharsets.UTF_8);\n+        encodingStream.write(testByteArray);\n+        encodingStream.flush();\n+\n+        assertThat(client.execute(headers, HttpData.wrap(encodedStream.toByteArray())).aggregate().join()", "originalCommit": "499e93fdc955e82188ee1a1b9514ea49ba841c61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2NjA3MA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496466070", "bodyText": "EncodingClient is good idea that armeria support end-to-end compressed data for reduce traffic size. I'll make another PR to implement EncodingClient ASAP \ud83d\ude04", "author": "joonhaeng", "createdAt": "2020-09-29T07:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNTc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4Mjc2Nw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r498282767", "bodyText": "Awesome, @joonhaeng. Looking forward to the follow-up PR. \u2764\ufe0f", "author": "trustin", "createdAt": "2020-10-01T14:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNTc0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/decoding/DecodingServiceTest.java b/core/src/test/java/com/linecorp/armeria/server/encoding/DecodingServiceTest.java\nsimilarity index 98%\nrename from core/src/test/java/com/linecorp/armeria/server/decoding/DecodingServiceTest.java\nrename to core/src/test/java/com/linecorp/armeria/server/encoding/DecodingServiceTest.java\nindex 22f1a3b9d..7866bca8a 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/decoding/DecodingServiceTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/encoding/DecodingServiceTest.java\n\n@@ -14,7 +14,7 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.server.decoding;\n+package com.linecorp.armeria.server.encoding;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n"}}, {"oid": "08f72bfe2b9d6e69da93a1f055a59a8359d04d4d", "url": "https://github.com/line/armeria/commit/08f72bfe2b9d6e69da93a1f055a59a8359d04d4d", "message": "create new package that copy from com.line.armeria.client.encoding", "committedDate": "2020-09-29T05:40:56Z", "type": "commit"}, {"oid": "1bc47f8377075437e6849df4c8f4d64319761fd8", "url": "https://github.com/line/armeria/commit/1bc47f8377075437e6849df4c8f4d64319761fd8", "message": "copy from com.line.armeria.client.encoding.StreamDecoder", "committedDate": "2020-09-29T05:41:35Z", "type": "commit"}, {"oid": "56a5fddce86ddad97084b35c283831b600cf73a4", "url": "https://github.com/line/armeria/commit/56a5fddce86ddad97084b35c283831b600cf73a4", "message": "copy from com.line.armeria.client.encoding.StreamDecoderFactories", "committedDate": "2020-09-29T05:42:26Z", "type": "commit"}, {"oid": "b996887af7d849b1648eed9b54af2c042ab902ea", "url": "https://github.com/line/armeria/commit/b996887af7d849b1648eed9b54af2c042ab902ea", "message": "copy from com.line.armeria.client.encoding.StreamDecoderFactory", "committedDate": "2020-09-29T05:42:52Z", "type": "commit"}, {"oid": "d406cc4082eebc8b05bc926b94796a5daf7ae94f", "url": "https://github.com/line/armeria/commit/d406cc4082eebc8b05bc926b94796a5daf7ae94f", "message": "copy from com.line.armeria.client.encoding.ZlibStreamDecoder", "committedDate": "2020-09-29T05:43:17Z", "type": "commit"}, {"oid": "f179a17898776fd8f9059d0d5cc35829b59cd6d3", "url": "https://github.com/line/armeria/commit/f179a17898776fd8f9059d0d5cc35829b59cd6d3", "message": "change import path", "committedDate": "2020-09-29T05:47:06Z", "type": "commit"}, {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "url": "https://github.com/line/armeria/commit/9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "message": "marked as deprecated(use com.linecorp.armeria.common.encoding.* instead)", "committedDate": "2020-09-29T05:49:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3MTAyNg==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496471026", "bodyText": "We should update the request. \ud83d\ude04\nctx.updateRequest(decodedRequest);", "author": "minwoox", "createdAt": "2020-09-29T07:19:36Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public final class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {\n+        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            StreamDecoderFactory... decoderFactories) {\n+        return newDecorator(ImmutableList.copyOf(decoderFactories));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            Iterable<? extends StreamDecoderFactory> decoderFactories) {\n+        return delegate -> new DecodingService(delegate, decoderFactories);\n+    }\n+\n+    private final Map<String, StreamDecoderFactory> decoderFactories;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpService} with the provided decoders.\n+     */\n+    private DecodingService(HttpService delegate, Iterable<? extends StreamDecoderFactory> decoderFactories) {\n+        super(delegate);\n+        this.decoderFactories = Streams.stream(decoderFactories)\n+                                       .collect(toImmutableMap(StreamDecoderFactory::encodingHeaderValue,\n+                                                               Function.identity()));\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+        final HttpDecodedRequest decodedRequest = new HttpDecodedRequest(req, decoderFactories, ctx.alloc());", "originalCommit": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MzAzMQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496973031", "bodyText": "fix it! wow...I didn't know it was necessary... \ud83d\ude22", "author": "joonhaeng", "createdAt": "2020-09-29T19:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3MTAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "cc9501ed367f9fbadaf371d0f3cd6720f6d9fd32", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\nindex 30a676620..0db79d45b 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n\n@@ -76,6 +76,7 @@ public final class DecodingService extends SimpleDecoratingHttpService {\n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n         final HttpDecodedRequest decodedRequest = new HttpDecodedRequest(req, decoderFactories, ctx.alloc());\n+        ctx.updateRequest(decodedRequest);\n         return unwrap().serve(ctx, decodedRequest);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1NDM1OQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496654359", "bodyText": "I think we can do this only once when this request is created because HttpRequest always has a header when it's created. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-09-29T11:51:22Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.encoding.StreamDecoder;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * A {@link FilteredHttpRequest} that applies HTTP decoding to {@link HttpObject}s as they are published.\n+ */\n+final class HttpDecodedRequest extends FilteredHttpRequest {\n+\n+    private final Map<String, StreamDecoderFactory> availableDecoders;\n+    private final ByteBufAllocator alloc;\n+\n+    @Nullable\n+    private StreamDecoder responseDecoder;\n+\n+    HttpDecodedRequest(HttpRequest delegate, Map<String, StreamDecoderFactory> availableDecoders,\n+                       ByteBufAllocator alloc) {\n+        super(delegate);\n+        this.availableDecoders = availableDecoders;\n+        this.alloc = alloc;\n+    }\n+\n+    @Override\n+    protected HttpObject filter(HttpObject obj) {\n+        if (obj instanceof HttpData) {\n+            final String contentEncoding = headers().get(HttpHeaderNames.CONTENT_ENCODING);\n+            if (contentEncoding != null) {\n+                final StreamDecoderFactory decoderFactory =\n+                        availableDecoders.get(Ascii.toLowerCase(contentEncoding));\n+                // If the client sent an encoding we don't support, decoding will be skipped which is ok.\n+                if (decoderFactory != null) {", "originalCommit": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MzMxNQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496973315", "bodyText": "add decoderCheck for prevent check many times", "author": "joonhaeng", "createdAt": "2020-09-29T19:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1NDM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMTY4Ng==", "url": "https://github.com/line/armeria/pull/3087#discussion_r497001686", "bodyText": "Would it have been better to do it in the constructor?", "author": "joonhaeng", "createdAt": "2020-09-29T19:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1NDM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMyNTQ3MA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r498325470", "bodyText": "How about even doing this before making HttpDecodedRequest?\nIf the request headers does not have the content-encoding header, we don't even need to create HttpDecodedRequest but just pass the original request to the next decorator.", "author": "minwoox", "createdAt": "2020-10-01T15:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1NDM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxODQ1Nw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r498418457", "bodyText": "With 3db769c commit, finding appropriate decoder before create HttpDecodedRequest", "author": "joonhaeng", "createdAt": "2020-10-01T17:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1NDM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "25b5ca60f71c9f9f4871c19500b6a1d09be120ab", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java b/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\nindex 7bf079fd7..c785ca7fa 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\n\n@@ -45,6 +45,8 @@ final class HttpDecodedRequest extends FilteredHttpRequest {\n     @Nullable\n     private StreamDecoder responseDecoder;\n \n+    private boolean decoderCheck;\n+\n     HttpDecodedRequest(HttpRequest delegate, Map<String, StreamDecoderFactory> availableDecoders,\n                        ByteBufAllocator alloc) {\n         super(delegate);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMzQ4OQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496723489", "bodyText": "Provides the common classes for HTTP content encoding and decoding?", "author": "trustin", "createdAt": "2020-09-29T13:38:01Z", "path": "core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * HTTP content decoding class.", "originalCommit": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MjM2Nw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496972367", "bodyText": "fix it!", "author": "joonhaeng", "createdAt": "2020-09-29T19:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMzQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "73dcd2777925ce622f4554b0c9fd04c61c244951", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java b/core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java\nindex 67e6c2168..923bffee1 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java\n\n@@ -15,7 +15,7 @@\n  */\n \n /**\n- * HTTP content decoding class.\n+ * Provides the common classes for HTTP content encoding and decoding.\n  */\n @NonNullByDefault\n package com.linecorp.armeria.common.encoding;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNDExNw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496724117", "bodyText": "requireNonNull(decoderFactories, \"decoderFactories\")?", "author": "trustin", "createdAt": "2020-09-29T13:38:49Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public final class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {\n+        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            StreamDecoderFactory... decoderFactories) {\n+        return newDecorator(ImmutableList.copyOf(decoderFactories));", "originalCommit": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MjQxMw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496972413", "bodyText": "fix it!", "author": "joonhaeng", "createdAt": "2020-09-29T19:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNDExNw=="}], "type": "inlineReview", "revised_code": {"commit": "cc9501ed367f9fbadaf371d0f3cd6720f6d9fd32", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\nindex 30a676620..0db79d45b 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n\n@@ -76,6 +76,7 @@ public final class DecodingService extends SimpleDecoratingHttpService {\n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n         final HttpDecodedRequest decodedRequest = new HttpDecodedRequest(req, decoderFactories, ctx.alloc());\n+        ctx.updateRequest(decodedRequest);\n         return unwrap().serve(ctx, decodedRequest);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNDk2OQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496724969", "bodyText": "Need to make an immutable copy with requireNonNull() check outside of the lambda expression first, so that any modifications to decoderFactories before Function.apply() does not affect the resulting service.", "author": "trustin", "createdAt": "2020-09-29T13:39:52Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public final class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {\n+        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            StreamDecoderFactory... decoderFactories) {\n+        return newDecorator(ImmutableList.copyOf(decoderFactories));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            Iterable<? extends StreamDecoderFactory> decoderFactories) {\n+        return delegate -> new DecodingService(delegate, decoderFactories);", "originalCommit": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk4Njk1OQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r496986959", "bodyText": "requireNonNull(decoderFactories, \"decoderFactories\");\nfinal Iterable<? extends StreamDecoderFactory> immutableDecoderFactories = ImmutableList.copyOf(decoderFactories);\nadd two lines before lambda expression.", "author": "joonhaeng", "createdAt": "2020-09-29T19:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNDk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc9501ed367f9fbadaf371d0f3cd6720f6d9fd32", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\nindex 30a676620..0db79d45b 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n\n@@ -76,6 +76,7 @@ public final class DecodingService extends SimpleDecoratingHttpService {\n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n         final HttpDecodedRequest decodedRequest = new HttpDecodedRequest(req, decoderFactories, ctx.alloc());\n+        ctx.updateRequest(decodedRequest);\n         return unwrap().serve(ctx, decodedRequest);\n     }\n }\n"}}, {"oid": "cc9501ed367f9fbadaf371d0f3cd6720f6d9fd32", "url": "https://github.com/line/armeria/commit/cc9501ed367f9fbadaf371d0f3cd6720f6d9fd32", "message": "add ctx.updateRequest", "committedDate": "2020-09-29T17:13:22Z", "type": "commit"}, {"oid": "25b5ca60f71c9f9f4871c19500b6a1d09be120ab", "url": "https://github.com/line/armeria/commit/25b5ca60f71c9f9f4871c19500b6a1d09be120ab", "message": "add decoderCheck for prevent checking decoder many times", "committedDate": "2020-09-29T18:23:33Z", "type": "commit"}, {"oid": "73dcd2777925ce622f4554b0c9fd04c61c244951", "url": "https://github.com/line/armeria/commit/73dcd2777925ce622f4554b0c9fd04c61c244951", "message": "fix javadoc", "committedDate": "2020-09-29T18:37:30Z", "type": "commit"}, {"oid": "cf79aec1006df73d2a6a3a023b6a8ae899ee4631", "url": "https://github.com/line/armeria/commit/cf79aec1006df73d2a6a3a023b6a8ae899ee4631", "message": "add requireNonNull and make immutable copy", "committedDate": "2020-09-29T18:39:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1OTAwMw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r497159003", "bodyText": "filteredFirstData, handledFirstData or initializedDecoder?", "author": "trustin", "createdAt": "2020-09-29T23:58:49Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java", "diffHunk": "@@ -45,6 +45,8 @@\n     @Nullable\n     private StreamDecoder responseDecoder;\n \n+    private boolean decoderCheck;", "originalCommit": "25b5ca60f71c9f9f4871c19500b6a1d09be120ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4MDMzNQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r497580335", "bodyText": "rename to initializedDecoder", "author": "joonhaeng", "createdAt": "2020-09-30T14:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1OTAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "16593b5f4fddff0ead303b51dcec531cd906a132", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java b/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\nindex c785ca7fa..039ed40c0 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java\n\n@@ -45,7 +45,7 @@ final class HttpDecodedRequest extends FilteredHttpRequest {\n     @Nullable\n     private StreamDecoder responseDecoder;\n \n-    private boolean decoderCheck;\n+    private boolean initializedDecoder;\n \n     HttpDecodedRequest(HttpRequest delegate, Map<String, StreamDecoderFactory> availableDecoders,\n                        ByteBufAllocator alloc) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MDc5MA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r497160790", "bodyText": "How about just using List<...>?\nThe constructor could require an ImmutableList to statically ensure the constructor will always get an immutable list (i.e. a dev will be sure he/she doesn't need to worry about immutability of the given list).", "author": "trustin", "createdAt": "2020-09-30T00:01:29Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -58,7 +60,10 @@\n      */\n     public static Function<? super HttpService, DecodingService> newDecorator(\n             Iterable<? extends StreamDecoderFactory> decoderFactories) {\n-        return delegate -> new DecodingService(delegate, decoderFactories);\n+        requireNonNull(decoderFactories, \"decoderFactories\");\n+        final Iterable<? extends StreamDecoderFactory> immutableDecoderFactories =", "originalCommit": "cf79aec1006df73d2a6a3a023b6a8ae899ee4631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MTI4Mw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r497161283", "bodyText": "It'd be nice if you could make the same changes to DecodingClient. \ud83d\ude47", "author": "trustin", "createdAt": "2020-09-30T00:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MDc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4MjM0Mg==", "url": "https://github.com/line/armeria/pull/3087#discussion_r497582342", "bodyText": "change Iterable to List\nadd requireNonNull & ImmutableList to DecodingClient (09342ef)", "author": "joonhaeng", "createdAt": "2020-09-30T15:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MDc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "fea0bc886d4dddf20ed4b4865bae243e27eb9dcd", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\nindex 93cb6384a..45ec315c0 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java\n\n@@ -61,7 +62,7 @@ public final class DecodingService extends SimpleDecoratingHttpService {\n     public static Function<? super HttpService, DecodingService> newDecorator(\n             Iterable<? extends StreamDecoderFactory> decoderFactories) {\n         requireNonNull(decoderFactories, \"decoderFactories\");\n-        final Iterable<? extends StreamDecoderFactory> immutableDecoderFactories =\n+        final List<? extends StreamDecoderFactory> immutableDecoderFactories =\n                 ImmutableList.copyOf(decoderFactories);\n         return delegate -> new DecodingService(delegate, immutableDecoderFactories);\n     }\n"}}, {"oid": "16593b5f4fddff0ead303b51dcec531cd906a132", "url": "https://github.com/line/armeria/commit/16593b5f4fddff0ead303b51dcec531cd906a132", "message": "change name decoderCheck -> initializedDecoder", "committedDate": "2020-09-30T05:42:48Z", "type": "commit"}, {"oid": "fea0bc886d4dddf20ed4b4865bae243e27eb9dcd", "url": "https://github.com/line/armeria/commit/fea0bc886d4dddf20ed4b4865bae243e27eb9dcd", "message": "change Iterable -> List", "committedDate": "2020-09-30T05:43:38Z", "type": "commit"}, {"oid": "09342ef1987f0bef9e0fd25376437fd69b11e9bc", "url": "https://github.com/line/armeria/commit/09342ef1987f0bef9e0fd25376437fd69b11e9bc", "message": "add requireNonNull and ImmutableList", "committedDate": "2020-09-30T12:10:13Z", "type": "commit"}, {"oid": "83a035cada4e3e631f42a694d0d1de35325b1643", "url": "https://github.com/line/armeria/commit/83a035cada4e3e631f42a694d0d1de35325b1643", "message": "add test for `com.linecorp.armeria.common.encoding`\n- copy from `com.linecorp.armeria.client.encoding`", "committedDate": "2020-10-01T09:26:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4MjM0Ng==", "url": "https://github.com/line/armeria/pull/3087#discussion_r498282346", "bodyText": "nit: probably OK without public?", "author": "trustin", "createdAt": "2020-10-01T14:20:37Z", "path": "core/src/test/java/com/linecorp/armeria/common/encoding/ZlibStreamDecoderTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.encoding;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.handler.codec.compression.ZlibWrapper;\n+\n+public class ZlibStreamDecoderTest extends AbstractStreamDecoderTest {", "originalCommit": "83a035cada4e3e631f42a694d0d1de35325b1643", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxODU3Mg==", "url": "https://github.com/line/armeria/pull/3087#discussion_r498418572", "bodyText": "fix it!", "author": "joonhaeng", "createdAt": "2020-10-01T17:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4MjM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "935180774b6a6b2956269095dea869d4f0b45e83", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/common/encoding/ZlibStreamDecoderTest.java b/core/src/test/java/com/linecorp/armeria/common/encoding/ZlibStreamDecoderTest.java\nindex a34b998e7..03a7e2ee6 100644\n--- a/core/src/test/java/com/linecorp/armeria/common/encoding/ZlibStreamDecoderTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/common/encoding/ZlibStreamDecoderTest.java\n\n@@ -18,7 +18,7 @@ package com.linecorp.armeria.common.encoding;\n import io.netty.buffer.ByteBufAllocator;\n import io.netty.handler.codec.compression.ZlibWrapper;\n \n-public class ZlibStreamDecoderTest extends AbstractStreamDecoderTest {\n+class ZlibStreamDecoderTest extends AbstractStreamDecoderTest {\n     @Override\n     StreamDecoder newDecoder() {\n         return new ZlibStreamDecoder(ZlibWrapper.NONE, ByteBufAllocator.DEFAULT);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4Mjk4OA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r498282988", "bodyText": "Ditto - public could be omitted", "author": "trustin", "createdAt": "2020-10-01T14:21:30Z", "path": "core/src/test/java/com/linecorp/armeria/server/decoding/HttpDecodedRequestTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+\n+public class HttpDecodedRequestTest {", "originalCommit": "83a035cada4e3e631f42a694d0d1de35325b1643", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxODY3MQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r498418671", "bodyText": "fix it!", "author": "joonhaeng", "createdAt": "2020-10-01T17:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4Mjk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "935180774b6a6b2956269095dea869d4f0b45e83", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/decoding/HttpDecodedRequestTest.java b/core/src/test/java/com/linecorp/armeria/server/decoding/HttpDecodedRequestTest.java\nindex e510ce9cb..17d18684b 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/decoding/HttpDecodedRequestTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/decoding/HttpDecodedRequestTest.java\n\n@@ -44,7 +44,7 @@ import com.linecorp.armeria.common.stream.SubscriptionOption;\n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n \n-public class HttpDecodedRequestTest {\n+class HttpDecodedRequestTest {\n \n     private static final Map<String, StreamDecoderFactory> DECODERS =\n             ImmutableMap.of(\"gzip\", StreamDecoderFactory.gzip());\n"}}, {"oid": "935180774b6a6b2956269095dea869d4f0b45e83", "url": "https://github.com/line/armeria/commit/935180774b6a6b2956269095dea869d4f0b45e83", "message": "remove `public`", "committedDate": "2020-10-01T16:24:17Z", "type": "commit"}, {"oid": "3db769c5d6dc2bbffec002da528eb599f1b86cc9", "url": "https://github.com/line/armeria/commit/3db769c5d6dc2bbffec002da528eb599f1b86cc9", "message": "finding appropriate decoder before create `HttpDecodedRequest`", "committedDate": "2020-10-01T17:49:41Z", "type": "commit"}, {"oid": "be1750742c4b8a729a9d1c7d7ee376d740ec81f7", "url": "https://github.com/line/armeria/commit/be1750742c4b8a729a9d1c7d7ee376d740ec81f7", "message": "extend deprecated class", "committedDate": "2020-10-01T19:02:42Z", "type": "commit"}, {"oid": "0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc", "url": "https://github.com/line/armeria/commit/0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc", "message": "test for check DecodingClient can accept both of old/new decoder", "committedDate": "2020-10-01T19:07:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3MjkzOA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r499372938", "bodyText": "nit: Remove and decoding? \ud83d\ude06", "author": "ikhoon", "createdAt": "2020-10-05T06:43:02Z", "path": "core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Provides the common classes for HTTP content encoding and decoding.", "originalCommit": "0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNDI1NA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r499724254", "bodyText": "fix it!", "author": "joonhaeng", "createdAt": "2020-10-05T16:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3MjkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "80874bb959b6bb7ac2beff03a551c7583e77ed7d", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java b/core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java\nindex 923bffee1..fc200c960 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java\n\n@@ -15,7 +15,7 @@\n  */\n \n /**\n- * Provides the common classes for HTTP content encoding and decoding.\n+ * Provides the common classes for HTTP content encoding.\n  */\n @NonNullByDefault\n package com.linecorp.armeria.common.encoding;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NTA5Nw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r499375097", "bodyText": "You don't need to specify the default ClientFactory. It is used by default.", "author": "ikhoon", "createdAt": "2020-10-05T06:49:00Z", "path": "core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.encoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.encoding.DecodingClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.encoding.EncodingService;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class StreamDecoderCompatibleTest {\n+\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(\"/encoding-test\", new AbstractHttpService() {\n+                @Override\n+                protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n+                        throws Exception {\n+                    return HttpResponse.of(\n+                            ResponseHeaders.of(HttpStatus.OK),\n+                            HttpData.ofUtf8(\"some content to compress \"),\n+                            HttpData.ofUtf8(\"more content to compress\"));\n+                }\n+            }.decorate(EncodingService.newDecorator()));\n+        }\n+    };\n+\n+    private static final ClientFactory clientFactory = ClientFactory.ofDefault();\n+\n+    @Test\n+    void httpDecodingWithNewDecoder() throws Exception {\n+        final WebClient client = WebClient.builder(server.httpUri())\n+                                          .factory(clientFactory)", "originalCommit": "0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNTc0MA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r499725740", "bodyText": "Thank you for letting me know. remove ClientFactory.", "author": "joonhaeng", "createdAt": "2020-10-05T16:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "131bc3596a3d2f188c10290fbcf274001744e10d", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java b/core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java\nindex 5409e3481..9414975c3 100644\n--- a/core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java\n\n@@ -21,7 +21,6 @@ import static org.assertj.core.api.Assertions.assertThat;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n-import com.linecorp.armeria.client.ClientFactory;\n import com.linecorp.armeria.client.WebClient;\n import com.linecorp.armeria.client.encoding.DecodingClient;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n"}}, {"oid": "131bc3596a3d2f188c10290fbcf274001744e10d", "url": "https://github.com/line/armeria/commit/131bc3596a3d2f188c10290fbcf274001744e10d", "message": "remove defaultClientFactory", "committedDate": "2020-10-05T16:16:15Z", "type": "commit"}, {"oid": "80874bb959b6bb7ac2beff03a551c7583e77ed7d", "url": "https://github.com/line/armeria/commit/80874bb959b6bb7ac2beff03a551c7583e77ed7d", "message": "refine comments", "committedDate": "2020-10-05T16:22:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NDMwMA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r501594300", "bodyText": "How about renaming this class into DecodingClientTest and adding the tests for both deprecated and non-deprecated stream decoders? I'm just not sure why we don't have DecodingClientTest already. \ud83d\ude05", "author": "trustin", "createdAt": "2020-10-08T09:55:44Z", "path": "core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.encoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.encoding.DecodingClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.encoding.EncodingService;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class StreamDecoderCompatibleTest {", "originalCommit": "80874bb959b6bb7ac2beff03a551c7583e77ed7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4NzM4NQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r501887385", "bodyText": "renaming and add some test (d1eb993)\nadd compatible test for HttpDecodedResponse (f7d9b44)", "author": "joonhaeng", "createdAt": "2020-10-08T17:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NDMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "d1eb993f9b129d112a124dff02948c6b558f91dc", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java b/core/src/test/java/com/linecorp/armeria/client/encoding/DecodingClientTest.java\nsimilarity index 62%\nrename from core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java\nrename to core/src/test/java/com/linecorp/armeria/client/encoding/DecodingClientTest.java\nindex 9414975c3..ec015c2d5 100644\n--- a/core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/encoding/DecodingClientTest.java\n\n@@ -14,7 +14,7 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.common.encoding;\n+package com.linecorp.armeria.client.encoding;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n"}}, {"oid": "d1eb993f9b129d112a124dff02948c6b558f91dc", "url": "https://github.com/line/armeria/commit/d1eb993f9b129d112a124dff02948c6b558f91dc", "message": "move package, change name, add some test case for enlarging coverage", "committedDate": "2020-10-08T17:18:49Z", "type": "commit"}, {"oid": "f7d9b4457a1469471b0999bbc11bbe7d665845bf", "url": "https://github.com/line/armeria/commit/f7d9b4457a1469471b0999bbc11bbe7d665845bf", "message": "add new/old decoder compatible test", "committedDate": "2020-10-08T17:19:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNDUwOQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r503714509", "bodyText": "How about merging this package into server.encoding?", "author": "trustin", "createdAt": "2020-10-13T07:09:23Z", "path": "core/src/main/java/com/linecorp/armeria/server/decoding/package-info.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/**\n+ * HTTP content decoding service.\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.server.decoding;", "originalCommit": "f7d9b4457a1469471b0999bbc11bbe7d665845bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0ODM2NQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r503748365", "bodyText": "move complete! Now I think I know a little about the package policy in armeria \ud83d\ude0a", "author": "joonhaeng", "createdAt": "2020-10-13T08:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNDUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NjcxOQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r503866719", "bodyText": "Awesome. \ud83d\ude01", "author": "trustin", "createdAt": "2020-10-13T11:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNDUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/decoding/package-info.java b/core/src/main/java/com/linecorp/armeria/server/decoding/package-info.java\ndeleted file mode 100644\nindex af15d2570..000000000\n--- a/core/src/main/java/com/linecorp/armeria/server/decoding/package-info.java\n+++ /dev/null\n\n@@ -1,22 +0,0 @@\n-/*\n- * Copyright 2020 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-/**\n- * HTTP content decoding service.\n- */\n-@NonNullByDefault\n-package com.linecorp.armeria.server.decoding;\n-\n-import com.linecorp.armeria.common.annotation.NonNullByDefault;\n"}}, {"oid": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081", "url": "https://github.com/line/armeria/commit/dae2a224d3bf38087dd008d8c1ce97c6f7ef3081", "message": "move package from server.decoding to server.encoding", "committedDate": "2020-10-13T07:32:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNTYyMQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r504715621", "bodyText": "Is there any reason that we are doing this instead of\npackage com.linecorp.armeria.client.encoding;\n\npublic interface StreamDecoderFactory extends com.linecorp.armeria.common.encoding.StreamDecoderFactory {\nIt looks weird this new interface extends the deprecated one. \ud83e\udd14", "author": "minwoox", "createdAt": "2020-10-14T14:18:12Z", "path": "core/src/main/java/com/linecorp/armeria/common/encoding/StreamDecoderFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.encoding;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * An interface that constructs a new {@link StreamDecoder} for a given Content-Encoding header value.\n+ * A new decoder is valid for the lifetime of an {@link HttpResponse}.\n+ */\n+public interface StreamDecoderFactory extends com.linecorp.armeria.client.encoding.StreamDecoderFactory {", "originalCommit": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1ODExMA==", "url": "https://github.com/line/armeria/pull/3087#discussion_r505158110", "bodyText": "This is @trustin 's suggestion (#3087 (review), #3087 (comment)) that DecodingClient can accept both new and deprecated without breaking change.", "author": "joonhaeng", "createdAt": "2020-10-15T04:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3MDg1Mg==", "url": "https://github.com/line/armeria/pull/3087#discussion_r505170852", "bodyText": "Oops, I have pasted the wrong example. I fixed it, please take a look at it again.\n\nHow about making the deprecated StreamDecoderFactory and StreamDecoder extend the new interfaces in the common package\n\nYeah, I think @trustin meant extending the new one from the deprecated one. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-10-15T05:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MDY5OQ==", "url": "https://github.com/line/armeria/pull/3087#discussion_r505180699", "bodyText": "Is there any reason that we are doing this instead of\npackage com.linecorp.armeria.client.encoding;\n\npublic interface StreamDecoderFactory extends com.linecorp.armeria.common.encoding.StreamDecoderFactory {\nIt looks weird this new interface extends the deprecated one. \ud83e\udd14\n\nIn this relation, DecodingClient can't accept new encoder without additional change(e.g update import statement, create new method that can accept new encoder)... \ud83d\ude22", "author": "joonhaeng", "createdAt": "2020-10-15T05:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1MjExMw==", "url": "https://github.com/line/armeria/pull/3087#discussion_r506052113", "bodyText": "Thanks for the explanation. Yeah I'm fine as it is. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-10-16T04:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNTYyMQ=="}], "type": "inlineReview", "revised_code": null}]}