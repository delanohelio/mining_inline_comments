{"pr_number": 2834, "pr_title": "Return `ContextAwareEventLoop` from `RequestContext.eventLoop()`", "pr_createdAt": "2020-06-25T07:54:59Z", "pr_url": "https://github.com/line/armeria/pull/2834", "timeline": [{"oid": "6e10c4cba696482c577f498fa5a864476e3eb712", "url": "https://github.com/line/armeria/commit/6e10c4cba696482c577f498fa5a864476e3eb712", "message": "Returns `RequestContextAwareEventLoop` from `RequestContext.eventLoop()`\nMotivation:\nCurrently, we return the context aware executor service from `RequestContext.blockingTaskExecutor`.\nHowever, `RequestContext.eventLoop()` returns the non context aware `eventLoop` which is not consistent.\n\nModifications:\n- Make `RequestContextAwareEventLoop` public and return it from `RequestContext.eventLoop()`.\n- Make `RequestContextAwareScheduledExecutorService` public and return it from `ServiceRequestContext.blockingTaskExecutor()`.\n- (Deprecated) `executor()`, `contextAwareExecutor()` and `contextAwareEventLoop()` in `RequestContext` are deprecated.\n\nResult:\n- Close #2629\n- The `EventLoop` from `RequestContext.eventLoop()` always set the `RequestContext` before executing any submitted tasks.\n- (Deprecated) `executor()`, `contextAwareExecutor()` and `contextAwareEventLoop()` in `RequestContext` are deprecated.", "committedDate": "2020-06-25T07:18:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4ODI0MQ==", "url": "https://github.com/line/armeria/pull/2834#discussion_r445388241", "bodyText": "I think this class name is way too long.\nCan we rename classes that start with RequestContextAware to ContextAware?", "author": "minwoox", "createdAt": "2020-06-25T08:19:50Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextAwareScheduledExecutorService.java", "diffHunk": "@@ -16,43 +16,95 @@\n \n package com.linecorp.armeria.common;\n \n+import static java.util.Objects.requireNonNull;\n+\n import java.util.concurrent.Callable;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n-final class RequestContextAwareScheduledExecutorService extends RequestContextAwareExecutorService\n-        implements ScheduledExecutorService {\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * A delegating {@link ScheduledExecutorService} that sets the {@link RequestContext} before executing any\n+ * submitted tasks.\n+ */\n+public final class RequestContextAwareScheduledExecutorService", "originalCommit": "6e10c4cba696482c577f498fa5a864476e3eb712", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1MTk1Ng==", "url": "https://github.com/line/armeria/pull/2834#discussion_r445551956", "bodyText": "SGTM", "author": "trustin", "createdAt": "2020-06-25T13:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4ODI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff22cc21e3c4cb75ef4c33e74150ea5582f15d62", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContextAwareScheduledExecutorService.java b/core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java\nsimilarity index 79%\nrename from core/src/main/java/com/linecorp/armeria/common/RequestContextAwareScheduledExecutorService.java\nrename to core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java\nindex 1596c2fba..507f26d71 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContextAwareScheduledExecutorService.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java\n\n@@ -29,32 +29,32 @@ import com.google.common.base.MoreObjects;\n  * A delegating {@link ScheduledExecutorService} that sets the {@link RequestContext} before executing any\n  * submitted tasks.\n  */\n-public final class RequestContextAwareScheduledExecutorService\n-        extends RequestContextAwareExecutorService implements ScheduledExecutorService {\n+public final class ContextAwareScheduledExecutorService\n+        extends ContextAwareExecutorService implements ScheduledExecutorService {\n \n     /**\n-     * Returns a new {@link RequestContextAwareScheduledExecutorService} that sets the specified\n+     * Returns a new {@link ContextAwareScheduledExecutorService} that sets the specified\n      * {@link RequestContext} before executing any submitted tasks.\n      */\n-    public static RequestContextAwareScheduledExecutorService of(\n+    public static ContextAwareScheduledExecutorService of(\n             RequestContext context, ScheduledExecutorService executor) {\n         requireNonNull(context, \"context\");\n         requireNonNull(executor, \"executor\");\n-        if (executor instanceof RequestContextAwareScheduledExecutorService) {\n-            final RequestContext ctx = ((RequestContextAwareScheduledExecutorService) executor).context();\n+        if (executor instanceof ContextAwareScheduledExecutorService) {\n+            final RequestContext ctx = ((ContextAwareScheduledExecutorService) executor).context();\n             if (context == ctx) {\n-                return (RequestContextAwareScheduledExecutorService) executor;\n+                return (ContextAwareScheduledExecutorService) executor;\n             }\n             throw new IllegalArgumentException(\n-                    \"cannot create a \" + RequestContextAwareScheduledExecutorService.class.getSimpleName() +\n+                    \"cannot create a \" + ContextAwareScheduledExecutorService.class.getSimpleName() +\n                     \" using another \" + executor);\n         }\n-        return new RequestContextAwareScheduledExecutorService(context, executor);\n+        return new ContextAwareScheduledExecutorService(context, executor);\n     }\n \n     private final ScheduledExecutorService executor;\n \n-    private RequestContextAwareScheduledExecutorService(\n+    private ContextAwareScheduledExecutorService(\n             RequestContext context, ScheduledExecutorService executor) {\n         super(context, executor);\n         this.executor = executor;\n"}}, {"oid": "ff22cc21e3c4cb75ef4c33e74150ea5582f15d62", "url": "https://github.com/line/armeria/commit/ff22cc21e3c4cb75ef4c33e74150ea5582f15d62", "message": "Rename to `ContextAware.*`", "committedDate": "2020-06-26T02:51:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjA5Ng==", "url": "https://github.com/line/armeria/pull/2834#discussion_r446062096", "bodyText": "This method name seems mutable, not sure it follows our normal conventions.\nwithoutContext?", "author": "anuraaga", "createdAt": "2020-06-26T09:05:24Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "diffHunk": "@@ -32,18 +36,51 @@\n import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n- * A delegating {@link EventLoop} that makes sure all submitted tasks are\n- * executed within the {@link RequestContext}.\n+ * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-final class RequestContextAwareEventLoop extends RequestContextAwareExecutorService implements EventLoop {\n+public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {\n+\n+    /**\n+     * Returns a new {@link ContextAwareEventLoop} that sets the specified {@link RequestContext}\n+     * before executing any submitted tasks.\n+     */\n+    public static ContextAwareEventLoop of(RequestContext context, EventLoop eventLoop) {\n+        requireNonNull(context, \"context\");\n+        requireNonNull(eventLoop, \"eventLoop\");\n+        if (eventLoop instanceof ContextAwareEventLoop) {\n+            final RequestContext ctx = ((ContextAwareEventLoop) eventLoop).context();\n+            if (context == ctx) {\n+                return (ContextAwareEventLoop) eventLoop;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"cannot create a \" + ContextAwareEventLoop.class.getSimpleName() +\n+                    \" using another \" + eventLoop);\n+        }\n+        return new ContextAwareEventLoop(context, eventLoop);\n+    }\n+\n+    private final EventLoop eventLoop;\n \n-    RequestContextAwareEventLoop(RequestContext context, EventLoop delegate) {\n-        super(context, delegate);\n+    private ContextAwareEventLoop(RequestContext context, EventLoop eventLoop) {\n+        super(context, eventLoop);\n+        this.eventLoop = eventLoop;\n     }\n \n+    /**\n+     * Returns the {@link EventLoop} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */\n+    public EventLoop detachContext() {", "originalCommit": "ff22cc21e3c4cb75ef4c33e74150ea5582f15d62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDc1Nw==", "url": "https://github.com/line/armeria/pull/2834#discussion_r446200757", "bodyText": "That's a good suggestion. Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-26T13:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwNzQ2MQ==", "url": "https://github.com/line/armeria/pull/2834#discussion_r446507461", "bodyText": "withoutContext looks good to me. On second thought, we can implement Unwrappable and seems to use unwrap. (You can ignore this review.\ud83d\ude09)", "author": "ikhoon", "createdAt": "2020-06-27T09:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDQxMA==", "url": "https://github.com/line/armeria/pull/2834#discussion_r446930410", "bodyText": "Let's use withoutContext as we've discussed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-29T12:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "840d58f1cd4020399773a7d1e1ec2461990b7311", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java b/core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java\nindex d7a7f3586..81fa426ab 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java\n\n@@ -70,7 +70,7 @@ public final class ContextAwareEventLoop extends ContextAwareExecutorService imp\n      * Returns the {@link EventLoop} that is executing submitted tasks without setting\n      * the {@link RequestContext}.\n      */\n-    public EventLoop detachContext() {\n+    public EventLoop withoutContext() {\n         return eventLoop;\n     }\n \n"}}, {"oid": "840d58f1cd4020399773a7d1e1ec2461990b7311", "url": "https://github.com/line/armeria/commit/840d58f1cd4020399773a7d1e1ec2461990b7311", "message": "Address the comment by @anuraaga", "committedDate": "2020-06-26T13:57:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczNzM1Nw==", "url": "https://github.com/line/armeria/pull/2834#discussion_r446737357", "bodyText": "How about extracting the interfaces from the implementations?", "author": "trustin", "createdAt": "2020-06-29T02:16:33Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "diffHunk": "@@ -32,18 +36,51 @@\n import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n- * A delegating {@link EventLoop} that makes sure all submitted tasks are\n- * executed within the {@link RequestContext}.\n+ * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-final class RequestContextAwareEventLoop extends RequestContextAwareExecutorService implements EventLoop {\n+public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {", "originalCommit": "840d58f1cd4020399773a7d1e1ec2461990b7311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTYxMg==", "url": "https://github.com/line/armeria/pull/2834#discussion_r446929612", "bodyText": "Fixed. \ud83d\ude09\nI didn't extract other package-private classes such as ContextAwareExecutorService.\nIf I need to extract that as well, please let me know.", "author": "minwoox", "createdAt": "2020-06-29T12:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczNzM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d43742dbf726c59336def195b559615a8dd9044f", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java b/core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java\nindex 81fa426ab..0d2075772 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java\n\n@@ -18,33 +18,18 @@ package com.linecorp.armeria.common;\n \n import static java.util.Objects.requireNonNull;\n \n-import java.util.Iterator;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.TimeUnit;\n-\n-import com.google.common.base.MoreObjects;\n-\n-import io.netty.channel.Channel;\n-import io.netty.channel.ChannelFuture;\n-import io.netty.channel.ChannelPromise;\n import io.netty.channel.EventLoop;\n-import io.netty.channel.EventLoopGroup;\n-import io.netty.util.concurrent.EventExecutor;\n-import io.netty.util.concurrent.Future;\n-import io.netty.util.concurrent.ProgressivePromise;\n-import io.netty.util.concurrent.Promise;\n-import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n  * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {\n+public interface ContextAwareEventLoop extends EventLoop {\n \n     /**\n      * Returns a new {@link ContextAwareEventLoop} that sets the specified {@link RequestContext}\n      * before executing any submitted tasks.\n      */\n-    public static ContextAwareEventLoop of(RequestContext context, EventLoop eventLoop) {\n+    static ContextAwareEventLoop of(RequestContext context, EventLoop eventLoop) {\n         requireNonNull(context, \"context\");\n         requireNonNull(eventLoop, \"eventLoop\");\n         if (eventLoop instanceof ContextAwareEventLoop) {\n"}}, {"oid": "d43742dbf726c59336def195b559615a8dd9044f", "url": "https://github.com/line/armeria/commit/d43742dbf726c59336def195b559615a8dd9044f", "message": "Extrace interfaces", "committedDate": "2020-06-29T12:25:32Z", "type": "commit"}, {"oid": "d43742dbf726c59336def195b559615a8dd9044f", "url": "https://github.com/line/armeria/commit/d43742dbf726c59336def195b559615a8dd9044f", "message": "Extrace interfaces", "committedDate": "2020-06-29T12:25:32Z", "type": "forcePushed"}, {"oid": "8c7a8876d67364589fceca6d1bc2cbe7822784c0", "url": "https://github.com/line/armeria/commit/8c7a8876d67364589fceca6d1bc2cbe7822784c0", "message": "Merge branch 'master' into contextAwareEventLoop", "committedDate": "2020-06-30T03:00:36Z", "type": "commit"}, {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5", "url": "https://github.com/line/armeria/commit/dc28a586a118031efcc52841094f548e87fb8cd5", "message": "Merge branch 'master' into contextAwareEventLoop", "committedDate": "2020-06-30T03:00:56Z", "type": "commit"}, {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5", "url": "https://github.com/line/armeria/commit/dc28a586a118031efcc52841094f548e87fb8cd5", "message": "Merge branch 'master' into contextAwareEventLoop", "committedDate": "2020-06-30T03:00:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NjAwMQ==", "url": "https://github.com/line/armeria/pull/2834#discussion_r447476001", "bodyText": "Suggestion: How about calling executor.withoutContext() than throwing an IAE?", "author": "ikhoon", "createdAt": "2020-06-30T07:41:01Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * A delegating {@link ScheduledExecutorService} that sets the {@link RequestContext} before executing any\n+ * submitted tasks.\n+ */\n+public interface ContextAwareScheduledExecutorService extends ScheduledExecutorService {\n+\n+    /**\n+     * Returns a new {@link ContextAwareScheduledExecutorService} that sets the specified\n+     * {@link RequestContext} before executing any submitted tasks.\n+     */\n+    static ContextAwareScheduledExecutorService of(\n+            RequestContext context, ScheduledExecutorService executor) {\n+        requireNonNull(context, \"context\");\n+        requireNonNull(executor, \"executor\");\n+        if (executor instanceof ContextAwareScheduledExecutorService) {\n+            final RequestContext ctx = ((ContextAwareScheduledExecutorService) executor).context();\n+            if (context == ctx) {\n+                return (ContextAwareScheduledExecutorService) executor;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"cannot create a \" + ContextAwareScheduledExecutorService.class.getSimpleName() +\n+                    \" using another \" + executor);", "originalCommit": "dc28a586a118031efcc52841094f548e87fb8cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1MjU2OQ==", "url": "https://github.com/line/armeria/pull/2834#discussion_r447652569", "bodyText": "I don't want to do that because the RequestContext is used for scoping and if it's the different context, it could mean that the request scope is mixed. So I think we should throw an IAE.", "author": "minwoox", "createdAt": "2020-06-30T12:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NjAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "65af4df2ac34c287d15cb51e36c830be5ea25ed4", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java b/core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java\nindex 8499d0639..27f184379 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java\n\n@@ -13,9 +13,9 @@\n  * License for the specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package com.linecorp.armeria.common;\n \n+import static com.linecorp.armeria.common.RequestContextUtil.validateSameCtx;\n import static java.util.Objects.requireNonNull;\n \n import java.util.concurrent.ScheduledExecutorService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3ODMzOQ==", "url": "https://github.com/line/armeria/pull/2834#discussion_r447478339", "bodyText": "Could be removed?", "author": "ikhoon", "createdAt": "2020-06-30T07:45:00Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.base.MoreObjects;\n+\n+final class DefaultContextAwareScheduledExecutorService\n+        extends ContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n+\n+    private final ScheduledExecutorService executor;\n+\n+    DefaultContextAwareScheduledExecutorService(\n+            RequestContext context, ScheduledExecutorService executor) {\n+        super(context, executor);\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Returns the {@link ScheduledExecutorService} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */", "originalCommit": "dc28a586a118031efcc52841094f548e87fb8cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5MDQ5Mg==", "url": "https://github.com/line/armeria/pull/2834#discussion_r447490492", "bodyText": "Forgot to remove this. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-06-30T08:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3ODMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "65af4df2ac34c287d15cb51e36c830be5ea25ed4", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java b/core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java\nindex 715ee9fd0..a6957f2ab 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java\n\n@@ -23,7 +23,7 @@ import java.util.concurrent.TimeUnit;\n import com.google.common.base.MoreObjects;\n \n final class DefaultContextAwareScheduledExecutorService\n-        extends ContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n+        extends DefaultContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n \n     private final ScheduledExecutorService executor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3ODQ5OA==", "url": "https://github.com/line/armeria/pull/2834#discussion_r447478498", "bodyText": "Could be removed?", "author": "ikhoon", "createdAt": "2020-06-30T07:45:13Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.base.MoreObjects;\n+\n+final class DefaultContextAwareScheduledExecutorService\n+        extends ContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n+\n+    private final ScheduledExecutorService executor;\n+\n+    DefaultContextAwareScheduledExecutorService(\n+            RequestContext context, ScheduledExecutorService executor) {\n+        super(context, executor);\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Returns the {@link ScheduledExecutorService} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */\n+    @Override\n+    public ScheduledExecutorService withoutContext() {\n+        return executor;\n+    }\n+\n+    /**\n+     * Returns the {@link RequestContext} that is specified when creating\n+     * this {@link ContextAwareScheduledExecutorService}.\n+     */", "originalCommit": "dc28a586a118031efcc52841094f548e87fb8cd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65af4df2ac34c287d15cb51e36c830be5ea25ed4", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java b/core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java\nindex 715ee9fd0..a6957f2ab 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java\n\n@@ -23,7 +23,7 @@ import java.util.concurrent.TimeUnit;\n import com.google.common.base.MoreObjects;\n \n final class DefaultContextAwareScheduledExecutorService\n-        extends ContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n+        extends DefaultContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n \n     private final ScheduledExecutorService executor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MTM3Nw==", "url": "https://github.com/line/armeria/pull/2834#discussion_r447481377", "bodyText": "Don't we need to check whether the specified executor is ContextAwareExecutorService like you did in ContextAwareScheduledExecutorService.of?", "author": "ikhoon", "createdAt": "2020-06-30T07:49:57Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -469,15 +481,15 @@ default Executor makeContextAware(Executor executor) {\n      * sure to propagate the current {@link RequestContext} into the callback execution.\n      */\n     default ExecutorService makeContextAware(ExecutorService executor) {", "originalCommit": "dc28a586a118031efcc52841094f548e87fb8cd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65af4df2ac34c287d15cb51e36c830be5ea25ed4", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\nindex 67777a3a7..3439c1cb0 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n\n@@ -481,7 +482,7 @@ public interface RequestContext {\n      * sure to propagate the current {@link RequestContext} into the callback execution.\n      */\n     default ExecutorService makeContextAware(ExecutorService executor) {\n-        return new ContextAwareExecutorService(this, executor);\n+        return ContextAwareExecutorService.of(this, executor);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MjAxNw==", "url": "https://github.com/line/armeria/pull/2834#discussion_r447482017", "bodyText": "Ditto, need to check logger is ContextAwareLogger?", "author": "ikhoon", "createdAt": "2020-06-30T07:50:48Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -587,7 +599,7 @@ default Runnable makeContextAware(Runnable runnable) {\n      * @param logger the {@link Logger} to decorate.\n      */\n     default Logger makeContextAware(Logger logger) {", "originalCommit": "dc28a586a118031efcc52841094f548e87fb8cd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65af4df2ac34c287d15cb51e36c830be5ea25ed4", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\nindex 67777a3a7..3439c1cb0 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n\n@@ -599,7 +618,7 @@ public interface RequestContext {\n      * @param logger the {@link Logger} to decorate.\n      */\n     default Logger makeContextAware(Logger logger) {\n-        return new ContextAwareLogger(this, requireNonNull(logger, \"logger\"));\n+        return ContextAwareLogger.of(this, logger);\n     }\n \n     /**\n"}}, {"oid": "65af4df2ac34c287d15cb51e36c830be5ea25ed4", "url": "https://github.com/line/armeria/commit/65af4df2ac34c287d15cb51e36c830be5ea25ed4", "message": "Add ContextHolder", "committedDate": "2020-06-30T12:34:15Z", "type": "commit"}, {"oid": "943a585a285149eb43b18abbe67d28b9cf144d28", "url": "https://github.com/line/armeria/commit/943a585a285149eb43b18abbe67d28b9cf144d28", "message": "Use new year", "committedDate": "2020-06-30T12:41:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MzIzMg==", "url": "https://github.com/line/armeria/pull/2834#discussion_r448153232", "bodyText": "validate -> ensure?", "author": "trustin", "createdAt": "2020-07-01T06:54:38Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextUtil.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+final class RequestContextUtil {\n+\n+    static void validateSameCtx(RequestContext ctx, ContextHolder contextHolder, Class<?> type) {", "originalCommit": "65af4df2ac34c287d15cb51e36c830be5ea25ed4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1NTkzMg==", "url": "https://github.com/line/armeria/pull/2834#discussion_r448155932", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-07-01T07:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MzIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "23d6398b6c6f908904cd1aa6b2f70ac3c870c3dc", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/common/RequestContextUtil.java\nindex b9d010aa3..bdac16231 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContextUtil.java\n\n@@ -17,7 +17,7 @@ package com.linecorp.armeria.common;\n \n final class RequestContextUtil {\n \n-    static void validateSameCtx(RequestContext ctx, ContextHolder contextHolder, Class<?> type) {\n+    static void ensureSameCtx(RequestContext ctx, ContextHolder contextHolder, Class<?> type) {\n         if (ctx != contextHolder.context()) {\n             throw new IllegalArgumentException(\n                     \"cannot create a \" + type.getSimpleName() + \" using another \" + contextHolder);\n"}}, {"oid": "23d6398b6c6f908904cd1aa6b2f70ac3c870c3dc", "url": "https://github.com/line/armeria/commit/23d6398b6c6f908904cd1aa6b2f70ac3c870c3dc", "message": "Address the comment by @trustin", "committedDate": "2020-07-01T07:00:15Z", "type": "commit"}]}