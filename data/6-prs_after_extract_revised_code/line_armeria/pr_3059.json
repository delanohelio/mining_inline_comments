{"pr_number": 3059, "pr_title": "Add `HttpResponse.ofRedirect()`", "pr_createdAt": "2020-09-14T11:22:10Z", "pr_url": "https://github.com/line/armeria/pull/3059", "timeline": [{"oid": "6c920bc8bcdc1934c4819c428f4d90696bdd1a8d", "url": "https://github.com/line/armeria/commit/6c920bc8bcdc1934c4819c428f4d90696bdd1a8d", "message": "add redirect response in HttpResponse #914", "committedDate": "2020-09-14T11:41:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4ODQzMQ==", "url": "https://github.com/line/armeria/pull/3059#discussion_r488588431", "bodyText": "Would recommend either requiring the redirect type or at least making the default temporary. If someone accidentally uses this for permanent redirect without knowing it could create an unrecoverable situation.", "author": "anuraaga", "createdAt": "2020-09-15T11:23:15Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,40 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the permanent redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(String location) {\n+        requireNonNull(location, \"location\");\n+        return of(ResponseHeaders.of(RedirectType.PERMANENT.toHttpStatus(), HttpHeaderNames.LOCATION, location));", "originalCommit": "6c920bc8bcdc1934c4819c428f4d90696bdd1a8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYzMjYzMg==", "url": "https://github.com/line/armeria/pull/3059#discussion_r488632632", "bodyText": "I fixed it to Temporary redirection when not requiring redirection type.\nThank you.", "author": "cnabro", "createdAt": "2020-09-15T12:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4ODQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f0aac93d55a15e5379422986abbea81a9dfac0f6", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\nindex 44bd69c6b..50a8a96b4 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n\n@@ -391,19 +391,21 @@ public interface HttpResponse extends Response, StreamMessage<HttpObject> {\n     }\n \n     /**\n-     * Creates a new HTTP response of the permanent redirect to specific location.\n+     * Creates a new HTTP response of the temporary redirect to specific location.\n      */\n     static HttpResponse ofRedirect(String location) {\n         requireNonNull(location, \"location\");\n-        return of(ResponseHeaders.of(RedirectType.PERMANENT.toHttpStatus(), HttpHeaderNames.LOCATION, location));\n+        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,\n+            location));\n     }\n \n     /**\n-     * Creates a new HTTP response of the permanent redirect to specific location using string format.\n+     * Creates a new HTTP response of the temporary redirect to specific location using string format.\n      */\n     static HttpResponse ofRedirect(String format, Object... args) {\n         requireNonNull(format, \"format\");\n-        return of(ResponseHeaders.of(RedirectType.PERMANENT.toHttpStatus(), HttpHeaderNames.LOCATION, String.format(format, args)));\n+        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,\n+            String.format(format, args)));\n     }\n \n     /**\n"}}, {"oid": "f0aac93d55a15e5379422986abbea81a9dfac0f6", "url": "https://github.com/line/armeria/commit/f0aac93d55a15e5379422986abbea81a9dfac0f6", "message": "add redirect response in HttpResponse #914", "committedDate": "2020-09-15T12:36:15Z", "type": "commit"}, {"oid": "f0aac93d55a15e5379422986abbea81a9dfac0f6", "url": "https://github.com/line/armeria/commit/f0aac93d55a15e5379422986abbea81a9dfac0f6", "message": "add redirect response in HttpResponse #914", "committedDate": "2020-09-15T12:36:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5ODc3OQ==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498298779", "bodyText": "Could instead forward the call to ofRedirect(RedirectType, ...).", "author": "trustin", "createdAt": "2020-10-01T14:41:57Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,43 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the temporary redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(String location) {\n+        requireNonNull(location, \"location\");\n+        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,\n+            location));\n+    }\n+\n+    /**\n+     * Creates a new HTTP response of the temporary redirect to specific location using string format.\n+     */\n+    static HttpResponse ofRedirect(String format, Object... args) {\n+        requireNonNull(format, \"format\");\n+        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,", "originalCommit": "f0aac93d55a15e5379422986abbea81a9dfac0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3200be61f73df2ce28e8136eed425e3df6b4185", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\nindex 50a8a96b4..287bc329b 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n\n@@ -391,40 +391,42 @@ public interface HttpResponse extends Response, StreamMessage<HttpObject> {\n     }\n \n     /**\n-     * Creates a new HTTP response of the temporary redirect to specific location.\n+     * Creates a new HTTP response of the redirect to specific location.\n      */\n-    static HttpResponse ofRedirect(String location) {\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String location) {\n+        requireNonNull(redirectStatus, \"redirectStatus\");\n         requireNonNull(location, \"location\");\n-        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,\n-            location));\n+        if (redirectStatus.compareTo(HttpStatus.MULTIPLE_CHOICES) < 0 ||\n+            redirectStatus.compareTo(HttpStatus.TEMPORARY_REDIRECT) > 0) {\n+            throw new IllegalArgumentException(\"redirectStatus: \" + redirectStatus + \" (expected: 300 .. 307)\");\n+        }\n+\n+        return of(ResponseHeaders.of(redirectStatus, HttpHeaderNames.LOCATION, location));\n     }\n \n     /**\n-     * Creates a new HTTP response of the temporary redirect to specific location using string format.\n+     * Creates a new HTTP response of the redirect to specific location using string format.\n      */\n-    static HttpResponse ofRedirect(String format, Object... args) {\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String format, Object... args) {\n         requireNonNull(format, \"format\");\n-        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,\n-            String.format(format, args)));\n+\n+        return ofRedirect(redirectStatus, String.format(format, args));\n     }\n \n     /**\n-     * Creates a new HTTP response of the redirect to specific location.\n+     * Creates a new HTTP response of the temporary redirect to specific location.\n      */\n-    static HttpResponse ofRedirect(RedirectType redirectType, String location) {\n-        requireNonNull(redirectType, \"redirectType\");\n-        requireNonNull(location, \"location\");\n-        return of(ResponseHeaders.of(redirectType.toHttpStatus(), HttpHeaderNames.LOCATION, location));\n+    static HttpResponse ofRedirect(String location) {\n+        return ofRedirect(HttpStatus.TEMPORARY_REDIRECT, location);\n     }\n \n     /**\n-     * Creates a new HTTP response of the redirect to specific location using string format.\n+     * Creates a new HTTP response of the temporary redirect to specific location using string format.\n      */\n-    static HttpResponse ofRedirect(RedirectType redirectType, String format, Object... args) {\n-        requireNonNull(redirectType, \"redirectType\");\n+    static HttpResponse ofRedirect(String format, Object... args) {\n         requireNonNull(format, \"format\");\n-        return of(ResponseHeaders.of(redirectType.toHttpStatus(), HttpHeaderNames.LOCATION,\n-            String.format(format, args)));\n+\n+        return ofRedirect(HttpStatus.TEMPORARY_REDIRECT, String.format(format, args));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5ODg0NA==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498298844", "bodyText": "Could instead forward the call to ofRedirect(RedirectType, ...).", "author": "trustin", "createdAt": "2020-10-01T14:42:04Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,43 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the temporary redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(String location) {\n+        requireNonNull(location, \"location\");\n+        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,", "originalCommit": "f0aac93d55a15e5379422986abbea81a9dfac0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3200be61f73df2ce28e8136eed425e3df6b4185", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\nindex 50a8a96b4..287bc329b 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n\n@@ -391,40 +391,42 @@ public interface HttpResponse extends Response, StreamMessage<HttpObject> {\n     }\n \n     /**\n-     * Creates a new HTTP response of the temporary redirect to specific location.\n+     * Creates a new HTTP response of the redirect to specific location.\n      */\n-    static HttpResponse ofRedirect(String location) {\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String location) {\n+        requireNonNull(redirectStatus, \"redirectStatus\");\n         requireNonNull(location, \"location\");\n-        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,\n-            location));\n+        if (redirectStatus.compareTo(HttpStatus.MULTIPLE_CHOICES) < 0 ||\n+            redirectStatus.compareTo(HttpStatus.TEMPORARY_REDIRECT) > 0) {\n+            throw new IllegalArgumentException(\"redirectStatus: \" + redirectStatus + \" (expected: 300 .. 307)\");\n+        }\n+\n+        return of(ResponseHeaders.of(redirectStatus, HttpHeaderNames.LOCATION, location));\n     }\n \n     /**\n-     * Creates a new HTTP response of the temporary redirect to specific location using string format.\n+     * Creates a new HTTP response of the redirect to specific location using string format.\n      */\n-    static HttpResponse ofRedirect(String format, Object... args) {\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String format, Object... args) {\n         requireNonNull(format, \"format\");\n-        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,\n-            String.format(format, args)));\n+\n+        return ofRedirect(redirectStatus, String.format(format, args));\n     }\n \n     /**\n-     * Creates a new HTTP response of the redirect to specific location.\n+     * Creates a new HTTP response of the temporary redirect to specific location.\n      */\n-    static HttpResponse ofRedirect(RedirectType redirectType, String location) {\n-        requireNonNull(redirectType, \"redirectType\");\n-        requireNonNull(location, \"location\");\n-        return of(ResponseHeaders.of(redirectType.toHttpStatus(), HttpHeaderNames.LOCATION, location));\n+    static HttpResponse ofRedirect(String location) {\n+        return ofRedirect(HttpStatus.TEMPORARY_REDIRECT, location);\n     }\n \n     /**\n-     * Creates a new HTTP response of the redirect to specific location using string format.\n+     * Creates a new HTTP response of the temporary redirect to specific location using string format.\n      */\n-    static HttpResponse ofRedirect(RedirectType redirectType, String format, Object... args) {\n-        requireNonNull(redirectType, \"redirectType\");\n+    static HttpResponse ofRedirect(String format, Object... args) {\n         requireNonNull(format, \"format\");\n-        return of(ResponseHeaders.of(redirectType.toHttpStatus(), HttpHeaderNames.LOCATION,\n-            String.format(format, args)));\n+\n+        return ofRedirect(HttpStatus.TEMPORARY_REDIRECT, String.format(format, args));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDM3OQ==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498300379", "bodyText": "How about removing this and using HttpStatus instead? We could add the same validation we did in: https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/RedirectService.java#L244-L247", "author": "trustin", "createdAt": "2020-10-01T14:44:08Z", "path": "core/src/main/java/com/linecorp/armeria/common/RedirectType.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+/**\n+ * RedirectType for simply redirection in {@link HttpResponse}.\n+ */\n+public final class RedirectType {", "originalCommit": "f0aac93d55a15e5379422986abbea81a9dfac0f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MTIyMQ==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498341221", "bodyText": "OK. I fixed this PR like RedirectService using HttpStatus. And refactored reusing ofRedirect method.", "author": "cnabro", "createdAt": "2020-10-01T15:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NTIxNg==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498345216", "bodyText": "That was fast! Thank you, @cnabro \ud83d\ude47", "author": "trustin", "createdAt": "2020-10-01T15:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a3200be61f73df2ce28e8136eed425e3df6b4185", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RedirectType.java b/core/src/main/java/com/linecorp/armeria/common/RedirectType.java\ndeleted file mode 100644\nindex 20993360c..000000000\n--- a/core/src/main/java/com/linecorp/armeria/common/RedirectType.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*\n- * Copyright 2016 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.common;\n-\n-/**\n- * RedirectType for simply redirection in {@link HttpResponse}.\n- */\n-public final class RedirectType {\n-    public static final RedirectType PERMANENT = newConstant(HttpStatus.MOVED_PERMANENTLY);\n-    public static final RedirectType TEMPORARY = newConstant(HttpStatus.TEMPORARY_REDIRECT);\n-\n-    private static RedirectType newConstant(HttpStatus httpStatus) {\n-        return new RedirectType(httpStatus);\n-    }\n-\n-    private final HttpStatus httpStatus;\n-\n-    private RedirectType(HttpStatus httpStatus) {\n-        this.httpStatus = httpStatus;\n-    }\n-\n-    /**\n-     * Returns the {@link HttpStatus}.\n-     */\n-    public HttpStatus toHttpStatus() {\n-        return httpStatus;\n-    }\n-}\n"}}, {"oid": "a3200be61f73df2ce28e8136eed425e3df6b4185", "url": "https://github.com/line/armeria/commit/a3200be61f73df2ce28e8136eed425e3df6b4185", "message": "change ofRedirect parameter RedirectType to HttpStatus", "committedDate": "2020-10-01T15:35:56Z", "type": "commit"}, {"oid": "6c03e7797d5583a88c80b96f82412e8a8caa1ac1", "url": "https://github.com/line/armeria/commit/6c03e7797d5583a88c80b96f82412e8a8caa1ac1", "message": "Add testcase for HttpResponse.ofRedirect", "committedDate": "2020-10-01T15:36:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MzkxNw==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498343917", "bodyText": "Could also add requireNonNull for args", "author": "trustin", "createdAt": "2020-10-01T15:42:57Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,45 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String location) {\n+        requireNonNull(redirectStatus, \"redirectStatus\");\n+        requireNonNull(location, \"location\");\n+        if (redirectStatus.compareTo(HttpStatus.MULTIPLE_CHOICES) < 0 ||\n+            redirectStatus.compareTo(HttpStatus.TEMPORARY_REDIRECT) > 0) {\n+            throw new IllegalArgumentException(\"redirectStatus: \" + redirectStatus + \" (expected: 300 .. 307)\");\n+        }\n+\n+        return of(ResponseHeaders.of(redirectStatus, HttpHeaderNames.LOCATION, location));\n+    }\n+\n+    /**\n+     * Creates a new HTTP response of the redirect to specific location using string format.\n+     */\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String format, Object... args) {\n+        requireNonNull(format, \"format\");", "originalCommit": "6c03e7797d5583a88c80b96f82412e8a8caa1ac1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NTEyMw==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498365123", "bodyText": "Added args check and test cases more.", "author": "cnabro", "createdAt": "2020-10-01T16:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MzkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "bc17444e1b4eb86d48a3a3b7ac975dc172e882fa", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\nindex 287bc329b..9ae7214f6 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n\n@@ -409,6 +409,7 @@ public interface HttpResponse extends Response, StreamMessage<HttpObject> {\n      */\n     static HttpResponse ofRedirect(HttpStatus redirectStatus, String format, Object... args) {\n         requireNonNull(format, \"format\");\n+        requireNonNull(args, \"args\");\n \n         return ofRedirect(redirectStatus, String.format(format, args));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NDY0Mg==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498344642", "bodyText": "Could add an assertion for headers as well", "author": "trustin", "createdAt": "2020-10-01T15:44:01Z", "path": "core/src/test/java/com/linecorp/armeria/common/HttpResponseTest.java", "diffHunk": "@@ -90,4 +90,17 @@ void statusOfResponseHeadersShouldNotBeInformational() {\n                                                  HttpData.ofUtf8(\"bob\")))\n                 .isInstanceOf(IllegalArgumentException.class).hasMessageContaining(\"non-1xx\");\n     }\n+\n+    @Test\n+    void ofRedirect() {\n+        final HttpResponse res = HttpResponse.ofRedirect(\"locationFor\");\n+        final AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n+        assertThat(aggregatedRes.status()).isEqualTo(HttpStatus.TEMPORARY_REDIRECT);", "originalCommit": "6c03e7797d5583a88c80b96f82412e8a8caa1ac1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NTg1NA==", "url": "https://github.com/line/armeria/pull/3059#discussion_r498365854", "bodyText": "Did you mean check location header?\nI added this like below.\nassertThat(aggregatedRes.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(\"locationFor\");", "author": "cnabro", "createdAt": "2020-10-01T16:16:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NDY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ced14d4a89d823cf48963ced89b20d92b1b1d9c8", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/common/HttpResponseTest.java b/core/src/test/java/com/linecorp/armeria/common/HttpResponseTest.java\nindex b926f325c..8db2515fd 100644\n--- a/core/src/test/java/com/linecorp/armeria/common/HttpResponseTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/common/HttpResponseTest.java\n\n@@ -92,10 +92,35 @@ class HttpResponseTest {\n     }\n \n     @Test\n-    void ofRedirect() {\n+    void ofRedirectTemporary() {\n         final HttpResponse res = HttpResponse.ofRedirect(\"locationFor\");\n         final AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n         assertThat(aggregatedRes.status()).isEqualTo(HttpStatus.TEMPORARY_REDIRECT);\n+        assertThat(aggregatedRes.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(\"locationFor\");\n+    }\n+\n+    @Test\n+    void ofRedirectTemporaryUsingFormat() {\n+        final HttpResponse res = HttpResponse.ofRedirect(\"location%s\", \"For\");\n+        final AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n+        assertThat(aggregatedRes.status()).isEqualTo(HttpStatus.TEMPORARY_REDIRECT);\n+        assertThat(aggregatedRes.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(\"locationFor\");\n+    }\n+\n+    @Test\n+    void ofRedirectPermanently() {\n+        final HttpResponse res = HttpResponse.ofRedirect(HttpStatus.MOVED_PERMANENTLY, \"locationFor\");\n+        final AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n+        assertThat(aggregatedRes.status()).isEqualTo(HttpStatus.MOVED_PERMANENTLY);\n+        assertThat(aggregatedRes.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(\"locationFor\");\n+    }\n+\n+    @Test\n+    void ofRedirectPermanentlyUsingStringFormat() {\n+        final HttpResponse res = HttpResponse.ofRedirect(HttpStatus.MOVED_PERMANENTLY, \"location%s\", \"For\");\n+        final AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n+        assertThat(aggregatedRes.status()).isEqualTo(HttpStatus.MOVED_PERMANENTLY);\n+        assertThat(aggregatedRes.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(\"locationFor\");\n     }\n \n     @Test\n"}}, {"oid": "bc17444e1b4eb86d48a3a3b7ac975dc172e882fa", "url": "https://github.com/line/armeria/commit/bc17444e1b4eb86d48a3a3b7ac975dc172e882fa", "message": "add ofRedirect parameter requiring check", "committedDate": "2020-10-01T15:46:48Z", "type": "commit"}, {"oid": "ced14d4a89d823cf48963ced89b20d92b1b1d9c8", "url": "https://github.com/line/armeria/commit/ced14d4a89d823cf48963ced89b20d92b1b1d9c8", "message": "Add more testcase for HttpResponse.ofRedirect", "committedDate": "2020-10-01T16:13:14Z", "type": "commit"}]}