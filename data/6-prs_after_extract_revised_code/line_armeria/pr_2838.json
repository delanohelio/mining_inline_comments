{"pr_number": 2838, "pr_title": "Deprecate Spring registration beans", "pr_createdAt": "2020-06-25T14:33:10Z", "pr_url": "https://github.com/line/armeria/pull/2838", "timeline": [{"oid": "dd517e90b0526a44ff6020d9badc5efe49a3f90c", "url": "https://github.com/line/armeria/commit/dd517e90b0526a44ff6020d9badc5efe49a3f90c", "message": "Deprecate Spring registration beans\n\nMotivation:\n\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the feautes to Spring registration beans.\nThe registration beans switch to `ArmeriaServerConfigrator` and `DocServiceConfigrator` without difficulty.\nSee #2787 for more inforation.\n\nModifications:\n\n- Deprecate HttpServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public HttpServiceRegistrationBean myService() {\n      return new HttpServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(new MyService())\n              .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n              .setDecorators(LoggingService.newDecorator());\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/ok\")\n                .methods(HttpMethod.GET, HttpMethod.POST)\n                .defaultServiceName(\"myService\")\n                .decorator(LoggingService.newDecorator())\n                .build(new MyService());\n      };\n  }\n  ```\n- Deprecate AnnotatedServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public AnnotatedServiceRegistrationBean myService() {\n      return new AnnotatedServiceRegistrationBean()\n              .setServiceName(\"myAnnotatedService\")\n              .setPathPrefix(\"/my_service\")\n              .setService(new MyAnnotatedService())\n              .setDecorators(LoggingService.newDecorator())\n              .setExceptionHandlers(new MyExceptionHandler())\n              .setRequestConverters(new MyRequestConverter())\n              .setResponseConverters(new MyResponseConverter())\n              .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n              .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.annotatedService()\n                .pathPrefix(\"/my_service\")\n                .exceptionHandlers(new MyExceptionHandler())\n                .requestConverters(new MyRequestConverter())\n                .responseConverters(new MyResponseConverter())\n                .decorator(LoggingService.newDecorator())\n                .build(new MyAnnoatedService());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                             \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                    .exampleHttpHeaders(MyAnnotatedService.class,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n      };\n  }\n  ```\n- Deprecate GrpcServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public GrpcServiceRegistrationBean myService() {\n      return new GrpcServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(GrpcService.builder()\n                                     .addService(new MyService())\n                                     .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                     .enableUnframedRequests(true)\n                                     .build())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(GrpcExampleRequest.of(\n                     MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                     HelloRequest.newBuilder().setName(\"Armeria\").build()))\n              .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my-service\")\n                .decorator(LoggingService.newDecorator())\n                .build(GrpcService.builder()\n                                  .addService(new MyService())\n                                  .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                  .enableUnframedRequests(true)\n                                  .build());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                             HelloRequest.newBuilder().setName(\"Armeria\").build())\n                    .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\"))\n      };\n  }\n  ```\n- Deprecate ThriftServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public ThriftServiceRegistrationBean okService() {\n      return new ThriftServiceRegistrationBean()\n              .setServiceName(\"myThriftService\")\n              .setPath(\"/my_service\")\n              .setService(new MyThriftService())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n              .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my_service\")\n                .decorator(LoggingService.newDecorator())\n                .build(THttpService.of(new MyThriftService()));\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                    .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n      };\n  }\n  ```\n\nResult:\n\n- Clean up mismatch and duplicate code.\n- Close #2787", "committedDate": "2020-06-25T14:34:23Z", "type": "forcePushed"}, {"oid": "59c4b52f6449d68dd87fd1ff38300ff4b91f1f4c", "url": "https://github.com/line/armeria/commit/59c4b52f6449d68dd87fd1ff38300ff4b91f1f4c", "message": "Deprecate Spring registration beans\n\nMotivation:\n\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the feautes to Spring registration beans.\nThe registration beans switch to `ArmeriaServerConfigrator` and `DocServiceConfigrator` without difficulty.\nSee #2787 for more inforation.\n\nModifications:\n\n- Deprecate HttpServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public HttpServiceRegistrationBean myService() {\n      return new HttpServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(new MyService())\n              .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n              .setDecorators(LoggingService.newDecorator());\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/ok\")\n                .methods(HttpMethod.GET, HttpMethod.POST)\n                .defaultServiceName(\"myService\")\n                .decorator(LoggingService.newDecorator())\n                .build(new MyService());\n      };\n  }\n  ```\n- Deprecate AnnotatedServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public AnnotatedServiceRegistrationBean myService() {\n      return new AnnotatedServiceRegistrationBean()\n              .setServiceName(\"myAnnotatedService\")\n              .setPathPrefix(\"/my_service\")\n              .setService(new MyAnnotatedService())\n              .setDecorators(LoggingService.newDecorator())\n              .setExceptionHandlers(new MyExceptionHandler())\n              .setRequestConverters(new MyRequestConverter())\n              .setResponseConverters(new MyResponseConverter())\n              .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n              .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.annotatedService()\n                .pathPrefix(\"/my_service\")\n                .exceptionHandlers(new MyExceptionHandler())\n                .requestConverters(new MyRequestConverter())\n                .responseConverters(new MyResponseConverter())\n                .decorator(LoggingService.newDecorator())\n                .build(new MyAnnoatedService());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                             \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                    .exampleHttpHeaders(MyAnnotatedService.class,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n      };\n  }\n  ```\n- Deprecate GrpcServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public GrpcServiceRegistrationBean myService() {\n      return new GrpcServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(GrpcService.builder()\n                                     .addService(new MyService())\n                                     .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                     .enableUnframedRequests(true)\n                                     .build())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(GrpcExampleRequest.of(\n                     MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                     HelloRequest.newBuilder().setName(\"Armeria\").build()))\n              .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my-service\")\n                .decorator(LoggingService.newDecorator())\n                .build(GrpcService.builder()\n                                  .addService(new MyService())\n                                  .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                  .enableUnframedRequests(true)\n                                  .build());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                             HelloRequest.newBuilder().setName(\"Armeria\").build())\n                    .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\"))\n      };\n  }\n  ```\n- Deprecate ThriftServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public ThriftServiceRegistrationBean okService() {\n      return new ThriftServiceRegistrationBean()\n              .setServiceName(\"myThriftService\")\n              .setPath(\"/my_service\")\n              .setService(new MyThriftService())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n              .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my_service\")\n                .decorator(LoggingService.newDecorator())\n                .build(THttpService.of(new MyThriftService()));\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                    .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n      };\n  }\n  ```\n\nResult:\n\n- Clean up mismatch and duplicate code.\n- Close #2787", "committedDate": "2020-06-25T14:36:07Z", "type": "commit"}, {"oid": "59c4b52f6449d68dd87fd1ff38300ff4b91f1f4c", "url": "https://github.com/line/armeria/commit/59c4b52f6449d68dd87fd1ff38300ff4b91f1f4c", "message": "Deprecate Spring registration beans\n\nMotivation:\n\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the feautes to Spring registration beans.\nThe registration beans switch to `ArmeriaServerConfigrator` and `DocServiceConfigrator` without difficulty.\nSee #2787 for more inforation.\n\nModifications:\n\n- Deprecate HttpServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public HttpServiceRegistrationBean myService() {\n      return new HttpServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(new MyService())\n              .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n              .setDecorators(LoggingService.newDecorator());\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/ok\")\n                .methods(HttpMethod.GET, HttpMethod.POST)\n                .defaultServiceName(\"myService\")\n                .decorator(LoggingService.newDecorator())\n                .build(new MyService());\n      };\n  }\n  ```\n- Deprecate AnnotatedServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public AnnotatedServiceRegistrationBean myService() {\n      return new AnnotatedServiceRegistrationBean()\n              .setServiceName(\"myAnnotatedService\")\n              .setPathPrefix(\"/my_service\")\n              .setService(new MyAnnotatedService())\n              .setDecorators(LoggingService.newDecorator())\n              .setExceptionHandlers(new MyExceptionHandler())\n              .setRequestConverters(new MyRequestConverter())\n              .setResponseConverters(new MyResponseConverter())\n              .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n              .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.annotatedService()\n                .pathPrefix(\"/my_service\")\n                .exceptionHandlers(new MyExceptionHandler())\n                .requestConverters(new MyRequestConverter())\n                .responseConverters(new MyResponseConverter())\n                .decorator(LoggingService.newDecorator())\n                .build(new MyAnnoatedService());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                             \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                    .exampleHttpHeaders(MyAnnotatedService.class,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n      };\n  }\n  ```\n- Deprecate GrpcServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public GrpcServiceRegistrationBean myService() {\n      return new GrpcServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(GrpcService.builder()\n                                     .addService(new MyService())\n                                     .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                     .enableUnframedRequests(true)\n                                     .build())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(GrpcExampleRequest.of(\n                     MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                     HelloRequest.newBuilder().setName(\"Armeria\").build()))\n              .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my-service\")\n                .decorator(LoggingService.newDecorator())\n                .build(GrpcService.builder()\n                                  .addService(new MyService())\n                                  .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                  .enableUnframedRequests(true)\n                                  .build());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                             HelloRequest.newBuilder().setName(\"Armeria\").build())\n                    .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\"))\n      };\n  }\n  ```\n- Deprecate ThriftServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public ThriftServiceRegistrationBean okService() {\n      return new ThriftServiceRegistrationBean()\n              .setServiceName(\"myThriftService\")\n              .setPath(\"/my_service\")\n              .setService(new MyThriftService())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n              .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my_service\")\n                .decorator(LoggingService.newDecorator())\n                .build(THttpService.of(new MyThriftService()));\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                    .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n      };\n  }\n  ```\n\nResult:\n\n- Clean up mismatch and duplicate code.\n- Close #2787", "committedDate": "2020-06-25T14:36:07Z", "type": "forcePushed"}, {"oid": "313839ce3c4e7f528bb5b5fdb031c1c9b604d4dc", "url": "https://github.com/line/armeria/commit/313839ce3c4e7f528bb5b5fdb031c1c9b604d4dc", "message": "Clean up Javadoc", "committedDate": "2020-06-25T14:54:15Z", "type": "commit"}, {"oid": "1d42fb98085b9564d6acdd889180a2b5d0c62ad5", "url": "https://github.com/line/armeria/commit/1d42fb98085b9564d6acdd889180a2b5d0c62ad5", "message": "Checkstyle", "committedDate": "2020-06-26T02:17:39Z", "type": "commit"}, {"oid": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "url": "https://github.com/line/armeria/commit/615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "message": "Fix Javadoc error", "committedDate": "2020-06-26T03:16:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MDk0OQ==", "url": "https://github.com/line/armeria/pull/2838#discussion_r445950949", "bodyText": "@deprecated Use {@link ServiceBindingBuilder#decorator(Function)} or\n            {@link AnnotatedServiceBindingBuilder#decorator(Function)}.", "author": "minwoox", "createdAt": "2020-06-26T03:39:22Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractServiceRegistrationBean.java", "diffHunk": "@@ -125,7 +142,10 @@ public final U setDecorators(\n     /**\n      * Sets the decorators of the annotated service object. {@code decorators} are applied to {@code service} in\n      * order.\n+     *\n+     * @deprecated Use {@link ServerBuilder#annotatedService(Object, Function, Object...)}.", "originalCommit": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4e54c700d8caaeff4d30db93dad0131039f67cf", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractServiceRegistrationBean.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractServiceRegistrationBean.java\nindex a4c41b7433..89d81d0714 100644\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractServiceRegistrationBean.java\n+++ b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractServiceRegistrationBean.java\n\n@@ -143,7 +143,8 @@ public class AbstractServiceRegistrationBean<T, U, V, W> {\n      * Sets the decorators of the annotated service object. {@code decorators} are applied to {@code service} in\n      * order.\n      *\n-     * @deprecated Use {@link ServerBuilder#annotatedService(Object, Function, Object...)}.\n+     * @deprecated Use {@link ServiceBindingBuilder#decorator(Function)} or\n+     *             {@link AnnotatedServiceBindingBuilder#decorator(Function)}.\n      */\n     @Deprecated\n     public final U setDecorators(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTUyNg==", "url": "https://github.com/line/armeria/pull/2838#discussion_r445951526", "bodyText": "extra )?", "author": "minwoox", "createdAt": "2020-06-26T03:42:24Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java", "diffHunk": "@@ -45,7 +48,35 @@\n  * >             .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  * > }\n  * }</pre>\n+ *\n+ * @deprecated Use {@link ServerBuilder#annotatedService()} via {@link ArmeriaServerConfigurator} and\n+ *             {@link DocServiceConfigurator}.\n+ *             <pre>{@code\n+ *             > @Bean\n+ *             > public ArmeriaServerConfigurator myService() {\n+ *             >     return server -> {\n+ *             >         server.annotatedService()\n+ *             >               .pathPrefix(\"/my_service\")\n+ *             >               .exceptionHandlers(new MyExceptionHandler())\n+ *             >               .requestConverters(new MyRequestConverter())\n+ *             >               .responseConverters(new MyResponseConverter())\n+ *             >               .decorator(LoggingService.newDecorator())\n+ *             >               .build(new MyAnnoatedService());\n+ *             >     };\n+ *             > }\n+ *\n+ *             > @Bean\n+ *             > public DocServiceConfigurator myServiceDoc() {\n+ *             >     return docService -> {\n+ *             >         docService.exampleRequestForMethod(MyAnnotatedService.class,\n+ *             >                                            \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n+ *             >                   .exampleHttpHeaders(MyAnnotatedService.class,\n+ *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\")));", "originalCommit": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4e54c700d8caaeff4d30db93dad0131039f67cf", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\nindex 70eda49099..ac21c11f49 100644\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\n+++ b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\n\n@@ -67,11 +67,11 @@ import com.linecorp.armeria.server.docs.DocServiceBuilder;\n  *\n  *             > @Bean\n  *             > public DocServiceConfigurator myServiceDoc() {\n- *             >     return docService -> {\n- *             >         docService.exampleRequestForMethod(MyAnnotatedService.class,\n- *             >                                            \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n- *             >                   .exampleHttpHeaders(MyAnnotatedService.class,\n- *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n+ *             >     return docServiceBuilder -> {\n+ *             >         docServiceBuilder.exampleRequestForMethod(MyAnnotatedService.class,\n+ *             >                                                   \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n+ *             >                          .exampleHttpHeaders(MyAnnotatedService.class,\n+ *             >                                              HttpHeaders.of(\"my-header\", \"headerVal\"));\n  *\n  *             >     };\n  *             > }}</pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTU3Mg==", "url": "https://github.com/line/armeria/pull/2838#discussion_r445951572", "bodyText": "extra }?", "author": "minwoox", "createdAt": "2020-06-26T03:42:34Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java", "diffHunk": "@@ -45,7 +48,35 @@\n  * >             .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  * > }\n  * }</pre>\n+ *\n+ * @deprecated Use {@link ServerBuilder#annotatedService()} via {@link ArmeriaServerConfigurator} and\n+ *             {@link DocServiceConfigurator}.\n+ *             <pre>{@code\n+ *             > @Bean\n+ *             > public ArmeriaServerConfigurator myService() {\n+ *             >     return server -> {\n+ *             >         server.annotatedService()\n+ *             >               .pathPrefix(\"/my_service\")\n+ *             >               .exceptionHandlers(new MyExceptionHandler())\n+ *             >               .requestConverters(new MyRequestConverter())\n+ *             >               .responseConverters(new MyResponseConverter())\n+ *             >               .decorator(LoggingService.newDecorator())\n+ *             >               .build(new MyAnnoatedService());\n+ *             >     };\n+ *             > }\n+ *\n+ *             > @Bean\n+ *             > public DocServiceConfigurator myServiceDoc() {\n+ *             >     return docService -> {\n+ *             >         docService.exampleRequestForMethod(MyAnnotatedService.class,\n+ *             >                                            \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n+ *             >                   .exampleHttpHeaders(MyAnnotatedService.class,\n+ *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n+ *\n+ *             >     };\n+ *             > }}</pre>", "originalCommit": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3MTUyNA==", "url": "https://github.com/line/armeria/pull/2838#discussion_r445971524", "bodyText": "This seems fine. One is for myServiceDoc() { and the other is for {@code. \ud83d\ude09", "author": "ikhoon", "createdAt": "2020-06-26T05:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3MTgyOA==", "url": "https://github.com/line/armeria/pull/2838#discussion_r445971828", "bodyText": "\ud83d\ude05", "author": "minwoox", "createdAt": "2020-06-26T05:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c4e54c700d8caaeff4d30db93dad0131039f67cf", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\nindex 70eda49099..ac21c11f49 100644\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\n+++ b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\n\n@@ -67,11 +67,11 @@ import com.linecorp.armeria.server.docs.DocServiceBuilder;\n  *\n  *             > @Bean\n  *             > public DocServiceConfigurator myServiceDoc() {\n- *             >     return docService -> {\n- *             >         docService.exampleRequestForMethod(MyAnnotatedService.class,\n- *             >                                            \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n- *             >                   .exampleHttpHeaders(MyAnnotatedService.class,\n- *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n+ *             >     return docServiceBuilder -> {\n+ *             >         docServiceBuilder.exampleRequestForMethod(MyAnnotatedService.class,\n+ *             >                                                   \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n+ *             >                          .exampleHttpHeaders(MyAnnotatedService.class,\n+ *             >                                              HttpHeaders.of(\"my-header\", \"headerVal\"));\n  *\n  *             >     };\n  *             > }}</pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTg5NA==", "url": "https://github.com/line/armeria/pull/2838#discussion_r445951894", "bodyText": "missing ;?", "author": "minwoox", "createdAt": "2020-06-26T03:44:21Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/GrpcServiceRegistrationBean.java", "diffHunk": "@@ -43,51 +44,107 @@\n  * >                                                      HttpHeaders.of(\"my-header\", \"headerVal\")));\n  * > }\n  * }</pre>\n+ *\n+ * @deprecated Use {@link ArmeriaServerConfigurator} and {@link DocServiceConfigurator}.\n+ *             <pre>{@code\n+ *             > @Bean\n+ *             > public ArmeriaServerConfigurator myService() {\n+ *             >     return server -> {\n+ *             >         server.route()\n+ *             >               .path(\"/my-service\")\n+ *             >               .decorator(LoggingService.newDecorator())\n+ *             >               .build(GrpcService.builder()\n+ *             >                                 .addService(new HelloService())\n+ *             >                                 .supportedSerializationFormats(\n+ *             >                                         GrpcSerializationFormats.values())\n+ *             >                                 .enableUnframedRequests(true)\n+ *             >                                 .build());\n+ *             >     };\n+ *             > }\n+ *\n+ *             > @Bean\n+ *             > public DocServiceConfigurator myServiceDoc() {\n+ *             >     return docService -> {\n+ *             >         docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n+ *             >                                            HelloRequest.newBuilder()\n+ *             >                                                        .setName(\"Armeria\").build())\n+ *             >                   .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n+ *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\"))", "originalCommit": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4e54c700d8caaeff4d30db93dad0131039f67cf", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/GrpcServiceRegistrationBean.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/GrpcServiceRegistrationBean.java\nindex a213f7f06f..eca3d7b0cd 100644\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/GrpcServiceRegistrationBean.java\n+++ b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/GrpcServiceRegistrationBean.java\n\n@@ -64,12 +64,12 @@ import com.linecorp.armeria.server.docs.DocServiceBuilder;\n  *\n  *             > @Bean\n  *             > public DocServiceConfigurator myServiceDoc() {\n- *             >     return docService -> {\n- *             >         docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n- *             >                                            HelloRequest.newBuilder()\n- *             >                                                        .setName(\"Armeria\").build())\n- *             >                   .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n- *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\"))\n+ *             >     return docServiceBuilder -> {\n+ *             >         docServiceBuilder.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n+ *             >                                                   HelloRequest.newBuilder()\n+ *             >                                                               .setName(\"Armeria\").build())\n+ *             >                          .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n+ *             >                                              HttpHeaders.of(\"my-header\", \"headerVal\"));\n  *             >     };\n  *             }}</pre>\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MjMxMQ==", "url": "https://github.com/line/armeria/pull/2838#discussion_r445952311", "bodyText": "docServiceBuilder to clarify?", "author": "minwoox", "createdAt": "2020-06-26T03:46:14Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java", "diffHunk": "@@ -45,7 +48,35 @@\n  * >             .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  * > }\n  * }</pre>\n+ *\n+ * @deprecated Use {@link ServerBuilder#annotatedService()} via {@link ArmeriaServerConfigurator} and\n+ *             {@link DocServiceConfigurator}.\n+ *             <pre>{@code\n+ *             > @Bean\n+ *             > public ArmeriaServerConfigurator myService() {\n+ *             >     return server -> {\n+ *             >         server.annotatedService()\n+ *             >               .pathPrefix(\"/my_service\")\n+ *             >               .exceptionHandlers(new MyExceptionHandler())\n+ *             >               .requestConverters(new MyRequestConverter())\n+ *             >               .responseConverters(new MyResponseConverter())\n+ *             >               .decorator(LoggingService.newDecorator())\n+ *             >               .build(new MyAnnoatedService());\n+ *             >     };\n+ *             > }\n+ *\n+ *             > @Bean\n+ *             > public DocServiceConfigurator myServiceDoc() {\n+ *             >     return docService -> {", "originalCommit": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4e54c700d8caaeff4d30db93dad0131039f67cf", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\nindex 70eda49099..ac21c11f49 100644\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\n+++ b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java\n\n@@ -67,11 +67,11 @@ import com.linecorp.armeria.server.docs.DocServiceBuilder;\n  *\n  *             > @Bean\n  *             > public DocServiceConfigurator myServiceDoc() {\n- *             >     return docService -> {\n- *             >         docService.exampleRequestForMethod(MyAnnotatedService.class,\n- *             >                                            \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n- *             >                   .exampleHttpHeaders(MyAnnotatedService.class,\n- *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n+ *             >     return docServiceBuilder -> {\n+ *             >         docServiceBuilder.exampleRequestForMethod(MyAnnotatedService.class,\n+ *             >                                                   \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n+ *             >                          .exampleHttpHeaders(MyAnnotatedService.class,\n+ *             >                                              HttpHeaders.of(\"my-header\", \"headerVal\"));\n  *\n  *             >     };\n  *             > }}</pre>\n"}}, {"oid": "c4e54c700d8caaeff4d30db93dad0131039f67cf", "url": "https://github.com/line/armeria/commit/c4e54c700d8caaeff4d30db93dad0131039f67cf", "message": "Address comments by @minwoox", "committedDate": "2020-06-26T05:19:11Z", "type": "commit"}, {"oid": "b5618b0891299eaf06f6932b885ba56637af8d6c", "url": "https://github.com/line/armeria/commit/b5618b0891299eaf06f6932b885ba56637af8d6c", "message": "Fix typo", "committedDate": "2020-06-26T05:22:28Z", "type": "commit"}]}