{"pr_number": 2610, "pr_title": "Provide a way to customize context propagation using its own storage", "pr_createdAt": "2020-03-19T02:39:58Z", "pr_url": "https://github.com/line/armeria/pull/2610", "timeline": [{"oid": "5488ed0174fad38cbc4e5717155515e789d55438", "url": "https://github.com/line/armeria/commit/5488ed0174fad38cbc4e5717155515e789d55438", "message": "Provide a way to customize context propagation using its own storage\nMotivation:\n\nModifications:\n- Add `ContextStorage` and its default implementation `ContextStorageThreadLocal`.\n- Add `ContextStorageProvier` so that a user customizes the `ContextStorage` using Java SPI\n\nResult:", "committedDate": "2020-03-19T02:35:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NjU2Ng==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394766566", "bodyText": "Asserts are often disabled, it's better to make it more explicit I think - can add an init method and call it in a static initializer instead.", "author": "anuraaga", "createdAt": "2020-03-19T03:09:38Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -560,6 +561,8 @@ private ClientFactoryOptions buildOptions() {\n      * Returns a newly-created {@link ClientFactory} based on the properties of this builder.\n      */\n     public ClientFactory build() {\n+        // To initialize the context storage when the factory is built not the first request is sent.", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3NzU4NQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394777585", "bodyText": "So you mean adding RequestContextUtil.init() and call it from the static initializer of ClientFactory? If init() doesn't do anything, isn't it disabled as well?", "author": "minwoox", "createdAt": "2020-03-19T03:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NjU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3ODMyNQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394778325", "bodyText": "Ah, you meant making contextStorage not final and initializing in init().", "author": "minwoox", "createdAt": "2020-03-19T03:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NjU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MTMxMA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394781310", "bodyText": "Ah nah I meant an empty method - it would still trigger classload and is a but clearer at the call site init() as a verb rather than just storage()", "author": "anuraaga", "createdAt": "2020-03-19T04:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NjU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java b/core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java\nindex 35af93a799..888184c16d 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java\n\n@@ -561,8 +561,7 @@ public final class ClientFactoryBuilder {\n      * Returns a newly-created {@link ClientFactory} based on the properties of this builder.\n      */\n     public ClientFactory build() {\n-        // To initialize the context storage when the factory is built not the first request is sent.\n-        assert RequestContextUtil.storage() != null;\n+        RequestContextUtil.init();\n         return new DefaultClientFactory(new HttpClientFactory(buildOptions()));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NjkyMQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394766921", "bodyText": "Not sure if it's better but RequestContextUtil could still expose the same static API as before without returning ContextStorage", "author": "anuraaga", "createdAt": "2020-03-19T03:11:18Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -322,24 +323,25 @@ static ClientRequestContextBuilder builder(RpcRequest request, URI uri) {\n      */\n     @Override\n     default SafeCloseable push() {\n-        final RequestContext oldCtx = RequestContextThreadLocal.getAndSet(this);\n+        final ContextStorage contextStorage = RequestContextUtil.storage();", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java b/core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java\nindex 65d870e62c..b45e122d03 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java\n\n@@ -323,25 +322,24 @@ public interface ClientRequestContext extends RequestContext {\n      */\n     @Override\n     default SafeCloseable push() {\n-        final ContextStorage contextStorage = RequestContextUtil.storage();\n-        final RequestContext oldCtx = contextStorage.push(this);\n+        final RequestContext oldCtx = RequestContextUtil.getAndSet(this);\n         if (oldCtx == this) {\n             // Reentrance\n             return noopSafeCloseable();\n         }\n \n         if (oldCtx == null) {\n-            return () -> contextStorage.pop(null);\n+            return () -> RequestContextUtil.pop(this, null);\n         }\n \n         final ServiceRequestContext root = root();\n         if ((oldCtx instanceof ServiceRequestContext && oldCtx == root) ||\n             oldCtx instanceof ClientRequestContext && ((ClientRequestContext) oldCtx).root() == root) {\n-            return () -> contextStorage.pop(oldCtx);\n+            return () -> RequestContextUtil.pop(this, oldCtx);\n         }\n \n         // Put the oldCtx back before throwing an exception.\n-        contextStorage.pop(oldCtx);\n+        RequestContextUtil.pop(this, oldCtx);\n         throw newIllegalContextPushingException(this, oldCtx);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NzgzOA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394767838", "bodyText": "Think this is fine as is but for reference I notice grpc accepts a reference to the current context as well, maybe it helps catch bugs.\nhttps://grpc.github.io/grpc-java/javadoc/io/grpc/Context.Storage.html#detach-io.grpc.Context-io.grpc.Context-", "author": "anuraaga", "createdAt": "2020-03-19T03:15:21Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorage.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * Storage.\n+ */\n+@UnstableApi\n+public interface ContextStorage {\n+\n+    /**\n+     * Push.\n+     */\n+    @Nullable\n+    <T extends RequestContext> T push(RequestContext toPush);\n+\n+    /**\n+     * Pop.\n+     */\n+    void pop(@Nullable RequestContext toRestore);", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3NDc4MA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394774780", "bodyText": "Ah yes, I didn't add it because we recommend using push() with try-with-resources, but there's no harm to add the current context. Will add it, thanks!", "author": "minwoox", "createdAt": "2020-03-19T03:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NzgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContextStorage.java b/core/src/main/java/com/linecorp/armeria/common/ContextStorage.java\nindex eb01b43f35..26831b7277 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContextStorage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContextStorage.java\n\n@@ -16,29 +16,78 @@\n \n package com.linecorp.armeria.common;\n \n+import static com.linecorp.armeria.internal.common.RequestContextUtil.defaultContextStorage;\n+\n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.common.util.UnstableApi;\n \n /**\n- * Storage.\n+ * The storage for storing {@link RequestContext}.\n+ *\n+ * <p>If you want to implement your own storage or add some hooks when a {@link RequestContext} is pushed\n+ * and popped, you should use {@link ContextStorageProvider} or {@link Flags#contextStorage()}.\n+ * Here's an example that sets MDC before {@link RequestContext} is pushed:\n+ *\n+ * <pre>{@code\n+ * > public class MyStorage implements ContextStorageProvider {\n+ * >     @Override\n+ * >     public ContextStorage newContextStorage() {\n+ * >         ContextStorage storage = ContextStorage.ofDefault();\n+ * >         return new ContextStorage() {\n+ * >\n+ * >             @Nullable\n+ * >             @Override\n+ * >             @SuppressWarnings(\"unchecked\")\n+ * >             public <T extends RequestContext> T push(RequestContext toPush) {\n+ * >                 setMDC(...); // using toPush\n+ * >                 return storage.push(toPush);\n+ * >             }\n+ * >\n+ * >             @Override\n+ * >             public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+ * >                 if (toRestore != null) {\n+ * >                     setMDC(...); // using toRestore\n+ * >                 }\n+ * >                 storage.pop(current, toRestore);\n+ * >             }\n+ * >             ...\n+ * >      }\n+ * > }\n+ * }</pre>\n  */\n @UnstableApi\n public interface ContextStorage {\n \n     /**\n-     * Push.\n+     * Returns the default {@link ContextStorage} which stores the {@link RequestContext} in the thread-local.\n+     */\n+    static ContextStorage ofDefault() {\n+        return defaultContextStorage;\n+    }\n+\n+    /**\n+     * Pushes the specified {@link RequestContext} into the storage.\n+     *\n+     * @return the old {@link RequestContext} which was in the storage before the specified {@code toPush} is\n+     *         pushed. {@code null}, if there was no {@link RequestContext}.\n      */\n     @Nullable\n     <T extends RequestContext> T push(RequestContext toPush);\n \n     /**\n-     * Pop.\n+     * Pops the current {@link RequestContext} in the storage and pushes back the specified {@code toRestore}.\n+     * {@code toRestore} is the {@link RequestContext} returned from when\n+     * {@linkplain #push(RequestContext) push(current)} is called, so it can be {@code null}.\n+     *\n+     * <p>The specified {@code current} must be the {@link RequestContext} in the storage. If it's not,\n+     * it means that {@link RequestContext#push()} is not called using {@code try-with-resources} block, so\n+     * the previous {@link RequestContext} is not popped properly.\n      */\n-    void pop(@Nullable RequestContext toRestore);\n+    void pop(RequestContext current, @Nullable RequestContext toRestore);\n \n     /**\n-     * Current.\n+     * Returns the {@link RequestContext} in the storage. {@code null} if there is no {@link RequestContext}.\n      */\n     @Nullable\n     <T extends RequestContext> T currentOrNull();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2ODAxMA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394768010", "bodyText": "Usually type of implementation is an adjective so ThreadLocalContextStorage", "author": "anuraaga", "createdAt": "2020-03-19T03:16:08Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+import io.netty.util.concurrent.FastThreadLocal;\n+import io.netty.util.internal.InternalThreadLocalMap;\n+\n+/**\n+ * A {@link ContextStorage} that uses thread-local to store {@link RequestContext}.\n+ * Override this.\n+ */\n+@UnstableApi\n+public class ContextStorageThreadLocal implements ContextStorage {", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java b/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java\nsimilarity index 69%\nrename from core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java\nrename to core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java\nindex 40a6b5d21b..45e362df63 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java\n\n@@ -14,23 +14,20 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.common;\n+package com.linecorp.armeria.internal.common;\n \n+import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n-import com.linecorp.armeria.common.util.UnstableApi;\n+import com.linecorp.armeria.common.ContextStorage;\n+import com.linecorp.armeria.common.RequestContext;\n \n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n-/**\n- * A {@link ContextStorage} that uses thread-local to store {@link RequestContext}.\n- * Override this.\n- */\n-@UnstableApi\n-public class ContextStorageThreadLocal implements ContextStorage {\n+class ThreadLocalContextStorage implements ContextStorage {\n \n     private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2ODQyNg==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394768426", "bodyText": "Instead of exposing this class let's return it from static ContextStorage ofDefault(). A user can hook by implementing a storage that delegates to the default.", "author": "anuraaga", "createdAt": "2020-03-19T03:18:12Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+import io.netty.util.concurrent.FastThreadLocal;\n+import io.netty.util.internal.InternalThreadLocalMap;\n+\n+/**\n+ * A {@link ContextStorage} that uses thread-local to store {@link RequestContext}.\n+ * Override this.", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3NDk4OA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394774988", "bodyText": "Ah that's a good suggestion. Thanks!", "author": "minwoox", "createdAt": "2020-03-19T03:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2ODQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java b/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java\nsimilarity index 69%\nrename from core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java\nrename to core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java\nindex 40a6b5d21b..45e362df63 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java\n\n@@ -14,23 +14,20 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.common;\n+package com.linecorp.armeria.internal.common;\n \n+import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n-import com.linecorp.armeria.common.util.UnstableApi;\n+import com.linecorp.armeria.common.ContextStorage;\n+import com.linecorp.armeria.common.RequestContext;\n \n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n-/**\n- * A {@link ContextStorage} that uses thread-local to store {@link RequestContext}.\n- * Override this.\n- */\n-@UnstableApi\n-public class ContextStorageThreadLocal implements ContextStorage {\n+class ThreadLocalContextStorage implements ContextStorage {\n \n     private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTM0OA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394769348", "bodyText": "ImmutableList.copyOf", "author": "anuraaga", "createdAt": "2020-03-19T03:22:15Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,13 +55,45 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = Streams.stream(", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3NTMxNg==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394775316", "bodyText": "Isn't it okay since it calls .collect(toImmutableList());?", "author": "minwoox", "createdAt": "2020-03-19T03:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MTQxNQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394781415", "bodyText": "Yeah but less code / complexity :)", "author": "anuraaga", "createdAt": "2020-03-19T04:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\nindex 227055f1ae..d06c55b25d 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n\n@@ -55,43 +58,62 @@ public final class RequestContextUtil {\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     */\n+    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+\n     private static final ContextStorage contextStorage;\n \n     static {\n-        final List<ContextStorageProvider> providers = Streams.stream(\n-                ServiceLoader.load(ContextStorageProvider.class)).collect(toImmutableList());\n+        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ContextStorageProvider.class));\n+        final String contextStorageFqcn = Flags.contextStorage();\n+        if (!providers.isEmpty()) {\n+            if (providers.size() > 1) {\n+                throw new IllegalStateException(\"Found more than one \" +\n+                                                ContextStorageProvider.class.getSimpleName() + \". providers:\" +\n+                                                providers);\n+            }\n \n-        if (providers.isEmpty()) {\n-            contextStorage = new ContextStorageThreadLocal();\n-        } else {\n             final ContextStorageProvider provider = providers.get(0);\n-            if (providers.size() > 1) {\n-                logger.warn(\"Found more than one {}. Only the first provider is used: {}, providers: {}\",\n-                            ContextStorageProvider.class.getSimpleName(), provider, providers);\n+            if (!contextStorageFqcn.isEmpty()) {\n+                throw new IllegalStateException(\"Found \" + provider + \" and \" + contextStorageFqcn +\n+                                                \". Which one do you want to use?\");\n             }\n-            ContextStorage temp;\n+\n             try {\n-                temp = provider.newContextStorage();\n+                contextStorage = provider.newContextStorage();\n             } catch (Throwable t) {\n-                logger.warn(\"Failed to create context storage. provider: {}\", provider, t);\n-                temp = new ContextStorageThreadLocal();\n+                throw new IllegalStateException(\"Failed to create context storage. provider: \" + provider, t);\n+            }\n+        } else {\n+            if (contextStorageFqcn.isEmpty()) {\n+                contextStorage = defaultContextStorage;\n+            } else {\n+                try {\n+                    final Class<?> clazz = Class.forName(contextStorageFqcn);\n+                    contextStorage = clazz.asSubclass(ContextStorage.class)\n+                                          .getConstructor()\n+                                          .newInstance();\n+                } catch (Throwable t) {\n+                    throw new IllegalStateException(\"Failed to create context storage from FQCN: \" +\n+                                                    contextStorageFqcn, t);\n+                }\n             }\n-            contextStorage = temp;\n         }\n     }\n \n     /**\n-     * Returns the {@link SafeCloseable} which doesn't do anything.\n+     * Invoked to initialize this class earlier than when an {@link HttpRequest} is received or sent.\n      */\n-    public static SafeCloseable noopSafeCloseable() {\n-        return noopSafeCloseable;\n-    }\n+    public static void init() { /* no-op */ }\n \n     /**\n-     * Returns the {@link ContextStorage}.\n+     * Returns the {@link SafeCloseable} which doesn't do anything.\n      */\n-    public static ContextStorage storage() {\n-        return contextStorage;\n+    public static SafeCloseable noopSafeCloseable() {\n+        return noopSafeCloseable;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTYwNA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394769604", "bodyText": "I think it's helpful to have a flag to to set the desired implementation class name to help with this situation without needing to hack with the jar", "author": "anuraaga", "createdAt": "2020-03-19T03:23:19Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,13 +55,45 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = Streams.stream(\n+                ServiceLoader.load(ContextStorageProvider.class)).collect(toImmutableList());\n+\n+        if (providers.isEmpty()) {\n+            contextStorage = new ContextStorageThreadLocal();\n+        } else {\n+            final ContextStorageProvider provider = providers.get(0);\n+            if (providers.size() > 1) {", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3MDE3NQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394770175", "bodyText": "Actually maybe it's fine to crash instead of warn too since it's so dangerous to use a wrong storage.", "author": "anuraaga", "createdAt": "2020-03-19T03:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3NjQ5MA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394776490", "bodyText": "I think it's helpful to have a flag to to set the desired implementation class name to help with this situation without needing to hack with the jar\n\nSo you mean just providing a flag instead of SPI? or both?", "author": "minwoox", "createdAt": "2020-03-19T03:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MTUxOQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394781519", "bodyText": "Both - the flag would be when the SPI is ambiguous but usually there'd just be 0-1 SPI providers and no need for flag.", "author": "anuraaga", "createdAt": "2020-03-19T04:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\nindex 227055f1ae..d06c55b25d 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n\n@@ -55,43 +58,62 @@ public final class RequestContextUtil {\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     */\n+    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+\n     private static final ContextStorage contextStorage;\n \n     static {\n-        final List<ContextStorageProvider> providers = Streams.stream(\n-                ServiceLoader.load(ContextStorageProvider.class)).collect(toImmutableList());\n+        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ContextStorageProvider.class));\n+        final String contextStorageFqcn = Flags.contextStorage();\n+        if (!providers.isEmpty()) {\n+            if (providers.size() > 1) {\n+                throw new IllegalStateException(\"Found more than one \" +\n+                                                ContextStorageProvider.class.getSimpleName() + \". providers:\" +\n+                                                providers);\n+            }\n \n-        if (providers.isEmpty()) {\n-            contextStorage = new ContextStorageThreadLocal();\n-        } else {\n             final ContextStorageProvider provider = providers.get(0);\n-            if (providers.size() > 1) {\n-                logger.warn(\"Found more than one {}. Only the first provider is used: {}, providers: {}\",\n-                            ContextStorageProvider.class.getSimpleName(), provider, providers);\n+            if (!contextStorageFqcn.isEmpty()) {\n+                throw new IllegalStateException(\"Found \" + provider + \" and \" + contextStorageFqcn +\n+                                                \". Which one do you want to use?\");\n             }\n-            ContextStorage temp;\n+\n             try {\n-                temp = provider.newContextStorage();\n+                contextStorage = provider.newContextStorage();\n             } catch (Throwable t) {\n-                logger.warn(\"Failed to create context storage. provider: {}\", provider, t);\n-                temp = new ContextStorageThreadLocal();\n+                throw new IllegalStateException(\"Failed to create context storage. provider: \" + provider, t);\n+            }\n+        } else {\n+            if (contextStorageFqcn.isEmpty()) {\n+                contextStorage = defaultContextStorage;\n+            } else {\n+                try {\n+                    final Class<?> clazz = Class.forName(contextStorageFqcn);\n+                    contextStorage = clazz.asSubclass(ContextStorage.class)\n+                                          .getConstructor()\n+                                          .newInstance();\n+                } catch (Throwable t) {\n+                    throw new IllegalStateException(\"Failed to create context storage from FQCN: \" +\n+                                                    contextStorageFqcn, t);\n+                }\n             }\n-            contextStorage = temp;\n         }\n     }\n \n     /**\n-     * Returns the {@link SafeCloseable} which doesn't do anything.\n+     * Invoked to initialize this class earlier than when an {@link HttpRequest} is received or sent.\n      */\n-    public static SafeCloseable noopSafeCloseable() {\n-        return noopSafeCloseable;\n-    }\n+    public static void init() { /* no-op */ }\n \n     /**\n-     * Returns the {@link ContextStorage}.\n+     * Returns the {@link SafeCloseable} which doesn't do anything.\n      */\n-    public static ContextStorage storage() {\n-        return contextStorage;\n+    public static SafeCloseable noopSafeCloseable() {\n+        return noopSafeCloseable;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3MDUyMA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394770520", "bodyText": "Think it's better to crash than fallback. As long as there is a flag to set the storage class (so could set it to default if really desired) it seems safer than a possibly ignored warning.", "author": "anuraaga", "createdAt": "2020-03-19T03:27:45Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,13 +55,45 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = Streams.stream(\n+                ServiceLoader.load(ContextStorageProvider.class)).collect(toImmutableList());\n+\n+        if (providers.isEmpty()) {\n+            contextStorage = new ContextStorageThreadLocal();\n+        } else {\n+            final ContextStorageProvider provider = providers.get(0);\n+            if (providers.size() > 1) {\n+                logger.warn(\"Found more than one {}. Only the first provider is used: {}, providers: {}\",\n+                            ContextStorageProvider.class.getSimpleName(), provider, providers);\n+            }\n+            ContextStorage temp;\n+            try {\n+                temp = provider.newContextStorage();\n+            } catch (Throwable t) {\n+                logger.warn(\"Failed to create context storage. provider: {}\", provider, t);", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\nindex 227055f1ae..d06c55b25d 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n\n@@ -55,43 +58,62 @@ public final class RequestContextUtil {\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     */\n+    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+\n     private static final ContextStorage contextStorage;\n \n     static {\n-        final List<ContextStorageProvider> providers = Streams.stream(\n-                ServiceLoader.load(ContextStorageProvider.class)).collect(toImmutableList());\n+        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ContextStorageProvider.class));\n+        final String contextStorageFqcn = Flags.contextStorage();\n+        if (!providers.isEmpty()) {\n+            if (providers.size() > 1) {\n+                throw new IllegalStateException(\"Found more than one \" +\n+                                                ContextStorageProvider.class.getSimpleName() + \". providers:\" +\n+                                                providers);\n+            }\n \n-        if (providers.isEmpty()) {\n-            contextStorage = new ContextStorageThreadLocal();\n-        } else {\n             final ContextStorageProvider provider = providers.get(0);\n-            if (providers.size() > 1) {\n-                logger.warn(\"Found more than one {}. Only the first provider is used: {}, providers: {}\",\n-                            ContextStorageProvider.class.getSimpleName(), provider, providers);\n+            if (!contextStorageFqcn.isEmpty()) {\n+                throw new IllegalStateException(\"Found \" + provider + \" and \" + contextStorageFqcn +\n+                                                \". Which one do you want to use?\");\n             }\n-            ContextStorage temp;\n+\n             try {\n-                temp = provider.newContextStorage();\n+                contextStorage = provider.newContextStorage();\n             } catch (Throwable t) {\n-                logger.warn(\"Failed to create context storage. provider: {}\", provider, t);\n-                temp = new ContextStorageThreadLocal();\n+                throw new IllegalStateException(\"Failed to create context storage. provider: \" + provider, t);\n+            }\n+        } else {\n+            if (contextStorageFqcn.isEmpty()) {\n+                contextStorage = defaultContextStorage;\n+            } else {\n+                try {\n+                    final Class<?> clazz = Class.forName(contextStorageFqcn);\n+                    contextStorage = clazz.asSubclass(ContextStorage.class)\n+                                          .getConstructor()\n+                                          .newInstance();\n+                } catch (Throwable t) {\n+                    throw new IllegalStateException(\"Failed to create context storage from FQCN: \" +\n+                                                    contextStorageFqcn, t);\n+                }\n             }\n-            contextStorage = temp;\n         }\n     }\n \n     /**\n-     * Returns the {@link SafeCloseable} which doesn't do anything.\n+     * Invoked to initialize this class earlier than when an {@link HttpRequest} is received or sent.\n      */\n-    public static SafeCloseable noopSafeCloseable() {\n-        return noopSafeCloseable;\n-    }\n+    public static void init() { /* no-op */ }\n \n     /**\n-     * Returns the {@link ContextStorage}.\n+     * Returns the {@link SafeCloseable} which doesn't do anything.\n      */\n-    public static ContextStorage storage() {\n-        return contextStorage;\n+    public static SafeCloseable noopSafeCloseable() {\n+        return noopSafeCloseable;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NDE1OQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394794159", "bodyText": "assert -> explicit initialization call", "author": "trustin", "createdAt": "2020-03-19T05:10:43Z", "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -1476,6 +1477,8 @@ public Server build() {\n                 enableServerHeader, enableDateHeader, requestIdGenerator), sslContexts);\n \n         serverListeners.forEach(server::addListener);\n+        // To initialize the context storage at the server start time not when the first request is received.\n+        assert RequestContextUtil.storage() != null;", "originalCommit": "5488ed0174fad38cbc4e5717155515e789d55438", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9c59b6f858b65563a2f86856999cf911c919886", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java b/core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java\nindex 8a5e8d9882..1d0763aaee 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java\n\n@@ -1477,8 +1477,7 @@ public final class ServerBuilder {\n                 enableServerHeader, enableDateHeader, requestIdGenerator), sslContexts);\n \n         serverListeners.forEach(server::addListener);\n-        // To initialize the context storage at the server start time not when the first request is received.\n-        assert RequestContextUtil.storage() != null;\n+        RequestContextUtil.init();\n         return server;\n     }\n \n"}}, {"oid": "b9c59b6f858b65563a2f86856999cf911c919886", "url": "https://github.com/line/armeria/commit/b9c59b6f858b65563a2f86856999cf911c919886", "message": "Address comments by @anuraaga and @trustin", "committedDate": "2020-03-19T07:59:05Z", "type": "commit"}, {"oid": "b9c59b6f858b65563a2f86856999cf911c919886", "url": "https://github.com/line/armeria/commit/b9c59b6f858b65563a2f86856999cf911c919886", "message": "Address comments by @anuraaga and @trustin", "committedDate": "2020-03-19T07:59:05Z", "type": "forcePushed"}, {"oid": "34728111e05bddd1cc024200642fb94caaebe076", "url": "https://github.com/line/armeria/commit/34728111e05bddd1cc024200642fb94caaebe076", "message": "Remove useless method", "committedDate": "2020-03-19T08:01:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MDkwMw==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394880903", "bodyText": "I'd put this in a static block in this class instead of here. Mostly same affect but clearer it's a one-time initialization", "author": "anuraaga", "createdAt": "2020-03-19T09:09:43Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -560,6 +561,7 @@ private ClientFactoryOptions buildOptions() {\n      * Returns a newly-created {@link ClientFactory} based on the properties of this builder.\n      */\n     public ClientFactory build() {\n+        RequestContextUtil.init();", "originalCommit": "34728111e05bddd1cc024200642fb94caaebe076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3MzgxNQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394973815", "bodyText": "Will do, thanks!", "author": "minwoox", "createdAt": "2020-03-19T11:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MDkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java b/core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java\nindex 888184c16d..9b7f374da6 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java\n\n@@ -561,7 +565,6 @@ public final class ClientFactoryBuilder {\n      * Returns a newly-created {@link ClientFactory} based on the properties of this builder.\n      */\n     public ClientFactory build() {\n-        RequestContextUtil.init();\n         return new DefaultClientFactory(new HttpClientFactory(buildOptions()));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MzA0Mg==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394883042", "bodyText": "Ah I was thinking instead of loading directly from the flag, we'd use the flag to disambiguate among the different providers in this case. I guess we can do both though", "author": "anuraaga", "createdAt": "2020-03-19T09:13:28Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,6 +58,57 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     */\n+    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+\n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ContextStorageProvider.class));\n+        final String contextStorageFqcn = Flags.contextStorage();\n+        if (!providers.isEmpty()) {\n+            if (providers.size() > 1) {", "originalCommit": "34728111e05bddd1cc024200642fb94caaebe076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NjY2NA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394976664", "bodyText": "Ah, I guess I totally misunderstood. \ud83e\udd23\nSo you meant when multiple providers exist (e.g com.x.AProvider, io.x.BProvider...), if the flag is io.x.BProvider, then we should choose the BProvider class. Right?\nIf so, I want to get rid of the current way and follow it because, I think, there would be a case who wants to use two different JARs that have their own RequestContextStorage.\nSo I think we should choose one of them instead of throwing an exception. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-19T12:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MzA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\nindex e9874bd859..1d03a11325 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n\n@@ -59,48 +59,58 @@ public final class RequestContextUtil {\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n     /**\n-     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     * The default {@link RequestContextStorage} which stores the {@link RequestContext} in\n+     * {@link FastThreadLocal}.\n      */\n-    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+    public static final RequestContextStorage\n+            threadLocalRequestContextStorage = new ThreadLocalRequestContextStorage();\n \n-    private static final ContextStorage contextStorage;\n+    private static final RequestContextStorage requestContextStorage;\n \n     static {\n-        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n-                ServiceLoader.load(ContextStorageProvider.class));\n-        final String contextStorageFqcn = Flags.contextStorage();\n+        final List<RequestContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(RequestContextStorageProvider.class));\n+        final String providerFqcn = Flags.requestContextStorageProvider();\n         if (!providers.isEmpty()) {\n+\n+            RequestContextStorageProvider provider = null;\n             if (providers.size() > 1) {\n-                throw new IllegalStateException(\"Found more than one \" +\n-                                                ContextStorageProvider.class.getSimpleName() + \". providers:\" +\n-                                                providers);\n-            }\n+                if (providerFqcn.isEmpty()) {\n+                    throw new IllegalStateException(\"Found more than one \" +\n+                                                    RequestContextStorageProvider.class.getSimpleName() +\n+                                                    \". providers:\" + providers);\n+                }\n \n-            final ContextStorageProvider provider = providers.get(0);\n-            if (!contextStorageFqcn.isEmpty()) {\n-                throw new IllegalStateException(\"Found \" + provider + \" and \" + contextStorageFqcn +\n-                                                \". Which one do you want to use?\");\n+                for (RequestContextStorageProvider candidate : providers) {\n+                    if (candidate.getClass().getName().equals(providerFqcn)) {\n+                        if (provider != null) {\n+                            throw new IllegalStateException(\n+                                    \"-D\" + RequestContextStorageProvider.class.getName() +\n+                                    \" matches more than one \" +\n+                                    RequestContextStorageProvider.class.getSimpleName() + \". providers:\" +\n+                                    providers);\n+                        } else {\n+                            provider = candidate;\n+                        }\n+                    }\n+                }\n+                if (provider == null) {\n+                    throw new IllegalStateException(\n+                            \"Found more than one \" + RequestContextStorageProvider.class.getSimpleName() +\n+                            \". You must specify -D\" + RequestContextStorageProvider.class.getName() +\n+                            \"=<FQCN>. providers:\" + providers);\n+                }\n+            } else {\n+                provider = providers.get(0);\n             }\n \n             try {\n-                contextStorage = provider.newContextStorage();\n+                requestContextStorage = provider.newStorage();\n             } catch (Throwable t) {\n                 throw new IllegalStateException(\"Failed to create context storage. provider: \" + provider, t);\n             }\n         } else {\n-            if (contextStorageFqcn.isEmpty()) {\n-                contextStorage = defaultContextStorage;\n-            } else {\n-                try {\n-                    final Class<?> clazz = Class.forName(contextStorageFqcn);\n-                    contextStorage = clazz.asSubclass(ContextStorage.class)\n-                                          .getConstructor()\n-                                          .newInstance();\n-                } catch (Throwable t) {\n-                    throw new IllegalStateException(\"Failed to create context storage from FQCN: \" +\n-                                                    contextStorageFqcn, t);\n-                }\n-            }\n+            requestContextStorage = threadLocalRequestContextStorage;\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MTc0Mw==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394881743", "bodyText": "Should this be RequestContextStorage?", "author": "trustin", "createdAt": "2020-03-19T09:11:13Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorage.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.defaultContextStorage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * The storage for storing {@link RequestContext}.\n+ *\n+ * <p>If you want to implement your own storage or add some hooks when a {@link RequestContext} is pushed\n+ * and popped, you should use {@link ContextStorageProvider} or {@link Flags#contextStorage()}.\n+ * Here's an example that sets MDC before {@link RequestContext} is pushed:\n+ *\n+ * <pre>{@code\n+ * > public class MyStorage implements ContextStorageProvider {\n+ * >     @Override\n+ * >     public ContextStorage newContextStorage() {\n+ * >         ContextStorage storage = ContextStorage.ofDefault();\n+ * >         return new ContextStorage() {\n+ * >\n+ * >             @Nullable\n+ * >             @Override\n+ * >             @SuppressWarnings(\"unchecked\")\n+ * >             public <T extends RequestContext> T push(RequestContext toPush) {\n+ * >                 setMDC(...); // using toPush\n+ * >                 return storage.push(toPush);\n+ * >             }\n+ * >\n+ * >             @Override\n+ * >             public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+ * >                 if (toRestore != null) {\n+ * >                     setMDC(...); // using toRestore\n+ * >                 }\n+ * >                 storage.pop(current, toRestore);\n+ * >             }\n+ * >             ...\n+ * >      }\n+ * > }\n+ * }</pre>\n+ */\n+@UnstableApi\n+public interface ContextStorage {", "originalCommit": "34728111e05bddd1cc024200642fb94caaebe076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NzEzNQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394977135", "bodyText": "Will change it. Thanks!", "author": "minwoox", "createdAt": "2020-03-19T12:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MTc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContextStorage.java b/core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\nsimilarity index 75%\nrename from core/src/main/java/com/linecorp/armeria/common/ContextStorage.java\nrename to core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\nindex 26831b7277..9ba1e47c3f 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContextStorage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\n\n@@ -16,7 +16,7 @@\n \n package com.linecorp.armeria.common;\n \n-import static com.linecorp.armeria.internal.common.RequestContextUtil.defaultContextStorage;\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.threadLocalRequestContextStorage;\n \n import javax.annotation.Nullable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MjUyMg==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394882522", "bodyText": "Maybe threadLocal(), because the default storage changes based on flag/SPI?", "author": "trustin", "createdAt": "2020-03-19T09:12:35Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorage.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.defaultContextStorage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * The storage for storing {@link RequestContext}.\n+ *\n+ * <p>If you want to implement your own storage or add some hooks when a {@link RequestContext} is pushed\n+ * and popped, you should use {@link ContextStorageProvider} or {@link Flags#contextStorage()}.\n+ * Here's an example that sets MDC before {@link RequestContext} is pushed:\n+ *\n+ * <pre>{@code\n+ * > public class MyStorage implements ContextStorageProvider {\n+ * >     @Override\n+ * >     public ContextStorage newContextStorage() {\n+ * >         ContextStorage storage = ContextStorage.ofDefault();\n+ * >         return new ContextStorage() {\n+ * >\n+ * >             @Nullable\n+ * >             @Override\n+ * >             @SuppressWarnings(\"unchecked\")\n+ * >             public <T extends RequestContext> T push(RequestContext toPush) {\n+ * >                 setMDC(...); // using toPush\n+ * >                 return storage.push(toPush);\n+ * >             }\n+ * >\n+ * >             @Override\n+ * >             public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+ * >                 if (toRestore != null) {\n+ * >                     setMDC(...); // using toRestore\n+ * >                 }\n+ * >                 storage.pop(current, toRestore);\n+ * >             }\n+ * >             ...\n+ * >      }\n+ * > }\n+ * }</pre>\n+ */\n+@UnstableApi\n+public interface ContextStorage {\n+\n+    /**\n+     * Returns the default {@link ContextStorage} which stores the {@link RequestContext} in the thread-local.\n+     */\n+    static ContextStorage ofDefault() {", "originalCommit": "34728111e05bddd1cc024200642fb94caaebe076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NzI3MQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394977271", "bodyText": "That's a good point. Let me make a change. Thanks!", "author": "minwoox", "createdAt": "2020-03-19T12:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MjUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContextStorage.java b/core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\nsimilarity index 75%\nrename from core/src/main/java/com/linecorp/armeria/common/ContextStorage.java\nrename to core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\nindex 26831b7277..9ba1e47c3f 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContextStorage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\n\n@@ -16,7 +16,7 @@\n \n package com.linecorp.armeria.common;\n \n-import static com.linecorp.armeria.internal.common.RequestContextUtil.defaultContextStorage;\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.threadLocalRequestContextStorage;\n \n import javax.annotation.Nullable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MzQyNQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394883425", "bodyText": "Shouldn't we always prefer what's specified in the flag? How about also logging the actual storage provider type?", "author": "trustin", "createdAt": "2020-03-19T09:14:06Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,6 +58,57 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     */\n+    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+\n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ContextStorageProvider.class));\n+        final String contextStorageFqcn = Flags.contextStorage();\n+        if (!providers.isEmpty()) {\n+            if (providers.size() > 1) {\n+                throw new IllegalStateException(\"Found more than one \" +\n+                                                ContextStorageProvider.class.getSimpleName() + \". providers:\" +\n+                                                providers);\n+            }\n+\n+            final ContextStorageProvider provider = providers.get(0);\n+            if (!contextStorageFqcn.isEmpty()) {\n+                throw new IllegalStateException(\"Found \" + provider + \" and \" + contextStorageFqcn +\n+                                                \". Which one do you want to use?\");", "originalCommit": "34728111e05bddd1cc024200642fb94caaebe076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3Njg4NQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394976885", "bodyText": "Let me remove this. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-19T12:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MzQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\nindex e9874bd859..1d03a11325 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n\n@@ -59,48 +59,58 @@ public final class RequestContextUtil {\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n     /**\n-     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     * The default {@link RequestContextStorage} which stores the {@link RequestContext} in\n+     * {@link FastThreadLocal}.\n      */\n-    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+    public static final RequestContextStorage\n+            threadLocalRequestContextStorage = new ThreadLocalRequestContextStorage();\n \n-    private static final ContextStorage contextStorage;\n+    private static final RequestContextStorage requestContextStorage;\n \n     static {\n-        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n-                ServiceLoader.load(ContextStorageProvider.class));\n-        final String contextStorageFqcn = Flags.contextStorage();\n+        final List<RequestContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(RequestContextStorageProvider.class));\n+        final String providerFqcn = Flags.requestContextStorageProvider();\n         if (!providers.isEmpty()) {\n+\n+            RequestContextStorageProvider provider = null;\n             if (providers.size() > 1) {\n-                throw new IllegalStateException(\"Found more than one \" +\n-                                                ContextStorageProvider.class.getSimpleName() + \". providers:\" +\n-                                                providers);\n-            }\n+                if (providerFqcn.isEmpty()) {\n+                    throw new IllegalStateException(\"Found more than one \" +\n+                                                    RequestContextStorageProvider.class.getSimpleName() +\n+                                                    \". providers:\" + providers);\n+                }\n \n-            final ContextStorageProvider provider = providers.get(0);\n-            if (!contextStorageFqcn.isEmpty()) {\n-                throw new IllegalStateException(\"Found \" + provider + \" and \" + contextStorageFqcn +\n-                                                \". Which one do you want to use?\");\n+                for (RequestContextStorageProvider candidate : providers) {\n+                    if (candidate.getClass().getName().equals(providerFqcn)) {\n+                        if (provider != null) {\n+                            throw new IllegalStateException(\n+                                    \"-D\" + RequestContextStorageProvider.class.getName() +\n+                                    \" matches more than one \" +\n+                                    RequestContextStorageProvider.class.getSimpleName() + \". providers:\" +\n+                                    providers);\n+                        } else {\n+                            provider = candidate;\n+                        }\n+                    }\n+                }\n+                if (provider == null) {\n+                    throw new IllegalStateException(\n+                            \"Found more than one \" + RequestContextStorageProvider.class.getSimpleName() +\n+                            \". You must specify -D\" + RequestContextStorageProvider.class.getName() +\n+                            \"=<FQCN>. providers:\" + providers);\n+                }\n+            } else {\n+                provider = providers.get(0);\n             }\n \n             try {\n-                contextStorage = provider.newContextStorage();\n+                requestContextStorage = provider.newStorage();\n             } catch (Throwable t) {\n                 throw new IllegalStateException(\"Failed to create context storage. provider: \" + provider, t);\n             }\n         } else {\n-            if (contextStorageFqcn.isEmpty()) {\n-                contextStorage = defaultContextStorage;\n-            } else {\n-                try {\n-                    final Class<?> clazz = Class.forName(contextStorageFqcn);\n-                    contextStorage = clazz.asSubclass(ContextStorage.class)\n-                                          .getConstructor()\n-                                          .newInstance();\n-                } catch (Throwable t) {\n-                    throw new IllegalStateException(\"Failed to create context storage from FQCN: \" +\n-                                                    contextStorageFqcn, t);\n-                }\n-            }\n+            requestContextStorage = threadLocalRequestContextStorage;\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NDAyMQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394884021", "bodyText": "final?", "author": "trustin", "createdAt": "2020-03-19T09:15:12Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java", "diffHunk": "@@ -16,67 +16,46 @@\n \n package com.linecorp.armeria.internal.common;\n \n+import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n+import com.linecorp.armeria.common.ContextStorage;\n import com.linecorp.armeria.common.RequestContext;\n \n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n-public final class RequestContextThreadLocal {\n+class ThreadLocalContextStorage implements ContextStorage {", "originalCommit": "34728111e05bddd1cc024200642fb94caaebe076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java b/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalRequestContextStorage.java\nsimilarity index 93%\nrename from core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java\nrename to core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalRequestContextStorage.java\nindex 45e362df63..c364b7c07f 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalRequestContextStorage.java\n\n@@ -21,13 +21,13 @@ import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n-import com.linecorp.armeria.common.ContextStorage;\n import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n \n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n-class ThreadLocalContextStorage implements ContextStorage {\n+final class ThreadLocalRequestContextStorage implements RequestContextStorage {\n \n     private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NjE5Mg==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394886192", "bodyText": "implementation", "author": "trustin", "createdAt": "2020-03-19T09:19:01Z", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -414,6 +416,18 @@ public static boolean verboseResponses() {\n         return VERBOSE_RESPONSES;\n     }\n \n+    /**\n+     * Returns the fully qualified class name of {@link ContextStorage}.\n+     *\n+     * <p>The default value of this flag is an empty string, which means {@link ContextStorage#ofDefault()}\n+     * is used. Specify the {@code -Dcom.linecorp.armeria.contextStorage=<FQCN>} JVM option where\n+     * {@code FQCN} is the impletation of {@link ContextStorage} (e.g. {@code com.mycom.CustomContextStorage})", "originalCommit": "34728111e05bddd1cc024200642fb94caaebe076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NzM4MQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r394977381", "bodyText": "Oops. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-03-19T12:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NjE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/Flags.java b/core/src/main/java/com/linecorp/armeria/common/Flags.java\nindex 9e2b865a38..adf4318d4c 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/Flags.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/Flags.java\n\n@@ -417,15 +418,16 @@ public final class Flags {\n     }\n \n     /**\n-     * Returns the fully qualified class name of {@link ContextStorage}.\n+     * Returns the fully qualified class name of {@link RequestContextStorage} that is used to choose\n+     * when multiple {@link RequestContextStorageProvider}s exist.\n      *\n-     * <p>The default value of this flag is an empty string, which means {@link ContextStorage#ofDefault()}\n-     * is used. Specify the {@code -Dcom.linecorp.armeria.contextStorage=<FQCN>} JVM option where\n-     * {@code FQCN} is the impletation of {@link ContextStorage} (e.g. {@code com.mycom.CustomContextStorage})\n-     * to override the default value.\n+     * <p>The default value of this flag is an empty string, which means only one\n+     * {@link RequestContextStorageProvider} must be found via Java SPI. If there are more than one,\n+     * specify the {@code -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>} JVM option to\n+     * choose the {@link RequestContextStorageProvider}.\n      */\n-    public static String contextStorage() {\n-        return CONTEXT_STORAGE;\n+    public static String requestContextStorageProvider() {\n+        return REQUEST_CONTEXT_STORAGE_PROVIER;\n     }\n \n     /**\n"}}, {"oid": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "url": "https://github.com/line/armeria/commit/cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "message": "Address comment by @anuraaga and @trustin", "committedDate": "2020-03-19T12:52:14Z", "type": "commit"}, {"oid": "10dab886555d3aa97434cafcf2a986403f010307", "url": "https://github.com/line/armeria/commit/10dab886555d3aa97434cafcf2a986403f010307", "message": "Fix", "committedDate": "2020-03-19T12:55:42Z", "type": "commit"}, {"oid": "530e2d584b2f4a6c14943648b92248ffca81d2ca", "url": "https://github.com/line/armeria/commit/530e2d584b2f4a6c14943648b92248ffca81d2ca", "message": "Fix 2", "committedDate": "2020-03-19T12:59:59Z", "type": "commit"}, {"oid": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1", "url": "https://github.com/line/armeria/commit/9fd12e5c21031b8d7ed7f2694748aa872e19a3a1", "message": "Address the comment by @trustin", "committedDate": "2020-03-19T13:15:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNjc1MQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395026751", "bodyText": "I think ThreadLocalContextStorage could be moved to this package to avoid importing / exposing", "author": "anuraaga", "createdAt": "2020-03-19T13:32:53Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.threadLocalRequestContextStorage;", "originalCommit": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0NDE5OQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395444199", "bodyText": "Oops. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-03-20T05:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNjc1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f57707179085a02c7bc66a5c03e959e83624d26", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java b/core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\nindex 9ba1e47c3f..afaae2af45 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java\n\n@@ -16,8 +16,6 @@\n \n package com.linecorp.armeria.common;\n \n-import static com.linecorp.armeria.internal.common.RequestContextUtil.threadLocalRequestContextStorage;\n-\n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.common.util.UnstableApi;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyOTAzNw==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395029037", "bodyText": "Think you can optimize a but getting the map for both get / set like above.", "author": "anuraaga", "createdAt": "2020-03-19T13:36:21Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalRequestContextStorage.java", "diffHunk": "@@ -16,67 +16,46 @@\n \n package com.linecorp.armeria.internal.common;\n \n+import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n \n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n-public final class RequestContextThreadLocal {\n+final class ThreadLocalRequestContextStorage implements RequestContextStorage {\n \n     private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n \n-    /**\n-     * Returns the current {@link RequestContext} in the thread-local.\n-     */\n     @Nullable\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends RequestContext> T get() {\n-        return (T) context.get();\n-    }\n-\n-    /**\n-     * Sets the specified {@link RequestContext} in the thread-local and returns the old {@link RequestContext}.\n-     */\n-    @Nullable\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T extends RequestContext> T getAndSet(RequestContext ctx) {\n-        requireNonNull(ctx, \"ctx\");\n-        final InternalThreadLocalMap map = InternalThreadLocalMap.get();\n-        final RequestContext oldCtx = context.get(map);\n-        context.set(map, ctx);\n-        return (T) oldCtx;\n-    }\n-\n-    /**\n-     * Removes the {@link RequestContext} in the thread-local and returns it.\n-     */\n-    @Nullable\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T extends RequestContext> T getAndRemove() {\n+    public <T extends RequestContext> T push(RequestContext toPush) {\n+        requireNonNull(toPush, \"toPush\");\n         final InternalThreadLocalMap map = InternalThreadLocalMap.get();\n         final RequestContext oldCtx = context.get(map);\n-        context.remove();\n+        context.set(map, toPush);\n         return (T) oldCtx;\n     }\n \n-    /**\n-     * Sets the specified {@link RequestContext} in the thread-local.\n-     */\n-    public static void set(RequestContext ctx) {\n-        requireNonNull(ctx, \"ctx\");\n-        context.set(ctx);\n+    @Override\n+    public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+        requireNonNull(current, \"current\");\n+        final RequestContext contextInThreadLocal = context.get();", "originalCommit": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0NDIyOQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395444229", "bodyText": "Done!", "author": "minwoox", "createdAt": "2020-03-20T05:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyOTAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "1f57707179085a02c7bc66a5c03e959e83624d26", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalRequestContextStorage.java b/core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java\nsimilarity index 86%\nrename from core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalRequestContextStorage.java\nrename to core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java\nindex c364b7c07f..16747b315e 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalRequestContextStorage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java\n\n@@ -14,16 +14,13 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.internal.common;\n+package com.linecorp.armeria.common;\n \n import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n-import com.linecorp.armeria.common.RequestContext;\n-import com.linecorp.armeria.common.RequestContextStorage;\n-\n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNzU3MA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395127570", "bodyText": "I wonder if returning null makes more sense when no provider is specified.", "author": "trustin", "createdAt": "2020-03-19T15:46:57Z", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -414,6 +417,19 @@ public static boolean verboseResponses() {\n         return VERBOSE_RESPONSES;\n     }\n \n+    /**\n+     * Returns the fully qualified class name of {@link RequestContextStorageProvider} that is used to choose\n+     * when multiple {@link RequestContextStorageProvider}s exist.\n+     *\n+     * <p>The default value of this flag is an empty string, which means only one\n+     * {@link RequestContextStorageProvider} must be found via Java SPI. If there are more than one,\n+     * specify the {@code -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>} JVM option to\n+     * choose the {@link RequestContextStorageProvider}.\n+     */\n+    public static String requestContextStorageProvider() {", "originalCommit": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0NDI3NA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395444274", "bodyText": "Done!", "author": "minwoox", "createdAt": "2020-03-20T05:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNzU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1f57707179085a02c7bc66a5c03e959e83624d26", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/Flags.java b/core/src/main/java/com/linecorp/armeria/common/Flags.java\nindex e7d18e0ca6..c224bdd4cb 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/Flags.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/Flags.java\n\n@@ -426,8 +427,9 @@ public final class Flags {\n      * specify the {@code -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>} JVM option to\n      * choose the {@link RequestContextStorageProvider}.\n      */\n+    @Nullable\n     public static String requestContextStorageProvider() {\n-        return REQUEST_CONTEXT_STORAGE_PROVIER;\n+        return REQUEST_CONTEXT_STORAGE_PROVIDER;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzMDM0Mw==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395130343", "bodyText": "Could you log the type of the provider in this branch, so that what custom provider was chosen? For other branches, Flag will log.", "author": "trustin", "createdAt": "2020-03-19T15:50:42Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,6 +58,66 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link RequestContextStorage} which stores the {@link RequestContext} in\n+     * {@link FastThreadLocal}.\n+     */\n+    public static final RequestContextStorage\n+            threadLocalRequestContextStorage = new ThreadLocalRequestContextStorage();\n+\n+    private static final RequestContextStorage requestContextStorage;\n+\n+    static {\n+        final List<RequestContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(RequestContextStorageProvider.class));\n+        final String providerFqcn = Flags.requestContextStorageProvider();\n+        if (!providers.isEmpty()) {\n+\n+            RequestContextStorageProvider provider = null;\n+            if (providers.size() > 1) {\n+                if (providerFqcn.isEmpty()) {\n+                    throw new IllegalStateException(\n+                            \"Found more than one \" + RequestContextStorageProvider.class.getSimpleName() +\n+                            \". You must specify -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>.\" +\n+                            \" providers: \" + providers);\n+                }\n+\n+                for (RequestContextStorageProvider candidate : providers) {\n+                    if (candidate.getClass().getName().equals(providerFqcn)) {\n+                        if (provider != null) {\n+                            throw new IllegalStateException(\n+                                    providerFqcn + \" matches more than one \" +\n+                                    RequestContextStorageProvider.class.getSimpleName() + \". providers: \" +\n+                                    providers);\n+                        } else {\n+                            provider = candidate;\n+                        }\n+                    }\n+                }\n+                if (provider == null) {\n+                    throw new IllegalStateException(\n+                            providerFqcn + \" does not match any \" +\n+                            RequestContextStorageProvider.class.getSimpleName() + \". providers: \" + providers);\n+                }\n+            } else {\n+                provider = providers.get(0);", "originalCommit": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0NDQzNA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395444434", "bodyText": "Added logging after requestContextStorage is created.", "author": "minwoox", "createdAt": "2020-03-20T05:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzMDM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1f57707179085a02c7bc66a5c03e959e83624d26", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\nindex 941a72a48d..bcca96a30b 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n\n@@ -58,13 +57,6 @@ public final class RequestContextUtil {\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n-    /**\n-     * The default {@link RequestContextStorage} which stores the {@link RequestContext} in\n-     * {@link FastThreadLocal}.\n-     */\n-    public static final RequestContextStorage\n-            threadLocalRequestContextStorage = new ThreadLocalRequestContextStorage();\n-\n     private static final RequestContextStorage requestContextStorage;\n \n     static {\n"}}, {"oid": "1f57707179085a02c7bc66a5c03e959e83624d26", "url": "https://github.com/line/armeria/commit/1f57707179085a02c7bc66a5c03e959e83624d26", "message": "Address comments by @anuraaga and @trustin", "committedDate": "2020-03-20T05:34:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDAwNQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395454005", "bodyText": "How about renaming this pop to replace? Because It is hart to predict the behavior when I saw pop method with arguments.\nrequestContextStorage.pop(current, toRestore)\nHowever when I think this method name is replace, then I can understand the effect of the API.\nrequestContextStorage.replace(current, toRestore)", "author": "ikhoon", "createdAt": "2020-03-20T06:19:42Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -74,21 +138,69 @@ public static IllegalStateException newIllegalContextPushingException(\n     }\n \n     /**\n-     * Removes the {@link RequestContext} in the thread-local if exists and returns {@link SafeCloseable} which\n-     * pushes the {@link RequestContext} back to the thread-local.\n+     * Returns an {@link IllegalStateException} which is raised when popping a context from\n+     * the unexpected thread or forgetting to close the previous context.\n+     */\n+    public static IllegalStateException newIllegalContextPoppingException(\n+            RequestContext currentCtx, RequestContext contextInStorage) {\n+        requireNonNull(currentCtx, \"currentCtx\");\n+        requireNonNull(contextInStorage, \"contextInStorage\");\n+        final IllegalStateException ex = new IllegalStateException(\n+                \"The currentCtx \" + currentCtx + \" is not the same as the context in the storage: \" +\n+                contextInStorage + \". This means the callback was called from \" +\n+                \"unexpected thread or forgetting to close previous context.\");\n+        if (REPORTED_THREADS.add(Thread.currentThread())) {\n+            logger.warn(\"An error occurred while popping a context\", ex);\n+        }\n+        return ex;\n+    }\n+\n+    /**\n+     * Returns the current {@link RequestContext} in the {@link RequestContextStorage}.\n+     */\n+    @Nullable\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends RequestContext> T get() {\n+        return (T) requestContextStorage.currentOrNull();\n+    }\n+\n+    /**\n+     * Sets the specified {@link RequestContext} in the {@link RequestContextStorage} and\n+     * returns the old {@link RequestContext}.\n+     */\n+    @Nullable\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends RequestContext> T getAndSet(RequestContext ctx) {\n+        requireNonNull(ctx, \"ctx\");\n+        return (T) requestContextStorage.push(ctx);\n+    }\n+\n+    /**\n+     * Removes the {@link RequestContext} in the {@link RequestContextStorage} if exists and returns\n+     * {@link SafeCloseable} which pushes the {@link RequestContext} back to the {@link RequestContextStorage}.\n      *\n      * <p>Because this method pops the {@link RequestContext} arbitrarily, it shouldn't be used in\n      * most cases. One of the examples this can be used is in {@link ChannelFutureListener}.\n      * The {@link ChannelFuture} can be complete when the eventloop handles the different request. The\n-     * eventloop might have the wrong {@link RequestContext} in the thread-local, so we should pop it.\n+     * eventloop might have the wrong {@link RequestContext} in the {@link RequestContextStorage},\n+     * so we should pop it.\n      */\n     public static SafeCloseable pop() {\n-        final RequestContext oldCtx = RequestContextThreadLocal.getAndRemove();\n+        final RequestContext oldCtx = requestContextStorage.currentOrNull();\n         if (oldCtx == null) {\n             return noopSafeCloseable();\n         }\n \n-        return () -> RequestContextThreadLocal.set(oldCtx);\n+        pop(oldCtx, null);\n+        return () -> requestContextStorage.push(oldCtx);\n+    }\n+\n+    /**\n+     * Pops the current {@link RequestContext} in the storage and pushes back the specified {@code toRestore}.\n+     */\n+    public static void pop(RequestContext current, @Nullable RequestContext toRestore) {", "originalCommit": "1f57707179085a02c7bc66a5c03e959e83624d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2NDE1NA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395464154", "bodyText": "As we discussed, let's keep it as it is.", "author": "minwoox", "createdAt": "2020-03-20T07:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDAwNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3MDg3NA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395470874", "bodyText": "Think you could use enum Singleton pattern if you want.", "author": "anuraaga", "createdAt": "2020-03-20T07:28:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.util.concurrent.FastThreadLocal;\n+import io.netty.util.internal.InternalThreadLocalMap;\n+\n+final class ThreadLocalRequestContextStorage implements RequestContextStorage {\n+\n+    private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n+\n+    static final ThreadLocalRequestContextStorage INSTANCE = new ThreadLocalRequestContextStorage();", "originalCommit": "1f57707179085a02c7bc66a5c03e959e83624d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3MjU1NA==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395472554", "bodyText": "Ah, will do. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-20T07:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3MDg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "cdec6692e22af1ed2779b2fea681208b5ed4e244", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java b/core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java\nindex 16747b315e..82967ed006 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java\n\n@@ -24,11 +24,11 @@ import javax.annotation.Nullable;\n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n-final class ThreadLocalRequestContextStorage implements RequestContextStorage {\n+enum ThreadLocalRequestContextStorage implements RequestContextStorage {\n \n-    private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n+    INSTANCE;\n \n-    static final ThreadLocalRequestContextStorage INSTANCE = new ThreadLocalRequestContextStorage();\n+    private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n \n     @Nullable\n     @Override\n"}}, {"oid": "cdec6692e22af1ed2779b2fea681208b5ed4e244", "url": "https://github.com/line/armeria/commit/cdec6692e22af1ed2779b2fea681208b5ed4e244", "message": "enum singleton", "committedDate": "2020-03-20T07:39:05Z", "type": "commit"}, {"oid": "6e415d9682ac56af932a48a0dd142f9409811373", "url": "https://github.com/line/armeria/commit/6e415d9682ac56af932a48a0dd142f9409811373", "message": "Fix Javadoc", "committedDate": "2020-03-20T11:54:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODM4Ng==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395648386", "bodyText": "I actually meant not logging when:\n\nusing the default provider (because it may be noisy.)\nspecified via the flag (because it's logged there already.)\n\ni.e. we can log in the else {} block above.", "author": "trustin", "createdAt": "2020-03-20T13:49:49Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,6 +57,61 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final RequestContextStorage requestContextStorage;\n+\n+    static {\n+        final List<RequestContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(RequestContextStorageProvider.class));\n+        final String providerFqcn = Flags.requestContextStorageProvider();\n+        if (!providers.isEmpty()) {\n+\n+            RequestContextStorageProvider provider = null;\n+            if (providers.size() > 1) {\n+                if (providerFqcn.isEmpty()) {\n+                    throw new IllegalStateException(\n+                            \"Found more than one \" + RequestContextStorageProvider.class.getSimpleName() +\n+                            \". You must specify -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>.\" +\n+                            \" providers: \" + providers);\n+                }\n+\n+                for (RequestContextStorageProvider candidate : providers) {\n+                    if (candidate.getClass().getName().equals(providerFqcn)) {\n+                        if (provider != null) {\n+                            throw new IllegalStateException(\n+                                    providerFqcn + \" matches more than one \" +\n+                                    RequestContextStorageProvider.class.getSimpleName() + \". providers: \" +\n+                                    providers);\n+                        } else {\n+                            provider = candidate;\n+                        }\n+                    }\n+                }\n+                if (provider == null) {\n+                    throw new IllegalStateException(\n+                            providerFqcn + \" does not match any \" +\n+                            RequestContextStorageProvider.class.getSimpleName() + \". providers: \" + providers);\n+                }\n+            } else {\n+                provider = providers.get(0);\n+            }\n+\n+            try {\n+                requestContextStorage = provider.newStorage();\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Failed to create context storage. provider: \" + provider, t);\n+            }\n+            logger.info(\"{} is used to create the request context storage: {}\",", "originalCommit": "6e415d9682ac56af932a48a0dd142f9409811373", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NzE3OQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395667179", "bodyText": "I thought it might be useful to show the information of the created request context storage after it's fully created. (i.e. no exception when calling newStorage()).", "author": "minwoox", "createdAt": "2020-03-20T14:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjAxMQ==", "url": "https://github.com/line/armeria/pull/2610#discussion_r395672011", "bodyText": "But I guess showing the created storage context is too verbose. Fixed. Thank you!", "author": "minwoox", "createdAt": "2020-03-20T14:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9b9b64af6bf0209258f37cfdf83460186b76b3b5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\nindex bcca96a30b..0c3c6c7fe9 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java\n\n@@ -67,7 +67,7 @@ public final class RequestContextUtil {\n \n             RequestContextStorageProvider provider = null;\n             if (providers.size() > 1) {\n-                if (providerFqcn.isEmpty()) {\n+                if (providerFqcn == null) {\n                     throw new IllegalStateException(\n                             \"Found more than one \" + RequestContextStorageProvider.class.getSimpleName() +\n                             \". You must specify -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>.\" +\n"}}, {"oid": "9b9b64af6bf0209258f37cfdf83460186b76b3b5", "url": "https://github.com/line/armeria/commit/9b9b64af6bf0209258f37cfdf83460186b76b3b5", "message": "Fix logging", "committedDate": "2020-03-20T14:25:41Z", "type": "commit"}, {"oid": "63ffc150a03b780ed7b73a69fa79a2c5315126d0", "url": "https://github.com/line/armeria/commit/63ffc150a03b780ed7b73a69fa79a2c5315126d0", "message": "Update RequestContextUtil.java", "committedDate": "2020-03-23T02:03:21Z", "type": "commit"}, {"oid": "ccf427a4bc96f8a025fecb93b4738cd29f397dfd", "url": "https://github.com/line/armeria/commit/ccf427a4bc96f8a025fecb93b4738cd29f397dfd", "message": "Update RequestContextUtil.java", "committedDate": "2020-03-23T02:19:56Z", "type": "commit"}]}