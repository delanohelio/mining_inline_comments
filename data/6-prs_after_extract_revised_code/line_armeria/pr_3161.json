{"pr_number": 3161, "pr_title": "Use disallowed list instead of blacklist and allow list instead of whitelist", "pr_createdAt": "2020-11-08T04:44:53Z", "pr_url": "https://github.com/line/armeria/pull/3161", "timeline": [{"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c", "url": "https://github.com/line/armeria/commit/c63d5d224427f5a3228c43cca462615e43b4cc3c", "message": "Change `blocklist` instead `blacklist`, `allowlist` instead `whitelist`", "committedDate": "2020-11-08T04:41:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0MjQyOQ==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519342429", "bodyText": "Somehow block list seems a bit different - blocking requests with these headers is what came to mind first. Perhaps FILTERED_*/ ALLOWED_ is a good pattern?", "author": "anuraaga", "createdAt": "2020-11-08T10:36:56Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "diffHunk": "@@ -139,82 +139,82 @@ public boolean equals(AsciiString a, AsciiString b) {\n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/1 to HTTP/2.\n      */\n-    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLOCKLIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/2 to HTTP/1.\n      */\n-    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLOCKLIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that must not be directly copied when converting trailers.\n      */\n-    private static final CharSequenceMap HTTP_TRAILER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TRAILER_BLOCKLIST = new CharSequenceMap();\n \n     static {\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HEADER_NAME_KEEP_ALIVE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HEADER_NAME_PROXY_CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.UPGRADE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.STREAM_ID.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.SCHEME.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.PATH.text(), EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);", "originalCommit": "c63d5d224427f5a3228c43cca462615e43b4cc3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxNTI2Mg==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519515262", "bodyText": "It seems like a better idea. \ud83d\ude04", "author": "heowc", "createdAt": "2020-11-09T01:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0MjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTAwNg==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519531006", "bodyText": "DISALLOWED_ also sounds good to me.", "author": "trustin", "createdAt": "2020-11-09T03:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0MjQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "60d5d6980e55d5b41c273bb8a649dbef162694c8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java\nindex b134b714e0..a7645e8bd2 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java\n\n@@ -139,82 +139,82 @@ public final class ArmeriaHttpUtil {\n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/1 to HTTP/2.\n      */\n-    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLOCKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/2 to HTTP/1.\n      */\n-    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLOCKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that must not be directly copied when converting trailers.\n      */\n-    private static final CharSequenceMap HTTP_TRAILER_BLOCKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TRAILER_DISALLOWED_LIST = new CharSequenceMap();\n \n     static {\n-        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HEADER_NAME_KEEP_ALIVE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HEADER_NAME_PROXY_CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HttpHeaderNames.UPGRADE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(ExtensionHeaderNames.STREAM_ID.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(ExtensionHeaderNames.SCHEME.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(ExtensionHeaderNames.PATH.text(), EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.add(HEADER_NAME_KEEP_ALIVE, EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.add(HEADER_NAME_PROXY_CONNECTION, EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.UPGRADE, EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.add(ExtensionHeaderNames.STREAM_ID.text(), EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.add(ExtensionHeaderNames.SCHEME.text(), EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.add(ExtensionHeaderNames.PATH.text(), EMPTY_STRING);\n \n         // https://tools.ietf.org/html/rfc7540#section-8.1.2.3\n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(HttpHeaderNames.AUTHORITY, EMPTY_STRING);\n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(HttpHeaderNames.METHOD, EMPTY_STRING);\n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(HttpHeaderNames.PATH, EMPTY_STRING);\n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(HttpHeaderNames.SCHEME, EMPTY_STRING);\n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(HttpHeaderNames.STATUS, EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.AUTHORITY, EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.METHOD, EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.PATH, EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.SCHEME, EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.STATUS, EMPTY_STRING);\n \n         // https://tools.ietf.org/html/rfc7540#section-8.1\n         // The \"chunked\" transfer encoding defined in Section 4.1 of [RFC7230] MUST NOT be used in HTTP/2.\n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n \n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(ExtensionHeaderNames.STREAM_ID.text(), EMPTY_STRING);\n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(ExtensionHeaderNames.SCHEME.text(), EMPTY_STRING);\n-        HTTP2_TO_HTTP_HEADER_BLOCKLIST.add(ExtensionHeaderNames.PATH.text(), EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(ExtensionHeaderNames.STREAM_ID.text(), EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(ExtensionHeaderNames.SCHEME.text(), EMPTY_STRING);\n+        HTTP2_TO_HTTP_HEADER_DISALLOWED_LIST.add(ExtensionHeaderNames.PATH.text(), EMPTY_STRING);\n \n         // https://tools.ietf.org/html/rfc7230#section-4.1.2\n         // https://tools.ietf.org/html/rfc7540#section-8.1\n         // A sender MUST NOT generate a trailer that contains a field necessary for message framing:\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.CONTENT_LENGTH, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.CONTENT_LENGTH, EMPTY_STRING);\n \n         // for request modifiers:\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.CACHE_CONTROL, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.EXPECT, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.HOST, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.MAX_FORWARDS, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.PRAGMA, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.RANGE, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.TE, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.CACHE_CONTROL, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.EXPECT, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.HOST, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.MAX_FORWARDS, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.PRAGMA, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.RANGE, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.TE, EMPTY_STRING);\n \n         // for authentication:\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.WWW_AUTHENTICATE, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.AUTHORIZATION, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.PROXY_AUTHENTICATE, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.PROXY_AUTHORIZATION, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.WWW_AUTHENTICATE, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.AUTHORIZATION, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.PROXY_AUTHENTICATE, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.PROXY_AUTHORIZATION, EMPTY_STRING);\n \n         // for response control data:\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.DATE, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.LOCATION, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.RETRY_AFTER, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.VARY, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.WARNING, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.DATE, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.LOCATION, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.RETRY_AFTER, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.VARY, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.WARNING, EMPTY_STRING);\n \n         // or for determining how to process the payload:\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.CONTENT_ENCODING, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.CONTENT_TYPE, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.CONTENT_RANGE, EMPTY_STRING);\n-        HTTP_TRAILER_BLOCKLIST.add(HttpHeaderNames.TRAILER, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.CONTENT_ENCODING, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.CONTENT_TYPE, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.CONTENT_RANGE, EMPTY_STRING);\n+        HTTP_TRAILER_DISALLOWED_LIST.add(HttpHeaderNames.TRAILER, EMPTY_STRING);\n     }\n \n-    static final Set<AsciiString> ADDITIONAL_REQUEST_HEADER_BLOCKLIST = ImmutableSet.of(\n+    static final Set<AsciiString> ADDITIONAL_REQUEST_HEADER_DISALLOWED_LIST = ImmutableSet.of(\n             HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD);\n \n-    static final Set<AsciiString> ADDITIONAL_RESPONSE_HEADER_BLOCKLIST = ImmutableSet.of(\n+    static final Set<AsciiString> ADDITIONAL_RESPONSE_HEADER_DISALLOWED_LIST = ImmutableSet.of(\n             HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD, HttpHeaderNames.PATH);\n \n     public static final String SERVER_HEADER =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMDY5NA==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519530694", "bodyText": "There is no verb 'allowlist'. How about: the list of allowed hosts?", "author": "trustin", "createdAt": "2020-11-09T03:10:27Z", "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -49,7 +49,7 @@\n import com.google.common.collect.ImmutableSet;\n \n /**\n- * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on allowlisted hosts.", "originalCommit": "c63d5d224427f5a3228c43cca462615e43b4cc3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NjM2Nw==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519596367", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-11-09T07:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMDY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "60d5d6980e55d5b41c273bb8a649dbef162694c8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java b/core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java\nindex 542eb4d050..276ac650db 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java\n\n@@ -49,7 +49,7 @@ import javax.net.ssl.X509ExtendedTrustManager;\n import com.google.common.collect.ImmutableSet;\n \n /**\n- * An implementation of {@link X509ExtendedTrustManager} that skips verification on allowlisted hosts.\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on the list of allowed hosts.\n  */\n final class IgnoreHostsTrustManager extends X509ExtendedTrustManager {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTgxNw==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519531817", "bodyText": "Blocklisted -> Disallowed?", "author": "trustin", "createdAt": "2020-11-09T03:15:29Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "diffHunk": "@@ -881,11 +881,11 @@ private static void toNettyHttp2Client(HttpHeaders inputHeaders, Http2Headers ou\n         for (Entry<AsciiString, String> entry : inputHeaders) {\n             final AsciiString name = entry.getKey();\n             final String value = entry.getValue();\n-            if (HTTP_TO_HTTP2_HEADER_BLACKLIST.contains(name)) {\n+            if (HTTP_TO_HTTP2_HEADER_BLOCKLIST.contains(name)) {\n                 continue;\n             }\n \n-            if (isTrailer && isTrailerBlacklisted(name)) {\n+            if (isTrailer && isTrailerBlocklisted(name)) {", "originalCommit": "c63d5d224427f5a3228c43cca462615e43b4cc3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzNDQ0MA==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519534440", "bodyText": "Forbidden also sounds good, but I'm not sure if it's too \"strict\".", "author": "KarboniteKream", "createdAt": "2020-11-09T03:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0NzIxNQ==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519547215", "bodyText": "That sounds good to me as well.", "author": "trustin", "createdAt": "2020-11-09T04:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "60d5d6980e55d5b41c273bb8a649dbef162694c8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java b/core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java\nindex b134b714e0..a7645e8bd2 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java\n\n@@ -881,11 +882,11 @@ public final class ArmeriaHttpUtil {\n         for (Entry<AsciiString, String> entry : inputHeaders) {\n             final AsciiString name = entry.getKey();\n             final String value = entry.getValue();\n-            if (HTTP_TO_HTTP2_HEADER_BLOCKLIST.contains(name)) {\n+            if (HTTP_TO_HTTP2_HEADER_DISALLOWED_LIST.contains(name)) {\n                 continue;\n             }\n \n-            if (isTrailer && isTrailerBlocklisted(name)) {\n+            if (isTrailer && isTrailerDisallowed(name)) {\n                 continue;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMjI2MA==", "url": "https://github.com/line/armeria/pull/3161#discussion_r519532260", "bodyText": "testSetDisallowedHeader ?", "author": "trustin", "createdAt": "2020-11-09T03:17:35Z", "path": "core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java", "diffHunk": "@@ -66,7 +66,7 @@ void testSetHeader() {\n     }\n \n     @Test\n-    void testSetBlackListHeader() {\n+    void testSetBlockListHeader() {", "originalCommit": "c63d5d224427f5a3228c43cca462615e43b4cc3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60d5d6980e55d5b41c273bb8a649dbef162694c8", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java b/core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java\nindex 5965ccf65b..ee7af5d677 100644\n--- a/core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java\n\n@@ -66,7 +66,7 @@ class ClientOptionsTest {\n     }\n \n     @Test\n-    void testSetBlockListHeader() {\n+    void testSetDisallowedHeader() {\n         assertThatThrownBy(() -> {\n             ClientOptions.of(HEADERS.newValue(\n                     HttpHeaders.of(HttpHeaderNames.HOST, \"localhost\")));\n"}}, {"oid": "60d5d6980e55d5b41c273bb8a649dbef162694c8", "url": "https://github.com/line/armeria/commit/60d5d6980e55d5b41c273bb8a649dbef162694c8", "message": "blocklist to disallowed list", "committedDate": "2020-11-09T07:17:39Z", "type": "commit"}, {"oid": "488051c1504d72a62aa792fb1034e574742cc9f4", "url": "https://github.com/line/armeria/commit/488051c1504d72a62aa792fb1034e574742cc9f4", "message": "Replace blocklist to disallowed list", "committedDate": "2020-11-09T10:20:58Z", "type": "commit"}, {"oid": "3891071a1f65042e5d43f42507eaad218bc07ace", "url": "https://github.com/line/armeria/commit/3891071a1f65042e5d43f42507eaad218bc07ace", "message": "Checkstyle", "committedDate": "2020-11-11T02:18:01Z", "type": "commit"}]}