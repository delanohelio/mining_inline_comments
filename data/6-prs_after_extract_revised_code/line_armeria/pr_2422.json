{"pr_number": 2422, "pr_title": "Add content previewing client and service decorators", "pr_createdAt": "2020-01-29T04:51:31Z", "pr_url": "https://github.com/line/armeria/pull/2422", "timeline": [{"oid": "634f1009e3fad644e6dac0e8c4e218625548327b", "url": "https://github.com/line/armeria/commit/634f1009e3fad644e6dac0e8c4e218625548327b", "message": "Add content previewing client and service decorators\nMotivation:\nRelated #2189\n\nWe currently, store `HttpData`s to the `ContentPreviewer` right before writing to the socket to preview the content.\nHowever, this makes the server decompress twice when there's a `EncodingService` and a user wants to preview decompressed content.\nIt's also, not the way we do for this kinds of thing which is intercepting the requests and responses and manipulating.\nWe use decorators for that.\n\nModifications:\n- Add `ContentPreviewingClient` and `ContentPreviewingService`\n\nResult:\n- Close #2189", "committedDate": "2020-01-29T04:40:57Z", "type": "commit"}, {"oid": "ec6b0b42aacc6465bbb520e07cebc48c5c3e4014", "url": "https://github.com/line/armeria/commit/ec6b0b42aacc6465bbb520e07cebc48c5c3e4014", "message": "Repeat test", "committedDate": "2020-01-29T05:45:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwOTIyNw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372209227", "bodyText": "Indent", "author": "anuraaga", "createdAt": "2020-01-29T06:32:34Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java", "diffHunk": "@@ -86,6 +86,13 @@ static ContentPreviewer disabled() {\n         return ContentPreviewerAdapter.NOOP;\n     }\n \n+    /**\n+     * Returns whether this {@link ContentPreviewer} is {@link #disabled()} or not.\n+      */", "originalCommit": "ec6b0b42aacc6465bbb520e07cebc48c5c3e4014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbd93bf3a5680f4d5d7cc1ac9a13513d4f39c5e7", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java b/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java\nindex af3c5f23a2..a5c313ffe5 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java\n\n@@ -88,9 +88,9 @@ public interface ContentPreviewer {\n \n     /**\n      * Returns whether this {@link ContentPreviewer} is {@link #disabled()} or not.\n-      */\n+     */\n     default boolean isDisabled() {\n-        return this == ContentPreviewerAdapter.NOOP;\n+        return false;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwOTI3OQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372209279", "bodyText": "I think it's more idiomatic to return false here and have NOOP override with return true", "author": "anuraaga", "createdAt": "2020-01-29T06:32:51Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java", "diffHunk": "@@ -86,6 +86,13 @@ static ContentPreviewer disabled() {\n         return ContentPreviewerAdapter.NOOP;\n     }\n \n+    /**\n+     * Returns whether this {@link ContentPreviewer} is {@link #disabled()} or not.\n+      */\n+    default boolean isDisabled() {\n+        return this == ContentPreviewerAdapter.NOOP;", "originalCommit": "ec6b0b42aacc6465bbb520e07cebc48c5c3e4014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwODA0MA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372808040", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-01-30T08:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwOTI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbd93bf3a5680f4d5d7cc1ac9a13513d4f39c5e7", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java b/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java\nindex af3c5f23a2..a5c313ffe5 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java\n\n@@ -88,9 +88,9 @@ public interface ContentPreviewer {\n \n     /**\n      * Returns whether this {@link ContentPreviewer} is {@link #disabled()} or not.\n-      */\n+     */\n     default boolean isDisabled() {\n-        return this == ContentPreviewerAdapter.NOOP;\n+        return false;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwOTk2NQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372209965", "bodyText": "Remove requireNonNull for both they're @Nullable", "author": "anuraaga", "createdAt": "2020-01-29T06:35:44Z", "path": "core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.logging;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.FilteredHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.ContentPreviewer;\n+import com.linecorp.armeria.common.logging.ContentPreviewerFactory;\n+import com.linecorp.armeria.internal.ArmeriaHttpUtil;\n+\n+/**\n+ * A configurator to set up request and response content previewers.\n+ */\n+public final class ContentPreviewerConfigurator {\n+\n+    @Nullable\n+    private final ContentPreviewerFactory requestContentPreviewerFactory;\n+\n+    @Nullable\n+    private final ContentPreviewerFactory responseContentPreviewerFactory;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ContentPreviewerConfigurator(@Nullable ContentPreviewerFactory requestContentPreviewerFactory,\n+                                        @Nullable ContentPreviewerFactory responseContentPreviewerFactory) {\n+        assert requestContentPreviewerFactory != null || responseContentPreviewerFactory != null;\n+        this.requestContentPreviewerFactory =\n+                requireNonNull(requestContentPreviewerFactory, \"requestContentPreviewerFactory\");", "originalCommit": "ec6b0b42aacc6465bbb520e07cebc48c5c3e4014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMTM5Nw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372211397", "bodyText": "Though actually can we just go ahead and remove @Nullable throughout PR and use ContentPreviewerFactory.disabled() instead?", "author": "anuraaga", "createdAt": "2020-01-29T06:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwOTk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyNDc3OA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372224778", "bodyText": "Oops. \ud83d\ude05\nWell, I was actually planning to remove ContentPreviewerFactory.disabled() and ContentPreviewer.disabled() because we usually use just null value for the disability.\nThe reason why we introduce disabled() is, I guess, because of MappedContentPreviewerFactory which iterates all of the factories until it finds a valid return value.\nI think I want to remove that as well. \ud83d\ude05\nContentPreviewer can be created only after the request or response headers is available which means that we can pass the headers when we create ContentPreviewer. Then, we don't have to call ContentPreviewer.onHeaders() all the time.\nIn order to do that, we need to modify the methods which takes Supplier<? extends ContentPreviewer> as a parameter in ContentPreviewerFactory. For example, we should change of(MediaType contentType, Supplier<? extends ContentPreviewer> supplier) to of(Function<? super HttpHeaders, ? extends ContentPreviewer> function). If we do that, I think we can remove MappedContentPreviewerFactory.\nWDYT @anuraaga?", "author": "minwoox", "createdAt": "2020-01-29T07:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwOTk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyOTA2NQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372229065", "bodyText": "Sure that sounds good too", "author": "anuraaga", "createdAt": "2020-01-29T07:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwOTk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMTk5OA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372231998", "bodyText": "Then, let me remove requireNonNull and use @Nullable.\nI will do the refactoring of ContentPreviewer and ContentPreviewerFactory after this PR is merged because it could be a little complicated than I thought. \ud83d\ude06", "author": "minwoox", "createdAt": "2020-01-29T07:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwOTk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bedfeba6f3dad8bba23f70ec5d4ff240208e14d", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java b/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\nindex 37d92d1f23..63779cc048 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\n\n@@ -114,7 +114,6 @@ public final class ContentPreviewerConfigurator {\n                     if (ArmeriaHttpUtil.isInformational(status)) {\n                         return obj;\n                     }\n-\n                     responseContentPreviewer = responseContentPreviewerFactory.get(ctx, headers);\n                     ctx.logBuilder().responseContentPreviewer(responseContentPreviewer);\n                     responseContentPreviewer.onHeaders(headers);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMDc2Nw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372210767", "bodyText": "Do we have some validation to make sure ResponseHeaders are first published object? I wonder if we are replacing a downstream HTTP protocol exception with a NPE here. I think it doesn't hurt much to just add the null check here to not worry.", "author": "anuraaga", "createdAt": "2020-01-29T06:39:24Z", "path": "core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.logging;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.FilteredHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.ContentPreviewer;\n+import com.linecorp.armeria.common.logging.ContentPreviewerFactory;\n+import com.linecorp.armeria.internal.ArmeriaHttpUtil;\n+\n+/**\n+ * A configurator to set up request and response content previewers.\n+ */\n+public final class ContentPreviewerConfigurator {\n+\n+    @Nullable\n+    private final ContentPreviewerFactory requestContentPreviewerFactory;\n+\n+    @Nullable\n+    private final ContentPreviewerFactory responseContentPreviewerFactory;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ContentPreviewerConfigurator(@Nullable ContentPreviewerFactory requestContentPreviewerFactory,\n+                                        @Nullable ContentPreviewerFactory responseContentPreviewerFactory) {\n+        assert requestContentPreviewerFactory != null || responseContentPreviewerFactory != null;\n+        this.requestContentPreviewerFactory =\n+                requireNonNull(requestContentPreviewerFactory, \"requestContentPreviewerFactory\");\n+        this.responseContentPreviewerFactory =\n+                requireNonNull(responseContentPreviewerFactory, \"responseContentPreviewerFactory\");\n+    }\n+\n+    /**\n+     * Sets up the request {@link ContentPreviewer} when {@code requestContentPreviewerFactory}\n+     * is non-null and {@link ContentPreviewerFactory#get(RequestContext, HttpHeaders)} returns a\n+     * {@link ContentPreviewer} instance that is not {@link ContentPreviewer#isDisabled()}.\n+     */\n+    public HttpRequest maybeSetUpRequestContentPreviewer(RequestContext ctx, HttpRequest req) {\n+        requireNonNull(ctx, \"ctx\");\n+        requireNonNull(req, \"req\");\n+        if (requestContentPreviewerFactory == null) {\n+            return req;\n+        }\n+\n+        final RequestHeaders headers = req.headers();\n+        final ContentPreviewer requestContentPreviewer = requestContentPreviewerFactory.get(ctx, headers);\n+        if (requestContentPreviewer.isDisabled()) {\n+            return req;\n+        }\n+\n+        ctx.logBuilder().requestContentPreviewer(requestContentPreviewer);\n+        requestContentPreviewer.onHeaders(headers);\n+        return new FilteredHttpRequest(req) {\n+            @Override\n+            protected HttpObject filter(HttpObject obj) {\n+                if (obj instanceof HttpData) {\n+                    requestContentPreviewer.onData((HttpData) obj);\n+                }\n+                return obj;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Sets up the response {@link ContentPreviewer} when {@code responseContentPreviewerFactory}\n+     * is non-null.\n+     */\n+    public HttpResponse maybeSetUpResponseContentPreviewer(RequestContext ctx, HttpResponse res) {\n+        requireNonNull(ctx, \"ctx\");\n+        requireNonNull(res, \"res\");\n+        if (responseContentPreviewerFactory == null) {\n+            return res;\n+        }\n+\n+        return new FilteredHttpResponse(res) {\n+            @Nullable\n+            ContentPreviewer responseContentPreviewer;\n+\n+            @Override\n+            protected HttpObject filter(HttpObject obj) {\n+                if (obj instanceof ResponseHeaders) {\n+                    final ResponseHeaders headers = (ResponseHeaders) obj;\n+\n+                    // Skip informational headers.\n+                    final String status = headers.get(HttpHeaderNames.STATUS);\n+                    if (ArmeriaHttpUtil.isInformational(status)) {\n+                        return obj;\n+                    }\n+\n+                    responseContentPreviewer = responseContentPreviewerFactory.get(ctx, headers);\n+                    ctx.logBuilder().responseContentPreviewer(responseContentPreviewer);\n+                    responseContentPreviewer.onHeaders(headers);\n+                } else if (obj instanceof HttpData) {\n+                    assert responseContentPreviewer != null;", "originalCommit": "ec6b0b42aacc6465bbb520e07cebc48c5c3e4014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bedfeba6f3dad8bba23f70ec5d4ff240208e14d", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java b/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\nindex 37d92d1f23..63779cc048 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\n\n@@ -114,7 +114,6 @@ public final class ContentPreviewerConfigurator {\n                     if (ArmeriaHttpUtil.isInformational(status)) {\n                         return obj;\n                     }\n-\n                     responseContentPreviewer = responseContentPreviewerFactory.get(ctx, headers);\n                     ctx.logBuilder().responseContentPreviewer(responseContentPreviewer);\n                     responseContentPreviewer.onHeaders(headers);\n"}}, {"oid": "8bedfeba6f3dad8bba23f70ec5d4ff240208e14d", "url": "https://github.com/line/armeria/commit/8bedfeba6f3dad8bba23f70ec5d4ff240208e14d", "message": "Test", "committedDate": "2020-01-29T09:17:37Z", "type": "commit"}, {"oid": "22c321a2b3d29acf9a3037f98101d91881d74b08", "url": "https://github.com/line/armeria/commit/22c321a2b3d29acf9a3037f98101d91881d74b08", "message": "Remove unused import", "committedDate": "2020-01-29T09:24:14Z", "type": "commit"}, {"oid": "bbd93bf3a5680f4d5d7cc1ac9a13513d4f39c5e7", "url": "https://github.com/line/armeria/commit/bbd93bf3a5680f4d5d7cc1ac9a13513d4f39c5e7", "message": "Address comments by @anuraaga", "committedDate": "2020-01-29T11:24:37Z", "type": "commit"}, {"oid": "85b6cc6c029866ab2d892597a10f20a71da4e033", "url": "https://github.com/line/armeria/commit/85b6cc6c029866ab2d892597a10f20a71da4e033", "message": "Add deferredFlags", "committedDate": "2020-01-30T03:43:52Z", "type": "commit"}, {"oid": "166d6026e6950815fe9ccccc2dd3a5b6528248d1", "url": "https://github.com/line/armeria/commit/166d6026e6950815fe9ccccc2dd3a5b6528248d1", "message": "Merge branch 'master' into add_content_preview_decorator", "committedDate": "2020-01-30T07:34:19Z", "type": "commit"}, {"oid": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "url": "https://github.com/line/armeria/commit/6f0dee43ce1456816c3fad8a578e615128ea7aba", "message": "Fix doc", "committedDate": "2020-01-30T08:12:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMjQyNg==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372822426", "bodyText": "nit: The two lines could be merged?", "author": "trustin", "createdAt": "2020-01-30T08:51:36Z", "path": "benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java", "diffHunk": "@@ -46,20 +45,17 @@\n     static {\n         SERVICES = ImmutableList.of(\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method1\").build(),\n-                                  SERVICE, 0, 0, false, ContentPreviewerFactory.disabled(),\n-                                  ContentPreviewerFactory.disabled(), AccessLogWriter.disabled(), false),\n+                                  SERVICE, 0, 0, false,\n+                                  AccessLogWriter.disabled(), false),", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java b/benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java\nindex 426a5644f1..eda2cc6905 100644\n--- a/benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java\n+++ b/benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java\n\n@@ -45,11 +45,9 @@ public class RoutersBenchmark {\n     static {\n         SERVICES = ImmutableList.of(\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method1\").build(),\n-                                  SERVICE, 0, 0, false,\n-                                  AccessLogWriter.disabled(), false),\n+                                  SERVICE, 0, 0, false, AccessLogWriter.disabled(), false),\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method2\").build(),\n-                                  SERVICE, 0, 0, false,\n-                                  AccessLogWriter.disabled(), false)\n+                                  SERVICE, 0, 0, false, AccessLogWriter.disabled(), false)\n         );\n         FALLBACK_SERVICE = new ServiceConfig(Route.ofCatchAll(), SERVICE, 0, 0, false,\n                                              AccessLogWriter.disabled(), false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMjUwNw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372822507", "bodyText": "nit: The two lines could be merged?", "author": "trustin", "createdAt": "2020-01-30T08:51:48Z", "path": "benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java", "diffHunk": "@@ -46,20 +45,17 @@\n     static {\n         SERVICES = ImmutableList.of(\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method1\").build(),\n-                                  SERVICE, 0, 0, false, ContentPreviewerFactory.disabled(),\n-                                  ContentPreviewerFactory.disabled(), AccessLogWriter.disabled(), false),\n+                                  SERVICE, 0, 0, false,\n+                                  AccessLogWriter.disabled(), false),\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method2\").build(),\n-                                  SERVICE, 0, 0, false, ContentPreviewerFactory.disabled(),\n-                                  ContentPreviewerFactory.disabled(), AccessLogWriter.disabled(), false)\n+                                  SERVICE, 0, 0, false,\n+                                  AccessLogWriter.disabled(), false)", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java b/benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java\nindex 426a5644f1..eda2cc6905 100644\n--- a/benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java\n+++ b/benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java\n\n@@ -45,11 +45,9 @@ public class RoutersBenchmark {\n     static {\n         SERVICES = ImmutableList.of(\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method1\").build(),\n-                                  SERVICE, 0, 0, false,\n-                                  AccessLogWriter.disabled(), false),\n+                                  SERVICE, 0, 0, false, AccessLogWriter.disabled(), false),\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method2\").build(),\n-                                  SERVICE, 0, 0, false,\n-                                  AccessLogWriter.disabled(), false)\n+                                  SERVICE, 0, 0, false, AccessLogWriter.disabled(), false)\n         );\n         FALLBACK_SERVICE = new ServiceConfig(Route.ofCatchAll(), SERVICE, 0, 0, false,\n                                              AccessLogWriter.disabled(), false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMzE3Nw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372823177", "bodyText": "Missing period after set", "author": "trustin", "createdAt": "2020-01-30T08:53:22Z", "path": "core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.logging;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.common.logging.ContentPreviewingDecoratorBuilder;\n+\n+/**\n+ * Builds a new {@link ContentPreviewingClient} or its decorator function.\n+ */\n+public final class ContentPreviewingClientBuilder\n+        extends ContentPreviewingDecoratorBuilder<ContentPreviewingClientBuilder> {\n+\n+    /**\n+     * Returns a newly-created {@link ContentPreviewingClient} based on the properties of this builder.\n+     */\n+    public ContentPreviewingClient build(HttpClient delegate) {\n+        checkState(requestContentPreviewerFactory() != null || responseContentPreviewerFactory() != null,\n+                   \"requestContentPreviewerFactory or responseContentPreviewerFactory must be set\");", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java b/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\nindex c90741628b..d59283d3d2 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\n\n@@ -34,7 +34,7 @@ public final class ContentPreviewingClientBuilder\n      */\n     public ContentPreviewingClient build(HttpClient delegate) {\n         checkState(requestContentPreviewerFactory() != null || responseContentPreviewerFactory() != null,\n-                   \"requestContentPreviewerFactory or responseContentPreviewerFactory must be set\");\n+                   \"requestContentPreviewerFactory or responseContentPreviewerFactory must be set.\");\n         return new ContentPreviewingClient(delegate, requestContentPreviewerFactory(),\n                                            responseContentPreviewerFactory());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTAwMA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372825000", "bodyText": "Shouldn't we use covariant return types instead of type parameter?", "author": "trustin", "createdAt": "2020-01-30T08:57:04Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.Charset;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.internal.ArmeriaHttpUtil;\n+\n+/**\n+ * Builds a new content previewing decorator or its decorator function.\n+ *\n+ * @param <T> the type of this builder\n+ */\n+public abstract class ContentPreviewingDecoratorBuilder<T extends ContentPreviewingDecoratorBuilder<T>> {", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNzE2NQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372837165", "bodyText": "I thought it's okay because this class is public.\nHowever, I should've moved this class under internal package and not using the type parameter. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-01-30T09:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "9c6e13a6667eaff20ff8f48ffb696ed8f8eed685", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java b/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java\nindex 929784c44a..aebc428cd6 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java\n\n@@ -26,10 +26,8 @@ import com.linecorp.armeria.internal.ArmeriaHttpUtil;\n \n /**\n  * Builds a new content previewing decorator or its decorator function.\n- *\n- * @param <T> the type of this builder\n  */\n-public abstract class ContentPreviewingDecoratorBuilder<T extends ContentPreviewingDecoratorBuilder<T>> {\n+public abstract class ContentPreviewingDecoratorBuilder {\n \n     @Nullable\n     private ContentPreviewerFactory requestContentPreviewerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTI3MQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372825271", "bodyText": "How about moving this field next to flags?", "author": "trustin", "createdAt": "2020-01-30T08:57:42Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -86,17 +89,14 @@\n     @Nullable\n     private UnmodifiableFuture<RequestLog> completedFuture;\n \n-    private volatile boolean requestContentDeferred;\n-    private volatile boolean responseContentDeferred;\n+    private volatile int deferredFlags;", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0Mzg0Mg==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372843842", "bodyText": "Fixed.", "author": "minwoox", "createdAt": "2020-01-30T09:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\nindex 4704856202..f8026f8064 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n\n@@ -81,16 +81,17 @@ public class DefaultRequestLog implements RequestLog, RequestLogBuilder {\n     /**\n      * Updated by {@link #flagsUpdater}.\n      */\n-    @SuppressWarnings(\"unused\")\n     private volatile int flags;\n+    /**\n+     * Updated by {@link #deferredFlagsUpdater}.\n+     */\n+    private volatile int deferredFlags;\n     private final List<RequestLogFuture> pendingFutures = new ArrayList<>(4);\n     @Nullable\n     private UnmodifiableFuture<RequestLog> partiallyCompletedFuture;\n     @Nullable\n     private UnmodifiableFuture<RequestLog> completedFuture;\n \n-    private volatile int deferredFlags;\n-\n     private long requestStartTimeMicros;\n     private long requestStartTimeNanos;\n     private boolean requestFirstBytesTransferredTimeNanosSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTY0OQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372825649", "bodyText": "How about moving this method after updateAvailability()?", "author": "trustin", "createdAt": "2020-01-30T08:58:35Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -336,6 +322,21 @@ public RequestContext context() {\n         return partiallyCompletedFuture;\n     }\n \n+    private void updateDeferredFlags(RequestLogProperty property) {", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzODM5Mg==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372838392", "bodyText": "updateAvailability() calls removeSatisfiedFutures() so I moved after that. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-01-30T09:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\nindex 4704856202..f8026f8064 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n\n@@ -322,26 +323,11 @@ public class DefaultRequestLog implements RequestLog, RequestLogBuilder {\n         return partiallyCompletedFuture;\n     }\n \n-    private void updateDeferredFlags(RequestLogProperty property) {\n-        final int flag = property.flag();\n-        for (;;) {\n-            final int oldFlags = deferredFlags;\n-            final int newFlags = oldFlags | flag;\n-            if (oldFlags == newFlags) {\n-                break;\n-            }\n-\n-            if (deferredFlagsUpdater.compareAndSet(this, oldFlags, newFlags)) {\n-                break;\n-            }\n-        }\n+    private void updateFlags(RequestLogProperty property) {\n+        updateFlags(property.flag());\n     }\n \n-    private void updateAvailability(RequestLogProperty property) {\n-        updateAvailability(property.flag());\n-    }\n-\n-    private void updateAvailability(int flags) {\n+    private void updateFlags(int flags) {\n         for (;;) {\n             final int oldFlags = this.flags;\n             final int newFlags = oldFlags | flags;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTc1NQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372825755", "bodyText": "How about renaming to updateFlags for consistency?", "author": "trustin", "createdAt": "2020-01-30T08:58:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -336,6 +322,21 @@ public RequestContext context() {\n         return partiallyCompletedFuture;\n     }\n \n+    private void updateDeferredFlags(RequestLogProperty property) {\n+        final int flag = property.flag();\n+        for (;;) {\n+            final int oldFlags = deferredFlags;\n+            final int newFlags = oldFlags | flag;\n+            if (oldFlags == newFlags) {\n+                break;\n+            }\n+\n+            if (deferredFlagsUpdater.compareAndSet(this, oldFlags, newFlags)) {\n+                break;\n+            }\n+        }\n+    }\n+\n     private void updateAvailability(RequestLogProperty property) {", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0NDc2Mg==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372844762", "bodyText": "Renamed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-01-30T09:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\nindex 4704856202..f8026f8064 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n\n@@ -322,26 +323,11 @@ public class DefaultRequestLog implements RequestLog, RequestLogBuilder {\n         return partiallyCompletedFuture;\n     }\n \n-    private void updateDeferredFlags(RequestLogProperty property) {\n-        final int flag = property.flag();\n-        for (;;) {\n-            final int oldFlags = deferredFlags;\n-            final int newFlags = oldFlags | flag;\n-            if (oldFlags == newFlags) {\n-                break;\n-            }\n-\n-            if (deferredFlagsUpdater.compareAndSet(this, oldFlags, newFlags)) {\n-                break;\n-            }\n-        }\n+    private void updateFlags(RequestLogProperty property) {\n+        updateFlags(property.flag());\n     }\n \n-    private void updateAvailability(RequestLogProperty property) {\n-        updateAvailability(property.flag());\n-    }\n-\n-    private void updateAvailability(int flags) {\n+    private void updateFlags(int flags) {\n         for (;;) {\n             final int oldFlags = this.flags;\n             final int newFlags = oldFlags | flags;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNjMyOA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372826328", "bodyText": "> -> !=", "author": "trustin", "createdAt": "2020-01-30T09:00:04Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -1140,8 +1135,8 @@ private void endResponse0(@Nullable Throwable responseCause) {\n \n     private void endResponse0(@Nullable Throwable responseCause, long responseEndTimeNanos) {\n         final int flags;\n-        if (responseCause == null && responseContentDeferred) {\n-            flags = RequestLogProperty.FLAGS_RESPONSE_COMPLETE_WITHOUT_CONTENT;\n+        if (responseCause == null && deferredFlags > 0) {", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0Mzc3Mg==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372843772", "bodyText": "Oops. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-01-30T09:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNjMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\nindex 4704856202..f8026f8064 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n\n@@ -1135,7 +1137,8 @@ public class DefaultRequestLog implements RequestLog, RequestLogBuilder {\n \n     private void endResponse0(@Nullable Throwable responseCause, long responseEndTimeNanos) {\n         final int flags;\n-        if (responseCause == null && deferredFlags > 0) {\n+        final int deferredFlags = this.deferredFlags;\n+        if (responseCause == null && deferredFlags != 0) {\n             flags = RequestLogProperty.FLAGS_RESPONSE_COMPLETE & ~deferredFlags;\n         } else {\n             flags = RequestLogProperty.FLAGS_RESPONSE_COMPLETE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNjUxMQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372826511", "bodyText": "2 volatile reads - please extract into a single local variable.", "author": "trustin", "createdAt": "2020-01-30T09:00:30Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -1140,8 +1135,8 @@ private void endResponse0(@Nullable Throwable responseCause) {\n \n     private void endResponse0(@Nullable Throwable responseCause, long responseEndTimeNanos) {\n         final int flags;\n-        if (responseCause == null && responseContentDeferred) {\n-            flags = RequestLogProperty.FLAGS_RESPONSE_COMPLETE_WITHOUT_CONTENT;\n+        if (responseCause == null && deferredFlags > 0) {\n+            flags = RequestLogProperty.FLAGS_RESPONSE_COMPLETE & ~deferredFlags;", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\nindex 4704856202..f8026f8064 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n\n@@ -1135,7 +1137,8 @@ public class DefaultRequestLog implements RequestLog, RequestLogBuilder {\n \n     private void endResponse0(@Nullable Throwable responseCause, long responseEndTimeNanos) {\n         final int flags;\n-        if (responseCause == null && deferredFlags > 0) {\n+        final int deferredFlags = this.deferredFlags;\n+        if (responseCause == null && deferredFlags != 0) {\n             flags = RequestLogProperty.FLAGS_RESPONSE_COMPLETE & ~deferredFlags;\n         } else {\n             flags = RequestLogProperty.FLAGS_RESPONSE_COMPLETE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNzI2MQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372827261", "bodyText": "How about: Note that a {@link Service} or a {@link Client} must be decorated with ... to enable the content preview.", "author": "trustin", "createdAt": "2020-01-30T09:02:17Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java", "diffHunk": "@@ -166,19 +165,12 @@ default long totalDurationNanos() {\n     /**\n      * Returns the preview of response content of the {@link Response}.\n      * Note that the content preview needs to be enabled when configuring a {@link Server} or a {@link Client}\n-     * to use this functionality.\n+     * by {@link ContentPreviewingService} or {@link ContentPreviewingClient} decorators respectively.", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java\nindex 74f9e7c521..04a8217482 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java\n\n@@ -164,8 +164,8 @@ public interface RequestLog extends RequestOnlyLog {\n \n     /**\n      * Returns the preview of response content of the {@link Response}.\n-     * Note that the content preview needs to be enabled when configuring a {@link Server} or a {@link Client}\n-     * by {@link ContentPreviewingService} or {@link ContentPreviewingClient} decorators respectively.\n+     * Note that a {@link Service} or a {@link Client} must be decorated with {@link ContentPreviewingService}\n+     * or {@link ContentPreviewingClient} decorators respectively to enable the content preview.\n      *\n      * @return the preview, or {@code null} if preview is disabled.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyODgyNA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372828824", "bodyText": "How about using whenComplete() to promote a good practice?", "author": "trustin", "createdAt": "2020-01-30T09:05:56Z", "path": "core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.logging;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.logging.ContentPreviewerFactory;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.common.logging.RequestLogAccess;\n+import com.linecorp.armeria.internal.logging.ContentPreviewerConfigurator;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * Decorates an {@link HttpService} to preview the content of {@link Request}s and {@link Response}s.\n+ *\n+ * <p>Note that this decorator just sets {@link RequestLog#requestContentPreview()} and\n+ * {@link RequestLog#responseContentPreview()}. You can get the previews using {@link RequestLogAccess}.\n+ *\n+ * <pre>{@code\n+ * RequestLogAccess logAccess = ctx.log();\n+ * logAccess.whenAvailable(RequestLogProperty.REQUEST_CONTENT_PREVIEW,\n+ *                         RequestLogProperty.RESPONSE_CONTENT_PREVIEW).thenApply(...);", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4NTM1NQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372885355", "bodyText": "That's a good suggestion!", "author": "minwoox", "createdAt": "2020-01-30T11:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyODgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingService.java b/core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingService.java\nindex c1158c3164..2411e454fe 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingService.java\n\n@@ -40,9 +40,10 @@ import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n  *\n  * <pre>{@code\n  * RequestLogAccess logAccess = ctx.log();\n- * logAccess.whenAvailable(RequestLogProperty.REQUEST_CONTENT_PREVIEW,\n- *                         RequestLogProperty.RESPONSE_CONTENT_PREVIEW).thenApply(...);\n- *\n+ * logAccess.whenComplete().thenApply(log -> {\n+ *     // Call log.requestContentPreview() and log.responseContentPreview() to use them.\n+ *     ...\n+ * });\n  * }</pre>\n  */\n public final class ContentPreviewingService extends SimpleDecoratingHttpService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyOTE0Mw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r372829143", "bodyText": "to to -> to", "author": "trustin", "createdAt": "2020-01-30T09:06:41Z", "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -69,7 +70,7 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         // This increases the execution duration of 'endResponse0' of the DefaultRequestLog,\n         // which means that we have more chance to reproduce the bug if two threads are racing\n         // for notifying RESPONSE_END to listeners.\n-        builder.contentPreview(100);\n+        builder.decorator(ContentPreviewingClient.builder().contentPreview(100).newDecorator());\n         // In order to use a different thread to to subscribe to the response.", "originalCommit": "6f0dee43ce1456816c3fad8a578e615128ea7aba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java b/core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java\nindex c9ec6e035b..da061d930e 100644\n--- a/core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java\n\n@@ -71,7 +71,7 @@ class HttpResponseDecoderTest {\n         // which means that we have more chance to reproduce the bug if two threads are racing\n         // for notifying RESPONSE_END to listeners.\n         builder.decorator(ContentPreviewingClient.builder().contentPreview(100).newDecorator());\n-        // In order to use a different thread to to subscribe to the response.\n+        // In order to use a different thread to subscribe to the response.\n         builder.decorator(RetryingClient.builder(strategy)\n                                         .maxTotalAttempts(2)\n                                         .newDecorator());\n"}}, {"oid": "e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "url": "https://github.com/line/armeria/commit/e291a71aec0305f25aacc8cf25ae15d27a8ffd3a", "message": "Address comments by @trustin", "committedDate": "2020-01-30T09:37:38Z", "type": "commit"}, {"oid": "9c6e13a6667eaff20ff8f48ffb696ed8f8eed685", "url": "https://github.com/line/armeria/commit/9c6e13a6667eaff20ff8f48ffb696ed8f8eed685", "message": "Change return type", "committedDate": "2020-01-30T11:01:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODA2Mg==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373288062", "bodyText": "deferredFlags doesn't need to be read when requestCause is not null.", "author": "trustin", "createdAt": "2020-01-31T02:11:15Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -845,8 +844,9 @@ private void endRequest0(@Nullable Throwable requestCause) {\n \n     private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNanos) {\n         final int flags;\n-        if (requestCause == null && requestContentDeferred) {\n-            flags = RequestLogProperty.FLAGS_REQUEST_COMPLETE_WITHOUT_CONTENT;\n+        final int deferredFlags = this.deferredFlags;\n+        if (requestCause == null && deferredFlags != 0) {", "originalCommit": "9c6e13a6667eaff20ff8f48ffb696ed8f8eed685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4OTAzOA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373289038", "bodyText": "\ud83d\ude46\u200d\u2642", "author": "minwoox", "createdAt": "2020-01-31T02:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5587e426777056c79598cdbea8847ac62a16be2a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\nindex f8026f8064..40431b4c9d 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n\n@@ -844,11 +854,10 @@ public class DefaultRequestLog implements RequestLog, RequestLogBuilder {\n \n     private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNanos) {\n         final int flags;\n-        final int deferredFlags = this.deferredFlags;\n-        if (requestCause == null && deferredFlags != 0) {\n-            flags = RequestLogProperty.FLAGS_REQUEST_COMPLETE & ~deferredFlags;\n-        } else {\n+        if (requestCause != null) {\n             flags = RequestLogProperty.FLAGS_REQUEST_COMPLETE;\n+        } else {\n+            flags = RequestLogProperty.FLAGS_REQUEST_COMPLETE & ~deferredFlags;\n         }\n \n         if (isAvailable(flags)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODQzMw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373288433", "bodyText": "Please merge master and use whenComplete().", "author": "trustin", "createdAt": "2020-01-31T02:13:07Z", "path": "core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.logging;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.FilteredHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.ContentPreviewer;\n+import com.linecorp.armeria.common.logging.ContentPreviewerFactory;\n+import com.linecorp.armeria.common.logging.RequestLogBuilder;\n+import com.linecorp.armeria.internal.ArmeriaHttpUtil;\n+\n+/**\n+ * A configurator to set up request and response content previewers.\n+ */\n+public final class ContentPreviewerConfigurator {\n+\n+    @Nullable\n+    private final ContentPreviewerFactory requestContentPreviewerFactory;\n+\n+    @Nullable\n+    private final ContentPreviewerFactory responseContentPreviewerFactory;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ContentPreviewerConfigurator(@Nullable ContentPreviewerFactory requestContentPreviewerFactory,\n+                                        @Nullable ContentPreviewerFactory responseContentPreviewerFactory) {\n+        assert requestContentPreviewerFactory != null || responseContentPreviewerFactory != null;\n+        this.requestContentPreviewerFactory = requestContentPreviewerFactory;\n+        this.responseContentPreviewerFactory = responseContentPreviewerFactory;\n+    }\n+\n+    /**\n+     * Sets up the request {@link ContentPreviewer} when {@code requestContentPreviewerFactory}\n+     * is non-null and {@link ContentPreviewerFactory#get(RequestContext, HttpHeaders)} returns a\n+     * {@link ContentPreviewer} instance that is not {@link ContentPreviewer#isDisabled()}.\n+     */\n+    public HttpRequest maybeSetUpRequestContentPreviewer(RequestContext ctx, HttpRequest req) {\n+        requireNonNull(ctx, \"ctx\");\n+        requireNonNull(req, \"req\");\n+        if (requestContentPreviewerFactory == null) {\n+            return req;\n+        }\n+\n+        final RequestHeaders headers = req.headers();\n+        final ContentPreviewer requestContentPreviewer = requestContentPreviewerFactory.get(ctx, headers);\n+        if (requestContentPreviewer.isDisabled()) {\n+            return req;\n+        }\n+\n+        final RequestLogBuilder logBuilder = ctx.logBuilder();\n+        logBuilder.deferRequestContentPreview();\n+        requestContentPreviewer.onHeaders(headers);\n+        req.completionFuture().handle((unused, unused1) -> {", "originalCommit": "9c6e13a6667eaff20ff8f48ffb696ed8f8eed685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5Mzg5MQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373293891", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-01-31T02:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "5587e426777056c79598cdbea8847ac62a16be2a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java b/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\nindex 7c2012f3d6..671a17617b 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewerConfigurator.java\n\n@@ -103,8 +103,11 @@ public final class ContentPreviewerConfigurator {\n             @Override\n             protected Throwable beforeError(Subscriber<? super HttpObject> subscriber,\n                                             Throwable cause) {\n-                // Set the preview to make it sure the log is complete even though an exception is raised.\n-                logBuilder.requestContentPreview(requestContentPreviewer.produce());\n+                // Call produce() to release the resources in the previewer. Consider adding close() method.\n+                requestContentPreviewer.produce();\n+\n+                // Set null to make it sure the log is complete.\n+                logBuilder.requestContentPreview(null);\n                 return cause;\n             }\n         };\n"}}, {"oid": "5587e426777056c79598cdbea8847ac62a16be2a", "url": "https://github.com/line/armeria/commit/5587e426777056c79598cdbea8847ac62a16be2a", "message": "Add logging", "committedDate": "2020-01-31T02:37:30Z", "type": "commit"}, {"oid": "c0569cf2af4351ff5624291cfde76928e3088f48", "url": "https://github.com/line/armeria/commit/c0569cf2af4351ff5624291cfde76928e3088f48", "message": "Merge branch 'master' into add_content_preview_decorator", "committedDate": "2020-01-31T02:39:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5NDk3NQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373294975", "bodyText": "Probably better logging only once?\n{}. -> {} ? (The resulting log message would be: SomePreview. looking like . is part of the preview)\nYou try -> You tried\nDo you configure .. -> Did you apply .. ?", "author": "trustin", "createdAt": "2020-01-31T02:47:44Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -780,6 +785,11 @@ public String requestContentPreview() {\n     @Override\n     public void requestContentPreview(@Nullable String requestContentPreview) {\n         if (isAvailable(RequestLogProperty.REQUEST_CONTENT_PREVIEW)) {\n+            if (requestContentPreview != null) {\n+                logger.warn(\"You try to set the request content preview twice: {}. \" +\n+                            \" Do you configure content previewing decorator more than once?\",\n+                            requestContentPreview);", "originalCommit": "5587e426777056c79598cdbea8847ac62a16be2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5Nzc1OA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373297758", "bodyText": "Fixed. Thanks!", "author": "minwoox", "createdAt": "2020-01-31T03:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5NDk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a38d6dc98c664d40317b803412e7f76eee2bdd5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\nindex 40431b4c9d..aa4d050ef6 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n\n@@ -785,9 +787,10 @@ public class DefaultRequestLog implements RequestLog, RequestLogBuilder {\n     @Override\n     public void requestContentPreview(@Nullable String requestContentPreview) {\n         if (isAvailable(RequestLogProperty.REQUEST_CONTENT_PREVIEW)) {\n-            if (requestContentPreview != null) {\n-                logger.warn(\"You try to set the request content preview twice: {}. \" +\n-                            \" Do you configure content previewing decorator more than once?\",\n+            if (!warnedSettingContentPreviewTwice && requestContentPreview != null) {\n+                warnedSettingContentPreviewTwice = true;\n+                logger.warn(\"You tried to set the content preview twice: {} \" +\n+                            \" Did you apply content previewing decorator more than once?\",\n                             requestContentPreview);\n             }\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5NTIxNA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373295214", "bodyText": "Ditto", "author": "trustin", "createdAt": "2020-01-31T02:48:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -1066,6 +1075,11 @@ public String responseContentPreview() {\n     @Override\n     public void responseContentPreview(@Nullable String responseContentPreview) {\n         if (isAvailable(RequestLogProperty.RESPONSE_CONTENT_PREVIEW)) {\n+            if (responseContentPreview != null) {\n+                logger.warn(\"You try to set the response content preview twice: {}. \" +\n+                            \" Do you configure content previewing decorator more than once?\",\n+                            responseContentPreview);", "originalCommit": "5587e426777056c79598cdbea8847ac62a16be2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a38d6dc98c664d40317b803412e7f76eee2bdd5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\nindex 40431b4c9d..aa4d050ef6 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java\n\n@@ -1075,9 +1078,10 @@ public class DefaultRequestLog implements RequestLog, RequestLogBuilder {\n     @Override\n     public void responseContentPreview(@Nullable String responseContentPreview) {\n         if (isAvailable(RequestLogProperty.RESPONSE_CONTENT_PREVIEW)) {\n-            if (responseContentPreview != null) {\n-                logger.warn(\"You try to set the response content preview twice: {}. \" +\n-                            \" Do you configure content previewing decorator more than once?\",\n+            if (!warnedSettingContentPreviewTwice && responseContentPreview != null) {\n+                warnedSettingContentPreviewTwice = true;\n+                logger.warn(\"You tried to set the content preview twice: {} \" +\n+                            \" Did you apply content previewing decorator more than once?\",\n                             responseContentPreview);\n             }\n             return;\n"}}, {"oid": "9a38d6dc98c664d40317b803412e7f76eee2bdd5", "url": "https://github.com/line/armeria/commit/9a38d6dc98c664d40317b803412e7f76eee2bdd5", "message": "Fix warning message", "committedDate": "2020-01-31T03:01:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyOTQ3OQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373329479", "bodyText": "Do you think we should check state here too? It might give a user earlier feedback", "author": "anuraaga", "createdAt": "2020-01-31T06:14:31Z", "path": "core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.logging;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.nio.charset.Charset;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.common.logging.ContentPreviewerFactory;\n+import com.linecorp.armeria.common.logging.ContentPreviewingDecoratorBuilder;\n+\n+/**\n+ * Builds a new {@link ContentPreviewingClient} or its decorator function.\n+ */\n+public final class ContentPreviewingClientBuilder extends ContentPreviewingDecoratorBuilder {\n+\n+    @Override\n+    public ContentPreviewingClientBuilder contentPreview(int length) {\n+        return (ContentPreviewingClientBuilder) super.contentPreview(length);\n+    }\n+\n+    @Override\n+    public ContentPreviewingClientBuilder contentPreview(int length, Charset defaultCharset) {\n+        return (ContentPreviewingClientBuilder) super.contentPreview(length, defaultCharset);\n+    }\n+\n+    @Override\n+    public ContentPreviewingClientBuilder contentPreviewerFactory(ContentPreviewerFactory factory) {\n+        return (ContentPreviewingClientBuilder) super.contentPreviewerFactory(factory);\n+    }\n+\n+    @Override\n+    public ContentPreviewingClientBuilder requestContentPreviewerFactory(\n+            ContentPreviewerFactory requestContentPreviewerFactory) {\n+        return (ContentPreviewingClientBuilder)\n+                super.requestContentPreviewerFactory(requestContentPreviewerFactory);\n+    }\n+\n+    @Override\n+    public ContentPreviewingClientBuilder responseContentPreviewerFactory(\n+            ContentPreviewerFactory responseContentPreviewerFactory) {\n+        return (ContentPreviewingClientBuilder)\n+                super.responseContentPreviewerFactory(responseContentPreviewerFactory);\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link ContentPreviewingClient} based on the properties of this builder.\n+     */\n+    public ContentPreviewingClient build(HttpClient delegate) {\n+        checkState(requestContentPreviewerFactory() != null || responseContentPreviewerFactory() != null,\n+                   \"requestContentPreviewerFactory or responseContentPreviewerFactory must be set.\");\n+        return new ContentPreviewingClient(delegate, requestContentPreviewerFactory(),\n+                                           responseContentPreviewerFactory());\n+    }\n+\n+    /**\n+     * Returns a newly-created decorator that decorates an {@link HttpClient} with a new\n+     * {@link ContentPreviewingClient} based on the properties of this builder.\n+     */\n+    public Function<? super HttpClient, ContentPreviewingClient> newDecorator() {\n+        return this::build;", "originalCommit": "9a38d6dc98c664d40317b803412e7f76eee2bdd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0NDczOA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373344738", "bodyText": "Which state do you mean?", "author": "minwoox", "createdAt": "2020-01-31T07:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyOTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0NTA1Mw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373345053", "bodyText": "I mean the checkState as in build - I think usually that will be called much later than setting the decorator so could be confusing, but here it would be right away.", "author": "anuraaga", "createdAt": "2020-01-31T07:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyOTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0NTQ3NA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373345474", "bodyText": "Ah, that's a good point. Let me add that. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-01-31T07:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyOTQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "06639a017b9d73caf9b91907de54b3956a7846b5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java b/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\nindex 6170e9b816..64859e25d0 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\n\n@@ -74,6 +74,8 @@ public final class ContentPreviewingClientBuilder extends ContentPreviewingDecor\n      * {@link ContentPreviewingClient} based on the properties of this builder.\n      */\n     public Function<? super HttpClient, ContentPreviewingClient> newDecorator() {\n+        checkState(requestContentPreviewerFactory() != null || responseContentPreviewerFactory() != null,\n+                   \"requestContentPreviewerFactory or responseContentPreviewerFactory must be set.\");\n         return this::build;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzMDg0OA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373330848", "bodyText": "What is this testing? Or mostly for documentation of ordering semantics?", "author": "anuraaga", "createdAt": "2020-01-31T06:21:08Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/ContentPreviewingClientTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.logging;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Function;\n+import java.util.zip.GZIPInputStream;\n+\n+import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.ClientRequestContextCaptor;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.encoding.DecodingClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.ContentPreviewer;\n+import com.linecorp.armeria.common.logging.ContentPreviewerFactory;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.encoding.EncodingService;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+class ContentPreviewingClientTest {\n+\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.from(\n+                    req.aggregate()\n+                       .thenApply(aggregated -> {\n+                           final ResponseHeaders responseHeaders =\n+                                   ResponseHeaders.of(HttpStatus.OK,\n+                                                      HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8);\n+                           return HttpResponse.of(responseHeaders,\n+                                                  HttpData.ofUtf8(\"Hello \" + aggregated.contentUtf8() + '!'));\n+                       })));\n+            sb.decorator(delegate -> new EncodingService(delegate, unused -> true, 1));\n+        }\n+    };\n+\n+    @RepeatedTest(10)\n+    void decodedContentPreview() {\n+        final WebClient client = WebClient.builder(server.uri(\"/\"))\n+                                          .decorator(DecodingClient.newDecorator())\n+                                          .decorator(ContentPreviewingClient.builder()\n+                                                                            .contentPreview(100)\n+                                                                            .newDecorator())\n+                                          .build();\n+        final RequestHeaders headers = RequestHeaders.of(HttpMethod.POST, \"/\",\n+                                                         HttpHeaderNames.CONTENT_TYPE, \"text/plain\");\n+\n+        final ClientRequestContext context;\n+        try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {\n+            final AggregatedHttpResponse res = client.execute(headers, \"Armeria\").aggregate().join();\n+            assertThat(res.contentUtf8()).isEqualTo(\"Hello Armeria!\");\n+            assertThat(res.headers().get(HttpHeaderNames.CONTENT_ENCODING)).isEqualTo(\"gzip\");\n+            context = captor.get();\n+        }\n+\n+        final RequestLog requestLog = context.log().whenComplete().join();\n+        assertThat(requestLog.requestContentPreview()).isEqualTo(\"Armeria\");\n+        assertThat(requestLog.responseContentPreview()).isEqualTo(\"Hello Armeria!\");\n+    }\n+\n+    @Test\n+    void contentPreviewIsDecodedInPreviewer() {", "originalCommit": "9a38d6dc98c664d40317b803412e7f76eee2bdd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0Mjk1Mw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373342953", "bodyText": "Just wanted to show that the preview can be different depends on the order it attached.", "author": "minwoox", "createdAt": "2020-01-31T07:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzMDg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0NTIxMA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373345210", "bodyText": "Probably good to add a comment about that", "author": "anuraaga", "createdAt": "2020-01-31T07:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzMDg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM2Njg3NQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373366875", "bodyText": "Added. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-01-31T08:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzMDg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "757caeacd0d2c6e14972e2e94739f5e2bd892b4e", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/client/logging/ContentPreviewingClientTest.java b/core/src/test/java/com/linecorp/armeria/client/logging/ContentPreviewingClientTest.java\nindex c90a503d11..090925f22f 100644\n--- a/core/src/test/java/com/linecorp/armeria/client/logging/ContentPreviewingClientTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/logging/ContentPreviewingClientTest.java\n\n@@ -70,7 +70,7 @@ class ContentPreviewingClientTest {\n         }\n     };\n \n-    @RepeatedTest(10)\n+    @Test\n     void decodedContentPreview() {\n         final WebClient client = WebClient.builder(server.uri(\"/\"))\n                                           .decorator(DecodingClient.newDecorator())\n"}}, {"oid": "06639a017b9d73caf9b91907de54b3956a7846b5", "url": "https://github.com/line/armeria/commit/06639a017b9d73caf9b91907de54b3956a7846b5", "message": "Add checkState", "committedDate": "2020-01-31T07:28:05Z", "type": "commit"}, {"oid": "757caeacd0d2c6e14972e2e94739f5e2bd892b4e", "url": "https://github.com/line/armeria/commit/757caeacd0d2c6e14972e2e94739f5e2bd892b4e", "message": "Add comments", "committedDate": "2020-01-31T08:36:33Z", "type": "commit"}, {"oid": "93af158328f2fef9d75db60e769d3796c6c01ca9", "url": "https://github.com/line/armeria/commit/93af158328f2fef9d75db60e769d3796c6c01ca9", "message": "Remove unused", "committedDate": "2020-01-31T09:03:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyOTg3OA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373429878", "bodyText": "nit: Could join two lines?", "author": "ikhoon", "createdAt": "2020-01-31T11:13:00Z", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java", "diffHunk": "@@ -60,32 +56,24 @@\n      */\n     ServiceConfig(Route route, HttpService service,\n                   long requestTimeoutMillis, long maxRequestLength, boolean verboseResponses,\n-                  ContentPreviewerFactory requestContentPreviewerFactory,\n-                  ContentPreviewerFactory responseContentPreviewerFactory, AccessLogWriter accessLogWriter,\n+                  AccessLogWriter accessLogWriter,\n                   boolean shutdownAccessLogWriterOnStop) {", "originalCommit": "93af158328f2fef9d75db60e769d3796c6c01ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87ce23853bbfece7476039b76952ddb000acc5d7", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java b/core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java\nindex 26cd21eada..8e24ac39e0 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java\n\n@@ -56,8 +56,7 @@ public final class ServiceConfig {\n      */\n     ServiceConfig(Route route, HttpService service,\n                   long requestTimeoutMillis, long maxRequestLength, boolean verboseResponses,\n-                  AccessLogWriter accessLogWriter,\n-                  boolean shutdownAccessLogWriterOnStop) {\n+                  AccessLogWriter accessLogWriter, boolean shutdownAccessLogWriterOnStop) {\n         this(null, route, service, requestTimeoutMillis, maxRequestLength,\n              verboseResponses, accessLogWriter, shutdownAccessLogWriterOnStop);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzOTExMg==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373439112", "bodyText": "Don't we need a package-private default constructor?", "author": "ikhoon", "createdAt": "2020-01-31T11:38:36Z", "path": "core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.logging;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.nio.charset.Charset;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.logging.ContentPreviewerFactory;\n+import com.linecorp.armeria.common.logging.ContentPreviewingDecoratorBuilder;\n+import com.linecorp.armeria.server.HttpService;\n+\n+/**\n+ * Builds a new {@link ContentPreviewingService} or its decorator function.\n+ */\n+public final class ContentPreviewingServiceBuilder extends ContentPreviewingDecoratorBuilder {", "originalCommit": "93af158328f2fef9d75db60e769d3796c6c01ca9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MDE2OA==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373450168", "bodyText": "Oops we need that. Thanks!", "author": "minwoox", "createdAt": "2020-01-31T12:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzOTExMg=="}], "type": "inlineReview", "revised_code": {"commit": "87ce23853bbfece7476039b76952ddb000acc5d7", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingServiceBuilder.java b/core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingServiceBuilder.java\nindex 4e7cc30643..e84c1b3de0 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingServiceBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingServiceBuilder.java\n\n@@ -30,6 +30,11 @@ import com.linecorp.armeria.server.HttpService;\n  */\n public final class ContentPreviewingServiceBuilder extends ContentPreviewingDecoratorBuilder {\n \n+    /**\n+     * Creates a new instance.\n+     */\n+    ContentPreviewingServiceBuilder() {}\n+\n     @Override\n     public ContentPreviewingServiceBuilder contentPreview(int length) {\n         return (ContentPreviewingServiceBuilder) super.contentPreview(length);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzOTUzNw==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373439537", "bodyText": "Don't we need a package-private default constructor?", "author": "ikhoon", "createdAt": "2020-01-31T11:40:02Z", "path": "core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.logging;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.nio.charset.Charset;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.common.logging.ContentPreviewerFactory;\n+import com.linecorp.armeria.common.logging.ContentPreviewingDecoratorBuilder;\n+\n+/**\n+ * Builds a new {@link ContentPreviewingClient} or its decorator function.\n+ */\n+public final class ContentPreviewingClientBuilder extends ContentPreviewingDecoratorBuilder {", "originalCommit": "93af158328f2fef9d75db60e769d3796c6c01ca9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87ce23853bbfece7476039b76952ddb000acc5d7", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java b/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\nindex 64859e25d0..36a8cb2642 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClientBuilder.java\n\n@@ -30,6 +30,11 @@ import com.linecorp.armeria.common.logging.ContentPreviewingDecoratorBuilder;\n  */\n public final class ContentPreviewingClientBuilder extends ContentPreviewingDecoratorBuilder {\n \n+    /**\n+     * Creates a new instance.\n+     */\n+    ContentPreviewingClientBuilder() {}\n+\n     @Override\n     public ContentPreviewingClientBuilder contentPreview(int length) {\n         return (ContentPreviewingClientBuilder) super.contentPreview(length);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0MTI2Mg==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373441262", "bodyText": "nit: requireNonNull(defaulCharset, \"defaultCharset\");?", "author": "ikhoon", "createdAt": "2020-01-31T11:45:24Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.Charset;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.internal.ArmeriaHttpUtil;\n+\n+/**\n+ * Builds a new content previewing decorator or its decorator function.\n+ */\n+public abstract class ContentPreviewingDecoratorBuilder {\n+\n+    @Nullable\n+    private ContentPreviewerFactory requestContentPreviewerFactory;\n+\n+    @Nullable\n+    private ContentPreviewerFactory responseContentPreviewerFactory;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    protected ContentPreviewingDecoratorBuilder() {}\n+\n+    /**\n+     * Sets the {@link ContentPreviewerFactory} for creating a {@link ContentPreviewer} which produces the\n+     * preview with the maximum {@code length} limit for a request and a response.\n+     * The previewer is enabled only if the content type of a request/response meets\n+     * any of the following conditions:\n+     * <ul>\n+     *     <li>when it matches {@code text/*} or {@code application/x-www-form-urlencoded}</li>\n+     *     <li>when its charset has been specified</li>\n+     *     <li>when its subtype is {@code \"xml\"} or {@code \"json\"}</li>\n+     *     <li>when its subtype ends with {@code \"+xml\"} or {@code \"+json\"}</li>\n+     * </ul>\n+     * @param length the maximum length of the preview.\n+     */\n+    public ContentPreviewingDecoratorBuilder contentPreview(int length) {\n+        return contentPreview(length, ArmeriaHttpUtil.HTTP_DEFAULT_CONTENT_CHARSET);\n+    }\n+\n+    /**\n+     * Sets the {@link ContentPreviewerFactory} for creating a {@link ContentPreviewer} which produces the\n+     * preview with the maximum {@code length} limit for a request and a response.\n+     * The previewer is enabled only if the content type of a request/response meets\n+     * any of the following conditions:\n+     * <ul>\n+     *     <li>when it matches {@code text/*} or {@code application/x-www-form-urlencoded}</li>\n+     *     <li>when its charset has been specified</li>\n+     *     <li>when its subtype is {@code \"xml\"} or {@code \"json\"}</li>\n+     *     <li>when its subtype ends with {@code \"+xml\"} or {@code \"+json\"}</li>\n+     * </ul>\n+     * @param length the maximum length of the preview\n+     * @param defaultCharset the default charset used when a charset is not specified in the\n+     *                       {@code \"content-type\"} header\n+     */\n+    public ContentPreviewingDecoratorBuilder contentPreview(int length, Charset defaultCharset) {", "originalCommit": "93af158328f2fef9d75db60e769d3796c6c01ca9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MDI4OQ==", "url": "https://github.com/line/armeria/pull/2422#discussion_r373450289", "bodyText": "Added!", "author": "minwoox", "createdAt": "2020-01-31T12:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0MTI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "87ce23853bbfece7476039b76952ddb000acc5d7", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java b/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java\nindex aebc428cd6..a6aebc26ba 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewingDecoratorBuilder.java\n\n@@ -73,6 +73,7 @@ public abstract class ContentPreviewingDecoratorBuilder {\n      *                       {@code \"content-type\"} header\n      */\n     public ContentPreviewingDecoratorBuilder contentPreview(int length, Charset defaultCharset) {\n+        requireNonNull(defaultCharset, \"defaultCharset\");\n         return contentPreviewerFactory(ContentPreviewerFactory.ofText(length, defaultCharset));\n     }\n \n"}}, {"oid": "87ce23853bbfece7476039b76952ddb000acc5d7", "url": "https://github.com/line/armeria/commit/87ce23853bbfece7476039b76952ddb000acc5d7", "message": "Address comments by @ikhoon", "committedDate": "2020-01-31T12:10:55Z", "type": "commit"}]}