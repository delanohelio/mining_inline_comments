{"pr_number": 2456, "pr_title": "Add EncodingServiceBuilder", "pr_createdAt": "2020-02-06T07:01:43Z", "pr_url": "https://github.com/line/armeria/pull/2456", "timeline": [{"oid": "00308607ae5b03acdcc454c236c3f9b612887d72", "url": "https://github.com/line/armeria/commit/00308607ae5b03acdcc454c236c3f9b612887d72", "message": "Add EncodingServiceBuilder\nMotivation:\n\n`EncodingService` has only public constructors to use as decorator so a user has to cast the type explictly.\nAlso it's not the way we do for decorating. We use builders and `Function`s.\n\nModifications:\n- Add `EncodingServiceBuilder`\n- (Breaking)\n  - Change the `encodableRequestHeadersPredicate` takes `RequestHeaders`\n  - Remove `HttpEncodingService` completely.\n\nResult:\n- Cleander API.", "committedDate": "2020-02-06T07:01:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2NzcxNw==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375667717", "bodyText": "We really need to dedup this configuration code. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-02-06T07:02:48Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java", "diffHunk": "@@ -163,9 +164,12 @@ public static void configureServerWithArmeriaSettings(ServerBuilder server, Arme\n \n         final ArmeriaSettings.Compression compression = settings.getCompression();\n         if (compression != null && compression.isEnabled()) {\n+            final long parsed = parseDataSize(compression.getMinResponseSize());\n+            final int minBytesToForceChunkedAndEncoding = parsed > Integer.MAX_VALUE ? Integer.MAX_VALUE\n+                                                                                     : (int) parsed;\n             server.decorator(contentEncodingDecorator(compression.getMimeTypes(),\n                                                       compression.getExcludedUserAgents(),\n-                                                      parseDataSize(compression.getMinResponseSize())));\n+                                                      minBytesToForceChunkedAndEncoding));", "originalCommit": "ced323696a2aedb73025dcc52109d22d94cf3318", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java\nindex 8de1ecba7..8522e4da5 100644\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java\n+++ b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java\n\n@@ -164,9 +165,8 @@ public final class ArmeriaConfigurationUtil {\n \n         final ArmeriaSettings.Compression compression = settings.getCompression();\n         if (compression != null && compression.isEnabled()) {\n-            final long parsed = parseDataSize(compression.getMinResponseSize());\n-            final int minBytesToForceChunkedAndEncoding = parsed > Integer.MAX_VALUE ? Integer.MAX_VALUE\n-                                                                                     : (int) parsed;\n+            final int minBytesToForceChunkedAndEncoding =\n+                    Ints.saturatedCast(parseDataSize(compression.getMinResponseSize()));\n             server.decorator(contentEncodingDecorator(compression.getMimeTypes(),\n                                                       compression.getExcludedUserAgents(),\n                                                       minBytesToForceChunkedAndEncoding));\n"}}, {"oid": "00308607ae5b03acdcc454c236c3f9b612887d72", "url": "https://github.com/line/armeria/commit/00308607ae5b03acdcc454c236c3f9b612887d72", "message": "Add EncodingServiceBuilder\nMotivation:\n\n`EncodingService` has only public constructors to use as decorator so a user has to cast the type explictly.\nAlso it's not the way we do for decorating. We use builders and `Function`s.\n\nModifications:\n- Add `EncodingServiceBuilder`\n- (Breaking)\n  - Change the `encodableRequestHeadersPredicate` takes `RequestHeaders`\n  - Remove `HttpEncodingService` completely.\n\nResult:\n- Cleander API.", "committedDate": "2020-02-06T07:01:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODc3Mw==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375668773", "bodyText": "Don't we need ? super here?", "author": "ikhoon", "createdAt": "2020-02-06T07:07:19Z", "path": "core/src/main/java/com/linecorp/armeria/server/encoding/EncodingService.java", "diffHunk": "@@ -39,66 +37,37 @@\n  *     <li>the response either has no fixed content length or the length is larger than 1KB</li>\n  * </ul>\n  */\n-public class EncodingService extends SimpleDecoratingHttpService {\n-\n-    private static final Predicate<MediaType> DEFAULT_ENCODABLE_CONTENT_TYPE_PREDICATE =\n-            contentType -> Stream.of(MediaType.ANY_TEXT_TYPE,\n-                                     MediaType.APPLICATION_XML_UTF_8,\n-                                     MediaType.JAVASCRIPT_UTF_8,\n-                                     MediaType.JSON_UTF_8)\n-                                 .anyMatch(contentType::is);\n-\n-    private static final Predicate<HttpHeaders> DEFAULT_ENCODABLE_REQUEST_HEADERS_PREDICATE =\n-            headers -> true;\n-\n-    private static final int DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING = 1024;\n+public final class EncodingService extends SimpleDecoratingHttpService {\n \n     private final Predicate<MediaType> encodableContentTypePredicate;\n-    private final Predicate<HttpHeaders> encodableRequestHeadersPredicate;\n+    private final Predicate<RequestHeaders> encodableRequestHeadersPredicate;", "originalCommit": "00308607ae5b03acdcc454c236c3f9b612887d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5NTE3NQ==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375695175", "bodyText": "Added. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-02-06T08:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingService.java b/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingService.java\nindex 889add9f0..a33cffe12 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingService.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingService.java\n\n@@ -40,7 +40,7 @@ import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n public final class EncodingService extends SimpleDecoratingHttpService {\n \n     private final Predicate<MediaType> encodableContentTypePredicate;\n-    private final Predicate<RequestHeaders> encodableRequestHeadersPredicate;\n+    private final Predicate<? super RequestHeaders> encodableRequestHeadersPredicate;\n     private final long minBytesToForceChunkedAndEncoding;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTE5Ng==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375671196", "bodyText": "DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING is a private field.", "author": "ikhoon", "createdAt": "2020-02-06T07:16:20Z", "path": "core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.encoding;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.HttpService;\n+\n+/**\n+ * Builds a new {@link EncodingService} or its decorator function.\n+ */\n+public final class EncodingServiceBuilder {\n+\n+    // TODO(minwoox) consider this condition to align with the default text preveiwer.\n+    private static final Predicate<MediaType> defaultEncodableContentTypePredicate =\n+            contentType -> Stream.of(MediaType.ANY_TEXT_TYPE,\n+                                     MediaType.APPLICATION_XML_UTF_8,\n+                                     MediaType.JAVASCRIPT_UTF_8,\n+                                     MediaType.JSON_UTF_8)\n+                                 .anyMatch(contentType::is);\n+\n+    private static final int DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING = 1024;\n+\n+    private Predicate<MediaType> encodableContentTypePredicate = defaultEncodableContentTypePredicate;\n+\n+    private Predicate<RequestHeaders> encodableRequestHeadersPredicate = headers -> true;\n+\n+    private int minBytesToForceChunkedAndEncoding = DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING;\n+\n+    EncodingServiceBuilder() {}\n+\n+    /**\n+     * Sets the specified {@link MediaType}s to evaluate whether the content type of the {@link HttpResponse}\n+     * is encodable or not. It's encodable when the content type is one of the {@link MediaType}s.\n+     */\n+    public EncodingServiceBuilder encodableContentTypes(MediaType... contentTypes) {\n+        return encodableContentTypes(ImmutableList.copyOf(requireNonNull(contentTypes, \"contentTypes\")));\n+    }\n+\n+    /**\n+     * Sets the specified {@link MediaType}s to evaluate whether the content type of the {@link HttpResponse}\n+     * is encodable or not. It's encodable when the content type is one of the {@link MediaType}s.\n+     */\n+    public EncodingServiceBuilder encodableContentTypes(Iterable<MediaType> contentTypes) {\n+        final List<MediaType> snapshot = ImmutableList.copyOf(requireNonNull(contentTypes, \"contentTypes\"));\n+        return encodableContentTypePredicate(mediaType -> snapshot.stream().anyMatch(mediaType::belongsTo));\n+    }\n+\n+    /**\n+     * Sets the specified {@link Predicate} to evaluate whether the content type of the {@link HttpResponse} is\n+     * encodable or not.\n+     */\n+    public EncodingServiceBuilder encodableContentTypePredicate(\n+            Predicate<MediaType> encodableContentTypePredicate) {\n+        requireNonNull(encodableContentTypePredicate, \"encodableContentTypePredicate\");\n+        this.encodableContentTypePredicate = encodableContentTypePredicate;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified {@link Predicate} to evaluate whether the corresponding {@link HttpResponse} of the\n+     * {@link HttpRequest} whose {@link RequestHeaders} is the input of the {@link Predicate}\n+     * is encodable or not.\n+     */\n+    public EncodingServiceBuilder encodableRequestHeadersPredicate(\n+            Predicate<RequestHeaders> encodableRequestHeadersPredicate) {\n+        requireNonNull(encodableRequestHeadersPredicate, \"encodableRequestHeadersPredicate\");\n+        this.encodableRequestHeadersPredicate = encodableRequestHeadersPredicate;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified minimum length to force chunked encoding. The {@link HttpResponse} is encoded only\n+     * when the content is variable, which means the {@link ResponseHeaders} does not have\n+     * {@code \"Content-Length\"} header, or the length of the content exceeds the specified length.\n+     * The default is {@value DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING}.", "originalCommit": "00308607ae5b03acdcc454c236c3f9b612887d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5MjU0Ng==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375692546", "bodyText": "It's OK to be a private field. @value will inline the value.", "author": "trustin", "createdAt": "2020-02-06T08:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5NDU0Ng==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375694546", "bodyText": "Yes it does not have to be. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-02-06T08:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxNzM2OQ==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375817369", "bodyText": "Ah, I didn't know that, I've learned a lot. Thanks!", "author": "ikhoon", "createdAt": "2020-02-06T12:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java b/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java\nindex 450d14df4..431bbcdc0 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java\n\n@@ -50,7 +50,7 @@ public final class EncodingServiceBuilder {\n \n     private Predicate<MediaType> encodableContentTypePredicate = defaultEncodableContentTypePredicate;\n \n-    private Predicate<RequestHeaders> encodableRequestHeadersPredicate = headers -> true;\n+    private Predicate<? super RequestHeaders> encodableRequestHeadersPredicate = headers -> true;\n \n     private int minBytesToForceChunkedAndEncoding = DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MjAyOA==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375672028", "bodyText": "Ints.saturatedCast(parsed)?", "author": "ikhoon", "createdAt": "2020-02-06T07:19:10Z", "path": "dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaConfigurationUtil.java", "diffHunk": "@@ -429,9 +433,18 @@ private static URL getURL(String resourceLocation) throws FileNotFoundException\n \n     private static void configureCompression(ServerBuilder serverBuilder, Compression compression) {\n         if (compression.isEnabled()) {\n+            final int minBytesToForceChunkedAndEncoding;\n+            final String minResponseSize = compression.getMinResponseSize();\n+            if (minResponseSize == null) {\n+                minBytesToForceChunkedAndEncoding = DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING;\n+            } else {\n+                final long parsed = parseDataSize(minResponseSize);\n+                minBytesToForceChunkedAndEncoding = parsed > Integer.MAX_VALUE ? Integer.MAX_VALUE\n+                                                                               : (int) parsed;", "originalCommit": "00308607ae5b03acdcc454c236c3f9b612887d72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "chunk": "diff --git a/dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaConfigurationUtil.java b/dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaConfigurationUtil.java\nindex 96ddc75c2..a37229d73 100644\n--- a/dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaConfigurationUtil.java\n+++ b/dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaConfigurationUtil.java\n\n@@ -438,9 +439,7 @@ final class ArmeriaConfigurationUtil {\n             if (minResponseSize == null) {\n                 minBytesToForceChunkedAndEncoding = DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING;\n             } else {\n-                final long parsed = parseDataSize(minResponseSize);\n-                minBytesToForceChunkedAndEncoding = parsed > Integer.MAX_VALUE ? Integer.MAX_VALUE\n-                                                                               : (int) parsed;\n+                minBytesToForceChunkedAndEncoding = Ints.saturatedCast(parseDataSize(minResponseSize));\n             }\n             serverBuilder.decorator(contentEncodingDecorator(compression.getMimeTypes(),\n                                                              compression.getExcludedUserAgents(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MjQ1OQ==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375672459", "bodyText": "Ditto: Ints.saturatedCast(minResponseSize)?", "author": "ikhoon", "createdAt": "2020-02-06T07:20:50Z", "path": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -187,9 +187,11 @@ public WebServer getWebServer(HttpHandler httpHandler) {\n \n         final Compression compression = getCompression();\n         if (compression != null && compression.getEnabled()) {\n+            final long minResponseSize = compression.getMinResponseSize().toBytes();\n             sb.decorator(contentEncodingDecorator(compression.getMimeTypes(),\n                                                   compression.getExcludedUserAgents(),\n-                                                  compression.getMinResponseSize().toBytes()));\n+                                                  minResponseSize > Integer.MAX_VALUE ? Integer.MAX_VALUE\n+                                                                                      : (int) minResponseSize));", "originalCommit": "00308607ae5b03acdcc454c236c3f9b612887d72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "chunk": "diff --git a/spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java b/spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\nindex 52e441eea..4fe8cd876 100644\n--- a/spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n+++ b/spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n\n@@ -190,8 +191,7 @@ public class ArmeriaReactiveWebServerFactory extends AbstractReactiveWebServerFa\n             final long minResponseSize = compression.getMinResponseSize().toBytes();\n             sb.decorator(contentEncodingDecorator(compression.getMimeTypes(),\n                                                   compression.getExcludedUserAgents(),\n-                                                  minResponseSize > Integer.MAX_VALUE ? Integer.MAX_VALUE\n-                                                                                      : (int) minResponseSize));\n+                                                  Ints.saturatedCast(minResponseSize)));\n         }\n \n         final ArmeriaSettings settings = findBean(ArmeriaSettings.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MjUxNg==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375672516", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-02-06T07:21:04Z", "path": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -261,9 +263,12 @@ private void configureArmeriaService(ServerBuilder sb, ArmeriaSettings settings)\n \n         final ArmeriaSettings.Compression compression = settings.getCompression();\n         if (compression != null && compression.isEnabled()) {\n+            final long parsed = parseDataSize(compression.getMinResponseSize());\n+            final int minBytesToForceChunkedAndEncoding = parsed > Integer.MAX_VALUE ? Integer.MAX_VALUE\n+                                                                                     : (int) parsed;", "originalCommit": "00308607ae5b03acdcc454c236c3f9b612887d72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "chunk": "diff --git a/spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java b/spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\nindex 52e441eea..4fe8cd876 100644\n--- a/spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n+++ b/spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n\n@@ -264,11 +264,9 @@ public class ArmeriaReactiveWebServerFactory extends AbstractReactiveWebServerFa\n         final ArmeriaSettings.Compression compression = settings.getCompression();\n         if (compression != null && compression.isEnabled()) {\n             final long parsed = parseDataSize(compression.getMinResponseSize());\n-            final int minBytesToForceChunkedAndEncoding = parsed > Integer.MAX_VALUE ? Integer.MAX_VALUE\n-                                                                                     : (int) parsed;\n             sb.decorator(contentEncodingDecorator(compression.getMimeTypes(),\n                                                   compression.getExcludedUserAgents(),\n-                                                  minBytesToForceChunkedAndEncoding));\n+                                                  Ints.saturatedCast(parsed)));\n         }\n \n         if (!Strings.isNullOrEmpty(settings.getDocsPath())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NjkwNw==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375686907", "bodyText": "Could create a MediaTypeSet and reuse it, instead of creating a new stream list again and again.", "author": "trustin", "createdAt": "2020-02-06T08:06:01Z", "path": "core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.encoding;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.HttpService;\n+\n+/**\n+ * Builds a new {@link EncodingService} or its decorator function.\n+ */\n+public final class EncodingServiceBuilder {\n+\n+    // TODO(minwoox) consider this condition to align with the default text preveiwer.\n+    private static final Predicate<MediaType> defaultEncodableContentTypePredicate =\n+            contentType -> Stream.of(MediaType.ANY_TEXT_TYPE,\n+                                     MediaType.APPLICATION_XML_UTF_8,\n+                                     MediaType.JAVASCRIPT_UTF_8,\n+                                     MediaType.JSON_UTF_8)\n+                                 .anyMatch(contentType::is);", "originalCommit": "00308607ae5b03acdcc454c236c3f9b612887d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5OTEwMQ==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375699101", "bodyText": "Let me address this once #2444 is merged. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-02-06T08:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NjkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyMTY5NQ==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375721695", "bodyText": "Oops realized that the MediaTypeSet cannot have a media type which has wildcard. So just use Set and iterate on it.", "author": "minwoox", "createdAt": "2020-02-06T09:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NjkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyMjA1Mw==", "url": "https://github.com/line/armeria/pull/2456#discussion_r375722053", "bodyText": "Oh no! OK.", "author": "trustin", "createdAt": "2020-02-06T09:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NjkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java b/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java\nindex 450d14df4..431bbcdc0 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java\n\n@@ -50,7 +50,7 @@ public final class EncodingServiceBuilder {\n \n     private Predicate<MediaType> encodableContentTypePredicate = defaultEncodableContentTypePredicate;\n \n-    private Predicate<RequestHeaders> encodableRequestHeadersPredicate = headers -> true;\n+    private Predicate<? super RequestHeaders> encodableRequestHeadersPredicate = headers -> true;\n \n     private int minBytesToForceChunkedAndEncoding = DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING;\n \n"}}, {"oid": "9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "url": "https://github.com/line/armeria/commit/9c2fda57efa86e522e0bdc547ef2ee96f2f055fc", "message": "Address the comment from @ikhoon and @trustin", "committedDate": "2020-02-06T08:34:59Z", "type": "commit"}, {"oid": "d49c88b94162b58582529fc2cd62a9dda2d8c67f", "url": "https://github.com/line/armeria/commit/d49c88b94162b58582529fc2cd62a9dda2d8c67f", "message": "Use Set", "committedDate": "2020-02-06T09:27:10Z", "type": "commit"}, {"oid": "38835df2168c677f112cdb805a0dc6cb1af2cdcc", "url": "https://github.com/line/armeria/commit/38835df2168c677f112cdb805a0dc6cb1af2cdcc", "message": "Merge branch 'master' into add_encodingServiceBuilder", "committedDate": "2020-02-07T03:41:02Z", "type": "commit"}, {"oid": "17626127fdaf467d349670c035bee85c959ae3b4", "url": "https://github.com/line/armeria/commit/17626127fdaf467d349670c035bee85c959ae3b4", "message": "Deprecate decorate method using reflection", "committedDate": "2020-02-07T03:48:07Z", "type": "commit"}]}