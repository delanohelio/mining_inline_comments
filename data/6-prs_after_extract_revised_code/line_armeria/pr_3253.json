{"pr_number": 3253, "pr_title": "Add `Content-Disposition` header codec (Multipart 1/4)", "pr_createdAt": "2020-12-30T07:13:52Z", "pr_url": "https://github.com/line/armeria/pull/3253", "timeline": [{"oid": "879644fdc92541ef44475ff0dacd28729b9f594c", "url": "https://github.com/line/armeria/commit/879644fdc92541ef44475ff0dacd28729b9f594c", "message": "Add `Content-Disposition` header codec (Multipart 1/4)\n\nMotivation:\n\n[`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\nheader parser and builder are required to to support multipart message.\nSee #253 #2894\n\nModifications:\n\n- Forked `ContentDisposition` parser and builder from Spring Framework and optimized it for Armeria.\n- Add a `contentDisposition()` getter to `HttpHeaderGetter` and its subclass.\n- Add `plain/text` and `multipart/form-data` used for multipart message to `MediaType`\n- Check `ContentDisposition` type when converting an abitrary object in StringValueConverter\n\nResult:\n\nYou can now add and get `Content-Disposition` header from and to HttpHeaders.", "committedDate": "2020-12-30T06:54:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MjAyOA==", "url": "https://github.com/line/armeria/pull/3253#discussion_r550382028", "bodyText": "Perhaps we could remove all these deprecated methods because the majority of user agents do not implement these?", "author": "minwoox", "createdAt": "2020-12-31T02:50:22Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContentDispositionBuilder.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.Charset;\n+import java.time.ZonedDateTime;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A builder class for creating {@link ContentDisposition}.\n+ */\n+public final class ContentDispositionBuilder {\n+\n+    // Forked from https://github.com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+\n+    private final String type;\n+\n+    @Nullable\n+    private String name;\n+\n+    @Nullable\n+    private String filename;\n+\n+    @Nullable\n+    private Charset charset;\n+\n+    @Nullable\n+    private Long size;\n+\n+    @Nullable\n+    private ZonedDateTime creationDate;\n+\n+    @Nullable\n+    private ZonedDateTime modificationDate;\n+\n+    @Nullable\n+    private ZonedDateTime readDate;\n+\n+    ContentDispositionBuilder(String type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Sets the value of the {@code name} parameter.\n+     */\n+    public ContentDispositionBuilder name(String name) {\n+        requireNonNull(name, \"name\");\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the value of the {@code filename} parameter. The given\n+     * filename will be formatted as quoted-string, as defined in RFC 2616,\n+     * section 2.2, and any quote characters within the filename value will\n+     * be escaped with a backslash, e.g. {@code \"foo\\\"bar.txt\"} becomes\n+     * {@code \"foo\\\\\\\"bar.txt\"}.\n+     */\n+    public ContentDispositionBuilder filename(String filename) {\n+        return filename(filename, null);\n+    }\n+\n+    /**\n+     * Sets the value of the {@code filename*} that will be encoded as defined in the RFC 5987.\n+     * Only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.\n+     *\n+     * <p><strong>Note:</strong> Do not use this for a {@code \"multipart/form-data\"} requests as per\n+     * <a link=\"https://tools.ietf.org/html/rfc7578#section-4.2\">RFC 7578, Section 4.2</a>\n+     * and also RFC 5987 itself mentions it does not apply to multipart requests.\n+     */\n+    public ContentDispositionBuilder filename(String filename, @Nullable Charset charset) {\n+        requireNonNull(filename, \"filename\");\n+        checkArgument(!filename.isEmpty(), \"filename should not be empty.\");\n+        this.filename = filename;\n+        this.charset = charset;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the value of the {@code size} parameter.\n+     *\n+     * @deprecated As per <a href=\"https://tools.ietf.org/html/rfc6266#appendix-B\">RFC 6266, Appendix B</a>,\n+     *             to be removed in a future release.\n+     */\n+    @Deprecated\n+    public ContentDispositionBuilder size(long size) {\n+        this.size = size;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the value of the {@code creation-date} parameter.\n+     *\n+     * @deprecated As per <a href=\"https://tools.ietf.org/html/rfc6266#appendix-B\">RFC 6266, Appendix B</a>,\n+     *             to be removed in a future release.\n+     */\n+    @Deprecated\n+    public ContentDispositionBuilder creationDate(ZonedDateTime creationDate) {\n+        requireNonNull(creationDate, \"creationDate\");\n+        this.creationDate = creationDate;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the value of the {@code modification-date} parameter.\n+     *\n+     * @deprecated As per <a href=\"https://tools.ietf.org/html/rfc6266#appendix-B\">RFC 6266, Appendix B</a>,\n+     *             to be removed in a future release.\n+     */\n+    @Deprecated\n+    public ContentDispositionBuilder modificationDate(ZonedDateTime modificationDate) {\n+        requireNonNull(modificationDate, \"modificationDate\");\n+        this.modificationDate = modificationDate;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the value of the {@literal read-date} parameter.\n+     * @deprecated As per <a href=\"https://tools.ietf.org/html/rfc6266#appendix-B\">RFC 6266, Appendix B</a>,\n+     *             to be removed in a future release.\n+     */\n+    @Deprecated", "originalCommit": "879644fdc92541ef44475ff0dacd28729b9f594c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MzE2NQ==", "url": "https://github.com/line/armeria/pull/3253#discussion_r550383165", "bodyText": "I kept these deprecated methods just in case.\nI agree to remove these methods. Any thoughts @trustin?", "author": "ikhoon", "createdAt": "2020-12-31T02:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MjAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3Njc0OA==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551776748", "bodyText": "Are these used in real world? If so, we should keep them. Otherwise, +1 for removal.", "author": "trustin", "createdAt": "2021-01-05T08:16:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MjAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg2NDcwOQ==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551864709", "bodyText": "Let me search the usage of these fields on GitHub.", "author": "ikhoon", "createdAt": "2021-01-05T11:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MjAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg5Njc2Ng==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551896766", "bodyText": "The creation-date and modification-date seem to be only used in email MIME. Otherwise, it is rarely used. I will remove the deprecated fields.", "author": "ikhoon", "createdAt": "2021-01-05T12:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MjAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxODA5OQ==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551918099", "bodyText": "OK.", "author": "trustin", "createdAt": "2021-01-05T13:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MjAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "0da5c58309f0100ba4a21932c19bbad973c7b6c3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContentDispositionBuilder.java b/core/src/main/java/com/linecorp/armeria/common/ContentDispositionBuilder.java\nindex 9e65b1aaa..3ab0e8c4c 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContentDispositionBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContentDispositionBuilder.java\n\n@@ -57,18 +57,6 @@ public final class ContentDispositionBuilder {\n     @Nullable\n     private Charset charset;\n \n-    @Nullable\n-    private Long size;\n-\n-    @Nullable\n-    private ZonedDateTime creationDate;\n-\n-    @Nullable\n-    private ZonedDateTime modificationDate;\n-\n-    @Nullable\n-    private ZonedDateTime readDate;\n-\n     ContentDispositionBuilder(String type) {\n         this.type = type;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3NTE5Mw==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551775193", "bodyText": "Could we keep a map of all supported encoding names instead of using Charset.forName()? e.g.\nprivate static final Map<String, Charset> supportedCharsets =\n    ImmutableMap.of(\"utf-8\", StandardCharset.UTF_8, ....);\n\ncharset = supportedCharsets.get(Ascii.toLowercase(value.substring(...).trim()));\ncheckArgument(charset != null, \"Charset: %s ...\"));", "author": "trustin", "createdAt": "2021-01-05T08:12:57Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.nio.charset.StandardCharsets.ISO_8859_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n+\n+/**\n+ * Representation of the Content-Disposition type and parameters as defined in RFC 6266.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Juergen Hoeller\n+ * @author Rossen Stoyanchev\n+ * @author Sergey Tsypanov\n+ * @see <a href=\"https://tools.ietf.org/html/rfc6266\">RFC 6266</a>\n+ */\n+public final class ContentDisposition {\n+\n+    // Forked from https://github.com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+\n+    private static final ContentDisposition EMPTY =\n+            new ContentDisposition(\"\", null, null, null, null, null, null, null);\n+\n+    /**\n+     * Returns a new {@link ContentDispositionBuilder} with the specified {@code type}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     */\n+    public static ContentDispositionBuilder builder(String type) {\n+        requireNonNull(type, \"type\");\n+        checkArgument(!type.isEmpty(), \"type should not be empty\");\n+        return new ContentDispositionBuilder(type);\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     */\n+    public static ContentDisposition of(String type) {\n+        return builder(type).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type} and {@code name}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     * @param name the name parameter\n+     */\n+    public static ContentDisposition of(String type, String name) {\n+        return builder(type).name(name).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type}, {@code name}\n+     * and {@code filename}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     * @param name the name parameter\n+     * @param filename the filename parameter that will be be formatted as quoted-string,\n+     *                 as defined in RFC 2616, section 2.2, and any quote characters within\n+     *                 the filename value will be escaped with a backslash,\n+     *                 e.g. {@code \"foo\\\"bar.txt\"} becomes {@code \"foo\\\\\\\"bar.txt\"}\n+     */\n+    public static ContentDisposition of(String type, String name, String filename) {\n+        return builder(type).name(name).filename(filename).build();\n+    }\n+\n+    /**\n+     * Returns an empty {@link ContentDisposition}.\n+     */\n+    public static ContentDisposition of() {\n+        return EMPTY;\n+    }\n+\n+    /**\n+     * Parses a {@code \"content-disposition\"} header value as defined in RFC 2183.\n+     *\n+     * <p>Note that only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.\n+     *\n+     * @param contentDisposition the {@code \"content-disposition\"} header value\n+     * @return the parsed content disposition\n+     * @see #asHeaderValue()\n+     */\n+    public static ContentDisposition parse(String contentDisposition) throws UnsupportedEncodingException {\n+        requireNonNull(contentDisposition, \"contentDisposition\");\n+        final List<String> parts = tokenize(contentDisposition);\n+        final String type = parts.get(0);\n+        String name = null;\n+        String filename = null;\n+        Charset charset = null;\n+        Long size = null;\n+        ZonedDateTime creationDate = null;\n+        ZonedDateTime modificationDate = null;\n+        ZonedDateTime readDate = null;\n+        for (int i = 1; i < parts.size(); i++) {\n+            final String part = parts.get(i);\n+            final int eqIndex = part.indexOf('=');\n+            if (eqIndex != -1) {\n+                final String attribute = part.substring(0, eqIndex);\n+                final String value;\n+                if (part.startsWith(\"\\\"\", eqIndex + 1) && part.endsWith(\"\\\"\")) {\n+                    value = part.substring(eqIndex + 2, part.length() - 1);\n+                } else {\n+                    value = part.substring(eqIndex + 1);\n+                }\n+\n+                if (\"name\".equals(attribute)) {\n+                    name = value;\n+                } else if (\"filename*\".equals(attribute)) {\n+                    final int idx1 = value.indexOf('\\'');\n+                    final int idx2 = value.indexOf('\\'', idx1 + 1);\n+                    if (idx1 != -1 && idx2 != -1) {\n+                        charset = Charset.forName(value.substring(0, idx1).trim());", "originalCommit": "879644fdc92541ef44475ff0dacd28729b9f594c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0da5c58309f0100ba4a21932c19bbad973c7b6c3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\nindex 90fcd406f..9c95f41e1 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n\n@@ -34,22 +34,21 @@ package com.linecorp.armeria.common;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.nio.charset.StandardCharsets.ISO_8859_1;\n import static java.nio.charset.StandardCharsets.UTF_8;\n-import static java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;\n import static java.util.Objects.requireNonNull;\n \n import java.io.ByteArrayOutputStream;\n import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n-import java.time.ZonedDateTime;\n-import java.time.format.DateTimeParseException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Objects;\n \n import javax.annotation.Nullable;\n \n import com.google.common.base.Ascii;\n+import com.google.common.collect.ImmutableMap;\n \n import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3NTc2MQ==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551775761", "bodyText": "Should we raise an exception or fall back to ISO-8859-1?", "author": "trustin", "createdAt": "2021-01-05T08:14:14Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.nio.charset.StandardCharsets.ISO_8859_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n+\n+/**\n+ * Representation of the Content-Disposition type and parameters as defined in RFC 6266.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Juergen Hoeller\n+ * @author Rossen Stoyanchev\n+ * @author Sergey Tsypanov\n+ * @see <a href=\"https://tools.ietf.org/html/rfc6266\">RFC 6266</a>\n+ */\n+public final class ContentDisposition {\n+\n+    // Forked from https://github.com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+\n+    private static final ContentDisposition EMPTY =\n+            new ContentDisposition(\"\", null, null, null, null, null, null, null);\n+\n+    /**\n+     * Returns a new {@link ContentDispositionBuilder} with the specified {@code type}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     */\n+    public static ContentDispositionBuilder builder(String type) {\n+        requireNonNull(type, \"type\");\n+        checkArgument(!type.isEmpty(), \"type should not be empty\");\n+        return new ContentDispositionBuilder(type);\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     */\n+    public static ContentDisposition of(String type) {\n+        return builder(type).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type} and {@code name}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     * @param name the name parameter\n+     */\n+    public static ContentDisposition of(String type, String name) {\n+        return builder(type).name(name).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type}, {@code name}\n+     * and {@code filename}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     * @param name the name parameter\n+     * @param filename the filename parameter that will be be formatted as quoted-string,\n+     *                 as defined in RFC 2616, section 2.2, and any quote characters within\n+     *                 the filename value will be escaped with a backslash,\n+     *                 e.g. {@code \"foo\\\"bar.txt\"} becomes {@code \"foo\\\\\\\"bar.txt\"}\n+     */\n+    public static ContentDisposition of(String type, String name, String filename) {\n+        return builder(type).name(name).filename(filename).build();\n+    }\n+\n+    /**\n+     * Returns an empty {@link ContentDisposition}.\n+     */\n+    public static ContentDisposition of() {\n+        return EMPTY;\n+    }\n+\n+    /**\n+     * Parses a {@code \"content-disposition\"} header value as defined in RFC 2183.\n+     *\n+     * <p>Note that only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.\n+     *\n+     * @param contentDisposition the {@code \"content-disposition\"} header value\n+     * @return the parsed content disposition\n+     * @see #asHeaderValue()\n+     */\n+    public static ContentDisposition parse(String contentDisposition) throws UnsupportedEncodingException {\n+        requireNonNull(contentDisposition, \"contentDisposition\");\n+        final List<String> parts = tokenize(contentDisposition);\n+        final String type = parts.get(0);\n+        String name = null;\n+        String filename = null;\n+        Charset charset = null;\n+        Long size = null;\n+        ZonedDateTime creationDate = null;\n+        ZonedDateTime modificationDate = null;\n+        ZonedDateTime readDate = null;\n+        for (int i = 1; i < parts.size(); i++) {\n+            final String part = parts.get(i);\n+            final int eqIndex = part.indexOf('=');\n+            if (eqIndex != -1) {\n+                final String attribute = part.substring(0, eqIndex);\n+                final String value;\n+                if (part.startsWith(\"\\\"\", eqIndex + 1) && part.endsWith(\"\\\"\")) {\n+                    value = part.substring(eqIndex + 2, part.length() - 1);\n+                } else {\n+                    value = part.substring(eqIndex + 1);\n+                }\n+\n+                if (\"name\".equals(attribute)) {\n+                    name = value;\n+                } else if (\"filename*\".equals(attribute)) {\n+                    final int idx1 = value.indexOf('\\'');\n+                    final int idx2 = value.indexOf('\\'', idx1 + 1);\n+                    if (idx1 != -1 && idx2 != -1) {\n+                        charset = Charset.forName(value.substring(0, idx1).trim());\n+                        checkArgument(UTF_8.equals(charset) || ISO_8859_1.equals(charset),\n+                                      \"Charset: %s (expected: UTF-8 or ISO-8859-1)\", charset);", "originalCommit": "879644fdc92541ef44475ff0dacd28729b9f594c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MzIzOQ==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551953239", "bodyText": "There might be no strong restriction in RFC 6266. https://tools.ietf.org/html/rfc6266#section-4.3\nI think we can fall back to ISO-8859-1.", "author": "ikhoon", "createdAt": "2021-01-05T14:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3NTc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzczODIzMw==", "url": "https://github.com/line/armeria/pull/3253#discussion_r553738233", "bodyText": "Sorry for this part. I have just read RFC5987(https://tools.ietf.org/html/rfc5987#section-3.2.1). It says:\n\nProducers MUST use either the \"UTF-8\" ([RFC3629]) or the \"ISO-8859-1\"\n([ISO-8859-1]) character set.  Extension character sets (mime-\ncharset) are reserved for future use.\n\nIs it better to limit the supported charsets to \"UTF-8\" and \"ISO-8859-1\" only?", "author": "ikhoon", "createdAt": "2021-01-08T04:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3NTc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc4MDI2MA==", "url": "https://github.com/line/armeria/pull/3253#discussion_r561780260", "bodyText": "Yes, please. :-)", "author": "trustin", "createdAt": "2021-01-21T10:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3NTc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0da5c58309f0100ba4a21932c19bbad973c7b6c3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\nindex 90fcd406f..9c95f41e1 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n\n@@ -34,22 +34,21 @@ package com.linecorp.armeria.common;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.nio.charset.StandardCharsets.ISO_8859_1;\n import static java.nio.charset.StandardCharsets.UTF_8;\n-import static java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;\n import static java.util.Objects.requireNonNull;\n \n import java.io.ByteArrayOutputStream;\n import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n-import java.time.ZonedDateTime;\n-import java.time.format.DateTimeParseException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Objects;\n \n import javax.annotation.Nullable;\n \n import com.google.common.base.Ascii;\n+import com.google.common.collect.ImmutableMap;\n \n import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3NzMxMA==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551777310", "bodyText": "Probably better returning null, like contentType() does?", "author": "trustin", "createdAt": "2021-01-05T08:17:30Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeaderGetters.java", "diffHunk": "@@ -49,6 +49,15 @@\n     @Nullable\n     MediaType contentType();\n \n+    /**\n+     * Returns the parsed {@code \"content-disposition\"} header.\n+     *\n+     * @return the parsed {@link MediaType} if present and valid, or {@code null} if not present.\n+     * @throws IllegalStateException if failed to parse {@code \"content-disposition\"} header.", "originalCommit": "879644fdc92541ef44475ff0dacd28729b9f594c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0da5c58309f0100ba4a21932c19bbad973c7b6c3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpHeaderGetters.java b/core/src/main/java/com/linecorp/armeria/common/HttpHeaderGetters.java\nindex 1b5b8b642..ed873985e 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpHeaderGetters.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpHeaderGetters.java\n\n@@ -52,8 +52,8 @@ interface HttpHeaderGetters extends StringMultimapGetters</* IN_NAME */ CharSequ\n     /**\n      * Returns the parsed {@code \"content-disposition\"} header.\n      *\n-     * @return the parsed {@link MediaType} if present and valid, or {@code null} if not present.\n-     * @throws IllegalStateException if failed to parse {@code \"content-disposition\"} header.\n+     * @return the parsed {@link MediaType} if present and valid. {@code null} if not present or\n+     *         failed to parse {@code \"content-disposition\"} header.\n      */\n     @Nullable\n     ContentDisposition contentDisposition();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3ODIyMA==", "url": "https://github.com/line/armeria/pull/3253#discussion_r551778220", "bodyText": "Javadoc?", "author": "trustin", "createdAt": "2021-01-05T08:19:37Z", "path": "core/src/main/java/com/linecorp/armeria/common/MediaType.java", "diffHunk": "@@ -170,6 +170,7 @@ private static MediaType addKnownType(MediaType mediaType) {\n     public static final MediaType HTML_UTF_8 = createConstantUtf8(TEXT_TYPE, \"html\");\n     public static final MediaType I_CALENDAR_UTF_8 = createConstantUtf8(TEXT_TYPE, \"calendar\");\n     public static final MediaType PLAIN_TEXT_UTF_8 = createConstantUtf8(TEXT_TYPE, \"plain\");\n+    public static final MediaType PLAIN_TEXT = createConstant(TEXT_TYPE, \"plain\");", "originalCommit": "879644fdc92541ef44475ff0dacd28729b9f594c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0da5c58309f0100ba4a21932c19bbad973c7b6c3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/MediaType.java b/core/src/main/java/com/linecorp/armeria/common/MediaType.java\nindex b16b91c81..11f60fc98 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/MediaType.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/MediaType.java\n\n@@ -170,6 +170,11 @@ public final class MediaType {\n     public static final MediaType HTML_UTF_8 = createConstantUtf8(TEXT_TYPE, \"html\");\n     public static final MediaType I_CALENDAR_UTF_8 = createConstantUtf8(TEXT_TYPE, \"calendar\");\n     public static final MediaType PLAIN_TEXT_UTF_8 = createConstantUtf8(TEXT_TYPE, \"plain\");\n+\n+    /**\n+     * The <a href=\"https://tools.ietf.org/html/rfc1521#section-7.1.2\">text/plain</a> content type is\n+     * the generic subtype for plain text.\n+     */\n     public static final MediaType PLAIN_TEXT = createConstant(TEXT_TYPE, \"plain\");\n \n     /**\n"}}, {"oid": "0da5c58309f0100ba4a21932c19bbad973c7b6c3", "url": "https://github.com/line/armeria/commit/0da5c58309f0100ba4a21932c19bbad973c7b6c3", "message": "Remove deprecated fields and fall back to ISO-8859-1 for unsupported charsets.", "committedDate": "2021-01-05T15:19:52Z", "type": "commit"}, {"oid": "4eb127c8e81a552399ac759998a05ec0ea4a48c2", "url": "https://github.com/line/armeria/commit/4eb127c8e81a552399ac759998a05ec0ea4a48c2", "message": "Missed part", "committedDate": "2021-01-05T15:27:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MjIwMw==", "url": "https://github.com/line/armeria/pull/3253#discussion_r552462203", "bodyText": "Shouldn't we support other versions, like all upper- and lower-cased names from Charset.aliases()?", "author": "trustin", "createdAt": "2021-01-06T09:30:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java", "diffHunk": "@@ -64,10 +63,14 @@\n  */\n public final class ContentDisposition {\n \n-    // Forked from https://github.com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+    // Forked from https://github\n+    // .com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src\n+    // /main/java/org/springframework/http/ContentDisposition.java\n \n-    private static final ContentDisposition EMPTY =\n-            new ContentDisposition(\"\", null, null, null, null, null, null, null);\n+    private static final ContentDisposition EMPTY = new ContentDisposition(\"\", null, null, null);\n+\n+    private static final Map<String, Charset> supportedCharsets =\n+            ImmutableMap.of(\"utf-8\", UTF_8, \"iso-8859-1\", ISO_8859_1);", "originalCommit": "0da5c58309f0100ba4a21932c19bbad973c7b6c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU2MzY0MQ==", "url": "https://github.com/line/armeria/pull/3253#discussion_r562563641", "bodyText": "As per RFC5987, \"UTF-8\" or \"ISO-8859-1\" should be used. #3253 (comment)", "author": "ikhoon", "createdAt": "2021-01-22T11:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MjIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "23c208d221577c397dbcdc8deb3fb4e6ad85864a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\nindex 9c95f41e1..e8a5fd082 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n\n@@ -63,9 +63,7 @@ import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n  */\n public final class ContentDisposition {\n \n-    // Forked from https://github\n-    // .com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src\n-    // /main/java/org/springframework/http/ContentDisposition.java\n+    // Forked from https://github.com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n \n     private static final ContentDisposition EMPTY = new ContentDisposition(\"\", null, null, null);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MjQyNg==", "url": "https://github.com/line/armeria/pull/3253#discussion_r552462426", "bodyText": "Didn't we decide to fall back to iso-8859-1?", "author": "trustin", "createdAt": "2021-01-06T09:30:53Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java", "diffHunk": "@@ -163,9 +162,10 @@ public static ContentDisposition parse(String contentDisposition) throws Unsuppo\n                     final int idx1 = value.indexOf('\\'');\n                     final int idx2 = value.indexOf('\\'', idx1 + 1);\n                     if (idx1 != -1 && idx2 != -1) {\n-                        charset = Charset.forName(value.substring(0, idx1).trim());\n-                        checkArgument(UTF_8.equals(charset) || ISO_8859_1.equals(charset),\n-                                      \"Charset: %s (expected: UTF-8 or ISO-8859-1)\", charset);\n+                        final String charsetString = value.substring(0, idx1).trim();\n+                        charset = supportedCharsets.get(Ascii.toLowerCase(charsetString));\n+                        checkArgument(charset != null,\n+                                      \"Charset: %s (expected: UTF-8 or ISO-8859-1)\", charsetString);", "originalCommit": "0da5c58309f0100ba4a21932c19bbad973c7b6c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcyNTQ3Mg==", "url": "https://github.com/line/armeria/pull/3253#discussion_r553725472", "bodyText": "I missed adding newly changed files to staged one by git add .  \ud83d\ude05\n4eb127c", "author": "ikhoon", "createdAt": "2021-01-08T03:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MjQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "23c208d221577c397dbcdc8deb3fb4e6ad85864a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\nindex 9c95f41e1..e8a5fd082 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n\n@@ -163,10 +162,7 @@ public final class ContentDisposition {\n                     final int idx2 = value.indexOf('\\'', idx1 + 1);\n                     if (idx1 != -1 && idx2 != -1) {\n                         final String charsetString = value.substring(0, idx1).trim();\n-                        charset = supportedCharsets.get(Ascii.toLowerCase(charsetString));\n-                        checkArgument(charset != null,\n-                                      \"Charset: %s (expected: UTF-8 or ISO-8859-1)\", charsetString);\n-\n+                        charset = supportedCharsets.getOrDefault(Ascii.toLowerCase(charsetString), ISO_8859_1);\n                         filename = decodeFilename(value.substring(idx2 + 1), charset);\n                     } else {\n                         // US ASCII\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MzA0Nw==", "url": "https://github.com/line/armeria/pull/3253#discussion_r552463047", "bodyText": "Can remove throws clause because we're sure UTF-8 and ISO-8859-1 are always available.", "author": "trustin", "createdAt": "2021-01-06T09:32:12Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java", "diffHunk": "@@ -0,0 +1,423 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.nio.charset.StandardCharsets.ISO_8859_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n+\n+/**\n+ * Representation of the Content-Disposition type and parameters as defined in RFC 6266.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Juergen Hoeller\n+ * @author Rossen Stoyanchev\n+ * @author Sergey Tsypanov\n+ * @see <a href=\"https://tools.ietf.org/html/rfc6266\">RFC 6266</a>\n+ */\n+public final class ContentDisposition {\n+\n+    // Forked from https://github.com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+\n+    private static final ContentDisposition EMPTY = new ContentDisposition(\"\", null, null, null);\n+\n+    private static final Map<String, Charset> supportedCharsets =\n+            ImmutableMap.of(\"utf-8\", UTF_8, \"iso-8859-1\", ISO_8859_1);\n+\n+    /**\n+     * Returns a new {@link ContentDispositionBuilder} with the specified {@code type}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     */\n+    public static ContentDispositionBuilder builder(String type) {\n+        requireNonNull(type, \"type\");\n+        checkArgument(!type.isEmpty(), \"type should not be empty\");\n+        return new ContentDispositionBuilder(type);\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     */\n+    public static ContentDisposition of(String type) {\n+        return builder(type).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type} and {@code name}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     * @param name the name parameter\n+     */\n+    public static ContentDisposition of(String type, String name) {\n+        return builder(type).name(name).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type}, {@code name}\n+     * and {@code filename}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     * @param name the name parameter\n+     * @param filename the filename parameter that will be be formatted as quoted-string,\n+     *                 as defined in RFC 2616, section 2.2, and any quote characters within\n+     *                 the filename value will be escaped with a backslash,\n+     *                 e.g. {@code \"foo\\\"bar.txt\"} becomes {@code \"foo\\\\\\\"bar.txt\"}\n+     */\n+    public static ContentDisposition of(String type, String name, String filename) {\n+        return builder(type).name(name).filename(filename).build();\n+    }\n+\n+    /**\n+     * Returns an empty {@link ContentDisposition}.\n+     */\n+    public static ContentDisposition of() {\n+        return EMPTY;\n+    }\n+\n+    /**\n+     * Parses a {@code \"content-disposition\"} header value as defined in RFC 2183.\n+     *\n+     * <p>Note that only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.\n+     * If other charsets are specified, ISO-8859-1 will be used instead.\n+     *\n+     * @param contentDisposition the {@code \"content-disposition\"} header value\n+     * @return the parsed content disposition\n+     * @see #asHeaderValue()\n+     */\n+    public static ContentDisposition parse(String contentDisposition) throws UnsupportedEncodingException {\n+        requireNonNull(contentDisposition, \"contentDisposition\");\n+        final List<String> parts = tokenize(contentDisposition);\n+        final String type = parts.get(0);\n+        String name = null;\n+        String filename = null;\n+        Charset charset = null;\n+        for (int i = 1; i < parts.size(); i++) {\n+            final String part = parts.get(i);\n+            final int eqIndex = part.indexOf('=');\n+            if (eqIndex != -1) {\n+                final String attribute = part.substring(0, eqIndex);\n+                final String value;\n+                if (part.startsWith(\"\\\"\", eqIndex + 1) && part.endsWith(\"\\\"\")) {\n+                    value = part.substring(eqIndex + 2, part.length() - 1);\n+                } else {\n+                    value = part.substring(eqIndex + 1);\n+                }\n+\n+                if (\"name\".equals(attribute)) {\n+                    name = value;\n+                } else if (\"filename*\".equals(attribute)) {\n+                    final int idx1 = value.indexOf('\\'');\n+                    final int idx2 = value.indexOf('\\'', idx1 + 1);\n+                    if (idx1 != -1 && idx2 != -1) {\n+                        final String charsetString = value.substring(0, idx1).trim();\n+                        charset = supportedCharsets.getOrDefault(Ascii.toLowerCase(charsetString), ISO_8859_1);\n+                        filename = decodeFilename(value.substring(idx2 + 1), charset);\n+                    } else {\n+                        // US ASCII\n+                        filename = decodeFilename(value, StandardCharsets.US_ASCII);\n+                    }\n+                } else if (\"filename\".equals(attribute) && (filename == null)) {\n+                    filename = value;\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid content disposition format: \" + contentDisposition);\n+            }\n+        }\n+        return new ContentDisposition(type, name, filename, charset);\n+    }\n+\n+    private final String type;\n+\n+    @Nullable\n+    private final String name;\n+\n+    @Nullable\n+    private final String filename;\n+\n+    @Nullable\n+    private final Charset charset;\n+\n+    @Nullable\n+    private String strVal;\n+\n+    ContentDisposition(String type, @Nullable String name,\n+                       @Nullable String filename, @Nullable Charset charset) {\n+        this.type = type;\n+        this.name = name;\n+        this.filename = filename;\n+        this.charset = charset;\n+    }\n+\n+    /**\n+     * Returns the disposition type, like for example {@code inline}, {@code attachment},\n+     * {@code form-data}.\n+     */\n+    public String type() {\n+        return type;\n+    }\n+\n+    /**\n+     * Returns the value of the {@code name} parameter, or {@code null} if not defined.\n+     */\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Returns the value of the {@code filename} parameter (or the value of the\n+     * {@code filename*} one decoded as defined in the RFC 5987), or {@code null} if not defined.\n+     */\n+    @Nullable\n+    public String filename() {\n+        return filename;\n+    }\n+\n+    /**\n+     * Returns the charset defined in {@code filename*} parameter, or {@code null} if not defined.\n+     */\n+    @Nullable\n+    public Charset charset() {\n+        return charset;\n+    }\n+\n+    private static List<String> tokenize(String headerValue) {\n+        int index = headerValue.indexOf(';');\n+        final String type = (index >= 0 ? headerValue.substring(0, index) : headerValue).trim();\n+        checkArgument(!type.isEmpty(), \"Content-Disposition header must not be empty\");\n+\n+        final List<String> parts = new ArrayList<>(4);\n+        parts.add(type);\n+        if (index >= 0) {\n+            do {\n+                int nextIndex = index + 1;\n+                boolean quoted = false;\n+                boolean escaped = false;\n+                while (nextIndex < headerValue.length()) {\n+                    final char ch = headerValue.charAt(nextIndex);\n+                    if (ch == ';') {\n+                        if (!quoted) {\n+                            break;\n+                        }\n+                    } else if (!escaped && ch == '\"') {\n+                        quoted = !quoted;\n+                    }\n+                    escaped = !escaped && ch == '\\\\';\n+                    nextIndex++;\n+                }\n+                final String part = headerValue.substring(index + 1, nextIndex).trim();\n+                if (!part.isEmpty()) {\n+                    parts.add(part);\n+                }\n+                index = nextIndex;\n+            }\n+            while (index < headerValue.length());\n+        }\n+        return parts;\n+    }\n+\n+    /**\n+     * Decodes the given header field param as described in RFC 5987.\n+     *\n+     * <p>Only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.\n+     *\n+     * @param filename the filename\n+     * @param charset the charset for the filename\n+     * @return the encoded header field param\n+     * @throws UnsupportedEncodingException if the specified charset is not supported\n+     *\n+     * @see <a href=\"https://tools.ietf.org/html/rfc5987\">RFC 5987</a>\n+     */\n+    private static String decodeFilename(String filename, Charset charset) throws UnsupportedEncodingException {", "originalCommit": "4eb127c8e81a552399ac759998a05ec0ea4a48c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23c208d221577c397dbcdc8deb3fb4e6ad85864a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\nindex 9ec77a59b..e8a5fd082 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n\n@@ -136,7 +136,7 @@ public final class ContentDisposition {\n      * @return the parsed content disposition\n      * @see #asHeaderValue()\n      */\n-    public static ContentDisposition parse(String contentDisposition) throws UnsupportedEncodingException {\n+    public static ContentDisposition parse(String contentDisposition) {\n         requireNonNull(contentDisposition, \"contentDisposition\");\n         final List<String> parts = tokenize(contentDisposition);\n         final String type = parts.get(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MzQyOA==", "url": "https://github.com/line/armeria/pull/3253#discussion_r552463428", "bodyText": "We can remove UnsupportedEncodingException here.", "author": "trustin", "createdAt": "2021-01-06T09:33:02Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java", "diffHunk": "@@ -305,6 +306,26 @@ final void contentType(MediaType contentType) {\n         set(HttpHeaderNames.CONTENT_TYPE, contentType.toString());\n     }\n \n+    @Override\n+    @Nullable\n+    public ContentDisposition contentDisposition() {\n+        final String contentDispositionString = get(HttpHeaderNames.CONTENT_DISPOSITION);\n+        if (contentDispositionString == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return ContentDisposition.parse(contentDispositionString);\n+        } catch (IllegalArgumentException | UnsupportedEncodingException ex) {", "originalCommit": "4eb127c8e81a552399ac759998a05ec0ea4a48c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23c208d221577c397dbcdc8deb3fb4e6ad85864a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java b/core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java\nindex d06c8e802..43ec1af57 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java\n\n@@ -316,7 +315,7 @@ class HttpHeadersBase\n \n         try {\n             return ContentDisposition.parse(contentDispositionString);\n-        } catch (IllegalArgumentException | UnsupportedEncodingException ex) {\n+        } catch (IllegalArgumentException ex) {\n             return null;\n         }\n     }\n"}}, {"oid": "23c208d221577c397dbcdc8deb3fb4e6ad85864a", "url": "https://github.com/line/armeria/commit/23c208d221577c397dbcdc8deb3fb4e6ad85864a", "message": "Fix compile error and clean up validations", "committedDate": "2021-01-08T12:35:43Z", "type": "commit"}, {"oid": "1215b6f2ca3b7cad43126f9d1f832c31cc486b8b", "url": "https://github.com/line/armeria/commit/1215b6f2ca3b7cad43126f9d1f832c31cc486b8b", "message": "Remove cruft", "committedDate": "2021-01-08T12:38:09Z", "type": "commit"}, {"oid": "83c21a28e54d098d9714408b73596b450c8db0b9", "url": "https://github.com/line/armeria/commit/83c21a28e54d098d9714408b73596b450c8db0b9", "message": "Merge branch 'master' into content-disposition", "committedDate": "2021-01-08T13:31:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc3OTM3Ng==", "url": "https://github.com/line/armeria/pull/3253#discussion_r561779376", "bodyText": "Could we change escapeQuotationsInFilename and encodeFilename to accept StringBuffer for more efficiency?", "author": "trustin", "createdAt": "2021-01-21T10:51:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.nio.charset.StandardCharsets.ISO_8859_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n+\n+/**\n+ * Representation of the Content-Disposition type and parameters as defined in RFC 6266.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Juergen Hoeller\n+ * @author Rossen Stoyanchev\n+ * @author Sergey Tsypanov\n+ * @see <a href=\"https://tools.ietf.org/html/rfc6266\">RFC 6266</a>\n+ */\n+public final class ContentDisposition {\n+\n+    // Forked from https://github.com/spring-projects/spring-framework/blob/d9ccd618ea9cbf339eb5639d24d5a5fabe8157b5/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+\n+    private static final ContentDisposition EMPTY = new ContentDisposition(\"\", null, null, null);\n+\n+    private static final Map<String, Charset> supportedCharsets =\n+            ImmutableMap.of(\"utf-8\", UTF_8, \"iso-8859-1\", ISO_8859_1);\n+\n+    /**\n+     * Returns a new {@link ContentDispositionBuilder} with the specified {@code type}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     */\n+    public static ContentDispositionBuilder builder(String type) {\n+        requireNonNull(type, \"type\");\n+        checkArgument(!type.isEmpty(), \"type should not be empty\");\n+        return new ContentDispositionBuilder(type);\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     */\n+    public static ContentDisposition of(String type) {\n+        return builder(type).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type} and {@code name}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     * @param name the name parameter\n+     */\n+    public static ContentDisposition of(String type, String name) {\n+        return builder(type).name(name).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link ContentDisposition} with the specified {@code type}, {@code name}\n+     * and {@code filename}.\n+     *\n+     * @param type the disposition type like for example {@code inline}, {@code attachment},\n+     *             or {@code form-data}\n+     * @param name the name parameter\n+     * @param filename the filename parameter that will be be formatted as quoted-string,\n+     *                 as defined in RFC 2616, section 2.2, and any quote characters within\n+     *                 the filename value will be escaped with a backslash,\n+     *                 e.g. {@code \"foo\\\"bar.txt\"} becomes {@code \"foo\\\\\\\"bar.txt\"}\n+     */\n+    public static ContentDisposition of(String type, String name, String filename) {\n+        return builder(type).name(name).filename(filename).build();\n+    }\n+\n+    /**\n+     * Returns an empty {@link ContentDisposition}.\n+     */\n+    public static ContentDisposition of() {\n+        return EMPTY;\n+    }\n+\n+    /**\n+     * Parses a {@code \"content-disposition\"} header value as defined in RFC 2183.\n+     *\n+     * <p>Note that only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.\n+     * If other charsets are specified, ISO-8859-1 will be used instead.\n+     *\n+     * @param contentDisposition the {@code \"content-disposition\"} header value\n+     * @return the parsed content disposition\n+     * @see #asHeaderValue()\n+     */\n+    public static ContentDisposition parse(String contentDisposition) {\n+        requireNonNull(contentDisposition, \"contentDisposition\");\n+        final List<String> parts = tokenize(contentDisposition);\n+        final String type = parts.get(0);\n+        String name = null;\n+        String filename = null;\n+        Charset charset = null;\n+        for (int i = 1; i < parts.size(); i++) {\n+            final String part = parts.get(i);\n+            final int eqIndex = part.indexOf('=');\n+            if (eqIndex != -1) {\n+                final String attribute = part.substring(0, eqIndex);\n+                final String value;\n+                if (part.startsWith(\"\\\"\", eqIndex + 1) && part.endsWith(\"\\\"\")) {\n+                    value = part.substring(eqIndex + 2, part.length() - 1);\n+                } else {\n+                    value = part.substring(eqIndex + 1);\n+                }\n+\n+                if (\"name\".equals(attribute)) {\n+                    name = value;\n+                } else if (\"filename*\".equals(attribute)) {\n+                    final int idx1 = value.indexOf('\\'');\n+                    final int idx2 = value.indexOf('\\'', idx1 + 1);\n+                    if (idx1 != -1 && idx2 != -1) {\n+                        final String charsetString = value.substring(0, idx1).trim();\n+                        charset = supportedCharsets.getOrDefault(Ascii.toLowerCase(charsetString), ISO_8859_1);\n+                        filename = decodeFilename(value.substring(idx2 + 1), charset);\n+                    } else {\n+                        // US ASCII\n+                        filename = decodeFilename(value, StandardCharsets.US_ASCII);\n+                    }\n+                } else if (\"filename\".equals(attribute) && (filename == null)) {\n+                    filename = value;\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid content disposition format: \" + contentDisposition);\n+            }\n+        }\n+        return new ContentDisposition(type, name, filename, charset);\n+    }\n+\n+    private final String type;\n+\n+    @Nullable\n+    private final String name;\n+\n+    @Nullable\n+    private final String filename;\n+\n+    @Nullable\n+    private final Charset charset;\n+\n+    @Nullable\n+    private String strVal;\n+\n+    ContentDisposition(String type, @Nullable String name,\n+                       @Nullable String filename, @Nullable Charset charset) {\n+        this.type = type;\n+        this.name = name;\n+        this.filename = filename;\n+        this.charset = charset;\n+    }\n+\n+    /**\n+     * Returns the disposition type, like for example {@code inline}, {@code attachment},\n+     * {@code form-data}.\n+     */\n+    public String type() {\n+        return type;\n+    }\n+\n+    /**\n+     * Returns the value of the {@code name} parameter, or {@code null} if not defined.\n+     */\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    /**\n+     * Returns the value of the {@code filename} parameter (or the value of the\n+     * {@code filename*} one decoded as defined in the RFC 5987), or {@code null} if not defined.\n+     */\n+    @Nullable\n+    public String filename() {\n+        return filename;\n+    }\n+\n+    /**\n+     * Returns the charset defined in {@code filename*} parameter, or {@code null} if not defined.\n+     */\n+    @Nullable\n+    public Charset charset() {\n+        return charset;\n+    }\n+\n+    private static List<String> tokenize(String headerValue) {\n+        int index = headerValue.indexOf(';');\n+        final String type = (index >= 0 ? headerValue.substring(0, index) : headerValue).trim();\n+        checkArgument(!type.isEmpty(), \"Content-Disposition header must not be empty\");\n+\n+        final List<String> parts = new ArrayList<>(4);\n+        parts.add(type);\n+        if (index >= 0) {\n+            do {\n+                int nextIndex = index + 1;\n+                boolean quoted = false;\n+                boolean escaped = false;\n+                while (nextIndex < headerValue.length()) {\n+                    final char ch = headerValue.charAt(nextIndex);\n+                    if (ch == ';') {\n+                        if (!quoted) {\n+                            break;\n+                        }\n+                    } else if (!escaped && ch == '\"') {\n+                        quoted = !quoted;\n+                    }\n+                    escaped = !escaped && ch == '\\\\';\n+                    nextIndex++;\n+                }\n+                final String part = headerValue.substring(index + 1, nextIndex).trim();\n+                if (!part.isEmpty()) {\n+                    parts.add(part);\n+                }\n+                index = nextIndex;\n+            }\n+            while (index < headerValue.length());\n+        }\n+        return parts;\n+    }\n+\n+    /**\n+     * Decodes the given header field param as described in RFC 5987.\n+     *\n+     * <p>Only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.\n+     *\n+     * @param filename the filename\n+     * @param charset the charset for the filename\n+     * @return the encoded header field param\n+     *\n+     * @see <a href=\"https://tools.ietf.org/html/rfc5987\">RFC 5987</a>\n+     */\n+    private static String decodeFilename(String filename, Charset charset) {\n+        final byte[] value = filename.getBytes(charset);\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        int index = 0;\n+        while (index < value.length) {\n+            final byte b = value[index];\n+            if (isRFC5987AttrChar(b)) {\n+                baos.write((char) b);\n+                index++;\n+            } else if (b == '%' && index < value.length - 2) {\n+                final char[] array = {(char) value[index + 1], (char) value[index + 2]};\n+                try {\n+                    baos.write(Integer.parseInt(String.valueOf(array), 16));\n+                } catch (NumberFormatException ex) {\n+                    throw new IllegalArgumentException(\n+                            \"Invalid filename header field parameter format (as defined in RFC 5987): \" +\n+                            filename + \" (charset: \" + charset + ')', ex);\n+                }\n+                index += 3;\n+            } else {\n+                throw new IllegalArgumentException(\n+                        \"Invalid filename header field parameter format (as defined in RFC 5987): \" +\n+                        filename + \" (charset: \" + charset + ')');\n+            }\n+        }\n+        try {\n+            return baos.toString(charset.name());\n+        } catch (UnsupportedEncodingException e) {\n+            // Should never reach here.\n+            // The charset should be either UTF-8 or ISO-8859-1.\n+            throw new Error();\n+        }\n+    }\n+\n+    private static boolean isRFC5987AttrChar(byte c) {\n+        return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||\n+               c == '!' || c == '#' || c == '$' || c == '&' || c == '+' || c == '-' ||\n+               c == '.' || c == '^' || c == '_' || c == '`' || c == '|' || c == '~';\n+    }\n+\n+    private static String escapeQuotationsInFilename(String filename) {\n+        if (filename.indexOf('\"') == -1 && filename.indexOf('\\\\') == -1) {\n+            return filename;\n+        }\n+        boolean escaped = false;\n+        final StringBuilder sb = new StringBuilder();\n+        for (char c : filename.toCharArray()) {\n+            if (!escaped && c == '\"') {\n+                sb.append(\"\\\\\\\"\");\n+            } else {\n+                sb.append(c);\n+            }\n+            escaped = !escaped && c == '\\\\';\n+        }\n+        // Remove backslash at the end..\n+        if (escaped) {\n+            sb.deleteCharAt(sb.length() - 1);\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Encodes the given header field param as describe in RFC 5987.\n+     * @param input the header field param\n+     * @param charset the charset of the header field param string,\n+     *                only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported\n+     * @return the encoded header field param\n+     * @see <a href=\"https://tools.ietf.org/html/rfc5987\">RFC 5987</a>\n+     */\n+    private static String encodeFilename(String input, Charset charset) {\n+        final byte[] source = input.getBytes(charset);\n+        final int len = source.length;\n+        final StringBuilder sb = new StringBuilder(len << 1);\n+        sb.append(charset.name());\n+        sb.append(\"''\");\n+        for (byte b : source) {\n+            if (isRFC5987AttrChar(b)) {\n+                sb.append((char) b);\n+            } else {\n+                sb.append('%');\n+                final char hex1 = Ascii.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));\n+                final char hex2 = Ascii.toUpperCase(Character.forDigit(b & 0xF, 16));\n+                sb.append(hex1);\n+                sb.append(hex2);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (!(other instanceof ContentDisposition)) {\n+            return false;\n+        }\n+        final ContentDisposition that = (ContentDisposition) other;\n+        return type.equals(that.type) &&\n+               Objects.equals(name, that.name) &&\n+               Objects.equals(filename, that.filename) &&\n+               Objects.equals(charset, that.charset);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(type, name, filename, charset);\n+    }\n+\n+    /**\n+     * Returns the header value for this content disposition as defined in RFC 6266.\n+     * @see #parse(String)\n+     */\n+    public String asHeaderValue() {\n+        if (strVal != null) {\n+            return strVal;\n+        }\n+\n+        final StringBuilder sb = TemporaryThreadLocals.get().stringBuilder();\n+        sb.append(type);\n+\n+        if (name != null) {\n+            sb.append(\"; name=\\\"\");\n+            sb.append(name).append('\\\"');\n+        }\n+        if (filename != null) {\n+            if (charset == null || StandardCharsets.US_ASCII.equals(charset)) {\n+                sb.append(\"; filename=\\\"\");\n+                sb.append(escapeQuotationsInFilename(filename)).append('\\\"');\n+            } else {\n+                sb.append(\"; filename*=\");\n+                sb.append(encodeFilename(filename, charset));", "originalCommit": "83c21a28e54d098d9714408b73596b450c8db0b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93392a9881c49123f12f0c15526c0857175c66ba", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\nindex e8a5fd082..d21b9c128 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java\n\n@@ -40,7 +40,6 @@ import java.io.ByteArrayOutputStream;\n import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n"}}, {"oid": "93392a9881c49123f12f0c15526c0857175c66ba", "url": "https://github.com/line/armeria/commit/93392a9881c49123f12f0c15526c0857175c66ba", "message": "Address comments by @trustin", "committedDate": "2021-01-22T11:07:57Z", "type": "commit"}]}