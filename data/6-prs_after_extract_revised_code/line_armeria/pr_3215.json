{"pr_number": 3215, "pr_title": "Add `HttpMessage.decode()` and hide `HttpDeframer` from public API", "pr_createdAt": "2020-12-09T11:22:46Z", "pr_url": "https://github.com/line/armeria/pull/3215", "timeline": [{"oid": "e88ec4b0b91d6bcbc1a5e57e63da8ea418caa32a", "url": "https://github.com/line/armeria/commit/e88ec4b0b91d6bcbc1a5e57e63da8ea418caa32a", "message": "Add `HttpMessage.deframe()` and hide `HttpDeframer` from public API\n\nMotivation:\n\nThere are two problems in the `HttpDeframer` implementation.\n1. An `HttpDeframerHandler` expects to receive `HttpHeaders` from an upsteam.\n   However, `HttpRequest` does not publish `HttpHeaders` to a `Subscriber`.\n   https://github.com/line/armeria/blob/9ae09688e3ddef276899f5e56392cfb6230e0b8e/core/src/main/java/com/linecorp/armeria/common/HttpRequest.java#L56-L57\n2. By implementing `Processor` interface, `DefaultHttpDeframer` heavily uses voliatile flags to control concurrency.\n\nHttpDeframer implemetation could be optimized by hiding its factories such as `HttpDeframer.of()`.\n\nModification:\n\n- Add `HttpMessage` interface for creating a deframed `StreamMessage` from `HttpDefamerHandler`.\n  - `HttpRequest` and `HttpResponse` implement `HttpMessage` interface.\n- Remove `HttpDefarmer` in favor of `HttpMessage.deframe()`.\n- Migrate gRPC server and client implemention/test for using `HttpMessage.deframe()`\n- Clean up `DefaultHttpDeframer` implemention.\n  - Remove `Processor` interface from `DefaultHttpDeframer`.\n  - DefaultHttpDeframer works in a single `EventLoop`\n  - Remove all volatile keyword and `eventLoop.inEventLoop()` code.\n\nResult:\n\n- You can now use `HttpMessage.deframe()` for deframing HTTP request and response.\n  ```java\n  HttpRequest request = ...;\n  HttpDefarmerHandler<MyDomainObject> handler = ...;\n  StreamMessage<MyDomainObject> deframed = request.deframe(handler);\n  ```\n- An `HttpDefamerHandler` can now handle `HttpHeaders` correctly.\n- Optimized `DefaultHttpDeframer` implemention.", "committedDate": "2020-12-09T11:22:11Z", "type": "commit"}, {"oid": "6fbf7ddae1d71ae316ad846acaf76d343f8da4b1", "url": "https://github.com/line/armeria/commit/6fbf7ddae1d71ae316ad846acaf76d343f8da4b1", "message": "Add Unstable", "committedDate": "2020-12-09T11:26:47Z", "type": "commit"}, {"oid": "65d1aefd6f9806c219e2bc87d0d851aaeadf6b0a", "url": "https://github.com/line/armeria/commit/65d1aefd6f9806c219e2bc87d0d851aaeadf6b0a", "message": "Add assert", "committedDate": "2020-12-10T02:35:48Z", "type": "commit"}, {"oid": "084e64d2ffb6ecec2e492d4b9a6d84d7d6c37ad3", "url": "https://github.com/line/armeria/commit/084e64d2ffb6ecec2e492d4b9a6d84d7d6c37ad3", "message": "Remove cruft", "committedDate": "2020-12-10T02:41:28Z", "type": "commit"}, {"oid": "c8cb31186f850e15efb20001f638ba91e40090fb", "url": "https://github.com/line/armeria/commit/c8cb31186f850e15efb20001f638ba91e40090fb", "message": "Fix broken tests", "committedDate": "2020-12-10T12:41:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNjY5Mw==", "url": "https://github.com/line/armeria/pull/3215#discussion_r540706693", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDeframerHandler},\n          \n          \n            \n                 * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDeframerHandler} and", "author": "minwoox", "createdAt": "2020-12-11T05:48:43Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -16,75 +16,82 @@\n \n package com.linecorp.armeria.common.stream;\n \n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n import static java.util.Objects.requireNonNull;\n \n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n-import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n import java.util.function.Function;\n \n import javax.annotation.Nullable;\n \n+import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n \n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n import com.linecorp.armeria.common.util.Exceptions;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n import io.netty.util.concurrent.EventExecutor;\n \n /**\n- * The default {@link HttpDeframer} implementation.\n+ * The default HTTP deframer implementation.\n  */\n-final class DefaultHttpDeframer<T>\n-        extends DefaultStreamMessage<T>\n-        implements HttpDeframer<T>, HttpDeframerOutput<T> {\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDeframerOutput<T> {\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static final AtomicReferenceFieldUpdater<DefaultHttpDeframer, Subscription> upstreamUpdater =\n-            AtomicReferenceFieldUpdater.newUpdater(DefaultHttpDeframer.class, Subscription.class, \"upstream\");\n+    private static final SubscriptionOption[] EMPTY_OPTIONS = {};\n+    private static final SubscriptionOption[] POOLED_OBJECTS_OPTIONS = { WITH_POOLED_OBJECTS };\n+    private static final SubscriptionOption[] NOTIFY_CANCELLATION_OPTIONS = { NOTIFY_CANCELLATION };\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static final AtomicIntegerFieldUpdater<DefaultHttpDeframer> initializedUpdater =\n-            AtomicIntegerFieldUpdater.newUpdater(DefaultHttpDeframer.class, \"initialized\");\n-\n-    @SuppressWarnings(\"rawtypes\")\n-    private static final AtomicIntegerFieldUpdater<DefaultHttpDeframer> askedUpstreamForElementUpdater =\n-            AtomicIntegerFieldUpdater.newUpdater(DefaultHttpDeframer.class, \"askedUpstreamForElement\");\n+    private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n \n     private final HttpDeframerHandler<T> handler;\n     private final ByteBufDeframerInput input;\n     private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n-\n-    private boolean handlerProduced;\n-    private boolean sawLeadingHeaders;\n+    private final StreamMessage<? extends HttpObject> publisher;\n \n     @Nullable\n-    private volatile EventExecutor eventLoop;\n+    private HttpHeaders httpHeaders;\n     @Nullable\n-    private volatile Subscription upstream;\n-    private volatile int initialized;\n-    private volatile int askedUpstreamForElement;\n+    private Subscription upstream;\n \n-    @Nullable\n-    private volatile Throwable cause;\n-    private volatile boolean cancelled;\n-    private volatile boolean completing;\n+    private boolean handlerProduced;\n+    private boolean sawLeadingHeaders;\n+    private boolean initialized;\n+    private boolean askedUpstreamForElement;\n+    private boolean cancelled;\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDeframerHandler},", "originalCommit": "c8cb31186f850e15efb20001f638ba91e40090fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\nindex 626e5bb06..041102371 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\n\n@@ -31,6 +31,7 @@ import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpObject;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n import com.linecorp.armeria.common.ResponseHeaders;\n import com.linecorp.armeria.common.annotation.UnstableApi;\n import com.linecorp.armeria.common.util.Exceptions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwODU3OQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r540708579", "bodyText": "Isn't this method is called by another thread? which means that we have to guarantee the thread safety in the method?", "author": "minwoox", "createdAt": "2020-12-11T05:54:40Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -104,61 +111,59 @@ SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n         final SubscriptionImpl subscriptionImpl = super.subscribe(subscription);\n         if (subscriptionImpl == subscription) {\n             final EventExecutor eventLoop = subscription.executor();\n-            this.eventLoop = eventLoop;\n-            deferredInit(eventLoop);\n+            publisher.subscribe(subscriber, eventLoop, getSubscriptionOptions(subscription));\n+            deferredInit();", "originalCommit": "c8cb31186f850e15efb20001f638ba91e40090fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcxNjIwNg==", "url": "https://github.com/line/armeria/pull/3215#discussion_r540716206", "bodyText": "Ah... It's not. I thought this method is called in an event loop.", "author": "ikhoon", "createdAt": "2020-12-11T06:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwODU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\nindex 626e5bb06..041102371 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\n\n@@ -111,12 +112,20 @@ public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implem\n         final SubscriptionImpl subscriptionImpl = super.subscribe(subscription);\n         if (subscriptionImpl == subscription) {\n             final EventExecutor eventLoop = subscription.executor();\n-            publisher.subscribe(subscriber, eventLoop, getSubscriptionOptions(subscription));\n-            deferredInit();\n+            if (eventLoop.inEventLoop()) {\n+                subscribe0(subscription, eventLoop);\n+            } else {\n+                eventLoop.execute(() -> subscribe0(subscription, eventLoop));\n+            }\n         }\n         return subscriptionImpl;\n     }\n \n+    private void subscribe0(SubscriptionImpl subscription, EventExecutor eventLoop) {\n+        publisher.subscribe(subscriber, eventLoop, getSubscriptionOptions(subscription));\n+        deferredInit();\n+    }\n+\n     private void deferredInit() {\n         if (upstream != null) {\n             if (initialized) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwOTg4MQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r540709881", "bodyText": "Could be just requestHeaders?", "author": "minwoox", "createdAt": "2020-12-11T05:58:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -104,61 +111,59 @@ SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n         final SubscriptionImpl subscriptionImpl = super.subscribe(subscription);\n         if (subscriptionImpl == subscription) {\n             final EventExecutor eventLoop = subscription.executor();\n-            this.eventLoop = eventLoop;\n-            deferredInit(eventLoop);\n+            publisher.subscribe(subscriber, eventLoop, getSubscriptionOptions(subscription));\n+            deferredInit();\n         }\n         return subscriptionImpl;\n     }\n \n-    private void deferredInit(@Nullable EventExecutor eventLoop) {\n-        final Subscription upstream = this.upstream;\n-\n-        if (upstream != null && eventLoop != null) {\n-            if (initializedUpdater.compareAndSet(this, 0, 1)) {\n-                if (cancelled) {\n-                    upstream.cancel();\n-                    return;\n-                }\n+    private void deferredInit() {\n+        if (upstream != null) {\n+            if (initialized) {\n+                return;\n+            }\n \n-                final Throwable cause = this.cause;\n-                if (cause != null) {\n-                    if (eventLoop.inEventLoop()) {\n-                        onError0(cause);\n-                    } else {\n-                        eventLoop.execute(() -> onError0(cause));\n-                    }\n-                    return;\n-                }\n+            initialized = true;\n+            if (cancelled) {\n+                upstream.cancel();\n+                return;\n+            }\n \n-                if (completing) {\n-                    if (eventLoop.inEventLoop()) {\n-                        onComplete0();\n-                    } else {\n-                        eventLoop.execute(this::onComplete0);\n-                    }\n-                    return;\n-                }\n+            long demand = demand();\n+            if (demand > 0 && httpHeaders != null) {\n+                final HttpHeaders httpHeaders = this.httpHeaders;", "originalCommit": "c8cb31186f850e15efb20001f638ba91e40090fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\nindex 626e5bb06..041102371 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\n\n@@ -111,12 +112,20 @@ public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implem\n         final SubscriptionImpl subscriptionImpl = super.subscribe(subscription);\n         if (subscriptionImpl == subscription) {\n             final EventExecutor eventLoop = subscription.executor();\n-            publisher.subscribe(subscriber, eventLoop, getSubscriptionOptions(subscription));\n-            deferredInit();\n+            if (eventLoop.inEventLoop()) {\n+                subscribe0(subscription, eventLoop);\n+            } else {\n+                eventLoop.execute(() -> subscribe0(subscription, eventLoop));\n+            }\n         }\n         return subscriptionImpl;\n     }\n \n+    private void subscribe0(SubscriptionImpl subscription, EventExecutor eventLoop) {\n+        publisher.subscribe(subscriber, eventLoop, getSubscriptionOptions(subscription));\n+        deferredInit();\n+    }\n+\n     private void deferredInit() {\n         if (upstream != null) {\n             if (initialized) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcxMjYyOQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r540712629", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   <li>Creates an deframed {@link StreamMessage} using {@link HttpMessage#deframe(HttpDeframerHandler)}\n          \n          \n            \n            <li>Create an deframed {@link StreamMessage} using {@link HttpMessage#deframe(HttpDeframerHandler)}", "author": "minwoox", "createdAt": "2020-12-11T06:06:56Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerHandler.java", "diffHunk": "@@ -20,13 +20,62 @@\n \n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpMessage;\n import com.linecorp.armeria.common.HttpObject;\n import com.linecorp.armeria.common.ResponseHeaders;\n import com.linecorp.armeria.common.annotation.UnstableApi;\n \n /**\n  * An {@link HttpDeframerHandler} that decodes a stream of {@link HttpObject}s to N objects.\n  *\n+ * <p>Follow the below steps to deframe HTTP payload using {@link HttpDeframerHandler}.\n+ * <ol>\n+ *   <li>Implement your deframing logic in {@link HttpDeframerHandler}.\n+ *       <pre>{@code\n+ *       > class FixedLengthDecoder implements HttpDeframerHandler<String> {\n+ *       >     private final int length;\n+ *       >\n+ *       >     FixedLengthDecoder(int length) {\n+ *       >         this.length = length;\n+ *       >     }\n+ *       >\n+ *       >     @Override\n+ *       >     public void process(HttpDeframerInput in, HttpDeframerOutput<String> out) {\n+ *       >         int remaining = in.readableBytes();\n+ *       >         if (remaining < length) {\n+ *       >             // The input is not enough to process. Waiting for more data.\n+ *       >             return;\n+ *       >         }\n+ *       >\n+ *       >         do {\n+ *       >             // Read data from 'HttpDeframerInput' and\n+ *       >             // write the processed result to 'HttpDeframerOutput'.\n+ *       >             ByteBuf buf = in.readBytes(length);\n+ *       >             out.add(buf.toString(StandardCharsets.UTF_8));\n+ *       >             // Should release the returned 'ByteBuf'\n+ *       >             buf.release();\n+ *       >             remaining -= length;\n+ *       >         } while (remaining >= length);\n+ *       >     }\n+ *       > }\n+ *       }</pre>\n+ *   </li>\n+ *   <li>Creates an deframed {@link StreamMessage} using {@link HttpMessage#deframe(HttpDeframerHandler)}", "originalCommit": "c8cb31186f850e15efb20001f638ba91e40090fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerHandler.java b/core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerHandler.java\nindex e6633e9b5..499857279 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerHandler.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerHandler.java\n\n@@ -60,7 +60,7 @@ import com.linecorp.armeria.common.annotation.UnstableApi;\n  *       > }\n  *       }</pre>\n  *   </li>\n- *   <li>Creates an deframed {@link StreamMessage} using {@link HttpMessage#deframe(HttpDeframerHandler)}\n+ *   <li>Create an deframed {@link StreamMessage} using {@link HttpMessage#deframe(HttpDeframerHandler)}\n  *       with the {@link HttpDeframerHandler} instance.\n  *       <pre>{@code\n  *       FixedLengthDecoder decoder = new FixedLengthDecoder(11);\n"}}, {"oid": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "url": "https://github.com/line/armeria/commit/8df1b33f61228d6781ad2e93f7bcd28380b67a35", "message": "Address comments by @minwoox", "committedDate": "2020-12-11T07:50:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNjI0Mg==", "url": "https://github.com/line/armeria/pull/3215#discussion_r542116242", "bodyText": "Could we also add toDuplicator() here?", "author": "trustin", "createdAt": "2020-12-14T05:12:35Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpMessage.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.stream.HttpDeframerHandler;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * A streamed HTTP/2 message.\n+ */\n+public interface HttpMessage {", "originalCommit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4abb1a41827d844a15d4a83d0ca18543e2e51e82", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java b/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\nindex 4398af8c4..0dfb813ce 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\n\n@@ -20,11 +20,13 @@ import static java.util.Objects.requireNonNull;\n \n import java.util.function.Function;\n \n-import com.linecorp.armeria.common.stream.HttpDeframerHandler;\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessageDuplicator;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n \n /**\n  * A streamed HTTP/2 message.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNjczNQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r542116735", "bodyText": "How about renaming deframe to decode, because what a user does may be decoding rather than deframing? HttpDeframerHandler could be renamed to HttpDecoder as well.", "author": "trustin", "createdAt": "2020-12-14T05:14:28Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpMessage.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.stream.HttpDeframerHandler;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * A streamed HTTP/2 message.\n+ */\n+public interface HttpMessage {\n+\n+    /**\n+     * Creates a deframed {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n+     * the specified {@link HttpDeframerHandler}.\n+     */\n+    default <T> StreamMessage<T> deframe(HttpDeframerHandler<T> handler) {", "originalCommit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4abb1a41827d844a15d4a83d0ca18543e2e51e82", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java b/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\nindex 4398af8c4..0dfb813ce 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\n\n@@ -20,11 +20,13 @@ import static java.util.Objects.requireNonNull;\n \n import java.util.function.Function;\n \n-import com.linecorp.armeria.common.stream.HttpDeframerHandler;\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessageDuplicator;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n \n /**\n  * A streamed HTTP/2 message.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzQ1MA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r542117450", "bodyText": "Shouldn't we hide this from the public API?", "author": "trustin", "createdAt": "2020-12-14T05:16:49Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -16,75 +16,83 @@\n \n package com.linecorp.armeria.common.stream;\n \n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n import static java.util.Objects.requireNonNull;\n \n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n-import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n import java.util.function.Function;\n \n import javax.annotation.Nullable;\n \n+import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n \n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n import com.linecorp.armeria.common.util.Exceptions;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n import io.netty.util.concurrent.EventExecutor;\n \n /**\n- * The default {@link HttpDeframer} implementation.\n+ * The default HTTP deframer implementation.\n  */\n-final class DefaultHttpDeframer<T>\n-        extends DefaultStreamMessage<T>\n-        implements HttpDeframer<T>, HttpDeframerOutput<T> {\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDeframerOutput<T> {", "originalCommit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyNDMwNA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r542124304", "bodyText": "DefaultHttpDeframer uses/override package-private methods such as demand() and cancel().\nI had the same problem when working on multipart. I added ListenableStreamMessage that injects hooks by wrapping Subscriber and Subscription.\nhttps://github.com/line/armeria/pull/2894/files#diff-3dcae84e4c76922eb2d75e9d9bdd86904d33635a2c5a43226c7b6daf8c0a69b3", "author": "ikhoon", "createdAt": "2020-12-14T05:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MTQ0MA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544761440", "bodyText": "DefaultHttpDeframer is moved to internal package by adding demand() method to StreamMessage.", "author": "ikhoon", "createdAt": "2020-12-17T02:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4abb1a41827d844a15d4a83d0ca18543e2e51e82", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\nindex 041102371..5c36993d9 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java\n\n@@ -52,8 +52,8 @@ public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implem\n \n     private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n \n-    private final HttpDeframerHandler<T> handler;\n-    private final ByteBufDeframerInput input;\n+    private final HttpDecoder<T> handler;\n+    private final ByteBufDecoderInput input;\n     private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n     private final StreamMessage<? extends HttpObject> publisher;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExOTYyMw==", "url": "https://github.com/line/armeria/pull/3215#discussion_r542119623", "bodyText": "Could we just build a fake HttpResponse here, so we don't have to use DefaultHttpDeframer directly? For example, you could just do grpcResponse.toHttpResponse().decrame(handler, ctx.alloc()).", "author": "trustin", "createdAt": "2020-12-14T05:24:05Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java", "diffHunk": "@@ -280,9 +280,10 @@ private static void deframeAndRespond(\n         final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(\n                 // Max outbound message size is handled by the GrpcService, so we don't need to set it here.\n                 Integer.MAX_VALUE);\n-        final HttpDeframer<DeframedMessage> deframer = HttpDeframer.of(handler, ctx.alloc());\n-        StreamMessage.of(grpcResponse.content()).subscribe(deframer, ctx.eventLoop());\n-        deframer.subscribe(singleSubscriber(unframedHeaders, res), ctx.eventLoop());\n+        final StreamMessage<HttpData> publisher = StreamMessage.of(grpcResponse.content());\n+        final StreamMessage<DeframedMessage> deframed =\n+                new DefaultHttpDeframer<>(publisher, handler, ctx.alloc());", "originalCommit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjQ1OA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544762458", "bodyText": "Fixed", "author": "ikhoon", "createdAt": "2020-12-17T02:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExOTYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "06a135994a95b634292e3ea4a98c4db479244435", "chunk": "diff --git a/grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java b/grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java\nindex 30928c788..b54ad4a1c 100644\n--- a/grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java\n+++ b/grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java\n\n@@ -277,13 +275,11 @@ final class UnframedGrpcService extends SimpleDecoratingHttpService implements G\n             }\n         }\n \n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(\n                 // Max outbound message size is handled by the GrpcService, so we don't need to set it here.\n                 Integer.MAX_VALUE);\n-        final StreamMessage<HttpData> publisher = StreamMessage.of(grpcResponse.content());\n-        final StreamMessage<DeframedMessage> deframed =\n-                new DefaultHttpDeframer<>(publisher, handler, ctx.alloc());\n-        deframed.subscribe(singleSubscriber(unframedHeaders, res), ctx.eventLoop());\n+        grpcResponse.toHttpResponse().decode(deframer, ctx.alloc())\n+                    .subscribe(singleSubscriber(unframedHeaders, res), ctx.eventLoop());\n     }\n \n     private static Subscriber<DeframedMessage> singleSubscriber(ResponseHeadersBuilder unframedHeaders,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMDEwMw==", "url": "https://github.com/line/armeria/pull/3215#discussion_r542120103", "bodyText": "Ditto - HttpRequest.of(..., framed).deframe(handler, alloc, ...)", "author": "trustin", "createdAt": "2020-12-14T05:25:26Z", "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java", "diffHunk": "@@ -167,12 +167,13 @@ private static ByteBuf serializeMessage(ByteBuf message, boolean trailers) {\n         private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n                                                                  EventLoop eventLoop,\n                                                                  ByteBufAllocator alloc) {\n-            final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();\n+            final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n             final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);\n-            final HttpDeframer<DeframedMessage> deframer = newHttpDeframer(handler, alloc, true);\n-            StreamMessage.of(framed).subscribe(deframer, eventLoop);\n-            deframer.subscribe(singleSubscriber(deframed), eventLoop);\n-            return deframed;\n+            final StreamMessage<HttpData> source = StreamMessage.of(framed);\n+            final StreamMessage<DeframedMessage> deframed =\n+                    new DefaultHttpDeframer<>(source, handler, alloc, byteBufConverter(alloc, true));", "originalCommit": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06a135994a95b634292e3ea4a98c4db479244435", "chunk": "diff --git a/grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java b/grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java\nindex 559c68618..3970f11c2 100644\n--- a/grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java\n+++ b/grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java\n\n@@ -164,18 +165,6 @@ class GrpcWebTextTest {\n             return buf;\n         }\n \n-        private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n-                                                                 EventLoop eventLoop,\n-                                                                 ByteBufAllocator alloc) {\n-            final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n-            final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);\n-            final StreamMessage<HttpData> source = StreamMessage.of(framed);\n-            final StreamMessage<DeframedMessage> deframed =\n-                    new DefaultHttpDeframer<>(source, handler, alloc, byteBufConverter(alloc, true));\n-            deframed.subscribe(singleSubscriber(deframedByteBuf), eventLoop);\n-            return deframedByteBuf;\n-        }\n-\n         private static Subscriber<DeframedMessage> singleSubscriber(CompletableFuture<ByteBuf> deframed) {\n             return new Subscriber<DeframedMessage>() {\n                 @Override\n"}}, {"oid": "4abb1a41827d844a15d4a83d0ca18543e2e51e82", "url": "https://github.com/line/armeria/commit/4abb1a41827d844a15d4a83d0ca18543e2e51e82", "message": "--wip-- [skip ci]", "committedDate": "2020-12-14T06:34:49Z", "type": "commit"}, {"oid": "06a135994a95b634292e3ea4a98c4db479244435", "url": "https://github.com/line/armeria/commit/06a135994a95b634292e3ea4a98c4db479244435", "message": "Address comments by @trustin", "committedDate": "2020-12-14T08:50:14Z", "type": "commit"}, {"oid": "e02ea653b487c978a071b7a4092e09e97418a50c", "url": "https://github.com/line/armeria/commit/e02ea653b487c978a071b7a4092e09e97418a50c", "message": "Rename HttpDeframerOutput to HttpDecoderOutput", "committedDate": "2020-12-14T09:02:21Z", "type": "commit"}, {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea", "url": "https://github.com/line/armeria/commit/64ae46edc13047f859ab606cb790e1814e14c1ea", "message": "Clean up", "committedDate": "2020-12-14T09:10:31Z", "type": "commit"}, {"oid": "e5d89f021f48db6d6269ae8a08c78e916a9eaeb5", "url": "https://github.com/line/armeria/commit/e5d89f021f48db6d6269ae8a08c78e916a9eaeb5", "message": "Make HttpMesage extend StreamMessage", "committedDate": "2020-12-17T02:20:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTU0MQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544751541", "bodyText": "Shouldn't we use SubscriptionOption... in case another option is added later?", "author": "minwoox", "createdAt": "2020-12-17T01:51:22Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -149,6 +152,16 @@ private void subscribe(SubscriptionImpl subscription, Subscriber<Object> subscri\n         }\n     }\n \n+    /**\n+     * Invoked when a subscriber subscribes.\n+     */\n+    protected void subscribe0(EventExecutor executor, boolean withPooledObjects, boolean notifyCancellation) {}", "originalCommit": "64ae46edc13047f859ab606cb790e1814e14c1ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTkyNw==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544751927", "bodyText": "Maybe onSubscribe? to align with onRequest", "author": "minwoox", "createdAt": "2020-12-17T01:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3MjUwNA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544772504", "bodyText": "Shouldn't we use SubscriptionOption... in case another option is added later?\n\nThat's a good point. Let me refactor AbstractStreamMessage a bit.", "author": "ikhoon", "createdAt": "2020-12-17T02:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5Mzc2MQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544793761", "bodyText": "Maybe onSubscribe? to align with onRequest\n\nDid You mean to rename subscribe0 to onSubscribe? As you know onSubscribe is an API of Subscriber. I think if we use onSubscribe here, it could be a misterm and cause confusion a bit.", "author": "ikhoon", "createdAt": "2020-12-17T03:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5ODUwMQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544798501", "bodyText": "That is true. \ud83d\udc4d", "author": "minwoox", "createdAt": "2020-12-17T04:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java\nindex 6206d2c07..a50c7d8d9 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java\n\n@@ -155,7 +155,7 @@ public class DefaultStreamMessage<T> extends AbstractStreamMessageAndWriter<T> {\n     /**\n      * Invoked when a subscriber subscribes.\n      */\n-    protected void subscribe0(EventExecutor executor, boolean withPooledObjects, boolean notifyCancellation) {}\n+    protected void subscribe0(EventExecutor executor, SubscriptionOption[] options) {}\n \n     /**\n      * Invoked whenever a new demand is requested.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1NDE4Mw==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544754183", "bodyText": "nit: a?", "author": "minwoox", "createdAt": "2020-12-17T01:58:54Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpMessage;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * An {@link HttpDecoder} that decodes a stream of {@link HttpObject}s to N objects.\n+ *\n+ * <p>Follow the below steps to decode HTTP payload using {@link HttpDecoder}.\n+ * <ol>\n+ *   <li>Implement your decoding logic in {@link HttpDecoder}.\n+ *       <pre>{@code\n+ *       > class FixedLengthDecoder implements HttpDecoder<String> {\n+ *       >     private final int length;\n+ *       >\n+ *       >     FixedLengthDecoder(int length) {\n+ *       >         this.length = length;\n+ *       >     }\n+ *       >\n+ *       >     @Override\n+ *       >     public void process(HttpDecoderInput in, HttpDecoderOutput<String> out) {\n+ *       >         int remaining = in.readableBytes();\n+ *       >         if (remaining < length) {\n+ *       >             // The input is not enough to process. Waiting for more data.\n+ *       >             return;\n+ *       >         }\n+ *       >\n+ *       >         do {\n+ *       >             // Read data from 'HttpDecoderInput' and\n+ *       >             // write the processed result to 'HttpDecoderOutput'.\n+ *       >             ByteBuf buf = in.readBytes(length);\n+ *       >             out.add(buf.toString(StandardCharsets.UTF_8));\n+ *       >             // Should release the returned 'ByteBuf'\n+ *       >             buf.release();\n+ *       >             remaining -= length;\n+ *       >         } while (remaining >= length);\n+ *       >     }\n+ *       > }\n+ *       }</pre>\n+ *   </li>\n+ *   <li>Create an decoded {@link StreamMessage} using {@link HttpMessage#decode(HttpDecoder)}", "originalCommit": "64ae46edc13047f859ab606cb790e1814e14c1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java b/core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java\nindex bfcaa34c6..8b5d9bf51 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java\n\n@@ -60,7 +60,7 @@ import com.linecorp.armeria.common.annotation.UnstableApi;\n  *       > }\n  *       }</pre>\n  *   </li>\n- *   <li>Create an decoded {@link StreamMessage} using {@link HttpMessage#decode(HttpDecoder)}\n+ *   <li>Create a decoded {@link StreamMessage} using {@link HttpMessage#decode(HttpDecoder)}\n  *       with the {@link HttpDecoder} instance.\n  *       <pre>{@code\n  *       FixedLengthDecoder decoder = new FixedLengthDecoder(11);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1OTIxMA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544759210", "bodyText": "Shouldn't we cancel and cleanup if this returns false?", "author": "minwoox", "createdAt": "2020-12-17T02:13:21Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.DefaultStreamMessage;\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n+import com.linecorp.armeria.common.stream.HttpDecoderOutput;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * The default HTTP deframer implementation.\n+ */\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDecoderOutput<T> {\n+\n+    private static final SubscriptionOption[] EMPTY_OPTIONS = {};\n+    private static final SubscriptionOption[] POOLED_OBJECTS_OPTIONS = { WITH_POOLED_OBJECTS };\n+    private static final SubscriptionOption[] NOTIFY_CANCELLATION_OPTIONS = { NOTIFY_CANCELLATION };\n+\n+    private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n+\n+    private final HttpDecoder<T> handler;\n+    private final ByteBufDecoderInput input;\n+    private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n+    private final StreamMessage<? extends HttpObject> publisher;\n+\n+    @Nullable\n+    private RequestHeaders requestHeaders;\n+    @Nullable\n+    private Subscription upstream;\n+\n+    private boolean handlerProduced;\n+    private boolean sawLeadingHeaders;\n+    private boolean initialized;\n+    private boolean askedUpstreamForElement;\n+    private boolean cancelled;\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder} and\n+     * {@link ByteBufAllocator}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc) {\n+        this(streamMessage, handler, alloc, HttpData::byteBuf);\n+    }\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder},\n+     * {@link ByteBufAllocator} and {@code byteBufConverter}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc,\n+                               Function<? super HttpData, ? extends ByteBuf> byteBufConverter) {\n+        publisher = requireNonNull(streamMessage, \"streamMessage\");\n+        this.handler = requireNonNull(handler, \"handler\");\n+        input = new ByteBufDecoderInput(requireNonNull(alloc, \"alloc\"));\n+        this.byteBufConverter = requireNonNull(byteBufConverter, \"byteBufConverter\");\n+        if (publisher instanceof HttpRequest) {\n+            requestHeaders = ((HttpRequest) publisher).headers();\n+        }\n+\n+        whenComplete().handle((unused1, cause) -> {\n+            if (cause instanceof CancelledSubscriptionException) {\n+                cancelAndCleanup();\n+            } else {\n+                // In addition to 'onComplete()', 'onError()' and 'cancel()',\n+                // make sure to call 'cleanup()' even when 'abort()' or 'close()' is invoked directly\n+                cleanup();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void add(T e) {\n+        if (tryWrite(e)) {", "originalCommit": "64ae46edc13047f859ab606cb790e1814e14c1ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5NDQwOA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544794408", "bodyText": "That makes sense.", "author": "ikhoon", "createdAt": "2020-12-17T03:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1OTIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java b/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\nindex 256e31a21..5348474e0 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\n\n@@ -16,8 +16,6 @@\n \n package com.linecorp.armeria.internal.common.stream;\n \n-import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n-import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n import static java.util.Objects.requireNonNull;\n \n import java.util.function.Function;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjI2MA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544762260", "bodyText": "We can remove this and rename it to init()? because init is always called from onSubscribe()?", "author": "minwoox", "createdAt": "2020-12-17T02:22:02Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.DefaultStreamMessage;\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n+import com.linecorp.armeria.common.stream.HttpDecoderOutput;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * The default HTTP deframer implementation.\n+ */\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDecoderOutput<T> {\n+\n+    private static final SubscriptionOption[] EMPTY_OPTIONS = {};\n+    private static final SubscriptionOption[] POOLED_OBJECTS_OPTIONS = { WITH_POOLED_OBJECTS };\n+    private static final SubscriptionOption[] NOTIFY_CANCELLATION_OPTIONS = { NOTIFY_CANCELLATION };\n+\n+    private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n+\n+    private final HttpDecoder<T> handler;\n+    private final ByteBufDecoderInput input;\n+    private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n+    private final StreamMessage<? extends HttpObject> publisher;\n+\n+    @Nullable\n+    private RequestHeaders requestHeaders;\n+    @Nullable\n+    private Subscription upstream;\n+\n+    private boolean handlerProduced;\n+    private boolean sawLeadingHeaders;\n+    private boolean initialized;\n+    private boolean askedUpstreamForElement;\n+    private boolean cancelled;\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder} and\n+     * {@link ByteBufAllocator}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc) {\n+        this(streamMessage, handler, alloc, HttpData::byteBuf);\n+    }\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder},\n+     * {@link ByteBufAllocator} and {@code byteBufConverter}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc,\n+                               Function<? super HttpData, ? extends ByteBuf> byteBufConverter) {\n+        publisher = requireNonNull(streamMessage, \"streamMessage\");\n+        this.handler = requireNonNull(handler, \"handler\");\n+        input = new ByteBufDecoderInput(requireNonNull(alloc, \"alloc\"));\n+        this.byteBufConverter = requireNonNull(byteBufConverter, \"byteBufConverter\");\n+        if (publisher instanceof HttpRequest) {\n+            requestHeaders = ((HttpRequest) publisher).headers();\n+        }\n+\n+        whenComplete().handle((unused1, cause) -> {\n+            if (cause instanceof CancelledSubscriptionException) {\n+                cancelAndCleanup();\n+            } else {\n+                // In addition to 'onComplete()', 'onError()' and 'cancel()',\n+                // make sure to call 'cleanup()' even when 'abort()' or 'close()' is invoked directly\n+                cleanup();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void add(T e) {\n+        if (tryWrite(e)) {\n+            handlerProduced = true;\n+        }\n+    }\n+\n+    @Override\n+    protected void subscribe0(EventExecutor executor, boolean withPooledObjects, boolean notifyCancellation) {\n+        publisher.subscribe(subscriber, executor, toSubscriptionOptions(withPooledObjects, notifyCancellation));\n+        deferredInit();", "originalCommit": "64ae46edc13047f859ab606cb790e1814e14c1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java b/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\nindex 256e31a21..5348474e0 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\n\n@@ -16,8 +16,6 @@\n \n package com.linecorp.armeria.internal.common.stream;\n \n-import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n-import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n import static java.util.Objects.requireNonNull;\n \n import java.util.function.Function;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjY0Ng==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544762646", "bodyText": "Shouldn't we add sawLeadingHeaders = true?", "author": "minwoox", "createdAt": "2020-12-17T02:23:10Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.DefaultStreamMessage;\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n+import com.linecorp.armeria.common.stream.HttpDecoderOutput;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * The default HTTP deframer implementation.\n+ */\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDecoderOutput<T> {\n+\n+    private static final SubscriptionOption[] EMPTY_OPTIONS = {};\n+    private static final SubscriptionOption[] POOLED_OBJECTS_OPTIONS = { WITH_POOLED_OBJECTS };\n+    private static final SubscriptionOption[] NOTIFY_CANCELLATION_OPTIONS = { NOTIFY_CANCELLATION };\n+\n+    private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n+\n+    private final HttpDecoder<T> handler;\n+    private final ByteBufDecoderInput input;\n+    private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n+    private final StreamMessage<? extends HttpObject> publisher;\n+\n+    @Nullable\n+    private RequestHeaders requestHeaders;\n+    @Nullable\n+    private Subscription upstream;\n+\n+    private boolean handlerProduced;\n+    private boolean sawLeadingHeaders;\n+    private boolean initialized;\n+    private boolean askedUpstreamForElement;\n+    private boolean cancelled;\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder} and\n+     * {@link ByteBufAllocator}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc) {\n+        this(streamMessage, handler, alloc, HttpData::byteBuf);\n+    }\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder},\n+     * {@link ByteBufAllocator} and {@code byteBufConverter}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc,\n+                               Function<? super HttpData, ? extends ByteBuf> byteBufConverter) {\n+        publisher = requireNonNull(streamMessage, \"streamMessage\");\n+        this.handler = requireNonNull(handler, \"handler\");\n+        input = new ByteBufDecoderInput(requireNonNull(alloc, \"alloc\"));\n+        this.byteBufConverter = requireNonNull(byteBufConverter, \"byteBufConverter\");\n+        if (publisher instanceof HttpRequest) {\n+            requestHeaders = ((HttpRequest) publisher).headers();", "originalCommit": "64ae46edc13047f859ab606cb790e1814e14c1ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4ODMwNQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544788305", "bodyText": "The requestHeaders is delivered via HttpMessageSubscriber.onNext().\nsawLeadingHeaders will be set to true if the requestHeaders is actually received.", "author": "ikhoon", "createdAt": "2020-12-17T03:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjY0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4OTkwMg==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544789902", "bodyText": "Ah I missed that. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-12-17T03:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java b/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\nindex 256e31a21..5348474e0 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java\n\n@@ -16,8 +16,6 @@\n \n package com.linecorp.armeria.internal.common.stream;\n \n-import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n-import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n import static java.util.Objects.requireNonNull;\n \n import java.util.function.Function;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NDIzMA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544764230", "bodyText": "Could you add a comment for DUMMY_HEADERS?", "author": "minwoox", "createdAt": "2020-12-17T02:27:35Z", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java", "diffHunk": "@@ -108,20 +110,19 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)\n     private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n                                                              EventLoop eventLoop,\n                                                              ByteBufAllocator alloc) {\n-        final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();\n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);\n-        final HttpDeframer<DeframedMessage> deframer = HttpDeframer.of(handler, alloc);\n+        final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n \n-        StreamMessage.of(framed).subscribe(deframer, eventLoop);\n-        deframer.subscribe(singleSubscriber(deframed), eventLoop);\n-        return deframed;\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n+        HttpRequest.of(DUMMY_HEADERS, framed).decode(deframer, alloc)", "originalCommit": "64ae46edc13047f859ab606cb790e1814e14c1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "chunk": "diff --git a/grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java b/grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java\nindex da4287638..8fc561b89 100644\n--- a/grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java\n+++ b/grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java\n\n@@ -76,48 +71,40 @@ public abstract class AbstractUnsafeUnaryGrpcService extends AbstractHttpService\n \n     @Override\n     protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {\n+        final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n+        req.decode(deframer, ctx.alloc())\n+           .subscribe(singleSubscriber(deframed), ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n+\n         final CompletableFuture<HttpResponse> responseFuture =\n-                req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc())\n-                   .thenCompose(msg -> deframeMessage(msg.content(), ctx.eventLoop(), ctx.alloc()))\n-                   .thenCompose(this::handleMessage)\n-                   .thenApply(responseMessage -> {\n-                       final ArmeriaMessageFramer framer = new ArmeriaMessageFramer(\n-                               ctx.alloc(), Integer.MAX_VALUE, false);\n-                       final HttpData framed = framer.writePayload(responseMessage);\n-                       final HttpHeadersBuilder trailers = HttpHeaders.builder();\n-                       GrpcTrailersUtil.addStatusMessageToTrailers(trailers, StatusCodes.OK, null);\n-                       return HttpResponse.of(\n-                               RESPONSE_HEADERS,\n-                               framed,\n-                               trailers.build());\n-                   })\n-                   .exceptionally(t -> {\n-                       final HttpHeadersBuilder trailers = RESPONSE_HEADERS.toBuilder();\n-                       if (t instanceof ArmeriaStatusException) {\n-                           final ArmeriaStatusException statusException = (ArmeriaStatusException) t;\n-                           GrpcTrailersUtil.addStatusMessageToTrailers(\n-                                   trailers, statusException.getCode(), statusException.getMessage());\n-                       } else {\n-                           GrpcTrailersUtil.addStatusMessageToTrailers(\n-                                   trailers, StatusCodes.INTERNAL, t.getMessage());\n-                       }\n-                       return HttpResponse.of(trailers.build());\n-                   });\n+                deframed.thenCompose(this::handleMessage)\n+                        .thenApply(responseMessage -> {\n+                            final ArmeriaMessageFramer framer = new ArmeriaMessageFramer(\n+                                    ctx.alloc(), Integer.MAX_VALUE, false);\n+                            final HttpData framed = framer.writePayload(responseMessage);\n+                            final HttpHeadersBuilder trailers = HttpHeaders.builder();\n+                            GrpcTrailersUtil.addStatusMessageToTrailers(trailers, StatusCodes.OK, null);\n+                            return HttpResponse.of(\n+                                    RESPONSE_HEADERS,\n+                                    framed,\n+                                    trailers.build());\n+                        })\n+                        .exceptionally(t -> {\n+                            final HttpHeadersBuilder trailers = RESPONSE_HEADERS.toBuilder();\n+                            if (t instanceof ArmeriaStatusException) {\n+                                final ArmeriaStatusException statusException = (ArmeriaStatusException) t;\n+                                GrpcTrailersUtil.addStatusMessageToTrailers(\n+                                        trailers, statusException.getCode(), statusException.getMessage());\n+                            } else {\n+                                GrpcTrailersUtil.addStatusMessageToTrailers(\n+                                        trailers, StatusCodes.INTERNAL, t.getMessage());\n+                            }\n+                            return HttpResponse.of(trailers.build());\n+                        });\n \n         return HttpResponse.from(responseFuture);\n     }\n \n-    private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n-                                                             EventLoop eventLoop,\n-                                                             ByteBufAllocator alloc) {\n-        final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n-\n-        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n-        HttpRequest.of(DUMMY_HEADERS, framed).decode(deframer, alloc)\n-                   .subscribe(singleSubscriber(deframedByteBuf), eventLoop);\n-        return deframedByteBuf;\n-    }\n-\n     private static Subscriber<DeframedMessage> singleSubscriber(CompletableFuture<ByteBuf> deframed) {\n         return new Subscriber<DeframedMessage>() {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NjIzOQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544766239", "bodyText": "Can we just do\nfinal CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\nfinal ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\nreq.decode(deframer, ctx.alloc()).subscribe(singleSubscriber(deframedByteBuf), ctx.eventLoop());\ndeframedByteBuf.thenCompose(this::handleMessage)...\nin doPost?", "author": "minwoox", "createdAt": "2020-12-17T02:33:09Z", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java", "diffHunk": "@@ -108,20 +110,19 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)\n     private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n                                                              EventLoop eventLoop,\n                                                              ByteBufAllocator alloc) {\n-        final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();\n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);\n-        final HttpDeframer<DeframedMessage> deframer = HttpDeframer.of(handler, alloc);\n+        final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n \n-        StreamMessage.of(framed).subscribe(deframer, eventLoop);\n-        deframer.subscribe(singleSubscriber(deframed), eventLoop);\n-        return deframed;\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n+        HttpRequest.of(DUMMY_HEADERS, framed).decode(deframer, alloc)\n+                   .subscribe(singleSubscriber(deframedByteBuf), eventLoop);", "originalCommit": "64ae46edc13047f859ab606cb790e1814e14c1ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MTIwOA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r544791208", "bodyText": "Oh. Nice idea! I don't have to make a fake request. \ud83e\udd23", "author": "ikhoon", "createdAt": "2020-12-17T03:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NjIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "chunk": "diff --git a/grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java b/grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java\nindex da4287638..8fc561b89 100644\n--- a/grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java\n+++ b/grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java\n\n@@ -76,48 +71,40 @@ public abstract class AbstractUnsafeUnaryGrpcService extends AbstractHttpService\n \n     @Override\n     protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {\n+        final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n+        req.decode(deframer, ctx.alloc())\n+           .subscribe(singleSubscriber(deframed), ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n+\n         final CompletableFuture<HttpResponse> responseFuture =\n-                req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc())\n-                   .thenCompose(msg -> deframeMessage(msg.content(), ctx.eventLoop(), ctx.alloc()))\n-                   .thenCompose(this::handleMessage)\n-                   .thenApply(responseMessage -> {\n-                       final ArmeriaMessageFramer framer = new ArmeriaMessageFramer(\n-                               ctx.alloc(), Integer.MAX_VALUE, false);\n-                       final HttpData framed = framer.writePayload(responseMessage);\n-                       final HttpHeadersBuilder trailers = HttpHeaders.builder();\n-                       GrpcTrailersUtil.addStatusMessageToTrailers(trailers, StatusCodes.OK, null);\n-                       return HttpResponse.of(\n-                               RESPONSE_HEADERS,\n-                               framed,\n-                               trailers.build());\n-                   })\n-                   .exceptionally(t -> {\n-                       final HttpHeadersBuilder trailers = RESPONSE_HEADERS.toBuilder();\n-                       if (t instanceof ArmeriaStatusException) {\n-                           final ArmeriaStatusException statusException = (ArmeriaStatusException) t;\n-                           GrpcTrailersUtil.addStatusMessageToTrailers(\n-                                   trailers, statusException.getCode(), statusException.getMessage());\n-                       } else {\n-                           GrpcTrailersUtil.addStatusMessageToTrailers(\n-                                   trailers, StatusCodes.INTERNAL, t.getMessage());\n-                       }\n-                       return HttpResponse.of(trailers.build());\n-                   });\n+                deframed.thenCompose(this::handleMessage)\n+                        .thenApply(responseMessage -> {\n+                            final ArmeriaMessageFramer framer = new ArmeriaMessageFramer(\n+                                    ctx.alloc(), Integer.MAX_VALUE, false);\n+                            final HttpData framed = framer.writePayload(responseMessage);\n+                            final HttpHeadersBuilder trailers = HttpHeaders.builder();\n+                            GrpcTrailersUtil.addStatusMessageToTrailers(trailers, StatusCodes.OK, null);\n+                            return HttpResponse.of(\n+                                    RESPONSE_HEADERS,\n+                                    framed,\n+                                    trailers.build());\n+                        })\n+                        .exceptionally(t -> {\n+                            final HttpHeadersBuilder trailers = RESPONSE_HEADERS.toBuilder();\n+                            if (t instanceof ArmeriaStatusException) {\n+                                final ArmeriaStatusException statusException = (ArmeriaStatusException) t;\n+                                GrpcTrailersUtil.addStatusMessageToTrailers(\n+                                        trailers, statusException.getCode(), statusException.getMessage());\n+                            } else {\n+                                GrpcTrailersUtil.addStatusMessageToTrailers(\n+                                        trailers, StatusCodes.INTERNAL, t.getMessage());\n+                            }\n+                            return HttpResponse.of(trailers.build());\n+                        });\n \n         return HttpResponse.from(responseFuture);\n     }\n \n-    private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n-                                                             EventLoop eventLoop,\n-                                                             ByteBufAllocator alloc) {\n-        final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n-\n-        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n-        HttpRequest.of(DUMMY_HEADERS, framed).decode(deframer, alloc)\n-                   .subscribe(singleSubscriber(deframedByteBuf), eventLoop);\n-        return deframedByteBuf;\n-    }\n-\n     private static Subscriber<DeframedMessage> singleSubscriber(CompletableFuture<ByteBuf> deframed) {\n         return new Subscriber<DeframedMessage>() {\n             @Override\n"}}, {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5", "url": "https://github.com/line/armeria/commit/544ce4d24151196861bf237f0c7820ef24ff35f5", "message": "Address comments by @minwoox", "committedDate": "2020-12-17T04:20:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNzY2Ng==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548437666", "bodyText": "handler -> decoder?", "author": "trustin", "createdAt": "2020-12-24T08:00:33Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpMessage.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessageDuplicator;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * A streamed HTTP/2 message.\n+ */\n+public interface HttpMessage extends StreamMessage<HttpObject> {\n+\n+    /**\n+     * Returns a new {@link StreamMessageDuplicator} that duplicates this {@link HttpMessage} into one or\n+     * more {@link HttpMessage}s, which publish the same elements.\n+     * Note that you cannot subscribe to this {@link HttpMessage} anymore after you call this method.\n+     * To subscribe, call {@link StreamMessageDuplicator#duplicate()} from the returned\n+     * {@link StreamMessageDuplicator}.\n+     *\n+     * @param maxContentLength the maximum content length that the duplicator can hold in its buffer.\n+     *                         {@link ContentTooLargeException} is raised if the length of the buffered\n+     *                         {@link HttpData} is greater than this value.\n+     */\n+    StreamMessageDuplicator<HttpObject> toDuplicator(long maxContentLength);\n+\n+    /**\n+     * Returns a new {@link StreamMessageDuplicator} that duplicates this {@link HttpMessage} into one or\n+     * more {@link HttpMessage}s, which publish the same elements.\n+     * Note that you cannot subscribe to this {@link HttpMessage} anymore after you call this method.\n+     * To subscribe, call {@link StreamMessageDuplicator#duplicate()} from the returned\n+     * {@link StreamMessageDuplicator}.\n+     *\n+     * @param executor the executor to duplicate\n+     * @param maxContentLength the maximum content length that the duplicator can hold in its buffer.\n+     *                         {@link ContentTooLargeException} is raised if the length of the buffered\n+     *                         {@link HttpData} is greater than this value.\n+     */\n+    StreamMessageDuplicator<HttpObject> toDuplicator(EventExecutor executor, long maxContentLength);\n+\n+    /**\n+     * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n+     * the specified {@link HttpDecoder}.\n+     */\n+    default <T> StreamMessage<T> decode(HttpDecoder<T> handler) {\n+        requireNonNull(handler, \"handler\");\n+        return decode(handler, ByteBufAllocator.DEFAULT);\n+    }\n+\n+    /**\n+     * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n+     * the specified {@link HttpDecoder} and {@link ByteBufAllocator}.\n+     */\n+    default <T> StreamMessage<T> decode(HttpDecoder<T> handler, ByteBufAllocator alloc) {\n+        requireNonNull(handler, \"handler\");\n+        requireNonNull(alloc, \"alloc\");\n+        return decode(handler, alloc, HttpData::byteBuf);\n+    }\n+\n+    /**\n+     * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n+     * the specified {@link HttpDecoder} and {@link ByteBufAllocator} and {@code byteBufConverter}.\n+     */\n+    <T> StreamMessage<T> decode(HttpDecoder<T> handler, ByteBufAllocator alloc,", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java b/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\nindex 707274593..4779d4de0 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpMessage.java\n\n@@ -64,25 +64,25 @@ public interface HttpMessage extends StreamMessage<HttpObject> {\n      * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n      * the specified {@link HttpDecoder}.\n      */\n-    default <T> StreamMessage<T> decode(HttpDecoder<T> handler) {\n-        requireNonNull(handler, \"handler\");\n-        return decode(handler, ByteBufAllocator.DEFAULT);\n+    default <T> StreamMessage<T> decode(HttpDecoder<T> decoder) {\n+        requireNonNull(decoder, \"decoder\");\n+        return decode(decoder, ByteBufAllocator.DEFAULT);\n     }\n \n     /**\n      * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n      * the specified {@link HttpDecoder} and {@link ByteBufAllocator}.\n      */\n-    default <T> StreamMessage<T> decode(HttpDecoder<T> handler, ByteBufAllocator alloc) {\n-        requireNonNull(handler, \"handler\");\n+    default <T> StreamMessage<T> decode(HttpDecoder<T> decoder, ByteBufAllocator alloc) {\n+        requireNonNull(decoder, \"decoder\");\n         requireNonNull(alloc, \"alloc\");\n-        return decode(handler, alloc, HttpData::byteBuf);\n+        return decode(decoder, alloc, HttpData::byteBuf);\n     }\n \n     /**\n      * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n      * the specified {@link HttpDecoder} and {@link ByteBufAllocator} and {@code byteBufConverter}.\n      */\n-    <T> StreamMessage<T> decode(HttpDecoder<T> handler, ByteBufAllocator alloc,\n+    <T> StreamMessage<T> decode(HttpDecoder<T> decoder, ByteBufAllocator alloc,\n                                 Function<? super HttpData, ? extends ByteBuf> byteBufConverter);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODA0Mg==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438042", "bodyText": "How about just: Decodes a stream of ... ?", "author": "trustin", "createdAt": "2020-12-24T08:02:08Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpMessage;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * An {@link HttpDecoder} that decodes a stream of {@link HttpObject}s to N objects.", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java b/core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java\nindex 8b5d9bf51..f4649e650 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java\n\n@@ -26,7 +26,7 @@ import com.linecorp.armeria.common.ResponseHeaders;\n import com.linecorp.armeria.common.annotation.UnstableApi;\n \n /**\n- * An {@link HttpDecoder} that decodes a stream of {@link HttpObject}s to N objects.\n+ * Decodes a stream of {@link HttpObject}s to N objects.\n  *\n  * <p>Follow the below steps to decode HTTP payload using {@link HttpDecoder}.\n  * <ol>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODM4NA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438384", "bodyText": "Shouldn't decrease the demand when it's Long.MAX_VALUE.", "author": "trustin", "createdAt": "2020-12-24T08:03:20Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java", "diffHunk": "@@ -296,6 +313,7 @@ public void onNext(Object obj) {\n         }\n \n         private void onNext0(Object obj) {\n+            parent.demand--;", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java b/core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java\nindex 03a509afb..497dfe266 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java\n\n@@ -313,7 +313,9 @@ public class PublisherBasedStreamMessage<T> implements StreamMessage<T> {\n         }\n \n         private void onNext0(Object obj) {\n-            parent.demand--;\n+            if (parent.demand != Long.MAX_VALUE) {\n+                parent.demand--;\n+            }\n             try {\n                 subscriber.onNext(obj);\n             } catch (Throwable t) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODY4MA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438680", "bodyText": "Cruft?", "author": "trustin", "createdAt": "2020-12-24T08:04:15Z", "path": "core/src/test/java/com/linecorp/armeria/common/stream/HttpDeframerTest.java", "diffHunk": "@@ -49,12 +56,14 @@\n     static EventLoopExtension eventLoop = new EventLoopExtension();\n \n     @Test\n+    <T>", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE5OTAyNA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r549199024", "bodyText": "Oops...", "author": "ikhoon", "createdAt": "2020-12-28T03:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/common/stream/HttpDeframerTest.java b/core/src/test/java/com/linecorp/armeria/common/stream/HttpDeframerTest.java\nindex 26a464b9a..f9be1f24f 100644\n--- a/core/src/test/java/com/linecorp/armeria/common/stream/HttpDeframerTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/common/stream/HttpDeframerTest.java\n\n@@ -56,7 +56,6 @@ class HttpDeframerTest {\n     static EventLoopExtension eventLoop = new EventLoopExtension();\n \n     @Test\n-    <T>\n     void mapNToZero() {\n         final FixedLengthDecoder decoder = new FixedLengthDecoder(11);\n         final StreamMessage<HttpData> stream =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODk0Ng==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438946", "bodyText": "Maybe fix indentation?", "author": "trustin", "createdAt": "2020-12-24T08:05:10Z", "path": "core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java", "diffHunk": "@@ -81,8 +81,8 @@ void readByte() {\n             assertThat(input.readByte()).isEqualTo((byte) i);\n         }\n         assertThatThrownBy(() -> input.readByte())\n-                .isInstanceOf(IllegalStateException.class)\n-                .hasMessageContaining(\"end of deframer input\");\n+                  .isInstanceOf(IllegalStateException.class)\n+                  .hasMessageContaining(\"end of deframer input\");", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java b/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\nindex b63b0bdea..fcda84ae1 100644\n--- a/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\n\n@@ -81,8 +81,8 @@ class ByteBufDecoderInputTest {\n             assertThat(input.readByte()).isEqualTo((byte) i);\n         }\n         assertThatThrownBy(() -> input.readByte())\n-                  .isInstanceOf(IllegalStateException.class)\n-                  .hasMessageContaining(\"end of deframer input\");\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessageContaining(\"end of deframer input\");\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODk5MA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438990", "bodyText": "Maybe fix indentation?", "author": "trustin", "createdAt": "2020-12-24T08:05:24Z", "path": "core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java", "diffHunk": "@@ -113,13 +113,13 @@ void readInt() {\n         assertThat(byteBufs.get(2).refCnt()).isZero();\n \n         assertThatThrownBy(() -> input.readInt())\n-                .isInstanceOf(IllegalStateException.class)\n-                .hasMessageContaining(\"end of deframer input\");\n+                  .isInstanceOf(IllegalStateException.class)\n+                  .hasMessageContaining(\"end of deframer input\");", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java b/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\nindex b63b0bdea..fcda84ae1 100644\n--- a/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\n\n@@ -113,8 +113,8 @@ class ByteBufDecoderInputTest {\n         assertThat(byteBufs.get(2).refCnt()).isZero();\n \n         assertThatThrownBy(() -> input.readInt())\n-                  .isInstanceOf(IllegalStateException.class)\n-                  .hasMessageContaining(\"end of deframer input\");\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessageContaining(\"end of deframer input\");\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzOTAyOA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548439028", "bodyText": "Maybe fix indentation?", "author": "trustin", "createdAt": "2020-12-24T08:05:33Z", "path": "core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java", "diffHunk": "@@ -171,8 +171,8 @@ void readBytes() {\n         buf.release();\n \n         assertThatThrownBy(() -> input.readBytes(1))\n-                .isInstanceOf(IllegalStateException.class)\n-                .hasMessageContaining(\"end of deframer input\");\n+                  .isInstanceOf(IllegalStateException.class)\n+                  .hasMessageContaining(\"end of deframer input\");", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java b/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\nindex b63b0bdea..fcda84ae1 100644\n--- a/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java\n\n@@ -171,8 +171,8 @@ class ByteBufDecoderInputTest {\n         buf.release();\n \n         assertThatThrownBy(() -> input.readBytes(1))\n-                  .isInstanceOf(IllegalStateException.class)\n-                  .hasMessageContaining(\"end of deframer input\");\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessageContaining(\"end of deframer input\");\n         input.close();\n         assertThat(byteBuf1.refCnt()).isZero();\n         assertThat(byteBuf2.refCnt()).isZero();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzOTM3NA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548439374", "bodyText": "handler -> deframer", "author": "trustin", "createdAt": "2020-12-24T08:06:40Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java", "diffHunk": "@@ -75,12 +76,11 @@ public HttpResponse execute(HttpClient delegate, ClientRequestContext ctx, HttpR\n         final HttpResponse response = delegate.execute(ctx, req);\n         final ByteBufAllocator alloc = ctx.alloc();\n \n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(maxMessageSizeBytes);\n-        final HttpDeframer<DeframedMessage> deframer = newHttpDeframer(handler, alloc, grpcWebText);\n-\n+        final ArmeriaMessageDeframer handler = new ArmeriaMessageDeframer(maxMessageSizeBytes);", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java b/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java\nindex bb89836e1..1e025d560 100644\n--- a/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java\n+++ b/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java\n\n@@ -76,10 +76,10 @@ public final class GrpcWebTrailersExtractor implements DecoratingHttpClientFunct\n         final HttpResponse response = delegate.execute(ctx, req);\n         final ByteBufAllocator alloc = ctx.alloc();\n \n-        final ArmeriaMessageDeframer handler = new ArmeriaMessageDeframer(maxMessageSizeBytes);\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(maxMessageSizeBytes);\n         final DefaultStreamMessage<HttpData> publisher = new DefaultStreamMessage<>();\n         final StreamMessage<DeframedMessage> deframed =\n-                new DefaultHttpDeframer<>(publisher, handler, alloc, byteBufConverter(alloc, grpcWebText));\n+                new DefaultHttpDeframer<>(publisher, deframer, alloc, byteBufConverter(alloc, grpcWebText));\n         deframed.subscribe(new TrailersSubscriber(ctx), ctx.eventLoop());\n         final FilteredHttpResponse filteredHttpResponse = new FilteredHttpResponse(response, true) {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzOTQzOA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548439438", "bodyText": "handler -> deframer", "author": "trustin", "createdAt": "2020-12-24T08:06:49Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -217,13 +216,13 @@ public void start(Listener<O> responseListener, Metadata metadata) {\n                                                                     .withDescription(cause.getMessage())\n                                                                     .asRuntimeException()));\n \n-        final HttpStreamDeframerHandler handler =\n-                new HttpStreamDeframerHandler(decompressorRegistry, this, null, maxInboundMessageSizeBytes);\n-        responseDeframer = newHttpDeframer(handler, ctx.alloc(), grpcWebText);\n-        handler.setDeframer(responseDeframer);\n-        responseDeframer.subscribe(this, ctx.eventLoop());\n-\n-        res.subscribe(responseDeframer, ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n+        final HttpStreamDeframer handler =", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java b/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java\nindex 161d6389a..12ab73153 100644\n--- a/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java\n+++ b/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java\n\n@@ -216,12 +216,12 @@ final class ArmeriaClientCall<I, O> extends ClientCall<I, O>\n                                                                     .withDescription(cause.getMessage())\n                                                                     .asRuntimeException()));\n \n-        final HttpStreamDeframer handler =\n+        final HttpStreamDeframer deframer =\n                 new HttpStreamDeframer(decompressorRegistry, this, null, maxInboundMessageSizeBytes);\n         final ByteBufAllocator alloc = ctx.alloc();\n         final StreamMessage<DeframedMessage> deframed =\n-                res.decode(handler, alloc, byteBufConverter(alloc, grpcWebText));\n-        handler.setDeframedStreamMessage(deframed);\n+                res.decode(deframer, alloc, byteBufConverter(alloc, grpcWebText));\n+        deframer.setDeframedStreamMessage(deframed);\n         deframed.subscribe(this, ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n         responseListener.onReady();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzOTgwNA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548439804", "bodyText": "handler -> deframer", "author": "trustin", "createdAt": "2020-12-24T08:08:02Z", "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java", "diffHunk": "@@ -95,20 +92,24 @@ void unaryCallSuccessWhenEncodedDataSpansMultipleHttpFrames() {\n \n         @Override\n         protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {\n+            final ArmeriaMessageDeframer handler = new ArmeriaMessageDeframer(Integer.MAX_VALUE);", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java b/grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java\nindex 3970f11c2..1ab893231 100644\n--- a/grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java\n+++ b/grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java\n\n@@ -92,10 +92,10 @@ class GrpcWebTextTest {\n \n         @Override\n         protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {\n-            final ArmeriaMessageDeframer handler = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n+            final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n             final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n             final ByteBufAllocator alloc = ctx.alloc();\n-            req.decode(handler, alloc, byteBufConverter(alloc, true))\n+            req.decode(deframer, alloc, byteBufConverter(alloc, true))\n                .subscribe(singleSubscriber(deframedByteBuf), ctx.eventLoop());\n             final CompletableFuture<HttpResponse> responseFuture =\n                     deframedByteBuf\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDE2Ng==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548440166", "bodyText": "handler -> deframer", "author": "trustin", "createdAt": "2020-12-24T08:09:07Z", "path": "grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java", "diffHunk": "@@ -67,25 +67,23 @@ void afterTest() {\n                                           .toArray(HttpData[]::new);\n         final StreamMessage<HttpData> source = StreamMessage.of(data);\n \n-        final HttpStreamDeframerHandler handler =\n-                new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), noopListener,\n-                                              null, -1);\n-        final HttpDeframer<DeframedMessage> deframer =\n-                        HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);\n+        final HttpStreamDeframer handler =", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java b/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java\nindex 524554fd7..21f5eb7df 100644\n--- a/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java\n+++ b/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java\n\n@@ -67,11 +67,11 @@ public class HttpDeframerTckTest extends PublisherVerification<DeframedMessage>\n                                           .toArray(HttpData[]::new);\n         final StreamMessage<HttpData> source = StreamMessage.of(data);\n \n-        final HttpStreamDeframer handler =\n+        final HttpStreamDeframer deframer =\n                 new HttpStreamDeframer(DecompressorRegistry.getDefaultInstance(), noopListener,\n                                        null, -1);\n         final StreamMessage<DeframedMessage> deframed =\n-                new DefaultHttpDeframer<>(source, handler, ByteBufAllocator.DEFAULT);\n+                new DefaultHttpDeframer<>(source, deframer, ByteBufAllocator.DEFAULT);\n \n         return Flux.from(deframed).doOnNext(message -> byteBufs.add(message.buf()));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDIwOA==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548440208", "bodyText": "handler -> deframer", "author": "trustin", "createdAt": "2020-12-24T08:09:16Z", "path": "grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java", "diffHunk": "@@ -67,25 +67,23 @@ void afterTest() {\n                                           .toArray(HttpData[]::new);\n         final StreamMessage<HttpData> source = StreamMessage.of(data);\n \n-        final HttpStreamDeframerHandler handler =\n-                new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), noopListener,\n-                                              null, -1);\n-        final HttpDeframer<DeframedMessage> deframer =\n-                        HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);\n+        final HttpStreamDeframer handler =\n+                new HttpStreamDeframer(DecompressorRegistry.getDefaultInstance(), noopListener,\n+                                       null, -1);\n+        final StreamMessage<DeframedMessage> deframed =\n+                new DefaultHttpDeframer<>(source, handler, ByteBufAllocator.DEFAULT);\n \n-        source.subscribe(deframer, ImmediateEventExecutor.INSTANCE);\n-        return Flux.from(deframer).doOnNext(message -> byteBufs.add(message.buf()));\n+        return Flux.from(deframed).doOnNext(message -> byteBufs.add(message.buf()));\n     }\n \n     @Override\n     public Publisher<DeframedMessage> createFailedPublisher() {\n-        final Flux<HttpData> source = Flux.error(new RuntimeException());\n-        final HttpStreamDeframerHandler handler =\n-                new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), noopListener,\n-                                              null, -1);\n-        final HttpDeframer<DeframedMessage> reader = HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);\n-        source.subscribe(reader);\n-        return reader;\n+        final StreamMessage<HttpData> source =\n+                new PublisherBasedStreamMessage<>(Flux.error(new RuntimeException()));\n+        final HttpStreamDeframer handler =", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java b/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java\nindex 524554fd7..21f5eb7df 100644\n--- a/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java\n+++ b/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java\n\n@@ -67,11 +67,11 @@ public class HttpDeframerTckTest extends PublisherVerification<DeframedMessage>\n                                           .toArray(HttpData[]::new);\n         final StreamMessage<HttpData> source = StreamMessage.of(data);\n \n-        final HttpStreamDeframer handler =\n+        final HttpStreamDeframer deframer =\n                 new HttpStreamDeframer(DecompressorRegistry.getDefaultInstance(), noopListener,\n                                        null, -1);\n         final StreamMessage<DeframedMessage> deframed =\n-                new DefaultHttpDeframer<>(source, handler, ByteBufAllocator.DEFAULT);\n+                new DefaultHttpDeframer<>(source, deframer, ByteBufAllocator.DEFAULT);\n \n         return Flux.from(deframed).doOnNext(message -> byteBufs.add(message.buf()));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDI0NQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r548440245", "bodyText": "handler -> deframer", "author": "trustin", "createdAt": "2020-12-24T08:09:26Z", "path": "grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java", "diffHunk": "@@ -47,25 +47,24 @@\n     private static final HttpData DATA =\n             HttpData.wrap(GrpcTestUtil.uncompressedFrame(GrpcTestUtil.requestByteBuf()));\n \n+    private HttpStreamDeframer handler;", "originalCommit": "544ce4d24151196861bf237f0c7820ef24ff35f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "chunk": "diff --git a/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java b/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java\nindex 79f2de1ba..02b56eafa 100644\n--- a/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java\n+++ b/grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java\n\n@@ -47,23 +47,23 @@ class HttpStreamDeframerTest {\n     private static final HttpData DATA =\n             HttpData.wrap(GrpcTestUtil.uncompressedFrame(GrpcTestUtil.requestByteBuf()));\n \n-    private HttpStreamDeframer handler;\n+    private HttpStreamDeframer deframer;\n     private AtomicReference<Status> statusRef;\n \n     @BeforeEach\n     void setUp() {\n         statusRef = new AtomicReference<>();\n         final TransportStatusListener statusListener = (status, metadata) -> statusRef.set(status);\n-        handler = new HttpStreamDeframer(DecompressorRegistry.getDefaultInstance(), statusListener,\n-                                         null, Integer.MAX_VALUE);\n+        deframer = new HttpStreamDeframer(DecompressorRegistry.getDefaultInstance(), statusListener,\n+                                          null, Integer.MAX_VALUE);\n     }\n \n     @Test\n     void onHeaders() {\n         final StreamMessage<HttpObject> source = StreamMessage.of(HEADERS);\n         final StreamMessage<DeframedMessage> deframed =\n-                new DefaultHttpDeframer<>(source, handler, ByteBufAllocator.DEFAULT);\n-        handler.setDeframedStreamMessage(deframed);\n+                new DefaultHttpDeframer<>(source, deframer, ByteBufAllocator.DEFAULT);\n+        deframer.setDeframedStreamMessage(deframed);\n         StepVerifier.create(deframed)\n                     .thenRequest(1)\n                     .expectNextCount(0)\n"}}, {"oid": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "url": "https://github.com/line/armeria/commit/f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "message": "Address comments by @trustin", "committedDate": "2020-12-28T03:14:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwNDY2OQ==", "url": "https://github.com/line/armeria/pull/3215#discussion_r549204669", "bodyText": "How about renaming DefaultHttpDeframer to DecodedHttpStreamMessage or something similar?", "author": "trustin", "createdAt": "2020-12-28T03:45:52Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java", "diffHunk": "@@ -75,12 +76,11 @@ public HttpResponse execute(HttpClient delegate, ClientRequestContext ctx, HttpR\n         final HttpResponse response = delegate.execute(ctx, req);\n         final ByteBufAllocator alloc = ctx.alloc();\n \n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(maxMessageSizeBytes);\n-        final HttpDeframer<DeframedMessage> deframer = newHttpDeframer(handler, alloc, grpcWebText);\n-\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(maxMessageSizeBytes);\n         final DefaultStreamMessage<HttpData> publisher = new DefaultStreamMessage<>();\n-        publisher.subscribe(deframer, ctx.eventLoop());\n-        deframer.subscribe(new TrailersSubscriber(ctx), ctx.eventLoop());\n+        final StreamMessage<DeframedMessage> deframed =\n+                new DefaultHttpDeframer<>(publisher, deframer, alloc, byteBufConverter(alloc, grpcWebText));", "originalCommit": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwNTI2Ng==", "url": "https://github.com/line/armeria/pull/3215#discussion_r549205266", "bodyText": "DecodedHttpStreamMessage looks good to me. \ud83d\udcaf", "author": "ikhoon", "createdAt": "2020-12-28T03:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwNDY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "64088e7194b0b5ca3a66290bc89364007a6377af", "chunk": "diff --git a/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java b/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java\nindex 1e025d560..cbeaf30cb 100644\n--- a/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java\n+++ b/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java\n\n@@ -78,9 +78,10 @@ public final class GrpcWebTrailersExtractor implements DecoratingHttpClientFunct\n \n         final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(maxMessageSizeBytes);\n         final DefaultStreamMessage<HttpData> publisher = new DefaultStreamMessage<>();\n-        final StreamMessage<DeframedMessage> deframed =\n-                new DefaultHttpDeframer<>(publisher, deframer, alloc, byteBufConverter(alloc, grpcWebText));\n+        final StreamMessage<DeframedMessage> deframed = new DecodedHttpStreamMessage<>(\n+                publisher, deframer, alloc, byteBufConverter(alloc, grpcWebText));\n         deframed.subscribe(new TrailersSubscriber(ctx), ctx.eventLoop());\n+\n         final FilteredHttpResponse filteredHttpResponse = new FilteredHttpResponse(response, true) {\n             @Override\n             protected HttpObject filter(HttpObject obj) {\n"}}, {"oid": "64088e7194b0b5ca3a66290bc89364007a6377af", "url": "https://github.com/line/armeria/commit/64088e7194b0b5ca3a66290bc89364007a6377af", "message": "Rename DefaultHttpDefarmer to DecodedHttpStreamMessage", "committedDate": "2020-12-28T04:05:33Z", "type": "commit"}]}