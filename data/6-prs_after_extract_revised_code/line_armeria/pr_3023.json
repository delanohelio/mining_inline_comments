{"pr_number": 3023, "pr_title": "Use `ArmeriaHttp(Client|Server)Parser` by default in Brave decorators", "pr_createdAt": "2020-08-24T07:13:55Z", "pr_url": "https://github.com/line/armeria/pull/3023", "timeline": [{"oid": "1467e5d87208469255ea37113f3d822a68e51887", "url": "https://github.com/line/armeria/commit/1467e5d87208469255ea37113f3d822a68e51887", "message": "Use `ArmeriaHttp(Client|Server)Parser` by default in Brave decorators\nMotivation:\nWe'd better to use our default parser for `HttpTracing` which are `ArmeriaHttp(Client|Server)Parser`\nrather than Brave's default parser.\n\nModification:\n- Override (Client|Server)(Request|Response)Parser with `ArmeriaHttp(Client|Server)Parser`\n  if they are the default brave parsers in `Brave(Client|Service)`.\n\nResult:\n- `ArmeriaHttp(Client|Server)Parser` are used by default in `Brave(Client|Service)`.", "committedDate": "2020-08-24T07:12:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxODk5OQ==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495518999", "bodyText": "for example, if someone is using vertx and they now switch to armeria, it will break how they parsed before unless they intentionally don't use the singletons. For example, the only way I can tell we can get back to \"default\" is to wrap the brave parsers again so that they aren't the same instance.", "author": "codefromthecrypt", "createdAt": "2020-09-27T02:41:17Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java", "diffHunk": "@@ -78,16 +80,29 @@\n     /**\n      * Creates a new tracing {@link HttpClient} decorator using the specified {@link HttpTracing} instance.\n      */\n-    public static Function<? super HttpClient, BraveClient> newDecorator(\n-            HttpTracing httpTracing) {\n+    public static Function<? super HttpClient, BraveClient> newDecorator(HttpTracing httpTracing) {\n         try {\n             ensureScopeUsesRequestContext(httpTracing.tracing());\n         } catch (IllegalStateException e) {\n             logger.warn(\"{} - it is appropriate to ignore this warning if this client is not being used \" +\n                         \"inside an Armeria server (e.g., this is a normal spring-mvc tomcat server).\",\n                         e.getMessage());\n         }\n-        return delegate -> new BraveClient(delegate, httpTracing);\n+        final HttpRequestParser requestParser = httpTracing.clientRequestParser();\n+        final HttpResponseParser responseParser = httpTracing.clientResponseParser();\n+        if (requestParser != HttpRequestParser.DEFAULT && responseParser != HttpResponseParser.DEFAULT) {\n+            return delegate -> new BraveClient(delegate, httpTracing);\n+        }\n+\n+        // Override the brave default parsers to Armeria default parsers.", "originalCommit": "1467e5d87208469255ea37113f3d822a68e51887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495519215", "bodyText": "here is where we are playing games to undo the change. having a consistent policy across all libraries is actually a goal of abstractions.\nsetting the span name to match the service name is very confusing, especially as a default. The motivation behind this could also drift as UI does.. for example, if this is done to effect a change in the UI it would have been better to request that change instead.\nIn general I think this change should be reverted as span name != service name and conflating them is very confusing. Please let me know if I somehow missed something thought. cc @anuraaga", "author": "codefromthecrypt", "createdAt": "2020-09-27T02:44:52Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -144,6 +146,20 @@ public void httpStatusCodeSettable_onUncaughtException_async() {\n             \"Can't currently control the HTTP status code on uncaught exception. #2656\");\n     }\n \n+    @Test\n+    @Override\n+    public void httpRoute() throws IOException {\n+        httpTracing = httpTracing.toBuilder().serverResponseParser(HttpResponseParser.DEFAULT::parse).build();", "originalCommit": "1467e5d87208469255ea37113f3d822a68e51887", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Njc2Mw==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495656763", "bodyText": "@adriancole Sorry for not telling you about this change. \ud83d\ude05\nI wanted to fill the gap between creating the decorator with Tracing and HttpTracing.\nAs you know, if the decorator is created using Tracing the span name is set as the service name.\nAnd if you think we cannot set the service name as span name, I think we should also change the behavior in ArmeriaHttp(Client|Server)Parser. Any thoughts on this?", "author": "minwoox", "createdAt": "2020-09-28T02:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1OTc5Nw==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495659797", "bodyText": "I'm not offended, just could have helped reduce confusion. The ArmeriaHttp(Client|Server)Parser I thought of as \"legacy\" parsers for when people hadn't centralized brave config. If they are for longer term, yeah I would suggest re-thinking the default span name. Also, understanding what if any motivation there was for using service name as span name in case there's a UX issue we can help with", "author": "codefromthecrypt", "createdAt": "2020-09-28T02:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2NDAzNA==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495664034", "bodyText": "I'm not offended, just could have helped reduce confusion.\n\nOh, don't worry about it. I really appreciate your opinion. \ud83d\ude04\nSo the default span name is the HTTP method when HttpRequestParser.Default() is used. Is that right?", "author": "minwoox", "createdAt": "2020-09-28T02:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2NTk5OQ==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495665999", "bodyText": "I think armeria often has access to the HTTP route information, so it should at least on servers be the full route\nhttps://github.com/openzipkin/brave/tree/master/instrumentation/http#span-data-policy", "author": "codefromthecrypt", "createdAt": "2020-09-28T02:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3Njc5MQ==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495676791", "bodyText": "So should we set it back to method path and add an additional tag for the service name? \ud83e\udd14 /cc @trustin", "author": "minwoox", "createdAt": "2020-09-28T03:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3ODg2MA==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495678860", "bodyText": "path is never good because it can create high cardinality names. it must be an http route really. and that's the default anyway", "author": "codefromthecrypt", "createdAt": "2020-09-28T04:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4MTIyOQ==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495681229", "bodyText": "Yeah, what I meant was route. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-09-28T04:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4MTcwNA==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495681704", "bodyText": "Service name is generally presented in the Endpoint information. Perhaps you want to override the Endpoint service name with the Armeria one if a user didn't specify it to Brave?", "author": "anuraaga", "createdAt": "2020-09-28T04:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4MzQ2NA==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495683464", "bodyText": "https://line-armeria.slack.com/archives/C1NGPBUH2/p1598171931036100\nThis is the related link where this PR came from.\nOne of our users wants to see the thrift service name from the UI.\nBecause we are setting the service name as the span name in ArmeriaHttp(Client|Server)Parser, the user could see it when he uses BraveService.newDecorator(Tracing tracing).\nBut he couldn't when using BraveService.newDecorator(HttpTracing httpTracing).", "author": "minwoox", "createdAt": "2020-09-28T04:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NjI1NA==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495686254", "bodyText": "Ah this reminds me of some conversations about it being a bit tricky instrumenting Armeria, which supports both HTTP and RPC depending on configuration. But I guess Armeria knows which one it is.\nI think it's time to introduce RpcTracing support and make sure Armeria's defaults are different for HTTP and RPC.\nhttps://github.com/openzipkin/brave/blob/master/instrumentation/rpc/src/main/java/brave/rpc/RpcTracing.java", "author": "anuraaga", "createdAt": "2020-09-28T04:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NjM3NA==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495686374", "bodyText": "Thrift users I guess should be using RpcTracing", "author": "anuraaga", "createdAt": "2020-09-28T04:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTUyNg==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495691526", "bodyText": "What about for gRPC users? Do they need to use the RpcTracing?\nI'm not sure if it's a good idea because we treat the Thrift and gRPC differently as we discussed here. \ud83e\udd14\n#2480", "author": "minwoox", "createdAt": "2020-09-28T05:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5NTY4Ng==", "url": "https://github.com/line/armeria/pull/3023#discussion_r495695686", "bodyText": "In terms of tracing, they should probably use RpcTracing as they are RPC and should have RPC tracing semantics - the trickiness in implementation I refer to indeed comes from gRPC being implemented as an HTTP service :P But I guess some special casing could work ok.", "author": "anuraaga", "createdAt": "2020-09-28T05:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4MTMyMA==", "url": "https://github.com/line/armeria/pull/3023#discussion_r497181320", "bodyText": "Some special casing\n\nFor example?", "author": "trustin", "createdAt": "2020-09-30T00:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxOTIxNQ=="}], "type": "inlineReview", "revised_code": null}]}