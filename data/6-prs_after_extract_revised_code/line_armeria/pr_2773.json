{"pr_number": 2773, "pr_title": "Allow injecting `null` into annotated service methods if annotated wi\u2026", "pr_createdAt": "2020-06-04T08:24:40Z", "pr_url": "https://github.com/line/armeria/pull/2773", "timeline": [{"oid": "0b1373f89805860a172951fcf44479b6035ad756", "url": "https://github.com/line/armeria/commit/0b1373f89805860a172951fcf44479b6035ad756", "message": "Allow injecting `null` into annotated service methods if annotated with `@Nullable`\n\nMotivation:\n\nCurrently, sending a request without all query parameters will fail with\na `400 Bad Request` error response. For example, sending a `GET /get`\nrequest will fail with a `400 Bad Request` response because the query\nparameter `foo` does not exist:\n\n    public class MyService {\n        @Get(\"/get\")\n        public String get(@Param String foo) {\n            return foo;\n        }\n    }\n\nTo make the parameter `foo` optional, a user has to annotate it with\n`@Default` annotation or change its type to `Optional<String>`.\n\nIt would be nice if we also support `@Nullable` annotation, so that a\nuser can tell that `null` (missing value) is allowed for injection.\n\n    public class MyService {\n        @Get(\"/get\")\n        public String get(@Param @Nullable String foo) {\n            //                   ^^^^^^^^^\n            return foo;\n        }\n    }\n\nModifications:\n\n- Allow injecting `null` if the parameter is annotated with `@Nullable`.\n- Update documentation\n\nResult:\n\n- A simple way to handle an optional parameter/header.\n- Closes #2766", "committedDate": "2020-06-04T08:17:31Z", "type": "commit"}, {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513", "url": "https://github.com/line/armeria/commit/e1f27aad706ed51f9e7b75f108c1ea159aafd513", "message": "Checkstyle", "committedDate": "2020-06-04T08:25:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MjM5OQ==", "url": "https://github.com/line/armeria/pull/2773#discussion_r435082399", "bodyText": "\ud83d\ude06", "author": "minwoox", "createdAt": "2020-06-04T08:30:06Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);", "originalCommit": "e1f27aad706ed51f9e7b75f108c1ea159aafd513", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5ODI2MQ==", "url": "https://github.com/line/armeria/pull/2773#discussion_r435098261", "bodyText": "Oops!", "author": "trustin", "createdAt": "2020-06-04T08:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MjM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "605e89239740369afcc869f63ae209ea06034850", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java b/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\nindex 26d754ca1..85a9fbc4a 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\n\n@@ -1055,7 +1055,6 @@ final class AnnotatedValueResolver {\n                     boolean isNonNull = true;\n                     for (Annotation a : annotatedElement.getAnnotations()) {\n                         final String annotationTypeName = a.annotationType().getName();\n-                        System.err.println(annotationTypeName);\n                         if (annotationTypeName.endsWith(\".Nullable\")) {\n                             isNonNull = false;\n                             break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NDg3Ng==", "url": "https://github.com/line/armeria/pull/2773#discussion_r435084876", "bodyText": "\ud83d\ude05", "author": "KarboniteKream", "createdAt": "2020-06-04T08:34:14Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);", "originalCommit": "e1f27aad706ed51f9e7b75f108c1ea159aafd513", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "605e89239740369afcc869f63ae209ea06034850", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java b/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\nindex 26d754ca1..85a9fbc4a 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\n\n@@ -1055,7 +1055,6 @@ final class AnnotatedValueResolver {\n                     boolean isNonNull = true;\n                     for (Annotation a : annotatedElement.getAnnotations()) {\n                         final String annotationTypeName = a.annotationType().getName();\n-                        System.err.println(annotationTypeName);\n                         if (annotationTypeName.endsWith(\".Nullable\")) {\n                             isNonNull = false;\n                             break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDc5NQ==", "url": "https://github.com/line/armeria/pull/2773#discussion_r435094795", "bodyText": "Could use Class.getSimpleName()?\n\"Nullable\".equals(a.annoatation.getSimpleName())", "author": "ikhoon", "createdAt": "2020-06-04T08:50:50Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);\n+                        if (annotationTypeName.endsWith(\".Nullable\")) {", "originalCommit": "e1f27aad706ed51f9e7b75f108c1ea159aafd513", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5OTM5NA==", "url": "https://github.com/line/armeria/pull/2773#discussion_r435099394", "bodyText": "getSimpleName() creates a new string, so I wanted to avoid unnecessary overhead.", "author": "trustin", "createdAt": "2020-06-04T08:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1NDk2Ng==", "url": "https://github.com/line/armeria/pull/2773#discussion_r435354966", "bodyText": "Good to know. \ud83d\ude47\u200d\u2642\ufe0f\nI investigated the related issues. The simpleName is cached since Java 11. But it looks still pretty expensive.\nhttps://stackoverflow.com/a/57630221/1736581\nhttps://bugs.openjdk.java.net/browse/JDK-8187123", "author": "ikhoon", "createdAt": "2020-06-04T15:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "605e89239740369afcc869f63ae209ea06034850", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java b/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\nindex 26d754ca1..85a9fbc4a 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java\n\n@@ -1055,7 +1055,6 @@ final class AnnotatedValueResolver {\n                     boolean isNonNull = true;\n                     for (Annotation a : annotatedElement.getAnnotations()) {\n                         final String annotationTypeName = a.annotationType().getName();\n-                        System.err.println(annotationTypeName);\n                         if (annotationTypeName.endsWith(\".Nullable\")) {\n                             isNonNull = false;\n                             break;\n"}}, {"oid": "605e89239740369afcc869f63ae209ea06034850", "url": "https://github.com/line/armeria/commit/605e89239740369afcc869f63ae209ea06034850", "message": "Address the comments", "committedDate": "2020-06-04T08:57:57Z", "type": "commit"}, {"oid": "605e89239740369afcc869f63ae209ea06034850", "url": "https://github.com/line/armeria/commit/605e89239740369afcc869f63ae209ea06034850", "message": "Address the comments", "committedDate": "2020-06-04T08:57:57Z", "type": "forcePushed"}, {"oid": "1a4b864bae0644462a095aa9ae56f4db2afbb99f", "url": "https://github.com/line/armeria/commit/1a4b864bae0644462a095aa9ae56f4db2afbb99f", "message": "Checkstyle", "committedDate": "2020-06-04T08:59:52Z", "type": "commit"}, {"oid": "74b8947666129a9797303f3ae06a24dfbfd4ceb6", "url": "https://github.com/line/armeria/commit/74b8947666129a9797303f3ae06a24dfbfd4ceb6", "message": "Fix a test failure", "committedDate": "2020-06-04T09:53:57Z", "type": "commit"}, {"oid": "2301835dd27ec8bf034ae3c2933d5b8dce8b65c3", "url": "https://github.com/line/armeria/commit/2301835dd27ec8bf034ae3c2933d5b8dce8b65c3", "message": "Fix grammar as suggested by @KarboniteKream / Insert line breaks to avoid horizontal scroll", "committedDate": "2020-06-04T12:03:20Z", "type": "commit"}, {"oid": "2599a95c491d06fdb959a42e2abd0e71b34355e0", "url": "https://github.com/line/armeria/commit/2599a95c491d06fdb959a42e2abd0e71b34355e0", "message": "More line breaks and more compact comments", "committedDate": "2020-06-04T12:10:51Z", "type": "commit"}]}