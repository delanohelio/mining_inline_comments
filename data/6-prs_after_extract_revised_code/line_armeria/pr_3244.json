{"pr_number": 3244, "pr_title": "Allow using Armeria without epoll or io_uring JARs", "pr_createdAt": "2020-12-26T07:44:37Z", "pr_url": "https://github.com/line/armeria/pull/3244", "timeline": [{"oid": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459", "url": "https://github.com/line/armeria/commit/e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459", "message": "Allow using Armeria without epoll or io_uring JARs\n\nMotivations:\n\nSome users prefer reducing their distribution size or solving build\nissues by excluding certain transitive dependencies. We could make\nArmeria run even if `netty-transport-native-epoll` and\n`netty-incubator-transport-native-io_uring` are missing in the class\npath.\n\nModifications:\n\n- Moved the logic that refers to epoll/io_uring classes to\n  `TransportTypeProvider` and used dynamic class loading.\n- Moved the references to `EpollChannelOption.EPOLL_MODE` to\n  `ChannelUtil` and used dynamic class loading.\n- Added the methods which were previously missing in `TransportType`:\n  - `socketChannelType()`\n  - `datagramChannelType()`\n  - `isAvailable()`\n  - `unavailabilityCause()`\n- Deprecated the methods that merely delegates to `TransportType` in\n  `EventLoopGroups`.\n- Removed the workaround for WSL, since the problem has been fixed in\n  WSL2.\n\nResult:\n\n- You can now run your Armeria application even if\n  `netty-transport-native-epoll` and\n  `netty-incubator-transport-native-io_uring` are not available in the\n  classpath, which is useful when you want to reduce the final\n  distribution size.\n- You can now check whether/why a certain transport type is unavailable\n  via `Transport.isAvailable()` and `unavailabilityCause()`.\n- `EventLoopGroups.*ChannelType()` methods have been deprecated in favor\n  of the methods with same name in `TransportType`.\n- You can now use the epoll transport on WSL2.", "committedDate": "2020-12-26T07:39:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NjIwMw==", "url": "https://github.com/line/armeria/pull/3244#discussion_r548956203", "bodyText": "Updated this because the previous assumptions didn't make sense.", "author": "trustin", "createdAt": "2020-12-26T07:49:37Z", "path": "core/src/test/java/com/linecorp/armeria/common/FlagsTest.java", "diffHunk": "@@ -48,8 +48,8 @@\n     @Test\n     void epollAvailableOnLinux() {\n         assumeThat(osName).startsWith(\"linux\");\n-        assumeThat(System.getenv(\"WSLENV\")).isNull();\n-        assumeThat(System.getProperty(\"com.linecorp.armeria.useEpoll\")).isEqualTo(\"false\");\n+        assumeThat(System.getProperty(\"com.linecorp.armeria.useEpoll\")).isNull();\n+        assumeThat(System.getProperty(\"com.linecorp.armeria.transportType\")).isNull();", "originalCommit": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NjIwNA==", "url": "https://github.com/line/armeria/pull/3244#discussion_r548956204", "bodyText": "Updated this because the previous assumptions didn't make sense.", "author": "trustin", "createdAt": "2020-12-26T07:49:42Z", "path": "core/src/test/java/com/linecorp/armeria/common/FlagsTest.java", "diffHunk": "@@ -63,7 +63,7 @@ void epollAvailableOnLinux() {\n     void openSslAvailable() {\n         assumeThat(osName.startsWith(\"linux\") || osName.startsWith(\"windows\") ||\n                    osName.startsWith(\"macosx\") || osName.startsWith(\"osx\")).isTrue();\n-        assumeThat(System.getProperty(\"com.linecorp.armeria.useOpenSsl\")).isEqualTo(\"false\");\n+        assumeThat(System.getProperty(\"com.linecorp.armeria.useOpenSsl\")).isNull();", "originalCommit": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "4275029243983ae31750da5577887c2924b2eb1f", "url": "https://github.com/line/armeria/commit/4275029243983ae31750da5577887c2924b2eb1f", "message": "Fix", "committedDate": "2020-12-26T07:53:09Z", "type": "commit"}, {"oid": "e98523f435d6cd6a6dc9125c93161e1a1e1c33cb", "url": "https://github.com/line/armeria/commit/e98523f435d6cd6a6dc9125c93161e1a1e1c33cb", "message": "Fix a build issue when tmp directory is not in the same filesystem", "committedDate": "2020-12-26T08:10:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MTIwMw==", "url": "https://github.com/line/armeria/pull/3244#discussion_r549251203", "bodyText": "Shouldn't we create TransportTypeProvider with the cause? \ud83e\udd14", "author": "minwoox", "createdAt": "2020-12-28T07:58:57Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/util/TransportTypeProvider.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.util;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.function.BiFunction;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.common.util.TransportType;\n+\n+import io.netty.channel.EventLoop;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoop;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+\n+/**\n+ * Provides the properties required by {@link TransportType} by loading /dev/epoll and io_uring transport\n+ * classes dynamically, so that Armeria does not have hard dependencies on them.\n+ * See: https://github.com/line/armeria/issues/3243\n+ */\n+public final class TransportTypeProvider {\n+\n+    public static final TransportTypeProvider NIO = new TransportTypeProvider(\n+            \"NIO\", NioServerSocketChannel.class, NioSocketChannel.class, NioDatagramChannel.class,\n+            NioEventLoopGroup.class, NioEventLoop.class, NioEventLoopGroup::new, null);\n+\n+    public static final TransportTypeProvider EPOLL = of(\n+            \"EPOLL\", \"io.netty.channel.epoll.Epoll\",\n+            \"io.netty.channel.epoll.EpollServerSocketChannel\",\n+            \"io.netty.channel.epoll.EpollSocketChannel\",\n+            \"io.netty.channel.epoll.EpollDatagramChannel\",\n+            \"io.netty.channel.epoll.EpollEventLoopGroup\",\n+            \"io.netty.channel.epoll.EpollEventLoop\");\n+\n+    public static final TransportTypeProvider IO_URING = of(\n+            \"IO_URING\", \"io.netty.incubator.channel.uring.IOUring\",\n+            \"io.netty.incubator.channel.uring.IOUringServerSocketChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringSocketChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringDatagramChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringEventLoopGroup\",\n+            \"io.netty.incubator.channel.uring.IOUringEventLoop\");\n+\n+    private static TransportTypeProvider of(\n+            String name, String entryPointTypeName,\n+            String serverSocketChannelTypeName, String socketChannelTypeName, String datagramChannelTypeName,\n+            String eventLoopGroupTypeName, String eventLoopTypeName) {\n+\n+        try {\n+            final Throwable unavailabilityCause = (Throwable)\n+                    findClass(entryPointTypeName)\n+                            .getMethod(\"unavailabilityCause\")\n+                            .invoke(null);\n+            if (unavailabilityCause != null) {\n+                throw unavailabilityCause;", "originalCommit": "e98523f435d6cd6a6dc9125c93161e1a1e1c33cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MzI5OQ==", "url": "https://github.com/line/armeria/pull/3244#discussion_r549253299", "bodyText": "We catch below \ud83d\ude09", "author": "trustin", "createdAt": "2020-12-28T08:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MTIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1NDE4Mw==", "url": "https://github.com/line/armeria/pull/3244#discussion_r549254183", "bodyText": "Oops. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-12-28T08:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MTIwMw=="}], "type": "inlineReview", "revised_code": null}]}