{"pr_number": 2721, "pr_title": "Regex based sanitizer implementation for logging client and service", "pr_createdAt": "2020-05-18T03:54:24Z", "pr_url": "https://github.com/line/armeria/pull/2721", "timeline": [{"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "url": "https://github.com/line/armeria/commit/4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "message": "Regex based sanitizer implementation", "committedDate": "2020-05-18T03:47:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyODMyMA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427128320", "bodyText": "I guess we don't really need this type. Could you remove this class and just call toString() in RegexBasedSanitizer?", "author": "trustin", "createdAt": "2020-05-19T08:38:20Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+import java.util.function.Function;\n+\n+/**\n+ * Base class.\n+ */\n+public class AbstractSanitizerBase implements Function<Object, Object> {", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDU5Mw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720593", "bodyText": "I removed it.", "author": "amitvc", "createdAt": "2020-05-20T03:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyODMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java b/core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java\ndeleted file mode 100644\nindex e6f9d9d67..000000000\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java\n+++ /dev/null\n\n@@ -1,28 +0,0 @@\n-/*\n- * Copyright 2017 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-package com.linecorp.armeria.common.logging;\n-import java.util.function.Function;\n-\n-/**\n- * Base class.\n- */\n-public class AbstractSanitizerBase implements Function<Object, Object> {\n-\n-    @Override\n-    public Object apply(Object o) {\n-        return o.toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTA4NA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427129084", "bodyText": "final\nFunction<Object, String> ?", "author": "trustin", "createdAt": "2020-05-19T08:39:32Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDU1Nw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720557", "bodyText": "Made adjustments.", "author": "amitvc", "createdAt": "2020-05-20T03:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 635d27fa5..15737da2c 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -15,7 +15,7 @@\n  */\n package com.linecorp.armeria.common.logging;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.function.Function;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTg2OA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427129868", "bodyText": "If List<Pattern> is the only parameter, how about removing this and adding RegexBasedSanitizer.of(Pattern...) and of(Iterable<Pattern>) ?", "author": "trustin", "createdAt": "2020-05-19T08:40:42Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public Object apply(Object input) {\n+        String rawData = (String)super.apply(input);\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Builder facilitates building regexsanitizer.\n+     */\n+    public static class RegexBasedSanitizerBuilder {", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDQ2Mg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720462", "bodyText": "Good point. done.", "author": "amitvc", "createdAt": "2020-05-20T03:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 635d27fa5..15737da2c 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -15,7 +15,7 @@\n  */\n package com.linecorp.armeria.common.logging;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.function.Function;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMDc0OQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427130749", "bodyText": "Sorry, but we use AssertJ for assertions. Could you convert to AssertJ? e.g.\nassertThat(ctx.logBuilder().toString()).contains(\"trustin\");\n...\nassertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");", "author": "trustin", "createdAt": "2020-05-19T08:42:06Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,59 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                              .pattern(\"trustin\")\n+                                                              .pattern(\"com\")\n+                                                              .build())\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDM5Nw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720397", "bodyText": "Done", "author": "amitvc", "createdAt": "2020-05-20T03:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMDc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java b/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\nindex feaa79911..3e1cb617d 100644\n--- a/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\n\n@@ -113,19 +113,18 @@ class LoggingClientTest {\n                 LoggingClient.builder()\n                              .requestLogLevel(LogLevel.INFO)\n                              .successfulResponseLogLevel(LogLevel.INFO)\n-                             .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n-                                                              .pattern(\"trustin\")\n-                                                              .pattern(\"com\")\n-                                                              .build())\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n                              .build(delegate);\n \n         // Pre sanitize step\n-        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n-        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n         defaultLoggerClient.execute(ctx, req);\n         // After the sanitize\n-        Assertions.assertFalse(ctx.logBuilder().toString().contains(\"trustin\"));\n-        Assertions.assertFalse(ctx.logBuilder().toString().contains(\"com\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTAwMg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427131002", "bodyText": "Ditto - AssertJ", "author": "trustin", "createdAt": "2020-05-19T08:42:30Z", "path": "core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java", "diffHunk": "@@ -349,6 +352,64 @@ void sanitizeExceptionIntoString() throws Exception {\n                             same(sanitizedResponseCause));\n     }\n \n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(req);\n+        ctx.logBuilder().endResponse(new Exception(\"not sanitized\"));\n+        final Logger logger = LoggingTestUtil.newMockLogger(ctx, capturedCause);\n+        when(logger.isInfoEnabled()).thenReturn(true);\n+        when(logger.isWarnEnabled()).thenReturn(true);\n+\n+        final LoggingService service =\n+                LoggingService.builder()\n+                              .logger(logger)\n+                              .requestLogLevel(LogLevel.INFO)\n+                              .successfulResponseLogLevel(LogLevel.INFO)\n+                              .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                               .pattern(\"trustin\")\n+                                                               .pattern(\"com\")\n+                                                               .build())\n+                              .newDecorator().apply(delegate);\n+\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDQyNA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720424", "bodyText": "Done", "author": "amitvc", "createdAt": "2020-05-20T03:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java b/core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java\nindex 85b1c0542..7769ce563 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java\n\n@@ -370,17 +371,16 @@ class LoggingServiceTest {\n                               .logger(logger)\n                               .requestLogLevel(LogLevel.INFO)\n                               .successfulResponseLogLevel(LogLevel.INFO)\n-                              .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n-                                                               .pattern(\"trustin\")\n-                                                               .pattern(\"com\")\n-                                                               .build())\n+                              .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                      Pattern.compile(\"trustin\"),\n+                                      Pattern.compile(\"com\")))\n                               .newDecorator().apply(delegate);\n \n-        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n-        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n         service.serve(ctx, ctx.request());\n-        Assertions.assertFalse(ctx.logBuilder().toString().contains(\"trustin\"));\n-        Assertions.assertFalse(ctx.logBuilder().toString().contains(\"com\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n     }\n \n     @Test\n"}}, {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "url": "https://github.com/line/armeria/commit/bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "message": "Removed AbstractSanitizerBase, fixed unit tests", "committedDate": "2020-05-20T03:25:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726879", "bodyText": "nit: please check not-null\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RegexBasedSanitizer of(Pattern...p) {\n          \n          \n            \n                public static RegexBasedSanitizer of(Pattern... patterns) {\n          \n          \n            \n                    requireNonNull(\"patterns\", patterns);", "author": "ikhoon", "createdAt": "2020-05-20T03:55:10Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzI3OQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727279", "bodyText": "Could you add an additaional factory method for Iterable<? extends Pattern> patterns)\npublic static RegexBasedSanitizer of(Iterable<? extends Pattern> patterns);", "author": "ikhoon", "createdAt": "2020-05-20T03:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTU2NQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729565", "bodyText": "Pattern is a final class, so Iterable<Pattern> would be enough.", "author": "trustin", "createdAt": "2020-05-20T04:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzg5Ng==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727896", "bodyText": "Could remove two lines.", "author": "ikhoon", "createdAt": "2020-05-20T03:59:28Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTM1OA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r428411358", "bodyText": "Done", "author": "amitvc", "createdAt": "2020-05-21T02:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTQyNw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));\n          \n          \n            \n                    assertThat(ctx.logBuilder().toString()).contains(\"333-490-4499\");", "author": "ikhoon", "createdAt": "2020-05-20T04:06:34Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // After the sanitize\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+    }\n+\n+    @Test\n+    void sanitizeRequestContent() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+        ctx.logBuilder().requestContent(\"Virginia 333-490-4499\", \"Virginia 333-490-4499\");\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestContentSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"\\\\d{3}[-\\\\.\\\\s]\\\\d{3}[-\\\\.\\\\s]\\\\d{4}\")))\n+                             .build(delegate);\n+\n+        // Before sanitize content\n+        assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java b/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\nindex 3e1cb617d..78ff0cccb 100644\n--- a/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\n\n@@ -119,12 +119,12 @@ class LoggingClientTest {\n                              .build(delegate);\n \n         // Pre sanitize step\n-        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n-        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        assertThat(ctx.logBuilder().toString()).contains(\"trustin\");\n+        assertThat(ctx.logBuilder().toString()).contains(\"test.com\");\n         defaultLoggerClient.execute(ctx, req);\n         // After the sanitize\n-        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n-        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+        assertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");\n+        assertThat(ctx.logBuilder().toString()).doesNotContain(\"com\");\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTc1OA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729758", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(!ctx.logBuilder().toString().contains(\"333-490-4499\"));\n          \n          \n            \n                    assertThat(ctx.logBuilder().toString()).doesNotContain(\"333-490-4499\");", "author": "ikhoon", "createdAt": "2020-05-20T04:07:53Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // After the sanitize\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+    }\n+\n+    @Test\n+    void sanitizeRequestContent() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+        ctx.logBuilder().requestContent(\"Virginia 333-490-4499\", \"Virginia 333-490-4499\");\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestContentSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"\\\\d{3}[-\\\\.\\\\s]\\\\d{3}[-\\\\.\\\\s]\\\\d{4}\")))\n+                             .build(delegate);\n+\n+        // Before sanitize content\n+        assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // Ensure sanitize the request content of the phone number 333-490-4499\n+        assertThat(!ctx.logBuilder().toString().contains(\"333-490-4499\"));", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java b/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\nindex 3e1cb617d..78ff0cccb 100644\n--- a/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\n\n@@ -119,12 +119,12 @@ class LoggingClientTest {\n                              .build(delegate);\n \n         // Pre sanitize step\n-        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n-        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        assertThat(ctx.logBuilder().toString()).contains(\"trustin\");\n+        assertThat(ctx.logBuilder().toString()).contains(\"test.com\");\n         defaultLoggerClient.execute(ctx, req);\n         // After the sanitize\n-        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n-        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+        assertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");\n+        assertThat(ctx.logBuilder().toString()).doesNotContain(\"com\");\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzODcwMg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427138702", "bodyText": "nit: 2020", "author": "minwoox", "createdAt": "2020-05-19T08:53:34Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 635d27fa5..15737da2c 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -15,7 +15,7 @@\n  */\n package com.linecorp.armeria.common.logging;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.function.Function;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjQ5MA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726490", "bodyText": "Pattern...p -> Pattern... patterns (need an empty space before p)", "author": "minwoox", "createdAt": "2020-05-20T03:53:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjYyOA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726628", "bodyText": "return new RegexBasedSanitizer(ImmutableList.copyOf(requireNonNull(patterns, \"patterns\")));", "author": "minwoox", "createdAt": "2020-05-20T03:54:02Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {\n+        return new RegexBasedSanitizer(Arrays.asList(p));", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjcxMA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726710", "bodyText": "Can remove @return because it doesn't say anything.", "author": "minwoox", "createdAt": "2020-05-20T03:54:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjkwMQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726901", "bodyText": "@param patterns the {@link Pattern}s", "author": "minwoox", "createdAt": "2020-05-20T03:55:16Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzIxMw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727213", "bodyText": "Can remove this of we can change to\nRegexBasedSanitizer(List<Pattern> patterns) {\n    this.patterns = patterns;", "author": "minwoox", "createdAt": "2020-05-20T03:56:37Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzczOQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727739", "bodyText": "Creates a new instance.", "author": "minwoox", "createdAt": "2020-05-20T03:58:45Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729180", "bodyText": "Function<Object, String> -> Function<HttpHeaders, String>?", "author": "minwoox", "createdAt": "2020-05-20T04:05:24Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNTQ0Mg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r428405442", "bodyText": "I think we want to be able to use the sanitizers on either httpheader or request content.", "author": "amitvc", "createdAt": "2020-05-21T02:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTc1Mg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r428411752", "bodyText": "Ah, right. Sorry about the comment. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-05-21T02:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 15737da2c..1a8d966c2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMDc1NQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427730755", "bodyText": "assertThat(ctx.logBuilder().toString()).contains(\"trustin\");", "author": "minwoox", "createdAt": "2020-05-20T04:12:21Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java b/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\nindex 3e1cb617d..78ff0cccb 100644\n--- a/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java\n\n@@ -119,12 +119,12 @@ class LoggingClientTest {\n                              .build(delegate);\n \n         // Pre sanitize step\n-        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n-        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        assertThat(ctx.logBuilder().toString()).contains(\"trustin\");\n+        assertThat(ctx.logBuilder().toString()).contains(\"test.com\");\n         defaultLoggerClient.execute(ctx, req);\n         // After the sanitize\n-        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n-        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+        assertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");\n+        assertThat(ctx.logBuilder().toString()).doesNotContain(\"com\");\n     }\n \n     @Test\n"}}, {"oid": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "url": "https://github.com/line/armeria/commit/a141b50ca52cf0f28296c7b0414c48996c889b0b", "message": "Fix unit tests and address other code review comments", "committedDate": "2020-05-21T02:28:04Z", "type": "commit"}, {"oid": "10759e3f73a93aff4234902b610756d49a50e3a9", "url": "https://github.com/line/armeria/commit/10759e3f73a93aff4234902b610756d49a50e3a9", "message": "Some minor clean-up", "committedDate": "2020-05-21T04:47:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjEwMw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r429016103", "bodyText": "replaceAll calls find internally so I think we can remove this, or it has to run the regex from the beginning again.", "author": "anuraaga", "createdAt": "2020-05-22T02:50:18Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    /**\n+     * Returns a new instance created from the specified {@link Pattern}s.\n+     */\n+    public static RegexBasedSanitizer of(Pattern... patterns) {\n+        requireNonNull(patterns, \"patterns\");\n+        return new RegexBasedSanitizer(ImmutableList.copyOf(patterns));\n+    }\n+\n+    /**\n+     * Returns a new instance created from the specified {@link Pattern}s.\n+     */\n+    public static RegexBasedSanitizer of(Iterable<Pattern> patterns) {\n+        requireNonNull(patterns, \"patterns\");\n+        return new RegexBasedSanitizer(ImmutableList.copyOf(patterns));\n+    }\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Creates a new instance.\n+     * @param patterns {@link Pattern}.\n+     */\n+    RegexBasedSanitizer(List<Pattern> patterns) {\n+        this.patterns = patterns;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String apply(@Nullable Object input) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {", "originalCommit": "10759e3f73a93aff4234902b610756d49a50e3a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28cec3cfaccd741d6159ccd9521c41edf31fbd21", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\nindex 5d36d317b..64bc12efe 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java\n\n@@ -22,8 +22,6 @@ import java.util.function.Function;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-import javax.annotation.Nullable;\n-\n import com.google.common.collect.ImmutableList;\n \n /**\n"}}, {"oid": "28cec3cfaccd741d6159ccd9521c41edf31fbd21", "url": "https://github.com/line/armeria/commit/28cec3cfaccd741d6159ccd9521c41edf31fbd21", "message": "Removed unnecessary check", "committedDate": "2020-05-22T12:28:46Z", "type": "commit"}, {"oid": "a89bbce5ce45e374748dccafa750c051c172baa2", "url": "https://github.com/line/armeria/commit/a89bbce5ce45e374748dccafa750c051c172baa2", "message": "Merge branch 'header_content_sanitizer' of https://github.com/amitvc/armeria into header_content_sanitizer", "committedDate": "2020-05-22T12:28:58Z", "type": "commit"}]}