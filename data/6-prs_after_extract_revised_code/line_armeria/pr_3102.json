{"pr_number": 3102, "pr_title": "Do not launch two servers if both `boot2-autoconfigure` and ...", "pr_createdAt": "2020-10-09T16:07:41Z", "pr_url": "https://github.com/line/armeria/pull/3102", "timeline": [{"oid": "1b38f0e463b102a111f7721b700b9fab530d324b", "url": "https://github.com/line/armeria/commit/1b38f0e463b102a111f7721b700b9fab530d324b", "message": "Add `NonReactiveWebApplicationCondition` in `ArmeriaAutoConfiguration` / Fix test", "committedDate": "2020-10-09T15:54:14Z", "type": "commit"}, {"oid": "d423b54e7ba0c10a0d04b1f18049af895c9d3f2b", "url": "https://github.com/line/armeria/commit/d423b54e7ba0c10a0d04b1f18049af895c9d3f2b", "message": "Separate AutoConfiguration class for `boot1-autoconfigure`", "committedDate": "2020-10-10T05:17:51Z", "type": "commit"}, {"oid": "e24a40eb524314932a0df8b0f51536130ac2b66f", "url": "https://github.com/line/armeria/commit/e24a40eb524314932a0df8b0f51536130ac2b66f", "message": "Remove test dependency", "committedDate": "2020-10-13T14:00:11Z", "type": "commit"}, {"oid": "1ec01426711bf753387de5a2b8898862ed504b36", "url": "https://github.com/line/armeria/commit/1ec01426711bf753387de5a2b8898862ed504b36", "message": "Add modules (`it/spring/boot2-mixed`, `it/spring/boot2-mixed-tomcat9`)", "committedDate": "2020-10-13T14:02:42Z", "type": "commit"}, {"oid": "c295214106386b65e809313a687cd36d996cc116", "url": "https://github.com/line/armeria/commit/c295214106386b65e809313a687cd36d996cc116", "message": "Fix copyright", "committedDate": "2020-10-13T14:13:44Z", "type": "commit"}, {"oid": "619fef3419e40e83476ccc4c2b710d5b7603cca7", "url": "https://github.com/line/armeria/commit/619fef3419e40e83476ccc4c2b710d5b7603cca7", "message": "Fix test", "committedDate": "2020-10-13T14:29:35Z", "type": "commit"}, {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271", "url": "https://github.com/line/armeria/commit/f1e0eea3be9fe631e5f5da21e144e606dae10271", "message": "Add `application.yml`", "committedDate": "2020-10-13T14:59:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzOTkzMQ==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504539931", "bodyText": "nit: 2020", "author": "minwoox", "createdAt": "2020-10-14T09:37:00Z", "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "originalCommit": "f1e0eea3be9fe631e5f5da21e144e606dae10271", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1ODkyMw==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504658923", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-10-14T13:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzOTkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ddddec3027a1cc5c1849d239360cb02287f8abd", "chunk": "diff --git a/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java b/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java\nindex 32921854d7..a765993aab 100644\n--- a/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java\n+++ b/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504646647", "bodyText": "Question: Could you tell me how this works please? \ud83d\ude05", "author": "minwoox", "createdAt": "2020-10-14T12:46:03Z", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "diffHunk": "@@ -16,132 +16,35 @@\n \n package com.linecorp.armeria.spring;\n \n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationNetUtil.configurePorts;\n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings;\n-\n-import java.time.Duration;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import javax.annotation.Nullable;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n \n-import com.google.common.base.Strings;\n-\n-import com.linecorp.armeria.common.SessionProtocol;\n-import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;\n import com.linecorp.armeria.server.Server;\n-import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.server.ServerPort;\n-import com.linecorp.armeria.server.docs.DocService;\n-import com.linecorp.armeria.server.docs.DocServiceBuilder;\n-import com.linecorp.armeria.server.healthcheck.HealthChecker;\n-import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n-\n-import io.micrometer.core.instrument.MeterRegistry;\n-import io.micrometer.core.instrument.Metrics;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfiguration.NonReactiveWebApplicationCondition;\n \n /**\n  * Spring Boot {@link Configuration} that provides Armeria integration.\n  */\n @Configuration\n+@Conditional(NonReactiveWebApplicationCondition.class)\n @EnableConfigurationProperties(ArmeriaSettings.class)\n @ConditionalOnMissingBean(Server.class)\n-public class ArmeriaAutoConfiguration {\n-    private static final Logger logger = LoggerFactory.getLogger(ArmeriaAutoConfiguration.class);\n-\n-    private static final Port DEFAULT_PORT = new Port().setPort(8080)\n-                                                       .setProtocol(SessionProtocol.HTTP);\n-\n-    private static final String GRACEFUL_SHUTDOWN = \"graceful\";\n+public class ArmeriaAutoConfiguration extends AbstractArmeriaAutoConfiguration {\n \n     /**\n-     * Create a started {@link Server} bean.\n+     * Condition for non-reactive web application type.\n      */\n-    @Bean\n-    @Nullable\n-    public Server armeriaServer(\n-            ArmeriaSettings armeriaSettings,\n-            Optional<MeterRegistry> meterRegistry,\n-            Optional<List<HealthChecker>> healthCheckers,\n-            Optional<MeterIdPrefixFunction> meterIdPrefixFunction,\n-            Optional<List<ArmeriaServerConfigurator>> armeriaServerConfigurators,\n-            Optional<List<Consumer<ServerBuilder>>> armeriaServerBuilderConsumers,\n-            Optional<List<DocServiceConfigurator>> docServiceConfigurators) {\n-\n-        if (!armeriaServerConfigurators.isPresent() &&\n-            !armeriaServerBuilderConsumers.isPresent()) {\n-            // No services to register, no need to start up armeria server.\n-            return null;\n-        }\n-\n-        final ServerBuilder serverBuilder = Server.builder();\n-\n-        final List<Port> ports = armeriaSettings.getPorts();\n-        if (ports.isEmpty()) {\n-            serverBuilder.port(new ServerPort(DEFAULT_PORT.getPort(), DEFAULT_PORT.getProtocols()));\n-        } else {\n-            configurePorts(serverBuilder, ports);\n-        }\n-\n-        final DocServiceBuilder docServiceBuilder = DocService.builder();\n-        docServiceConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(docServiceBuilder)));\n-\n-        final String docsPath = armeriaSettings.getDocsPath();\n-        configureServerWithArmeriaSettings(serverBuilder, armeriaSettings,\n-                                           meterRegistry.orElse(Metrics.globalRegistry),\n-                                           healthCheckers.orElseGet(Collections::emptyList),\n-                                           meterIdPrefixFunction.orElse(\n-                                                   MeterIdPrefixFunction.ofDefault(\"armeria.server\")));\n+    static class NonReactiveWebApplicationCondition extends NoneNestedConditions {\n \n-        armeriaServerConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(serverBuilder)));\n-\n-        armeriaServerBuilderConsumers.ifPresent(\n-                consumers -> consumers.forEach(\n-                        consumer -> consumer.accept(serverBuilder)));\n-\n-        if (!Strings.isNullOrEmpty(docsPath)) {\n-            serverBuilder.serviceUnder(docsPath, docServiceBuilder.build());\n+        NonReactiveWebApplicationCondition() {\n+            super(ConfigurationPhase.PARSE_CONFIGURATION);\n         }\n \n-        final Server server = serverBuilder.build();\n-\n-        server.start().handle((result, t) -> {\n-            if (t != null) {\n-                throw new IllegalStateException(\"Armeria server failed to start\", t);\n-            }\n-            return result;\n-        }).join();\n-        logger.info(\"Armeria server started at ports: {}\", server.activePorts());\n-        return server;\n-    }\n-\n-    /**\n-     * A user can configure a {@link Server} by providing an {@link ArmeriaServerConfigurator} bean.\n-     */\n-    @Bean\n-    @ConditionalOnProperty(\"server.shutdown\")\n-    public ArmeriaServerConfigurator gracefulShutdownServerConfigurator(\n-            @Value(\"${server.shutdown}\") String shutdown,\n-            @Value(\"${spring.lifecycle.timeout-per-shutdown-phase:30s}\") Duration duration) {\n-        if (GRACEFUL_SHUTDOWN.equalsIgnoreCase(shutdown)) {\n-            return sb -> sb.gracefulShutdownTimeout(duration, duration);\n-        } else {\n-            return sb -> {};\n-        }\n+        @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+        static class ReactiveWebApplication {}", "originalCommit": "f1e0eea3be9fe631e5f5da21e144e606dae10271", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODEyNA==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504668124", "bodyText": "Looking at @ConditionalOnWebApplication alone, when the application is launched, it determines whether to create a bean according to the web application type. This means that if users has webflux as a dependency and there is no explicit configuration, the web application type is reactive.\nIn this case, it is a negative condition because I used NoneNestedConditions. So when the web application type is reactive, Spring don't make ArmeriaAutoConfiguration a bean.", "author": "heowc", "createdAt": "2020-10-14T13:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3MDM5MA==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504670390", "bodyText": "These settings can also be seen in spring boot code", "author": "heowc", "createdAt": "2020-10-14T13:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwMTgxMw==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504701813", "bodyText": "Thanks for the education. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-10-14T14:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd", "url": "https://github.com/line/armeria/commit/1ddddec3027a1cc5c1849d239360cb02287f8abd", "message": "Fix copyright", "committedDate": "2020-10-14T13:00:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MjI2NQ==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504792265", "bodyText": "nit: Could use serviceUnder(\"/tomcat/api/rest/v1\", ...)?", "author": "ikhoon", "createdAt": "2020-10-14T15:56:42Z", "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",", "originalCommit": "1ddddec3027a1cc5c1849d239360cb02287f8abd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNzQzNA==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504817434", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-10-14T16:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MjI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9d29e84ac603cf2603305920af4ec0bf753e9cf", "chunk": "diff --git a/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java b/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\nindex 30bf052e1f..b07d4939f6 100644\n--- a/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\n+++ b/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\n\n@@ -46,10 +46,10 @@ public class SpringTomcatApplication {\n         if (webServer instanceof TomcatWebServer) {\n             final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n \n-            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",\n+            return serverBuilder -> serverBuilder.serviceUnder(\"/tomcat/api/rest/v1\",\n                                                           TomcatService.of(tomcat));\n         }\n-        return serverBuilder -> { };\n+        return serverBuilder -> {};\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5Mjg1MQ==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504792851", "bodyText": "nit: Remove white space?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return serverBuilder -> { };\n          \n          \n            \n                    return serverBuilder -> {};", "author": "ikhoon", "createdAt": "2020-10-14T15:57:28Z", "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",\n+                                                          TomcatService.of(tomcat));\n+        }\n+        return serverBuilder -> { };", "originalCommit": "1ddddec3027a1cc5c1849d239360cb02287f8abd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNzUyMw==", "url": "https://github.com/line/armeria/pull/3102#discussion_r504817523", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-10-14T16:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5Mjg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9d29e84ac603cf2603305920af4ec0bf753e9cf", "chunk": "diff --git a/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java b/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\nindex 30bf052e1f..b07d4939f6 100644\n--- a/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\n+++ b/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\n\n@@ -46,10 +46,10 @@ public class SpringTomcatApplication {\n         if (webServer instanceof TomcatWebServer) {\n             final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n \n-            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",\n+            return serverBuilder -> serverBuilder.serviceUnder(\"/tomcat/api/rest/v1\",\n                                                           TomcatService.of(tomcat));\n         }\n-        return serverBuilder -> { };\n+        return serverBuilder -> {};\n     }\n \n     /**\n"}}, {"oid": "e9d29e84ac603cf2603305920af4ec0bf753e9cf", "url": "https://github.com/line/armeria/commit/e9d29e84ac603cf2603305920af4ec0bf753e9cf", "message": "Address comments by @ikhoon", "committedDate": "2020-10-14T16:33:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1MzE3NQ==", "url": "https://github.com/line/armeria/pull/3102#discussion_r506053175", "bodyText": "nit: Intention? \ud83d\ude06", "author": "ikhoon", "createdAt": "2020-10-16T05:02:44Z", "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.serviceUnder(\"/tomcat/api/rest/v1\",\n+                                                          TomcatService.of(tomcat));", "originalCommit": "e9d29e84ac603cf2603305920af4ec0bf753e9cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1ODQ0MA==", "url": "https://github.com/line/armeria/pull/3102#discussion_r506058440", "bodyText": "Oops... Fixed :)", "author": "heowc", "createdAt": "2020-10-16T05:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1MzE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9242a73208195ab802391d00ce5f0a896b055718", "chunk": "diff --git a/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java b/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\nindex b07d4939f6..3ee5fe4da6 100644\n--- a/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\n+++ b/it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java\n\n@@ -47,7 +47,7 @@ public class SpringTomcatApplication {\n             final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n \n             return serverBuilder -> serverBuilder.serviceUnder(\"/tomcat/api/rest/v1\",\n-                                                          TomcatService.of(tomcat));\n+                                                               TomcatService.of(tomcat));\n         }\n         return serverBuilder -> {};\n     }\n"}}, {"oid": "9242a73208195ab802391d00ce5f0a896b055718", "url": "https://github.com/line/armeria/commit/9242a73208195ab802391d00ce5f0a896b055718", "message": "Fix indent", "committedDate": "2020-10-16T05:22:31Z", "type": "commit"}]}