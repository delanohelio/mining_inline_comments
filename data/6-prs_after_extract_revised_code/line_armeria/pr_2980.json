{"pr_number": 2980, "pr_title": "WebFlux app can't start if management.server.port is customized", "pr_createdAt": "2020-08-08T19:29:17Z", "pr_url": "https://github.com/line/armeria/pull/2980", "timeline": [{"oid": "03aadda7e0d465a6b4dce1508d19730dd9cf4d1d", "url": "https://github.com/line/armeria/commit/03aadda7e0d465a6b4dce1508d19730dd9cf4d1d", "message": "WebFlux app can't start if management.server.port is customized", "committedDate": "2020-08-08T19:26:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MjkyMQ==", "url": "https://github.com/line/armeria/pull/2980#discussion_r467662921", "bodyText": "How about calling ensureValidPort(managementPort) so that an exception is raised if it's under 0?", "author": "minwoox", "createdAt": "2020-08-10T02:24:17Z", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -207,7 +220,39 @@ public WebServer getWebServer(HttpHandler httpHandler) {\n                 firstNonNull(findBean(DataBufferFactoryWrapper.class), DataBufferFactoryWrapper.DEFAULT);\n \n         final Server server = configureService(sb, httpHandler, factoryWrapper, getServerHeader()).build();\n-        return new ArmeriaWebServer(server, protocol, address, port, beanFactory);\n+        armeriaWebServer = new ArmeriaWebServer(server, protocol, address, port, beanFactory);\n+        return armeriaWebServer;\n+    }\n+\n+    private boolean needsToReuseWebServer(int port) {\n+        final boolean samePort = isManagementPortEqualsToServerPort();\n+        Server existingServer = null;\n+        try {\n+            existingServer = beanFactory.getBean(Server.class);\n+        } catch (NoSuchBeanDefinitionException ignore) {\n+        }\n+\n+        if (samePort || existingServer == null) {\n+            return false;\n+        } else {\n+            final Map<InetSocketAddress, ServerPort> activePorts = existingServer.activePorts();\n+\n+            // reuse the existing WebServer if it has the same port\n+            return activePorts.values().stream()\n+                              .anyMatch(serverPort -> serverPort.localAddress().getPort() == port);\n+        }\n+    }\n+\n+    private boolean isManagementPortEqualsToServerPort() {\n+        final Integer managementPort = environment.getProperty(\"management.server.port\", Integer.class);\n+        if (managementPort != null && managementPort < 0) {", "originalCommit": "03aadda7e0d465a6b4dce1508d19730dd9cf4d1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MzEyNA==", "url": "https://github.com/line/armeria/pull/2980#discussion_r467663124", "bodyText": "Also, how about returning early if managementPort is null?", "author": "minwoox", "createdAt": "2020-08-10T02:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MjkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0633ae13553c96f479824242fe56467ad2c8e623", "chunk": "diff --git a/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java b/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\nindex 3b0b96cc8..225f07895 100644\n--- a/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n+++ b/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n\n@@ -243,16 +244,17 @@ public class ArmeriaReactiveWebServerFactory extends AbstractReactiveWebServerFa\n         }\n     }\n \n-    private boolean isManagementPortEqualsToServerPort() {\n+    @VisibleForTesting\n+    boolean isManagementPortEqualsToServerPort() {\n         final Integer managementPort = environment.getProperty(\"management.server.port\", Integer.class);\n-        if (managementPort != null && managementPort < 0) {\n+        if (managementPort == null) {\n             // The management port is disable\n             return true;\n         }\n+        final Integer ensuredManagementPort = ensureValidPort(managementPort);\n         final Integer serverPort = environment.getProperty(\"server.port\", Integer.class);\n-        return managementPort == null ||\n-               (serverPort == null && managementPort.equals(8080)) ||\n-               (managementPort != 0 && managementPort.equals(serverPort));\n+        return (serverPort == null && ensuredManagementPort.equals(8080)) ||\n+               (ensuredManagementPort != 0 && ensuredManagementPort.equals(serverPort));\n     }\n \n     private static ServerBuilder configureService(ServerBuilder sb, HttpHandler httpHandler,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NDg1OQ==", "url": "https://github.com/line/armeria/pull/2980#discussion_r467664859", "bodyText": "If armeriaWebServer is not null and the port is different, it seems like the previously configured settings to armeriaWebServer are gone. Isn't it right?", "author": "minwoox", "createdAt": "2020-08-10T02:35:43Z", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -131,6 +140,11 @@ public ArmeriaReactiveWebServerFactory(ConfigurableListableBeanFactory beanFacto\n \n     @Override\n     public WebServer getWebServer(HttpHandler httpHandler) {\n+        final int port = ensureValidPort(getPort());\n+        if (armeriaWebServer != null && needsToReuseWebServer(port)) {", "originalCommit": "03aadda7e0d465a6b4dce1508d19730dd9cf4d1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzcxMg==", "url": "https://github.com/line/armeria/pull/2980#discussion_r468107712", "bodyText": "The previously configured settings remains.\nI'll add some tests to check this.", "author": "matsumana", "createdAt": "2020-08-10T18:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NDg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "206e009150c7fac1a11fe4639756898077e076ae", "chunk": "diff --git a/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java b/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\nindex 3b0b96cc8..aa05b13d0 100644\n--- a/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n+++ b/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n\n@@ -140,9 +136,9 @@ public class ArmeriaReactiveWebServerFactory extends AbstractReactiveWebServerFa\n \n     @Override\n     public WebServer getWebServer(HttpHandler httpHandler) {\n-        final int port = ensureValidPort(getPort());\n-        if (armeriaWebServer != null && needsToReuseWebServer(port)) {\n-            return armeriaWebServer;\n+        final ArmeriaWebServer armeriaWebServerBean = findBean(ArmeriaWebServer.class);\n+        if (armeriaWebServerBean != null) {\n+            return armeriaWebServerBean;\n         }\n \n         final ServerBuilder sb = Server.builder();\n"}}, {"oid": "0633ae13553c96f479824242fe56467ad2c8e623", "url": "https://github.com/line/armeria/commit/0633ae13553c96f479824242fe56467ad2c8e623", "message": "Improve management port check", "committedDate": "2020-08-10T16:41:26Z", "type": "commit"}, {"oid": "206e009150c7fac1a11fe4639756898077e076ae", "url": "https://github.com/line/armeria/commit/206e009150c7fac1a11fe4639756898077e076ae", "message": "Improve ArmeriaWebServer caching logic", "committedDate": "2020-08-10T18:40:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQxOTM2OA==", "url": "https://github.com/line/armeria/pull/2980#discussion_r468419368", "bodyText": "How about leaving a comment?\nThe management port is set to the Server in ArmeriaSpringActuatorAutoConfiguration.", "author": "minwoox", "createdAt": "2020-08-11T08:39:01Z", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -207,7 +217,27 @@ public WebServer getWebServer(HttpHandler httpHandler) {\n                 firstNonNull(findBean(DataBufferFactoryWrapper.class), DataBufferFactoryWrapper.DEFAULT);\n \n         final Server server = configureService(sb, httpHandler, factoryWrapper, getServerHeader()).build();\n-        return new ArmeriaWebServer(server, protocol, address, port, beanFactory);\n+        final ArmeriaWebServer armeriaWebServer = new ArmeriaWebServer(server, protocol, address, port,\n+                                                                       beanFactory);\n+        if (!isManagementPortEqualsToServerPort()) {\n+            // Since this method will be called twice, need to reuse ArmeriaWebServer", "originalCommit": "206e009150c7fac1a11fe4639756898077e076ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5c5a7071adf014b05d10d6cbd14304588fd2cc4", "chunk": "diff --git a/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java b/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\nindex aa05b13d0..99b376187 100644\n--- a/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n+++ b/spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java\n\n@@ -220,7 +220,8 @@ public class ArmeriaReactiveWebServerFactory extends AbstractReactiveWebServerFa\n         final ArmeriaWebServer armeriaWebServer = new ArmeriaWebServer(server, protocol, address, port,\n                                                                        beanFactory);\n         if (!isManagementPortEqualsToServerPort()) {\n-            // Since this method will be called twice, need to reuse ArmeriaWebServer\n+            // The management port is set to the Server in ArmeriaSpringActuatorAutoConfiguration.\n+            // Since this method will be called twice, need to reuse ArmeriaWebServer.\n             beanFactory.registerSingleton(\"armeriaWebServer\", armeriaWebServer);\n         }\n \n"}}, {"oid": "b5c5a7071adf014b05d10d6cbd14304588fd2cc4", "url": "https://github.com/line/armeria/commit/b5c5a7071adf014b05d10d6cbd14304588fd2cc4", "message": "Add the comment about the management port and ArmeriaSpringActuatorAutoConfiguration", "committedDate": "2020-08-11T13:01:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxNDcxOA==", "url": "https://github.com/line/armeria/pull/2980#discussion_r469014718", "bodyText": "Could use assertThatThrownBy(...)", "author": "ikhoon", "createdAt": "2020-08-12T05:34:14Z", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java", "diffHunk": "@@ -388,4 +403,122 @@ void testDocServiceConfigurator_withoutDocServiceConfigurator() {\n             }\n         });\n     }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"8080, 8080, true\",\n+            \"8080, , true\",\n+            \", 8080, true\",\n+            \", 8081, true\",\n+            \", , true\",\n+            \"18080, 8080, false\",\n+            \"18080, , false\",\n+            \"0, 8080, false\",\n+            \"1, 8080, false\",\n+            \"65535, 8080, false\",\n+    })\n+    void isManagementPortEqualsToServerPort(String managementPort, String serverPort,\n+                                            boolean expected) {\n+        final MockEnvironment environment = new MockEnvironment();\n+        if (!Strings.isNullOrEmpty(managementPort)) {\n+            environment.setProperty(\"management.server.port\", managementPort);\n+        }\n+        if (!Strings.isNullOrEmpty(serverPort)) {\n+            environment.setProperty(\"server.port\", serverPort);\n+        }\n+        final ArmeriaReactiveWebServerFactory factory = new ArmeriaReactiveWebServerFactory(beanFactory,\n+                                                                                            environment);\n+        assertThat(factory.isManagementPortEqualsToServerPort()).isEqualTo(expected);\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"-1\",\n+            \"65536\",\n+    })\n+    void isManagementPortEqualsToServerPortThrows(String managementPort) {\n+        assertThrows(IllegalArgumentException.class, () -> {", "originalCommit": "b5c5a7071adf014b05d10d6cbd14304588fd2cc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7317c84f44e7d155607f80d6545a25f498af78", "chunk": "diff --git a/spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java b/spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java\nindex 5c34ccd78..47bc216bf 100644\n--- a/spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java\n+++ b/spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java\n\n@@ -437,11 +436,11 @@ class ArmeriaReactiveWebServerFactoryTest {\n             \"65536\",\n     })\n     void isManagementPortEqualsToServerPortThrows(String managementPort) {\n-        assertThrows(IllegalArgumentException.class, () -> {\n+        assertThatThrownBy(() -> {\n             final ArmeriaReactiveWebServerFactory factory = new ArmeriaReactiveWebServerFactory(\n                     beanFactory, new MockEnvironment().withProperty(\"management.server.port\", managementPort));\n             factory.isManagementPortEqualsToServerPort();\n-        });\n+        }).isInstanceOf(IllegalArgumentException.class);\n     }\n \n     @SpringBootApplication\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxNDk5MQ==", "url": "https://github.com/line/armeria/pull/2980#discussion_r469014991", "bodyText": "Just throws the exception?", "author": "ikhoon", "createdAt": "2020-08-12T05:35:12Z", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java", "diffHunk": "@@ -388,4 +403,122 @@ void testDocServiceConfigurator_withoutDocServiceConfigurator() {\n             }\n         });\n     }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"8080, 8080, true\",\n+            \"8080, , true\",\n+            \", 8080, true\",\n+            \", 8081, true\",\n+            \", , true\",\n+            \"18080, 8080, false\",\n+            \"18080, , false\",\n+            \"0, 8080, false\",\n+            \"1, 8080, false\",\n+            \"65535, 8080, false\",\n+    })\n+    void isManagementPortEqualsToServerPort(String managementPort, String serverPort,\n+                                            boolean expected) {\n+        final MockEnvironment environment = new MockEnvironment();\n+        if (!Strings.isNullOrEmpty(managementPort)) {\n+            environment.setProperty(\"management.server.port\", managementPort);\n+        }\n+        if (!Strings.isNullOrEmpty(serverPort)) {\n+            environment.setProperty(\"server.port\", serverPort);\n+        }\n+        final ArmeriaReactiveWebServerFactory factory = new ArmeriaReactiveWebServerFactory(beanFactory,\n+                                                                                            environment);\n+        assertThat(factory.isManagementPortEqualsToServerPort()).isEqualTo(expected);\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"-1\",\n+            \"65536\",\n+    })\n+    void isManagementPortEqualsToServerPortThrows(String managementPort) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ArmeriaReactiveWebServerFactory factory = new ArmeriaReactiveWebServerFactory(\n+                    beanFactory, new MockEnvironment().withProperty(\"management.server.port\", managementPort));\n+            factory.isManagementPortEqualsToServerPort();\n+        });\n+    }\n+\n+    @SpringBootApplication\n+    @RestController\n+    static class ArmeriaReactiveWebServerFactoryWithManagementServerPortTestConfiguration {\n+\n+        @Bean\n+        public ArmeriaServerConfigurator armeriaServerConfigurator() {\n+            return builder -> builder.annotatedService()\n+                                     .build(new HelloService());\n+        }\n+\n+        @Bean\n+        public DocServiceConfigurator docServiceConfigurator() {\n+            return builder -> builder.examplePaths(HelloService.class, \"hello\", \"/hello/foo\")\n+                                     .build();\n+        }\n+\n+        @GetMapping(\"/webflux\")\n+        Mono<String> hello() {\n+            return Mono.just(\"Hello, WebFlux!\");\n+        }\n+    }\n+\n+    @Nested\n+    @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT,\n+            classes = ArmeriaReactiveWebServerFactoryWithManagementServerPortTestConfiguration.class,\n+            properties = \"management.server.port=18080\")\n+    @EnableAutoConfiguration\n+    @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)\n+    class ArmeriaReactiveWebServerFactoryWithManagementServerPortTest {\n+\n+        private static final int SERVER_PORT = 8080;\n+        private static final int MANAGEMENT_PORT = 18080;\n+\n+        @Test\n+        void testServerPort() {\n+            final WebClient client = WebClient.builder(\"http://127.0.0.1:\" + SERVER_PORT)\n+                                              .factory(clientFactory)\n+                                              .build();\n+\n+            // Request to Armeria service\n+            final AggregatedHttpResponse res1 = client.get(\"/hello/world\")\n+                                                      .aggregate()\n+                                                      .join();\n+            assertThat(res1.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);\n+\n+            // Request to WebFlux controller\n+            final AggregatedHttpResponse res2 = client.get(\"/webflux\")\n+                                                      .aggregate()\n+                                                      .join();\n+            assertThat(res2.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);\n+        }\n+\n+        @Test\n+        void testManagementPort() {\n+            final WebClient client = WebClient.builder(\"http://127.0.0.1:\" + MANAGEMENT_PORT)\n+                                              .factory(clientFactory)\n+                                              .build();\n+            final AggregatedHttpResponse res = client.get(\"/internal/docs/specification.json\")\n+                                                     .aggregate()\n+                                                     .join();\n+            assertThat(res.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);\n+\n+            try {\n+                final JsonNode actualJson = mapper.readTree(res.contentUtf8());\n+                assertThat(actualJson.path(\"services\")\n+                                     .path(0)\n+                                     .path(\"methods\")\n+                                     .path(0)\n+                                     .path(\"examplePaths\")\n+                                     .path(0)\n+                                     .textValue())\n+                        .isEqualTo(\"/hello/foo\");\n+            } catch (JsonProcessingException e) {", "originalCommit": "b5c5a7071adf014b05d10d6cbd14304588fd2cc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7317c84f44e7d155607f80d6545a25f498af78", "chunk": "diff --git a/spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java b/spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java\nindex 5c34ccd78..47bc216bf 100644\n--- a/spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java\n+++ b/spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java\n\n@@ -437,11 +436,11 @@ class ArmeriaReactiveWebServerFactoryTest {\n             \"65536\",\n     })\n     void isManagementPortEqualsToServerPortThrows(String managementPort) {\n-        assertThrows(IllegalArgumentException.class, () -> {\n+        assertThatThrownBy(() -> {\n             final ArmeriaReactiveWebServerFactory factory = new ArmeriaReactiveWebServerFactory(\n                     beanFactory, new MockEnvironment().withProperty(\"management.server.port\", managementPort));\n             factory.isManagementPortEqualsToServerPort();\n-        });\n+        }).isInstanceOf(IllegalArgumentException.class);\n     }\n \n     @SpringBootApplication\n"}}, {"oid": "ea7317c84f44e7d155607f80d6545a25f498af78", "url": "https://github.com/line/armeria/commit/ea7317c84f44e7d155607f80d6545a25f498af78", "message": "Improve tests", "committedDate": "2020-08-12T15:36:39Z", "type": "commit"}]}