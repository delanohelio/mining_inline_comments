{"pr_number": 3249, "pr_title": "Deprecate CircuitBreakerRpcClient.newPerHostAndMethodDecorator()", "pr_createdAt": "2020-12-28T04:15:16Z", "pr_url": "https://github.com/line/armeria/pull/3249", "timeline": [{"oid": "26484869d5339891988ac8ff04b749ae9c2ca8c4", "url": "https://github.com/line/armeria/commit/26484869d5339891988ac8ff04b749ae9c2ca8c4", "message": "Deprecate CircuitBreakerRpcClient.newPerHostAndMethodDecorator()", "committedDate": "2020-12-28T04:11:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0MTM2MQ==", "url": "https://github.com/line/armeria/pull/3249#discussion_r549341361", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated Use newDecorator(), building a CircuitBreakerMapping using CircuitBreakerMapping.Builder().\n          \n          \n            \n                 * @deprecated Use {@link #newDecorator(CircuitBreakerMapping, CircuitBreakerRuleWithContent)} with\n          \n          \n            \n                 *             {@link CircuitBreakerMapping#perHostAndMethod(BiFunction)}.\n          \n      \n    \n    \n  \n\nCould you also fix the Javadoc in CircuitBreakerClient, please? \ud83d\ude04", "author": "minwoox", "createdAt": "2020-12-28T13:06:05Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java", "diffHunk": "@@ -100,7 +100,10 @@\n      * unrelated services.\n      *\n      * @param factory a function that takes a host+method and creates a new {@link CircuitBreaker}\n+     *\n+     * @deprecated Use newDecorator(), building a CircuitBreakerMapping using CircuitBreakerMapping.Builder().", "originalCommit": "26484869d5339891988ac8ff04b749ae9c2ca8c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM1MzYzNQ==", "url": "https://github.com/line/armeria/pull/3249#discussion_r549353635", "bodyText": "Updated, thanks!", "author": "KarboniteKream", "createdAt": "2020-12-28T13:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0MTM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "bf6907fc2e9275412bb3d18286f3a9321248c97b", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java b/core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java\nindex 00ccb23d18..0661600ccd 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java\n\n@@ -101,7 +101,8 @@ public final class CircuitBreakerRpcClient extends AbstractCircuitBreakerClient<\n      *\n      * @param factory a function that takes a host+method and creates a new {@link CircuitBreaker}\n      *\n-     * @deprecated Use newDecorator(), building a CircuitBreakerMapping using CircuitBreakerMapping.Builder().\n+     * @deprecated Use {@link #newDecorator(CircuitBreakerMapping, CircuitBreakerRuleWithContent)} with\n+     *             {@link CircuitBreakerMapping#perHostAndMethod(BiFunction)}.\n      */\n     @Deprecated\n     public static Function<? super RpcClient, CircuitBreakerRpcClient>\n"}}, {"oid": "bf6907fc2e9275412bb3d18286f3a9321248c97b", "url": "https://github.com/line/armeria/commit/bf6907fc2e9275412bb3d18286f3a9321248c97b", "message": "Update Javadoc", "committedDate": "2020-12-28T13:45:01Z", "type": "commit"}]}