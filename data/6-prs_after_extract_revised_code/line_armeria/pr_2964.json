{"pr_number": 2964, "pr_title": "Support compressed and base64 encoded trailers in GrpcWebUtil", "pr_createdAt": "2020-08-03T09:22:28Z", "pr_url": "https://github.com/line/armeria/pull/2964", "timeline": [{"oid": "269d915a5b052c0d333075c17c27176e0aace93b", "url": "https://github.com/line/armeria/commit/269d915a5b052c0d333075c17c27176e0aace93b", "message": "Support compresses and base64 encoded trailers in GrpcWebUtil\nMotivation:\nPreviously, `GrpcWebUtil.parseTrailers` cannot parse the grpc-web trailers if it's compressed or base64 encoded.\n\nModifications:\n- Support decompression and decoding base64 in `GrpcWebUtil.parseTrailers`\n\nResult:\n- You can now use `GrpcWebUtil.parseTrailers()` to parse the compressed and base64encoded trailers", "committedDate": "2020-08-03T09:21:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MDA5OA==", "url": "https://github.com/line/armeria/pull/2964#discussion_r464360098", "bodyText": "nit: Could remove success flag? I think we don't need to check that success is true.", "author": "ikhoon", "createdAt": "2020-08-03T11:41:31Z", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -88,39 +99,76 @@ public static HttpHeaders parseTrailers(ClientRequestContext ctx, HttpData respo\n         requireNonNull(response, \"response\");\n         final SerializationFormat serializationFormat =\n                 ctx.log().ensureAvailable(RequestLogProperty.SCHEME).scheme().serializationFormat();\n+\n+        final ByteBuf buf;\n         if (GrpcSerializationFormats.isGrpcWebText(serializationFormat)) {\n-            // TODO(minwoox) support decoding base64.\n-            return null;\n+            final Base64Decoder decoder = new Base64Decoder(ctx.alloc());\n+            buf = decoder.decode(response.byteBuf());\n+        } else {\n+            buf = response.byteBuf();\n         }\n-        final ByteBuf buf = response.byteBuf();\n-\n-        HttpHeaders trailers = null;\n-        while (buf.isReadable(HEADER_LENGTH)) {\n-            final short type = buf.readUnsignedByte();\n-            if ((type & RESERVED_MASK) != 0) {\n-                // Malformed header\n-                break;\n-            }\n \n-            final int length = buf.readInt();\n-            // 8th (MSB) bit of the 1st gRPC frame byte is:\n-            // - '1' for trailers\n-            // - '0' for data\n-            //\n-            // See: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md\n-            if (type >> 7 == 1) {\n-                if ((type & 1) > 0) {\n-                    // TODO(minwoox) support compressed trailer.\n+        try {\n+            while (buf.isReadable(HEADER_LENGTH)) {\n+                final short type = buf.readUnsignedByte();\n+                if ((type & RESERVED_MASK) != 0) {\n+                    // Malformed header\n                     break;\n                 }\n-                trailers = InternalGrpcWebUtil.parseGrpcWebTrailers(buf);\n-                break;\n-            } else {\n-                // Skip a gRPC content\n-                buf.skipBytes(length);\n+\n+                final int length = buf.readInt();\n+                // 8th (MSB) bit of the 1st gRPC frame byte is:\n+                // - '1' for trailers\n+                // - '0' for data\n+                //\n+                // See: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md\n+                if (type >> 7 == 1) {\n+                    if ((type & 1) > 0) {\n+                        // The compressed trailers.\n+                        final ResponseHeaders responseHeaders = ctx.log().ensureAvailable(\n+                                RequestLogProperty.RESPONSE_HEADERS).responseHeaders();\n+                        final String grpcEncoding = responseHeaders.get(GrpcHeaderNames.GRPC_ENCODING);\n+                        // We use DecompressorRegistry in ArmeriaClientCall. If ArmeriaClientCall\n+                        // supports to add another decompressor, we will change this to support that too.\n+                        final DecompressorRegistry registry = DecompressorRegistry.getDefaultInstance();\n+                        if (grpcEncoding == null) {\n+                            // grpc-encoding header is missing.\n+                            return null;\n+                        }\n+                        final Decompressor decompressor = registry.lookupDecompressor(grpcEncoding);\n+                        if (decompressor == null) {\n+                            return null;\n+                        }\n+\n+                        final ByteBuf outputBuf = ctx.alloc().compositeBuffer();\n+                        boolean success = false;\n+                        try (ByteBufInputStream is = new ByteBufInputStream(buf);\n+                             InputStream decompressIs = decompressor.decompress(is);\n+                             ByteBufOutputStream os = new ByteBufOutputStream(outputBuf)) {\n+                            ByteStreams.copy(decompressIs, os);\n+                            success = true;\n+                        } catch (Throwable t) {\n+                            if (!success) {", "originalCommit": "269d915a5b052c0d333075c17c27176e0aace93b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2ODc4Nw==", "url": "https://github.com/line/armeria/pull/2964#discussion_r464368787", "bodyText": "or replace catch (Throwable t) with finally? It swallows the exception currently which doesn't sound right.", "author": "trustin", "createdAt": "2020-08-03T12:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2OTE5Ng==", "url": "https://github.com/line/armeria/pull/2964#discussion_r464369196", "bodyText": ".. and merge this try block with the below try block?", "author": "trustin", "createdAt": "2020-08-03T12:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2OTU0OA==", "url": "https://github.com/line/armeria/pull/2964#discussion_r464369548", "bodyText": ".. or maybe it was intentional to swallow the exception. \ud83e\udd14", "author": "trustin", "createdAt": "2020-08-03T12:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQzOTUyMA==", "url": "https://github.com/line/armeria/pull/2964#discussion_r464439520", "bodyText": "Yes, that was my intention to swallow the exception because this is a hack to extract the gRPC trailers. All invalid stuff will be dealt with the framer and ArmeriaClientCall. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-03T14:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0MDM1OA==", "url": "https://github.com/line/armeria/pull/2964#discussion_r464440358", "bodyText": "Could remove success flag? I think we don't need to check that success is true.\n\noutputBuf is used at line 157. If it's released, we can't use it. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-03T14:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0MzgxMA==", "url": "https://github.com/line/armeria/pull/2964#discussion_r464443810", "bodyText": "merge this try block with the below try block?\n\nMerged. Thanks!", "author": "minwoox", "createdAt": "2020-08-03T14:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MDA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "64f80a73b5d433f72d8520fd0a3882a1c6480129", "chunk": "diff --git a/grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java b/grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java\nindex 6eee875f8..ca99035c1 100644\n--- a/grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java\n+++ b/grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java\n\n@@ -140,21 +140,16 @@ public final class GrpcWebUtil {\n                             return null;\n                         }\n \n+                        // TODO(minwoox) Optimize this by creating buffer with the sensible initial capacity.\n                         final ByteBuf outputBuf = ctx.alloc().compositeBuffer();\n-                        boolean success = false;\n                         try (ByteBufInputStream is = new ByteBufInputStream(buf);\n                              InputStream decompressIs = decompressor.decompress(is);\n                              ByteBufOutputStream os = new ByteBufOutputStream(outputBuf)) {\n                             ByteStreams.copy(decompressIs, os);\n-                            success = true;\n+                            return InternalGrpcWebUtil.parseGrpcWebTrailers(outputBuf);\n                         } catch (Throwable t) {\n-                            if (!success) {\n-                                outputBuf.release();\n-                            }\n+                            // Swallow the exception and just return null.\n                             return null;\n-                        }\n-                        try {\n-                            return InternalGrpcWebUtil.parseGrpcWebTrailers(outputBuf);\n                         } finally {\n                             outputBuf.release();\n                         }\n"}}, {"oid": "64f80a73b5d433f72d8520fd0a3882a1c6480129", "url": "https://github.com/line/armeria/commit/64f80a73b5d433f72d8520fd0a3882a1c6480129", "message": "Address the comment by @trustin", "committedDate": "2020-08-03T14:18:55Z", "type": "commit"}, {"oid": "7836f4112bb3ecd9b710546c040662e6f5ed1c4a", "url": "https://github.com/line/armeria/commit/7836f4112bb3ecd9b710546c040662e6f5ed1c4a", "message": "Merge branch 'master' into grpcWebUtil", "committedDate": "2020-08-03T15:25:07Z", "type": "commit"}]}