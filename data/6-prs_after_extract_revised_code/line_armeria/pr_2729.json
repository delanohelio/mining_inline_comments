{"pr_number": 2729, "pr_title": "Make `RequestScopedMdc` properties are inherited", "pr_createdAt": "2020-05-19T11:57:39Z", "pr_url": "https://github.com/line/armeria/pull/2729", "timeline": [{"oid": "98b5b22b938d3c0ccf42549166912d76d0c44882", "url": "https://github.com/line/armeria/commit/98b5b22b938d3c0ccf42549166912d76d0c44882", "message": "Make `RequestScopedMdc` properties are inherited\n\nMotivation:\n\nA user will expect the following case works:\n\n    ServiceRequestContext sctx = ...;\n    try (SafeCloseable ignored = sctx.push()) {\n        RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n\n        ClientRequestContext cctx = ...;\n        try (SafeCloseable ignored2 = cctx.push()) {\n            assert MDC.get(\"transactionId\").equals(\"1234\");\n        }\n    }\n\n.. which does not work currently, because `RequestScopedMdc` does not\nlook up the root context's map.\n\nModifications:\n\n- Make `RequestScopedMdc.get()`, `getAll()` and `getCopyOfContextMap()`\n  look for the root context map.\n\nResult:\n\n- `RequestScopedMdc` properties are inherited from the root context.", "committedDate": "2020-05-19T11:53:51Z", "type": "commit"}, {"oid": "a2f1f1f16f55e63deaecd6279c5f8281a809a721", "url": "https://github.com/line/armeria/commit/a2f1f1f16f55e63deaecd6279c5f8281a809a721", "message": "Use `Object2ObjectMap` consistently throughout `RequestScopedMdc`\n\nfor faster `putAll()` iteration", "committedDate": "2020-05-19T12:14:21Z", "type": "commit"}, {"oid": "01426c2b46252deb63049f308a40493fbf8517d0", "url": "https://github.com/line/armeria/commit/01426c2b46252deb63049f308a40493fbf8517d0", "message": "Use `getPropertyMap()` when possible", "committedDate": "2020-05-19T12:33:47Z", "type": "commit"}, {"oid": "89d8cda2094520d87c0de429a9a7f8a1f563f1b2", "url": "https://github.com/line/armeria/commit/89d8cda2094520d87c0de429a9a7f8a1f563f1b2", "message": "Less memory footprint for `getCopyOfContextMap()`", "committedDate": "2020-05-19T12:42:14Z", "type": "commit"}, {"oid": "1df2221389c019ca13cfa9c9c36b5e3690e92220", "url": "https://github.com/line/armeria/commit/1df2221389c019ca13cfa9c9c36b5e3690e92220", "message": "Fix imports", "committedDate": "2020-05-19T12:43:56Z", "type": "commit"}, {"oid": "a79f3616b69c1af8cd765d1f6cf5e221d26d9271", "url": "https://github.com/line/armeria/commit/a79f3616b69c1af8cd765d1f6cf5e221d26d9271", "message": "Logging", "committedDate": "2020-05-19T12:45:08Z", "type": "commit"}, {"oid": "9be4bae1f6bc9a526297f6fde440ecf542a7012d", "url": "https://github.com/line/armeria/commit/9be4bae1f6bc9a526297f6fde440ecf542a7012d", "message": "Do not copy when returning if `getPropertyMap()` is not available.", "committedDate": "2020-05-19T12:54:50Z", "type": "commit"}, {"oid": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1", "url": "https://github.com/line/armeria/commit/a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1", "message": "Comments", "committedDate": "2020-05-19T12:59:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNTk0OQ==", "url": "https://github.com/line/armeria/pull/2729#discussion_r427705949", "bodyText": "Isn't it better to log (maybe once?) and return delegate.getCopyOfContextMap(); in this case?", "author": "minwoox", "createdAt": "2020-05-20T02:25:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java", "diffHunk": "@@ -224,24 +284,28 @@ public static void copy(RequestContext ctx, String key) {\n     public static void copyAll(RequestContext ctx) {\n         requireNonNull(ctx, \"ctx\");\n         checkState(delegate != null, ERROR_MESSAGE);\n-\n-        final Map<String, String> map = delegate.getCopyOfContextMap();\n-        if (map == null || map.isEmpty()) {\n-            return;\n+        final Map<String, String> map = getDelegateContextMap();\n+        if (map != null) {\n+            putAll(ctx, map);\n         }\n+    }\n \n-        synchronized (ctx) {\n-            final Map<String, String> oldMap = getMap(ctx);\n-            final Map<String, String> newMap;\n-            if (oldMap.isEmpty()) {\n-                newMap = map;\n-            } else {\n-                newMap = new Object2ObjectOpenHashMap<>(oldMap.size() + map.size());\n-                newMap.putAll(oldMap);\n-                newMap.putAll(map);\n+    @Nullable\n+    private static Map<String, String> getDelegateContextMap() {\n+        assert delegate != null;\n+        try {\n+            // Try to use `LogbackMDCAdapter.getPropertyMap()` which does not make a copy.\n+            @SuppressWarnings(\"unchecked\")\n+            final Map<String, String> map =\n+                    delegateGetPropertyMap != null ? (Map<String, String>) delegateGetPropertyMap.invokeExact()\n+                                                   : delegate.getCopyOfContextMap();\n+            if (map != null) {\n+                return map;\n             }\n-            ctx.setAttr(MAP, Collections.unmodifiableMap(newMap));\n+        } catch (Throwable t) {\n+            Exceptions.throwUnsafely(t);", "originalCommit": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjY3MQ==", "url": "https://github.com/line/armeria/pull/2729#discussion_r427726671", "bodyText": "We will never reach here, because we made sure invokeExact() works in the class initializer. If any exception is raised, it means it's a bug. Let me add some comment about this.", "author": "trustin", "createdAt": "2020-05-20T03:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNTk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "92a2cad3d3e97dc80430130794d45918d6fe24d1", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java b/core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java\nindex ec69996a5..af0bc30a4 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java\n\n@@ -299,10 +299,10 @@ public final class RequestScopedMdc {\n             final Map<String, String> map =\n                     delegateGetPropertyMap != null ? (Map<String, String>) delegateGetPropertyMap.invokeExact()\n                                                    : delegate.getCopyOfContextMap();\n-            if (map != null) {\n-                return map;\n-            }\n+            return map;\n         } catch (Throwable t) {\n+            // We should not reach here because we tested `invokeExact()` works\n+            // in the class initializer above.\n             Exceptions.throwUnsafely(t);\n         }\n         return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNjAzOQ==", "url": "https://github.com/line/armeria/pull/2729#discussion_r427706039", "bodyText": "We can just return map.", "author": "minwoox", "createdAt": "2020-05-20T02:25:45Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java", "diffHunk": "@@ -224,24 +284,28 @@ public static void copy(RequestContext ctx, String key) {\n     public static void copyAll(RequestContext ctx) {\n         requireNonNull(ctx, \"ctx\");\n         checkState(delegate != null, ERROR_MESSAGE);\n-\n-        final Map<String, String> map = delegate.getCopyOfContextMap();\n-        if (map == null || map.isEmpty()) {\n-            return;\n+        final Map<String, String> map = getDelegateContextMap();\n+        if (map != null) {\n+            putAll(ctx, map);\n         }\n+    }\n \n-        synchronized (ctx) {\n-            final Map<String, String> oldMap = getMap(ctx);\n-            final Map<String, String> newMap;\n-            if (oldMap.isEmpty()) {\n-                newMap = map;\n-            } else {\n-                newMap = new Object2ObjectOpenHashMap<>(oldMap.size() + map.size());\n-                newMap.putAll(oldMap);\n-                newMap.putAll(map);\n+    @Nullable\n+    private static Map<String, String> getDelegateContextMap() {\n+        assert delegate != null;\n+        try {\n+            // Try to use `LogbackMDCAdapter.getPropertyMap()` which does not make a copy.\n+            @SuppressWarnings(\"unchecked\")\n+            final Map<String, String> map =\n+                    delegateGetPropertyMap != null ? (Map<String, String>) delegateGetPropertyMap.invokeExact()\n+                                                   : delegate.getCopyOfContextMap();\n+            if (map != null) {", "originalCommit": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92a2cad3d3e97dc80430130794d45918d6fe24d1", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java b/core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java\nindex ec69996a5..af0bc30a4 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java\n\n@@ -299,10 +299,10 @@ public final class RequestScopedMdc {\n             final Map<String, String> map =\n                     delegateGetPropertyMap != null ? (Map<String, String>) delegateGetPropertyMap.invokeExact()\n                                                    : delegate.getCopyOfContextMap();\n-            if (map != null) {\n-                return map;\n-            }\n+            return map;\n         } catch (Throwable t) {\n+            // We should not reach here because we tested `invokeExact()` works\n+            // in the class initializer above.\n             Exceptions.throwUnsafely(t);\n         }\n         return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwODczNw==", "url": "https://github.com/line/armeria/pull/2729#discussion_r427708737", "bodyText": "Isn't this unmodifiable if the map is returned from here? https://github.com/line/armeria/pull/2729/files#diff-b35989b7cd6a82522044209c418a377dR193", "author": "minwoox", "createdAt": "2020-05-20T02:36:15Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java", "diffHunk": "@@ -319,35 +383,52 @@ public String get(String key) {\n \n         @Override\n         public Map<String, String> getCopyOfContextMap() {\n-            final Map<String, String> threadLocalMap =\n-                    firstNonNull(delegate.getCopyOfContextMap(), Collections.emptyMap());\n+            final Map<String, String> threadLocalMap = getDelegateContextMap();\n             final RequestContext ctx = RequestContext.currentOrNull();\n             if (ctx == null) {\n                 // No context available\n-                return threadLocalMap;\n+                if (threadLocalMap != null) {\n+                    return maybeCloneThreadLocalMap(threadLocalMap);\n+                } else {\n+                    return Object2ObjectMaps.emptyMap();\n+                }\n             }\n \n-            final Map<String, String> requestScopedMap =\n-                    firstNonNull(getMap(ctx), Collections.emptyMap());\n-            if (threadLocalMap.isEmpty()) {\n+            // Retrieve the request-scoped properties.\n+            // Note that this map is 1) unmodifiable and shared 2) or modifiable yet unshared,\n+            // which means it's OK to return as it is or mutate it.\n+            final Map<String, String> requestScopedMap = getAll(ctx);\n+            if (threadLocalMap == null || threadLocalMap.isEmpty()) {\n                 // No thread-local map available\n                 return requestScopedMap;\n             }\n \n             // Thread-local map available\n             if (requestScopedMap.isEmpty()) {\n                 // Only thread-local map available\n-                return threadLocalMap;\n+                return maybeCloneThreadLocalMap(threadLocalMap);\n             }\n \n             // Both thread-local and request-scoped map available\n-            final Map<String, String> merged =\n-                    new Object2ObjectOpenHashMap<>(threadLocalMap.size() + requestScopedMap.size());\n-            merged.putAll(threadLocalMap);\n-            merged.putAll(requestScopedMap);\n+            final Object2ObjectOpenHashMap<String, String> merged;\n+            if (requestScopedMap instanceof Object2ObjectOpenHashMap) {\n+                // Reuse the mutable copy returned by getAll() for less memory footprint.\n+                merged = (Object2ObjectOpenHashMap<String, String>) requestScopedMap;", "originalCommit": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzQ5NQ==", "url": "https://github.com/line/armeria/pull/2729#discussion_r427727495", "bodyText": "Yes. The map will not be an Object2ObjectOpenHashMap but be an Object2ObjectMaps.Unmodifiable or something. This code path is for the case where getAll() returns a mutable map, so we do not create two maps when merging twice.", "author": "trustin", "createdAt": "2020-05-20T03:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwODczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyODM4Ng==", "url": "https://github.com/line/armeria/pull/2729#discussion_r427728386", "bodyText": "Ah I thought the condition was requestScopedMap instanceof Object2ObjectMap. Sorry about it. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-05-20T04:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwODczNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "92a2cad3d3e97dc80430130794d45918d6fe24d1", "url": "https://github.com/line/armeria/commit/92a2cad3d3e97dc80430130794d45918d6fe24d1", "message": "Address the comments from @minwoox", "committedDate": "2020-05-20T03:57:57Z", "type": "commit"}]}