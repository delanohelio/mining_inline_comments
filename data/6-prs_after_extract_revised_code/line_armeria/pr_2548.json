{"pr_number": 2548, "pr_title": "Do not add additionalTrailers to ResponseHeaders", "pr_createdAt": "2020-03-04T07:09:24Z", "pr_url": "https://github.com/line/armeria/pull/2548", "timeline": [{"oid": "76728867898e06f4d9b388ab5932c3b80b84f1da", "url": "https://github.com/line/armeria/commit/76728867898e06f4d9b388ab5932c3b80b84f1da", "message": "Motivation:\nCurrently, we combine `additionalResponseTrailers` to the `ResponseHeaders` if the `EOS` of the `ResponseHeaders` is true.\nI think we do this because, in gRPC, there's a chance that only trailers is sent to the client so we combine them.\nHowever, the response can consist of just only `ResponseHeaders` and trailer. (i.e no data)\nSo I think we can just combine the trailers to `ResponseHeaders` in gRPC specially, and let the user send the trailers without data.\n\nModifications:\n- Add `getAndRemoveAdditionalResponseTrailer` to handle the case specially.\n- Throw an exception when `HttpResponse` and `AggregatedHttpResponse` is created with informational headers.\n- (Breaking) Remove `removeAdditionalResponseHeaders` and `removeAdditionalResonseTrailers` from ctx.\n  - I don't remember why I added this and it seems useless.\n\nResult:\n- Close #2544\n- You now can send an `HttpResponse` containing `ResponseHeaders` and trailers using `ctx.additionalResponseTrailers`.", "committedDate": "2020-03-04T07:05:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTgxNQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r387495815", "bodyText": "I don't think we should add a gRPC only API to request context interface. Actually I was expecting a gRPC only implementation to look a little hacky hence encouraging a client option or something similarly at the client level instead :)", "author": "anuraaga", "createdAt": "2020-03-04T07:49:36Z", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -564,19 +565,21 @@ default String pathParam(String name) {\n      */\n     void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers);\n \n-    /**\n-     * Removes all headers with the specified {@code name}.\n-     *\n-     * @return {@code true} if at least one entry has been removed\n-     */\n-    boolean removeAdditionalResponseHeader(CharSequence name);\n-\n     /**\n      * Returns the {@link HttpHeaders} which is returned along with any other trailers when a\n      * {@link Service} completes an {@link HttpResponse}.\n      */\n     HttpHeaders additionalResponseTrailers();\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    HttpHeaders getAndRemoveAdditionalResponseTrailers();", "originalCommit": "cc38adc242e785d19c0cf576639979e1ea1d6a1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NjcxNg==", "url": "https://github.com/line/armeria/pull/2548#discussion_r387496716", "bodyText": "That being said if we can expose this through an internal API that relies on downcast to DefaultRequestContext it's still ok", "author": "anuraaga", "createdAt": "2020-03-04T07:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5ODkzOA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r387498938", "bodyText": "Ah, Thanks. Yes, I was a little worried about it but just didn't make sure. \ud83d\ude09 Let me remove this.", "author": "minwoox", "createdAt": "2020-03-04T07:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "654161f5447bfa2b886709571e0496e544523215", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java b/core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java\nindex 9873f35fa1..ff8a972213 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java\n\n@@ -571,15 +570,6 @@ public interface ServiceRequestContext extends RequestContext {\n      */\n     HttpHeaders additionalResponseTrailers();\n \n-    /**\n-     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n-     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n-     * a {@link Service} completes an {@link HttpResponse}.\n-     *\n-     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n-     */\n-    HttpHeaders getAndRemoveAdditionalResponseTrailers();\n-\n     /**\n      * Sets a trailer with the specified {@code name} and {@code value}. This will remove all previous values\n      * associated with the specified {@code name}.\n"}}, {"oid": "654161f5447bfa2b886709571e0496e544523215", "url": "https://github.com/line/armeria/commit/654161f5447bfa2b886709571e0496e544523215", "message": "Address the comment by @anuraaga", "committedDate": "2020-03-04T08:38:21Z", "type": "commit"}, {"oid": "654161f5447bfa2b886709571e0496e544523215", "url": "https://github.com/line/armeria/commit/654161f5447bfa2b886709571e0496e544523215", "message": "Address the comment by @anuraaga", "committedDate": "2020-03-04T08:38:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxOTk2NA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r387519964", "bodyText": "I forget if request context is unwrappable but if so better to use unwrap.", "author": "anuraaga", "createdAt": "2020-03-04T08:45:45Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java", "diffHunk": "@@ -534,6 +531,12 @@ static HttpHeaders statusToTrailers(\n                          Base64.getEncoder().encodeToString(proto.toByteArray()));\n         }\n \n+        if (ctx instanceof DefaultServiceRequestContext) {", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMjg4MQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r387522881", "bodyText": "It's not unwrappable so I guess just using instanceof is the best I can do. \ud83d\ude06", "author": "minwoox", "createdAt": "2020-03-04T08:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxOTk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "750a4316234a01b39e2b96a008255a2ea141787b", "chunk": "diff --git a/grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java b/grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java\nindex ff3a30bef7..38af404b16 100644\n--- a/grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java\n+++ b/grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java\n\n@@ -531,12 +530,9 @@ final class ArmeriaServerCall<I, O> extends ServerCall<I, O>\n                          Base64.getEncoder().encodeToString(proto.toByteArray()));\n         }\n \n-        if (ctx instanceof DefaultServiceRequestContext) {\n-            final HttpHeaders additionalTrailers =\n-                    ((DefaultServiceRequestContext) ctx).getAndRemoveAdditionalResponseTrailers();\n-            trailers.add(additionalTrailers);\n-        }\n-\n+        final HttpHeaders additionalTrailers = ctx.additionalResponseTrailers();\n+        ctx.mutateAdditionalResponseTrailers(HttpHeadersBuilder::clear);\n+        trailers.add(additionalTrailers);\n         return trailers.build();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NTkxOA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388295918", "bodyText": "How about using {@linkplain}?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the specified {@code statusCode} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the specified {@code statusCode} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "author": "trustin", "createdAt": "2020-03-05T13:36:16Z", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -40,6 +41,9 @@\n      * Creates a new HTTP response.\n      *\n      * @param statusCode the HTTP status code\n+     *\n+     * @throws IllegalArgumentException if the specified {@code statusCode} is\n+     *                                  {@link HttpStatus#isInformational()}.", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNTkxMA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388725910", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-06T06:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NTkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "21cf5634920da33d0117a2c834d4f91cc03111f3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\nindex 540f51cf77..5756323042 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\n\n@@ -43,7 +43,7 @@ public interface AggregatedHttpResponse extends AggregatedHttpMessage {\n      * @param statusCode the HTTP status code\n      *\n      * @throws IllegalArgumentException if the specified {@code statusCode} is\n-     *                                  {@link HttpStatus#isInformational()}.\n+     *                                  {@linkplain HttpStatus#isInformational() informational}.\n      */\n     static AggregatedHttpResponse of(int statusCode) {\n         return of(HttpStatus.valueOf(statusCode));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NjEzNg==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388296136", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "author": "trustin", "createdAt": "2020-03-05T13:36:39Z", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -49,9 +53,13 @@ static AggregatedHttpResponse of(int statusCode) {\n      * Creates a new HTTP response.\n      *\n      * @param status the HTTP status\n+     *\n+     * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n+     *                                  {@link HttpStatus#isInformational()}.", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21cf5634920da33d0117a2c834d4f91cc03111f3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\nindex 540f51cf77..5756323042 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\n\n@@ -55,11 +55,11 @@ public interface AggregatedHttpResponse extends AggregatedHttpMessage {\n      * @param status the HTTP status\n      *\n      * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n-     *                                  {@link HttpStatus#isInformational()}.\n+     *                                  {@linkplain HttpStatus#isInformational() informational}.\n      */\n     static AggregatedHttpResponse of(HttpStatus status) {\n         requireNonNull(status, \"status\");\n-        checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status\", status);\n+        checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status)\", status);\n         if (status.isContentAlwaysEmpty()) {\n             return of(ResponseHeaders.of(status));\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NzExMQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388297111", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "author": "trustin", "createdAt": "2020-03-05T13:38:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -159,6 +185,9 @@ static AggregatedHttpResponse of(HttpStatus status, MediaType mediaType, HttpDat\n      * Creates a new HTTP response with empty content.\n      *\n      * @param headers the HTTP headers\n+     *\n+     * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n+     *                                  {@link HttpStatus#isInformational()}.", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21cf5634920da33d0117a2c834d4f91cc03111f3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\nindex 540f51cf77..5756323042 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\n\n@@ -187,7 +187,7 @@ public interface AggregatedHttpResponse extends AggregatedHttpMessage {\n      * @param headers the HTTP headers\n      *\n      * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n-     *                                  {@link HttpStatus#isInformational()}.\n+     *                                  {@linkplain HttpStatus#isInformational() informational}.\n      */\n     static AggregatedHttpResponse of(ResponseHeaders headers) {\n         requireNonNull(headers, \"headers\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5Nzg1MQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388297851", "bodyText": "Missing closing parenthesis:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status\", status);\n          \n          \n            \n                    checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status)\", status);", "author": "trustin", "createdAt": "2020-03-05T13:39:42Z", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -198,12 +233,18 @@ static AggregatedHttpResponse of(ResponseHeaders headers, HttpData content, Http\n      * @param headers the HTTP headers\n      * @param content the content of the HTTP response\n      * @param trailers the HTTP trailers\n+     *\n+     * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n+     *                                  {@link HttpStatus#isInformational()}.\n      */\n     static AggregatedHttpResponse of(Iterable<ResponseHeaders> informationals, ResponseHeaders headers,\n                                      HttpData content, HttpHeaders trailers) {\n \n         requireNonNull(informationals, \"informationals\");\n         requireNonNull(headers, \"headers\");\n+        final HttpStatus status = headers.status();\n+        checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status\", status);", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjAwOA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388726008", "bodyText": "Oops.", "author": "minwoox", "createdAt": "2020-03-06T06:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5Nzg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "21cf5634920da33d0117a2c834d4f91cc03111f3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\nindex 540f51cf77..5756323042 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java\n\n@@ -235,7 +235,7 @@ public interface AggregatedHttpResponse extends AggregatedHttpMessage {\n      * @param trailers the HTTP trailers\n      *\n      * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n-     *                                  {@link HttpStatus#isInformational()}.\n+     *                                  {@linkplain HttpStatus#isInformational() informational}.\n      */\n     static AggregatedHttpResponse of(Iterable<ResponseHeaders> informationals, ResponseHeaders headers,\n                                      HttpData content, HttpHeaders trailers) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388299172", "bodyText": "Why was this removed?", "author": "trustin", "createdAt": "2020-03-05T13:42:03Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -377,14 +377,10 @@ public static HttpStatus valueOf(String statusText) {\n \n     /**\n      * Returns {@code true} if the content of the response for the specified status code is expected to\n-     * be always empty (1xx, 204, 205 and 304 responses.)\n+     * be always empty (204, 205 and 304 responses.)\n      */\n     @SuppressWarnings(\"checkstyle:OverloadMethodsDeclarationOrder\")\n     public static boolean isContentAlwaysEmpty(int statusCode) {\n-        if (HttpStatusClass.INFORMATIONAL.contains(statusCode)) {\n-            return true;\n-        }\n-", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTA1Mg==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388715052", "bodyText": "Because I think whether the content is empty or not is decided by the response headers, not the informational headers.\nInformational headers will have the following response headers, so shouldn't we look at the response headers to make a decision if the following content will be empty or not?", "author": "minwoox", "createdAt": "2020-03-06T05:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3Mjg1Ng==", "url": "https://github.com/line/armeria/pull/2548#discussion_r389572856", "bodyText": "Doesn't it still mean that informational headers have no content?", "author": "trustin", "createdAt": "2020-03-09T10:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMzcwMg==", "url": "https://github.com/line/armeria/pull/2548#discussion_r389623702", "bodyText": "Had a quick chat with @minwoox and we chose to keep the modification in this PR, because we can't tell if the response will have no content from an informational status.", "author": "trustin", "createdAt": "2020-03-09T12:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDM3OQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388300379", "bodyText": "Shouldn't we warn because it's true in HTTP/1?", "author": "trustin", "createdAt": "2020-03-05T13:44:09Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -279,12 +279,6 @@ private static HttpStatus defaultResponseStatus(Method method) {\n         setAdditionalHeader(defaultTrailers, method, \"trailer\", methodAlias, \"method\",\n                             AdditionalTrailer.class, AdditionalTrailer::name, AdditionalTrailer::value);\n \n-        if (defaultHeaders.status().isContentAlwaysEmpty() && !defaultTrailers.isEmpty()) {\n-            logger.warn(\"A response with HTTP status code '{}' cannot have a content. \" +\n-                        \"Trailers defined at '{}' might be ignored.\",\n-                        defaultHeaders.status().code(), methodAlias);", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNzU5OQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388717599", "bodyText": "That's a good point. Let me put it back with a little change.", "author": "minwoox", "createdAt": "2020-03-06T05:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "21cf5634920da33d0117a2c834d4f91cc03111f3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java b/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java\nindex 0f221c12b9..4c0acfe37c 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java\n\n@@ -279,6 +279,12 @@ public final class AnnotatedServiceFactory {\n         setAdditionalHeader(defaultTrailers, method, \"trailer\", methodAlias, \"method\",\n                             AdditionalTrailer.class, AdditionalTrailer::name, AdditionalTrailer::value);\n \n+        if (defaultHeaders.status().isContentAlwaysEmpty() && !defaultTrailers.isEmpty()) {\n+            logger.warn(\"A response with HTTP status code '{}' cannot have a content. \" +\n+                        \"Trailers defined at '{}' might be ignored if HTTP/1.1 is used.\",\n+                        defaultHeaders.status().code(), methodAlias);\n+        }\n+\n         final ResponseHeaders responseHeaders = defaultHeaders.build();\n         final HttpHeaders responseTrailers = defaultTrailers.build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDY2MA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388300660", "bodyText": "Not sure why we need to rename this method. Could you explain?", "author": "trustin", "createdAt": "2020-03-05T13:44:44Z", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -496,33 +498,33 @@ public HttpHeaders additionalResponseHeaders() {\n     public void setAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.setObject(name, value));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.setObject(name, value));\n     }\n \n     @Override\n     public void setAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.setObject(headers));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.setObject(headers));\n     }\n \n     @Override\n     public void addAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.addObject(name, value));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.addObject(name, value));\n     }\n \n     @Override\n     public void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.addObject(headers));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.addObject(headers));\n     }\n \n-    private void updateAdditionalResponseHeaders(\n+    private void updateAdditionalHeaders(", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTI5MA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388715290", "bodyText": "Let me revert this. Bad decision. \ud83d\ude06", "author": "minwoox", "createdAt": "2020-03-06T05:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "21cf5634920da33d0117a2c834d4f91cc03111f3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java b/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\nindex d6ceea0843..f11ca6b2fe 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\n\n@@ -498,33 +498,33 @@ public final class DefaultServiceRequestContext\n     public void setAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n-                                builder -> builder.setObject(name, value));\n+        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n+                                        builder -> builder.setObject(name, value));\n     }\n \n     @Override\n     public void setAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n-                                builder -> builder.setObject(headers));\n+        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n+                                        builder -> builder.setObject(headers));\n     }\n \n     @Override\n     public void addAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n-                                builder -> builder.addObject(name, value));\n+        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n+                                        builder -> builder.addObject(name, value));\n     }\n \n     @Override\n     public void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n-                                builder -> builder.addObject(headers));\n+        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n+                                        builder -> builder.addObject(headers));\n     }\n \n-    private void updateAdditionalHeaders(\n+    private void updateAdditionalResponseHeaders(\n             AtomicReferenceFieldUpdater<DefaultServiceRequestContext, HttpHeaders> atomicUpdater,\n             Function<HttpHeadersBuilder, HttpHeadersBuilder> valueUpdater) {\n         for (;;) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMTY5OQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388301699", "bodyText": "I don't get why this method has to be removed. Doesn't a user sometimes need to remove a header from the additional response headers? e.g. A user can write a decorator that removes an additional response header added by other service.", "author": "trustin", "createdAt": "2020-03-05T13:46:29Z", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -534,66 +536,50 @@ private void updateAdditionalResponseHeaders(\n         }\n     }\n \n-    @Override\n-    public boolean removeAdditionalResponseHeader(CharSequence name) {\n-        return removeAdditionalResponseHeader(additionalResponseHeadersUpdater, name);\n-    }", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNjM1OA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388716358", "bodyText": "I thought the situation is never going to happen but I guess I was wrong. \ud83d\ude06\nAnd I really like the idea of providing the API to mutate headers. So we can have this behavior again. Thanks!", "author": "minwoox", "createdAt": "2020-03-06T05:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMTY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "21cf5634920da33d0117a2c834d4f91cc03111f3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java b/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\nindex d6ceea0843..f11ca6b2fe 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\n\n@@ -556,30 +556,30 @@ public final class DefaultServiceRequestContext\n     public void setAdditionalResponseTrailer(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalHeaders(additionalResponseTrailersUpdater,\n-                                builder -> builder.setObject(name, value));\n+        updateAdditionalResponseHeaders(additionalResponseTrailersUpdater,\n+                                        builder -> builder.setObject(name, value));\n     }\n \n     @Override\n     public void setAdditionalResponseTrailers(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalHeaders(additionalResponseTrailersUpdater,\n-                                builder -> builder.setObject(headers));\n+        updateAdditionalResponseHeaders(additionalResponseTrailersUpdater,\n+                                        builder -> builder.setObject(headers));\n     }\n \n     @Override\n     public void addAdditionalResponseTrailer(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalHeaders(additionalResponseTrailersUpdater,\n-                                builder -> builder.addObject(name, value));\n+        updateAdditionalResponseHeaders(additionalResponseTrailersUpdater,\n+                                        builder -> builder.addObject(name, value));\n     }\n \n     @Override\n     public void addAdditionalResponseTrailers(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalHeaders(additionalResponseTrailersUpdater,\n-                                builder -> builder.addObject(headers));\n+        updateAdditionalResponseHeaders(additionalResponseTrailersUpdater,\n+                                        builder -> builder.addObject(headers));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNTc5OA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388305798", "bodyText": "We will not need this method at all if we have mutateAdditionalResponseTrailers():\nHttpHeaders oldTrailers = ctx.additionalResponseTrailers();\nctx.mutateAdditionalResponseTrailers(mutator -> mutator.clear());", "author": "trustin", "createdAt": "2020-03-05T13:53:25Z", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -534,66 +536,50 @@ private void updateAdditionalResponseHeaders(\n         }\n     }\n \n-    @Override\n-    public boolean removeAdditionalResponseHeader(CharSequence name) {\n-        return removeAdditionalResponseHeader(additionalResponseHeadersUpdater, name);\n-    }\n-\n-    private boolean removeAdditionalResponseHeader(\n-            AtomicReferenceFieldUpdater<DefaultServiceRequestContext, HttpHeaders> atomicUpdater,\n-            CharSequence name) {\n-        requireNonNull(name, \"name\");\n-        for (;;) {\n-            final HttpHeaders oldValue = atomicUpdater.get(this);\n-            if (oldValue.isEmpty() || !oldValue.contains(name)) {\n-                return false;\n-            }\n-\n-            final HttpHeaders newValue = oldValue.toBuilder().removeAndThen(name).build();\n-            if (atomicUpdater.compareAndSet(this, oldValue, newValue)) {\n-                return true;\n-            }\n-        }\n-    }\n-\n     @Override\n     public HttpHeaders additionalResponseTrailers() {\n         return additionalResponseTrailers;\n     }\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    public HttpHeaders getAndRemoveAdditionalResponseTrailers() {\n+        return additionalResponseTrailersUpdater.getAndSet(this, HttpHeaders.of());\n+    }", "originalCommit": "654161f5447bfa2b886709571e0496e544523215", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21cf5634920da33d0117a2c834d4f91cc03111f3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java b/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\nindex d6ceea0843..f11ca6b2fe 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java\n\n@@ -556,30 +556,30 @@ public final class DefaultServiceRequestContext\n     public void setAdditionalResponseTrailer(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalHeaders(additionalResponseTrailersUpdater,\n-                                builder -> builder.setObject(name, value));\n+        updateAdditionalResponseHeaders(additionalResponseTrailersUpdater,\n+                                        builder -> builder.setObject(name, value));\n     }\n \n     @Override\n     public void setAdditionalResponseTrailers(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalHeaders(additionalResponseTrailersUpdater,\n-                                builder -> builder.setObject(headers));\n+        updateAdditionalResponseHeaders(additionalResponseTrailersUpdater,\n+                                        builder -> builder.setObject(headers));\n     }\n \n     @Override\n     public void addAdditionalResponseTrailer(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalHeaders(additionalResponseTrailersUpdater,\n-                                builder -> builder.addObject(name, value));\n+        updateAdditionalResponseHeaders(additionalResponseTrailersUpdater,\n+                                        builder -> builder.addObject(name, value));\n     }\n \n     @Override\n     public void addAdditionalResponseTrailers(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalHeaders(additionalResponseTrailersUpdater,\n-                                builder -> builder.addObject(headers));\n+        updateAdditionalResponseHeaders(additionalResponseTrailersUpdater,\n+                                        builder -> builder.addObject(headers));\n     }\n \n     @Override\n"}}, {"oid": "21cf5634920da33d0117a2c834d4f91cc03111f3", "url": "https://github.com/line/armeria/commit/21cf5634920da33d0117a2c834d4f91cc03111f3", "message": "Address comments by @trustin", "committedDate": "2020-03-06T06:02:36Z", "type": "commit"}, {"oid": "750a4316234a01b39e2b96a008255a2ea141787b", "url": "https://github.com/line/armeria/commit/750a4316234a01b39e2b96a008255a2ea141787b", "message": "Add mutate APIs for additional headers", "committedDate": "2020-03-06T09:34:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r388803039", "bodyText": "In this class, we have 3 different withHttpHeader methods and I'm wondering if we can do the same approach here. Or at least we can deprecate this method and add a new method that takes a Consumer.", "author": "minwoox", "createdAt": "2020-03-06T09:43:01Z", "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -477,7 +477,7 @@ public static SafeCloseable withHttpHeaders(\n         requireNonNull(headerManipulator, \"headerManipulator\");\n         return withContextCustomizer(ctx -> {\n             final HttpHeaders manipulatedHeaders = headerManipulator.apply(ctx.additionalRequestHeaders());\n-            ctx.setAdditionalRequestHeaders(manipulatedHeaders);\n+            ctx.mutateAdditionalRequestHeaders(mutator -> mutator.add(manipulatedHeaders));", "originalCommit": "750a4316234a01b39e2b96a008255a2ea141787b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MTcxNg==", "url": "https://github.com/line/armeria/pull/2548#discussion_r389571716", "bodyText": "It's pretty common to specify a single header, so I'd prefer keeping them all.", "author": "trustin", "createdAt": "2020-03-09T10:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMjg5Mg==", "url": "https://github.com/line/armeria/pull/2548#discussion_r389612892", "bodyText": "Then just how about changing this method?\n// before\npublic static SafeCloseable withHttpHeaders(\n            Function<? super HttpHeaders, ? extends HttpHeaders> headerManipulator) {\n// after\npublic static SafeCloseable withHttpHeaders(Consumer<HttpHeadersBuilder> headerManipulator) {\nSo that a user does not have to call toBuilder and build?", "author": "minwoox", "createdAt": "2020-03-09T11:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMjY2MA==", "url": "https://github.com/line/armeria/pull/2548#discussion_r389622660", "bodyText": "OK!", "author": "trustin", "createdAt": "2020-03-09T12:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NTAwMg==", "url": "https://github.com/line/armeria/pull/2548#discussion_r390045002", "bodyText": "Done! \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-10T01:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c0c45c2f4787d5f17dc22a864755f2b6b18433b9", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/Clients.java b/core/src/main/java/com/linecorp/armeria/client/Clients.java\nindex b8f46d7d15..67768601f7 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/Clients.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/Clients.java\n\n@@ -470,8 +475,11 @@ public final class Clients {\n      * }\n      * }</pre>\n      *\n-     * @see #withHttpHeader(CharSequence, String)\n+     * @see #withHttpHeaders(Consumer)\n+     *\n+     * @deprecated Use {@link #withHttpHeaders(Consumer)}.\n      */\n+    @Deprecated\n     public static SafeCloseable withHttpHeaders(\n             Function<? super HttpHeaders, ? extends HttpHeaders> headerManipulator) {\n         requireNonNull(headerManipulator, \"headerManipulator\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MDk5NQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r389570995", "bodyText": "How about reviving two methods - {add,set}AdditionalRequestHeader(CharSequence, Object) - since it's used pretty commonly?", "author": "trustin", "createdAt": "2020-03-09T10:21:16Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -632,34 +634,9 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,\n     HttpHeaders additionalRequestHeaders();\n \n     /**\n-     * Sets a header with the specified {@code name} and {@code value}. This will remove all previous values\n-     * associated with the specified {@code name}.\n-     * The header will be included when a {@link Client} sends an {@link HttpRequest}.\n-     */\n-    void setAdditionalRequestHeader(CharSequence name, Object value);", "originalCommit": "750a4316234a01b39e2b96a008255a2ea141787b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNzc3MQ==", "url": "https://github.com/line/armeria/pull/2548#discussion_r389617771", "bodyText": "Yes, let me put this back. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-09T12:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MDk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c0c45c2f4787d5f17dc22a864755f2b6b18433b9", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java b/core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java\nindex 854c045026..12b7cec641 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java\n\n@@ -629,12 +629,26 @@ public interface ClientRequestContext extends RequestContext {\n     void setMaxResponseLength(long maxResponseLength);\n \n     /**\n-     * Returns an {@link HttpHeaders} which is included when a {@link Client} sends an {@link HttpRequest}.\n+     * Returns an {@link HttpHeaders} which will be included when a {@link Client} sends an {@link HttpRequest}.\n      */\n     HttpHeaders additionalRequestHeaders();\n \n     /**\n-     * Mutates the {@link HttpHeaders} which is included when a {@link Client} sends an {@link HttpRequest}.\n+     * Sets a header with the specified {@code name} and {@code value}. This will remove all previous values\n+     * associated with the specified {@code name}.\n+     * The header will be included when a {@link Client} sends an {@link HttpRequest}.\n+     */\n+    void setAdditionalRequestHeader(CharSequence name, Object value);\n+\n+    /**\n+     * Adds a header with the specified {@code name} and {@code value}. The header will be included when\n+     * a {@link Client} sends an {@link HttpRequest}.\n+     */\n+    void addAdditionalRequestHeader(CharSequence name, Object value);\n+\n+    /**\n+     * Mutates the {@link HttpHeaders} which will be included when a {@link Client} sends\n+     * an {@link HttpRequest}.\n      *\n      * @param mutator the {@link Consumer} that mutates the additional request headers\n      */\n"}}, {"oid": "c0c45c2f4787d5f17dc22a864755f2b6b18433b9", "url": "https://github.com/line/armeria/commit/c0c45c2f4787d5f17dc22a864755f2b6b18433b9", "message": "Address comments by @trustin", "committedDate": "2020-03-10T01:13:33Z", "type": "commit"}, {"oid": "ca6bac11c1c4ca2ae90f098a6e6604e273b078d4", "url": "https://github.com/line/armeria/commit/ca6bac11c1c4ca2ae90f098a6e6604e273b078d4", "message": "Fix doc", "committedDate": "2020-03-10T01:16:51Z", "type": "commit"}]}