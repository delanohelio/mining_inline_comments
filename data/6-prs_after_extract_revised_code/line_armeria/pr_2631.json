{"pr_number": 2631, "pr_title": "Do not encode response when the status indicates empty content", "pr_createdAt": "2020-03-26T09:28:49Z", "pr_url": "https://github.com/line/armeria/pull/2631", "timeline": [{"oid": "5995752691eee01ae32f582225b36a2931e87d30", "url": "https://github.com/line/armeria/commit/5995752691eee01ae32f582225b36a2931e87d30", "message": "Fix not to encode response when the status indicates the content is empty\nMotivation:\n`EncodingService` should not try to encode the body when the status indicates that the content it empty.\n\nModifications:\n- Check the status if it indicates the content is empty in `EncodingService`.\n- Downgrade Micrometer to 1.3.6 becuase 1.4.0 is Non-LTS.\n\nResult:\n- `EncodingService` does not encode the content when the status is 204, 205 and 304", "committedDate": "2020-03-26T09:18:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NTE1Mw==", "url": "https://github.com/line/armeria/pull/2631#discussion_r398455153", "bodyText": "Just wondering is this change enough to fix the issue?", "author": "anuraaga", "createdAt": "2020-03-26T10:12:10Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -180,12 +182,19 @@ public void onNext(HttpObject o) {\n                 break;\n             }\n             case NEEDS_TRAILERS: {\n-                if (o instanceof HttpData || o instanceof ResponseHeaders) {\n+                if (o instanceof ResponseHeaders) {\n                     failAndRespond(new IllegalStateException(\n-                            \"published an HttpData or a ResponseHeaders: \" + o +\n+                            \"published a ResponseHeaders: \" + o +\n                             \" (expected: an HTTP trailers). service: \" + service()));\n                     return;\n                 }\n+                if (o instanceof HttpData) {", "originalCommit": "5995752691eee01ae32f582225b36a2931e87d30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NTI0OQ==", "url": "https://github.com/line/armeria/pull/2631#discussion_r398465249", "bodyText": "I think so. Instead of resetting, we can just ignore the content and call subscription.request(1) so that the response is completed in onComplete.", "author": "minwoox", "createdAt": "2020-03-26T10:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NTE1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NTQ2Mw==", "url": "https://github.com/line/armeria/pull/2631#discussion_r398455463", "bodyText": "Can we move this check to shouldEncodeResponse?", "author": "anuraaga", "createdAt": "2020-03-26T10:12:41Z", "path": "core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java", "diffHunk": "@@ -76,8 +76,8 @@ protected HttpObject filter(HttpObject obj) {\n             final ResponseHeaders headers = (ResponseHeaders) obj;\n \n             // Skip informational headers.\n-            final String status = headers.get(HttpHeaderNames.STATUS);\n-            if (ArmeriaHttpUtil.isInformational(status)) {\n+            final HttpStatus status = headers.status();\n+            if (status.isInformational() || status.isContentAlwaysEmpty()) {", "originalCommit": "5995752691eee01ae32f582225b36a2931e87d30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2OTI0MQ==", "url": "https://github.com/line/armeria/pull/2631#discussion_r398469241", "bodyText": "Ah thanks. It should be.", "author": "minwoox", "createdAt": "2020-03-26T10:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NTQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "432f665ffe26da4fd287289effd8e05cd6f6453f", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java b/core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java\nindex 003c62c0d6..0a3e139b29 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java\n\n@@ -77,7 +77,7 @@ class HttpEncodedResponse extends FilteredHttpResponse {\n \n             // Skip informational headers.\n             final HttpStatus status = headers.status();\n-            if (status.isInformational() || status.isContentAlwaysEmpty()) {\n+            if (status.isInformational()) {\n                 return obj;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NjExOA==", "url": "https://github.com/line/armeria/pull/2631#discussion_r398456118", "bodyText": "// HTTP does not allow a payload with a CONTINUE status, make sure we ignore it.", "author": "anuraaga", "createdAt": "2020-03-26T10:13:47Z", "path": "core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+public class HttpResponseSubscriberTest {\n+\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(\"/\", (ctx, req) -> {\n+                final ResponseHeaders headers = ResponseHeaders.builder(HttpStatus.NO_CONTENT).contentType(\n+                        MediaType.PLAIN_TEXT_UTF_8).build();\n+                // Add CONTINUE not to validate when creating HttpResponse.", "originalCommit": "5995752691eee01ae32f582225b36a2931e87d30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2ODA0OA==", "url": "https://github.com/line/armeria/pull/2631#discussion_r398468048", "bodyText": "Actually, I added CONTINUE to call static HttpResponse of(HttpObject... objs) {...}, let me rephrase a little bit.", "author": "minwoox", "createdAt": "2020-03-26T10:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NjExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2OTEwNw==", "url": "https://github.com/line/armeria/pull/2631#discussion_r398469107", "bodyText": "Removed the comment and use streaming() \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-26T10:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NjExOA=="}], "type": "inlineReview", "revised_code": {"commit": "432f665ffe26da4fd287289effd8e05cd6f6453f", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java b/core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java\nindex db0f0ff82b..c558a3c5d6 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java\n\n@@ -25,6 +25,7 @@ import com.linecorp.armeria.client.WebClient;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseWriter;\n import com.linecorp.armeria.common.HttpStatus;\n import com.linecorp.armeria.common.MediaType;\n import com.linecorp.armeria.common.ResponseHeaders;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1NjI3Mw==", "url": "https://github.com/line/armeria/pull/2631#discussion_r398456273", "bodyText": "DoesNot", "author": "anuraaga", "createdAt": "2020-03-26T10:14:02Z", "path": "core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+public class HttpResponseSubscriberTest {\n+\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(\"/\", (ctx, req) -> {\n+                final ResponseHeaders headers = ResponseHeaders.builder(HttpStatus.NO_CONTENT).contentType(\n+                        MediaType.PLAIN_TEXT_UTF_8).build();\n+                // Add CONTINUE not to validate when creating HttpResponse.\n+                return HttpResponse.of(ResponseHeaders.of(HttpStatus.CONTINUE), headers,\n+                                       HttpData.ofUtf8(\"foo\"));\n+            });\n+        }\n+    };\n+\n+    @Test\n+    void httpResponseSubscriberDoNotThrowExceptionWhenContentIsNotEmpty() {", "originalCommit": "5995752691eee01ae32f582225b36a2931e87d30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "432f665ffe26da4fd287289effd8e05cd6f6453f", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java b/core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java\nindex db0f0ff82b..c558a3c5d6 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java\n\n@@ -25,6 +25,7 @@ import com.linecorp.armeria.client.WebClient;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseWriter;\n import com.linecorp.armeria.common.HttpStatus;\n import com.linecorp.armeria.common.MediaType;\n import com.linecorp.armeria.common.ResponseHeaders;\n"}}, {"oid": "432f665ffe26da4fd287289effd8e05cd6f6453f", "url": "https://github.com/line/armeria/commit/432f665ffe26da4fd287289effd8e05cd6f6453f", "message": "Address comments by @anuraaga", "committedDate": "2020-03-26T10:35:36Z", "type": "commit"}, {"oid": "94116dffbdd471360b2ae91691205321274478d2", "url": "https://github.com/line/armeria/commit/94116dffbdd471360b2ae91691205321274478d2", "message": "Fix", "committedDate": "2020-03-26T10:46:38Z", "type": "commit"}]}