{"pr_number": 2933, "pr_title": "Add human-readable route string for Route", "pr_createdAt": "2020-07-23T10:23:43Z", "pr_url": "https://github.com/line/armeria/pull/2933", "timeline": [{"oid": "c999198d3a038b4a8350a645500261641725d7e0", "url": "https://github.com/line/armeria/commit/c999198d3a038b4a8350a645500261641725d7e0", "message": "Add human-readable route string for Route\n\nMotivation:\n\n`Route.meterTag()` is not suitable for span name or url pattern.\nBecause it contains extra information such as `exact:` or `prefix:`.\nSee #2932 for the detail information.\n\n`Route.loggerName()` and `Route.meterTag()` are not used internally anymore.\nI think users could replace them with new methods like `RequestLog.name()`,\n`RequestLog.serviceName()` or `Route.pathPattern()`.\n\nModifications:\n\n- Add `pathPattern()` method to `Route`, `PathMapping` and their subclasses.\n  The `pathPattern()` will return a route string according to the `Route.pathType()`\n  - `RoutePathType.EXACT` - \"/foo\" or \"/foo/bar\"\n  - `RoutePathType.PREFIX` - \"/foo/*\"\n  - `RoutePathType.PARAMETERIZED` - \"/foo/:bar\" or \"/foo/:bar/:qux\n  - `RoutePathType.REGEX` - \"/**/foo\"\n  - `RoutePathType.REGEX_WITH_PREFIX` - \"/foo/**/bar\"\n- Deprecate `meterTag()` and `loggerName()` in `Route` and `PathMapping`\n\nResult:\n\n- You can now get a human-readable route string using `Route.pathPattern()`\n- Fixes #2932", "committedDate": "2020-07-23T10:22:08Z", "type": "commit"}, {"oid": "7c21b4436a27482133e345dd573fabf407521484", "url": "https://github.com/line/armeria/commit/7c21b4436a27482133e345dd573fabf407521484", "message": "Fix Javadoc", "committedDate": "2020-07-23T10:26:45Z", "type": "commit"}, {"oid": "ea559c7d91a2808aeec795fec8944b6edf1a5672", "url": "https://github.com/line/armeria/commit/ea559c7d91a2808aeec795fec8944b6edf1a5672", "message": "Migrate ServiceRequestContextAdapter.route()", "committedDate": "2020-07-23T10:43:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNTE5MA==", "url": "https://github.com/line/armeria/pull/2933#discussion_r459815190", "bodyText": "How is regex translated into **?", "author": "trustin", "createdAt": "2020-07-24T01:41:46Z", "path": "core/src/main/java/com/linecorp/armeria/server/PathMapping.java", "diffHunk": "@@ -48,14 +50,36 @@\n      * Returns the logger name.\n      *\n      * @return the logger name whose components are separated by a dot (.)\n+     *\n+     * @deprecated Use {@link RequestLog#name()}, {@link RequestLog#serviceName()} or\n+     *             {@link Route#pathPattern()}.\n      */\n+    @Deprecated\n     String loggerName();\n \n     /**\n      * Returns the value of the {@link Tag} in a {@link Meter} of this {@link PathMapping}.\n+     *\n+     * @deprecated Use {@link RequestLog#name()}, {@link RequestLog#serviceName()} or\n+     *             {@link Route#pathPattern()}.\n      */\n+    @Deprecated\n     String meterTag();\n \n+    /**\n+     * Returns the path pattern of this {@link PathMapping}. The returned path pattern is different according to\n+     * the value of {@link #pathType()}.\n+     *\n+     * <ul>\n+     *   <li>{@linkplain RoutePathType#EXACT EXACT}: {@code \"/foo\" or \"/foo/bar\"}</li>\n+     *   <li>{@linkplain RoutePathType#PREFIX PREFIX}: {@code \"/foo/*\"}</li>\n+     *   <li>{@linkplain RoutePathType#PARAMETERIZED PARAMETERIZED}: {@code \"/foo/:bar\" or \"/foo/:bar/:qux}</li>\n+     *   <li>{@linkplain RoutePathType#REGEX REGEX}: {@code \"/*&#42;/foo\" }</li>\n+     *   <li>{@linkplain RoutePathType#REGEX_WITH_PREFIX REGEX_WITH_PREFIX}: {@code \"/foo/*&#42;/bar\" }</li>", "originalCommit": "ea559c7d91a2808aeec795fec8944b6edf1a5672", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMTY2Ng==", "url": "https://github.com/line/armeria/pull/2933#discussion_r459821666", "bodyText": "Ah, it is glob... \ud83d\ude05", "author": "ikhoon", "createdAt": "2020-07-24T02:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNTE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "7a2124a7b4f54f622cbe1deaae4f565ff343e0a4", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/PathMapping.java b/core/src/main/java/com/linecorp/armeria/server/PathMapping.java\nindex 9c030dfba..b34047552 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/PathMapping.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/PathMapping.java\n\n@@ -74,8 +74,23 @@ interface PathMapping {\n      *   <li>{@linkplain RoutePathType#EXACT EXACT}: {@code \"/foo\" or \"/foo/bar\"}</li>\n      *   <li>{@linkplain RoutePathType#PREFIX PREFIX}: {@code \"/foo/*\"}</li>\n      *   <li>{@linkplain RoutePathType#PARAMETERIZED PARAMETERIZED}: {@code \"/foo/:bar\" or \"/foo/:bar/:qux}</li>\n-     *   <li>{@linkplain RoutePathType#REGEX REGEX}: {@code \"/*&#42;/foo\" }</li>\n-     *   <li>{@linkplain RoutePathType#REGEX_WITH_PREFIX REGEX_WITH_PREFIX}: {@code \"/foo/*&#42;/bar\" }</li>\n+     *   <li>{@linkplain RoutePathType#REGEX REGEX} may have a glob pattern or a regular expression:\n+     *     <ul>\n+     *       <li><code>\"/*&#42;/foo\"</code> if the {@link Route} was created using\n+     *           {@link RouteBuilder#glob(String)}</li>\n+     *       <li>{@code \"^/(?(.+)/)?foo$\"} if the {@link Route} was created using\n+     *           {@link RouteBuilder#regex(String)}</li>\n+     *     </ul>\n+     *   </li>\n+     *   <li>{@linkplain RoutePathType#REGEX_WITH_PREFIX REGEX_WITH_PREFIX} may have a glob pattern or\n+     *       a regular expression with a prefix:\n+     *     <ul>\n+     *       <li>{@code \"/foo/bar/**\"} if the {@link Route} was created using\n+     *           {@code RouteBuilder.path(\"/foo/\", \"glob:/bar/**\")}</li>\n+     *       <li>{@code \"/foo/(bar|baz)\"} if the {@link Route} was created using\n+     *           {@code RouteBuilder.path(\"/foo/\", \"regex:/(bar|baz)\")}</li>\n+     *     </ul>\n+     *   </li>\n      * </ul>\n      */\n     String pathPattern();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNTQwMw==", "url": "https://github.com/line/armeria/pull/2933#discussion_r459815403", "bodyText": "How about renaming this? We currently use the term pathPattern for the path patterns a user specify when binding a service and it has different format from this.", "author": "trustin", "createdAt": "2020-07-24T01:42:56Z", "path": "core/src/main/java/com/linecorp/armeria/server/PathMapping.java", "diffHunk": "@@ -48,14 +50,36 @@\n      * Returns the logger name.\n      *\n      * @return the logger name whose components are separated by a dot (.)\n+     *\n+     * @deprecated Use {@link RequestLog#name()}, {@link RequestLog#serviceName()} or\n+     *             {@link Route#pathPattern()}.\n      */\n+    @Deprecated\n     String loggerName();\n \n     /**\n      * Returns the value of the {@link Tag} in a {@link Meter} of this {@link PathMapping}.\n+     *\n+     * @deprecated Use {@link RequestLog#name()}, {@link RequestLog#serviceName()} or\n+     *             {@link Route#pathPattern()}.\n      */\n+    @Deprecated\n     String meterTag();\n \n+    /**\n+     * Returns the path pattern of this {@link PathMapping}. The returned path pattern is different according to\n+     * the value of {@link #pathType()}.\n+     *\n+     * <ul>\n+     *   <li>{@linkplain RoutePathType#EXACT EXACT}: {@code \"/foo\" or \"/foo/bar\"}</li>\n+     *   <li>{@linkplain RoutePathType#PREFIX PREFIX}: {@code \"/foo/*\"}</li>\n+     *   <li>{@linkplain RoutePathType#PARAMETERIZED PARAMETERIZED}: {@code \"/foo/:bar\" or \"/foo/:bar/:qux}</li>\n+     *   <li>{@linkplain RoutePathType#REGEX REGEX}: {@code \"/*&#42;/foo\" }</li>\n+     *   <li>{@linkplain RoutePathType#REGEX_WITH_PREFIX REGEX_WITH_PREFIX}: {@code \"/foo/*&#42;/bar\" }</li>\n+     * </ul>\n+     */\n+    String pathPattern();", "originalCommit": "ea559c7d91a2808aeec795fec8944b6edf1a5672", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMjgzNg==", "url": "https://github.com/line/armeria/pull/2933#discussion_r459822836", "bodyText": "Users usually access this method by Route. Let me think more about which name goes well with Route. \ud83e\udd14", "author": "ikhoon", "createdAt": "2020-07-24T02:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNTQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMzQ0Mw==", "url": "https://github.com/line/armeria/pull/2933#discussion_r459823443", "bodyText": "How about patternString()?", "author": "ikhoon", "createdAt": "2020-07-24T02:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNTQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MzgwMQ==", "url": "https://github.com/line/armeria/pull/2933#discussion_r459843801", "bodyText": "That sounds good, I think webflux uses getPatternString", "author": "anuraaga", "createdAt": "2020-07-24T04:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNTQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "7a2124a7b4f54f622cbe1deaae4f565ff343e0a4", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/PathMapping.java b/core/src/main/java/com/linecorp/armeria/server/PathMapping.java\nindex 9c030dfba..b34047552 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/PathMapping.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/PathMapping.java\n\n@@ -74,8 +74,23 @@ interface PathMapping {\n      *   <li>{@linkplain RoutePathType#EXACT EXACT}: {@code \"/foo\" or \"/foo/bar\"}</li>\n      *   <li>{@linkplain RoutePathType#PREFIX PREFIX}: {@code \"/foo/*\"}</li>\n      *   <li>{@linkplain RoutePathType#PARAMETERIZED PARAMETERIZED}: {@code \"/foo/:bar\" or \"/foo/:bar/:qux}</li>\n-     *   <li>{@linkplain RoutePathType#REGEX REGEX}: {@code \"/*&#42;/foo\" }</li>\n-     *   <li>{@linkplain RoutePathType#REGEX_WITH_PREFIX REGEX_WITH_PREFIX}: {@code \"/foo/*&#42;/bar\" }</li>\n+     *   <li>{@linkplain RoutePathType#REGEX REGEX} may have a glob pattern or a regular expression:\n+     *     <ul>\n+     *       <li><code>\"/*&#42;/foo\"</code> if the {@link Route} was created using\n+     *           {@link RouteBuilder#glob(String)}</li>\n+     *       <li>{@code \"^/(?(.+)/)?foo$\"} if the {@link Route} was created using\n+     *           {@link RouteBuilder#regex(String)}</li>\n+     *     </ul>\n+     *   </li>\n+     *   <li>{@linkplain RoutePathType#REGEX_WITH_PREFIX REGEX_WITH_PREFIX} may have a glob pattern or\n+     *       a regular expression with a prefix:\n+     *     <ul>\n+     *       <li>{@code \"/foo/bar/**\"} if the {@link Route} was created using\n+     *           {@code RouteBuilder.path(\"/foo/\", \"glob:/bar/**\")}</li>\n+     *       <li>{@code \"/foo/(bar|baz)\"} if the {@link Route} was created using\n+     *           {@code RouteBuilder.path(\"/foo/\", \"regex:/(bar|baz)\")}</li>\n+     *     </ul>\n+     *   </li>\n      * </ul>\n      */\n     String pathPattern();\n"}}, {"oid": "7a2124a7b4f54f622cbe1deaae4f565ff343e0a4", "url": "https://github.com/line/armeria/commit/7a2124a7b4f54f622cbe1deaae4f565ff343e0a4", "message": "Update Javadoc", "committedDate": "2020-07-24T04:07:54Z", "type": "commit"}, {"oid": "f47751f4ef9bfce492317478f78c56725c88074f", "url": "https://github.com/line/armeria/commit/f47751f4ef9bfce492317478f78c56725c88074f", "message": "Rename pathPattern to patternString", "committedDate": "2020-07-24T05:49:36Z", "type": "commit"}]}