{"pr_number": 2930, "pr_title": "Fix a bug where grpc-web trailers not compressed", "pr_createdAt": "2020-07-22T11:58:40Z", "pr_url": "https://github.com/line/armeria/pull/2930", "timeline": [{"oid": "c8431708a0fef023556d9cff290412d40e9183c8", "url": "https://github.com/line/armeria/commit/c8431708a0fef023556d9cff290412d40e9183c8", "message": "Fix a bug where grpc-web trailers not compressed\nMotivation:\nI found a bug while I was implementing it test with akka grpc.\nThe spec says:\n```\n10000000b: an uncompressed trailer (as part of the body)\n10000001b: a compressed trailer\n```\nwhich means that the grpc-web trailers can be compressed.\nBut our logic does not take account of it.\n\nModifications:\n- Compress grpc-web trailers if the response is sent with the headers which indicates the message will be compressed.\n- Decompress grpc-web trailers in the client if it's compressed.\n\nResult:\n- You can now recieve the compressed grpc-web trailers.\n\nTo-do:\n- Support decompression in `GrpcWebUtil` for retrying.", "committedDate": "2020-07-22T11:55:32Z", "type": "commit"}, {"oid": "54948891e03adc9b43bf4a3c42eab576623b199a", "url": "https://github.com/line/armeria/commit/54948891e03adc9b43bf4a3c42eab576623b199a", "message": "Fix import", "committedDate": "2020-07-22T14:06:15Z", "type": "commit"}, {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10", "url": "https://github.com/line/armeria/commit/34346d7ab3327488db9b5c78d320248a90cacc10", "message": "Set endOfStream inside", "committedDate": "2020-07-23T00:02:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NDkyMg==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459184922", "bodyText": "Is it OK to move this class to the internal package? /cc @anuraaga @adriancole", "author": "trustin", "createdAt": "2020-07-23T02:32:21Z", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/internal/common/grpc/protocol/GrpcTrailersUtil.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.grpc.protocol;\n+\n+import static io.netty.util.AsciiString.c2b;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.grpc.protocol.StatusMessageEscaper;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Utility for creating response trailers for a gRPC status. Trailers are only returned from a server.\n+ */\n+public final class GrpcTrailersUtil {", "originalCommit": "34346d7ab3327488db9b5c78d320248a90cacc10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NzEyNw==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459187127", "bodyText": "I thought there are not so much chances a user calls statusToTrailers, but I was not 100% sure. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-07-23T02:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NDkyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTgzNg==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459185836", "bodyText": "Any reason to use a composite buffer? Probably better using buffer() with sensible initial capacity.", "author": "trustin", "createdAt": "2020-07-23T02:36:35Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -317,9 +321,25 @@ public synchronized void setMessageCompression(boolean enabled) {\n     public void messageRead(DeframedMessage message) {\n         if (isGrpcWeb && message.type() >> 7 == 1) {\n             // grpc-web trailers\n-            final ByteBuf buf = message.buf();\n-            // trailers never compressed\n-            assert buf != null;\n+            final ByteBuf messageBuf = message.buf();\n+            final ByteBuf buf;\n+            if (messageBuf != null) {\n+                buf = messageBuf;\n+            } else {\n+                buf = ctx.alloc().compositeBuffer();", "originalCommit": "34346d7ab3327488db9b5c78d320248a90cacc10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzI2MA==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459193260", "bodyText": "It is hard to know about the sensible initial capacity because I do not know how much it's expanded after decompression.\nAll other logic uses the composite buffer, so I followed it.\nCan I revisit this later to optimize this?", "author": "minwoox", "createdAt": "2020-07-23T03:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NTgwMQ==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459195801", "bodyText": "Added TODO. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-07-23T03:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMjM0OA==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459212348", "bodyText": "SGTM", "author": "trustin", "createdAt": "2020-07-23T04:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "2791325a945697c7b8885daa4ac2ca7da2e154a2", "chunk": "diff --git a/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java b/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java\nindex df64dee3f6..9ec83b60ef 100644\n--- a/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java\n+++ b/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java\n\n@@ -326,6 +326,7 @@ final class ArmeriaClientCall<I, O> extends ClientCall<I, O>\n             if (messageBuf != null) {\n                 buf = messageBuf;\n             } else {\n+                // TODO(minwoox) Optimize this by creating buffer with the sensible initial capacity.\n                 buf = ctx.alloc().compositeBuffer();\n                 boolean success = false;\n                 try (ByteBufOutputStream os = new ByteBufOutputStream(buf)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTg4Ng==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459185886", "bodyText": "Ditto", "author": "trustin", "createdAt": "2020-07-23T02:36:50Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshaller.java", "diffHunk": "@@ -206,7 +206,7 @@ public O deserializeResponse(DeframedMessage message) throws IOException {\n             }\n             return buf;\n         } else {\n-            final ByteBuf buf = alloc.buffer();\n+            final ByteBuf buf = alloc.compositeBuffer();", "originalCommit": "34346d7ab3327488db9b5c78d320248a90cacc10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2791325a945697c7b8885daa4ac2ca7da2e154a2", "chunk": "diff --git a/grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshaller.java b/grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshaller.java\nindex 09f1ee69ab..fdd4680564 100644\n--- a/grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshaller.java\n+++ b/grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshaller.java\n\n@@ -206,6 +208,7 @@ public final class GrpcMessageMarshaller<I, O> {\n             }\n             return buf;\n         } else {\n+            // TODO(minwoox) Optimize this by creating buffer with the sensible initial capacity.\n             final ByteBuf buf = alloc.compositeBuffer();\n             boolean success = false;\n             try (ByteBufOutputStream os = new ByteBufOutputStream(buf)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjExNA==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459186114", "bodyText": "\ud83d\ude31", "author": "trustin", "createdAt": "2020-07-23T02:37:59Z", "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "diffHunk": "@@ -175,8 +175,8 @@ public void close(Status status, Metadata trailers) {\n                                        .setMaxOutboundMessageSizeBytes(MAX_MESSAGE_SIZE)\n                                        .useClientTimeoutHeader(false)\n                                        .build()\n-                                       .decorate((client, ctx, req) -> {\n-                                           final HttpResponse res = client.serve(ctx, req);", "originalCommit": "34346d7ab3327488db9b5c78d320248a90cacc10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjMzNg==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459186336", "bodyText": "Maybe better reverting this? Is it too noisy?", "author": "trustin", "createdAt": "2020-07-23T02:39:02Z", "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "diffHunk": "@@ -211,11 +211,9 @@ void setUp() {\n         final URI uri = server.httpUri(GrpcSerializationFormats.PROTO);\n         blockingStub = Clients.builder(uri)\n                               .maxResponseLength(MAX_MESSAGE_SIZE)\n-                              .decorator(LoggingClient.builder().newDecorator())", "originalCommit": "34346d7ab3327488db9b5c78d320248a90cacc10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NzMyMw==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459187323", "bodyText": "Yes, and it makes the IntelliJ stuck. \ud83d\ude31", "author": "minwoox", "createdAt": "2020-07-23T02:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTgzMg==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459189832", "bodyText": "Or set the log level to TRACE?", "author": "ikhoon", "createdAt": "2020-07-23T02:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzU1NQ==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459193555", "bodyText": "Let me just remove this. If we need if for debugging we can easily add it. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-07-23T03:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjMzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4Nzg5Nw==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459187897", "bodyText": "nit: How about introducing a new method such as writeWebTrailers(ByteBuf message) so that you don't need to put false every where?", "author": "ikhoon", "createdAt": "2020-07-23T02:46:34Z", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -104,19 +110,23 @@ public ArmeriaMessageFramer(ByteBufAllocator alloc, int maxOutboundMessageSize)\n      * Writes out a payload message.\n      *\n      * @param message the message to be written out. Ownership is taken by {@link ArmeriaMessageFramer}.\n+     * @param webTrailers tells whether the payload is web trailers\n      *\n      * @return an {@link HttpData} with the framed payload. Ownership is passed to caller.\n      */\n-    public HttpData writePayload(ByteBuf message) {\n+    public HttpData writePayload(ByteBuf message, boolean webTrailers) {", "originalCommit": "34346d7ab3327488db9b5c78d320248a90cacc10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDgyOQ==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459194829", "bodyText": "That's a good idea. Added!", "author": "minwoox", "createdAt": "2020-07-23T03:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4Nzg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c822ddb0b5bf96e15b06c6c2374ad58cf74788e7", "chunk": "diff --git a/grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java b/grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java\nindex 50b378b1fe..4e9eaf72e6 100644\n--- a/grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java\n+++ b/grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java\n\n@@ -110,10 +110,22 @@ public class ArmeriaMessageFramer implements AutoCloseable {\n      * Writes out a payload message.\n      *\n      * @param message the message to be written out. Ownership is taken by {@link ArmeriaMessageFramer}.\n-     * @param webTrailers tells whether the payload is web trailers\n      *\n      * @return an {@link HttpData} with the framed payload. Ownership is passed to caller.\n      */\n+    public HttpData writePayload(ByteBuf message) {\n+        return writePayload(message, false);\n+    }\n+\n+    /**\n+     * Writes out a payload message.\n+     *\n+     * @param message the message to be written out. Ownership is taken by {@link ArmeriaMessageFramer}.\n+     * @param webTrailers tells whether the payload is web trailers\n+     *\n+     * @return an {@link HttpData} with the framed payload. Ownership is passed to caller. If the specified\n+     *         {@code webTrailers} is {@code true}, {@link HttpData#isEndOfStream()} returns {@code true}.\n+     */\n     public HttpData writePayload(ByteBuf message, boolean webTrailers) {\n         verifyNotClosed();\n         final boolean compressed = messageCompression && compressor != null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MjEzNg==", "url": "https://github.com/line/armeria/pull/2930#discussion_r459192136", "bodyText": "\ud83d\ude31", "author": "ikhoon", "createdAt": "2020-07-23T03:07:22Z", "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebRetryTest.java", "diffHunk": "@@ -112,8 +112,8 @@ void emptyCall(SerializationFormat serializationFormat) {\n                        .build(TestServiceBlockingStub.class);\n \n         try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {\n-            final SimpleResponse result = client.unaryCall(SimpleRequest.newBuilder().build());\n-            assertThat(result.getUsername()).isEqualTo(\"my name\");\n+            final Empty result = client.emptyCall(Empty.newBuilder().build());\n+            assertThat(result).isEqualTo(Empty.getDefaultInstance());", "originalCommit": "34346d7ab3327488db9b5c78d320248a90cacc10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c822ddb0b5bf96e15b06c6c2374ad58cf74788e7", "url": "https://github.com/line/armeria/commit/c822ddb0b5bf96e15b06c6c2374ad58cf74788e7", "message": "Address the comment by @ikhoon", "committedDate": "2020-07-23T03:19:33Z", "type": "commit"}, {"oid": "2791325a945697c7b8885daa4ac2ca7da2e154a2", "url": "https://github.com/line/armeria/commit/2791325a945697c7b8885daa4ac2ca7da2e154a2", "message": "Add TODOs", "committedDate": "2020-07-23T03:24:12Z", "type": "commit"}, {"oid": "ae8a94239b1c50ffdcee98186bc742eaecef0d97", "url": "https://github.com/line/armeria/commit/ae8a94239b1c50ffdcee98186bc742eaecef0d97", "message": "Remove one todo", "committedDate": "2020-07-23T03:37:09Z", "type": "commit"}]}