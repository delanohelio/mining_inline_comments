{"pr_number": 2398, "pr_title": "Don't fail to start server when version info can't be found.", "pr_createdAt": "2020-01-15T04:59:01Z", "pr_url": "https://github.com/line/armeria/pull/2398", "timeline": [{"oid": "0761441c2eaeec6c0d453ccd04ef5cc155619f6d", "url": "https://github.com/line/armeria/commit/0761441c2eaeec6c0d453ccd04ef5cc155619f6d", "message": "Don't fail to start server when version info can't be found.", "committedDate": "2020-01-15T04:58:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwODM2Ng==", "url": "https://github.com/line/armeria/pull/2398#discussion_r366708366", "bodyText": "jar -> JAR?", "author": "trustin", "createdAt": "2020-01-15T06:07:49Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -89,61 +99,76 @@\n     public static Map<String, Version> identify(ClassLoader classLoader) {\n         requireNonNull(classLoader, \"classLoader\");\n \n-        // Collect all properties.\n-        final Properties props = new Properties();\n-        try {\n-            final Enumeration<URL> resources = classLoader.getResources(PROP_RESOURCE_PATH);\n-            while (resources.hasMoreElements()) {\n-                final URL url = resources.nextElement();\n-                final InputStream in = url.openStream();\n-                try {\n-                    props.load(in);\n-                } finally {\n-                    Closeables.closeQuietly(in);\n+        return VERSIONS.computeIfAbsent(classLoader, cl -> {\n+            boolean foundProperties = false;\n+\n+            // Collect all properties.\n+            final Properties props = new Properties();\n+            try {\n+                final Enumeration<URL> resources = cl.getResources(PROP_RESOURCE_PATH);\n+                while (resources.hasMoreElements()) {\n+                    foundProperties = true;\n+                    final URL url = resources.nextElement();\n+                    final InputStream in = url.openStream();\n+                    try {\n+                        props.load(in);\n+                    } finally {\n+                        Closeables.closeQuietly(in);\n+                    }\n                 }\n+            } catch (Exception ignore) {\n+                // Not critical. Just ignore.\n             }\n-        } catch (Exception ignore) {\n-            // Not critical. Just ignore.\n-        }\n \n-        // Collect all artifactIds.\n-        final Set<String> artifactIds = new HashSet<>();\n-        for (Object o: props.keySet()) {\n-            final String k = (String) o;\n-\n-            final int dotIndex = k.indexOf('.');\n-            if (dotIndex <= 0) {\n-                continue;\n+            if (!foundProperties) {\n+                logger.info(\n+                        \"Could not find any property files at \" +\n+                        \"META-INF/com.linecorp.armeria.versions.properties. \" +\n+                        \"This usually indicates an issue with your application packaging, for example using \" +\n+                        \"a fat-jar method that only keeps one copy of any file. For maximum functionality, \" +", "originalCommit": "0761441c2eaeec6c0d453ccd04ef5cc155619f6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15ba002a86c44da6e34db46a57da753bf0a1e0c5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/util/Version.java b/core/src/main/java/com/linecorp/armeria/common/util/Version.java\nindex 4ff8a49fcd..d39d5a525a 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/util/Version.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/util/Version.java\n\n@@ -125,14 +152,14 @@ public final class Version {\n                         \"Could not find any property files at \" +\n                         \"META-INF/com.linecorp.armeria.versions.properties. \" +\n                         \"This usually indicates an issue with your application packaging, for example using \" +\n-                        \"a fat-jar method that only keeps one copy of any file. For maximum functionality, \" +\n+                        \"a fat JAR method that only keeps one copy of any file. For maximum functionality, \" +\n                         \"it is recommended to fix your packaging to include these files.\");\n                 return ImmutableMap.of();\n             }\n \n             // Collect all artifactIds.\n             final Set<String> artifactIds = new HashSet<>();\n-            for (Object o: props.keySet()) {\n+            for (Object o : props.keySet()) {\n                 final String k = (String) o;\n \n                 final int dotIndex = k.indexOf('.');\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwODU1Ng==", "url": "https://github.com/line/armeria/pull/2398#discussion_r366708556", "bodyText": "Should we fall back to the values like UNKNOWN?", "author": "trustin", "createdAt": "2020-01-15T06:08:37Z", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -317,21 +317,23 @@ public int numConnections() {\n     @VisibleForTesting\n     void setupVersionMetrics() {\n         final MeterRegistry meterRegistry = config().meterRegistry();\n-        final Map<String, Version> map = Version.identify(getClass().getClassLoader());\n+        final Map<String, Version> map = Version.identify(Server.class.getClassLoader());\n         final Version versionInfo = map.get(\"armeria\");\n-        final String version = versionInfo.artifactVersion();\n-        final String commit = versionInfo.longCommitHash();\n-        final String repositoryStatus = versionInfo.repositoryStatus();\n-        final List<Tag> tags = ImmutableList.of(Tag.of(\"version\", version),\n-                                                Tag.of(\"commit\", commit),\n-                                                Tag.of(Flags.useLegacyMeterNames() ? \"repoStatus\"\n-                                                                                   : \"repo.status\",\n-                                                       repositoryStatus));\n-        Gauge.builder(\"armeria.build.info\", () -> 1)\n-             .tags(tags)\n-             .description(\"A metric with a constant '1' value labeled by version and commit hash\" +\n-                          \" from which Armeria was built.\")\n-             .register(meterRegistry);\n+        if (versionInfo != null) {\n+            final String version = versionInfo.artifactVersion();\n+            final String commit = versionInfo.longCommitHash();\n+            final String repositoryStatus = versionInfo.repositoryStatus();", "originalCommit": "0761441c2eaeec6c0d453ccd04ef5cc155619f6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NjAzNg==", "url": "https://github.com/line/armeria/pull/2398#discussion_r366766036", "bodyText": "Ah good point, went ahead and added methods that will return a default value when not found.", "author": "anuraaga", "createdAt": "2020-01-15T09:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwODU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fcd094d15a26baf9732a2f0e815336fe4334bb1a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/Server.java b/core/src/main/java/com/linecorp/armeria/server/Server.java\nindex 1c946b26a1..82616c5ff8 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/Server.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/Server.java\n\n@@ -317,23 +317,20 @@ public final class Server implements AutoCloseable {\n     @VisibleForTesting\n     void setupVersionMetrics() {\n         final MeterRegistry meterRegistry = config().meterRegistry();\n-        final Map<String, Version> map = Version.identify(Server.class.getClassLoader());\n-        final Version versionInfo = map.get(\"armeria\");\n-        if (versionInfo != null) {\n-            final String version = versionInfo.artifactVersion();\n-            final String commit = versionInfo.longCommitHash();\n-            final String repositoryStatus = versionInfo.repositoryStatus();\n-            final List<Tag> tags = ImmutableList.of(Tag.of(\"version\", version),\n-                                                    Tag.of(\"commit\", commit),\n-                                                    Tag.of(Flags.useLegacyMeterNames() ? \"repoStatus\"\n-                                                                                       : \"repo.status\",\n-                                                           repositoryStatus));\n-            Gauge.builder(\"armeria.build.info\", () -> 1)\n-                 .tags(tags)\n-                 .description(\"A metric with a constant '1' value labeled by version and commit hash\" +\n-                              \" from which Armeria was built.\")\n-                 .register(meterRegistry);\n-        }\n+        final Version versionInfo = Version.get(\"armeria\", Server.class.getClassLoader());\n+        final String version = versionInfo.artifactVersion();\n+        final String commit = versionInfo.longCommitHash();\n+        final String repositoryStatus = versionInfo.repositoryStatus();\n+        final List<Tag> tags = ImmutableList.of(Tag.of(\"version\", version),\n+                                                Tag.of(\"commit\", commit),\n+                                                Tag.of(Flags.useLegacyMeterNames() ? \"repoStatus\"\n+                                                                                   : \"repo.status\",\n+                                                       repositoryStatus));\n+        Gauge.builder(\"armeria.build.info\", () -> 1)\n+             .tags(tags)\n+             .description(\"A metric with a constant '1' value labeled by version and commit hash\" +\n+                          \" from which Armeria was built.\")\n+             .register(meterRegistry);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcxMjg0OA==", "url": "https://github.com/line/armeria/pull/2398#discussion_r366712848", "bodyText": "nit: space between o:", "author": "minwoox", "createdAt": "2020-01-15T06:30:11Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -89,61 +99,76 @@\n     public static Map<String, Version> identify(ClassLoader classLoader) {\n         requireNonNull(classLoader, \"classLoader\");\n \n-        // Collect all properties.\n-        final Properties props = new Properties();\n-        try {\n-            final Enumeration<URL> resources = classLoader.getResources(PROP_RESOURCE_PATH);\n-            while (resources.hasMoreElements()) {\n-                final URL url = resources.nextElement();\n-                final InputStream in = url.openStream();\n-                try {\n-                    props.load(in);\n-                } finally {\n-                    Closeables.closeQuietly(in);\n+        return VERSIONS.computeIfAbsent(classLoader, cl -> {\n+            boolean foundProperties = false;\n+\n+            // Collect all properties.\n+            final Properties props = new Properties();\n+            try {\n+                final Enumeration<URL> resources = cl.getResources(PROP_RESOURCE_PATH);\n+                while (resources.hasMoreElements()) {\n+                    foundProperties = true;\n+                    final URL url = resources.nextElement();\n+                    final InputStream in = url.openStream();\n+                    try {\n+                        props.load(in);\n+                    } finally {\n+                        Closeables.closeQuietly(in);\n+                    }\n                 }\n+            } catch (Exception ignore) {\n+                // Not critical. Just ignore.\n             }\n-        } catch (Exception ignore) {\n-            // Not critical. Just ignore.\n-        }\n \n-        // Collect all artifactIds.\n-        final Set<String> artifactIds = new HashSet<>();\n-        for (Object o: props.keySet()) {\n-            final String k = (String) o;\n-\n-            final int dotIndex = k.indexOf('.');\n-            if (dotIndex <= 0) {\n-                continue;\n+            if (!foundProperties) {\n+                logger.info(\n+                        \"Could not find any property files at \" +\n+                        \"META-INF/com.linecorp.armeria.versions.properties. \" +\n+                        \"This usually indicates an issue with your application packaging, for example using \" +\n+                        \"a fat-jar method that only keeps one copy of any file. For maximum functionality, \" +\n+                        \"it is recommended to fix your packaging to include these files.\");\n+                return ImmutableMap.of();\n             }\n \n-            final String artifactId = k.substring(0, dotIndex);\n+            // Collect all artifactIds.\n+            final Set<String> artifactIds = new HashSet<>();\n+            for (Object o: props.keySet()) {", "originalCommit": "0761441c2eaeec6c0d453ccd04ef5cc155619f6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15ba002a86c44da6e34db46a57da753bf0a1e0c5", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/util/Version.java b/core/src/main/java/com/linecorp/armeria/common/util/Version.java\nindex 4ff8a49fcd..d39d5a525a 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/util/Version.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/util/Version.java\n\n@@ -125,14 +152,14 @@ public final class Version {\n                         \"Could not find any property files at \" +\n                         \"META-INF/com.linecorp.armeria.versions.properties. \" +\n                         \"This usually indicates an issue with your application packaging, for example using \" +\n-                        \"a fat-jar method that only keeps one copy of any file. For maximum functionality, \" +\n+                        \"a fat JAR method that only keeps one copy of any file. For maximum functionality, \" +\n                         \"it is recommended to fix your packaging to include these files.\");\n                 return ImmutableMap.of();\n             }\n \n             // Collect all artifactIds.\n             final Set<String> artifactIds = new HashSet<>();\n-            for (Object o: props.keySet()) {\n+            for (Object o : props.keySet()) {\n                 final String k = (String) o;\n \n                 final int dotIndex = k.indexOf('.');\n"}}, {"oid": "fcd094d15a26baf9732a2f0e815336fe4334bb1a", "url": "https://github.com/line/armeria/commit/fcd094d15a26baf9732a2f0e815336fe4334bb1a", "message": "Add method to return default when not found.", "committedDate": "2020-01-15T09:17:25Z", "type": "commit"}, {"oid": "15ba002a86c44da6e34db46a57da753bf0a1e0c5", "url": "https://github.com/line/armeria/commit/15ba002a86c44da6e34db46a57da753bf0a1e0c5", "message": "Cleanups", "committedDate": "2020-01-15T09:18:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MjAxNw==", "url": "https://github.com/line/armeria/pull/2398#discussion_r366772017", "bodyText": "nit: make it singleton?", "author": "ikhoon", "createdAt": "2020-01-15T09:31:18Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -71,6 +78,36 @@\n     private static final String PROP_LONG_COMMIT_HASH = \".longCommitHash\";\n     private static final String PROP_REPO_STATUS = \".repoStatus\";\n \n+    private static final Map<ClassLoader, Map<String, Version>> VERSIONS =\n+            new MapMaker().weakKeys().makeMap();\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId}. If information for\n+     * the artifact can't be found, a default value is returned with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId) {\n+        return get(artifactId, Version.class.getClassLoader());\n+    }\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId} using the specified\n+     * {@link ClassLoader}. If information for the artifact can't be found, a default value is returned\n+     * with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId, ClassLoader classLoader) {\n+        final Version version = identify(classLoader).get(artifactId);\n+        if (version != null) {\n+            return version;\n+        }\n+        return new Version(\n+                artifactId,\n+                \"unknown\",\n+                0,\n+                \"unknown\",\n+                \"unknown\",\n+                \"unknown\");", "originalCommit": "15ba002a86c44da6e34db46a57da753bf0a1e0c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3NDc4OQ==", "url": "https://github.com/line/armeria/pull/2398#discussion_r366774789", "bodyText": "Unfortunately, it has artifactId mainly for use in DocService. I could special-case docservice itself but since this is an unexpected case, I figured it's fine to keep it simple like this.", "author": "anuraaga", "createdAt": "2020-01-15T09:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MjAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4NDUzMQ==", "url": "https://github.com/line/armeria/pull/2398#discussion_r366784531", "bodyText": "If this is mainly used for DocsService, LGTM \ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-01-15T09:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MjAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "c69b9eb823dc3490fe8d878adcbb5c03c9869bf1", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/util/Version.java b/core/src/main/java/com/linecorp/armeria/common/util/Version.java\nindex d39d5a525a..29e39091d2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/util/Version.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/util/Version.java\n\n@@ -95,7 +95,7 @@ public final class Version {\n      * with arbitrary {@code unknown} values.\n      */\n     public static Version get(String artifactId, ClassLoader classLoader) {\n-        final Version version = identify(classLoader).get(artifactId);\n+        final Version version = getAll(classLoader).get(artifactId);\n         if (version != null) {\n             return version;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MjMyMQ==", "url": "https://github.com/line/armeria/pull/2398#discussion_r366772321", "bodyText": "Nice! \ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-01-15T09:32:00Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -71,6 +78,36 @@\n     private static final String PROP_LONG_COMMIT_HASH = \".longCommitHash\";\n     private static final String PROP_REPO_STATUS = \".repoStatus\";\n \n+    private static final Map<ClassLoader, Map<String, Version>> VERSIONS =\n+            new MapMaker().weakKeys().makeMap();\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId}. If information for\n+     * the artifact can't be found, a default value is returned with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId) {\n+        return get(artifactId, Version.class.getClassLoader());\n+    }\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId} using the specified\n+     * {@link ClassLoader}. If information for the artifact can't be found, a default value is returned\n+     * with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId, ClassLoader classLoader) {", "originalCommit": "15ba002a86c44da6e34db46a57da753bf0a1e0c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c69b9eb823dc3490fe8d878adcbb5c03c9869bf1", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/util/Version.java b/core/src/main/java/com/linecorp/armeria/common/util/Version.java\nindex d39d5a525a..29e39091d2 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/util/Version.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/util/Version.java\n\n@@ -95,7 +95,7 @@ public final class Version {\n      * with arbitrary {@code unknown} values.\n      */\n     public static Version get(String artifactId, ClassLoader classLoader) {\n-        final Version version = identify(classLoader).get(artifactId);\n+        final Version version = getAll(classLoader).get(artifactId);\n         if (version != null) {\n             return version;\n         }\n"}}, {"oid": "c69b9eb823dc3490fe8d878adcbb5c03c9869bf1", "url": "https://github.com/line/armeria/commit/c69b9eb823dc3490fe8d878adcbb5c03c9869bf1", "message": "identify -> getAll", "committedDate": "2020-01-15T09:49:31Z", "type": "commit"}]}