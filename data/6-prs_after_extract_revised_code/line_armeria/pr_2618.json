{"pr_number": 2618, "pr_title": "Updates to Brave 5.11.2 and backfills tests", "pr_createdAt": "2020-03-22T04:34:36Z", "pr_url": "https://github.com/line/armeria/pull/2618", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1MzU3Ng==", "url": "https://github.com/line/armeria/pull/2618#discussion_r396053576", "bodyText": "I tried status exception with cause, but that eats the causes message in favor of the generic message from the status code.", "author": "codefromthecrypt", "createdAt": "2020-03-22T04:35:12Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: how do we set status 503 and also retain the cause's message?", "originalCommit": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5345a255d51cf9011aba116b9e5f45a4316010b7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex 7b579f15a5..ea2804da05 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -82,12 +86,12 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n             future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n \n         sb.service(\"/exception\", (ctx, req) -> {\n-            // TODO: how do we set status 503 and also retain the cause's message?\n-            throw new IllegalStateException(\"not ready\");\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n         });\n         sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n-            // TODO: how do we set status 503 and also retain the cause's message?\n-            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1MzgyNg==", "url": "https://github.com/line/armeria/pull/2618#discussion_r396053826", "bodyText": "chatted about this with @anuraaga.. maybe we can share the clock used for the log timestamps in armeria with brave perhaps..", "author": "codefromthecrypt", "createdAt": "2020-03-22T04:40:12Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n-        sb.service(\"/badrequest\", (ctx, req) -> HttpResponse.of(BAD_REQUEST));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n         sb.service(\"/child\", (ctx, req) -> {\n+            // TODO: this fails because the timestamp is out of range, eventhough it finishes before\n+            // the response is returned.\n             Tracing.currentTracer().nextSpan().name(\"child\").start().finish();\n             return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");\n         });\n-        sb.service(\"/exception\", (ctx, req) -> {\n-            throw new Exception(\"not ready\");\n+        sb.service(\"/extra\",\n+            (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                String.valueOf(req.headers().get(EXTRA_KEY))));\n+        sb.service(\"/badrequest\", (ctx, req) -> HttpResponse.of(BAD_REQUEST));\n+        sb.service(\"/child\", (ctx, req) -> {\n+            Tracing.currentTracer().nextSpan().name(\"child\").start().finish();\n+            return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");\n         });\n+\n         sb.decorator(BraveService.newDecorator(httpTracing));\n \n         server = sb.build();\n         server.start().join();\n     }\n \n+    HttpResponse asyncResponse(Consumer<CompletableFuture<HttpResponse>> completeResponse) {\n+        final CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();\n+        final HttpResponse res = HttpResponse.from(responseFuture);\n+        executorService.submit(() -> completeResponse.accept(responseFuture));\n+        return res;\n+    }\n+\n+    @Override\n+    @Test\n+    public void createsChildSpan() {\n+        // Armeria uses different timings than Tracing.clock(context) provided by Brave. This means", "originalCommit": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5345a255d51cf9011aba116b9e5f45a4316010b7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex 7b579f15a5..ea2804da05 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -82,12 +86,12 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n             future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n \n         sb.service(\"/exception\", (ctx, req) -> {\n-            // TODO: how do we set status 503 and also retain the cause's message?\n-            throw new IllegalStateException(\"not ready\");\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n         });\n         sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n-            // TODO: how do we set status 503 and also retain the cause's message?\n-            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw==", "url": "https://github.com/line/armeria/pull/2618#discussion_r396180503", "bodyText": "throw HttpResponseException.of(HttpResponse.of(HttpStatus.SERVICE_UNAVAILABLE, \"not ready\")) ?", "author": "trustin", "createdAt": "2020-03-23T01:56:47Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");", "originalCommit": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MzI1Mg==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402673252", "bodyText": "this doesn't set the exception message, only the http body (and that isn't used as the message..)", "author": "codefromthecrypt", "createdAt": "2020-04-03T00:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MzUyNg==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402673526", "bodyText": "usually there's a way to set status independent of the throwable, but this can work if we can control the message of the HttpResponseException (ex by adding a parameter) currently it has null message.", "author": "codefromthecrypt", "createdAt": "2020-04-03T00:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4NjYzNg==", "url": "https://github.com/line/armeria/pull/2618#discussion_r403886636", "bodyText": "Actually, just throwing an exception was the right way to do in this case. Sorry about the noise.", "author": "trustin", "createdAt": "2020-04-06T07:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5OTkyNw==", "url": "https://github.com/line/armeria/pull/2618#discussion_r403899927", "bodyText": "but I do want to control the status code on error.. this helps show if a default of 500 isn't accidentally assumed.", "author": "codefromthecrypt", "createdAt": "2020-04-06T08:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "5345a255d51cf9011aba116b9e5f45a4316010b7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex 7b579f15a5..ea2804da05 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -82,12 +86,12 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n             future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n \n         sb.service(\"/exception\", (ctx, req) -> {\n-            // TODO: how do we set status 503 and also retain the cause's message?\n-            throw new IllegalStateException(\"not ready\");\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n         });\n         sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n-            // TODO: how do we set status 503 and also retain the cause's message?\n-            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MTQ1OQ==", "url": "https://github.com/line/armeria/pull/2618#discussion_r396181459", "bodyText": "Nice! \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-03-23T02:02:42Z", "path": "brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java", "diffHunk": "@@ -53,9 +49,6 @@\n @RunWith(Parameterized.class)\n public class BraveClientIntegrationTest extends ITHttpAsyncClient<WebClient> {\n \n-    @Rule(order = Integer.MAX_VALUE)\n-    public TestRule globalTimeout = new DisableOnDebug(Timeout.seconds(15));", "originalCommit": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5345a255d51cf9011aba116b9e5f45a4316010b7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java\nindex 4733b93492..7db4cf7c58 100644\n--- a/brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java\n\n@@ -39,12 +43,11 @@ import com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext;\n import com.linecorp.armeria.common.util.SafeCloseable;\n import com.linecorp.armeria.server.ServiceRequestContext;\n \n-import brave.Tracing.Builder;\n+import brave.http.HttpTracing;\n import brave.propagation.StrictScopeDecorator;\n import brave.sampler.Sampler;\n import brave.test.http.ITHttpAsyncClient;\n import okhttp3.Protocol;\n-import zipkin2.Callback;\n \n @RunWith(Parameterized.class)\n public class BraveClientIntegrationTest extends ITHttpAsyncClient<WebClient> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDkxNg==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402690916", "bodyText": "can we get a constructor like this please? it will help with testing to know difference between throwable message and http body.", "author": "codefromthecrypt", "createdAt": "2020-04-03T01:42:54Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")", "originalCommit": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5236f15f8555b5dd25e4db715a9c2701301c0ae7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex ea2804da05..7b579f15a5 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -86,12 +82,12 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n             future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n \n         sb.service(\"/exception\", (ctx, req) -> {\n-            // TODO: HttpResponseException.of(status, \"not ready\")\n-            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n         });\n         sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n-            // TODO: HttpResponseException.of(status, \"not ready\")\n-            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402690993", "bodyText": "anything obvious here? the body is not in the server context.", "author": "codefromthecrypt", "createdAt": "2020-04-03T01:43:14Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n+        // TODO: these fail because the context isn't here for some reason?\n+        sb.service(\"/child\", (ctx, req) -> {", "originalCommit": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MzIyNA==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402693224", "bodyText": "I mean this lambda cannot see the trace context... neither does the one for baggage", "author": "codefromthecrypt", "createdAt": "2020-04-03T01:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0MjE4OA==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402742188", "bodyText": "Actually I'm surprised this doesn't fail, I thought we have some validation for duplicate paths /cc @minwoox @ikhoon\nWhile I'm not sure, I suspect the issue is having two services mounted at the same path /child, which I think is messing with the decoration logic.", "author": "anuraaga", "createdAt": "2020-04-03T05:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjgyMQ==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402746821", "bodyText": "I thought we have some validation for duplicate paths\n\nThe default is just warning. https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java#L199\nWe should set another handler for different behavior.", "author": "minwoox", "createdAt": "2020-04-03T05:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NzYzNw==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402747637", "bodyText": "Ah thanks now I remember, probably was a warning here then :)", "author": "anuraaga", "createdAt": "2020-04-03T05:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MDc0Nw==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402780747", "bodyText": "this test is a single child household. the other will be sold off for medical experiments", "author": "codefromthecrypt", "createdAt": "2020-04-03T07:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNjY1Mg==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402806652", "bodyText": "this duplicate made the other things fail!", "author": "codefromthecrypt", "createdAt": "2020-04-03T08:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5236f15f8555b5dd25e4db715a9c2701301c0ae7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex ea2804da05..7b579f15a5 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -86,12 +82,12 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n             future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n \n         sb.service(\"/exception\", (ctx, req) -> {\n-            // TODO: HttpResponseException.of(status, \"not ready\")\n-            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n         });\n         sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n-            // TODO: HttpResponseException.of(status, \"not ready\")\n-            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MTExMg==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402691112", "bodyText": "any hint on how to forward \"/items/:itemId\" under /nested?", "author": "codefromthecrypt", "createdAt": "2020-04-03T01:43:41Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?", "originalCommit": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNTgxMA==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402905810", "bodyText": "there's no subrouting feature so I'll leave this one out.", "author": "codefromthecrypt", "createdAt": "2020-04-03T10:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MTExMg=="}], "type": "inlineReview", "revised_code": {"commit": "5236f15f8555b5dd25e4db715a9c2701301c0ae7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex ea2804da05..7b579f15a5 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -86,12 +82,12 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n             future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n \n         sb.service(\"/exception\", (ctx, req) -> {\n-            // TODO: HttpResponseException.of(status, \"not ready\")\n-            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n         });\n         sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n-            // TODO: HttpResponseException.of(status, \"not ready\")\n-            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzY4OQ==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402913689", "bodyText": "this doesn't end up as ServiceRequestContext.responseCause()", "author": "codefromthecrypt", "createdAt": "2020-04-03T10:34:58Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,25 +69,49 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE, \"not ready\");", "originalCommit": "bc5ab3d725f5e403e9e9410146b9fd380060fb43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5236f15f8555b5dd25e4db715a9c2701301c0ae7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex 17e4b6bb1d..7b579f15a5 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -73,10 +82,12 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n             future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n \n         sb.service(\"/exception\", (ctx, req) -> {\n-            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE, \"not ready\");\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n         });\n         sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n-            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE, \"not ready\"))));\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxOTAwNQ==", "url": "https://github.com/line/armeria/pull/2618#discussion_r402919005", "bodyText": "there's a code change needed to HttpServerHandler to set the HttpResponseException's cause to the context responseCause. Any hints or help appreciated! cc @trustin", "author": "codefromthecrypt", "createdAt": "2020-04-03T10:45:37Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,25 +69,52 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            IllegalStateException ex = new IllegalStateException(\"not ready\");", "originalCommit": "a312b4d5296afe2b6a658f3cffaed44b93c6e68c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5236f15f8555b5dd25e4db715a9c2701301c0ae7", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex 0898f1f0ac..7b579f15a5 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -73,13 +82,12 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n             future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n \n         sb.service(\"/exception\", (ctx, req) -> {\n-            IllegalStateException ex = new IllegalStateException(\"not ready\");\n-            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE, ex);\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n         });\n-        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future -> {\n-            IllegalStateException ex = new IllegalStateException(\"not ready\");\n-            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE, ex));\n-        }));\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"oid": "5236f15f8555b5dd25e4db715a9c2701301c0ae7", "url": "https://github.com/line/armeria/commit/5236f15f8555b5dd25e4db715a9c2701301c0ae7", "message": "Updates to Brave 5.10.2 and backfills tests", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "5345a255d51cf9011aba116b9e5f45a4316010b7", "url": "https://github.com/line/armeria/commit/5345a255d51cf9011aba116b9e5f45a4316010b7", "message": "progress on 5.11", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "0494aa78c6b97f79e708c55b49230c27d6a36617", "url": "https://github.com/line/armeria/commit/0494aa78c6b97f79e708c55b49230c27d6a36617", "message": "progress", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "2a3056b72e3fbd8db92fb847b295ba392b0328b9", "url": "https://github.com/line/armeria/commit/2a3056b72e3fbd8db92fb847b295ba392b0328b9", "message": "finally", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "7abd17afb71aa29ff8a5c6b4ccdd662d689e8c89", "url": "https://github.com/line/armeria/commit/7abd17afb71aa29ff8a5c6b4ccdd662d689e8c89", "message": "status", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "2344dd805d1e9e8f837a879f12f08af941f18431", "url": "https://github.com/line/armeria/commit/2344dd805d1e9e8f837a879f12f08af941f18431", "message": "cause", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "8387b73c14767451af2ba2744864f1dd7c63b8e1", "url": "https://github.com/line/armeria/commit/8387b73c14767451af2ba2744864f1dd7c63b8e1", "message": "decouples merging this from the http response cause topic", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "2c05b5e61119213c7ba8b6aac2272bc0b99295c8", "url": "https://github.com/line/armeria/commit/2c05b5e61119213c7ba8b6aac2272bc0b99295c8", "message": "how ya like me now?", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "6bb77912ee8bfc6e679ee95e2907c09e5e4d8604", "url": "https://github.com/line/armeria/commit/6bb77912ee8bfc6e679ee95e2907c09e5e4d8604", "message": "Fix test failure in `HttpResponseExceptionTest`", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "5ffd6ab6e25c017ca1233267eda9c8a3ede0f154", "url": "https://github.com/line/armeria/commit/5ffd6ab6e25c017ca1233267eda9c8a3ede0f154", "message": "Fix a few TODOs in `BraveServiceIntegrationTest` / Indentation", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"oid": "58e1f1678749f7c9aaa352ca1c6f27b177a10370", "url": "https://github.com/line/armeria/commit/58e1f1678749f7c9aaa352ca1c6f27b177a10370", "message": "latest brave", "committedDate": "2020-04-06T07:43:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5NDQ1NA==", "url": "https://github.com/line/armeria/pull/2618#discussion_r403894454", "bodyText": "I don't see how we are setting the status code 503, though.. we should put a TODO until we do?", "author": "codefromthecrypt", "createdAt": "2020-04-06T07:54:02Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +67,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future -> {\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n+        }));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            throw new IllegalStateException(\"not ready\");", "originalCommit": "58e1f1678749f7c9aaa352ca1c6f27b177a10370", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d6293f7c62e575b6f261c8ca0e13eb01549f746", "chunk": "diff --git a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\nindex 627cfd114e..d1f346c841 100644\n--- a/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n+++ b/brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java\n\n@@ -77,6 +77,7 @@ public class BraveServiceIntegrationTest extends ITHttpServer {\n         sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future -> {\n             future.completeExceptionally(new IllegalStateException(\"not ready\"));\n         }));\n+        sb.service(\"/badrequest\", (ctx, req) -> HttpResponse.of(BAD_REQUEST));\n \n         sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n"}}, {"oid": "20fe6485fc3afeb7faeec39d7b0fe12095ab0c3a", "url": "https://github.com/line/armeria/commit/20fe6485fc3afeb7faeec39d7b0fe12095ab0c3a", "message": "fuzz", "committedDate": "2020-04-06T07:55:00Z", "type": "commit"}, {"oid": "3d6293f7c62e575b6f261c8ca0e13eb01549f746", "url": "https://github.com/line/armeria/commit/3d6293f7c62e575b6f261c8ca0e13eb01549f746", "message": "accidentally clobbered test", "committedDate": "2020-04-06T07:56:55Z", "type": "commit"}, {"oid": "cd3cc85815fe547f63adb171b37362bc17e48b9f", "url": "https://github.com/line/armeria/commit/cd3cc85815fe547f63adb171b37362bc17e48b9f", "message": "more fuzz", "committedDate": "2020-04-06T08:02:45Z", "type": "commit"}, {"oid": "648b3a51a4a1ed079f17fadcdeaed11c2636ff68", "url": "https://github.com/line/armeria/commit/648b3a51a4a1ed079f17fadcdeaed11c2636ff68", "message": "let the fuzz be with you", "committedDate": "2020-04-06T08:05:47Z", "type": "commit"}]}