{"pr_number": 2530, "pr_title": "Make `HttpTimestampSupplier` work with negative clock value", "pr_createdAt": "2020-02-24T11:15:08Z", "pr_url": "https://github.com/line/armeria/pull/2530", "timeline": [{"oid": "9db58fed45bb1df665257e78c7a1440b5d8f12a7", "url": "https://github.com/line/armeria/commit/9db58fed45bb1df665257e78c7a1440b5d8f12a7", "message": "Make `HttpTimestampSupplier` work with negative clock value\n\nMotivation:\n\nThe initial value of `nextUpdateNanos` is `0`, which can make\n`HttpTimestampSupplier` generate an empty string if `System.nanoTime()`\nreturns a negative value.\n\nModifivations:\n\n- Initialize `nextUpdateNanos` with the current `System.nanoTime()`\n  value.\n- Improve testability of `HttpTimestampSupplier` so that we do not need\n  to busy-loop while testing.\n\nResult:\n\n- `HttpTimestampSupplier` works even when `System.nanoTime()` returns a\n  negative value.", "committedDate": "2020-02-24T11:09:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMjU0Ng==", "url": "https://github.com/line/armeria/pull/2530#discussion_r383212546", "bodyText": "Why use spy instead of mock?", "author": "anuraaga", "createdAt": "2020-02-24T11:27:44Z", "path": "core/src/test/java/com/linecorp/armeria/internal/common/util/HttpTimestampSupplierTest.java", "diffHunk": "@@ -17,43 +17,79 @@\n package com.linecorp.armeria.internal.common.util;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.awaitility.Awaitility.await;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.clearInvocations;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n \n-import java.time.Clock;\n-import java.time.Duration;\n import java.time.Instant;\n-import java.time.ZoneOffset;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.LongSupplier;\n+import java.util.function.Supplier;\n \n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mock;\n \n class HttpTimestampSupplierTest {\n \n     private static final Instant TIME0 = Instant.parse(\"2019-10-18T10:15:30.05Z\");\n     private static final Instant TIME1 = Instant.parse(\"2019-10-18T10:15:31.25Z\");\n \n-    @Mock private Clock clock;\n+    @Test\n+    void normal() {\n+        final AtomicReference<Instant> instantHolder = new AtomicReference<>(TIME0);\n+        final AtomicLong nanoTimeHolder = new AtomicLong(TimeUnit.MILLISECONDS.toNanos(-500));\n \n-    private HttpTimestampSupplier supplier;\n+        // Create delegating mock suppliers.\n+        // Note that we can't use method references or lambda expressions because they generate final classes.\n+        @SuppressWarnings({ \"Convert2Lambda\", \"Anonymous2MethodRef\" })\n+        final Supplier<Instant> instantSupplier = spy(new Supplier<Instant>() {", "originalCommit": "9db58fed45bb1df665257e78c7a1440b5d8f12a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyMTE5MQ==", "url": "https://github.com/line/armeria/pull/2530#discussion_r383221191", "bodyText": "No idea. Now using mock.", "author": "trustin", "createdAt": "2020-02-24T11:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMjU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a0aa79a2cca3e524bd1b13f6ce9b04d2cea5b21c", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/internal/common/util/HttpTimestampSupplierTest.java b/core/src/test/java/com/linecorp/armeria/internal/common/util/HttpTimestampSupplierTest.java\nindex 65992eae8e..13e7774bd4 100644\n--- a/core/src/test/java/com/linecorp/armeria/internal/common/util/HttpTimestampSupplierTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/internal/common/util/HttpTimestampSupplierTest.java\n\n@@ -19,49 +19,36 @@ package com.linecorp.armeria.internal.common.util;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.clearInvocations;\n import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n import java.time.Instant;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.LongSupplier;\n import java.util.function.Supplier;\n \n import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n \n class HttpTimestampSupplierTest {\n \n     private static final Instant TIME0 = Instant.parse(\"2019-10-18T10:15:30.05Z\");\n     private static final Instant TIME1 = Instant.parse(\"2019-10-18T10:15:31.25Z\");\n \n-    @Test\n-    void normal() {\n-        final AtomicReference<Instant> instantHolder = new AtomicReference<>(TIME0);\n-        final AtomicLong nanoTimeHolder = new AtomicLong(TimeUnit.MILLISECONDS.toNanos(-500));\n+    @Mock\n+    Supplier<Instant> instantSupplier;\n \n-        // Create delegating mock suppliers.\n-        // Note that we can't use method references or lambda expressions because they generate final classes.\n-        @SuppressWarnings({ \"Convert2Lambda\", \"Anonymous2MethodRef\" })\n-        final Supplier<Instant> instantSupplier = spy(new Supplier<Instant>() {\n-            @Override\n-            public Instant get() {\n-                return instantHolder.get();\n-            }\n-        });\n-        @SuppressWarnings({ \"Convert2Lambda\", \"Anonymous2MethodRef\" })\n-        final LongSupplier nanoTimeSupplier = spy(new LongSupplier() {\n-            @Override\n-            public long getAsLong() {\n-                return nanoTimeHolder.get();\n-            }\n-        });\n+    @Mock\n+    LongSupplier nanoTimeSupplier;\n \n-        final HttpTimestampSupplier supplier = new HttpTimestampSupplier(instantSupplier, nanoTimeSupplier);\n+    @Test\n+    void normal() {\n+        when(nanoTimeSupplier.getAsLong()).thenReturn(TimeUnit.MILLISECONDS.toNanos(-500));\n+        when(instantSupplier.get()).thenReturn(TIME0);\n \n         // On instantiation, the current nano time must be read and cached.\n+        final HttpTimestampSupplier supplier = new HttpTimestampSupplier(instantSupplier, nanoTimeSupplier);\n         verify(instantSupplier, never()).get();\n         verify(nanoTimeSupplier, times(1)).getAsLong();\n         clearInvocations(instantSupplier, nanoTimeSupplier);\n"}}, {"oid": "25f591babad4c2d714e57df0833e4261c44d30ba", "url": "https://github.com/line/armeria/commit/25f591babad4c2d714e57df0833e4261c44d30ba", "message": "Checkstyle", "committedDate": "2020-02-24T11:41:55Z", "type": "commit"}, {"oid": "a0aa79a2cca3e524bd1b13f6ce9b04d2cea5b21c", "url": "https://github.com/line/armeria/commit/a0aa79a2cca3e524bd1b13f6ce9b04d2cea5b21c", "message": "Address the comments from @anuraaga", "committedDate": "2020-02-24T11:49:08Z", "type": "commit"}, {"oid": "2708e276fd2928ee5516af40deaad66620d03e40", "url": "https://github.com/line/armeria/commit/2708e276fd2928ee5516af40deaad66620d03e40", "message": "Comments", "committedDate": "2020-02-24T11:51:58Z", "type": "commit"}, {"oid": "7f4f62c1765bb81abaecab647efbabb353aba0dd", "url": "https://github.com/line/armeria/commit/7f4f62c1765bb81abaecab647efbabb353aba0dd", "message": "Comment", "committedDate": "2020-02-24T12:05:18Z", "type": "commit"}]}