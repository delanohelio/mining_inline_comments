{"pr_number": 2861, "pr_title": "Separate `HttpFile` and `AggregateHttpFile` from each other", "pr_createdAt": "2020-07-01T06:50:41Z", "pr_url": "https://github.com/line/armeria/pull/2861", "timeline": [{"oid": "567672b3807ec3d533b1368c1f71992b45588a15", "url": "https://github.com/line/armeria/commit/567672b3807ec3d533b1368c1f71992b45588a15", "message": "Separate `HttpFile` and `AggregateHttpFile` from each other\n\nMotivation:\n\n`AggregateHttpFile` extends `HttpFile` unlike other `Aggregated*`\nclasses, such as `AggregatedHttpRequest`, breaking our API consistency.\n\nModifications:\n\n- (Breaking) Make `AggregatedHttpFile` not extend `HttpFile` anymore.\n- Add `AggregatedHttpFile.toHttpFile()`\n- Add `NonExistentAggregatedHttpFile`.\n- (Breaking) `HttpFile.nonExistent()` returns an `HttpFile` instead of\n  `AggregatedHttpFile`.\n- (Breaking) `HttpFile.of(HttpData, ...)` returns an `HttpFile` instead\n  of `AggregatedHttpFile`.\n- (Breaking) Rename `AbstractHttpFile.headers()` to `additionalHeaders()`\n  to avoid a method signature clash.\n- Miscellaneous:\n  - Add `PooledAggregatedHttpResponse.of()`\n  - Use `PooledAggregatedHttp{Request,Response}.of()` when aggregating,\n    instead of calling the constructor directly.\n\nResult:\n\n- Consistency in API", "committedDate": "2020-07-01T06:43:24Z", "type": "commit"}, {"oid": "4add55e442392294f14c2907c43738fbb0da189b", "url": "https://github.com/line/armeria/commit/4add55e442392294f14c2907c43738fbb0da189b", "message": "Merge branch 'master' into split_aggregated_http_file", "committedDate": "2020-07-01T07:08:26Z", "type": "commit"}, {"oid": "fce09a2d45dae1073f1d909787e017480dc1dc82", "url": "https://github.com/line/armeria/commit/fce09a2d45dae1073f1d909787e017480dc1dc82", "message": "Fix `toString()`", "committedDate": "2020-07-01T07:52:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwNzQ3MA==", "url": "https://github.com/line/armeria/pull/2861#discussion_r448207470", "bodyText": "HttpFile.of -> AggregatedHttpFile.of?", "author": "minwoox", "createdAt": "2020-07-01T08:36:20Z", "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java", "diffHunk": "@@ -15,51 +15,76 @@\n  */\n package com.linecorp.armeria.server.file;\n \n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Executor;\n+import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.common.AggregatedHttpResponse;\n import com.linecorp.armeria.common.HttpData;\n-import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.ResponseHeaders;\n-import com.linecorp.armeria.common.util.UnmodifiableFuture;\n-\n-import io.netty.buffer.ByteBufAllocator;\n \n /**\n- * An immutable variant of {@link HttpFile} which has its attributes and content readily available.\n- * Unlike {@link HttpFile}, the following operations in {@link AggregatedHttpFile} neither blocks nor raises\n- * an exception:\n- * <ul>\n- *   <li>{@link #readAttributes(Executor)}</li>\n- *   <li>{@link #readHeaders(Executor)}</li>\n- *   <li>{@link #read(Executor, ByteBufAllocator)}</li>\n- *   <li>{@link #aggregate(Executor)}</li>\n- *   <li>{@link #aggregateWithPooledObjects(Executor, ByteBufAllocator)}</li>\n- * </ul>\n- * It also has the following additional methods that give you an immediate access to the file:\n- * <ul>\n- *   <li>{@link #readAttributes()}</li>\n- *   <li>{@link #readHeaders()}</li>\n- *   <li>{@link #read()}</li>\n- * </ul>\n+ * A complete HTTP file whose attributes and content are readily available.\n  */\n-public interface AggregatedHttpFile extends HttpFile {\n+public interface AggregatedHttpFile {\n+\n+    /**\n+     * Creates a new {@link AggregatedHttpFile} which streams the specified {@link HttpData}. This method is\n+     * a shortcut for {@code HttpFile.of(data, System.currentTimeMillis()}.", "originalCommit": "fce09a2d45dae1073f1d909787e017480dc1dc82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "765c29772224c19078e1cbf1f1d6044f5da3b1f9", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java b/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java\nindex 260e7c503..d3408f6d6 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java\n\n@@ -30,7 +30,7 @@ public interface AggregatedHttpFile {\n \n     /**\n      * Creates a new {@link AggregatedHttpFile} which streams the specified {@link HttpData}. This method is\n-     * a shortcut for {@code HttpFile.of(data, System.currentTimeMillis()}.\n+     * a shortcut for {@code AggregatedHttpFile.of(data, System.currentTimeMillis()}.\n      */\n     static AggregatedHttpFile of(HttpData data) {\n         return builder(data).build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzc3OQ==", "url": "https://github.com/line/armeria/pull/2861#discussion_r448217779", "bodyText": "nit: request -> file", "author": "minwoox", "createdAt": "2020-07-01T08:54:27Z", "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java", "diffHunk": "@@ -110,14 +120,10 @@ default AggregatedHttpResponse read() {\n     @Nullable\n     HttpData content();\n \n-    @Override\n-    default CompletableFuture<AggregatedHttpFile> aggregate(Executor fileReadExecutor) {\n-        return CompletableFuture.completedFuture(this);\n-    }\n-\n-    @Override\n-    default CompletableFuture<AggregatedHttpFile> aggregateWithPooledObjects(Executor fileReadExecutor,\n-                                                                             ByteBufAllocator alloc) {\n-        return CompletableFuture.completedFuture(this);\n-    }\n+    /**\n+     * Converts this request into a new {@link HttpFile}.", "originalCommit": "fce09a2d45dae1073f1d909787e017480dc1dc82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "765c29772224c19078e1cbf1f1d6044f5da3b1f9", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java b/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java\nindex 260e7c503..d3408f6d6 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java\n\n@@ -121,7 +121,7 @@ public interface AggregatedHttpFile {\n     HttpData content();\n \n     /**\n-     * Converts this request into a new {@link HttpFile}.\n+     * Converts this file into an {@link HttpFile}.\n      *\n      * @return the {@link HttpFile} converted from this file.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzg2Mg==", "url": "https://github.com/line/armeria/pull/2861#discussion_r448217862", "bodyText": "2020 \ud83d\ude04", "author": "minwoox", "createdAt": "2020-07-01T08:54:37Z", "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFileBuilder.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019 LINE Corporation", "originalCommit": "fce09a2d45dae1073f1d909787e017480dc1dc82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0MjIyNw==", "url": "https://github.com/line/armeria/pull/2861#discussion_r448242227", "bodyText": "\ud83d\ude05 Fixed'em all.", "author": "trustin", "createdAt": "2020-07-01T09:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "765c29772224c19078e1cbf1f1d6044f5da3b1f9", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFileBuilder.java b/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFileBuilder.java\nindex 4ede11ed9..0658f462d 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFileBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFileBuilder.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"oid": "765c29772224c19078e1cbf1f1d6044f5da3b1f9", "url": "https://github.com/line/armeria/commit/765c29772224c19078e1cbf1f1d6044f5da3b1f9", "message": "Address the comments from @minwoox", "committedDate": "2020-07-01T09:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE4Mg==", "url": "https://github.com/line/armeria/pull/2861#discussion_r448681182", "bodyText": "Is there any reason that you didn't use CompletableFuture.completeValue(attrs)?", "author": "minwoox", "createdAt": "2020-07-02T00:20:04Z", "path": "core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java", "diffHunk": "@@ -73,23 +76,23 @@ protected String pathOrUri() {\n     }\n \n     @Override\n-    public HttpFileAttributes readAttributes() {\n+    public HttpFileAttributes attributes() {\n         return attrs;\n     }\n \n     @Override\n     public CompletableFuture<HttpFileAttributes> readAttributes(Executor fileReadExecutor) {\n-        return AggregatedHttpFile.super.readAttributes(fileReadExecutor);\n+        return UnmodifiableFuture.completedFuture(attrs);", "originalCommit": "765c29772224c19078e1cbf1f1d6044f5da3b1f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwOTY2OA==", "url": "https://github.com/line/armeria/pull/2861#discussion_r448709668", "bodyText": "No, there isn't any reason. Should we?", "author": "trustin", "createdAt": "2020-07-02T02:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxMjEzNQ==", "url": "https://github.com/line/armeria/pull/2861#discussion_r448712135", "bodyText": "I prefer to use UnmodifiableFuture only when the future can be complete by the caller by mistake, but no big deal. :)", "author": "minwoox", "createdAt": "2020-07-02T02:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0Mzc1Mg==", "url": "https://github.com/line/armeria/pull/2861#discussion_r448743752", "bodyText": "A user can also override the result by using obtrude*() methods, so I wanted to avoid such situation. Let me leave this as it is and reconsider once we find an issue about it.", "author": "trustin", "createdAt": "2020-07-02T04:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE4Mg=="}], "type": "inlineReview", "revised_code": null}]}