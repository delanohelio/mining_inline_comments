{"pr_number": 2889, "pr_title": "Add `decorators` method for passing multiple decorators to ServiceConfigSetters", "pr_createdAt": "2020-07-09T03:16:36Z", "pr_url": "https://github.com/line/armeria/pull/2889", "timeline": [{"oid": "3e0c76a1eef266c4e68520d637ae1f59c80ad6c6", "url": "https://github.com/line/armeria/commit/3e0c76a1eef266c4e68520d637ae1f59c80ad6c6", "message": "Add `decorators` method for passing multiple decorators to ServiceConfigSetters", "committedDate": "2020-07-09T05:49:07Z", "type": "forcePushed"}, {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be", "url": "https://github.com/line/armeria/commit/948d6d76287990c7cc5811ba4b07bbd17278b3be", "message": "Add `decorators` method for passing multiple decorators to ServiceConfigSetters", "committedDate": "2020-07-09T06:00:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2Mzg3Ng==", "url": "https://github.com/line/armeria/pull/2889#discussion_r453463876", "bodyText": "isEqualTo could be simplified with containsExactly(3, 2, 1)", "author": "trustin", "createdAt": "2020-07-13T06:42:55Z", "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -126,6 +158,7 @@ void consumesAndProduces() throws IOException {\n                                            .aggregate().join();\n         assertThat(res.status()).isSameAs(HttpStatus.OK);\n         assertThat(res.contentUtf8()).isEqualTo(\"armeria\");\n+        assertThat(decoratorLog.stream().collect(Collectors.toList())).isEqualTo(Arrays.asList(3, 2, 1));", "originalCommit": "948d6d76287990c7cc5811ba4b07bbd17278b3be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NzkwMQ==", "url": "https://github.com/line/armeria/pull/2889#discussion_r453467901", "bodyText": "Thanks. Done.", "author": "m50d", "createdAt": "2020-07-13T06:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2Mzg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ee10439b549338b5dd71e9659b5950e9bc78c904", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java b/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\nindex 630eb8264..e664d8c7a 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\n\n@@ -158,7 +141,7 @@ class ServiceBindingTest {\n                                            .aggregate().join();\n         assertThat(res.status()).isSameAs(HttpStatus.OK);\n         assertThat(res.contentUtf8()).isEqualTo(\"armeria\");\n-        assertThat(decoratorLog.stream().collect(Collectors.toList())).isEqualTo(Arrays.asList(3, 2, 1));\n+        assertThat(decoratorLog.stream().collect(Collectors.toList())).containsExactly(3, 2, 1);\n \n         res = client.execute(RequestHeaders.of(HttpMethod.POST, \"/hello\",\n                                                HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDEyMg==", "url": "https://github.com/line/armeria/pull/2889#discussion_r453464122", "bodyText": "How about moving to the end of the file?", "author": "trustin", "createdAt": "2020-07-13T06:43:46Z", "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);\n+\n+    private static final class LoggingDecorator implements Function<HttpService, HttpService> {", "originalCommit": "948d6d76287990c7cc5811ba4b07bbd17278b3be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NjQzMg==", "url": "https://github.com/line/armeria/pull/2889#discussion_r453466432", "bodyText": "I generally like to put dependencies first and things that depend on them after? But happy to move it if that's this project's style.", "author": "m50d", "createdAt": "2020-07-13T06:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTE5MA==", "url": "https://github.com/line/armeria/pull/2889#discussion_r453561190", "bodyText": "We prefer top-down layout for methods and classes. Thanks in advance. \ud83d\ude47", "author": "trustin", "createdAt": "2020-07-13T10:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "ee10439b549338b5dd71e9659b5950e9bc78c904", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java b/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\nindex 630eb8264..e664d8c7a 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\n\n@@ -49,22 +48,6 @@ class ServiceBindingTest {\n     private static CountDownLatch propertyCheckLatch;\n     private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);\n \n-    private static final class LoggingDecorator implements Function<HttpService, HttpService> {\n-        private final Integer index;\n-\n-        private LoggingDecorator(Integer index) {\n-            this.index = index;\n-        }\n-\n-        @Override\n-        public HttpService apply(HttpService delegate) {\n-            return (ctx, req) -> {\n-                ctx.log().whenComplete().thenAccept(log -> decoratorLog.add(index));\n-                return delegate.serve(ctx, req);\n-            };\n-        }\n-    }\n-\n     private static final LoggingDecorator decorator1 = new LoggingDecorator(1);\n     private static final LoggingDecorator decorator2 = new LoggingDecorator(2);\n     private static final LoggingDecorator decorator3 = new LoggingDecorator(3);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDIyNQ==", "url": "https://github.com/line/armeria/pull/2889#discussion_r453464225", "bodyText": "nit: LinkedTransferQueue, which is unbounded? (Just in case we are blocked indefinitely)", "author": "trustin", "createdAt": "2020-07-13T06:44:02Z", "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);", "originalCommit": "948d6d76287990c7cc5811ba4b07bbd17278b3be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NzE3Ng==", "url": "https://github.com/line/armeria/pull/2889#discussion_r453467176", "bodyText": "My reading of the docs is that add should throw IllegalStateException if we exceed the capacity?", "author": "m50d", "createdAt": "2020-07-13T06:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTczNg==", "url": "https://github.com/line/armeria/pull/2889#discussion_r453561736", "bodyText": "Ah, I was rather concerned about consuming side, but yeah, I guess it doesn't matter anyway. Maybe I just find the magic number 100 somewhat unnatural.", "author": "trustin", "createdAt": "2020-07-13T10:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0OTQ0OA==", "url": "https://github.com/line/armeria/pull/2889#discussion_r454049448", "bodyText": "It's certainly arbitrary. My thinking was that it would be better to hit an exception from hitting the limit than to grow without bound and then OOM. (In practice I doubt either would happen though).", "author": "m50d", "createdAt": "2020-07-14T01:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee10439b549338b5dd71e9659b5950e9bc78c904", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java b/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\nindex 630eb8264..e664d8c7a 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java\n\n@@ -49,22 +48,6 @@ class ServiceBindingTest {\n     private static CountDownLatch propertyCheckLatch;\n     private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);\n \n-    private static final class LoggingDecorator implements Function<HttpService, HttpService> {\n-        private final Integer index;\n-\n-        private LoggingDecorator(Integer index) {\n-            this.index = index;\n-        }\n-\n-        @Override\n-        public HttpService apply(HttpService delegate) {\n-            return (ctx, req) -> {\n-                ctx.log().whenComplete().thenAccept(log -> decoratorLog.add(index));\n-                return delegate.serve(ctx, req);\n-            };\n-        }\n-    }\n-\n     private static final LoggingDecorator decorator1 = new LoggingDecorator(1);\n     private static final LoggingDecorator decorator2 = new LoggingDecorator(2);\n     private static final LoggingDecorator decorator3 = new LoggingDecorator(3);\n"}}, {"oid": "ee10439b549338b5dd71e9659b5950e9bc78c904", "url": "https://github.com/line/armeria/commit/ee10439b549338b5dd71e9659b5950e9bc78c904", "message": "Add `decorators` method for passing multiple decorators to ServiceConfigSetters", "committedDate": "2020-07-14T01:50:34Z", "type": "commit"}, {"oid": "ee10439b549338b5dd71e9659b5950e9bc78c904", "url": "https://github.com/line/armeria/commit/ee10439b549338b5dd71e9659b5950e9bc78c904", "message": "Add `decorators` method for passing multiple decorators to ServiceConfigSetters", "committedDate": "2020-07-14T01:50:34Z", "type": "forcePushed"}]}