{"pr_number": 2429, "pr_title": "Fix 'cannot start a new stream with a DATA frame' error under load", "pr_createdAt": "2020-01-30T09:55:22Z", "pr_url": "https://github.com/line/armeria/pull/2429", "timeline": [{"oid": "88931eed3344dbc013c9ef7f6fe37c4897ec35c8", "url": "https://github.com/line/armeria/commit/88931eed3344dbc013c9ef7f6fe37c4897ec35c8", "message": "Fix 'cannot start a new stream with a DATA frame' error under load\n\nMotivation:\nWhen a server under load receives `GOAWAY` frame from client,\nthe server try to close the given connection with the flowing step:\n1) The server receives the `GOAWAY` frame.\n2) Close all active streams before closing connection.\n3) Flush `outboundBuffer` buffer.\n4) The callback of `future.addListener` is called after successfully writing `nioBuffers` to channel.\nhttps://github.com/line/armeria/blob/84403ba1424faf85ca883bb6a299705a3198c4bd/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java#L307\n5) Request the next item in the `future.addListener`.\nhttps://github.com/line/armeria/blob/84403ba1424faf85ca883bb6a299705a3198c4bd/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java#L333\n6) Try to write the next item to the stream, but it was already closed on 2)\n\nIf 'HttpData' try to write closed stream, it will throw 'cannot start a new stream with a DATA frame'.\n\nModification:\n* Add `isWritable(id, streamId) to `HttpObjectEncoder`\n* Cancel subscription and propagate error\n\nResult:\nNo more 'cannot start a new stream with a DATA frame' error when receiving GOAWAY with non empty `ChannelOutboundBuffer`.\nFixes: #1410", "committedDate": "2020-01-30T09:58:27Z", "type": "commit"}, {"oid": "88931eed3344dbc013c9ef7f6fe37c4897ec35c8", "url": "https://github.com/line/armeria/commit/88931eed3344dbc013c9ef7f6fe37c4897ec35c8", "message": "Fix 'cannot start a new stream with a DATA frame' error under load\n\nMotivation:\nWhen a server under load receives `GOAWAY` frame from client,\nthe server try to close the given connection with the flowing step:\n1) The server receives the `GOAWAY` frame.\n2) Close all active streams before closing connection.\n3) Flush `outboundBuffer` buffer.\n4) The callback of `future.addListener` is called after successfully writing `nioBuffers` to channel.\nhttps://github.com/line/armeria/blob/84403ba1424faf85ca883bb6a299705a3198c4bd/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java#L307\n5) Request the next item in the `future.addListener`.\nhttps://github.com/line/armeria/blob/84403ba1424faf85ca883bb6a299705a3198c4bd/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java#L333\n6) Try to write the next item to the stream, but it was already closed on 2)\n\nIf 'HttpData' try to write closed stream, it will throw 'cannot start a new stream with a DATA frame'.\n\nModification:\n* Add `isWritable(id, streamId) to `HttpObjectEncoder`\n* Cancel subscription and propagate error\n\nResult:\nNo more 'cannot start a new stream with a DATA frame' error when receiving GOAWAY with non empty `ChannelOutboundBuffer`.\nFixes: #1410", "committedDate": "2020-01-30T09:58:27Z", "type": "forcePushed"}, {"oid": "00bec95c46ad456c360f19c1f18d25887a44ccb7", "url": "https://github.com/line/armeria/commit/00bec95c46ad456c360f19c1f18d25887a44ccb7", "message": "Fix if condition", "committedDate": "2020-01-30T10:00:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MDQzOQ==", "url": "https://github.com/line/armeria/pull/2429#discussion_r372860439", "bodyText": "Maybe better grouping with final boolean isSuccess;?", "author": "trustin", "createdAt": "2020-01-30T10:10:48Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -321,6 +323,7 @@ private void write(HttpObject o, boolean endOfStream) {\n                                 f.cause() instanceof ClosedChannelException &&\n                                 responseEncoder instanceof Http1ObjectEncoder;\n                 }\n+                final boolean isWritable = responseEncoder.isWritable(req.id(), req.streamId());", "originalCommit": "00bec95c46ad456c360f19c1f18d25887a44ccb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de3434eadb45f0536463ebdf74f26408c518376a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\nindex 1aa4c95221..9252843a9f 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n\n@@ -323,11 +324,11 @@ final class HttpResponseSubscriber extends DefaultTimeoutController implements S\n                                 f.cause() instanceof ClosedChannelException &&\n                                 responseEncoder instanceof Http1ObjectEncoder;\n                 }\n-                final boolean isWritable = responseEncoder.isWritable(req.id(), req.streamId());\n \n                 // Write an access log if:\n                 // - every message has been sent successfully.\n                 // - any write operation is failed with a cause.\n+                final ChannelFuture failedFuture;\n                 if (isSuccess) {\n                     maybeLogFirstResponseBytesTransferred();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MjUwNg==", "url": "https://github.com/line/armeria/pull/2429#discussion_r372862506", "bodyText": "Could be merged into the if (isSuccess) above, i.e.\nfinal ChannelFuture failedFuture;\nif (isSuccess) {\n    ...\n    if (isWritable) {\n        subscription.request(1);\n        return;\n    }\n\n    if (reqCtx.sessionProtocol().isMultiplex()) {\n        failedFuture = f.channel().newFailedFuture(ClosedPublisherException.get());\n    } else {\n        failedFuture = f.channel().newFailedFuture(ClosedSessionException.get());\n    }\n} else {\n    failedFuture = f;\n}", "author": "trustin", "createdAt": "2020-01-30T10:15:02Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -333,17 +336,28 @@ private void write(HttpObject o, boolean endOfStream) {\n                         reqCtx.log().whenComplete().thenAccept(reqCtx.accessLogWriter()::log);\n                     }\n \n-                    subscription.request(1);\n-                    return;\n+                    if (isWritable) {\n+                        subscription.request(1);\n+                        return;\n+                    }\n+                }\n+\n+                ChannelFuture failedFuture = f;\n+                if (isSuccess && !isWritable) {", "originalCommit": "00bec95c46ad456c360f19c1f18d25887a44ccb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de3434eadb45f0536463ebdf74f26408c518376a", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\nindex 1aa4c95221..9252843a9f 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n\n@@ -340,15 +341,14 @@ final class HttpResponseSubscriber extends DefaultTimeoutController implements S\n                         subscription.request(1);\n                         return;\n                     }\n-                }\n \n-                ChannelFuture failedFuture = f;\n-                if (isSuccess && !isWritable) {\n                     if (reqCtx.sessionProtocol().isMultiplex()) {\n                         failedFuture = f.channel().newFailedFuture(ClosedPublisherException.get());\n                     } else {\n                         failedFuture = f.channel().newFailedFuture(ClosedSessionException.get());\n                     }\n+                } else {\n+                   failedFuture = f;\n                 }\n \n                 if (tryComplete()) {\n"}}, {"oid": "de3434eadb45f0536463ebdf74f26408c518376a", "url": "https://github.com/line/armeria/commit/de3434eadb45f0536463ebdf74f26408c518376a", "message": "Address comments by @trustin / TODO inspect test failures", "committedDate": "2020-01-30T11:25:50Z", "type": "commit"}, {"oid": "780a64f6707ecf87615316cb78ffcc020164374b", "url": "https://github.com/line/armeria/commit/780a64f6707ecf87615316cb78ffcc020164374b", "message": "Add return when endOfStream is true", "committedDate": "2020-01-31T03:07:21Z", "type": "commit"}, {"oid": "53ad6019311986a090ceb8e96471d6c874046388", "url": "https://github.com/line/armeria/commit/53ad6019311986a090ceb8e96471d6c874046388", "message": "Add subsription.cancel()", "committedDate": "2020-01-31T03:50:04Z", "type": "commit"}, {"oid": "7e50413a047a118147f5a2b9eca1a83d80b20035", "url": "https://github.com/line/armeria/commit/7e50413a047a118147f5a2b9eca1a83d80b20035", "message": "Fix broken test", "committedDate": "2020-01-31T09:25:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MjEyOA==", "url": "https://github.com/line/armeria/pull/2429#discussion_r373392128", "bodyText": "Oops, this is miss pushed. \ud83d\ude31  Let me revert this.", "author": "ikhoon", "createdAt": "2020-01-31T09:43:45Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -325,25 +328,43 @@ private void write(HttpObject o, boolean endOfStream) {\n                 // Write an access log if:\n                 // - every message has been sent successfully.\n                 // - any write operation is failed with a cause.\n+                final ChannelFuture failedFuture;\n                 if (isSuccess) {\n                     maybeLogFirstResponseBytesTransferred();\n \n+                    if (state == State.DONE && !endOfStream) {\n+                        // if state is DONE, the response should be ended with endOfStream.\n+                        return;\n+                    }\n+\n                     if (endOfStream && tryComplete()) {\n                         logBuilder().endResponse();\n+                        subscription.cancel();", "originalCommit": "7e50413a047a118147f5a2b9eca1a83d80b20035", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c394ff8fbfec59da0778e955906580ae45b8b7c", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\nindex 64fafbf9e6..460c246b4c 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n\n@@ -339,9 +339,7 @@ final class HttpResponseSubscriber extends DefaultTimeoutController implements S\n \n                     if (endOfStream && tryComplete()) {\n                         logBuilder().endResponse();\n-                        subscription.cancel();\n                         reqCtx.log().whenComplete().thenAccept(reqCtx.accessLogWriter()::log);\n-                        return;\n                     }\n \n                     if (isWritable) {\n"}}, {"oid": "4c394ff8fbfec59da0778e955906580ae45b8b7c", "url": "https://github.com/line/armeria/commit/4c394ff8fbfec59da0778e955906580ae45b8b7c", "message": "Revert miss commits", "committedDate": "2020-01-31T10:36:12Z", "type": "commit"}, {"oid": "f291e15d1570a982866672060184002bca9a8de0", "url": "https://github.com/line/armeria/commit/f291e15d1570a982866672060184002bca9a8de0", "message": "Merge branch 'master' into data-frame-error", "committedDate": "2020-01-31T12:46:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzQwOA==", "url": "https://github.com/line/armeria/pull/2429#discussion_r373757408", "bodyText": "This is just gone?", "author": "mauhiz", "createdAt": "2020-02-01T04:34:48Z", "path": "thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java", "diffHunk": "@@ -72,16 +67,13 @@ protected void configure(ServerBuilder sb) throws Exception {\n     private static final ClientFactory clientFactory =\n             ClientFactory.builder().meterRegistry(registry).build();\n \n-    @AfterClass\n-    public static void closeClientFactory() {\n+    @AfterAll\n+    static void closeClientFactory() {\n         clientFactory.close();\n     }\n \n-    @Rule\n-    public final TestRule globalTimeout = new DisableOnDebug(new Timeout(30, TimeUnit.SECONDS));", "originalCommit": "f291e15d1570a982866672060184002bca9a8de0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUwOA==", "url": "https://github.com/line/armeria/pull/2429#discussion_r373757508", "bodyText": "Now, we are using JUnit5 global timeout configurations. https://github.com/line/armeria/pull/2425/files#diff-9c2d5d92bbbb9e98c96cf3f21ecedf97", "author": "ikhoon", "createdAt": "2020-02-01T04:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1OTg3MA==", "url": "https://github.com/line/armeria/pull/2429#discussion_r373759870", "bodyText": "oh, that is a nice feature!", "author": "mauhiz", "createdAt": "2020-02-01T05:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzQwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MTM1MQ==", "url": "https://github.com/line/armeria/pull/2429#discussion_r373891351", "bodyText": "I realized that we might need this in HttpRequestSubscriber when we send more that one HttpData.", "author": "minwoox", "createdAt": "2020-02-03T01:01:40Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -325,25 +328,41 @@ private void write(HttpObject o, boolean endOfStream) {\n                 // Write an access log if:\n                 // - every message has been sent successfully.\n                 // - any write operation is failed with a cause.\n+                final ChannelFuture failedFuture;\n                 if (isSuccess) {\n                     maybeLogFirstResponseBytesTransferred();\n \n+                    if (state == State.DONE && !endOfStream) {\n+                        // if state is DONE, the response should be ended with endOfStream.\n+                        return;\n+                    }\n+\n                     if (endOfStream && tryComplete()) {\n                         logBuilder().endResponse();\n                         reqCtx.log().whenComplete().thenAccept(reqCtx.accessLogWriter()::log);\n                     }\n \n-                    subscription.request(1);\n-                    return;\n+                    if (isWritable) {", "originalCommit": "f291e15d1570a982866672060184002bca9a8de0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MjEyMg==", "url": "https://github.com/line/armeria/pull/2429#discussion_r373892122", "bodyText": "Good point! Let me look into it. \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-02-03T01:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MTM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c65a9a5a1e921dca8d42ebc4ed5a6e7fb791e366", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\nindex 460c246b4c..899d29bacb 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n\n@@ -328,41 +337,19 @@ final class HttpResponseSubscriber extends DefaultTimeoutController implements S\n                 // Write an access log if:\n                 // - every message has been sent successfully.\n                 // - any write operation is failed with a cause.\n-                final ChannelFuture failedFuture;\n                 if (isSuccess) {\n                     maybeLogFirstResponseBytesTransferred();\n \n-                    if (state == State.DONE && !endOfStream) {\n-                        // if state is DONE, the response should be ended with endOfStream.\n-                        return;\n-                    }\n-\n                     if (endOfStream && tryComplete()) {\n                         logBuilder().endResponse();\n                         reqCtx.log().whenComplete().thenAccept(reqCtx.accessLogWriter()::log);\n                     }\n \n-                    if (isWritable) {\n-                        subscription.request(1);\n-                        return;\n-                    }\n-\n-                    if (reqCtx.sessionProtocol().isMultiplex()) {\n-                        failedFuture = f.channel().newFailedFuture(ClosedPublisherException.get());\n-                    } else {\n-                        failedFuture = f.channel().newFailedFuture(ClosedSessionException.get());\n-                    }\n-                } else {\n-                   failedFuture = f;\n+                    subscription.request(1);\n+                    return;\n                 }\n \n-                if (tryComplete()) {\n-                    setDone();\n-                    logBuilder().endResponse(failedFuture.cause());\n-                    subscription.cancel();\n-                    reqCtx.log().whenComplete().thenAccept(reqCtx.accessLogWriter()::log);\n-                }\n-                HttpServerHandler.CLOSE_ON_FAILURE.operationComplete(failedFuture);\n+                fail(f);\n             }\n         });\n \n"}}, {"oid": "c65a9a5a1e921dca8d42ebc4ed5a6e7fb791e366", "url": "https://github.com/line/armeria/commit/c65a9a5a1e921dca8d42ebc4ed5a6e7fb791e366", "message": "Address comments by @minwoox / check writable before write()", "committedDate": "2020-02-03T09:07:21Z", "type": "commit"}, {"oid": "c65a9a5a1e921dca8d42ebc4ed5a6e7fb791e366", "url": "https://github.com/line/armeria/commit/c65a9a5a1e921dca8d42ebc4ed5a6e7fb791e366", "message": "Address comments by @minwoox / check writable before write()", "committedDate": "2020-02-03T09:07:21Z", "type": "forcePushed"}, {"oid": "0f86ffc96706f3d673dd6c86348eada68ae08cb8", "url": "https://github.com/line/armeria/commit/0f86ffc96706f3d673dd6c86348eada68ae08cb8", "message": "Clean up", "committedDate": "2020-02-03T09:32:25Z", "type": "commit"}, {"oid": "3769aebae7d7aa5406f836afddb72d5dbc6782f2", "url": "https://github.com/line/armeria/commit/3769aebae7d7aa5406f836afddb72d5dbc6782f2", "message": "Add comment", "committedDate": "2020-02-03T09:39:52Z", "type": "commit"}, {"oid": "1fc948e2dbc31ec409c737b4ec9d1ef6aac0b47b", "url": "https://github.com/line/armeria/commit/1fc948e2dbc31ec409c737b4ec9d1ef6aac0b47b", "message": "Change variable declration order", "committedDate": "2020-02-03T09:52:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NjI3MA==", "url": "https://github.com/line/armeria/pull/2429#discussion_r374166270", "bodyText": "if -> If\ntransferred -> were transferred\nopen -> open.", "author": "trustin", "createdAt": "2020-02-03T15:26:36Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -289,6 +289,7 @@ public void onComplete() {\n     }\n \n     private void write(HttpObject o, boolean endOfStream) {\n+        // if the first bytes transferred, the stream must be open", "originalCommit": "3769aebae7d7aa5406f836afddb72d5dbc6782f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0913c9a1ccf113bbec8e29ec857532f3c40a0673", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\nindex f7a73e2c8d..741349a84d 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n\n@@ -289,7 +289,12 @@ final class HttpResponseSubscriber extends DefaultTimeoutController implements S\n     }\n \n     private void write(HttpObject o, boolean endOfStream) {\n-        // if the first bytes transferred, the stream must be open\n+        // Make sure that a stream exists before writing data if first bytes were transferred.\n+        // The following situation may cause the data to be written to a closed stream.\n+        // 1. A connection that has pending outbound buffers receives GOAWAY frame.\n+        // 2. AbstractHttp2ConnectionHandler.close() clears all active streams.\n+        // 3. Http2ConnectionHandler.onError() writes an error and triggers ctx.flush().\n+        // 4. The ctx.flush() attempts to write the outbound buffers to the stream closed at 2).\n         if (loggedResponseHeadersFirstBytesTransferred &&\n             !responseEncoder.isWritable(req.id(), req.streamId())) {\n             if (reqCtx.sessionProtocol().isMultiplex()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2Njg4NQ==", "url": "https://github.com/line/armeria/pull/2429#discussion_r374166885", "bodyText": "Could you explain why?", "author": "trustin", "createdAt": "2020-02-03T15:27:36Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -297,6 +296,16 @@ private void write(HttpObject o, boolean endOfStream, boolean flush) {\n     }\n \n     private void write0(HttpObject o, boolean endOfStream, boolean flush) {\n+        // if the first bytes transferred, the stream must be open", "originalCommit": "1fc948e2dbc31ec409c737b4ec9d1ef6aac0b47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MTA0MQ==", "url": "https://github.com/line/armeria/pull/2429#discussion_r374171041", "bodyText": "The reason why I'm asking this is because the comment itself simply explains what the code does. It does not add much to the code itself in my opinion.\nIf we think there's something more to explain about the code, it has to be more detailed than this.", "author": "trustin", "createdAt": "2020-02-03T15:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2Njg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMjg2NA==", "url": "https://github.com/line/armeria/pull/2429#discussion_r374412864", "bodyText": "I agree with your optinion. I will add the detail explanation about\n\nWhy I use loggedRequestFirstBytesTransferred to check stream condition\nWhen this method could be called even if the stream was closed.", "author": "ikhoon", "createdAt": "2020-02-04T00:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2Njg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0913c9a1ccf113bbec8e29ec857532f3c40a0673", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java b/core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java\nindex 99022137e0..6062a05bf1 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java\n\n@@ -296,7 +296,12 @@ final class HttpRequestSubscriber implements Subscriber<HttpObject>, ChannelFutu\n     }\n \n     private void write0(HttpObject o, boolean endOfStream, boolean flush) {\n-        // if the first bytes transferred, the stream must be open\n+        // Make sure that a stream exists before writing data if first bytes were transferred.\n+        // The following situation may cause the data to be written to a closed stream.\n+        // 1. A connection that has pending outbound buffers receives GOAWAY frame.\n+        // 2. AbstractHttp2ConnectionHandler.close() clears all active streams.\n+        // 3. Http2ConnectionHandler.onError() writes an error and triggers ctx.flush().\n+        // 4. The ctx.flush() attempts to write the outbound buffers to the stream closed at 2).\n         if (loggedRequestFirstBytesTransferred && !encoder.isWritable(id, streamId())) {\n             if (reqCtx.sessionProtocol().isMultiplex()) {\n                 fail(ClosedPublisherException.get());\n"}}, {"oid": "0913c9a1ccf113bbec8e29ec857532f3c40a0673", "url": "https://github.com/line/armeria/commit/0913c9a1ccf113bbec8e29ec857532f3c40a0673", "message": "Update code comments", "committedDate": "2020-02-04T04:49:09Z", "type": "forcePushed"}, {"oid": "41f1e62bfa06b5318897437c472a5fde0e7cffcb", "url": "https://github.com/line/armeria/commit/41f1e62bfa06b5318897437c472a5fde0e7cffcb", "message": "Update code comments", "committedDate": "2020-02-04T05:26:01Z", "type": "commit"}, {"oid": "41f1e62bfa06b5318897437c472a5fde0e7cffcb", "url": "https://github.com/line/armeria/commit/41f1e62bfa06b5318897437c472a5fde0e7cffcb", "message": "Update code comments", "committedDate": "2020-02-04T05:26:01Z", "type": "forcePushed"}, {"oid": "2c7d1ad139afdf281760da14d9abd8c0dde63883", "url": "https://github.com/line/armeria/commit/2c7d1ad139afdf281760da14d9abd8c0dde63883", "message": "Update error message", "committedDate": "2020-02-04T06:07:52Z", "type": "commit"}]}