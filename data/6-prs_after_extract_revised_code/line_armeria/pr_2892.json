{"pr_number": 2892, "pr_title": "Make `HttpData` closeable and support more `ByteBuf` conversions", "pr_createdAt": "2020-07-10T14:42:48Z", "pr_url": "https://github.com/line/armeria/pull/2892", "timeline": [{"oid": "845f79a133b12b3e80beedb6f9365c016caacdd2", "url": "https://github.com/line/armeria/commit/845f79a133b12b3e80beedb6f9365c016caacdd2", "message": "Make `HttpData` closeable and support more `ByteBuf` conversions\n\nMotivation:\n\n- It is currently inconvenient to deal with the life cycle of pooled\n  `HttData`. A user has to manually release the underlying `ByteBuf`\n  after downcasting to `ByteBufHolder`.\n- The ways to convert an `HttpData` to a `ByteBuf` is quite limited.\n  A user has to write various boilerplate code to compensate this.\n- A user can modify the `{reader,writer}Index` of the returned\n  `ByteBuf`, which will cause many unexpected behaviors.\n  - Even Netty's default HTTP/2 flow controller modifies it, so we need\n    some protection mechanism.\n\nModifications:\n\n- `HttpData` now extends `SafeCloseable`.\n- `ByteBufHttpData` does not implement `ByteHolder` anymore. Instead,\n  `HttpData` provides well defined conversion methods named `byteBuf()`\n  that cover most use cases.\n- Added `ByteBufAccessMode` to support various conversion mode.\n- Renamed `DefaultHttpData` to `ByteArrayHttpData`.\n- Removed `ByteRangeHttpData` in favor of `ByteBufHttpData`.\n  - It was only used in test cases anyway.\n- Moved `PooledObjects` to the `unsafe` package and made it public.\n  - Moved the documentation about pooled `HttpData` there.\n- Added `@UnstableApi` to all classes and methods related with pooled\n  objects.\n\nResult:\n\n- Less confusing contract of `HttpData`-to-`ByteBuf` conversion\n- Easier life cycle management of pooled `HttpData`.\n- Fixes #1936", "committedDate": "2020-07-10T14:41:58Z", "type": "commit"}, {"oid": "29214210cade358b3a119ff80f295c339c53cfdf", "url": "https://github.com/line/armeria/commit/29214210cade358b3a119ff80f295c339c53cfdf", "message": "Mask more unstable API", "committedDate": "2020-07-10T14:53:11Z", "type": "commit"}, {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "url": "https://github.com/line/armeria/commit/8abc447e9c0744abdc1c1dfc226faff88a9f163a", "message": "Merge branch 'master' into closeable_http_data", "committedDate": "2020-07-10T15:00:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1MTI5MQ==", "url": "https://github.com/line/armeria/pull/2892#discussion_r453451291", "bodyText": "nit: 2020 \ud83d\ude09", "author": "minwoox", "createdAt": "2020-07-13T06:02:08Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2016 LINE Corporation", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java b/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\nindex 2b1268897..88ae09586 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2016 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NDA3MQ==", "url": "https://github.com/line/armeria/pull/2892#discussion_r453454071", "bodyText": "Better to use HttpData?", "author": "minwoox", "createdAt": "2020-07-13T06:12:04Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+\n+/**\n+ * Specifies the way a {@link ByteBuf} is retrieved from an {@link HttpData}.\n+ */\n+@UnstableApi\n+public enum ByteBufAccessMode {\n+    /**\n+     * Gets the duplicate (or slice) of the underlying {@link ByteBuf}. This mode is useful when you access\n+     * the {@link ByteBuf} within the life cycle of the {@link HttpData}:\n+     * <pre>{@code\n+     * try (HttpContent content = ...) {", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java b/core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java\nindex 2337298b7..39abd79ef 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java\n\n@@ -15,7 +15,7 @@\n  */\n package com.linecorp.armeria.common;\n \n-import com.linecorp.armeria.common.util.UnstableApi;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.channel.Channel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNDk5Mg==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454104992", "bodyText": "nit: rnn?", "author": "minwoox", "createdAt": "2020-07-14T05:10:51Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@link ByteBuf}-based {@link HttpData}.\n+ */\n+final class ByteBufHttpData implements HttpData {\n+\n+    private static final int FLAG_POOLED = 1;\n+    private static final int FLAG_END_OF_STREAM = 2;\n+    private static final int FLAG_CLOSED = 4;\n+\n+    private final ByteBuf buf;\n+    @Nullable\n+    private byte[] array;\n+    private int flags;\n+\n+    ByteBufHttpData(ByteBuf buf, boolean pooled) {\n+        this(buf, pooled ? FLAG_POOLED : 0, null);\n+    }\n+\n+    private ByteBufHttpData(ByteBuf buf, int flags, @Nullable byte[] array) {\n+        this.buf = buf;\n+        this.array = array;\n+        this.flags = flags;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        if (array != null) {\n+            return array;\n+        }\n+\n+        final int length = buf.readableBytes();\n+        if (isPooled()) {\n+            buf.touch();\n+        } else if (buf.hasArray() && buf.arrayOffset() == 0 && buf.readerIndex() == 0) {\n+            final byte[] bufArray = buf.array();\n+            if (bufArray.length == length) {\n+                return array = bufArray;\n+            }\n+        }\n+\n+        return array = ByteBufUtil.getBytes(buf, buf.readerIndex(), length);\n+    }\n+\n+    @Override\n+    public int length() {\n+        return buf.readableBytes();\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        if (array != null) {\n+            return new String(array, charset);\n+        } else {\n+            return buf.toString(charset);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(buf.readableBytes() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        if (isPooled()) {\n+            helper.addValue(\"pooled\");\n+        }\n+        if ((flags & FLAG_CLOSED) != 0) {\n+            helper.addValue(\"closed\");\n+        }\n+\n+        return helper.add(\"byteBuf\", buf)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        if (array != null) {\n+            return new FastByteArrayInputStream(array);\n+        } else {\n+            return new ByteBufInputStream(buf.duplicate(), false);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return (flags & FLAG_END_OF_STREAM) != 0;\n+    }\n+\n+    @Override\n+    public ByteBufHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+\n+        int newFlags = flags & ~FLAG_END_OF_STREAM;\n+        if (endOfStream) {\n+            newFlags |= FLAG_END_OF_STREAM;\n+        }\n+\n+        return new ByteBufHttpData(buf, newFlags, array);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return (flags & FLAG_POOLED) != 0;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        switch (mode) {", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java b/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\nindex 02938e4af..16c52595b 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\n\n@@ -144,7 +144,7 @@ final class ByteBufHttpData implements HttpData {\n \n     @Override\n     public ByteBuf byteBuf(ByteBufAccessMode mode) {\n-        switch (mode) {\n+        switch (requireNonNull(mode, \"mode\")) {\n             case DUPLICATE:\n                 return buf.duplicate();\n             case RETAINED_DUPLICATE:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzczMg==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454107732", "bodyText": "nit: rnn for mode?", "author": "minwoox", "createdAt": "2020-07-14T05:20:15Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.util.internal.EmptyArrays;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@code byte[]}-based {@link HttpData}.\n+ */\n+final class ByteArrayHttpData implements HttpData {\n+\n+    static final ByteArrayHttpData EMPTY = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, false);\n+    static final ByteArrayHttpData EMPTY_EOS = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, true);\n+\n+    private final byte[] array;\n+    private final boolean endOfStream;\n+\n+    ByteArrayHttpData(byte[] array) {\n+        this(array, false);\n+    }\n+\n+    private ByteArrayHttpData(byte[] array, boolean endOfStream) {\n+        this.array = array;\n+        this.endOfStream = endOfStream;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        return array;\n+    }\n+\n+    @Override\n+    public int length() {\n+        return array.length;\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        return new String(array, charset);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(length() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        return helper.add(\"array\", array)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        return new FastByteArrayInputStream(array);\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return endOfStream;\n+    }\n+\n+    @Override\n+    public ByteArrayHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEmpty()) {\n+            return endOfStream ? EMPTY_EOS : EMPTY;\n+        }\n+\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+        return new ByteArrayHttpData(array, endOfStream);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        if (isEmpty()) {", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java b/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\nindex 2b1268897..88ae09586 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2016 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzc4Ng==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454107786", "bodyText": "ditto", "author": "minwoox", "createdAt": "2020-07-14T05:20:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.util.internal.EmptyArrays;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@code byte[]}-based {@link HttpData}.\n+ */\n+final class ByteArrayHttpData implements HttpData {\n+\n+    static final ByteArrayHttpData EMPTY = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, false);\n+    static final ByteArrayHttpData EMPTY_EOS = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, true);\n+\n+    private final byte[] array;\n+    private final boolean endOfStream;\n+\n+    ByteArrayHttpData(byte[] array) {\n+        this(array, false);\n+    }\n+\n+    private ByteArrayHttpData(byte[] array, boolean endOfStream) {\n+        this.array = array;\n+        this.endOfStream = endOfStream;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        return array;\n+    }\n+\n+    @Override\n+    public int length() {\n+        return array.length;\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        return new String(array, charset);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(length() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        return helper.add(\"array\", array)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        return new FastByteArrayInputStream(array);\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return endOfStream;\n+    }\n+\n+    @Override\n+    public ByteArrayHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEmpty()) {\n+            return endOfStream ? EMPTY_EOS : EMPTY;\n+        }\n+\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+        return new ByteArrayHttpData(array, endOfStream);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        if (isEmpty()) {\n+            return Unpooled.EMPTY_BUFFER;\n+        }\n+\n+        if (mode != ByteBufAccessMode.DIRECT) {\n+            return Unpooled.wrappedBuffer(array);\n+        } else {\n+            final ByteBuf copy = newDirectByteBuf();\n+            copy.writeBytes(array);\n+            return copy;\n+        }\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(int offset, int length, ByteBufAccessMode mode) {", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java b/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\nindex 2b1268897..88ae09586 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2016 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzkwNA==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454107904", "bodyText": "ditto", "author": "minwoox", "createdAt": "2020-07-14T05:20:46Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@link ByteBuf}-based {@link HttpData}.\n+ */\n+final class ByteBufHttpData implements HttpData {\n+\n+    private static final int FLAG_POOLED = 1;\n+    private static final int FLAG_END_OF_STREAM = 2;\n+    private static final int FLAG_CLOSED = 4;\n+\n+    private final ByteBuf buf;\n+    @Nullable\n+    private byte[] array;\n+    private int flags;\n+\n+    ByteBufHttpData(ByteBuf buf, boolean pooled) {\n+        this(buf, pooled ? FLAG_POOLED : 0, null);\n+    }\n+\n+    private ByteBufHttpData(ByteBuf buf, int flags, @Nullable byte[] array) {\n+        this.buf = buf;\n+        this.array = array;\n+        this.flags = flags;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        if (array != null) {\n+            return array;\n+        }\n+\n+        final int length = buf.readableBytes();\n+        if (isPooled()) {\n+            buf.touch();\n+        } else if (buf.hasArray() && buf.arrayOffset() == 0 && buf.readerIndex() == 0) {\n+            final byte[] bufArray = buf.array();\n+            if (bufArray.length == length) {\n+                return array = bufArray;\n+            }\n+        }\n+\n+        return array = ByteBufUtil.getBytes(buf, buf.readerIndex(), length);\n+    }\n+\n+    @Override\n+    public int length() {\n+        return buf.readableBytes();\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        if (array != null) {\n+            return new String(array, charset);\n+        } else {\n+            return buf.toString(charset);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(buf.readableBytes() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        if (isPooled()) {\n+            helper.addValue(\"pooled\");\n+        }\n+        if ((flags & FLAG_CLOSED) != 0) {\n+            helper.addValue(\"closed\");\n+        }\n+\n+        return helper.add(\"byteBuf\", buf)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        if (array != null) {\n+            return new FastByteArrayInputStream(array);\n+        } else {\n+            return new ByteBufInputStream(buf.duplicate(), false);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return (flags & FLAG_END_OF_STREAM) != 0;\n+    }\n+\n+    @Override\n+    public ByteBufHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+\n+        int newFlags = flags & ~FLAG_END_OF_STREAM;\n+        if (endOfStream) {\n+            newFlags |= FLAG_END_OF_STREAM;\n+        }\n+\n+        return new ByteBufHttpData(buf, newFlags, array);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return (flags & FLAG_POOLED) != 0;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        switch (mode) {\n+            case DUPLICATE:\n+                return buf.duplicate();\n+            case RETAINED_DUPLICATE:\n+                return buf.retainedDuplicate();\n+            case DIRECT:\n+                if (buf.isDirect()) {\n+                    return buf.retainedDuplicate();\n+                }\n+\n+                final ByteBuf copy = newDirectByteBuf();\n+                copy.writeBytes(buf, buf.readerIndex(), buf.readableBytes());\n+                return copy;\n+        }\n+\n+        throw new Error(); // Never reaches here.\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(int offset, int length, ByteBufAccessMode mode) {", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java b/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\nindex 02938e4af..16c52595b 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\n\n@@ -144,7 +144,7 @@ final class ByteBufHttpData implements HttpData {\n \n     @Override\n     public ByteBuf byteBuf(ByteBufAccessMode mode) {\n-        switch (mode) {\n+        switch (requireNonNull(mode, \"mode\")) {\n             case DUPLICATE:\n                 return buf.duplicate();\n             case RETAINED_DUPLICATE:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExNDgwNg==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454114806", "bodyText": "Could just otherwise it's no-op. ?", "author": "minwoox", "createdAt": "2020-07-14T05:43:12Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.unsafe;\n+\n+import java.util.concurrent.Executor;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+import com.linecorp.armeria.server.file.HttpFile;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * Utility class that provides ways to create a pooled {@link HttpData} and manage its life cycle.\n+ *\n+ * <p><b>Warning</b>: Using a pooled {@link HttpData} is very advanced and can open up much more complicated\n+ * management of a reference counted {@link ByteBuf}. You should only ever do this if you are very comfortable\n+ * with Netty. It is recommended to also read through\n+ * <a href=\"https://netty.io/wiki/reference-counted-objects.html\">Reference counted objects</a>\n+ * for more information on pooled objects.</p>\n+ *\n+ * <h3>What is a pooled {@link HttpData}?</h3>\n+ *\n+ * <p>A pooled {@link HttpData} is a special variant of {@link HttpData} whose {@link HttpData#isPooled()}\n+ * returns {@code true}. It's usually created via {@link HttpData#wrap(ByteBuf)} by wrapping an existing\n+ * {@link ByteBuf}. It can appear when you consume data using the operations such as:\n+ * <ul>\n+ *   <li>{@link StreamMessage#subscribe(Subscriber, SubscriptionOption...)} with\n+ *       {@link SubscriptionOption#WITH_POOLED_OBJECTS}</li>\n+ *   <li>{@link HttpRequest#aggregateWithPooledObjects(ByteBufAllocator)}</li>\n+ *   <li>{@link HttpResponse#aggregateWithPooledObjects(ByteBufAllocator)}</li>\n+ *   <li>{@link HttpFile#aggregateWithPooledObjects(Executor, ByteBufAllocator)}</li>\n+ * </ul></p>\n+ *\n+ * <p>To put it another way, you'll <b>never</b> see a pooled {@link HttpData} if you did not use such\n+ * operations. You can ignore the rest of this section if that's the case.</p>\n+ *\n+ * <p>Any time you receive a pooled {@link HttpData}, it will have an underlying {@link ByteBuf} that must be\n+ * released - failure to release the {@link ByteBuf} will result in a memory leak and poor performance.\n+ * You must make sure to do this by calling {@link HttpData#close()}, usually in a try-with-resources structure\n+ * to avoid side effects, e.g.\n+ * <pre>{@code\n+ * HttpResponse res = client.get(\"/\");\n+ * res.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n+ *    .thenApply(aggResp -> {\n+ *        // try-with-resources here ensures the content is released\n+ *        // if it is a pooled HttpData, or otherwise is a no-op if it is not.", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java b/core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java\nindex 7ca859853..6ea3a1cd2 100644\n--- a/core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java\n+++ b/core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java\n\n@@ -22,9 +22,9 @@ import org.reactivestreams.Subscriber;\n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n import com.linecorp.armeria.common.stream.StreamMessage;\n import com.linecorp.armeria.common.stream.SubscriptionOption;\n-import com.linecorp.armeria.common.util.UnstableApi;\n import com.linecorp.armeria.server.file.HttpFile;\n \n import io.netty.buffer.ByteBuf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExNjI1OQ==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454116259", "bodyText": "\ud83d\ude04", "author": "minwoox", "createdAt": "2020-07-14T05:47:29Z", "path": "core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java", "diffHunk": "@@ -382,6 +382,7 @@ void custom() {\n                                    \"armeria-lphc\", \"60, 5\"),\n                 HttpData.ofUtf8(\"ok\")));\n \n+        System.err.println(\"--------------------------\");", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxNzU0NQ==", "url": "https://github.com/line/armeria/pull/2892#discussion_r455517545", "bodyText": "\ud83d\ude05", "author": "trustin", "createdAt": "2020-07-16T05:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExNjI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java b/core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java\nindex 21371924d..f0cb505bd 100644\n--- a/core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java\n+++ b/core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java\n\n@@ -382,7 +382,6 @@ class HealthCheckServiceTest {\n                                    \"armeria-lphc\", \"60, 5\"),\n                 HttpData.ofUtf8(\"ok\")));\n \n-        System.err.println(\"--------------------------\");\n         // Send a no-op request.\n         final AggregatedHttpResponse res3 = client.execute(RequestHeaders.of(HttpMethod.PUT, \"/hc_custom\"),\n                                                            \"NOOP\").aggregate().join();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxNTM1Nw==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454215357", "bodyText": "I think this should come first for readability given the method's primary goal is changing the value of endofstream", "author": "anuraaga", "createdAt": "2020-07-14T09:10:06Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.util.internal.EmptyArrays;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@code byte[]}-based {@link HttpData}.\n+ */\n+final class ByteArrayHttpData implements HttpData {\n+\n+    static final ByteArrayHttpData EMPTY = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, false);\n+    static final ByteArrayHttpData EMPTY_EOS = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, true);\n+\n+    private final byte[] array;\n+    private final boolean endOfStream;\n+\n+    ByteArrayHttpData(byte[] array) {\n+        this(array, false);\n+    }\n+\n+    private ByteArrayHttpData(byte[] array, boolean endOfStream) {\n+        this.array = array;\n+        this.endOfStream = endOfStream;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        return array;\n+    }\n+\n+    @Override\n+    public int length() {\n+        return array.length;\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        return new String(array, charset);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(length() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        return helper.add(\"array\", array)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        return new FastByteArrayInputStream(array);\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return endOfStream;\n+    }\n+\n+    @Override\n+    public ByteArrayHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEmpty()) {\n+            return endOfStream ? EMPTY_EOS : EMPTY;\n+        }\n+\n+        if (isEndOfStream() == endOfStream) {", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java b/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\nindex 2b1268897..88ae09586 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2016 LINE Corporation\n+ * Copyright 2020 LINE Corporation\n  *\n  * LINE Corporation licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxODc5OA==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454218798", "bodyText": "DIRECT_RETAINED_DUPLICATE?", "author": "anuraaga", "createdAt": "2020-07-14T09:15:56Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+\n+/**\n+ * Specifies the way a {@link ByteBuf} is retrieved from an {@link HttpData}.\n+ */\n+@UnstableApi\n+public enum ByteBufAccessMode {\n+    /**\n+     * Gets the duplicate (or slice) of the underlying {@link ByteBuf}. This mode is useful when you access\n+     * the {@link ByteBuf} within the life cycle of the {@link HttpData}:\n+     * <pre>{@code\n+     * try (HttpContent content = ...) {\n+     *     ByteBuf buf = content.byteBuf(ByteBufAccessMode.DUPLICATE);\n+     *     // Read something from 'buf' here.\n+     * }\n+     * }</pre>\n+     *\n+     * @see ByteBuf#duplicate()\n+     * @see ByteBuf#slice()\n+     */\n+    DUPLICATE,\n+    /**\n+     * Gets the retained duplicate (or slice) of the underlying {@link ByteBuf}. This mode is useful when\n+     * you access the {@link ByteBuf} beyond the life cycle of the {@link HttpData}, such as creating\n+     * another {@link HttpData} that shares the {@link ByteBuf}'s memory region:\n+     * <pre>{@code\n+     * HttpData data1 = HttpData.wrap(byteBuf);\n+     * HttpData data2 = HttpData.wrap(data1.byteBuf(ByteBufAccessMode.RETAINED_DUPLICATE));\n+     * }</pre>\n+     *\n+     * @see ByteBuf#retainedDuplicate()\n+     * @see ByteBuf#retainedSlice()\n+     */\n+    RETAINED_DUPLICATE,\n+    /**\n+     * Converts the underlying {@link ByteBuf} into a direct {@link ByteBuf} if necessary. If the underlying\n+     * {@link ByteBuf} is already direct, it behaves same with {@link #RETAINED_DUPLICATE}. Otherwise, a new\n+     * direct {@link ByteBuf} is allocated and the content of the underlying {@link ByteBuf} is copied into it.\n+     * This access mode is useful when you perform direct I/O or send data to a Netty {@link Channel}.\n+     */\n+    DIRECT", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxNTc4Mw==", "url": "https://github.com/line/armeria/pull/2892#discussion_r455515783", "bodyText": "It makes or does not make a copy depending on situation,  so 'retained' or 'duplicate' is not always correct. DIRECT_COPY_OR_RETAINED_DUPLICATE is too long obviously. Any better suggestions?", "author": "trustin", "createdAt": "2020-07-16T05:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxODc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxOTA4OA==", "url": "https://github.com/line/armeria/pull/2892#discussion_r455519088", "bodyText": "I think semantically it's the same as RETAINED_DUPLICATE, returning a new reference but guarantees that it's direct, so seems clear. The copy is sort of an implementation detail that is fine with javadoc.\nOtherwise direct seems like a totally different concept from the others and looks weird in this enum.", "author": "anuraaga", "createdAt": "2020-07-16T05:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxODc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NTY2MA==", "url": "https://github.com/line/armeria/pull/2892#discussion_r456185660", "bodyText": "'duplicate' and 'retained duplicate' in Netty are well-known terms that signify they will never make a copy, so I still think it's confusing to use here. \ud83e\udd14", "author": "trustin", "createdAt": "2020-07-17T02:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxODc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NjgxMA==", "url": "https://github.com/line/armeria/pull/2892#discussion_r456186810", "bodyText": "How about FOR_IO?", "author": "trustin", "createdAt": "2020-07-17T02:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxODc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4Nzk4Nw==", "url": "https://github.com/line/armeria/pull/2892#discussion_r456187987", "bodyText": "FOR_IO seems a bit better yeah", "author": "anuraaga", "createdAt": "2020-07-17T02:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxODc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java b/core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java\nindex 2337298b7..39abd79ef 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java\n\n@@ -15,7 +15,7 @@\n  */\n package com.linecorp.armeria.common;\n \n-import com.linecorp.armeria.common.util.UnstableApi;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.channel.Channel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNDE2MQ==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454234161", "bodyText": "Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            data.close();\n          \n          \n            \n                            buf.close();", "author": "ikhoon", "createdAt": "2020-07-14T09:42:39Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java", "diffHunk": "@@ -162,7 +161,7 @@ private ChannelFuture doWriteUnsplitData(int id, HttpData data, boolean endStrea\n             return future;\n         } finally {\n             if (!handled) {\n-                ReferenceCountUtil.safeRelease(buf);\n+                data.close();", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxNjE5NA==", "url": "https://github.com/line/armeria/pull/2892#discussion_r455516194", "bodyText": "Nice catch. \ud83d\udc4d", "author": "trustin", "createdAt": "2020-07-16T05:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNDE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java b/core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java\nindex 8f3276df9..ea8196f98 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java\n\n@@ -161,7 +161,7 @@ public abstract class Http1ObjectEncoder implements HttpObjectEncoder {\n             return future;\n         } finally {\n             if (!handled) {\n-                data.close();\n+                buf.release();\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNzk3Nw==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454237977", "bodyText": "Could remove | FLAG_CLOSED?", "author": "ikhoon", "createdAt": "2020-07-14T09:49:23Z", "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@link ByteBuf}-based {@link HttpData}.\n+ */\n+final class ByteBufHttpData implements HttpData {\n+\n+    private static final int FLAG_POOLED = 1;\n+    private static final int FLAG_END_OF_STREAM = 2;\n+    private static final int FLAG_CLOSED = 4;\n+\n+    private final ByteBuf buf;\n+    @Nullable\n+    private byte[] array;\n+    private int flags;\n+\n+    ByteBufHttpData(ByteBuf buf, boolean pooled) {\n+        this(buf, pooled ? FLAG_POOLED : 0, null);\n+    }\n+\n+    private ByteBufHttpData(ByteBuf buf, int flags, @Nullable byte[] array) {\n+        this.buf = buf;\n+        this.array = array;\n+        this.flags = flags;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        if (array != null) {\n+            return array;\n+        }\n+\n+        final int length = buf.readableBytes();\n+        if (isPooled()) {\n+            buf.touch();\n+        } else if (buf.hasArray() && buf.arrayOffset() == 0 && buf.readerIndex() == 0) {\n+            final byte[] bufArray = buf.array();\n+            if (bufArray.length == length) {\n+                return array = bufArray;\n+            }\n+        }\n+\n+        return array = ByteBufUtil.getBytes(buf, buf.readerIndex(), length);\n+    }\n+\n+    @Override\n+    public int length() {\n+        return buf.readableBytes();\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        if (array != null) {\n+            return new String(array, charset);\n+        } else {\n+            return buf.toString(charset);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(buf.readableBytes() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        if (isPooled()) {\n+            helper.addValue(\"pooled\");\n+        }\n+        if ((flags & FLAG_CLOSED) != 0) {\n+            helper.addValue(\"closed\");\n+        }\n+\n+        return helper.add(\"byteBuf\", buf)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        if (array != null) {\n+            return new FastByteArrayInputStream(array);\n+        } else {\n+            return new ByteBufInputStream(buf.duplicate(), false);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return (flags & FLAG_END_OF_STREAM) != 0;\n+    }\n+\n+    @Override\n+    public ByteBufHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+\n+        int newFlags = flags & ~FLAG_END_OF_STREAM;\n+        if (endOfStream) {\n+            newFlags |= FLAG_END_OF_STREAM;\n+        }\n+\n+        return new ByteBufHttpData(buf, newFlags, array);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return (flags & FLAG_POOLED) != 0;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        switch (mode) {\n+            case DUPLICATE:\n+                return buf.duplicate();\n+            case RETAINED_DUPLICATE:\n+                return buf.retainedDuplicate();\n+            case DIRECT:\n+                if (buf.isDirect()) {\n+                    return buf.retainedDuplicate();\n+                }\n+\n+                final ByteBuf copy = newDirectByteBuf();\n+                copy.writeBytes(buf, buf.readerIndex(), buf.readableBytes());\n+                return copy;\n+        }\n+\n+        throw new Error(); // Never reaches here.\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(int offset, int length, ByteBufAccessMode mode) {\n+        final int startIndex = buf.readerIndex() + offset;\n+        switch (mode) {\n+            case DUPLICATE:\n+                return buf.slice(startIndex, length);\n+            case RETAINED_DUPLICATE:\n+                return buf.retainedSlice(startIndex, length);\n+            case DIRECT:\n+                if (buf.isDirect()) {\n+                    return buf.retainedSlice(startIndex, length);\n+                }\n+\n+                final ByteBuf copy = newDirectByteBuf(length);\n+                copy.writeBytes(buf, startIndex, length);\n+                return copy;\n+        }\n+\n+        throw new Error(); // Never reaches here.\n+    }\n+\n+    private ByteBuf newDirectByteBuf() {\n+        return newDirectByteBuf(buf.readableBytes());\n+    }\n+\n+    private static ByteBuf newDirectByteBuf(int length) {\n+        return PooledByteBufAllocator.DEFAULT.directBuffer(length);\n+    }\n+\n+    @Override\n+    public void close() {\n+        // This is not thread safe, but an attempt to close one instance from multiple threads would fail\n+        // with an IllegalReferenceCountException anyway.\n+        if ((flags & (FLAG_POOLED | FLAG_CLOSED)) == FLAG_POOLED) {", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxMzAwNg==", "url": "https://github.com/line/armeria/pull/2892#discussion_r455513006", "bodyText": "No, we can't, because otherwise .release() can be called twice.", "author": "trustin", "createdAt": "2020-07-16T05:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNzk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxNzk5Nw==", "url": "https://github.com/line/armeria/pull/2892#discussion_r455517997", "bodyText": "I understand. \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-07-16T05:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNzk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java b/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\nindex 02938e4af..16c52595b 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java\n\n@@ -144,7 +144,7 @@ final class ByteBufHttpData implements HttpData {\n \n     @Override\n     public ByteBuf byteBuf(ByteBufAccessMode mode) {\n-        switch (mode) {\n+        switch (requireNonNull(mode, \"mode\")) {\n             case DUPLICATE:\n                 return buf.duplicate();\n             case RETAINED_DUPLICATE:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI1Njk5Ng==", "url": "https://github.com/line/armeria/pull/2892#discussion_r454256996", "bodyText": "\ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-07-14T10:24:53Z", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -77,41 +75,31 @@\n     @Nullable\n     public static HttpHeaders parseTrailers(HttpData response) {\n         requireNonNull(response, \"response\");\n-        final ByteBuf buf;\n-        if (response instanceof PooledHttpData) {\n-            buf = ((PooledHttpData) response).content();\n-        } else {\n-            buf = Unpooled.wrappedBuffer(response.array());\n-        }\n-        final int readerIndex = buf.readerIndex();\n+        final ByteBuf buf = response.byteBuf();\n \n-        try {\n-            HttpHeaders trailers = null;\n-            while (buf.isReadable(HEADER_LENGTH)) {\n-                final short type = buf.readUnsignedByte();\n-                if ((type & RESERVED_MASK) != 0) {\n-                    // Malformed header\n-                    break;\n-                }\n+        HttpHeaders trailers = null;\n+        while (buf.isReadable(HEADER_LENGTH)) {\n+            final short type = buf.readUnsignedByte();\n+            if ((type & RESERVED_MASK) != 0) {\n+                // Malformed header\n+                break;\n+            }\n \n-                final int length = buf.readInt();\n-                // 8th (MSB) bit of the 1st gRPC frame byte is:\n-                // - '1' for trailers\n-                // - '0' for data\n-                //\n-                // See: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\n-                if (type >> 7 == 1) {\n-                    trailers = InternalGrpcWebUtil.parseGrpcWebTrailers(buf);\n-                    break;\n-                } else {\n-                    // Skip a gRPC content\n-                    buf.skipBytes(length);\n-                }\n+            final int length = buf.readInt();\n+            // 8th (MSB) bit of the 1st gRPC frame byte is:\n+            // - '1' for trailers\n+            // - '0' for data\n+            //\n+            // See: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\n+            if (type >> 7 == 1) {\n+                trailers = InternalGrpcWebUtil.parseGrpcWebTrailers(buf);\n+                break;\n+            } else {\n+                // Skip a gRPC content\n+                buf.skipBytes(length);\n             }\n-            return trailers;\n-        } finally {\n-            buf.readerIndex(readerIndex);", "originalCommit": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "d69a9a7ef5bd1eafd00ac7fa55f65d2170335ec6", "url": "https://github.com/line/armeria/commit/d69a9a7ef5bd1eafd00ac7fa55f65d2170335ec6", "message": "Merge branch 'master' into closeable_http_data", "committedDate": "2020-07-16T05:14:03Z", "type": "commit"}, {"oid": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "url": "https://github.com/line/armeria/commit/3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "message": "Address all review comments", "committedDate": "2020-07-16T05:21:02Z", "type": "commit"}, {"oid": "2942c653a88253ccadbfa68baef27378f6b6d9a2", "url": "https://github.com/line/armeria/commit/2942c653a88253ccadbfa68baef27378f6b6d9a2", "message": "Fix compilation errors", "committedDate": "2020-07-16T05:24:07Z", "type": "commit"}, {"oid": "e4f0115094b24ed61ebe4d7c364a5b103101507c", "url": "https://github.com/line/armeria/commit/e4f0115094b24ed61ebe4d7c364a5b103101507c", "message": "Fix some leaks reported by the build", "committedDate": "2020-07-16T11:13:31Z", "type": "commit"}, {"oid": "27def27588b9b095bb756bd2541e26e8c2f3c3b2", "url": "https://github.com/line/armeria/commit/27def27588b9b095bb756bd2541e26e8c2f3c3b2", "message": "Fix a test failure", "committedDate": "2020-07-16T11:56:43Z", "type": "commit"}, {"oid": "fe5ced9afaa93f3af2d5dfd250f9ca260e1a3ebc", "url": "https://github.com/line/armeria/commit/fe5ced9afaa93f3af2d5dfd250f9ca260e1a3ebc", "message": "Fix another `ClientFactory` leak", "committedDate": "2020-07-16T12:11:33Z", "type": "commit"}, {"oid": "a410c2846b37da56331f44c749af19f1311e35bf", "url": "https://github.com/line/armeria/commit/a410c2846b37da56331f44c749af19f1311e35bf", "message": "Fix buffer leaks in 2 tests", "committedDate": "2020-07-16T15:09:13Z", "type": "commit"}, {"oid": "ee51da2e53a15cc06b6748c870c39aef5845e021", "url": "https://github.com/line/armeria/commit/ee51da2e53a15cc06b6748c870c39aef5845e021", "message": "Fix more leaks in the tests", "committedDate": "2020-07-16T17:40:30Z", "type": "commit"}, {"oid": "3f93bdd898507325379cb8567b5e59675a119260", "url": "https://github.com/line/armeria/commit/3f93bdd898507325379cb8567b5e59675a119260", "message": "Fix a buffer leak in `RetryingClient` /cc @minwoox", "committedDate": "2020-07-16T17:41:01Z", "type": "commit"}, {"oid": "e665a34742cdc2c945033967207109ba4b05ea45", "url": "https://github.com/line/armeria/commit/e665a34742cdc2c945033967207109ba4b05ea45", "message": "Fix a leak in `Http1ObjectEncoder`", "committedDate": "2020-07-16T17:42:28Z", "type": "commit"}, {"oid": "b5571cca4b8991d57f33c6d786074da560c31d59", "url": "https://github.com/line/armeria/commit/b5571cca4b8991d57f33c6d786074da560c31d59", "message": "Fix a leak in ServerMaxConnectionAgeTest", "committedDate": "2020-07-16T18:11:52Z", "type": "commit"}, {"oid": "8b4695a2098aeedd5efda905868ce74e3ae965d7", "url": "https://github.com/line/armeria/commit/8b4695a2098aeedd5efda905868ce74e3ae965d7", "message": "Fix a leak in `DefaultStreamMessageDuplicator` /cc @minwoox", "committedDate": "2020-07-16T19:35:05Z", "type": "commit"}, {"oid": "7afd6bf520e72474f4abeb4f7aa3840dc234a21d", "url": "https://github.com/line/armeria/commit/7afd6bf520e72474f4abeb4f7aa3840dc234a21d", "message": "Fix another leak in `RetryingClient` /cc @minwoox", "committedDate": "2020-07-16T19:37:37Z", "type": "commit"}, {"oid": "f50fb965193620c5e452afc9d35ac82ee0045dad", "url": "https://github.com/line/armeria/commit/f50fb965193620c5e452afc9d35ac82ee0045dad", "message": "Efficiency", "committedDate": "2020-07-16T19:50:40Z", "type": "commit"}, {"oid": "d11525e14b2f4321c8c355099578c2ba7a0a876c", "url": "https://github.com/line/armeria/commit/d11525e14b2f4321c8c355099578c2ba7a0a876c", "message": "Fix a leak similar to that of `RetryingClient` in `CircuitBreakerClient` /cc @ikhoon, @minwoox", "committedDate": "2020-07-16T20:13:22Z", "type": "commit"}, {"oid": "ec59a3a7c7cf305e6f5be254e74911e6599ebec7", "url": "https://github.com/line/armeria/commit/ec59a3a7c7cf305e6f5be254e74911e6599ebec7", "message": "More touches", "committedDate": "2020-07-16T20:32:11Z", "type": "commit"}, {"oid": "c5023c6d67cb819ac5c4461679653f1ada8252a9", "url": "https://github.com/line/armeria/commit/c5023c6d67cb819ac5c4461679653f1ada8252a9", "message": "One more touch", "committedDate": "2020-07-16T20:32:59Z", "type": "commit"}, {"oid": "2f2ae53e0d715d68ff42cfe923f7773610ac5b86", "url": "https://github.com/line/armeria/commit/2f2ae53e0d715d68ff42cfe923f7773610ac5b86", "message": "Add `HttpData.touch()` to touch without creating a duplicate", "committedDate": "2020-07-16T20:43:07Z", "type": "commit"}, {"oid": "ed64db99319769435a816605a73f8361e14e924b", "url": "https://github.com/line/armeria/commit/ed64db99319769435a816605a73f8361e14e924b", "message": "Simplify", "committedDate": "2020-07-16T20:46:58Z", "type": "commit"}, {"oid": "6fef716085e8d7e67d8b07db516f37b0a4301d83", "url": "https://github.com/line/armeria/commit/6fef716085e8d7e67d8b07db516f37b0a4301d83", "message": "Too many static imports", "committedDate": "2020-07-17T02:27:28Z", "type": "commit"}, {"oid": "51a0874a92172e9a9c7d36935f6c217b6f6de410", "url": "https://github.com/line/armeria/commit/51a0874a92172e9a9c7d36935f6c217b6f6de410", "message": "Add more checks and comments as @minwoox suggested", "committedDate": "2020-07-17T02:34:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NDc2NQ==", "url": "https://github.com/line/armeria/pull/2892#discussion_r456184765", "bodyText": "nit: ByteBuf#touch(Object)", "author": "minwoox", "createdAt": "2020-07-17T02:33:34Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java", "diffHunk": "@@ -100,10 +102,18 @@ public static void close(Object obj) {\n      * Does nothing if it's not a pooled {@link HttpData}.\n      */\n     public static void touch(Object obj) {\n+        touch(obj, obj);\n+    }\n+\n+    /**\n+     * Calls {@link ByteBuf#touch()} of the specified {@link HttpData}'s underlying {@link ByteBuf}.", "originalCommit": "ec59a3a7c7cf305e6f5be254e74911e6599ebec7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51a0874a92172e9a9c7d36935f6c217b6f6de410", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java b/core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java\nindex b30a26fe4..a290919c7 100644\n--- a/core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java\n+++ b/core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java\n\n@@ -111,10 +111,7 @@ public final class PooledObjects {\n      */\n     public static void touch(Object obj, @Nullable Object hint) {\n         if (obj instanceof HttpData) {\n-            final HttpData data = (HttpData) obj;\n-            if (data.isPooled()) {\n-                data.byteBuf().touch(hint);\n-            }\n+            ((HttpData) obj).touch(hint);\n         }\n     }\n \n"}}, {"oid": "bd92cf48fdf6ae3cca10c2a1e3f070392d748943", "url": "https://github.com/line/armeria/commit/bd92cf48fdf6ae3cca10c2a1e3f070392d748943", "message": "Reimplement HttpData.toString() so it is useful and good-looking", "committedDate": "2020-07-17T05:17:16Z", "type": "commit"}, {"oid": "04fef12a47e25034a8d4ed0029a2f786e286464a", "url": "https://github.com/line/armeria/commit/04fef12a47e25034a8d4ed0029a2f786e286464a", "message": "Fix a test failure", "committedDate": "2020-07-17T07:05:24Z", "type": "commit"}, {"oid": "c746a61f00a2d98f21ce6696bb19342cc883c5ba", "url": "https://github.com/line/armeria/commit/c746a61f00a2d98f21ce6696bb19342cc883c5ba", "message": "Address the comment from @minwoox", "committedDate": "2020-07-17T07:20:00Z", "type": "commit"}, {"oid": "3fd04b617a80d01f389f7a837f2febefdb166b6c", "url": "https://github.com/line/armeria/commit/3fd04b617a80d01f389f7a837f2febefdb166b6c", "message": "Optimize thanks to @minwoox", "committedDate": "2020-07-17T07:25:50Z", "type": "commit"}, {"oid": "a00241037a2c2280667af203bcd6752b3ea07d23", "url": "https://github.com/line/armeria/commit/a00241037a2c2280667af203bcd6752b3ea07d23", "message": "Too many touches were causing slight perf drop\n\nNow touching less yet providing enough info", "committedDate": "2020-07-17T08:05:01Z", "type": "commit"}, {"oid": "773ee46c0e64745745896772588483e88b41e861", "url": "https://github.com/line/armeria/commit/773ee46c0e64745745896772588483e88b41e861", "message": "`HttpData` is relatively short-living, probably no need to cache strVal", "committedDate": "2020-07-17T09:28:33Z", "type": "commit"}, {"oid": "2f31392ef8320954267dcda9f83e8b3f17437895", "url": "https://github.com/line/armeria/commit/2f31392ef8320954267dcda9f83e8b3f17437895", "message": "Checkstyle", "committedDate": "2020-07-17T09:29:16Z", "type": "commit"}, {"oid": "1fa85c1cf9e4789800d6e9a8f279e4b2b0f718f9", "url": "https://github.com/line/armeria/commit/1fa85c1cf9e4789800d6e9a8f279e4b2b0f718f9", "message": "DIRECT -> FOR_IO", "committedDate": "2020-07-17T09:34:08Z", "type": "commit"}, {"oid": "18378c68b349a4c4e72413746b96cca19c3dec08", "url": "https://github.com/line/armeria/commit/18378c68b349a4c4e72413746b96cca19c3dec08", "message": "Merge branch 'master' into closeable_http_data", "committedDate": "2020-07-17T10:21:53Z", "type": "commit"}, {"oid": "18378c68b349a4c4e72413746b96cca19c3dec08", "url": "https://github.com/line/armeria/commit/18378c68b349a4c4e72413746b96cca19c3dec08", "message": "Merge branch 'master' into closeable_http_data", "committedDate": "2020-07-17T10:21:53Z", "type": "forcePushed"}, {"oid": "e90af2b90a948095743ecb791da1c80f61d3ed95", "url": "https://github.com/line/armeria/commit/e90af2b90a948095743ecb791da1c80f61d3ed95", "message": "Remove the obsolete tests", "committedDate": "2020-07-17T10:24:22Z", "type": "commit"}]}