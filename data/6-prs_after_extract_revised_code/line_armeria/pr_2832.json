{"pr_number": 2832, "pr_title": "Publish stream events before calling `RequestLogBuilder`", "pr_createdAt": "2020-06-24T08:29:05Z", "pr_url": "https://github.com/line/armeria/pull/2832", "timeline": [{"oid": "e82b49bee6c9b132793d5fd5a034a622d2717774", "url": "https://github.com/line/armeria/commit/e82b49bee6c9b132793d5fd5a034a622d2717774", "message": "Publish stream events before calling `RequestLogBuilder`\n\nMotivation:\n\nWe currently call `RequestLogBuilder` methods even before publishing\nstream events (`StreamMesssage.write/close/abort()`) in some places,\nsuch as `HttpResponseDecoder`. This can be a problem because the\ncallbacks added to the `RequestLog` may be invoked even before any\nstream events are published.\n\nFor example, `HttpResponseDecoder` may fail to publish the received\n`ResponseHeaders` when a `RequestLog` callback aborts the response\neven before the publication, leading to the following exception:\n\n    io.netty.handler.codec.http2.Http2Exception: failed to consume a HEADERS frame\n        at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:117)\n        at com.linecorp.armeria.client.Http2ResponseDecoder.onHeadersRead(Http2ResponseDecoder.java:206)\n        at com.linecorp.armeria.client.Http2ResponseDecoder.onHeadersRead(Http2ResponseDecoder.java:219)\n        ...\n    Caused by: com.linecorp.armeria.common.stream.ClosedStreamException: null\n        at com.linecorp.armeria.common.stream.ClosedStreamException.get(ClosedStreamException.java:37)\n        at com.linecorp.armeria.common.stream.StreamWriter.write(StreamWriter.java:72)\n        at com.linecorp.armeria.client.Http2ResponseDecoder.onHeadersRead(Http2ResponseDecoder.java:203)\n        ... 40 common frames omitted\n\nModifications:\n\n- Add a generalized mechanism to defer any `RequestLogProperty`:\n  - `isDeferred(RequestLogProperty)`\n  - `defer(RequestLogProperty)`\n  - `defer*Content*()` and `isDefer*Content*Set()` have been deprecated.\n- Defer setting some log properties before publishing stream events,\n  so that they are recorded after the publication.\n- Miscellaneous:\n  - Do not warn unnecessarily when propagating content previews in\n    `DefaultRequestLog.propagate*()`.\n  - Make `HttpClientMaxConcurrentStreamTest.exceededMaxStreamsPropagatesFailureCorrectly()`\n    less flaky.\n  - Optimize `DefaultRequestLog.isAvailable()`\n\nResult:\n\n- No more `Http2Exception: failed to consume a HEADERS frame` error.\n- No more `You tried to set the content preview twice` warning.\n  - Fixes #2830\n- (Deprecation) `RequestLogBuilder.defer*Content*()` and\n  `isDefer*Content*Set()` have been deprecated in favor of\n  `defer(RequestLogProperty)` and `isDeferred(RequestLogProperty)`.", "committedDate": "2020-06-24T08:10:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTQ5MQ==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444731491", "bodyText": "Not sure why it was cause before. \ud83e\udd14", "author": "trustin", "createdAt": "2020-06-24T08:30:26Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -248,16 +248,16 @@ private void runThreadLocalContextCustomizers() {\n     }\n \n     private void failEarly(Throwable cause) {\n-        final RequestLogBuilder logBuilder = logBuilder();\n         final UnprocessedRequestException wrapped = new UnprocessedRequestException(cause);\n-        logBuilder.endRequest(wrapped);\n-        logBuilder.endResponse(wrapped);\n-\n         final HttpRequest req = request();\n         if (req != null) {\n             autoFillSchemeAndAuthority();\n-            req.abort(cause);\n+            req.abort(wrapped);", "originalCommit": "e82b49bee6c9b132793d5fd5a034a622d2717774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczNTA0Mg==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444735042", "bodyText": "It seems my mistake. \ud83d\ude31", "author": "ikhoon", "createdAt": "2020-06-24T08:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjA2MA==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444776060", "bodyText": "I think it didn't do any harm anyways. \ud83d\ude06\nFirst appeared at: https://github.com/line/armeria/pull/2248/files#diff-d437ddb5e0b4572dba776949bacf9becR233", "author": "trustin", "createdAt": "2020-06-24T09:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTQ5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTI1Mw==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444739253", "bodyText": "It seems unnecessary because of pre-checked condition. https://github.com/line/armeria/pull/2832/files#diff-833e9abb4a1607339097e0e3aab8b26dR226", "author": "hexoul", "createdAt": "2020-06-24T08:43:51Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java", "diffHunk": "@@ -199,50 +200,73 @@ public boolean isOpen() {\n          */\n         @Override\n         public boolean tryWrite(HttpObject o) {\n+            boolean wrote = false;\n             switch (state) {\n                 case WAIT_NON_INFORMATIONAL:\n-                    // NB: It's safe to call logBuilder.startResponse() multiple times.\n-                    if (ctx != null) {\n-                        ctx.logBuilder().startResponse();\n-                    }\n-\n-                    assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n-\n-                    if (o instanceof ResponseHeaders) {\n-                        final ResponseHeaders headers = (ResponseHeaders) o;\n-                        final HttpStatus status = headers.status();\n-                        if (!status.isInformational()) {\n-                            state = State.WAIT_DATA_OR_TRAILERS;\n-                            if (ctx != null) {\n-                                ctx.logBuilder().responseHeaders(headers);\n-                            }\n-                        }\n-                    }\n+                    wrote = handleWaitNonInformational(o);\n                     break;\n                 case WAIT_DATA_OR_TRAILERS:\n-                    if (o instanceof HttpHeaders) {\n-                        state = State.DONE;\n-                        if (ctx != null) {\n-                            ctx.logBuilder().responseTrailers((HttpHeaders) o);\n-                        }\n-                    } else {\n-                        if (ctx != null) {\n-                            ctx.logBuilder().increaseResponseLength((HttpData) o);\n-                        }\n-                    }\n+                    wrote = handleWaitDateOrTrailers(o);\n                     break;\n                 case DONE:\n                     ReferenceCountUtil.safeRelease(o);\n-                    return false;\n+                    break;\n             }\n-            return delegate.tryWrite(o);\n+\n+            return wrote;\n         }\n \n         @Override\n         public boolean tryWrite(Supplier<? extends HttpObject> o) {\n             return delegate.tryWrite(o);\n         }\n \n+        private boolean handleWaitNonInformational(HttpObject o) {\n+            // NB: It's safe to call logBuilder.startResponse() multiple times.\n+            if (ctx != null) {\n+                ctx.logBuilder().startResponse();\n+            }\n+\n+            assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n+\n+            if (o instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) o;\n+                final HttpStatus status = headers.status();\n+                if (!status.isInformational()) {\n+                    state = State.WAIT_DATA_OR_TRAILERS;\n+                    if (ctx != null) {", "originalCommit": "e82b49bee6c9b132793d5fd5a034a622d2717774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjM4Ng==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444762386", "bodyText": "I don't think so because we didn't bail out when ctx == null.", "author": "trustin", "createdAt": "2020-06-24T09:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2OTAxNQ==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444769015", "bodyText": "Oops sorry I misread. Please ignore this.", "author": "hexoul", "createdAt": "2020-06-24T09:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3Njg2Mw==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444776863", "bodyText": "No worries. I appreciate that you review our work! \ud83d\ude47", "author": "trustin", "createdAt": "2020-06-24T09:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8f332ec8a7b88619c9c9efa564fd234dd294745f", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java b/core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java\nindex 5750ea093..62e610695 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java\n\n@@ -206,7 +206,7 @@ abstract class HttpResponseDecoder {\n                     wrote = handleWaitNonInformational(o);\n                     break;\n                 case WAIT_DATA_OR_TRAILERS:\n-                    wrote = handleWaitDateOrTrailers(o);\n+                    wrote = handleWaitDataOrTrailers(o);\n                     break;\n                 case DONE:\n                     ReferenceCountUtil.safeRelease(o);\n"}}, {"oid": "cf7d0bab36d5c10eb9e76836ce2388bfd5977dce", "url": "https://github.com/line/armeria/commit/cf7d0bab36d5c10eb9e76836ce2388bfd5977dce", "message": "Fix a silly mistake", "committedDate": "2020-06-24T09:24:21Z", "type": "commit"}, {"oid": "8f332ec8a7b88619c9c9efa564fd234dd294745f", "url": "https://github.com/line/armeria/commit/8f332ec8a7b88619c9c9efa564fd234dd294745f", "message": "Typo", "committedDate": "2020-06-24T12:19:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2Mjc0OQ==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444862749", "bodyText": "nit: can remove this method and just call hasInterestedFlags directly?", "author": "minwoox", "createdAt": "2020-06-24T12:38:46Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -187,26 +188,60 @@ private static boolean isComplete(int flags) {\n \n     @Override\n     public boolean isRequestComplete() {\n-        return isAvailable(flags, RequestLogProperty.FLAGS_REQUEST_COMPLETE);\n+        return hasInterestedFlags(flags, RequestLogProperty.FLAGS_REQUEST_COMPLETE);\n     }\n \n     @Override\n     public boolean isAvailable(RequestLogProperty property) {\n-        return isAvailable(flags, property.flag());\n+        requireNonNull(property, \"property\");\n+        return hasInterestedFlags(flags, property.flag());\n+    }\n+\n+    @Override\n+    public boolean isAvailable(RequestLogProperty... properties) {\n+        requireNonNull(properties, \"properties\");\n+        checkArgument(properties.length != 0, \"properties is empty.\");\n+        return isAvailable(interestedFlags(properties));\n+    }\n+\n+    @Override\n+    public boolean isAvailable(Iterable<RequestLogProperty> properties) {\n+        requireNonNull(properties, \"properties\");\n+        final int flags = interestedFlags(properties);\n+        checkArgument(flags != 0, \"properties is empty.\");\n+        return isAvailable(flags);\n     }\n \n     private boolean isAvailable(int interestedFlags) {", "originalCommit": "cf7d0bab36d5c10eb9e76836ce2388bfd5977dce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0OTczMw==", "url": "https://github.com/line/armeria/pull/2832#discussion_r445249733", "bodyText": "I guess it's better keeping it for readability - isAvailable(interestedFlags) vs. hasInterestedFlags(this.flags, interestedFlags).", "author": "trustin", "createdAt": "2020-06-25T00:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2Mjc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MjAyMQ==", "url": "https://github.com/line/armeria/pull/2832#discussion_r445252021", "bodyText": "SGTM. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-06-25T01:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2Mjc0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2ODI3Ng==", "url": "https://github.com/line/armeria/pull/2832#discussion_r444868276", "bodyText": "Thanks, I needed it.", "author": "minwoox", "createdAt": "2020-06-24T12:48:56Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -1223,15 +1276,20 @@ public String responseContentPreview() {\n \n     @Override\n     public void responseContentPreview(@Nullable String responseContentPreview) {\n+        responseContentPreview(responseContentPreview, true);\n+    }\n+\n+    private void responseContentPreview(@Nullable String responseContentPreview, boolean warnIfSetAlready) {\n         if (isAvailable(RequestLogProperty.RESPONSE_CONTENT_PREVIEW)) {\n-            if (!warnedSettingContentPreviewTwice && responseContentPreview != null) {\n+            if (warnIfSetAlready && responseContentPreview != null && !warnedSettingContentPreviewTwice) {\n                 warnedSettingContentPreviewTwice = true;\n-                logger.warn(\"You tried to set the content preview twice: {} \" +\n+                logger.warn(\"You tried to set the response content preview twice: {} \" +", "originalCommit": "cf7d0bab36d5c10eb9e76836ce2388bfd5977dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "dabe9cb0e55b90dbe940cda93e09ada674817bc5", "url": "https://github.com/line/armeria/commit/dabe9cb0e55b90dbe940cda93e09ada674817bc5", "message": "Merge branch 'master' into log_after_publication", "committedDate": "2020-06-25T02:00:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNDExNw==", "url": "https://github.com/line/armeria/pull/2832#discussion_r445934117", "bodyText": "\ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-06-26T02:20:32Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -982,8 +1040,8 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n \n         // Set names if request content is not deferred or it was deferred but has been set\n         // before the request completion.\n-        if (!isDeferRequestContentSet() ||\n-            (isDeferRequestContentSet() && isAvailable(RequestLogProperty.REQUEST_CONTENT))) {\n+        if (!hasInterestedFlags(deferredFlags, RequestLogProperty.REQUEST_CONTENT) ||\n+            isAvailable(RequestLogProperty.REQUEST_CONTENT)) {", "originalCommit": "dabe9cb0e55b90dbe940cda93e09ada674817bc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "27fda465519546eac3ac9e0848db3c0078bb858a", "url": "https://github.com/line/armeria/commit/27fda465519546eac3ac9e0848db3c0078bb858a", "message": "Merge branch 'master' into log_after_publication", "committedDate": "2020-06-26T08:36:33Z", "type": "commit"}]}