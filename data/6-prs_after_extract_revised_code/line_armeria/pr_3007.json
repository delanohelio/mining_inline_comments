{"pr_number": 3007, "pr_title": "Use Caffeine in `RefresingAddressResolver`", "pr_createdAt": "2020-08-20T01:55:40Z", "pr_url": "https://github.com/line/armeria/pull/3007", "timeline": [{"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "url": "https://github.com/line/armeria/commit/c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "message": "Use Caffeine in `RefresingAddressResolver`\n\n* Change the life cycle of the DNS cache entry so that it does not expire.\n* Use Caffeine for limiting the usage of DNS caches.", "committedDate": "2020-08-20T00:47:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MTY1NQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r473561655", "bodyText": "How about adding setter to DnsResolverGroupBuilder as well?", "author": "minwoox", "createdAt": "2020-08-20T03:10:59Z", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -980,6 +985,20 @@ public static String fileServiceCacheSpec() {\n         return CACHED_HEADERS;\n     }\n \n+    /**\n+     * Returns the value of the {@code dnsCache} parameter. It would be used to create a Caffeine\n+     * {@link Cache} instance using {@link CaffeineSpec} for caching file entries.\n+     *\n+     * <p>The default value of this flag is {@value DEFAULT_DNS_CACHE_SPEC}. Specify the\n+     * {@code -Dcom.linecorp.armeria.dnsCache=<spec>} JVM option to override the default value.\n+     * For example, {@code -Dcom.linecorp.armeria.dnsCache=maximumSize=4096}.\n+     * Also, specify {@code -Dcom.linecorp.armeria.dnsCache=off} JVM option to disable it.\n+     */\n+    @Nullable\n+    public static String dnsCacheSpec() {", "originalCommit": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/Flags.java b/core/src/main/java/com/linecorp/armeria/common/Flags.java\nindex cf8b8fa4a6..e7faca139c 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/Flags.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/Flags.java\n\n@@ -990,9 +990,8 @@ public final class Flags {\n      * {@link Cache} instance using {@link CaffeineSpec} for caching file entries.\n      *\n      * <p>The default value of this flag is {@value DEFAULT_DNS_CACHE_SPEC}. Specify the\n-     * {@code -Dcom.linecorp.armeria.dnsCache=<spec>} JVM option to override the default value.\n-     * For example, {@code -Dcom.linecorp.armeria.dnsCache=maximumSize=4096}.\n-     * Also, specify {@code -Dcom.linecorp.armeria.dnsCache=off} JVM option to disable it.\n+     * {@code -Dcom.linecorp.armeria.dnsCacheSpec=<spec>} JVM option to override the default value.\n+     * For example, {@code -Dcom.linecorp.armeria.dnsCacheSpec=maximumSize=4096}.\n      */\n     @Nullable\n     public static String dnsCacheSpec() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MTk2NA==", "url": "https://github.com/line/armeria/pull/3007#discussion_r473561964", "bodyText": "If we add the setter to DnsResolverGroupBuilder, we don't need this method.\nWe can accept the cache spec in the constructor so that we can make dnsCache as a final field.", "author": "minwoox", "createdAt": "2020-08-20T03:12:17Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -117,9 +132,15 @@\n         }\n     }\n \n+    @Nullable\n     @VisibleForTesting\n-    ConcurrentMap<String, CompletableFuture<CacheEntry>> cache() {\n-        return cache;\n+    Cache<String, CompletableFuture<CacheEntry>> cache() {\n+        return dnsCache;\n+    }\n+\n+    @VisibleForTesting\n+    void cache(@Nullable Cache<String, CompletableFuture<CacheEntry>> dnsCache) {", "originalCommit": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aff040d7a976cd067b775108a8755db148e72616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\nindex 8644065750..9bea3ded53 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\n\n@@ -130,17 +116,13 @@ final class RefreshingAddressResolverGroup extends AddressResolverGroup<InetSock\n         } else {\n             dnsRecordTypes = dnsRecordTypes(resolvedAddressTypes);\n         }\n+        cache = buildCache(cacheSpec != null ? cacheSpec\n+                                             : requireNonNull(Flags.dnsCacheSpec(), \"cacheSpec\"));\n     }\n \n-    @Nullable\n     @VisibleForTesting\n     Cache<String, CompletableFuture<CacheEntry>> cache() {\n-        return dnsCache;\n-    }\n-\n-    @VisibleForTesting\n-    void cache(@Nullable Cache<String, CompletableFuture<CacheEntry>> dnsCache) {\n-        this.dnsCache = dnsCache;\n+        return cache;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MjI5OQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r473562299", "bodyText": "Could you move this private static method at the bottom of this class?\nThe reason that dnsRecordTypes is located at the top is that the method is used in the static initializer.", "author": "minwoox", "createdAt": "2020-08-20T03:13:52Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -90,7 +90,18 @@\n         return builder.build();\n     }\n \n-    private final ConcurrentMap<String, CompletableFuture<CacheEntry>> cache = new ConcurrentHashMap<>();\n+    private static Cache<String, CompletableFuture<CacheEntry>> buildDnsCache(String spec) {", "originalCommit": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aff040d7a976cd067b775108a8755db148e72616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\nindex 8644065750..9bea3ded53 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\n\n@@ -90,19 +91,6 @@ final class RefreshingAddressResolverGroup extends AddressResolverGroup<InetSock\n         return builder.build();\n     }\n \n-    private static Cache<String, CompletableFuture<CacheEntry>> buildDnsCache(String spec) {\n-        final Caffeine<Object, Object> b = Caffeine.from(spec);\n-        b.removalListener((RemovalListener<String, CompletableFuture<CacheEntry>>) (key, value, cause) -> {\n-            if (value != null) {\n-                value.handle((cacheEntry, throwable) -> {\n-                    cacheEntry.clear();\n-                    return null;\n-                });\n-            }\n-        });\n-        return b.build();\n-    }\n-\n     private final int minTtl;\n     private final int maxTtl;\n     private final int negativeTtl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzYzNA==", "url": "https://github.com/line/armeria/pull/3007#discussion_r473563634", "bodyText": "We can do this on the line 129.", "author": "minwoox", "createdAt": "2020-08-20T03:19:15Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -115,30 +97,50 @@ protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (entry.hasCacheableCause() && negativeTtl > 0) {\n-                    executor().schedule(() -> cache.remove(hostname), negativeTtl, TimeUnit.SECONDS);\n+                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                    executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    cache.remove(hostname);\n+                    if (cache != null) {\n+                        cache.invalidate(hostname);\n+                    }\n                 }\n                 promise.tryFailure(cause);\n                 return null;\n             }\n \n-            entry.scheduleRefresh(entry.ttlMillis());\n+            if (cache != null) {\n+                entry.scheduleRefresh(entry.ttlMillis());\n+            }\n             promise.trySuccess(new InetSocketAddress(entry.address(), port));\n             return null;\n         });\n+        return result;\n     }\n \n-    private void handleFromCache(CompletableFuture<CacheEntry> future, Promise<InetSocketAddress> promise,\n-                                 int port) {\n-        future.handle((entry, unused) -> {\n+    @Override\n+    protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocketAddress> promise)\n+            throws Exception {\n+        requireNonNull(unresolvedAddress, \"unresolvedAddress\");\n+        requireNonNull(promise, \"promise\");\n+        if (resolverClosed) {\n+            promise.tryFailure(new IllegalStateException(\"resolver is closed already.\"));\n+            return;\n+        }\n+        final String hostname = unresolvedAddress.getHostString();\n+        final int port = unresolvedAddress.getPort();\n+        if (cache == null) {", "originalCommit": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aff040d7a976cd067b775108a8755db148e72616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\nindex 93c03e536e..0df56f109c 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n\n@@ -97,20 +96,16 @@ final class RefreshingAddressResolver extends AbstractAddressResolver<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                if (entry.hasCacheableCause() && negativeTtl > 0) {\n                     executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    if (cache != null) {\n-                        cache.invalidate(hostname);\n-                    }\n+                    cache.invalidate(hostname);\n                 }\n                 promise.tryFailure(cause);\n                 return null;\n             }\n \n-            if (cache != null) {\n-                entry.scheduleRefresh(entry.ttlMillis());\n-            }\n+            entry.scheduleRefresh(entry.ttlMillis());\n             promise.trySuccess(new InetSocketAddress(entry.address(), port));\n             return null;\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzgzMQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r473563831", "bodyText": "Let's use the variable when it's needed. Or we can just inline this. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-08-20T03:19:58Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -115,30 +97,50 @@ protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (entry.hasCacheableCause() && negativeTtl > 0) {\n-                    executor().schedule(() -> cache.remove(hostname), negativeTtl, TimeUnit.SECONDS);\n+                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                    executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    cache.remove(hostname);\n+                    if (cache != null) {\n+                        cache.invalidate(hostname);\n+                    }\n                 }\n                 promise.tryFailure(cause);\n                 return null;\n             }\n \n-            entry.scheduleRefresh(entry.ttlMillis());\n+            if (cache != null) {\n+                entry.scheduleRefresh(entry.ttlMillis());\n+            }\n             promise.trySuccess(new InetSocketAddress(entry.address(), port));\n             return null;\n         });\n+        return result;\n     }\n \n-    private void handleFromCache(CompletableFuture<CacheEntry> future, Promise<InetSocketAddress> promise,\n-                                 int port) {\n-        future.handle((entry, unused) -> {\n+    @Override\n+    protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocketAddress> promise)\n+            throws Exception {\n+        requireNonNull(unresolvedAddress, \"unresolvedAddress\");\n+        requireNonNull(promise, \"promise\");\n+        if (resolverClosed) {\n+            promise.tryFailure(new IllegalStateException(\"resolver is closed already.\"));\n+            return;\n+        }\n+        final String hostname = unresolvedAddress.getHostString();\n+        final int port = unresolvedAddress.getPort();", "originalCommit": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aff040d7a976cd067b775108a8755db148e72616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\nindex 93c03e536e..0df56f109c 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n\n@@ -97,20 +96,16 @@ final class RefreshingAddressResolver extends AbstractAddressResolver<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                if (entry.hasCacheableCause() && negativeTtl > 0) {\n                     executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    if (cache != null) {\n-                        cache.invalidate(hostname);\n-                    }\n+                    cache.invalidate(hostname);\n                 }\n                 promise.tryFailure(cause);\n                 return null;\n             }\n \n-            if (cache != null) {\n-                entry.scheduleRefresh(entry.ttlMillis());\n-            }\n+            entry.scheduleRefresh(entry.ttlMillis());\n             promise.trySuccess(new InetSocketAddress(entry.address(), port));\n             return null;\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2MTQwMw==", "url": "https://github.com/line/armeria/pull/3007#discussion_r473661403", "bodyText": "Could be simplified:\nif (cache != null) {\n    if (entry.hasCacheableCause() && negativeTtl > 0) {\n        executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n    } else {\n        cache.invalidate(hostname);\n    }\n}", "author": "ikhoon", "createdAt": "2020-08-20T06:49:26Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -115,30 +97,50 @@ protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (entry.hasCacheableCause() && negativeTtl > 0) {\n-                    executor().schedule(() -> cache.remove(hostname), negativeTtl, TimeUnit.SECONDS);\n+                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                    executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    cache.remove(hostname);\n+                    if (cache != null) {\n+                        cache.invalidate(hostname);\n+                    }", "originalCommit": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aff040d7a976cd067b775108a8755db148e72616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\nindex 93c03e536e..0df56f109c 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n\n@@ -97,20 +96,16 @@ final class RefreshingAddressResolver extends AbstractAddressResolver<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                if (entry.hasCacheableCause() && negativeTtl > 0) {\n                     executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    if (cache != null) {\n-                        cache.invalidate(hostname);\n-                    }\n+                    cache.invalidate(hostname);\n                 }\n                 promise.tryFailure(cause);\n                 return null;\n             }\n \n-            if (cache != null) {\n-                entry.scheduleRefresh(entry.ttlMillis());\n-            }\n+            entry.scheduleRefresh(entry.ttlMillis());\n             promise.trySuccess(new InetSocketAddress(entry.address(), port));\n             return null;\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY3Nzg2OQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r473677869", "bodyText": "Question: Do we need RefreshingAddressResolver when Cache is null?", "author": "ikhoon", "createdAt": "2020-08-20T07:10:18Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -65,7 +66,7 @@\n     private volatile boolean resolverClosed;\n \n     RefreshingAddressResolver(EventLoop eventLoop,\n-                              ConcurrentMap<String, CompletableFuture<CacheEntry>> cache,\n+                              @Nullable Cache<String, CompletableFuture<CacheEntry>> cache,", "originalCommit": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNDIwNQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r507414205", "bodyText": "I was concerned about delays in updating a DNS record if someone uses DNS failover.\nBut it seems too much to be considered here. So I modified it to work with Nonnull.", "author": "masonshin", "createdAt": "2020-10-19T03:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY3Nzg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "aff040d7a976cd067b775108a8755db148e72616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\nindex 93c03e536e..0df56f109c 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n\n@@ -66,7 +65,7 @@ final class RefreshingAddressResolver extends AbstractAddressResolver<InetSocket\n     private volatile boolean resolverClosed;\n \n     RefreshingAddressResolver(EventLoop eventLoop,\n-                              @Nullable Cache<String, CompletableFuture<CacheEntry>> cache,\n+                              Cache<String, CompletableFuture<CacheEntry>> cache,\n                               DefaultDnsNameResolver resolver, List<DnsRecordType> dnsRecordTypes,\n                               int minTtl, int maxTtl, int negativeTtl, Backoff refreshBackoff) {\n         super(eventLoop);\n"}}, {"oid": "aff040d7a976cd067b775108a8755db148e72616", "url": "https://github.com/line/armeria/commit/aff040d7a976cd067b775108a8755db148e72616", "message": "Address the comments by @minwoox and @ikhoon", "committedDate": "2020-10-18T11:43:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NDQxOQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508964419", "bodyText": "I think we could just do:\n* Sets the cache spec for caching resolved addresses.\n* {@link Flags#dnsCacheSpec()} is used by default.", "author": "minwoox", "createdAt": "2020-10-21T03:18:45Z", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -292,6 +295,18 @@ public DnsResolverGroupBuilder decodeIdn(boolean decodeIdn) {\n         return this;\n     }\n \n+    /**\n+     * Sets the cache spec for caching resolved addresses.\n+     * If this is set, {@link Flags#dnsCacheSpec()} is ignored.\n+     * Otherwise, it uses the value of {@link Flags#dnsCacheSpec()} by default.", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java b/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\nindex 74eb8cdf80..e320469f9f 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n\n@@ -297,13 +297,10 @@ public final class DnsResolverGroupBuilder {\n \n     /**\n      * Sets the cache spec for caching resolved addresses.\n-     * If this is set, {@link Flags#dnsCacheSpec()} is ignored.\n-     * Otherwise, it uses the value of {@link Flags#dnsCacheSpec()} by default.\n-     *\n-     * @see Flags#dnsCacheSpec()\n+     * {@link Flags#dnsCacheSpec()} is used by default.\n      */\n     public DnsResolverGroupBuilder cacheSpec(String cacheSpec) {\n-        this.cacheSpec = cacheSpec;\n+        this.cacheSpec = requireNonNull(cacheSpec, \"cacheSpec\");;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NDc2Ng==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508964766", "bodyText": "requireNonNull(cacheSpec, \"cacheSpec\");", "author": "minwoox", "createdAt": "2020-10-21T03:20:04Z", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -292,6 +295,18 @@ public DnsResolverGroupBuilder decodeIdn(boolean decodeIdn) {\n         return this;\n     }\n \n+    /**\n+     * Sets the cache spec for caching resolved addresses.\n+     * If this is set, {@link Flags#dnsCacheSpec()} is ignored.\n+     * Otherwise, it uses the value of {@link Flags#dnsCacheSpec()} by default.\n+     *\n+     * @see Flags#dnsCacheSpec()\n+     */\n+    public DnsResolverGroupBuilder cacheSpec(String cacheSpec) {\n+        this.cacheSpec = cacheSpec;", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java b/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\nindex 74eb8cdf80..e320469f9f 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n\n@@ -297,13 +297,10 @@ public final class DnsResolverGroupBuilder {\n \n     /**\n      * Sets the cache spec for caching resolved addresses.\n-     * If this is set, {@link Flags#dnsCacheSpec()} is ignored.\n-     * Otherwise, it uses the value of {@link Flags#dnsCacheSpec()} by default.\n-     *\n-     * @see Flags#dnsCacheSpec()\n+     * {@link Flags#dnsCacheSpec()} is used by default.\n      */\n     public DnsResolverGroupBuilder cacheSpec(String cacheSpec) {\n-        this.cacheSpec = cacheSpec;\n+        this.cacheSpec = requireNonNull(cacheSpec, \"cacheSpec\");;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NTMwNw==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508965307", "bodyText": "How about passing Flags#dnsCacheSpec() is cacheSpec is null?", "author": "minwoox", "createdAt": "2020-10-21T03:21:56Z", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -343,6 +358,7 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n             }\n         };\n         return new RefreshingAddressResolverGroup(resolverConfigurator, minTtl, maxTtl, negativeTtl,\n-                                                  queryTimeoutMillis, refreshBackoff, resolvedAddressTypes);\n+                                                  queryTimeoutMillis, refreshBackoff, resolvedAddressTypes,\n+                                                  cacheSpec);", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java b/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\nindex 74eb8cdf80..e320469f9f 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n\n@@ -357,6 +354,7 @@ public final class DnsResolverGroupBuilder {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n+        cacheSpec = requireNonNull(cacheSpec != null ? cacheSpec : Flags.dnsCacheSpec(), \"cacheSpec\");\n         return new RefreshingAddressResolverGroup(resolverConfigurator, minTtl, maxTtl, negativeTtl,\n                                                   queryTimeoutMillis, refreshBackoff, resolvedAddressTypes,\n                                                   cacheSpec);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NjcwOQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508966709", "bodyText": "Let's use dnsCacheSpec", "author": "minwoox", "createdAt": "2020-10-21T03:26:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -355,6 +355,11 @@\n             CSV_SPLITTER.splitToList(getNormalized(\n                     \"cachedHeaders\", DEFAULT_CACHED_HEADERS, CharMatcher.ascii()::matchesAllOf));\n \n+    private static final String DEFAULT_DNS_CACHE_SPEC = \"maximumSize=4096\";\n+    @Nullable\n+    private static final String DNS_CACHE_SPEC =\n+            caffeineSpec(\"dnsCache\", DEFAULT_DNS_CACHE_SPEC);", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/Flags.java b/core/src/main/java/com/linecorp/armeria/common/Flags.java\nindex cf8b8fa4a6..e7faca139c 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/Flags.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/Flags.java\n\n@@ -358,7 +358,7 @@ public final class Flags {\n     private static final String DEFAULT_DNS_CACHE_SPEC = \"maximumSize=4096\";\n     @Nullable\n     private static final String DNS_CACHE_SPEC =\n-            caffeineSpec(\"dnsCache\", DEFAULT_DNS_CACHE_SPEC);\n+            caffeineSpec(\"dnsCacheSpec\", DEFAULT_DNS_CACHE_SPEC);\n \n     private static final String DEFAULT_ANNOTATED_SERVICE_EXCEPTION_VERBOSITY = \"unhandled\";\n     private static final ExceptionVerbosity ANNOTATED_SERVICE_EXCEPTION_VERBOSITY =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2Njg5Nw==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508966897", "bodyText": "dnsCacheSpec here as well. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-10-21T03:27:28Z", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -980,6 +985,20 @@ public static String fileServiceCacheSpec() {\n         return CACHED_HEADERS;\n     }\n \n+    /**\n+     * Returns the value of the {@code dnsCache} parameter. It would be used to create a Caffeine\n+     * {@link Cache} instance using {@link CaffeineSpec} for caching file entries.\n+     *\n+     * <p>The default value of this flag is {@value DEFAULT_DNS_CACHE_SPEC}. Specify the\n+     * {@code -Dcom.linecorp.armeria.dnsCache=<spec>} JVM option to override the default value.", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/Flags.java b/core/src/main/java/com/linecorp/armeria/common/Flags.java\nindex cf8b8fa4a6..e7faca139c 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/Flags.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/Flags.java\n\n@@ -990,9 +990,8 @@ public final class Flags {\n      * {@link Cache} instance using {@link CaffeineSpec} for caching file entries.\n      *\n      * <p>The default value of this flag is {@value DEFAULT_DNS_CACHE_SPEC}. Specify the\n-     * {@code -Dcom.linecorp.armeria.dnsCache=<spec>} JVM option to override the default value.\n-     * For example, {@code -Dcom.linecorp.armeria.dnsCache=maximumSize=4096}.\n-     * Also, specify {@code -Dcom.linecorp.armeria.dnsCache=off} JVM option to disable it.\n+     * {@code -Dcom.linecorp.armeria.dnsCacheSpec=<spec>} JVM option to override the default value.\n+     * For example, {@code -Dcom.linecorp.armeria.dnsCacheSpec=maximumSize=4096}.\n      */\n     @Nullable\n     public static String dnsCacheSpec() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2ODM2MQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508968361", "bodyText": "What happens if the spec is off?", "author": "minwoox", "createdAt": "2020-10-21T03:32:36Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -137,16 +140,19 @@\n     @Override\n     public void close() {\n         super.close();\n-        while (!cache.isEmpty()) {\n-            for (final Iterator<Entry<String, CompletableFuture<CacheEntry>>> i = cache.entrySet().iterator();\n-                 i.hasNext();) {\n-                final Entry<String, CompletableFuture<CacheEntry>> entry = i.next();\n-                i.remove();\n-                entry.getValue().handle((cacheEntry, cause) -> {\n+        cache.invalidateAll();\n+    }\n+\n+    private static Cache<String, CompletableFuture<CacheEntry>> buildCache(String cacheSpec) {\n+        final Caffeine<Object, Object> b = Caffeine.from(cacheSpec);", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTAwMA==", "url": "https://github.com/line/armeria/pull/3007#discussion_r511735000", "bodyText": "I decided to keep the DNS cache as nonnull, so I've removed off from the spec.", "author": "masonshin", "createdAt": "2020-10-26T06:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2ODM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1MDM3NQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r512350375", "bodyText": "Yeah, that's a good idea. \ud83d\udc4d", "author": "minwoox", "createdAt": "2020-10-27T00:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2ODM2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NzE1MQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508967151", "bodyText": "nit: Probably better to take non-null cacheSpec here. I think Flags.dnsCacheSpec() could be used before creating this class.", "author": "ikhoon", "createdAt": "2020-10-21T03:28:32Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -115,10 +116,12 @@\n         } else {\n             dnsRecordTypes = dnsRecordTypes(resolvedAddressTypes);\n         }\n+        cache = buildCache(cacheSpec != null ? cacheSpec\n+                                             : requireNonNull(Flags.dnsCacheSpec(), \"cacheSpec\"));", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTM4NA==", "url": "https://github.com/line/armeria/pull/3007#discussion_r511735384", "bodyText": "I've changed the cacheSpec as nonnull. \ud83d\udc4d", "author": "masonshin", "createdAt": "2020-10-26T06:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NzE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\nindex 9bea3ded53..a8e1e493d8 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java\n\n@@ -116,8 +114,7 @@ final class RefreshingAddressResolverGroup extends AddressResolverGroup<InetSock\n         } else {\n             dnsRecordTypes = dnsRecordTypes(resolvedAddressTypes);\n         }\n-        cache = buildCache(cacheSpec != null ? cacheSpec\n-                                             : requireNonNull(Flags.dnsCacheSpec(), \"cacheSpec\"));\n+        cache = buildCache(cacheSpec);\n     }\n \n     @VisibleForTesting\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3MTc0MQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508971741", "bodyText": "Not related to this PR, numAttemptsSoFar might be included in toString().", "author": "ikhoon", "createdAt": "2020-10-21T03:45:16Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -346,7 +326,6 @@ public String toString() {\n                               .add(\"questions\", questions)\n                               .add(\"cause\", cause)\n                               .add(\"hasCacheableCause\", hasCacheableCause)\n-                              .add(\"servedFromCache\", servedFromCache)", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\nindex 0df56f109c..078aa4cb2a 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java\n\n@@ -326,6 +334,7 @@ final class RefreshingAddressResolver extends AbstractAddressResolver<InetSocket\n                               .add(\"questions\", questions)\n                               .add(\"cause\", cause)\n                               .add(\"hasCacheableCause\", hasCacheableCause)\n+                              .add(\"numAttemptsSoFar\", numAttemptsSoFar)\n                               .toString();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NDEzNA==", "url": "https://github.com/line/armeria/pull/3007#discussion_r508974134", "bodyText": "I guess this RemovalListener could be called by any thread if the value is completed already and close() is called by a user thread.\nDon't we need to handle the concurrency issue in the CacheEntry.clear()?\nFor example:\nvoid clear() {\n\tif (executor().inEventLoop()) {\n       clear0()\n    } else {\n       executor().execute(this::clear0)\n    }\n}", "author": "ikhoon", "createdAt": "2020-10-21T03:55:17Z", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -137,16 +140,19 @@\n     @Override\n     public void close() {\n         super.close();\n-        while (!cache.isEmpty()) {\n-            for (final Iterator<Entry<String, CompletableFuture<CacheEntry>>> i = cache.entrySet().iterator();\n-                 i.hasNext();) {\n-                final Entry<String, CompletableFuture<CacheEntry>> entry = i.next();\n-                i.remove();\n-                entry.getValue().handle((cacheEntry, cause) -> {\n+        cache.invalidateAll();\n+    }\n+\n+    private static Cache<String, CompletableFuture<CacheEntry>> buildCache(String cacheSpec) {\n+        final Caffeine<Object, Object> b = Caffeine.from(cacheSpec);\n+        b.removalListener((RemovalListener<String, CompletableFuture<CacheEntry>>) (key, value, cause) -> {\n+            if (value != null) {\n+                value.handle((cacheEntry, throwable) -> {\n                     cacheEntry.clear();", "originalCommit": "aff040d7a976cd067b775108a8755db148e72616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c4bdd9c639cc38af2c8d747b05f692aab725ed85", "url": "https://github.com/line/armeria/commit/c4bdd9c639cc38af2c8d747b05f692aab725ed85", "message": "Address the comments by @minwoox and @ikhoon", "committedDate": "2020-10-26T05:55:13Z", "type": "commit"}, {"oid": "38c6cb823a55d33229a37ed08da43d07ab86b1f7", "url": "https://github.com/line/armeria/commit/38c6cb823a55d33229a37ed08da43d07ab86b1f7", "message": "Remove the empty statement", "committedDate": "2020-10-26T12:04:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMzYwMA==", "url": "https://github.com/line/armeria/pull/3007#discussion_r515033600", "bodyText": "nit: How about declaring a final local variable rather than modifying a member field? A user did not really set the cacheSpec.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    cacheSpec = requireNonNull(cacheSpec != null ? cacheSpec : Flags.dnsCacheSpec(), \"cacheSpec\");\n          \n          \n            \n                    final String cacheSpec = firstNonNull(this.cacheSpec, Flags.dnsCacheSpec());", "author": "trustin", "createdAt": "2020-10-30T11:32:00Z", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -342,7 +354,9 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n+        cacheSpec = requireNonNull(cacheSpec != null ? cacheSpec : Flags.dnsCacheSpec(), \"cacheSpec\");", "originalCommit": "38c6cb823a55d33229a37ed08da43d07ab86b1f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "912fb2323816bf3d3a5cf94c2936589ff03ee9d3", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java b/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\nindex eb0d72e20a..40b64ab674 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n\n@@ -354,7 +354,7 @@ public final class DnsResolverGroupBuilder {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n-        cacheSpec = requireNonNull(cacheSpec != null ? cacheSpec : Flags.dnsCacheSpec(), \"cacheSpec\");\n+        final String cacheSpec = firstNonNull(this.cacheSpec, Flags.dnsCacheSpec());\n         return new RefreshingAddressResolverGroup(resolverConfigurator, minTtl, maxTtl, negativeTtl,\n                                                   queryTimeoutMillis, refreshBackoff, resolvedAddressTypes,\n                                                   cacheSpec);\n"}}, {"oid": "912fb2323816bf3d3a5cf94c2936589ff03ee9d3", "url": "https://github.com/line/armeria/commit/912fb2323816bf3d3a5cf94c2936589ff03ee9d3", "message": "Update core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n\nCo-authored-by: Trustin Lee <t@motd.kr>", "committedDate": "2020-11-01T06:02:37Z", "type": "commit"}, {"oid": "b191d17fdbb5cb767d069fc6562377409c48d8a7", "url": "https://github.com/line/armeria/commit/b191d17fdbb5cb767d069fc6562377409c48d8a7", "message": "Fix the compilation error", "committedDate": "2020-11-01T06:52:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5OTAzMA==", "url": "https://github.com/line/armeria/pull/3007#discussion_r516699030", "bodyText": "Flags.dnsCacheSpec() is annotated with @Nullable. Is it intended?", "author": "ikhoon", "createdAt": "2020-11-03T14:18:34Z", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -342,7 +355,9 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n+        final String cacheSpec = firstNonNull(this.cacheSpec, Flags.dnsCacheSpec());", "originalCommit": "b191d17fdbb5cb767d069fc6562377409c48d8a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2NzY3Ng==", "url": "https://github.com/line/armeria/pull/3007#discussion_r517067676", "bodyText": "It will be null when specified like: -Dcom.linecorp.armeria.dnsCacheSpec=off.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/common/Flags.java\n    \n    \n        Lines 1071 to 1084\n      in\n      6e0e47b\n    \n    \n    \n    \n\n        \n          \n           @Nullable \n        \n\n        \n          \n           private static String caffeineSpec(String name, String defaultValue) { \n        \n\n        \n          \n               final String spec = get(name, defaultValue, value -> { \n        \n\n        \n          \n                   try { \n        \n\n        \n          \n                       if (!\"off\".equals(value)) { \n        \n\n        \n          \n                           CaffeineSpec.parse(value); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                       return true; \n        \n\n        \n          \n                   } catch (Exception e) { \n        \n\n        \n          \n                       return false; \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               }); \n        \n\n        \n          \n               return \"off\".equals(spec) ? null : spec; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nFlags.dnsCacheSpec() is itself nullable, but firstNonNull checks to not be null.\nWould it better to make this NonNull when we define dnsCacheSpec?", "author": "masonshin", "createdAt": "2020-11-04T02:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5OTAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3MDM1NQ==", "url": "https://github.com/line/armeria/pull/3007#discussion_r517070355", "bodyText": "Would it better to make this NonNull when we define dnsCacheSpec?\n\n+1 Because the error message of firstNonNull(...) would be ambiguous. Users can get a detailed error message early by making dnsCacheSpec() non-null.\nhttps://github.com/google/guava/blob/7ef9f97cad23efee4cc18c63b5f3c90ca320f131/guava/src/com/google/common/base/MoreObjects.java#L64\n\"Both parameters are null\"", "author": "ikhoon", "createdAt": "2020-11-04T02:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5OTAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3MjY1MA==", "url": "https://github.com/line/armeria/pull/3007#discussion_r517072650", "bodyText": "SGTM \ud83d\udc4d", "author": "masonshin", "createdAt": "2020-11-04T03:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5OTAzMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f0294d47f72b164f98b422d11768dbec30e0d5ee", "url": "https://github.com/line/armeria/commit/f0294d47f72b164f98b422d11768dbec30e0d5ee", "message": "Make caffeineSpec be nonnull", "committedDate": "2020-11-04T06:23:40Z", "type": "commit"}]}