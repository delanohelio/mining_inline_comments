{"pr_number": 2483, "pr_title": "Allow `ArmeriaRetrofitBuilder` to configure `ClientOption`", "pr_createdAt": "2020-02-13T08:23:03Z", "pr_url": "https://github.com/line/armeria/pull/2483", "timeline": [{"oid": "dc8aad73befe54ff5015c105ef202b41b0137084", "url": "https://github.com/line/armeria/commit/dc8aad73befe54ff5015c105ef202b41b0137084", "message": "Allow `ArmeriaRetrofitBuilder` to configure `ClientOption`\n\nMotivation:\nIf a user wants to add `ClientFactory`, he/she should have to create `WebClient`.\nIt is convenient to configure `ClientOption` when building `ArmeriaRetrofit`.\n\nModifications:\n* Make `AbstractClientOptionsBuilder` public and add `@UnstableApi` annotation.\n* Allow creating `ClientOption` without the default options.\n* Lazily build `baseWebClient` and `nonBaseClientFactory` with Retrofit client options.\n\nResult:\nYou can now directly configure `ClientOption` when building `ArmeriaRetrofit`.\nFixes #2481", "committedDate": "2020-02-13T08:22:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NzcwMg==", "url": "https://github.com/line/armeria/pull/2483#discussion_r378757702", "bodyText": "How about moving to the internal package then?\nIt seems like only this class is going to be moved and done.", "author": "minwoox", "createdAt": "2020-02-13T09:58:10Z", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -30,17 +30,23 @@\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpHeadersBuilder;\n import com.linecorp.armeria.common.RequestId;\n+import com.linecorp.armeria.common.util.UnstableApi;\n \n-class AbstractClientOptionsBuilder {\n+/**\n+ * A skeletal builder implementation for {@link ClientOptions}.\n+ * Note: This class is meant for internal use only.", "originalCommit": "dc8aad73befe54ff5015c105ef202b41b0137084", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2NTE4MA==", "url": "https://github.com/line/armeria/pull/2483#discussion_r378765180", "bodyText": "I tried to move to the internal package first but AbstractClientOptionsBuilder access package-private method in ClientDecoration\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java\n    \n    \n        Lines 100 to 102\n      in\n      6178d35\n    \n    \n    \n    \n\n        \n          \n           final ClientDecoration d = (ClientDecoration) optionValue.value(); \n        \n\n        \n          \n           d.decorators().forEach(decoration::add); \n        \n\n        \n          \n           d.rpcDecorators().forEach(decoration::addRpc); \n        \n    \n  \n\n\nI thought making this public with @Unstable annotation is better than change the method to public.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/ClientDecoration.java\n    \n    \n        Lines 78 to 84\n      in\n      8a67c58\n    \n    \n    \n    \n\n        \n          \n           List<Function<? super HttpClient, ? extends HttpClient>> decorators() { \n        \n\n        \n          \n               return decorators; \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           List<Function<? super RpcClient, ? extends RpcClient>> rpcDecorators() { \n        \n\n        \n          \n               return rpcDecorators; \n        \n\n        \n          \n           }", "author": "ikhoon", "createdAt": "2020-02-13T10:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NzcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2OTE2OQ==", "url": "https://github.com/line/armeria/pull/2483#discussion_r378769169", "bodyText": "As a follow-up of this pull request, how about adding ClientDecorationBuilder, so that AbstractClientOptionsBuilder can mutate/build a ClientDecoration without accessing package-private methods?", "author": "trustin", "createdAt": "2020-02-13T10:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NzcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2OTI5NQ==", "url": "https://github.com/line/armeria/pull/2483#discussion_r378769295", "bodyText": "Then, we could move AbstractrClientOptionsBuilder to internal.", "author": "trustin", "createdAt": "2020-02-13T10:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NzcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5ODYzNQ==", "url": "https://github.com/line/armeria/pull/2483#discussion_r378798635", "bodyText": "I tried to move to the internal package first but AbstractClientOptionsBuilder access package-private method in ClientDecoration\n\nAh, I didn't notice that. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-02-13T11:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NzcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMjc5Ng==", "url": "https://github.com/line/armeria/pull/2483#discussion_r378812796", "bodyText": "how about adding ClientDecorationBuilder, so that AbstractClientOptionsBuilder can mutate/build a ClientDecoration without accessing package-private methods?\n\nIIUC, you were meant to add addClientDecoration(ClientDecoration) to ClientDecorationBuilder?\nSorry, I don't thoroughly understand your direction. \ud83d\ude05", "author": "ikhoon", "createdAt": "2020-02-13T11:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NzcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg2NzE5OA==", "url": "https://github.com/line/armeria/pull/2483#discussion_r378867198", "bodyText": "Oh, I completely forgot we have ClientDecorationBuilder already. \ud83e\udd23\nIf it's enough with adding just public ClientDecorationBuilder.add(ClientDecoration), then how about handling it in this PR?", "author": "trustin", "createdAt": "2020-02-13T13:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NzcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg3OTU3Ng==", "url": "https://github.com/line/armeria/pull/2483#discussion_r378879576", "bodyText": "Sure, will handle it in this PR. :-)", "author": "ikhoon", "createdAt": "2020-02-13T14:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NzcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "56a2aedc7cb8aa760d1d5d3ab042a7c1cc883068", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java b/core/src/main/java/com/linecorp/armeria/internal/client/AbstractClientOptionsBuilder.java\nsimilarity index 94%\nrename from core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java\nrename to core/src/main/java/com/linecorp/armeria/internal/client/AbstractClientOptionsBuilder.java\nindex d794f5847..939dd49ed 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/client/AbstractClientOptionsBuilder.java\n\n@@ -25,18 +25,26 @@ import java.util.Map.Entry;\n import java.util.function.Function;\n import java.util.function.Supplier;\n \n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientDecorationBuilder;\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.ClientOption;\n+import com.linecorp.armeria.client.ClientOptionValue;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.DecoratingHttpClientFunction;\n+import com.linecorp.armeria.client.DecoratingRpcClientFunction;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.RpcClient;\n import com.linecorp.armeria.client.endpoint.EndpointGroup;\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpHeadersBuilder;\n import com.linecorp.armeria.common.RequestId;\n-import com.linecorp.armeria.common.util.UnstableApi;\n \n /**\n  * A skeletal builder implementation for {@link ClientOptions}.\n- * Note: This class is meant for internal use only.\n  */\n-@UnstableApi\n public class AbstractClientOptionsBuilder {\n \n     private final Map<ClientOption<?>, ClientOptionValue<?>> options = new LinkedHashMap<>();\n"}}, {"oid": "56a2aedc7cb8aa760d1d5d3ab042a7c1cc883068", "url": "https://github.com/line/armeria/commit/56a2aedc7cb8aa760d1d5d3ab042a7c1cc883068", "message": "Address comments by @minwoox, @trustin\n\n- Move AbstractClientOptionsBuilder to internal\n- Add `add(ClientDecoration)` to ClientDecorationBuilder", "committedDate": "2020-02-13T14:32:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNzMwMQ==", "url": "https://github.com/line/armeria/pull/2483#discussion_r379237301", "bodyText": "Hmm, I'm not sure if it's a good idea to expose empty() in the public API. How about this:\n\nRemove EMPTY and empty()\nChange the signiture of buildOptions() to:\n\nbuildOptions(@Nullable ClientOptions baseOptions) (We pass WebClient.options() in this PR, or null for other cases.)\n\n\nUse ClientOptions.of(baseOptions, optValArray) (if null, use ClientOptions.of(optValArray).", "author": "trustin", "createdAt": "2020-02-14T03:40:11Z", "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -380,7 +386,7 @@ protected final ClientOptions buildOptions(boolean includeDefault) {\n         if (includeDefault) {\n             return ClientOptions.of(optValArray);\n         } else {\n-            return ClientOptions.of(ClientOptions.EMPTY, optValArray);\n+            return ClientOptions.of(ClientOptions.empty(), optValArray);", "originalCommit": "56a2aedc7cb8aa760d1d5d3ab042a7c1cc883068", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2NzM3Mg==", "url": "https://github.com/line/armeria/pull/2483#discussion_r379267372", "bodyText": "I'm not sure if it's a good idea to expose empty()\n\nThat was my considering point. buildOptions(@Nullable ClientOptions baseOptions) sounds good.\nThanks for reviewing \ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-02-14T06:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNzMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "efbd109e6b8cadc46b7236b73adda6392cb13035", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/client/AbstractClientOptionsBuilder.java b/core/src/main/java/com/linecorp/armeria/internal/client/AbstractClientOptionsBuilder.java\nindex 939dd49ed..41937c525 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/client/AbstractClientOptionsBuilder.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/client/AbstractClientOptionsBuilder.java\n\n@@ -368,25 +370,24 @@ public class AbstractClientOptionsBuilder {\n      * {@linkplain ClientOptions#of() default options}.\n      */\n     protected final ClientOptions buildOptions() {\n-        return buildOptions(true);\n+        return buildOptions(null);\n     }\n \n     /**\n-     * Builds {@link ClientOptions} with the given options and the\n-     * {@linkplain ClientOptions#of() default options} if the specified {@code includeDefault} is {@code true}.\n-     * Otherwise builds {@link ClientOptions} with the given options only.\n+     * Builds {@link ClientOptions} with the specified {@code baseOptions} and\n+     * the options which were set to this builder.\n      */\n-    protected final ClientOptions buildOptions(boolean includeDefault) {\n+    protected final ClientOptions buildOptions(@Nullable ClientOptions baseOptions) {\n         final Collection<ClientOptionValue<?>> optVals = options.values();\n         final int numOpts = optVals.size();\n         final ClientOptionValue<?>[] optValArray = optVals.toArray(new ClientOptionValue[numOpts + 2]);\n         optValArray[numOpts] = ClientOption.DECORATION.newValue(decoration.build());\n         optValArray[numOpts + 1] = ClientOption.HTTP_HEADERS.newValue(httpHeaders.build());\n \n-        if (includeDefault) {\n-            return ClientOptions.of(optValArray);\n+        if (baseOptions != null) {\n+            return ClientOptions.of(baseOptions, optValArray);\n         } else {\n-            return ClientOptions.of(ClientOptions.empty(), optValArray);\n+            return ClientOptions.of(optValArray);\n         }\n     }\n }\n"}}, {"oid": "efbd109e6b8cadc46b7236b73adda6392cb13035", "url": "https://github.com/line/armeria/commit/efbd109e6b8cadc46b7236b73adda6392cb13035", "message": "Address comments by @trustin / Remove ClientOptions.empty()", "committedDate": "2020-02-14T06:39:16Z", "type": "commit"}, {"oid": "7b2cc25bc74639f4781844f514234e18c4171133", "url": "https://github.com/line/armeria/commit/7b2cc25bc74639f4781844f514234e18c4171133", "message": "Move back to public", "committedDate": "2020-02-14T07:29:47Z", "type": "commit"}, {"oid": "1a053d351e17ce7d4d18b8f3383f89273cf453dc", "url": "https://github.com/line/armeria/commit/1a053d351e17ce7d4d18b8f3383f89273cf453dc", "message": "Fix checkstyle", "committedDate": "2020-02-14T08:02:29Z", "type": "commit"}, {"oid": "2756c147e0abb05591506405082df14e078ce5a2", "url": "https://github.com/line/armeria/commit/2756c147e0abb05591506405082df14e078ce5a2", "message": "Clean up argument names", "committedDate": "2020-02-14T09:54:39Z", "type": "commit"}, {"oid": "ecb54124614a0cb0c4ce28d775230ef030d25829", "url": "https://github.com/line/armeria/commit/ecb54124614a0cb0c4ce28d775230ef030d25829", "message": "Address comments by @trustin / Add abstract mergeValue for merge conflict option value", "committedDate": "2020-02-14T12:17:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMzk4MA==", "url": "https://github.com/line/armeria/pull/2483#discussion_r379713980", "bodyText": "Could use newValue.value() and oldValue.value() instead of calling .value() many times.", "author": "trustin", "createdAt": "2020-02-15T03:21:05Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "diffHunk": "@@ -411,4 +412,26 @@ public ConnectionPoolListener connectionPoolListener() {\n     public MeterRegistry meterRegistry() {\n         return get0(ClientFactoryOption.METER_REGISTRY);\n     }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n+        if (oldValue.option() == ClientFactoryOption.CHANNEL_OPTIONS) {\n+            final ClientFactoryOptionValue<Map<ChannelOption<?>, Object>> castOldValue =\n+                    (ClientFactoryOptionValue<Map<ChannelOption<?>, Object>>) oldValue;\n+            final ClientFactoryOptionValue<Map<ChannelOption<?>, Object>> castNewValue =\n+                    (ClientFactoryOptionValue<Map<ChannelOption<?>, Object>>) newValue;", "originalCommit": "ecb54124614a0cb0c4ce28d775230ef030d25829", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c0fff62be8d085ca96bc59c33370a3f03252616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java b/core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java\nindex 5e1eb34e3..0b21b5302 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java\n\n@@ -413,22 +393,39 @@ public final class ClientFactoryOptions extends AbstractOptions {\n         return get0(ClientFactoryOption.METER_REGISTRY);\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends AbstractOptionValue<?, ?>> T filterValue(T optionValue) {\n+        if (optionValue.option() == ClientFactoryOption.CHANNEL_OPTIONS) {\n+            final ClientFactoryOption<Map<ChannelOption<?>, Object>> castOption =\n+                    (ClientFactoryOption<Map<ChannelOption<?>, Object>>) optionValue.option();\n+            final Map<ChannelOption<?>, Object> value = (Map<ChannelOption<?>, Object>) optionValue.value();\n+            return (T) castOption.newValue(filterChannelOptions(value));\n+        }\n+        return optionValue;\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n         if (oldValue.option() == ClientFactoryOption.CHANNEL_OPTIONS) {\n-            final ClientFactoryOptionValue<Map<ChannelOption<?>, Object>> castOldValue =\n-                    (ClientFactoryOptionValue<Map<ChannelOption<?>, Object>>) oldValue;\n-            final ClientFactoryOptionValue<Map<ChannelOption<?>, Object>> castNewValue =\n-                    (ClientFactoryOptionValue<Map<ChannelOption<?>, Object>>) newValue;\n+            final Map<ChannelOption<?>, Object> castOldValue = (Map<ChannelOption<?>, Object>) oldValue.value();\n+            final Map<ChannelOption<?>, Object> castNewValue = (Map<ChannelOption<?>, Object>) newValue.value();\n+            if (castOldValue.isEmpty()) {\n+                return newValue;\n+            }\n+            if (castNewValue.isEmpty()) {\n+                return oldValue;\n+            }\n+\n             final ImmutableMap.Builder<ChannelOption<?>, Object> builder =\n-                    ImmutableMap.builderWithExpectedSize(castNewValue.value().size());\n-            castOldValue.value().forEach((channelOption, value) -> {\n-                if (!castNewValue.value().containsKey(channelOption)) {\n+                    ImmutableMap.builderWithExpectedSize(castOldValue.size() + castNewValue.size());\n+            castOldValue.forEach((channelOption, value) -> {\n+                if (!castNewValue.containsKey(channelOption)) {\n                     builder.put(channelOption, value);\n                 }\n             });\n-            builder.putAll(castNewValue.value());\n+            builder.putAll(castNewValue);\n             return (T) ClientFactoryOption.CHANNEL_OPTIONS.newValue(builder.build());\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDA4Nw==", "url": "https://github.com/line/armeria/pull/2483#discussion_r379714087", "bodyText": "Probably better using oldValue's size + newValue's size? Not always optimal, but expansion is more expensive.\nCould just return the oldValue if newValue is empty (or newValue is oldValue is empty.)", "author": "trustin", "createdAt": "2020-02-15T03:23:30Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "diffHunk": "@@ -411,4 +412,26 @@ public ConnectionPoolListener connectionPoolListener() {\n     public MeterRegistry meterRegistry() {\n         return get0(ClientFactoryOption.METER_REGISTRY);\n     }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n+        if (oldValue.option() == ClientFactoryOption.CHANNEL_OPTIONS) {\n+            final ClientFactoryOptionValue<Map<ChannelOption<?>, Object>> castOldValue =\n+                    (ClientFactoryOptionValue<Map<ChannelOption<?>, Object>>) oldValue;\n+            final ClientFactoryOptionValue<Map<ChannelOption<?>, Object>> castNewValue =\n+                    (ClientFactoryOptionValue<Map<ChannelOption<?>, Object>>) newValue;\n+            final ImmutableMap.Builder<ChannelOption<?>, Object> builder =\n+                    ImmutableMap.builderWithExpectedSize(castNewValue.value().size());", "originalCommit": "ecb54124614a0cb0c4ce28d775230ef030d25829", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c0fff62be8d085ca96bc59c33370a3f03252616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java b/core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java\nindex 5e1eb34e3..0b21b5302 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java\n\n@@ -413,22 +393,39 @@ public final class ClientFactoryOptions extends AbstractOptions {\n         return get0(ClientFactoryOption.METER_REGISTRY);\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends AbstractOptionValue<?, ?>> T filterValue(T optionValue) {\n+        if (optionValue.option() == ClientFactoryOption.CHANNEL_OPTIONS) {\n+            final ClientFactoryOption<Map<ChannelOption<?>, Object>> castOption =\n+                    (ClientFactoryOption<Map<ChannelOption<?>, Object>>) optionValue.option();\n+            final Map<ChannelOption<?>, Object> value = (Map<ChannelOption<?>, Object>) optionValue.value();\n+            return (T) castOption.newValue(filterChannelOptions(value));\n+        }\n+        return optionValue;\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n         if (oldValue.option() == ClientFactoryOption.CHANNEL_OPTIONS) {\n-            final ClientFactoryOptionValue<Map<ChannelOption<?>, Object>> castOldValue =\n-                    (ClientFactoryOptionValue<Map<ChannelOption<?>, Object>>) oldValue;\n-            final ClientFactoryOptionValue<Map<ChannelOption<?>, Object>> castNewValue =\n-                    (ClientFactoryOptionValue<Map<ChannelOption<?>, Object>>) newValue;\n+            final Map<ChannelOption<?>, Object> castOldValue = (Map<ChannelOption<?>, Object>) oldValue.value();\n+            final Map<ChannelOption<?>, Object> castNewValue = (Map<ChannelOption<?>, Object>) newValue.value();\n+            if (castOldValue.isEmpty()) {\n+                return newValue;\n+            }\n+            if (castNewValue.isEmpty()) {\n+                return oldValue;\n+            }\n+\n             final ImmutableMap.Builder<ChannelOption<?>, Object> builder =\n-                    ImmutableMap.builderWithExpectedSize(castNewValue.value().size());\n-            castOldValue.value().forEach((channelOption, value) -> {\n-                if (!castNewValue.value().containsKey(channelOption)) {\n+                    ImmutableMap.builderWithExpectedSize(castOldValue.size() + castNewValue.size());\n+            castOldValue.forEach((channelOption, value) -> {\n+                if (!castNewValue.containsKey(channelOption)) {\n                     builder.put(channelOption, value);\n                 }\n             });\n-            builder.putAll(castNewValue.value());\n+            builder.putAll(castNewValue);\n             return (T) ClientFactoryOption.CHANNEL_OPTIONS.newValue(builder.build());\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDE1Ng==", "url": "https://github.com/line/armeria/pull/2483#discussion_r379714156", "bodyText": "Could return oldDecoration or newDecoration if newDecoration or oldDecoration is empty respectively.", "author": "trustin", "createdAt": "2020-02-15T03:24:59Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientOptions.java", "diffHunk": "@@ -208,6 +209,30 @@ private ClientOptions(ClientOptions baseOptions, ClientOptions additionalOptions\n         super(baseOptions, additionalOptions);\n     }\n \n+    @Override\n+    protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n+        if (oldValue.option() == DECORATION) {\n+            final ClientDecoration oldDecoration = (ClientDecoration) oldValue.value();\n+            final ClientDecoration newDecoration = (ClientDecoration) newValue.value();", "originalCommit": "ecb54124614a0cb0c4ce28d775230ef030d25829", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c0fff62be8d085ca96bc59c33370a3f03252616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java b/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\nindex fb56cf13f..922c93437 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\n\n@@ -194,26 +177,46 @@ public final class ClientOptions extends AbstractOptions {\n     }\n \n     private ClientOptions(ClientOptionValue<?>... options) {\n-        super(ClientOptions::filterValue, options);\n+        super(options);\n     }\n \n     private ClientOptions(ClientOptions baseOptions, ClientOptionValue<?>... additionalOptions) {\n-        super(ClientOptions::filterValue, baseOptions, additionalOptions);\n+        super(baseOptions, additionalOptions);\n     }\n \n     private ClientOptions(ClientOptions baseOptions, Iterable<ClientOptionValue<?>> additionalOptions) {\n-        super(ClientOptions::filterValue, baseOptions, additionalOptions);\n+        super(baseOptions, additionalOptions);\n     }\n \n     private ClientOptions(ClientOptions baseOptions, ClientOptions additionalOptions) {\n         super(baseOptions, additionalOptions);\n     }\n \n+    @Override\n+    protected <T extends AbstractOptionValue<?, ?>> T filterValue(T optionValue) {\n+        if (optionValue.option() == HTTP_HEADERS) {\n+            @SuppressWarnings(\"unchecked\")\n+            final ClientOption<HttpHeaders> castOption = (ClientOption<HttpHeaders>) optionValue.option();\n+            @SuppressWarnings(\"unchecked\")\n+            final T castOptionValue = (T) castOption.newValue(\n+                    filterHttpHeaders((HttpHeaders) optionValue.value()));\n+            return castOptionValue;\n+        }\n+        return optionValue;\n+    }\n+\n     @Override\n     protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n         if (oldValue.option() == DECORATION) {\n             final ClientDecoration oldDecoration = (ClientDecoration) oldValue.value();\n             final ClientDecoration newDecoration = (ClientDecoration) newValue.value();\n+            if (oldDecoration.decorators().isEmpty() && oldDecoration.rpcDecorators().isEmpty()) {\n+                return newValue;\n+            }\n+            if (newDecoration.decorators().isEmpty() && newDecoration.rpcDecorators().isEmpty()) {\n+                return oldValue;\n+            }\n+\n             final ClientDecoration merged = ClientDecoration.builder()\n                                                             .add(oldDecoration)\n                                                             .add(newDecoration)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDE3MA==", "url": "https://github.com/line/armeria/pull/2483#discussion_r379714170", "bodyText": "Ditto - Could optimize when either is empty.", "author": "trustin", "createdAt": "2020-02-15T03:25:22Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientOptions.java", "diffHunk": "@@ -208,6 +209,30 @@ private ClientOptions(ClientOptions baseOptions, ClientOptions additionalOptions\n         super(baseOptions, additionalOptions);\n     }\n \n+    @Override\n+    protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n+        if (oldValue.option() == DECORATION) {\n+            final ClientDecoration oldDecoration = (ClientDecoration) oldValue.value();\n+            final ClientDecoration newDecoration = (ClientDecoration) newValue.value();\n+            final ClientDecoration merged = ClientDecoration.builder()\n+                                                            .add(oldDecoration)\n+                                                            .add(newDecoration)\n+                                                            .build();\n+            @SuppressWarnings(\"unchecked\")\n+            final T cast = (T) DECORATION.newValue(merged);\n+            return cast;\n+        } else if (oldValue.option() == HTTP_HEADERS) {\n+            final HttpHeaders oldHeaders = (HttpHeaders) oldValue.value();\n+            final HttpHeaders newHeaders = (HttpHeaders) newValue.value();\n+            final HttpHeaders merged = oldHeaders.toBuilder().setObject(newHeaders).build();", "originalCommit": "ecb54124614a0cb0c4ce28d775230ef030d25829", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c0fff62be8d085ca96bc59c33370a3f03252616", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java b/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\nindex fb56cf13f..922c93437 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\n\n@@ -194,26 +177,46 @@ public final class ClientOptions extends AbstractOptions {\n     }\n \n     private ClientOptions(ClientOptionValue<?>... options) {\n-        super(ClientOptions::filterValue, options);\n+        super(options);\n     }\n \n     private ClientOptions(ClientOptions baseOptions, ClientOptionValue<?>... additionalOptions) {\n-        super(ClientOptions::filterValue, baseOptions, additionalOptions);\n+        super(baseOptions, additionalOptions);\n     }\n \n     private ClientOptions(ClientOptions baseOptions, Iterable<ClientOptionValue<?>> additionalOptions) {\n-        super(ClientOptions::filterValue, baseOptions, additionalOptions);\n+        super(baseOptions, additionalOptions);\n     }\n \n     private ClientOptions(ClientOptions baseOptions, ClientOptions additionalOptions) {\n         super(baseOptions, additionalOptions);\n     }\n \n+    @Override\n+    protected <T extends AbstractOptionValue<?, ?>> T filterValue(T optionValue) {\n+        if (optionValue.option() == HTTP_HEADERS) {\n+            @SuppressWarnings(\"unchecked\")\n+            final ClientOption<HttpHeaders> castOption = (ClientOption<HttpHeaders>) optionValue.option();\n+            @SuppressWarnings(\"unchecked\")\n+            final T castOptionValue = (T) castOption.newValue(\n+                    filterHttpHeaders((HttpHeaders) optionValue.value()));\n+            return castOptionValue;\n+        }\n+        return optionValue;\n+    }\n+\n     @Override\n     protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n         if (oldValue.option() == DECORATION) {\n             final ClientDecoration oldDecoration = (ClientDecoration) oldValue.value();\n             final ClientDecoration newDecoration = (ClientDecoration) newValue.value();\n+            if (oldDecoration.decorators().isEmpty() && oldDecoration.rpcDecorators().isEmpty()) {\n+                return newValue;\n+            }\n+            if (newDecoration.decorators().isEmpty() && newDecoration.rpcDecorators().isEmpty()) {\n+                return oldValue;\n+            }\n+\n             final ClientDecoration merged = ClientDecoration.builder()\n                                                             .add(oldDecoration)\n                                                             .add(newDecoration)\n"}}, {"oid": "5c0fff62be8d085ca96bc59c33370a3f03252616", "url": "https://github.com/line/armeria/commit/5c0fff62be8d085ca96bc59c33370a3f03252616", "message": "Address comments by @trustin\n\n* Add abstract `filterValue` and remove from constructor\n* Avoid creating new options if either one is empty.", "committedDate": "2020-02-15T05:30:35Z", "type": "commit"}, {"oid": "159ce6876cb3792885590919925afda6bf5d7654", "url": "https://github.com/line/armeria/commit/159ce6876cb3792885590919925afda6bf5d7654", "message": "Move method level `@SuppressWarnings(\"unchecked\")`", "committedDate": "2020-02-15T05:40:48Z", "type": "commit"}, {"oid": "d4445ebc99b8fb31902bfc5d22e30d0761c3e7b0", "url": "https://github.com/line/armeria/commit/d4445ebc99b8fb31902bfc5d22e30d0761c3e7b0", "message": "Checkstyle", "committedDate": "2020-02-15T07:37:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc4Njc3Mg==", "url": "https://github.com/line/armeria/pull/2483#discussion_r379786772", "bodyText": "How about adding ClientDecoration.isEmpty() and simplifying here?", "author": "trustin", "createdAt": "2020-02-15T07:38:34Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientOptions.java", "diffHunk": "@@ -192,19 +177,70 @@ private static HttpHeaders filterHttpHeaders(HttpHeaders headers) {\n     }\n \n     private ClientOptions(ClientOptionValue<?>... options) {\n-        super(ClientOptions::filterValue, options);\n+        super(options);\n+    }\n+\n+    private ClientOptions(ClientOptions baseOptions, ClientOptionValue<?>... additionalOptions) {\n+        super(baseOptions, additionalOptions);\n     }\n \n-    private ClientOptions(ClientOptions clientOptions, ClientOptionValue<?>... options) {\n-        super(ClientOptions::filterValue, clientOptions, options);\n+    private ClientOptions(ClientOptions baseOptions, Iterable<ClientOptionValue<?>> additionalOptions) {\n+        super(baseOptions, additionalOptions);\n     }\n \n-    private ClientOptions(ClientOptions clientOptions, Iterable<ClientOptionValue<?>> options) {\n-        super(ClientOptions::filterValue, clientOptions, options);\n+    private ClientOptions(ClientOptions baseOptions, ClientOptions additionalOptions) {\n+        super(baseOptions, additionalOptions);\n     }\n \n-    private ClientOptions(ClientOptions clientOptions, ClientOptions options) {\n-        super(clientOptions, options);\n+    @Override\n+    protected <T extends AbstractOptionValue<?, ?>> T filterValue(T optionValue) {\n+        if (optionValue.option() == HTTP_HEADERS) {\n+            @SuppressWarnings(\"unchecked\")\n+            final ClientOption<HttpHeaders> castOption = (ClientOption<HttpHeaders>) optionValue.option();\n+            @SuppressWarnings(\"unchecked\")\n+            final T castOptionValue = (T) castOption.newValue(\n+                    filterHttpHeaders((HttpHeaders) optionValue.value()));\n+            return castOptionValue;\n+        }\n+        return optionValue;\n+    }\n+\n+    @Override\n+    protected <T extends AbstractOptionValue<?, ?>> T mergeValue(T oldValue, T newValue) {\n+        if (oldValue.option() == DECORATION) {\n+            final ClientDecoration oldDecoration = (ClientDecoration) oldValue.value();\n+            final ClientDecoration newDecoration = (ClientDecoration) newValue.value();\n+            if (oldDecoration.decorators().isEmpty() && oldDecoration.rpcDecorators().isEmpty()) {", "originalCommit": "d4445ebc99b8fb31902bfc5d22e30d0761c3e7b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc4Nzk2NA==", "url": "https://github.com/line/armeria/pull/2483#discussion_r379787964", "bodyText": "Oh, that sounds nice.", "author": "ikhoon", "createdAt": "2020-02-15T07:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc4Njc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "08f92c4d0e0274d1fbc2bdf989e3397eb487e823", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java b/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\nindex 922c93437..1e46fed88 100644\n--- a/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\n+++ b/core/src/main/java/com/linecorp/armeria/client/ClientOptions.java\n\n@@ -210,10 +210,10 @@ public final class ClientOptions extends AbstractOptions {\n         if (oldValue.option() == DECORATION) {\n             final ClientDecoration oldDecoration = (ClientDecoration) oldValue.value();\n             final ClientDecoration newDecoration = (ClientDecoration) newValue.value();\n-            if (oldDecoration.decorators().isEmpty() && oldDecoration.rpcDecorators().isEmpty()) {\n+            if (oldDecoration.isEmpty()) {\n                 return newValue;\n             }\n-            if (newDecoration.decorators().isEmpty() && newDecoration.rpcDecorators().isEmpty()) {\n+            if (newDecoration.isEmpty()) {\n                 return oldValue;\n             }\n \n"}}, {"oid": "08f92c4d0e0274d1fbc2bdf989e3397eb487e823", "url": "https://github.com/line/armeria/commit/08f92c4d0e0274d1fbc2bdf989e3397eb487e823", "message": "Add ClientDeration.isEmpty()", "committedDate": "2020-02-15T09:18:05Z", "type": "commit"}, {"oid": "61a9160b3f7bb41370879a22579af1de39262255", "url": "https://github.com/line/armeria/commit/61a9160b3f7bb41370879a22579af1de39262255", "message": "Miscellaneous: Fix Kotlin unused parameters warning", "committedDate": "2020-02-15T09:19:46Z", "type": "commit"}]}