{"pr_number": 2375, "pr_title": "Remove onEnter() and onExit() from RequestContext", "pr_createdAt": "2020-01-06T02:17:13Z", "pr_url": "https://github.com/line/armeria/pull/2375", "timeline": [{"oid": "8e32002d9f99c2819159ae18885bbf6b62e486ea", "url": "https://github.com/line/armeria/commit/8e32002d9f99c2819159ae18885bbf6b62e486ea", "message": "Remove onEnter() and onExit() from RequestContext\nMotivation:\nI think `onEnter` has two drawback:\n- `onEnter` can't be invoked when the context is first pushed into the thread-local\n  - A user attaches the hook to the context which is already pushed.\n- Most of the users do not know when `onEnter` is called. They just guessed. These are few examples that I've recently heard and seen:\n  - A user tried to handle `RequestTimeout` using `isTimedOut` and `onExit()`.\n    - I guided him to use `setRequestTimeoutHandler`\n  - A user puts a heavy initialization logic in `onEnter` and clearing logic in `onExit`\n    - He could itinitialze once and clear it using `RequestLogAvailability.COMPLET`\n  - A user tried to send an diffrent `HttpStatus` than `200` in the Thrift service.\n    - What????\n\nThese APIs can give another option to users when they want to do something with a `RequestContext`. But most of the time, it's just confusing and no obsolete.\nI think we can do what we want to do without `onEnter` and `onExit`. Therefore, I hope to get rid of `onEnter` and `onExit`.", "committedDate": "2020-01-09T10:31:52Z", "type": "commit"}, {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1", "url": "https://github.com/line/armeria/commit/edde229b70c17028232811f96aaefc226ebc3cb1", "message": "Upadate", "committedDate": "2020-01-10T07:56:27Z", "type": "commit"}, {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1", "url": "https://github.com/line/armeria/commit/edde229b70c17028232811f96aaefc226ebc3cb1", "message": "Upadate", "committedDate": "2020-01-10T07:56:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365111259", "bodyText": "It's kinna difficult for me to show a proper example for this right now. Do you have any example recommended?\nOr can we remove this method as well? \ud83e\udd14", "author": "minwoox", "createdAt": "2020-01-10T08:05:15Z", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -242,8 +235,7 @@ default SafeCloseable push(boolean runCallbacks) {\n      * <pre>{@code\n      * ctx.onChild((curCtx, newCtx) -> {\n      *     assert ctx == curCtx && curCtx != newCtx;\n-     *     // Add a callback to the child context.\n-     *     newCtx.onExit(() -> { ... });\n+     *     ...", "originalCommit": "edde229b70c17028232811f96aaefc226ebc3cb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxOTM2MQ==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365219361", "bodyText": "I'm not sure if we can remove this method or not. It seems like it's not used anywhere in our code, though. Slightly in favor of removal.", "author": "trustin", "createdAt": "2020-01-10T12:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0OTE0OA==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365649148", "bodyText": "We used it before adding attr lookup from root context only for copying attributes. I can't think of a good use case not better using the root lookup so in favor of removing", "author": "anuraaga", "createdAt": "2020-01-13T05:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMjI2OQ==", "url": "https://github.com/line/armeria/pull/2375#discussion_r366112269", "bodyText": "Let me remove this as well. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-01-14T01:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java b/core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java\nindex 0316240994..7218ace5a0 100644\n--- a/core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java\n\n@@ -229,28 +228,6 @@ public interface ServiceRequestContext extends RequestContext {\n         throw newIllegalContextPushingException(this, oldCtx);\n     }\n \n-    /**\n-     * Registers {@code callback} to be run when this context is replaced by a child context.\n-     * You could use this method to the child contexts that may be created later:\n-     * <pre>{@code\n-     * ctx.onChild((curCtx, newCtx) -> {\n-     *     assert ctx == curCtx && curCtx != newCtx;\n-     *     ...\n-     * });\n-     * }</pre>\n-     *\n-     * @param callback a {@link BiConsumer} whose first argument is this context and\n-     *                 whose second argument is the new context that replaces this context\n-     */\n-    void onChild(BiConsumer<? super ServiceRequestContext, ? super ClientRequestContext> callback);\n-\n-    /**\n-     * Invokes all {@link #onChild(BiConsumer)} callbacks. It is discouraged to use this method directly.\n-     * Use {@link #makeContextAware(Runnable)} or {@link #push()} instead so that the callbacks are\n-     * invoked automatically.\n-     */\n-    void invokeOnChildCallbacks(ClientRequestContext newCtx);\n-\n     @Override\n     ServiceRequestContext newDerivedContext(RequestId id,\n                                             @Nullable HttpRequest req,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNjk0NQ==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365216945", "bodyText": "If you're still struggling to", "author": "trustin", "createdAt": "2020-01-10T12:43:52Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.", "originalCommit": "edde229b70c17028232811f96aaefc226ebc3cb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\nindex 9fcd305952..41d41e2b00 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n\n@@ -587,63 +586,6 @@ public interface RequestContext {\n         return new RequestContextAwareLogger(this, requireNonNull(logger, \"logger\"));\n     }\n \n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * <p>This method has a limitation which is that the callback cannot be called when this\n-     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n-     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n-     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n-     * Also, you might follow this approach which is using your own thread-local.\n-     * https://github.com/SourceForgery/tachikoma/pull/191\n-     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n-     * We might be a help to you.\n-     *\n-     * <p>Please check out https://github.com/line/armeria/pull/2375\n-     *\n-     * @deprecated Do not use this method.\n-     */\n-    @Deprecated\n-    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onEnter(Runnable callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onExit(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onExit(Runnable callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n     /**\n      * Resolves the specified {@code promise} with the specified {@code result} so that the {@code promise} is\n      * marked as 'done'. If {@code promise} is done already, this method does the following:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365217121", "bodyText": "How about just throwing UnsupportedOperationException with some message instead of adding a parameter?", "author": "trustin", "createdAt": "2020-01-10T12:44:24Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.\n+     *\n+     * <p>Please check out https://github.com/line/armeria/pull/2375\n      *\n-     * @deprecated Use {@link #onEnter(Consumer)} instead.\n+     * @deprecated Do not use this method.\n      */\n     @Deprecated\n-    default void onEnter(Runnable callback) {\n-        onEnter(ctx -> callback.run());\n+    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n+        /* no-op */", "originalCommit": "edde229b70c17028232811f96aaefc226ebc3cb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzOTQ2NQ==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365639465", "bodyText": "UnsupportedOperationException is a good choice.\nOr how about making breaking changes in this case by removing these methods?\nBecause 1) I guess @minwoox added String doNotUseThisMethod for making breaking changes on purpose to produce compile errors and 2) Users can easily detect that it does not work anymore.", "author": "ikhoon", "createdAt": "2020-01-13T03:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODk4Mg==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648982", "bodyText": "I agree that if making a behavior breaking change anyways it's better to just remove the API. We want to deprecate only where users will be able to continue to use their unmodified code.", "author": "anuraaga", "createdAt": "2020-01-13T05:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMjA4MQ==", "url": "https://github.com/line/armeria/pull/2375#discussion_r366112081", "bodyText": "Just wanted to give more information from Javadoc, but I guess it's too much. Let me remove this. Thanks!", "author": "minwoox", "createdAt": "2020-01-14T01:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\nindex 9fcd305952..41d41e2b00 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n\n@@ -587,63 +586,6 @@ public interface RequestContext {\n         return new RequestContextAwareLogger(this, requireNonNull(logger, \"logger\"));\n     }\n \n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * <p>This method has a limitation which is that the callback cannot be called when this\n-     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n-     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n-     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n-     * Also, you might follow this approach which is using your own thread-local.\n-     * https://github.com/SourceForgery/tachikoma/pull/191\n-     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n-     * We might be a help to you.\n-     *\n-     * <p>Please check out https://github.com/line/armeria/pull/2375\n-     *\n-     * @deprecated Do not use this method.\n-     */\n-    @Deprecated\n-    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onEnter(Runnable callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onExit(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onExit(Runnable callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n     /**\n      * Resolves the specified {@code promise} with the specified {@code result} so that the {@code promise} is\n      * marked as 'done'. If {@code promise} is done already, this method does the following:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0MDcyMw==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365640723", "bodyText": "Remove this condition? if {@code runCallbacks} is {@code true}", "author": "ikhoon", "createdAt": "2020-01-13T03:50:25Z", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -37,54 +37,20 @@ public static SafeCloseable noopSafeCloseable() {\n         return noopSafeCloseable;\n     }\n \n-    /**\n-     * Runs callbacks if {@code runCallbacks} is {@code true} and returns the {@link SafeCloseable}\n-     * which will remove the current {@link RequestContext} in the thread-local when\n-     * {@link SafeCloseable#close()} is invoked.\n-     */\n-    public static SafeCloseable pushWithoutRootCtx(RequestContext currentCtx, boolean runCallbacks) {\n-        requireNonNull(currentCtx, \"currentCtx\");\n-        if (runCallbacks) {\n-            currentCtx.invokeOnEnterCallbacks();\n-            return () -> {\n-                currentCtx.invokeOnExitCallbacks();\n-                RequestContextThreadLocal.remove();\n-            };\n-        } else {\n-            return RequestContextThreadLocal::remove;\n-        }\n-    }\n-\n-    /**\n-     * Runs callbacks if {@code runCallbacks} is {@code true} and returns the {@link SafeCloseable}\n-     * which will set the root in the thread-local when {@link SafeCloseable#close()} is invoked.\n-     */\n-    public static SafeCloseable pushWithRootCtx(ClientRequestContext currentCtx, ServiceRequestContext root,\n-                                                boolean runCallbacks) {\n-        return pushWithRootAndOldCtx(currentCtx, root, root, runCallbacks);\n-    }\n-\n     /**\n      * Runs callbacks in {@code currentCtx} and {@code root} if {@code runCallbacks} is {@code true} and", "originalCommit": "edde229b70c17028232811f96aaefc226ebc3cb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java b/core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java\nindex 4899111e09..94aecabb85 100644\n--- a/core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java\n+++ b/core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java\n\n@@ -37,22 +35,6 @@ public final class RequestContextUtil {\n         return noopSafeCloseable;\n     }\n \n-    /**\n-     * Runs callbacks in {@code currentCtx} and {@code root} if {@code runCallbacks} is {@code true} and\n-     * returns the {@link SafeCloseable} which will set the {@code oldCtx} in the thread-local\n-     * when {@link SafeCloseable#close()} is invoked.\n-     */\n-    public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCtx,\n-                                                      ServiceRequestContext root, RequestContext oldCtx) {\n-        requireNonNull(currentCtx, \"currentCtx\");\n-        requireNonNull(root, \"root\");\n-        requireNonNull(oldCtx, \"oldCtx\");\n-        root.invokeOnChildCallbacks(currentCtx);\n-        return () -> {\n-            RequestContextThreadLocal.set(oldCtx);\n-        };\n-    }\n-\n     /**\n      * Returns an {@link IllegalStateException} which is raised when pushing a context from\n      * the unexpected thread or forgetting to close the previous context.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODc3NQ==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648775", "bodyText": "I guess it's opposite, uses RequestContext instead of own thread-local.\nMaybe looking at the PR is too confusing to make it worth linking to.", "author": "anuraaga", "createdAt": "2020-01-13T05:09:00Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.", "originalCommit": "edde229b70c17028232811f96aaefc226ebc3cb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\nindex 9fcd305952..41d41e2b00 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n\n@@ -587,63 +586,6 @@ public interface RequestContext {\n         return new RequestContextAwareLogger(this, requireNonNull(logger, \"logger\"));\n     }\n \n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * <p>This method has a limitation which is that the callback cannot be called when this\n-     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n-     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n-     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n-     * Also, you might follow this approach which is using your own thread-local.\n-     * https://github.com/SourceForgery/tachikoma/pull/191\n-     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n-     * We might be a help to you.\n-     *\n-     * <p>Please check out https://github.com/line/armeria/pull/2375\n-     *\n-     * @deprecated Do not use this method.\n-     */\n-    @Deprecated\n-    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onEnter(Runnable callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onExit(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onExit(Runnable callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n     /**\n      * Resolves the specified {@code promise} with the specified {@code result} so that the {@code promise} is\n      * marked as 'done'. If {@code promise} is done already, this method does the following:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODgyNA==", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648824", "bodyText": "We'll help you", "author": "anuraaga", "createdAt": "2020-01-13T05:09:30Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.", "originalCommit": "edde229b70c17028232811f96aaefc226ebc3cb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\nindex 9fcd305952..41d41e2b00 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/RequestContext.java\n\n@@ -587,63 +586,6 @@ public interface RequestContext {\n         return new RequestContextAwareLogger(this, requireNonNull(logger, \"logger\"));\n     }\n \n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * <p>This method has a limitation which is that the callback cannot be called when this\n-     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n-     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n-     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n-     * Also, you might follow this approach which is using your own thread-local.\n-     * https://github.com/SourceForgery/tachikoma/pull/191\n-     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n-     * We might be a help to you.\n-     *\n-     * <p>Please check out https://github.com/line/armeria/pull/2375\n-     *\n-     * @deprecated Do not use this method.\n-     */\n-    @Deprecated\n-    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onEnter(Runnable callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onExit(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n-    /**\n-     * Do not use this method. The callback is never invoked.\n-     *\n-     * @deprecated Do not use this method.\n-     *\n-     * @see #onEnter(Consumer, String)\n-     */\n-    @Deprecated\n-    default void onExit(Runnable callback, String doNotUseThisMethod) {\n-        /* no-op */\n-    }\n-\n     /**\n      * Resolves the specified {@code promise} with the specified {@code result} so that the {@code promise} is\n      * marked as 'done'. If {@code promise} is done already, this method does the following:\n"}}, {"oid": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "url": "https://github.com/line/armeria/commit/7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "message": "Remove onEnter, onExit and onChild", "committedDate": "2020-01-14T01:39:10Z", "type": "commit"}]}