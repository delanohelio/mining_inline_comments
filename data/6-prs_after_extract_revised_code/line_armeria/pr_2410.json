{"pr_number": 2410, "pr_title": "Add StreamMessage.toDuplicator", "pr_createdAt": "2020-01-20T03:52:45Z", "pr_url": "https://github.com/line/armeria/pull/2410", "timeline": [{"oid": "59cba6a3e70926f012acf354a6739fa4f631b1c1", "url": "https://github.com/line/armeria/commit/59cba6a3e70926f012acf354a6739fa4f631b1c1", "message": "Add StreamMessage.toDuplicator\nMotivation:\nBefore I get into #1409, I need to clean up the duplicator so that `FixedStreamMessage` and other `StreamMessage`s can have the same APIs.\n\nModifications:\n- Add `StreamMessage.toDuplicator()`\n- Add `StreamMessageDuplicator`, `HttpRequestDuplicator` and `HttpResponseDuplicator` interfaces\n\nResult:\n- (Breaking)\n  - `HttpRequestDuplicator` and `HttpResponseDuplicator` are now interfaces.\n    - You should use `HttpRequest.toDuplicator()` and `HttpResponse.toDuplicator()` to use the duplicators.\n\nTo-do:\n- Implement a new duplicator that optimizes `FixedStreamMessage` by wrapping it.", "committedDate": "2020-01-20T03:45:39Z", "type": "commit"}, {"oid": "0be207871a09775c7497a9963a89e70ffbdcb337", "url": "https://github.com/line/armeria/commit/0be207871a09775c7497a9963a89e70ffbdcb337", "message": "Remove unused method", "committedDate": "2020-01-20T03:58:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5ODI3MQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368398271", "bodyText": "Javadoc?", "author": "trustin", "createdAt": "2020-01-20T07:24:44Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -317,6 +318,21 @@ default void subscribe(Subscriber<? super T> subscriber, SubscriptionOption... o\n      */\n     CompletableFuture<List<T>> drainAll(EventExecutor executor, SubscriptionOption... options);\n \n+    /**\n+     * To duplicator.\n+     */\n+    default StreamMessageDuplicator<T> toDuplicator() {\n+        return toDuplicator(defaultSubscriberExecutor());\n+    }\n+\n+    /**\n+     * To duplicator.", "originalCommit": "0be207871a09775c7497a9963a89e70ffbdcb337", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80180250ec06553794b3c9ef5236dfc4d27771fd", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java b/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\nindex 08128bacc..91200db82 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\n\n@@ -319,14 +319,24 @@ public interface StreamMessage<T> extends Publisher<T> {\n     CompletableFuture<List<T>> drainAll(EventExecutor executor, SubscriptionOption... options);\n \n     /**\n-     * To duplicator.\n+     * Returns a new {@link StreamMessageDuplicator} that duplicates multiple {@link StreamMessage}s which\n+     * publish the same elements with this {@link StreamMessage}.\n+     * Note that you cannot subscribe to this {@link StreamMessage} anymore after you call this method.\n+     * To subscribe, call {@link StreamMessageDuplicator#duplicate()} from the returned\n+     * {@link StreamMessageDuplicator}.\n      */\n     default StreamMessageDuplicator<T> toDuplicator() {\n         return toDuplicator(defaultSubscriberExecutor());\n     }\n \n     /**\n-     * To duplicator.\n+     * Returns a new {@link StreamMessageDuplicator} that duplicates multiple {@link StreamMessage}s which\n+     * publish the same elements with this {@link StreamMessage}.\n+     * Note that you cannot subscribe to this {@link StreamMessage} anymore after you call this method.\n+     * To subscribe, call {@link StreamMessageDuplicator#duplicate()} from the returned\n+     * {@link StreamMessageDuplicator}.\n+     *\n+     * @param executor the executor to duplicate\n      */\n     default StreamMessageDuplicator<T> toDuplicator(EventExecutor executor) {\n         requireNonNull(executor, \"executor\");\n"}}, {"oid": "80180250ec06553794b3c9ef5236dfc4d27771fd", "url": "https://github.com/line/armeria/commit/80180250ec06553794b3c9ef5236dfc4d27771fd", "message": "Address the comment by @trustin", "committedDate": "2020-01-20T08:12:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNjA4NQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368526085", "bodyText": "that duplicates this {@link StreamMessage} into one ore more {@link StreamMessage}s, which publish the same elements. ?", "author": "trustin", "createdAt": "2020-01-20T12:37:42Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -319,14 +319,24 @@ default void subscribe(Subscriber<? super T> subscriber, SubscriptionOption... o\n     CompletableFuture<List<T>> drainAll(EventExecutor executor, SubscriptionOption... options);\n \n     /**\n-     * To duplicator.\n+     * Returns a new {@link StreamMessageDuplicator} that duplicates multiple {@link StreamMessage}s which\n+     * publish the same elements with this {@link StreamMessage}.", "originalCommit": "80180250ec06553794b3c9ef5236dfc4d27771fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NDY3Nw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368774677", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-01-21T01:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNjA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1abb23d07613613c86c6d61b077699dcaf0c53e0", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java b/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\nindex 91200db82..a7dc0faae 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\n\n@@ -319,8 +319,8 @@ public interface StreamMessage<T> extends Publisher<T> {\n     CompletableFuture<List<T>> drainAll(EventExecutor executor, SubscriptionOption... options);\n \n     /**\n-     * Returns a new {@link StreamMessageDuplicator} that duplicates multiple {@link StreamMessage}s which\n-     * publish the same elements with this {@link StreamMessage}.\n+     * Returns a new {@link StreamMessageDuplicator} that duplicates this {@link StreamMessage} into one or\n+     * more {@link StreamMessage}s, which publish the same elements.\n      * Note that you cannot subscribe to this {@link StreamMessage} anymore after you call this method.\n      * To subscribe, call {@link StreamMessageDuplicator#duplicate()} from the returned\n      * {@link StreamMessageDuplicator}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNjI3MQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368526271", "bodyText": "Ditto", "author": "trustin", "createdAt": "2020-01-20T12:38:15Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java", "diffHunk": "@@ -474,4 +467,62 @@ default HttpRequest withHeaders(RequestHeadersBuilder newHeadersBuilder) {\n         subscribe(aggregator, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n         return future;\n     }\n+\n+    /**\n+     * Returns a new {@link HttpRequestDuplicator} that duplicates multiple {@link HttpRequest}s which publish\n+     * the same elements with this {@link HttpRequest}.", "originalCommit": "80180250ec06553794b3c9ef5236dfc4d27771fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d3f5088c352c8ecc74daf67de592793094d857e", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpRequest.java b/core/src/main/java/com/linecorp/armeria/common/HttpRequest.java\nindex 687c2fecc..43090c81f 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpRequest.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpRequest.java\n\n@@ -462,7 +462,7 @@ public interface HttpRequest extends Request, StreamMessage<HttpObject> {\n             EventExecutor executor, ByteBufAllocator alloc) {\n         requireNonNull(executor, \"executor\");\n         requireNonNull(alloc, \"alloc\");\n-        final CompletableFuture<AggregatedHttpRequest> future = new EventLoopCheckingCompletableFuture<>();\n+        final CompletableFuture<AggregatedHttpRequest> future = new EventLoopCheckingFuture<>();\n         final HttpRequestAggregator aggregator = new HttpRequestAggregator(this, future, alloc);\n         subscribe(aggregator, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n         return future;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNjM2MA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368526360", "bodyText": "Ditto", "author": "trustin", "createdAt": "2020-01-20T12:38:29Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -437,4 +430,62 @@ static HttpResponse ofFailed(Throwable cause) {\n         subscribe(aggregator, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n         return future;\n     }\n+\n+    /**\n+     * Returns a new {@link HttpResponseDuplicator} that duplicates multiple {@link HttpResponse}s which publish\n+     * the same elements with this {@link HttpResponse}.", "originalCommit": "80180250ec06553794b3c9ef5236dfc4d27771fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d3f5088c352c8ecc74daf67de592793094d857e", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\nindex 6c1e5f92e..029af3fa9 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n\n@@ -425,7 +425,7 @@ public interface HttpResponse extends Response, StreamMessage<HttpObject> {\n             EventExecutor executor, ByteBufAllocator alloc) {\n         requireNonNull(executor, \"executor\");\n         requireNonNull(alloc, \"alloc\");\n-        final CompletableFuture<AggregatedHttpResponse> future = new EventLoopCheckingCompletableFuture<>();\n+        final CompletableFuture<AggregatedHttpResponse> future = new EventLoopCheckingFuture<>();\n         final HttpResponseAggregator aggregator = new HttpResponseAggregator(future, alloc);\n         subscribe(aggregator, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n         return future;\n"}}, {"oid": "9d3f5088c352c8ecc74daf67de592793094d857e", "url": "https://github.com/line/armeria/commit/9d3f5088c352c8ecc74daf67de592793094d857e", "message": "Merge branch 'master' into add_toDuplicator", "committedDate": "2020-01-21T01:09:11Z", "type": "commit"}, {"oid": "1abb23d07613613c86c6d61b077699dcaf0c53e0", "url": "https://github.com/line/armeria/commit/1abb23d07613613c86c6d61b077699dcaf0c53e0", "message": "Address comments by @trustin", "committedDate": "2020-01-21T01:18:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc2NDQxOQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368764419", "bodyText": "nit: It is not releated to your work. By the way could use CommonPools.workerGroup()::next because CommonPools.workerGroup() seems not null always. \ud83d\ude09", "author": "ikhoon", "createdAt": "2020-01-21T00:14:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -326,7 +352,10 @@ default void subscribe(Subscriber<? super T> subscriber, SubscriptionOption... o\n      * different depending on this {@link StreamMessage} implementation.\n      */\n     default EventExecutor defaultSubscriberExecutor() {\n-        return RequestContext.mapCurrent(RequestContext::eventLoop, () -> CommonPools.workerGroup().next());\n+        final EventLoop eventExecutor = RequestContext.mapCurrent(RequestContext::eventLoop,\n+                                                                  () -> CommonPools.workerGroup().next());", "originalCommit": "80180250ec06553794b3c9ef5236dfc4d27771fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc5ODI4NQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368798285", "bodyText": "Oh, I missed this. Thanks!", "author": "minwoox", "createdAt": "2020-01-21T03:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc2NDQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2b19b126c65d8d719d4623577ec8fe35037c68ce", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java b/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\nindex 91200db82..02372bbd7 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java\n\n@@ -353,7 +353,7 @@ public interface StreamMessage<T> extends Publisher<T> {\n      */\n     default EventExecutor defaultSubscriberExecutor() {\n         final EventLoop eventExecutor = RequestContext.mapCurrent(RequestContext::eventLoop,\n-                                                                  () -> CommonPools.workerGroup().next());\n+                                                                  CommonPools.workerGroup()::next);\n         assert eventExecutor != null;\n         return eventExecutor;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NTIzNQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368775235", "bodyText": "nit: How about narrowing down the maxSingalLength to int than truncating the maxResponseLength in StreamMessageProcessor constructor?", "author": "ikhoon", "createdAt": "2020-01-21T01:23:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -437,4 +430,62 @@ static HttpResponse ofFailed(Throwable cause) {\n         subscribe(aggregator, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n         return future;\n     }\n+\n+    /**\n+     * Returns a new {@link HttpResponseDuplicator} that duplicates multiple {@link HttpResponse}s which publish\n+     * the same elements with this {@link HttpResponse}.\n+     * Note that you cannot subscribe to this {@link HttpResponse} anymore after you call this method.\n+     * To subscribe, call {@link HttpResponseDuplicator#duplicate()} from the returned\n+     * {@link HttpResponseDuplicator}.\n+     */\n+    @Override\n+    default HttpResponseDuplicator toDuplicator() {\n+        return toDuplicator(Flags.defaultMaxResponseLength());\n+    }\n+\n+    /**\n+     * Returns a new {@link HttpResponseDuplicator} that duplicates multiple {@link HttpResponse}s which publish\n+     * the same elements with this {@link HttpResponse}.\n+     * Note that you cannot subscribe to this {@link HttpResponse} anymore after you call this method.\n+     * To subscribe, call {@link HttpResponseDuplicator#duplicate()} from the returned\n+     * {@link HttpResponseDuplicator}.\n+     *\n+     * @param executor the executor to duplicate\n+     */\n+    @Override\n+    default HttpResponseDuplicator toDuplicator(EventExecutor executor) {\n+        return toDuplicator(executor, Flags.defaultMaxResponseLength());\n+    }\n+\n+    /**\n+     * Returns a new {@link HttpResponseDuplicator} that duplicates multiple {@link HttpResponse}s which publish\n+     * the same elements with this {@link HttpResponse}.\n+     * Note that you cannot subscribe to this {@link HttpResponse} anymore after you call this method.\n+     * To subscribe, call {@link HttpResponseDuplicator#duplicate()} from the returned\n+     * {@link HttpResponseDuplicator}.\n+     *\n+     * @param maxResponseLength the maximum response length that the duplicator can hold in its buffer.\n+     *                         {@link ContentTooLargeException} is raised if the length of the buffered\n+     *                         {@link HttpData} is greater than this value.\n+     */\n+    default HttpResponseDuplicator toDuplicator(long maxResponseLength) {", "originalCommit": "80180250ec06553794b3c9ef5236dfc4d27771fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc5ODQ2Mw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368798463", "bodyText": "I used long because Flags.defaultMaxResponseLength() uses long. Do you want me to change that as well?", "author": "minwoox", "createdAt": "2020-01-21T03:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwNDMyMA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368804320", "bodyText": "defaultMaxResponseLength must be long.", "author": "trustin", "createdAt": "2020-01-21T04:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNzA4NA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368827084", "bodyText": "So it's good to keep it as it is? @ikhoon", "author": "minwoox", "createdAt": "2020-01-21T06:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNzUyNw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368827527", "bodyText": "I used long because Flags.defaultMaxResponseLength() uses long.\n\nThe Flags.defaultMaxResponseLength() enventually cast long to int. So I thought the following because it can expose stricter type.\n@Override\ndefault HttpResponseDuplicator toDuplicator(EventExecutor executor, int maxResponseLength) \n   return new DefaultHttpResponseDuplicator(this, executor, maxResponseLength);\n}\n\n@Override\ndefault HttpResponseDuplicator toDuplicator(EventExecutor executor) \n    int maxResponseLength = Flags.defaultMaxResponseLength() > Integer.MAX_VALUE ? Integer.MAX_VAUE : Flags.defaultMaxResponseLength();\n    return toDuplicator(executor, maxResponseLength);\n}\nBut I'm not strong here. Let keep it!", "author": "ikhoon", "createdAt": "2020-01-21T06:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NTIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "254527e5029fa0060b5269ed7408071cb03d3458", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\nindex 6c1e5f92e..8785462b6 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpResponse.java\n\n@@ -425,15 +425,15 @@ public interface HttpResponse extends Response, StreamMessage<HttpObject> {\n             EventExecutor executor, ByteBufAllocator alloc) {\n         requireNonNull(executor, \"executor\");\n         requireNonNull(alloc, \"alloc\");\n-        final CompletableFuture<AggregatedHttpResponse> future = new EventLoopCheckingCompletableFuture<>();\n+        final CompletableFuture<AggregatedHttpResponse> future = new EventLoopCheckingFuture<>();\n         final HttpResponseAggregator aggregator = new HttpResponseAggregator(future, alloc);\n         subscribe(aggregator, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n         return future;\n     }\n \n     /**\n-     * Returns a new {@link HttpResponseDuplicator} that duplicates multiple {@link HttpResponse}s which publish\n-     * the same elements with this {@link HttpResponse}.\n+     * Returns a new {@link HttpResponseDuplicator} that duplicates this {@link HttpResponse} into one or\n+     * more {@link HttpResponse}s, which publish the same elements.\n      * Note that you cannot subscribe to this {@link HttpResponse} anymore after you call this method.\n      * To subscribe, call {@link HttpResponseDuplicator#duplicate()} from the returned\n      * {@link HttpResponseDuplicator}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NzcyNQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368777725", "bodyText": "c.l.a.c.HttpRequest doesn't seem to have type parameter. \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-01-21T01:38:11Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java", "diffHunk": "@@ -16,128 +16,69 @@\n \n package com.linecorp.armeria.common;\n \n-import static java.util.Objects.requireNonNull;\n+import org.reactivestreams.Subscriber;\n \n-import javax.annotation.Nullable;\n-\n-import com.google.common.base.MoreObjects;\n-\n-import com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator;\n-import com.linecorp.armeria.common.stream.StreamMessage;\n-import com.linecorp.armeria.common.stream.StreamMessageWrapper;\n-\n-import io.netty.util.concurrent.EventExecutor;\n+import com.linecorp.armeria.common.stream.StreamMessageDuplicator;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n \n /**\n- * Allows subscribing to an {@link HttpRequest} multiple times by duplicating the stream.\n+ * A duplicator that duplicates a {@link HttpRequest} into one or more {@link HttpRequest}s,\n+ * which publish the same elements.\n  *\n  * <pre>{@code\n- * final HttpRequest originalReq = ...\n- * final HttpRequestDuplicator reqDuplicator = new HttpRequestDuplicator(originalReq);\n- *\n- * final HttpRequest dupReq1 = reqDuplicator.duplicateStream();\n- * final HttpRequest dupReq2 = reqDuplicator.duplicateStream(true); // the last stream\n+ * HttpRequest<String> httpRequest = ...", "originalCommit": "1abb23d07613613c86c6d61b077699dcaf0c53e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3OTMzMA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368779330", "bodyText": "Oops. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-01-21T01:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NzcyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "254527e5029fa0060b5269ed7408071cb03d3458", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java b/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\nindex 1826925c7..036376ffb 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\n\n@@ -26,13 +26,13 @@ import com.linecorp.armeria.common.stream.SubscriptionOption;\n  * which publish the same elements.\n  *\n  * <pre>{@code\n- * HttpRequest<String> httpRequest = ...\n- * HttpRequestDuplicator<String> duplicator = httpRequest.toDuplicator();\n+ * HttpRequest httpRequest = ...\n+ * HttpRequestDuplicator duplicator = httpRequest.toDuplicator();\n  * // httpRequest.subscribe(...) will throw an exception. You cannot subscribe to httpRequest anymore.\n  *\n  * // Duplicate the stream as many as you want to subscribe.\n- * HttpRequest<String> duplicatedHttpRequest1 = duplicator.duplicate();\n- * HttpRequest<String> duplicatedHttpRequest2 = duplicator.duplicate();\n+ * HttpRequest duplicatedHttpRequest1 = duplicator.duplicate();\n+ * HttpRequest duplicatedHttpRequest2 = duplicator.duplicate();\n  * duplicatedHttpRequest1.subscribe(...);\n  * duplicatedHttpRequest2.subscribe(...);\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3Nzc3Mg==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368777772", "bodyText": "Ditto.", "author": "ikhoon", "createdAt": "2020-01-21T01:38:27Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java", "diffHunk": "@@ -16,128 +16,69 @@\n \n package com.linecorp.armeria.common;\n \n-import static java.util.Objects.requireNonNull;\n+import org.reactivestreams.Subscriber;\n \n-import javax.annotation.Nullable;\n-\n-import com.google.common.base.MoreObjects;\n-\n-import com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator;\n-import com.linecorp.armeria.common.stream.StreamMessage;\n-import com.linecorp.armeria.common.stream.StreamMessageWrapper;\n-\n-import io.netty.util.concurrent.EventExecutor;\n+import com.linecorp.armeria.common.stream.StreamMessageDuplicator;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n \n /**\n- * Allows subscribing to an {@link HttpRequest} multiple times by duplicating the stream.\n+ * A duplicator that duplicates a {@link HttpRequest} into one or more {@link HttpRequest}s,\n+ * which publish the same elements.\n  *\n  * <pre>{@code\n- * final HttpRequest originalReq = ...\n- * final HttpRequestDuplicator reqDuplicator = new HttpRequestDuplicator(originalReq);\n- *\n- * final HttpRequest dupReq1 = reqDuplicator.duplicateStream();\n- * final HttpRequest dupReq2 = reqDuplicator.duplicateStream(true); // the last stream\n+ * HttpRequest<String> httpRequest = ...\n+ * HttpRequestDuplicator<String> duplicator = httpRequest.toDuplicator();\n+ * // httpRequest.subscribe(...) will throw an exception. You cannot subscribe to httpRequest anymore.\n  *\n- * dupReq1.subscribe(new FooSubscriber() {\n- *     ...\n- *     // Do something according to the first few elements of the request.\n- * });\n+ * // Duplicate the stream as many as you want to subscribe.\n+ * HttpRequest<String> duplicatedHttpRequest1 = duplicator.duplicate();", "originalCommit": "1abb23d07613613c86c6d61b077699dcaf0c53e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "254527e5029fa0060b5269ed7408071cb03d3458", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java b/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\nindex 1826925c7..036376ffb 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\n\n@@ -26,13 +26,13 @@ import com.linecorp.armeria.common.stream.SubscriptionOption;\n  * which publish the same elements.\n  *\n  * <pre>{@code\n- * HttpRequest<String> httpRequest = ...\n- * HttpRequestDuplicator<String> duplicator = httpRequest.toDuplicator();\n+ * HttpRequest httpRequest = ...\n+ * HttpRequestDuplicator duplicator = httpRequest.toDuplicator();\n  * // httpRequest.subscribe(...) will throw an exception. You cannot subscribe to httpRequest anymore.\n  *\n  * // Duplicate the stream as many as you want to subscribe.\n- * HttpRequest<String> duplicatedHttpRequest1 = duplicator.duplicate();\n- * HttpRequest<String> duplicatedHttpRequest2 = duplicator.duplicate();\n+ * HttpRequest duplicatedHttpRequest1 = duplicator.duplicate();\n+ * HttpRequest duplicatedHttpRequest2 = duplicator.duplicate();\n  * duplicatedHttpRequest1.subscribe(...);\n  * duplicatedHttpRequest2.subscribe(...);\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3ODA5Mg==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368778092", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-01-21T01:40:17Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java", "diffHunk": "@@ -16,100 +16,54 @@\n \n package com.linecorp.armeria.common;\n \n-import static java.util.Objects.requireNonNull;\n+import org.reactivestreams.Subscriber;\n \n-import javax.annotation.Nullable;\n-\n-import com.google.common.base.MoreObjects;\n-\n-import com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator;\n-import com.linecorp.armeria.common.stream.StreamMessage;\n-import com.linecorp.armeria.common.stream.StreamMessageWrapper;\n-\n-import io.netty.util.concurrent.EventExecutor;\n+import com.linecorp.armeria.common.stream.StreamMessageDuplicator;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n \n /**\n- * Allows subscribing to an {@link HttpResponse} multiple times by duplicating the stream.\n+ * A duplicator that duplicates a {@link HttpResponse} into one or more {@link HttpResponse}s,\n+ * which publish the same elements.\n  *\n  * <pre>{@code\n- * > final HttpResponse originalRes = ...\n- * > final HttpResponseDuplicator resDuplicator = new HttpResponseDuplicator(originalRes);\n- * >\n- * > final HttpResponse dupRes1 = resDuplicator.duplicateStream();\n- * > final HttpResponse dupRes2 = resDuplicator.duplicateStream(true); // the last stream\n- * >\n- * > dupRes1.subscribe(new FooHeaderSubscriber() {\n- * >     @Override\n- * >     public void onNext(Object o) {\n- * >     ...\n- * >     // Do something according to the header's status.\n- * >     }\n- * > });\n- * >\n- * > dupRes2.aggregate().handle((aRes, cause) -> {\n- * >     // Do something with the message.\n- * > });\n+ * HttpResponse<String> httpResponse = ...", "originalCommit": "1abb23d07613613c86c6d61b077699dcaf0c53e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "254527e5029fa0060b5269ed7408071cb03d3458", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java b/core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java\nindex e774c7c25..51d1d16c4 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java\n\n@@ -26,13 +26,13 @@ import com.linecorp.armeria.common.stream.SubscriptionOption;\n  * which publish the same elements.\n  *\n  * <pre>{@code\n- * HttpResponse<String> httpResponse = ...\n- * HttpResponseDuplicator<String> duplicator = httpResponse.toDuplicator();\n+ * HttpResponse httpResponse = ...\n+ * HttpResponseDuplicator duplicator = httpResponse.toDuplicator();\n  * // httpResponse.subscribe(...) will throw an exception. You cannot subscribe to httpResponse anymore.\n  *\n  * // Duplicate the stream as many as you want to subscribe.\n- * HttpResponse<String> duplicatedHttpResponse1 = duplicator.duplicate();\n- * HttpResponse<String> duplicatedHttpResponse2 = duplicator.duplicate();\n+ * HttpResponse duplicatedHttpResponse1 = duplicator.duplicate();\n+ * HttpResponse duplicatedHttpResponse2 = duplicator.duplicate();\n  * duplicatedHttpResponse1.subscribe(...);\n  * duplicatedHttpResponse2.subscribe(...);\n  *\n"}}, {"oid": "254527e5029fa0060b5269ed7408071cb03d3458", "url": "https://github.com/line/armeria/commit/254527e5029fa0060b5269ed7408071cb03d3458", "message": "Address comments by @ikhoon", "committedDate": "2020-01-21T01:48:35Z", "type": "commit"}, {"oid": "2b19b126c65d8d719d4623577ec8fe35037c68ce", "url": "https://github.com/line/armeria/commit/2b19b126c65d8d719d4623577ec8fe35037c68ce", "message": "Use method reference operator", "committedDate": "2020-01-21T03:35:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368823316", "bodyText": "Do we need this? From what I understand from the javadocs, these two are equivalent\nduplicator.duplicate(true);\nduplicator.close();\nduplicator.duplicate();\nduplicator.close();", "author": "anuraaga", "createdAt": "2020-01-21T06:01:08Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageDuplicator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * A duplicator that duplicates a {@link StreamMessage} into one or more {@link StreamMessage}s,\n+ * which publish the same elements.\n+ *\n+ * <p>Only one subscriber can subscribe to a {@link StreamMessage}. If you want to subscribe to it\n+ * multiple times, use {@link StreamMessageDuplicator} which is returned by calling\n+ * {@link StreamMessage#toDuplicator()}.\n+ * <pre>{@code\n+ * StreamMessage<String> streamMessage = ...\n+ * StreamMessageDuplicator<String> duplicator = streamMessage.toDuplicator();\n+ * // streamMessage.subscribe(...) will throw an exception. You cannot subscribe to streamMessage anymore.\n+ *\n+ * // Duplicate the stream as many as you want to subscribe.\n+ * StreamMessage<String> duplicatedStreamMessage1 = duplicator.duplicate();\n+ * StreamMessage<String> duplicatedStreamMessage2 = duplicator.duplicate();\n+ * duplicatedStreamMessage1.subscribe(...);\n+ * duplicatedStreamMessage2.subscribe(...);\n+ *\n+ * duplicator.close(); // You should call close to clean up the resources.\n+ * }</pre>\n+ *\n+ * <p>If you subscribe to the {@linkplain #duplicate() duplicated stream message} with the\n+ * {@link SubscriptionOption#WITH_POOLED_OBJECTS}, the published elements can be shared across\n+ * {@link Subscriber}s. So do not manipulate the data unless you copy them.\n+ *\n+ * <p>To clean up the resources, you have to call one of {@linkplain #duplicate(boolean) duplicate(true)},\n+ * {@link #close()} or {@link #abort()}. Otherwise, memory leak might happen.</p>\n+ *\n+ * @param <T> the type of elements\n+ */\n+public interface StreamMessageDuplicator<T> {\n+\n+    /**\n+     * Returns a new {@link StreamMessage} that publishes the same elements with the {@link StreamMessage}\n+     * that this duplicator is created from.\n+     *\n+     * @param lastStream whether to prevent further duplication\n+     */\n+    StreamMessage<T> duplicate(boolean lastStream);", "originalCommit": "2b19b126c65d8d719d4623577ec8fe35037c68ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNjY1MQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368826651", "bodyText": "Yes, they are equivalent.\nActually, we don't have to call close in the first example.\nduplicator.duplicate(true).subscribe(...);\n// Equivalent to \nduplicator.duplicate().subscribe(...);\nduplicator.close();\nWe need the first code for the response in RetryingClient. We have to return the last HttpResonse to the user API, so when the last response is subscribed and complete, the resources are cleaned up. (We don't know when we need to call close() because we don't know the duplicate HttpResponse is subscribed by the user or not.)\nWe need the second one for the request. The duplicated HttpRequest is already subscribed by the HttpRequestSubscriber and we don't want to duplicate anymore so just call close().", "author": "minwoox", "createdAt": "2020-01-21T06:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNzY5NA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368827694", "bodyText": "But close javadoc says that duplicated streams are not cleaned up until they finish publication. So shouldn't it be fine to replace any instance of duplicate(true) with duplicate() and close(), even for RetryingClient response?\nThe class-level javadoc recommends always calling close to make sure resources are cleaned up, which makes sense, but in that case, if duplicate(true) is equivalent, I think we should remove it if it's redundant.", "author": "anuraaga", "createdAt": "2020-01-21T06:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgzMjA0OA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368832048", "bodyText": "duplicate(true) with duplicate() and close(), even for RetryingClient response?\n\nThe problem is this throws an exception:\nStreamMessage message = duplicator.duplicate();\nduplicator.close();\nmessage.subscribe(...) // This throw an exception because the duplicator is closed already.\nSo I have to change that a subscriber is able to subscribe to the duplicated stream which is created before duplicator.close() is called.\nLet me see what I can do. \ud83e\udd14", "author": "minwoox", "createdAt": "2020-01-21T06:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgzMzc2NQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368833765", "bodyText": "If it's possible to support that, I think that could be cleanest, and it seems doable - it's normal for a stream that's not subscribed or aborted to be leaked, so it's not necessary for close to be cleaning up unsubscribed streams.\nBut otherwise, now I understand the example better - so if we can't fix that behavior, the javadoc for close needs to be extended to mention that any streams that haven't been subscribed to will be cleaned up right away, which isn't the impression I got from the current javadoc.", "author": "anuraaga", "createdAt": "2020-01-21T06:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgzNTc1MA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r368835750", "bodyText": "If it's possible to support that, I think that could be cleanest, and it seems doable\n\nYes, it's much cleaner so I need to fix that. \ud83d\ude04 Thanks!", "author": "minwoox", "createdAt": "2020-01-21T06:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MjQ0OA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369352448", "bodyText": "@anuraaga Changed the logic as you suggested. PTAL \ud83d\ude47", "author": "minwoox", "createdAt": "2020-01-22T03:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NjIyNw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369356227", "bodyText": "I guess some users might want to release the duplicator automatically. How about extending SafeCloseable?\npublic interface HttpRequestDuplicator extends StreamMessageDuplicator<HttpObject>, SafeCloseable {\n    ...\n    @Override\n    void close();\n}", "author": "ikhoon", "createdAt": "2020-01-22T03:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1ODYwMw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369358603", "bodyText": "That's a good idea! Fixed. Thanks!", "author": "minwoox", "createdAt": "2020-01-22T03:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "dbc8ff61c75104e86f72e4fdf85363444825b227", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageDuplicator.java b/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageDuplicator.java\nindex 340565f1b..f1f7dd39d 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageDuplicator.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageDuplicator.java\n\n@@ -33,46 +33,41 @@ import org.reactivestreams.Subscriber;\n  * // Duplicate the stream as many as you want to subscribe.\n  * StreamMessage<String> duplicatedStreamMessage1 = duplicator.duplicate();\n  * StreamMessage<String> duplicatedStreamMessage2 = duplicator.duplicate();\n+ * duplicator.close(); // You should call close if you don't want to duplicate the streams anymore\n+ *                     // so that the resources are cleaned up after all subscriptions are done.\n+ *\n+ * // duplicator.duplicate(); will throw an exception. You cannot duplicate it anymore.\n+ *\n  * duplicatedStreamMessage1.subscribe(...);\n  * duplicatedStreamMessage2.subscribe(...);\n- *\n- * duplicator.close(); // You should call close to clean up the resources.\n  * }</pre>\n  *\n  * <p>If you subscribe to the {@linkplain #duplicate() duplicated stream message} with the\n  * {@link SubscriptionOption#WITH_POOLED_OBJECTS}, the published elements can be shared across\n  * {@link Subscriber}s. So do not manipulate the data unless you copy them.\n  *\n- * <p>To clean up the resources, you have to call one of {@linkplain #duplicate(boolean) duplicate(true)},\n- * {@link #close()} or {@link #abort()}. Otherwise, memory leak might happen.</p>\n+ * <p>To clean up the resources, you have to call {@link #close()} or {@link #abort()}.\n+ * Otherwise, memory leak might happen.</p>\n  *\n  * @param <T> the type of elements\n  */\n public interface StreamMessageDuplicator<T> {\n \n-    /**\n-     * Returns a new {@link StreamMessage} that publishes the same elements with the {@link StreamMessage}\n-     * that this duplicator is created from.\n-     *\n-     * @param lastStream whether to prevent further duplication\n-     */\n-    StreamMessage<T> duplicate(boolean lastStream);\n-\n     /**\n      * Returns a new {@link StreamMessage} that publishes the same elements with the {@link StreamMessage}\n      * that this duplicator is created from.\n      */\n-    default StreamMessage<T> duplicate() {\n-        return duplicate(false);\n-    }\n+    StreamMessage<T> duplicate();\n \n     /**\n      * Closes this duplicator and prevents it from further duplication. {@link #duplicate()} will raise\n      * an {@link IllegalStateException} after this method is invoked.\n-     * Note that the previously {@linkplain #duplicate() duplicated streams} will not be closed but will\n+     *\n+     * <p>Note that the previously {@linkplain #duplicate() duplicated streams} will not be closed but will\n      * continue publishing data until the original {@link StreamMessage} is closed.\n      * All the data published from the original {@link StreamMessage} are cleaned up when\n-     * all {@linkplain #duplicate() duplicated streams} are complete.\n+     * all {@linkplain #duplicate() duplicated streams} are complete. If you want to stop publishing and clean\n+     * up the resources immediately, call {@link #abort()}.\n      */\n     void close();\n \n"}}, {"oid": "dbc8ff61c75104e86f72e4fdf85363444825b227", "url": "https://github.com/line/armeria/commit/dbc8ff61c75104e86f72e4fdf85363444825b227", "message": "Address the comment by @anuraaga", "committedDate": "2020-01-22T03:07:07Z", "type": "commit"}, {"oid": "c6c0c0e12f258ef86e4de5705aeb7063e2003761", "url": "https://github.com/line/armeria/commit/c6c0c0e12f258ef86e4de5705aeb7063e2003761", "message": "Clean up", "committedDate": "2020-01-22T03:11:29Z", "type": "commit"}, {"oid": "5f83009bf8cbfb801e7fdac3b064de25f99f7697", "url": "https://github.com/line/armeria/commit/5f83009bf8cbfb801e7fdac3b064de25f99f7697", "message": "Clean up 2", "committedDate": "2020-01-22T03:22:32Z", "type": "commit"}, {"oid": "f402fb031e5973ab7ba0a4f6263e1b8c6d456201", "url": "https://github.com/line/armeria/commit/f402fb031e5973ab7ba0a4f6263e1b8c6d456201", "message": "extend SafeCloseable", "committedDate": "2020-01-22T03:46:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1ODI3Nw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369358277", "bodyText": "Is it ok not to filter the stream so these are published?", "author": "anuraaga", "createdAt": "2020-01-22T03:45:06Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpRequestDuplicator.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.common.stream.DefaultStreamMessageDuplicator;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessageWrapper;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultHttpRequestDuplicator\n+        extends DefaultStreamMessageDuplicator<HttpObject> implements HttpRequestDuplicator {\n+\n+    private final RequestHeaders headers;\n+\n+    DefaultHttpRequestDuplicator(HttpRequest req, EventExecutor executor, long maxRequestLength) {\n+        super(requireNonNull(req, \"req\"), obj -> {\n+            if (obj instanceof HttpData) {\n+                return ((HttpData) obj).length();\n+            }\n+            return 0;\n+        }, executor, maxRequestLength);\n+        headers = req.headers();\n+    }\n+\n+    @Override\n+    public HttpRequest duplicate() {\n+        return duplicate(headers);\n+    }\n+\n+    @Override\n+    public HttpRequest duplicate(RequestHeaders newHeaders) {\n+        requireNonNull(newHeaders, \"newHeaders\");\n+        return new DuplicatedHttpRequest(super.duplicate(), newHeaders);\n+    }\n+\n+    private class DuplicatedHttpRequest\n+            extends StreamMessageWrapper<HttpObject> implements HttpRequest {\n+\n+        private final RequestHeaders headers;\n+\n+        DuplicatedHttpRequest(StreamMessage<? extends HttpObject> delegate, RequestHeaders headers) {\n+            super(delegate);\n+            this.headers = headers;", "originalCommit": "5f83009bf8cbfb801e7fdac3b064de25f99f7697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM2MTk4NQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369361985", "bodyText": "The elements of the delegate are from the HttpRequest that this duplicator is created from by the contract. HttpRequest does not publish RequestHeaders, (HttpRequest.requestHeaders()) so I think this is OK. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-01-22T04:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1ODI3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1ODYzOA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369358638", "bodyText": "Related to above it's not clear what it means to have specified headers but publish same objects", "author": "anuraaga", "createdAt": "2020-01-22T03:47:10Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java", "diffHunk": "@@ -16,128 +16,51 @@\n \n package com.linecorp.armeria.common;\n \n-import static java.util.Objects.requireNonNull;\n+import org.reactivestreams.Subscriber;\n \n-import javax.annotation.Nullable;\n-\n-import com.google.common.base.MoreObjects;\n-\n-import com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator;\n-import com.linecorp.armeria.common.stream.StreamMessage;\n-import com.linecorp.armeria.common.stream.StreamMessageWrapper;\n-\n-import io.netty.util.concurrent.EventExecutor;\n+import com.linecorp.armeria.common.stream.StreamMessageDuplicator;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n \n /**\n- * Allows subscribing to an {@link HttpRequest} multiple times by duplicating the stream.\n+ * A duplicator that duplicates a {@link HttpRequest} into one or more {@link HttpRequest}s,\n+ * which publish the same elements.\n  *\n  * <pre>{@code\n- * final HttpRequest originalReq = ...\n- * final HttpRequestDuplicator reqDuplicator = new HttpRequestDuplicator(originalReq);\n+ * HttpRequest httpRequest = ...\n+ * HttpRequestDuplicator duplicator = httpRequest.toDuplicator();\n+ * // httpRequest.subscribe(...) will throw an exception. You cannot subscribe to httpRequest anymore.\n  *\n- * final HttpRequest dupReq1 = reqDuplicator.duplicateStream();\n- * final HttpRequest dupReq2 = reqDuplicator.duplicateStream(true); // the last stream\n+ * // Duplicate the stream as many as you want to subscribe.\n+ * HttpRequest duplicatedHttpRequest1 = duplicator.duplicate();\n+ * HttpRequest duplicatedHttpRequest2 = duplicator.duplicate();\n+ * duplicator.close(); // You should call close if you don't want to duplicate the requests anymore\n+ *                     // so that the resources are cleaned up after all subscriptions are done.\n  *\n- * dupReq1.subscribe(new FooSubscriber() {\n- *     ...\n- *     // Do something according to the first few elements of the request.\n- * });\n+ * // duplicator.duplicate(); will throw an exception. You cannot duplicate it anymore.\n  *\n- * final CompletableFuture<AggregatedHttpRequest> future2 = dupReq2.aggregate();\n- * future2.handle((message, cause) -> {\n- *     // Do something with message.\n- * }\n+ * duplicatedHttpRequest1.subscribe(...);\n+ * duplicatedHttpRequest2.subscribe(...);\n  * }</pre>\n+ *\n+ * <p>If you subscribe to the {@linkplain #duplicate() duplicated http request} with the\n+ * {@link SubscriptionOption#WITH_POOLED_OBJECTS}, the published elements can be shared across\n+ * {@link Subscriber}s. So do not manipulate the data unless you copy them.\n+ *\n+ * <p>To clean up the resources, you have to call {@link #close()} or {@link #abort()}.\n+ * Otherwise, memory leak might happen.</p>\n  */\n-public class HttpRequestDuplicator extends AbstractStreamMessageDuplicator<HttpObject, HttpRequest> {\n-\n-    private final RequestHeaders headers;\n-\n-    /**\n-     * Creates a new instance wrapping an {@link HttpRequest} and publishing to multiple subscribers.\n-     * The length of request is limited by default with the server-side parameter which is\n-     * {@link Flags#defaultMaxResponseLength()}. If you are at client-side, you need to use\n-     * {@link #HttpRequestDuplicator(HttpRequest, long)} and the {@code long} value should be greater than\n-     * the length of request or {@code 0} which disables the limit.\n-     * @param req the request that will publish data to subscribers\n-     */\n-    public HttpRequestDuplicator(HttpRequest req) {\n-        this(req, Flags.defaultMaxRequestLength());\n-    }\n-\n-    /**\n-     * Creates a new instance wrapping an {@link HttpRequest} and publishing to multiple subscribers.\n-     * @param req the request that will publish data to subscribers\n-     * @param maxSignalLength the maximum length of signals. {@code 0} disables the length limit\n-     */\n-    public HttpRequestDuplicator(HttpRequest req, long maxSignalLength) {\n-        this(req, maxSignalLength, null);\n-    }\n+public interface HttpRequestDuplicator extends StreamMessageDuplicator<HttpObject> {\n \n     /**\n-     * Creates a new instance wrapping an {@link HttpRequest} and publishing to multiple subscribers.\n-     * @param req the request that will publish data to subscribers\n-     * @param maxSignalLength the maximum length of signals. {@code 0} disables the length limit\n-     * @param executor the executor to use for upstream signals.\n+     * Returns a new {@link HttpRequest} that publishes the same elements with the {@link HttpRequest}\n+     * that this duplicator is created from.\n      */\n-    public HttpRequestDuplicator(HttpRequest req, long maxSignalLength, @Nullable EventExecutor executor) {\n-        super(requireNonNull(req, \"req\"), obj -> {\n-            if (obj instanceof HttpData) {\n-                return ((HttpData) obj).length();\n-            }\n-            return 0;\n-        }, executor, maxSignalLength);\n-        headers = req.headers();\n-    }\n-\n-    @Override\n-    public HttpRequest duplicateStream() {\n-        return duplicateStream(headers);\n-    }\n-\n     @Override\n-    public HttpRequest duplicateStream(boolean lastStream) {\n-        return duplicateStream(headers, lastStream);\n-    }\n-\n-    /**\n-     * Creates a new {@link HttpRequest} instance that publishes data from the {@code publisher} you create\n-     * this factory with.\n-     */\n-    public HttpRequest duplicateStream(RequestHeaders newHeaders) {\n-        return duplicateStream(newHeaders, false);\n-    }\n+    HttpRequest duplicate();\n \n     /**\n-     * Creates a new {@link HttpRequest} instance that publishes data from the {@code publisher} you create\n-     * this factory with. If you specify the {@code lastStream} as {@code true}, it will prevent further\n-     * creation of duplicate stream.\n+     * Returns a new {@link HttpRequest} with the specified {@link RequestHeaders} that publishes the same", "originalCommit": "5f83009bf8cbfb801e7fdac3b064de25f99f7697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM2MjM4MA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369362380", "bodyText": "How about this?\n* Returns a new {@link HttpRequest} with the specified {@link RequestHeaders} that publishes the same\n* {@link HttpData}s and {@linkplain HttpHeaders trailers} with the {@link HttpRequest} that\n* this duplicator is created from.", "author": "minwoox", "createdAt": "2020-01-22T04:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1ODYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MjIxMA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369372210", "bodyText": "Yeah I think that's clearer and nice, by the way with the -> as the", "author": "anuraaga", "createdAt": "2020-01-22T05:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1ODYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3NDg5Mw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369374893", "bodyText": "Oops Thank!", "author": "minwoox", "createdAt": "2020-01-22T05:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1ODYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "8a622fb23a7270c8d75c70e3130983a22e01410f", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java b/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\nindex 699d522a2..c58ff60dc 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java\n\n@@ -26,41 +26,40 @@ import com.linecorp.armeria.common.stream.SubscriptionOption;\n  * which publish the same elements.\n  *\n  * <pre>{@code\n- * HttpRequest httpRequest = ...\n- * HttpRequestDuplicator duplicator = httpRequest.toDuplicator();\n- * // httpRequest.subscribe(...) will throw an exception. You cannot subscribe to httpRequest anymore.\n+ * HttpRequest req = ...\n+ * try (HttpRequestDuplicator duplicator = req.toDuplicator()) {\n+ *     // req.subscribe(...) will throw an exception. You cannot subscribe to req anymore.\n  *\n- * // Duplicate the stream as many as you want to subscribe.\n- * HttpRequest duplicatedHttpRequest1 = duplicator.duplicate();\n- * HttpRequest duplicatedHttpRequest2 = duplicator.duplicate();\n- * duplicator.close(); // You should call close if you don't want to duplicate the requests anymore\n- *                     // so that the resources are cleaned up after all subscriptions are done.\n+ *     // Duplicate the request as many as you want to subscribe.\n+ *     HttpRequest duplicatedRequest = duplicator.duplicate();\n+ *     HttpRequest duplicatedRequest = duplicator.duplicate();\n  *\n- * // duplicator.duplicate(); will throw an exception. You cannot duplicate it anymore.\n- *\n- * duplicatedHttpRequest1.subscribe(...);\n- * duplicatedHttpRequest2.subscribe(...);\n+ *     duplicatedRequest.subscribe(...);\n+ *     duplicatedRequest.subscribe(...);\n+ * }\n  * }</pre>\n  *\n+ * <p>Use the {@code try-with-resources} block or call {@link #close()} manually to clean up the resources\n+ * after all subscriptions are done. If you want to stop publishing and clean up the resources immediately,\n+ * call {@link #abort()}. If you do none of these, memory leak might happen.</p>\n+ *\n  * <p>If you subscribe to the {@linkplain #duplicate() duplicated http request} with the\n  * {@link SubscriptionOption#WITH_POOLED_OBJECTS}, the published elements can be shared across\n  * {@link Subscriber}s. So do not manipulate the data unless you copy them.\n- *\n- * <p>To clean up the resources, you have to call {@link #close()} or {@link #abort()}.\n- * Otherwise, memory leak might happen.</p>\n  */\n public interface HttpRequestDuplicator extends StreamMessageDuplicator<HttpObject> {\n \n     /**\n-     * Returns a new {@link HttpRequest} that publishes the same elements with the {@link HttpRequest}\n-     * that this duplicator is created from.\n+     * Returns a new {@link HttpRequest} that publishes the same {@link HttpData}s and\n+     * {@linkplain HttpHeaders trailers} as the {@link HttpRequest} that this duplicator is created from.\n      */\n     @Override\n     HttpRequest duplicate();\n \n     /**\n      * Returns a new {@link HttpRequest} with the specified {@link RequestHeaders} that publishes the same\n-     * elements with the {@link HttpRequest} that this duplicator is created from.\n+     * {@link HttpData}s and {@linkplain HttpHeaders trailers} as the {@link HttpRequest} that\n+     * this duplicator is created from.\n      */\n     HttpRequest duplicate(RequestHeaders newHeaders);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MjU3MQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369372571", "bodyText": "Do we need the Default* to be public?", "author": "anuraaga", "createdAt": "2020-01-22T05:12:36Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java", "diffHunk": "@@ -44,129 +44,79 @@\n import com.google.common.base.MoreObjects.ToStringHelper;\n import com.spotify.futures.CompletableFutures;\n \n-import com.linecorp.armeria.common.CommonPools;\n-import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.ContentTooLargeException;\n import com.linecorp.armeria.common.util.EventLoopCheckingFuture;\n import com.linecorp.armeria.common.util.SafeCloseable;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufHolder;\n import io.netty.buffer.Unpooled;\n-import io.netty.channel.EventLoop;\n import io.netty.util.ReferenceCountUtil;\n import io.netty.util.concurrent.EventExecutor;\n import io.netty.util.concurrent.ImmediateEventExecutor;\n \n /**\n- * Allows subscribing to a {@link StreamMessage} multiple times by duplicating the stream.\n- *\n- * <p>Only one subscriber can subscribe other stream messages such as {@link DefaultStreamMessage},\n- * {@link DeferredStreamMessage}, etc.\n- * This factory is wrapping one of those {@link StreamMessage}s and spawns duplicated stream messages\n- * which are created using {@link AbstractStreamMessageDuplicator#duplicateStream()} and subscribed\n- * by subscribers one by one.</p>\n- *\n- * <p>The published elements can be shared across {@link Subscriber}s, if you subscribe with the\n- * {@link SubscriptionOption#WITH_POOLED_OBJECTS}, so do not manipulate the\n- * data unless you copy them.</p>\n- *\n- * <p>This factory has to be closed by {@link AbstractStreamMessageDuplicator#close()} when\n- * you do not need the contents anymore, otherwise memory leak might happen.</p>\n+ * A default duplicator.\n  *\n  * @param <T> the type of elements\n- * @param <U> the type of the upstream {@link StreamMessage} and duplicated {@link StreamMessage}s\n+ * @see StreamMessageDuplicator\n  */\n-public abstract class AbstractStreamMessageDuplicator<T, U extends StreamMessage<T>>\n-        implements SafeCloseable {\n+public class DefaultStreamMessageDuplicator<T> implements StreamMessageDuplicator<T>, SafeCloseable {", "originalCommit": "f402fb031e5973ab7ba0a4f6263e1b8c6d456201", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3NDQ0MQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369374441", "bodyText": "Yes, HttpRequestDuplicator and HttpResponseDuplicator are in different package.\nSo I was going to move this to the internal package but a lot of other files in the stream package have to come together. I will do it after this is merged. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-01-22T05:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3NTY1MQ==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369375651", "bodyText": "Thanks - sounds like you're signing yourself up for #2360 ? \ud83d\ude06", "author": "anuraaga", "createdAt": "2020-01-22T05:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3NzYzNw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369377637", "bodyText": "Well, I was actually just going to handle the classes under stream package.\ud83d\ude06\nIf you want I can take it. \ud83d\ude04 Or maybe we can divide the packages and each takes care of them. Either way is fine for me. \ud83d\ude0e", "author": "minwoox", "createdAt": "2020-01-22T05:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MjU3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MzgyOA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369373828", "bodyText": "The thread safety of this unsubscribed == 0 check isn't so obvious so I think we can add a comment. Maybe\n// Because the duplicator is closed, we know that unsubscribed will not be incremented anymore and are guaranteed that the last unsubscribed downstream will run this cleanup logic.", "author": "anuraaga", "createdAt": "2020-01-22T05:18:56Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java", "diffHunk": "@@ -388,8 +331,8 @@ private void doUnsubscribe(DownstreamSubscription<T> subscription, @Nullable Thr\n         }\n \n         private void doCleanupIfLastSubscription() {\n-            if (isLastDownstreamAdded() && downstreamSubscriptions.isEmpty()) {\n-                state = State.CLOSED;\n+            if (isClosed() && duplicator.unsubscribed == 0 && downstreamSubscriptions.isEmpty()) {", "originalCommit": "f402fb031e5973ab7ba0a4f6263e1b8c6d456201", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3NTA4MA==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369375080", "bodyText": "That's a good suggestion. Added. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-01-22T05:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MzgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3Nzk1Nw==", "url": "https://github.com/line/armeria/pull/2410#discussion_r369377957", "bodyText": "Anyway, I am working on #2189 and it will be done today or by tomorrow. (I hope \ud83d\ude06 )", "author": "minwoox", "createdAt": "2020-01-22T05:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MzgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "8a622fb23a7270c8d75c70e3130983a22e01410f", "chunk": "diff --git a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java\nindex 312838a6e..3422832b0 100644\n--- a/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java\n+++ b/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java\n\n@@ -332,6 +332,8 @@ public class DefaultStreamMessageDuplicator<T> implements StreamMessageDuplicato\n \n         private void doCleanupIfLastSubscription() {\n             if (isClosed() && duplicator.unsubscribed == 0 && downstreamSubscriptions.isEmpty()) {\n+                // Because the duplicator is closed, we know that unsubscribed will not be incremented\n+                // anymore and are guaranteed that the last unsubscribed downstream will run this cleanup logic.\n                 state = State.ABORTED;\n                 doCancelUpstreamSubscription();\n                 signals.clear();\n"}}, {"oid": "8a622fb23a7270c8d75c70e3130983a22e01410f", "url": "https://github.com/line/armeria/commit/8a622fb23a7270c8d75c70e3130983a22e01410f", "message": "Rephrase and add comments", "committedDate": "2020-01-22T05:28:41Z", "type": "commit"}]}