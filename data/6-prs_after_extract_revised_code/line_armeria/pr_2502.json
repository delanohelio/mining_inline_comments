{"pr_number": 2502, "pr_title": "Add not to bind on the specific port(s) from Spring Boot (Actuator)", "pr_createdAt": "2020-02-17T16:21:44Z", "pr_url": "https://github.com/line/armeria/pull/2502", "timeline": [{"oid": "b510a67d8ccc3c1ddd071bd84c3bd09412187eb7", "url": "https://github.com/line/armeria/commit/b510a67d8ccc3c1ddd071bd84c3bd09412187eb7", "message": "Add not to bind on the specific port(s) from spring boot (actuator)", "committedDate": "2020-02-17T16:06:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r381829649", "bodyText": "Question: Is it possible to use management.server.port instead?", "author": "trustin", "createdAt": "2020-02-20T07:46:38Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "originalCommit": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MjUzMw==", "url": "https://github.com/line/armeria/pull/2502#discussion_r381892533", "bodyText": "It is not possible right now. However, It can possibly change. There seems to be no implementation problem.", "author": "heowc", "createdAt": "2020-02-20T09:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4Nzk2NQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r382587965", "bodyText": "@trustin\nQuestion: Do you want to remove the armeria.security.ports value instead of the optional value?", "author": "heowc", "createdAt": "2020-02-21T13:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxMzA0OA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r382913048", "bodyText": "I tried management.server.port and it doesn't bind to that value. Do you want this property to be an additional binding?", "author": "heowc", "createdAt": "2020-02-22T13:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNzgwOA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r384937808", "bodyText": "Question: Do you want to remove the armeria.security.ports value instead of the optional value?\n\nYes, we might want to add it later but not until there's a user request.\n\nI tried management.server.port and it doesn't bind to that value. Do you want this property to be an additional binding?\n\nYes, please.", "author": "trustin", "createdAt": "2020-02-27T06:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTk1NA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r385081954", "bodyText": "Thanks for the reply. \ud83d\ude04\nWe can apply security by checking management.server.port when using Actuator. However, we're obscure which ports to secure internal/docs, internal/healthcheck, and internal/metrics.  \ud83d\ude33", "author": "heowc", "createdAt": "2020-02-27T11:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNzc0Ng==", "url": "https://github.com/line/armeria/pull/2502#discussion_r388317746", "bodyText": "That's a good question. Perhaps we could default to all services under /internal/ and make it configurable?", "author": "trustin", "createdAt": "2020-03-05T14:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NzgxMQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r426257811", "bodyText": "I've configured the default port(8001) if armeria.security.enabled is true, and have it protect all services under /internal/ on other ports.", "author": "heowc", "createdAt": "2020-05-17T12:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1ODE3NQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r426258175", "bodyText": "Question: I specified the default port, but when the user specified management.server.port I didn't remove the default port. Should I avoid specifying a default port?", "author": "heowc", "createdAt": "2020-05-17T12:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f52afeb4af4631d626f8d45cd9742a37922425d6", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java\nindex 88cc85de1a..27b6b986f2 100644\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java\n+++ b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java\n\n@@ -61,7 +61,7 @@ import io.micrometer.prometheus.PrometheusMeterRegistry;\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n- *   security:\n+ *   secure:\n  *     enabled: true\n  *     ports: 8080\n  * }</pre>\n"}}, {"oid": "c65134ed5beb53e8fcc4b2003f278f72dfb8546f", "url": "https://github.com/line/armeria/commit/c65134ed5beb53e8fcc4b2003f278f72dfb8546f", "message": "Fix checkstyle", "committedDate": "2020-02-18T15:15:42Z", "type": "forcePushed"}, {"oid": "b510a67d8ccc3c1ddd071bd84c3bd09412187eb7", "url": "https://github.com/line/armeria/commit/b510a67d8ccc3c1ddd071bd84c3bd09412187eb7", "message": "Add not to bind on the specific port(s) from spring boot (actuator)", "committedDate": "2020-02-17T16:06:34Z", "type": "forcePushed"}, {"oid": "b510a67d8ccc3c1ddd071bd84c3bd09412187eb7", "url": "https://github.com/line/armeria/commit/b510a67d8ccc3c1ddd071bd84c3bd09412187eb7", "message": "Add not to bind on the specific port(s) from spring boot (actuator)", "committedDate": "2020-02-17T16:06:34Z", "type": "forcePushed"}, {"oid": "f52afeb4af4631d626f8d45cd9742a37922425d6", "url": "https://github.com/line/armeria/commit/f52afeb4af4631d626f8d45cd9742a37922425d6", "message": "Merge branch 'master' into secure_spring_actuator", "committedDate": "2020-02-25T15:49:19Z", "type": "commit"}, {"oid": "da2dfa1e235ed9dc5e8e9b9b218df77b79c9fa60", "url": "https://github.com/line/armeria/commit/da2dfa1e235ed9dc5e8e9b9b218df77b79c9fa60", "message": "Add not to bind on the specific port(s) from spring boot (actuator)", "committedDate": "2020-02-25T15:56:34Z", "type": "commit"}, {"oid": "ada5459a098550ed4a0d62b967d2fc840c9e176c", "url": "https://github.com/line/armeria/commit/ada5459a098550ed4a0d62b967d2fc840c9e176c", "message": "Add `SecurityInternalService`", "committedDate": "2020-02-26T12:55:04Z", "type": "commit"}, {"oid": "e1016fd0761a0ecf2d76823cc633a490bce2e68f", "url": "https://github.com/line/armeria/commit/e1016fd0761a0ecf2d76823cc633a490bce2e68f", "message": "Replace all tests in 'spring-boot-auticonfigure' with JUnit5", "committedDate": "2020-02-27T14:38:55Z", "type": "commit"}, {"oid": "29eb21893762db3f293d2642026a165d6f11492b", "url": "https://github.com/line/armeria/commit/29eb21893762db3f293d2642026a165d6f11492b", "message": "Fix comment", "committedDate": "2020-02-27T15:05:02Z", "type": "commit"}, {"oid": "e1016fd0761a0ecf2d76823cc633a490bce2e68f", "url": "https://github.com/line/armeria/commit/e1016fd0761a0ecf2d76823cc633a490bce2e68f", "message": "Replace all tests in 'spring-boot-auticonfigure' with JUnit5", "committedDate": "2020-02-27T14:38:55Z", "type": "forcePushed"}, {"oid": "50a5fc186534da8c06d6bce46a7d432683ead09b", "url": "https://github.com/line/armeria/commit/50a5fc186534da8c06d6bce46a7d432683ead09b", "message": "Rename to `InternalSecurityService`", "committedDate": "2020-03-01T07:01:23Z", "type": "commit"}, {"oid": "b59aa6a36dddbabdca506c34f83eaa1f46ab0416", "url": "https://github.com/line/armeria/commit/b59aa6a36dddbabdca506c34f83eaa1f46ab0416", "message": "Revert \"Replace all tests in 'spring-boot-auticonfigure' with JUnit5\"\n\nThis reverts commit e1016fd0", "committedDate": "2020-03-05T16:27:15Z", "type": "commit"}, {"oid": "aab20619405b047df0dd0fe20007c372d2b11802", "url": "https://github.com/line/armeria/commit/aab20619405b047df0dd0fe20007c372d2b11802", "message": "Replace to JUnit4", "committedDate": "2020-03-05T16:41:49Z", "type": "commit"}, {"oid": "b32d88e3443e42f86eea83635af66504a90397ff", "url": "https://github.com/line/armeria/commit/b32d88e3443e42f86eea83635af66504a90397ff", "message": "Merge branch 'master' into secure_spring_actuator", "committedDate": "2020-05-09T07:36:26Z", "type": "commit"}, {"oid": "5045b8e71dd491f9c2b0de77ea3e2ecf75db65d6", "url": "https://github.com/line/armeria/commit/5045b8e71dd491f9c2b0de77ea3e2ecf75db65d6", "message": "Merge remote-tracking branch 'armeria/master' into secure_spring_actuator\n\n# Conflicts:\n#\tspring/boot-webflux-autoconfigure/build.gradle", "committedDate": "2020-05-12T14:16:39Z", "type": "commit"}, {"oid": "975cfc89a1576996fdedc14d98c5bf59299253e3", "url": "https://github.com/line/armeria/commit/975cfc89a1576996fdedc14d98c5bf59299253e3", "message": "WIP", "committedDate": "2020-05-12T15:15:27Z", "type": "commit"}, {"oid": "e9594a93eb3cb4edebb692d097f4b47513b26b7d", "url": "https://github.com/line/armeria/commit/e9594a93eb3cb4edebb692d097f4b47513b26b7d", "message": "Merge remote-tracking branch 'armeria/master' into secure_spring_actuator", "committedDate": "2020-05-13T15:13:42Z", "type": "commit"}, {"oid": "bce8cb36b4ea68b7bc666a35d7e3f3789b0c8402", "url": "https://github.com/line/armeria/commit/bce8cb36b4ea68b7bc666a35d7e3f3789b0c8402", "message": "Support `@LocalManagementPort` / Fix test", "committedDate": "2020-05-13T15:17:45Z", "type": "commit"}, {"oid": "1ddcf35cb374de1abf4e3d36b460d9547bb66dcc", "url": "https://github.com/line/armeria/commit/1ddcf35cb374de1abf4e3d36b460d9547bb66dcc", "message": "Fix method order", "committedDate": "2020-05-13T15:19:52Z", "type": "commit"}, {"oid": "12b46d4d06afcbb32b772f521cf358a93358ae23", "url": "https://github.com/line/armeria/commit/12b46d4d06afcbb32b772f521cf358a93358ae23", "message": "Merge remote-tracking branch 'armeria/master' into secure_spring_actuator", "committedDate": "2020-05-17T07:32:07Z", "type": "commit"}, {"oid": "324064d471497bf251c1a691b9c33372747f2620", "url": "https://github.com/line/armeria/commit/324064d471497bf251c1a691b9c33372747f2620", "message": "Add internal port(8001) & test code", "committedDate": "2020-05-17T12:38:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDM1OQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r429024359", "bodyText": "I fetched Spring Actuator related fields to solve what I mentioned. I am not sure if this is a good way. what do you think?", "author": "heowc", "createdAt": "2020-05-22T03:28:39Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)\n+                                                                .setProtocol(SessionProtocol.HTTP);\n+\n+    @Bean\n+    ArmeriaServerConfigurator secureArmeriaServerConfig(ArmeriaSettings settings,\n+                                                        ConfigurableEnvironment environment,\n+                                                        @Value(\"${management.server.port:#{null}}\")\n+                                                        Integer actuatorPort,\n+                                                        @Value(\"${management.endpoints.web.base-path:#{null}}\")\n+                                                        String actuatorBasePath) {", "originalCommit": "37c34a20111065f1debb4827a82c6c4392738495", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODEyNw==", "url": "https://github.com/line/armeria/pull/2502#discussion_r429028127", "bodyText": "I think it's OK. If there's any issue with this, we can fix it later.", "author": "trustin", "createdAt": "2020-05-22T03:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bbc8fdaacc3e0df2b41b52f52385a82c71fb92e", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java\ndeleted file mode 100644\nindex 4ffec79f00..0000000000\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java\n+++ /dev/null\n\n@@ -1,122 +0,0 @@\n-/*\n- * Copyright 2020 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.spring;\n-\n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n-\n-import java.net.InetSocketAddress;\n-import java.util.Optional;\n-\n-import javax.annotation.Nullable;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.ConfigurableEnvironment;\n-import org.springframework.core.env.PropertySource;\n-import org.springframework.util.SocketUtils;\n-\n-import com.google.common.base.Strings;\n-import com.google.common.collect.ImmutableList;\n-\n-import com.linecorp.armeria.common.HttpResponse;\n-import com.linecorp.armeria.common.SessionProtocol;\n-import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n-import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n-\n-/**\n- * Spring Boot {@link Configuration} that provides Armeria integration.\n- */\n-@Configuration\n-@EnableConfigurationProperties(ArmeriaSettings.class)\n-public class ArmeriaSecurityAutoConfiguration {\n-\n-    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)\n-                                                                .setProtocol(SessionProtocol.HTTP);\n-\n-    @Bean\n-    ArmeriaServerConfigurator secureArmeriaServerConfig(ArmeriaSettings settings,\n-                                                        ConfigurableEnvironment environment,\n-                                                        @Value(\"${management.server.port:#{null}}\")\n-                                                        Integer actuatorPort,\n-                                                        @Value(\"${management.endpoints.web.base-path:#{null}}\")\n-                                                        String actuatorBasePath) {\n-        return builder -> {\n-            Port port = obtainManagementServerPort(actuatorPort);\n-            if (port != null) {\n-                configurePorts(builder, ImmutableList.of(port));\n-                addLocalManagementPortPropertyAlias(environment, port);\n-            } else {\n-                port = DEFAULT_SECURITY_PORT;\n-            }\n-            final ArmeriaSettings.Security security = settings.getSecurity();\n-            if (security != null && security.isEnabled()) {\n-                configureSecureDecorator(builder, port, actuatorBasePath, settings);\n-            }\n-        };\n-    }\n-\n-    @Nullable\n-    private static Port obtainManagementServerPort(@Nullable Integer port) {\n-        return Optional.ofNullable(port)\n-                       .filter(it -> it.equals(0))\n-                       .map(it -> SocketUtils.findAvailableTcpPort())\n-                       .map(it -> new Port().setPort(it).setProtocol(SessionProtocol.HTTP))\n-                       .orElse(null);\n-    }\n-\n-    private static void addLocalManagementPortPropertyAlias(ConfigurableEnvironment environment, Port port) {\n-        environment.getPropertySources().addLast(new PropertySource<Object>(\"Management Server\") {\n-\n-            @Override\n-            public Object getProperty(String name) {\n-                if (\"local.management.port\".equals(name)) {\n-                    return port.getPort();\n-                }\n-                return null;\n-            }\n-        });\n-    }\n-\n-    private static void configureSecureDecorator(ServerBuilder sb, Port port,\n-                                                 @Nullable String basePath, ArmeriaSettings settings) {\n-        final DecoratingServiceBindingBuilder builder = sb.routeDecorator();\n-        if (settings.isEnableMetrics() && !Strings.isNullOrEmpty(settings.getMetricsPath())) {\n-            builder.path(settings.getMetricsPath());\n-        }\n-        if (!Strings.isNullOrEmpty(settings.getHealthCheckPath())) {\n-            builder.path(settings.getHealthCheckPath());\n-        }\n-        if (!Strings.isNullOrEmpty(settings.getDocsPath())) {\n-            builder.path(settings.getDocsPath());\n-        }\n-        if (!Strings.isNullOrEmpty(basePath)) {\n-            builder.path(basePath)\n-                   .pathPrefix(basePath);\n-        }\n-        builder.build((delegate, ctx, req) -> {\n-            final InetSocketAddress laddr = ctx.localAddress();\n-            if (port.getPort() == laddr.getPort()) {\n-                return delegate.serve(ctx, req);\n-            } else {\n-                return HttpResponse.of(404);\n-            }\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODk4Nw==", "url": "https://github.com/line/armeria/pull/2502#discussion_r429028987", "bodyText": "Question: Should we expose this option or always enable it when a different management port was specified?", "author": "trustin", "createdAt": "2020-05-22T03:51:50Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,8 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true", "originalCommit": "37c34a20111065f1debb4827a82c6c4392738495", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0Nzg0OQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r429047849", "bodyText": "I have modified some code. I think I can divide it into the following cases.\n\narmeria.security.enabled = false, -> nothing (not secure)\narmeria.security.enabled = true, -> port = 8001 (secure)\narmeria.security.enabled = false, management.server.port = 1111 -> port = 1111 (not secure)\narmeria.security.enabled = true, management.server.port = 1111 -> port = 1111 (secure)", "author": "heowc", "createdAt": "2020-05-22T05:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4OTk5OA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r433089998", "bodyText": "I removed it.", "author": "heowc", "createdAt": "2020-06-01T07:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9bbc8fdaacc3e0df2b41b52f52385a82c71fb92e", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java\nindex 0cb81cefc9..5530d6bd64 100644\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java\n+++ b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java\n\n@@ -61,8 +61,6 @@ import io.micrometer.prometheus.PrometheusMeterRegistry;\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n- *   security:\n- *     enabled: true\n  * }</pre>\n  * TODO(ide) Adds virtualhost settings\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r429069865", "bodyText": "Question: Where is the 8001 from? Spring uses it?", "author": "minwoox", "createdAt": "2020-05-22T06:42:17Z", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)", "originalCommit": "ab928676f4ca45d2e96b94fb4ed01fbfa6da6006", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MjQ2OA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r429072468", "bodyText": "I think we shouldn't use the default port.\nIf a user forgets to disable the security, an attacker might use the default port to get the information of the server. What do you think?", "author": "minwoox", "createdAt": "2020-05-22T06:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNTE1Ng==", "url": "https://github.com/line/armeria/pull/2502#discussion_r429225156", "bodyText": "I agree. I understood here to mean adding a default port.", "author": "heowc", "createdAt": "2020-05-22T12:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjQ3MA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r429226470", "bodyText": "If so, should this feature be enabled only by adding Spring Actuator?", "author": "heowc", "createdAt": "2020-05-22T12:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MDc2Ng==", "url": "https://github.com/line/armeria/pull/2502#discussion_r433090766", "bodyText": "I removed it. :)", "author": "heowc", "createdAt": "2020-06-01T07:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bbc8fdaacc3e0df2b41b52f52385a82c71fb92e", "chunk": "diff --git a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java b/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java\ndeleted file mode 100644\nindex 67c2b92085..0000000000\n--- a/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java\n+++ /dev/null\n\n@@ -1,127 +0,0 @@\n-/*\n- * Copyright 2020 LINE Corporation\n- *\n- * LINE Corporation licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.linecorp.armeria.spring;\n-\n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n-\n-import java.net.InetSocketAddress;\n-import java.util.Optional;\n-\n-import javax.annotation.Nullable;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.ConfigurableEnvironment;\n-import org.springframework.core.env.PropertySource;\n-import org.springframework.util.SocketUtils;\n-\n-import com.google.common.base.Strings;\n-import com.google.common.collect.ImmutableList;\n-\n-import com.linecorp.armeria.common.HttpResponse;\n-import com.linecorp.armeria.common.SessionProtocol;\n-import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n-import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n-\n-/**\n- * Spring Boot {@link Configuration} that provides Armeria integration.\n- */\n-@Configuration\n-@EnableConfigurationProperties(ArmeriaSettings.class)\n-public class ArmeriaSecurityAutoConfiguration {\n-\n-    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)\n-                                                                .setProtocol(SessionProtocol.HTTP);\n-\n-    @Bean\n-    ArmeriaServerConfigurator secureArmeriaServerConfig(ArmeriaSettings settings,\n-                                                        ConfigurableEnvironment environment,\n-                                                        @Value(\"${management.server.port:#{null}}\")\n-                                                        Integer actuatorPort,\n-                                                        @Value(\"${management.endpoints.web.base-path:#{null}}\")\n-                                                        String actuatorBasePath) {\n-        return builder -> {\n-            boolean configuredPort = false;\n-            Port port = obtainManagementServerPort(actuatorPort);\n-            if (port != null) {\n-                configurePorts(builder, ImmutableList.of(port));\n-                addLocalManagementPortPropertyAlias(environment, port);\n-                configuredPort = true;\n-            } else {\n-                port = DEFAULT_SECURITY_PORT;\n-            }\n-            final ArmeriaSettings.Security security = settings.getSecurity();\n-            if (security != null && security.isEnabled()) {\n-                if (!configuredPort) {\n-                    configurePorts(builder, ImmutableList.of(port));\n-                }\n-                configureSecureDecorator(builder, port, actuatorBasePath, settings);\n-            }\n-        };\n-    }\n-\n-    @Nullable\n-    private static Port obtainManagementServerPort(@Nullable Integer port) {\n-        return Optional.ofNullable(port)\n-                       .filter(it -> it.equals(0))\n-                       .map(it -> SocketUtils.findAvailableTcpPort())\n-                       .map(it -> new Port().setPort(it).setProtocol(SessionProtocol.HTTP))\n-                       .orElse(null);\n-    }\n-\n-    private static void addLocalManagementPortPropertyAlias(ConfigurableEnvironment environment, Port port) {\n-        environment.getPropertySources().addLast(new PropertySource<Object>(\"Management Server\") {\n-\n-            @Override\n-            public Object getProperty(String name) {\n-                if (\"local.management.port\".equals(name)) {\n-                    return port.getPort();\n-                }\n-                return null;\n-            }\n-        });\n-    }\n-\n-    private static void configureSecureDecorator(ServerBuilder sb, Port port,\n-                                                 @Nullable String basePath, ArmeriaSettings settings) {\n-        final DecoratingServiceBindingBuilder builder = sb.routeDecorator();\n-        if (settings.isEnableMetrics() && !Strings.isNullOrEmpty(settings.getMetricsPath())) {\n-            builder.path(settings.getMetricsPath());\n-        }\n-        if (!Strings.isNullOrEmpty(settings.getHealthCheckPath())) {\n-            builder.path(settings.getHealthCheckPath());\n-        }\n-        if (!Strings.isNullOrEmpty(settings.getDocsPath())) {\n-            builder.path(settings.getDocsPath());\n-        }\n-        if (!Strings.isNullOrEmpty(basePath)) {\n-            builder.path(basePath)\n-                   .pathPrefix(basePath);\n-        }\n-        builder.build((delegate, ctx, req) -> {\n-            final InetSocketAddress laddr = ctx.localAddress();\n-            if (port.getPort() == laddr.getPort()) {\n-                return delegate.serve(ctx, req);\n-            } else {\n-                return HttpResponse.of(404);\n-            }\n-        });\n-    }\n-}\n"}}, {"oid": "324064d471497bf251c1a691b9c33372747f2620", "url": "https://github.com/line/armeria/commit/324064d471497bf251c1a691b9c33372747f2620", "message": "Add internal port(8001) & test code", "committedDate": "2020-05-17T12:38:22Z", "type": "forcePushed"}, {"oid": "9bbc8fdaacc3e0df2b41b52f52385a82c71fb92e", "url": "https://github.com/line/armeria/commit/9bbc8fdaacc3e0df2b41b52f52385a82c71fb92e", "message": "Remove property (`armeria.security.enabled`) & binding default port(8001)", "committedDate": "2020-05-30T07:57:49Z", "type": "commit"}, {"oid": "2ce24215966f0a05b5fd5a5429ad6c2e952b6baf", "url": "https://github.com/line/armeria/commit/2ce24215966f0a05b5fd5a5429ad6c2e952b6baf", "message": "Merge remote-tracking branch 'armeria/master' into secure_spring_actuator\n\n# Conflicts:\n#\tspring/boot-actuator-autoconfigure/build.gradle", "committedDate": "2020-05-30T07:59:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzE3Mg==", "url": "https://github.com/line/armeria/pull/2502#discussion_r433083172", "bodyText": "nit: Could just use int?", "author": "trustin", "createdAt": "2020-06-01T07:31:03Z", "path": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java", "diffHunk": "@@ -305,4 +288,52 @@ public void testOptions() {\n             assertThat(res.status()).isNotEqualTo(HttpStatus.METHOD_NOT_ALLOWED);\n         }\n     }\n+\n+    @Nested\n+    @SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)\n+    @ActiveProfiles({ \"local\", \"secureTest\" })\n+    @DirtiesContext\n+    @EnableAutoConfiguration\n+    @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)\n+    @Timeout(10)\n+    class ArmeriaSpringActuatorAutoConfigurationSecureTest {\n+\n+        @SpringBootApplication\n+        class TestConfiguration {}\n+\n+        @LocalManagementPort\n+        private Integer actuatorPort;\n+        @Inject\n+        private Server server;\n+        @Inject\n+        private ArmeriaSettings settings;\n+\n+        @Test\n+        void normal() throws Exception {\n+            server.activePorts().values().stream()\n+                  .map(p -> p.localAddress().getPort())\n+                  .forEach(port -> {\n+                      final Integer statusCode = actuatorPort.equals(port) ? 200 : 404;", "originalCommit": "2ce24215966f0a05b5fd5a5429ad6c2e952b6baf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MTgwMA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r433091800", "bodyText": "Fixed cb9cf10", "author": "heowc", "createdAt": "2020-06-01T07:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cb9cf10ff7900e0b399e285f378a1ecd02944cfb", "chunk": "diff --git a/spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java b/spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java\nindex 2edca2a241..7a25e726ce 100644\n--- a/spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java\n+++ b/spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java\n\n@@ -313,7 +313,7 @@ class ArmeriaSpringActuatorAutoConfigurationTest {\n             server.activePorts().values().stream()\n                   .map(p -> p.localAddress().getPort())\n                   .forEach(port -> {\n-                      final Integer statusCode = actuatorPort.equals(port) ? 200 : 404;\n+                      final int statusCode = actuatorPort.equals(port) ? 200 : 404;\n                       assertStatus(port, \"/actuator\", statusCode);\n                       assertStatus(port, \"/actuator/health\", statusCode);\n                       assertStatus(port, \"/actuator/loggers/\" + TEST_LOGGER_NAME, statusCode);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzI1MQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r433083251", "bodyText": "Ditto - int should work?", "author": "trustin", "createdAt": "2020-06-01T07:31:18Z", "path": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java", "diffHunk": "@@ -305,4 +288,52 @@ public void testOptions() {\n             assertThat(res.status()).isNotEqualTo(HttpStatus.METHOD_NOT_ALLOWED);\n         }\n     }\n+\n+    @Nested\n+    @SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)\n+    @ActiveProfiles({ \"local\", \"secureTest\" })\n+    @DirtiesContext\n+    @EnableAutoConfiguration\n+    @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)\n+    @Timeout(10)\n+    class ArmeriaSpringActuatorAutoConfigurationSecureTest {\n+\n+        @SpringBootApplication\n+        class TestConfiguration {}\n+\n+        @LocalManagementPort\n+        private Integer actuatorPort;\n+        @Inject\n+        private Server server;\n+        @Inject\n+        private ArmeriaSettings settings;\n+\n+        @Test\n+        void normal() throws Exception {\n+            server.activePorts().values().stream()\n+                  .map(p -> p.localAddress().getPort())\n+                  .forEach(port -> {\n+                      final Integer statusCode = actuatorPort.equals(port) ? 200 : 404;\n+                      assertStatus(port, \"/actuator\", statusCode);\n+                      assertStatus(port, \"/actuator/health\", statusCode);\n+                      assertStatus(port, \"/actuator/loggers/\" + TEST_LOGGER_NAME, statusCode);\n+                      assertStatus(port, \"/actuator/prometheus\", statusCode);\n+                      assertStatus(port, settings.getDocsPath(), statusCode);\n+                      assertStatus(port, settings.getHealthCheckPath(), statusCode);\n+                      assertStatus(port, settings.getMetricsPath(), statusCode);\n+                  });\n+        }\n+    }\n+\n+    private static void assertStatus(Integer port, String url, Integer statusCode) {", "originalCommit": "2ce24215966f0a05b5fd5a5429ad6c2e952b6baf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MTgzOA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r433091838", "bodyText": "Fixed cb9cf10", "author": "heowc", "createdAt": "2020-06-01T07:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cb9cf10ff7900e0b399e285f378a1ecd02944cfb", "chunk": "diff --git a/spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java b/spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java\nindex 2edca2a241..7a25e726ce 100644\n--- a/spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java\n+++ b/spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java\n\n@@ -313,7 +313,7 @@ class ArmeriaSpringActuatorAutoConfigurationTest {\n             server.activePorts().values().stream()\n                   .map(p -> p.localAddress().getPort())\n                   .forEach(port -> {\n-                      final Integer statusCode = actuatorPort.equals(port) ? 200 : 404;\n+                      final int statusCode = actuatorPort.equals(port) ? 200 : 404;\n                       assertStatus(port, \"/actuator\", statusCode);\n                       assertStatus(port, \"/actuator/health\", statusCode);\n                       assertStatus(port, \"/actuator/loggers/\" + TEST_LOGGER_NAME, statusCode);\n"}}, {"oid": "cb9cf10ff7900e0b399e285f378a1ecd02944cfb", "url": "https://github.com/line/armeria/commit/cb9cf10ff7900e0b399e285f378a1ecd02944cfb", "message": "Address comments by @trustin", "committedDate": "2020-06-01T07:52:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4OTIxOA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r433589218", "bodyText": "What happens if the management port number is not 0?", "author": "minwoox", "createdAt": "2020-06-02T02:37:43Z", "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "diffHunk": "@@ -196,6 +215,70 @@ ArmeriaServerConfigurator actuatorServerConfigurator(\n         };\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(\"management.server.port\")\n+    ArmeriaServerConfigurator secureActuatorServerConfigurator(WebEndpointProperties properties,\n+                                                               ManagementServerProperties serverProperties,\n+                                                               ConfigurableEnvironment environment,\n+                                                               ArmeriaSettings armeriaSettings) {\n+        return sb -> {\n+            final Port port = obtainManagementServerPort(serverProperties.getPort());\n+            if (port != null) {\n+                configurePorts(sb, ImmutableList.of(port));\n+                addLocalManagementPortPropertyAlias(environment, port);\n+                configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+            }\n+        };\n+    }\n+\n+    @Nullable\n+    private static Port obtainManagementServerPort(@Nullable Integer port) {\n+        return Optional.ofNullable(port)\n+                       .filter(it -> it.equals(0))", "originalCommit": "cb9cf10ff7900e0b399e285f378a1ecd02944cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NzY3NA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r433867674", "bodyText": "Oops... I fixed this. \ud83d\ude28", "author": "heowc", "createdAt": "2020-06-02T13:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4OTIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "3a0811d0ae406b71fcc3b744bee2a66560899a35", "chunk": "diff --git a/spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java b/spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java\nindex 1db1b56b8f..dab3f84657 100644\n--- a/spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java\n+++ b/spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java\n\n@@ -223,21 +224,18 @@ public class ArmeriaSpringActuatorAutoConfiguration {\n                                                                ArmeriaSettings armeriaSettings) {\n         return sb -> {\n             final Port port = obtainManagementServerPort(serverProperties.getPort());\n-            if (port != null) {\n-                configurePorts(sb, ImmutableList.of(port));\n-                addLocalManagementPortPropertyAlias(environment, port);\n-                configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n-            }\n+            configurePorts(sb, ImmutableList.of(port));\n+            addLocalManagementPortPropertyAlias(environment, port);\n+            configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n         };\n     }\n \n-    @Nullable\n-    private static Port obtainManagementServerPort(@Nullable Integer port) {\n-        return Optional.ofNullable(port)\n-                       .filter(it -> it.equals(0))\n-                       .map(it -> SocketUtils.findAvailableTcpPort())\n-                       .map(it -> new Port().setPort(port).setProtocol(SessionProtocol.HTTP))\n-                       .orElse(null);\n+    private static Port obtainManagementServerPort(Integer port) {\n+        int actualPort = requireNonNull(port, \"port\");\n+        if (port.equals(0)) {\n+            actualPort = SocketUtils.findAvailableTcpPort();\n+        }\n+        return new Port().setPort(actualPort).setProtocol(SessionProtocol.HTTP);\n     }\n \n     private static void addLocalManagementPortPropertyAlias(ConfigurableEnvironment environment, Port port) {\n"}}, {"oid": "3a0811d0ae406b71fcc3b744bee2a66560899a35", "url": "https://github.com/line/armeria/commit/3a0811d0ae406b71fcc3b744bee2a66560899a35", "message": "Fix `obtainManagementServerPort(...)`", "committedDate": "2020-06-02T13:17:53Z", "type": "commit"}, {"oid": "d5cbb56447a04d81d89b8b74e194f7fc3b9e6048", "url": "https://github.com/line/armeria/commit/d5cbb56447a04d81d89b8b74e194f7fc3b9e6048", "message": "Checkstyle", "committedDate": "2020-06-02T13:39:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDM4OA==", "url": "https://github.com/line/armeria/pull/2502#discussion_r434444388", "bodyText": "Question: Don't we need to support HTTPS? The upstream seems to support TLS/SSL configuration.\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-management-specific-ssl\nIf that is worthy to handle, I think you can do it in the following PR. \ud83d\ude09", "author": "ikhoon", "createdAt": "2020-06-03T09:46:23Z", "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "diffHunk": "@@ -196,6 +215,67 @@ ArmeriaServerConfigurator actuatorServerConfigurator(\n         };\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(\"management.server.port\")\n+    ArmeriaServerConfigurator secureActuatorServerConfigurator(WebEndpointProperties properties,\n+                                                               ManagementServerProperties serverProperties,\n+                                                               ConfigurableEnvironment environment,\n+                                                               ArmeriaSettings armeriaSettings) {\n+        return sb -> {\n+            final Port port = obtainManagementServerPort(serverProperties.getPort());\n+            configurePorts(sb, ImmutableList.of(port));\n+            addLocalManagementPortPropertyAlias(environment, port);\n+            configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+        };\n+    }\n+\n+    private static Port obtainManagementServerPort(Integer port) {\n+        int actualPort = requireNonNull(port, \"port\");\n+        if (actualPort == 0) {\n+            actualPort = SocketUtils.findAvailableTcpPort();\n+        }\n+        return new Port().setPort(actualPort).setProtocol(SessionProtocol.HTTP);", "originalCommit": "d5cbb56447a04d81d89b8b74e194f7fc3b9e6048", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTU4Mg==", "url": "https://github.com/line/armeria/pull/2502#discussion_r434451582", "bodyText": "Can I set up another certificate on a specific port in Armeria? I think this is a bit vague.\nAnyway, I felt the need to deal with this. WDYT?", "author": "heowc", "createdAt": "2020-06-03T09:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1NTk5Mg==", "url": "https://github.com/line/armeria/pull/2502#discussion_r434555992", "bodyText": "Can I set up another certificate on a specific port in Armeria? I think this is a bit vague.\n\nI thought that the actuator shares the Server's certification.\nWe cannot perfectly handle the feature, now. Please ignore this.\n\nAnyway, I felt the need to deal with this. WDYT?\n\nThat sounds good. \ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-06-03T13:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMjk4NQ==", "url": "https://github.com/line/armeria/pull/2502#discussion_r434602985", "bodyText": "Thanks :)", "author": "heowc", "createdAt": "2020-06-03T14:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "254b46346bc86919339eca910f4da9f37347c779", "chunk": "diff --git a/spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java b/spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java\nindex 73a3b02785..935d93934a 100644\n--- a/spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java\n+++ b/spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java\n\n@@ -223,14 +223,20 @@ public class ArmeriaSpringActuatorAutoConfiguration {\n                                                                ArmeriaSettings armeriaSettings) {\n         return sb -> {\n             final Port port = obtainManagementServerPort(serverProperties.getPort());\n-            configurePorts(sb, ImmutableList.of(port));\n-            addLocalManagementPortPropertyAlias(environment, port);\n-            configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+            if (port != null) {\n+                configurePorts(sb, ImmutableList.of(port));\n+                addLocalManagementPortPropertyAlias(environment, port);\n+                configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+            }\n         };\n     }\n \n+    @Nullable\n     private static Port obtainManagementServerPort(Integer port) {\n         int actualPort = requireNonNull(port, \"port\");\n+        if (actualPort < 0) {\n+            return null;\n+        }\n         if (actualPort == 0) {\n             actualPort = SocketUtils.findAvailableTcpPort();\n         }\n"}}, {"oid": "254b46346bc86919339eca910f4da9f37347c779", "url": "https://github.com/line/armeria/commit/254b46346bc86919339eca910f4da9f37347c779", "message": "Disable if port is less than 0", "committedDate": "2020-06-03T14:15:25Z", "type": "commit"}]}