{"pr_number": 2749, "pr_title": "Support Curator Service Discovery and Spring Cloud ZooKeeper", "pr_createdAt": "2020-05-29T04:48:46Z", "pr_url": "https://github.com/line/armeria/pull/2749", "timeline": [{"oid": "f8320de70d0abc81b811003a147d0b1b9a658488", "url": "https://github.com/line/armeria/commit/f8320de70d0abc81b811003a147d0b1b9a658488", "message": "Support Curator-X-Discovery and Spring Cloud ZooKeeper\nMotivation:\nRelated #2673.\nIt will be nice if we support Curator-X-Discovery and Spring Cloud Zookeeper.\n\nModifications:\n- Add `InstanceSpec` and `DiscoverySpec` to specify whether use default format or Curator compatible format.\n- (Breaking)\n  - `NodeValueCodec` is gone.\n    - You now have to use `InstanceSpec` and `DiscoverySpec` to encode and decode.\n    - `ZooKeeperEndpointGroupBuilder.codec(...)` and `ZooKeeperUpatingListenerBuilder.codec(...)` are gone as well.\n\nResult:\n- You can now use Armeria client and server with Curator-X-Discovery.", "committedDate": "2020-05-29T04:47:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTM3Mw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432271373", "bodyText": "? super ServiceInstance<?> ?", "author": "trustin", "createdAt": "2020-05-29T05:59:56Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXDiscoverySpecBuilder.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.x.discovery.ServiceInstance;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+/**\n+ * Builds a {@link DiscoverySpec} for\n+ * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+ */\n+public final class CuratorXDiscoverySpecBuilder {\n+\n+    private final String serviceName;\n+    @Nullable\n+    private String instanceId;\n+    @Nullable\n+    private Boolean useSsl;\n+    @Nullable\n+    private Function<ServiceInstance<?>, Endpoint> converter;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    CuratorXDiscoverySpecBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the specified instance ID. If this is set, the {@link ZooKeeperEndpointGroup} will only connect to\n+     * the instance.\n+     */\n+    public CuratorXDiscoverySpecBuilder instanceId(String instanceId) {\n+        checkState(converter == null, \"converter() and instanceId() are mutually exclusive.\");\n+        this.instanceId = requireNonNull(instanceId, \"instanceId\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to connect an {@link Endpoint} using {@code sslPort} of {@link ServiceInstance}.\n+     */\n+    public CuratorXDiscoverySpecBuilder useSsl(boolean useSsl) {\n+        checkState(converter == null, \"converter() and useSsl() are mutually exclusive.\");\n+        this.useSsl = useSsl;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified converter to convert a {@link ServiceInstance} into an {@link Endpoint}.\n+     * If you don't want to connect to the service, you can simply return {@code null} in the converter.\n+     */\n+    public CuratorXDiscoverySpecBuilder converter(Function<ServiceInstance<?>, Endpoint> converter) {", "originalCommit": "f8320de70d0abc81b811003a147d0b1b9a658488", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MDY2NA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432280664", "bodyText": "Thanks fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-05-29T06:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "457f5916055aacc1a18e637038c10b6ec3b085e0", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXDiscoverySpecBuilder.java b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXDiscoverySpecBuilder.java\nindex aa6753785..55f4fb499 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXDiscoverySpecBuilder.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXDiscoverySpecBuilder.java\n\n@@ -82,6 +82,9 @@ public final class CuratorXDiscoverySpecBuilder {\n             return converter;\n         }\n         return instance -> {\n+            if (!instance.isEnabled()) {\n+                return null;\n+            }\n             if (instanceId != null && !instanceId.equals(instance.getId())) {\n                 return null;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTc3Mw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432271773", "bodyText": "default or legacy?", "author": "trustin", "createdAt": "2020-05-29T06:01:12Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/DiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.InstanceSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see InstanceSpec\n+ */\n+public interface DiscoverySpec {\n+\n+    /**\n+     * Returns the default {@link DiscoverySpec} implementation which assumes a zNode value is\n+     * a comma-separated string. Each element of the zNode value represents an {@link Endpoint} whose format is\n+     * {@code <host>[:<port_number>[:weight]]}, such as:\n+     * <ul>\n+     *   <li>{@code \"foo.com\"} - default port number, default weight (1000)</li>\n+     *   <li>{@code \"bar.com:8080} - port number 8080, default weight (1000)</li>\n+     *   <li>{@code \"10.0.2.15:0:500} - default port number, weight 500</li>\n+     *   <li>{@code \"192.168.1.2:8443:700} - port number 8443, weight 700</li>\n+     * </ul>\n+     * Note that the port number must be specified when you want to specify the weight.\n+     */\n+    static DiscoverySpec ofDefault() {", "originalCommit": "f8320de70d0abc81b811003a147d0b1b9a658488", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NDc1Ng==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432284756", "bodyText": "Let's use legacy because I think we should guide people to use curator x which is a de-facto standard. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-05-29T06:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "86424e54527ab4645dd8e5dc11357f20fbfade11", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/DiscoverySpec.java b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/DiscoverySpec.java\nindex cc98e3e69..fe92bcb2f 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/DiscoverySpec.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/DiscoverySpec.java\n\n@@ -18,32 +18,16 @@ package com.linecorp.armeria.client.zookeeper;\n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.server.zookeeper.InstanceSpec;\n+import com.linecorp.armeria.server.zookeeper.RegistrationSpec;\n \n /**\n  * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n  * and decoding the registered instances into {@link Endpoint}s.\n  *\n- * @see InstanceSpec\n+ * @see RegistrationSpec\n  */\n public interface DiscoverySpec {\n \n-    /**\n-     * Returns the default {@link DiscoverySpec} implementation which assumes a zNode value is\n-     * a comma-separated string. Each element of the zNode value represents an {@link Endpoint} whose format is\n-     * {@code <host>[:<port_number>[:weight]]}, such as:\n-     * <ul>\n-     *   <li>{@code \"foo.com\"} - default port number, default weight (1000)</li>\n-     *   <li>{@code \"bar.com:8080} - port number 8080, default weight (1000)</li>\n-     *   <li>{@code \"10.0.2.15:0:500} - default port number, weight 500</li>\n-     *   <li>{@code \"192.168.1.2:8443:700} - port number 8443, weight 700</li>\n-     * </ul>\n-     * Note that the port number must be specified when you want to specify the weight.\n-     */\n-    static DiscoverySpec ofDefault() {\n-        return DefaultDiscoverySpec.INSTANCE;\n-    }\n-\n     /**\n      * Returns a {@link DiscoverySpec} that is compatible with\n      * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MjI0Mw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432272243", "bodyText": "If we chose to use legacy instead of default, we're gonna have to always require a DiscoverySpec.", "author": "trustin", "createdAt": "2020-05-29T06:02:41Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java", "diffHunk": "@@ -54,81 +55,145 @@\n      * Returns a new {@link ZooKeeperEndpointGroup} that retrieves the {@link Endpoint} list from\n      * the ZNode at the specified connection string and path. A new ZooKeeper client will be created internally.\n      * The ZooKeeper client will be destroyed when the returned {@link ZooKeeperEndpointGroup} is closed.\n+     *\n+     * @param zkConnectionStr the ZooKeeper connection string\n+     * @param zNodePath the ZooKeeper node to register\n      */\n     public static ZooKeeperEndpointGroup of(String zkConnectionStr, String zNodePath) {", "originalCommit": "f8320de70d0abc81b811003a147d0b1b9a658488", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86424e54527ab4645dd8e5dc11357f20fbfade11", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java\nindex ee177bc90..4399c4421 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java\n\n@@ -51,18 +51,6 @@ public final class ZooKeeperEndpointGroup extends DynamicEndpointGroup {\n     private static final ThreadFactory closeCuratorFrameworkThreadFactory =\n             new DefaultThreadFactory(\"armeria-close-CuratorFramework\");\n \n-    /**\n-     * Returns a new {@link ZooKeeperEndpointGroup} that retrieves the {@link Endpoint} list from\n-     * the ZNode at the specified connection string and path. A new ZooKeeper client will be created internally.\n-     * The ZooKeeper client will be destroyed when the returned {@link ZooKeeperEndpointGroup} is closed.\n-     *\n-     * @param zkConnectionStr the ZooKeeper connection string\n-     * @param zNodePath the ZooKeeper node to register\n-     */\n-    public static ZooKeeperEndpointGroup of(String zkConnectionStr, String zNodePath) {\n-        return builder(zkConnectionStr, zNodePath).build();\n-    }\n-\n     /**\n      * Returns a new {@link ZooKeeperEndpointGroup} that retrieves the {@link Endpoint} list from\n      * the ZNode at the specified connection string and path. A new ZooKeeper client will be created internally.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MjY0Mw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432272643", "bodyText": "ssl or tls?", "author": "trustin", "createdAt": "2020-05-29T06:03:58Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/CuratorXInstanceSpecBuilder.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.UUID;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceType;\n+import org.apache.curator.x.discovery.UriSpec;\n+\n+/**\n+ * Builds an {@link InstanceSpec} for\n+ * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>..\n+ */\n+public final class CuratorXInstanceSpecBuilder {\n+\n+    private final String serviceName;\n+    @Nullable\n+    private String serviceId;\n+    @Nullable\n+    private String serviceAddress;\n+    @Nullable\n+    private Integer port;\n+    @Nullable\n+    private Integer sslPort;\n+    private ServiceType serviceType = ServiceType.DYNAMIC;\n+    @Nullable\n+    private Object payload;\n+\n+    private UriSpec uriSpec = new UriSpec(\"{scheme}://{address}:{port}\");\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    CuratorXInstanceSpecBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the service address.\n+     */\n+    public CuratorXInstanceSpecBuilder serviceAddress(String serviceAddress) {\n+        this.serviceAddress = requireNonNull(serviceAddress, \"serviceAddress\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the port.\n+     */\n+    public CuratorXInstanceSpecBuilder port(int port) {\n+        checkArgument(port > 0, \"port: %s (expected: > 0)\", port);\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the SSL port.\n+     */\n+    public CuratorXInstanceSpecBuilder sslPort(int sslPort) {", "originalCommit": "f8320de70d0abc81b811003a147d0b1b9a658488", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MjA1NA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432282054", "bodyText": "The word ssl is used by the Curator so I followed it.\nIsn't it better to use the word what they are using?\nFor the Eureka we used secure port. \ud83e\udd14", "author": "minwoox", "createdAt": "2020-05-29T06:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MjY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMzgwNQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433013805", "bodyText": "sslPort SGTM", "author": "trustin", "createdAt": "2020-06-01T02:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MjY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "86424e54527ab4645dd8e5dc11357f20fbfade11", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/CuratorXInstanceSpecBuilder.java b/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/CuratorXRegistrationSpecBuilder.java\nsimilarity index 78%\nrename from zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/CuratorXInstanceSpecBuilder.java\nrename to zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/CuratorXRegistrationSpecBuilder.java\nindex 937a9d607..284576872 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/CuratorXInstanceSpecBuilder.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/CuratorXRegistrationSpecBuilder.java\n\n@@ -27,10 +27,10 @@ import org.apache.curator.x.discovery.ServiceType;\n import org.apache.curator.x.discovery.UriSpec;\n \n /**\n- * Builds an {@link InstanceSpec} for\n+ * Builds an {@link RegistrationSpec} for\n  * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>..\n  */\n-public final class CuratorXInstanceSpecBuilder {\n+public final class CuratorXRegistrationSpecBuilder {\n \n     private final String serviceName;\n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NzY3MA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432277670", "bodyText": "Should we log this or not?", "author": "trustin", "createdAt": "2020-05-29T06:20:54Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java", "diffHunk": "@@ -62,57 +133,122 @@ public static ZooKeeperUpdatingListenerBuilder builder(CuratorFramework client,\n      * @param zNodePath the ZooKeeper node to register\n      */\n     public static ZooKeeperUpdatingListenerBuilder builder(String zkConnectionStr, String zNodePath) {\n-        requireNonNull(zkConnectionStr, \"zkConnectionStr\");\n-        requireNonNull(zNodePath, \"zNodePath\");\n-        return new ZooKeeperUpdatingListenerBuilder(zkConnectionStr, zNodePath);\n+        return new ZooKeeperUpdatingListenerBuilder(zkConnectionStr, zNodePath, null);\n     }\n \n     /**\n-     * Creates a ZooKeeper server listener, which registers server into ZooKeeper.\n-     *\n-     * <p>If you need a fully customized {@link ZooKeeperUpdatingListener} instance, use\n-     * {@link #builder(String, String)} instead.\n+     * Returns a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param zkConnectionStr ZooKeeper connection string\n-     * @param zNodePath       ZooKeeper node path(under which this server will be registered)\n+     * @param zkConnectionStr the ZooKeeper connection string\n+     * @param zNodePath the ZooKeeper node to register\n+     * @param spec the {@link InstanceSpec} to encode and register the {@link Server}\n      */\n-    public static ZooKeeperUpdatingListener of(String zkConnectionStr, String zNodePath) {\n-        return builder(zkConnectionStr, zNodePath).build();\n+    public static ZooKeeperUpdatingListenerBuilder builder(String zkConnectionStr, String zNodePath,\n+                                                           InstanceSpec spec) {\n+        return new ZooKeeperUpdatingListenerBuilder(zkConnectionStr, zNodePath, requireNonNull(spec, \"spec\"));\n     }\n \n     private final CuratorFramework client;\n     private final String zNodePath;\n-    private final NodeValueCodec nodeValueCodec;\n     @Nullable\n-    private Endpoint endpoint;\n+    private final InstanceSpec spec;\n     private final boolean closeClientOnStop;\n \n-    ZooKeeperUpdatingListener(CuratorFramework client, String zNodePath, NodeValueCodec nodeValueCodec,\n-                              @Nullable Endpoint endpoint, boolean closeClientOnStop) {\n+    ZooKeeperUpdatingListener(CuratorFramework client, String zNodePath, @Nullable InstanceSpec spec,\n+                              boolean closeClientOnStop) {\n         this.client = requireNonNull(client, \"client\");\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n-        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n-        this.endpoint = endpoint;\n+        this.spec = spec;\n         this.closeClientOnStop = closeClientOnStop;\n     }\n \n     @Override\n     public void serverStarted(Server server) throws Exception {\n-        if (endpoint == null) {\n+        final InstanceSpec instanceSpec;\n+        if (spec != null) {\n+            instanceSpec = fillAndCreateNewInstanceSpec(spec, server);\n+        } else {\n             final ServerPort activePort = server.activePort();\n             assert activePort != null;\n             final InetAddress inetAddress = SystemInfo.defaultNonLoopbackIpV4Address();\n             final String ipAddressOrHostname = inetAddress != null ? inetAddress.getHostAddress()\n                                                                    : server.defaultHostname();\n-            endpoint = Endpoint.of(ipAddressOrHostname, activePort.localAddress().getPort());\n+            instanceSpec = InstanceSpec.ofEndpoint(\n+                    Endpoint.of(ipAddressOrHostname, activePort.localAddress().getPort()));\n         }\n         client.start();\n-        final String key = endpoint.host() + '_' + endpoint.port();\n-        final byte[] value = nodeValueCodec.encode(endpoint);\n         client.create()\n               .creatingParentsIfNeeded()\n               .withMode(CreateMode.EPHEMERAL)\n-              .forPath(zNodePath + '/' + key, value);\n+              .forPath(zNodePath + instanceSpec.pathForRegistration(), instanceSpec.encodedInstance());\n+    }\n+\n+    private static InstanceSpec fillAndCreateNewInstanceSpec(InstanceSpec spec, Server server) {\n+        if (spec instanceof EndpointInstanceSpec) {\n+            final Endpoint endpoint = ((EndpointInstanceSpec) spec).endpoint();\n+            if (endpoint.hasPort() && validatePort(server, endpoint.port(), null)) {\n+                return spec;\n+            }\n+            final ServerPort serverPort = server.activePort();\n+            assert serverPort != null;\n+            return InstanceSpec.ofEndpoint(endpoint.withPort(serverPort.localAddress().getPort()));\n+        } else if (spec instanceof CuratorXInstanceSpec) {\n+            final ServiceInstance<?> serviceInstance = ((CuratorXInstanceSpec) spec).serviceInstance();\n+            return fillAndCreateNewInstanceSpec(serviceInstance, server);\n+        } else {\n+            return spec;\n+        }\n+    }\n+\n+    private static InstanceSpec fillAndCreateNewInstanceSpec(\n+            ServiceInstance<?> serviceInstance, Server server) {\n+        final CuratorXInstanceSpecBuilder builder =\n+                InstanceSpec.curatorXInstanceBuilder(serviceInstance.getName());\n+        builder.serviceId(serviceInstance.getId());\n+        final String address;\n+        if (serviceInstance.getAddress() != null) {\n+            address = serviceInstance.getAddress();\n+        } else {\n+            final Inet4Address inet4Address = SystemInfo.defaultNonLoopbackIpV4Address();\n+            address = inet4Address != null ? inet4Address.getHostAddress() : server.defaultHostname();\n+        }\n+        builder.serviceAddress(address);\n+        final int port = port(server, SessionProtocol.HTTP, serviceInstance.getPort());\n+        if (port > 0) {\n+            builder.port(port);\n+        }\n+        final int sslPort = port(server, SessionProtocol.HTTPS, serviceInstance.getSslPort());\n+        if (sslPort > 0) {\n+            builder.sslPort(sslPort);\n+        }\n+        builder.serviceType(serviceInstance.getServiceType());\n+        final Object payload = serviceInstance.getPayload();\n+        if (payload != null) {\n+            builder.payload(payload);\n+        }\n+        return builder.build();\n+    }\n+\n+    private static int port(Server server, SessionProtocol protocol, @Nullable Integer port) {\n+        if (port != null) {\n+            if (validatePort(server, port, protocol)) {\n+                return port;\n+            }\n+        }\n+        final ServerPort serverPort = server.activePort(protocol);\n+        return serverPort != null ? serverPort.localAddress().getPort() : -1;\n+    }\n+\n+    private static boolean validatePort(Server server, int port, @Nullable SessionProtocol protocol) {\n+        for (ServerPort serverPort : server.activePorts().values()) {\n+            if ((protocol == null || serverPort.hasProtocol(protocol)) &&\n+                serverPort.localAddress().getPort() == port) {\n+                return true;\n+            }\n+        }\n+        logger.warn(\"The port number: {} (expected one of activePorts: {})\",\n+                    port, server.activePorts());", "originalCommit": "f8320de70d0abc81b811003a147d0b1b9a658488", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MjQyMA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r432282420", "bodyText": "The user specified a certain port but the server does not open that port.\nSo I think I should warn.\nPerhaps, it's better to rephrase the sentence?", "author": "minwoox", "createdAt": "2020-05-29T06:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NzY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMzc3Ng==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433013776", "bodyText": "Rephrasing SGTM", "author": "trustin", "createdAt": "2020-06-01T02:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NzY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "86424e54527ab4645dd8e5dc11357f20fbfade11", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java b/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java\nindex 6dd841f51..cf19b6fc9 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java\n\n@@ -131,30 +95,19 @@ public final class ZooKeeperUpdatingListener extends ServerListenerAdapter {\n      *\n      * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n+     * @param spec the {@link RegistrationSpec} to encode and register the {@link Server}\n      */\n-    public static ZooKeeperUpdatingListenerBuilder builder(String zkConnectionStr, String zNodePath) {\n-        return new ZooKeeperUpdatingListenerBuilder(zkConnectionStr, zNodePath, null);\n-    }\n-\n-    /**\n-     * Returns a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n-     *\n-     * @param zkConnectionStr the ZooKeeper connection string\n-     * @param zNodePath the ZooKeeper node to register\n-     * @param spec the {@link InstanceSpec} to encode and register the {@link Server}\n-     */\n-    public static ZooKeeperUpdatingListenerBuilder builder(String zkConnectionStr, String zNodePath,\n-                                                           InstanceSpec spec) {\n+    public static ZooKeeperUpdatingListenerBuilder builder(\n+            String zkConnectionStr, String zNodePath, RegistrationSpec spec) {\n         return new ZooKeeperUpdatingListenerBuilder(zkConnectionStr, zNodePath, requireNonNull(spec, \"spec\"));\n     }\n \n     private final CuratorFramework client;\n     private final String zNodePath;\n-    @Nullable\n-    private final InstanceSpec spec;\n+    private final RegistrationSpec spec;\n     private final boolean closeClientOnStop;\n \n-    ZooKeeperUpdatingListener(CuratorFramework client, String zNodePath, @Nullable InstanceSpec spec,\n+    ZooKeeperUpdatingListener(CuratorFramework client, String zNodePath, RegistrationSpec spec,\n                               boolean closeClientOnStop) {\n         this.client = requireNonNull(client, \"client\");\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n"}}, {"oid": "457f5916055aacc1a18e637038c10b6ec3b085e0", "url": "https://github.com/line/armeria/commit/457f5916055aacc1a18e637038c10b6ec3b085e0", "message": "Add tests", "committedDate": "2020-05-29T06:24:00Z", "type": "commit"}, {"oid": "65be57e85dd7ab6a55895b4f4551ae5d56ac79b7", "url": "https://github.com/line/armeria/commit/65be57e85dd7ab6a55895b4f4551ae5d56ac79b7", "message": "Remove ZookeeperInstance", "committedDate": "2020-05-29T06:26:18Z", "type": "commit"}, {"oid": "86424e54527ab4645dd8e5dc11357f20fbfade11", "url": "https://github.com/line/armeria/commit/86424e54527ab4645dd8e5dc11357f20fbfade11", "message": "Address comments by @trustin", "committedDate": "2020-05-29T07:05:11Z", "type": "commit"}, {"oid": "fc322c56da4a7e47b27e4f0029c74ca4e550692d", "url": "https://github.com/line/armeria/commit/fc322c56da4a7e47b27e4f0029c74ca4e550692d", "message": "Rename", "committedDate": "2020-05-29T07:07:48Z", "type": "commit"}, {"oid": "0f71d5c8d647163d416e00409eb20e5ff955879b", "url": "https://github.com/line/armeria/commit/0f71d5c8d647163d416e00409eb20e5ff955879b", "message": "Fix test", "committedDate": "2020-05-29T07:13:00Z", "type": "commit"}, {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5", "url": "https://github.com/line/armeria/commit/fd01c88b8f3e9b8c19a236716533c0829368fbc5", "message": "Rename classes and methods", "committedDate": "2020-06-01T00:57:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNDcyOQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433014729", "bodyText": "How about just CuratorDiscoverySpec(Builder)? Because:\n\nX seems to be an acronym for 'extra' or 'extension' (e.g. curator-x-async)\nCurator implies Zookeeper anyway.", "author": "trustin", "createdAt": "2020-06-01T02:09:53Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXZookeeperDiscoverySpecBuilder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.x.discovery.ServiceInstance;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+/**\n+ * Builds a {@link ZookeeperDiscoverySpec} for\n+ * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+ */\n+public final class CuratorXZookeeperDiscoverySpecBuilder {", "originalCommit": "fd01c88b8f3e9b8c19a236716533c0829368fbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTg5Mw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433021893", "bodyText": "Sounds good. Let me rename them. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-01T02:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNDcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXZookeeperDiscoverySpecBuilder.java b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorDiscoverySpecBuilder.java\nsimilarity index 88%\nrename from zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXZookeeperDiscoverySpecBuilder.java\nrename to zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorDiscoverySpecBuilder.java\nindex 01dd847aa..d542a8a7b 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXZookeeperDiscoverySpecBuilder.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorDiscoverySpecBuilder.java\n\n@@ -28,9 +28,9 @@ import com.linecorp.armeria.client.Endpoint;\n \n /**\n  * Builds a {@link ZookeeperDiscoverySpec} for\n- * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+ * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n  */\n-public final class CuratorXZookeeperDiscoverySpecBuilder {\n+public final class CuratorDiscoverySpecBuilder {\n \n     private final String serviceName;\n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTY1OQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433015659", "bodyText": "Curator Service Discovery?", "author": "trustin", "createdAt": "2020-06-01T02:16:12Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.", "originalCommit": "fd01c88b8f3e9b8c19a236716533c0829368fbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMjIxMA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433022210", "bodyText": "Thanks!", "author": "minwoox", "createdAt": "2020-06-01T02:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\nindex 12800e2d0..adffce1c6 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\n\n@@ -30,21 +30,21 @@ public interface ZookeeperDiscoverySpec {\n \n     /**\n      * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n-     * This is also, compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n+     * This is also compatible with\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      */\n-    static ZookeeperDiscoverySpec ofCuratorX(String serviceName) {\n-        return builderForCuratorX(serviceName).build();\n+    static ZookeeperDiscoverySpec curator(String serviceName) {\n+        return builderForCurator(serviceName).build();\n     }\n \n     /**\n-     * Returns a new {@link CuratorXZookeeperDiscoverySpecBuilder}. The specification is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a> and\n+     * Returns a new {@link CuratorDiscoverySpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      */\n-    static CuratorXZookeeperDiscoverySpecBuilder builderForCuratorX(String serviceName) {\n-        return new CuratorXZookeeperDiscoverySpecBuilder(serviceName);\n+    static CuratorDiscoverySpecBuilder builderForCurator(String serviceName) {\n+        return new CuratorDiscoverySpecBuilder(serviceName);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTcyNg==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433015726", "bodyText": "The comma between 'also' and 'compatible' could be removed.", "author": "trustin", "createdAt": "2020-06-01T02:16:40Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+     * This is also, compatible with", "originalCommit": "fd01c88b8f3e9b8c19a236716533c0829368fbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\nindex 12800e2d0..adffce1c6 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\n\n@@ -30,21 +30,21 @@ public interface ZookeeperDiscoverySpec {\n \n     /**\n      * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n-     * This is also, compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n+     * This is also compatible with\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      */\n-    static ZookeeperDiscoverySpec ofCuratorX(String serviceName) {\n-        return builderForCuratorX(serviceName).build();\n+    static ZookeeperDiscoverySpec curator(String serviceName) {\n+        return builderForCurator(serviceName).build();\n     }\n \n     /**\n-     * Returns a new {@link CuratorXZookeeperDiscoverySpecBuilder}. The specification is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a> and\n+     * Returns a new {@link CuratorDiscoverySpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      */\n-    static CuratorXZookeeperDiscoverySpecBuilder builderForCuratorX(String serviceName) {\n-        return new CuratorXZookeeperDiscoverySpecBuilder(serviceName);\n+    static CuratorDiscoverySpecBuilder builderForCurator(String serviceName) {\n+        return new CuratorDiscoverySpecBuilder(serviceName);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTkwNw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433015907", "bodyText": "Which one sounds better, ofCurator(), forCurator() or just curator()?\nFor example, we don't use any prefix in Backoff, except for ofDefault().", "author": "trustin", "createdAt": "2020-06-01T02:17:46Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+     * This is also, compatible with\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static ZookeeperDiscoverySpec ofCuratorX(String serviceName) {", "originalCommit": "fd01c88b8f3e9b8c19a236716533c0829368fbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMjM4OA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433022388", "bodyText": "Let me use curator(). Thanks!\nI got one more question about builder though.\nShould we use builderForCurator or curatorBuilder?", "author": "minwoox", "createdAt": "2020-06-01T02:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\nindex 12800e2d0..adffce1c6 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\n\n@@ -30,21 +30,21 @@ public interface ZookeeperDiscoverySpec {\n \n     /**\n      * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n-     * This is also, compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n+     * This is also compatible with\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      */\n-    static ZookeeperDiscoverySpec ofCuratorX(String serviceName) {\n-        return builderForCuratorX(serviceName).build();\n+    static ZookeeperDiscoverySpec curator(String serviceName) {\n+        return builderForCurator(serviceName).build();\n     }\n \n     /**\n-     * Returns a new {@link CuratorXZookeeperDiscoverySpecBuilder}. The specification is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a> and\n+     * Returns a new {@link CuratorDiscoverySpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      */\n-    static CuratorXZookeeperDiscoverySpecBuilder builderForCuratorX(String serviceName) {\n-        return new CuratorXZookeeperDiscoverySpecBuilder(serviceName);\n+    static CuratorDiscoverySpecBuilder builderForCurator(String serviceName) {\n+        return new CuratorDiscoverySpecBuilder(serviceName);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTk5OA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433015998", "bodyText": "Which one sounds better, ofLegacy(), forLegacy() or just legacy()?", "author": "trustin", "createdAt": "2020-06-01T02:18:26Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+     * This is also, compatible with\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static ZookeeperDiscoverySpec ofCuratorX(String serviceName) {\n+        return builderForCuratorX(serviceName).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link CuratorXZookeeperDiscoverySpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a> and\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static CuratorXZookeeperDiscoverySpecBuilder builderForCuratorX(String serviceName) {\n+        return new CuratorXZookeeperDiscoverySpecBuilder(serviceName);\n+    }\n+\n+    /**\n+     * Returns the legacy {@link ZookeeperDiscoverySpec} implementation which assumes a zNode value is\n+     * a comma-separated string. Each element of the zNode value represents an {@link Endpoint} whose format is\n+     * {@code <host>[:<port_number>[:weight]]}, such as:\n+     * <ul>\n+     *   <li>{@code \"foo.com\"} - default port number, default weight (1000)</li>\n+     *   <li>{@code \"bar.com:8080} - port number 8080, default weight (1000)</li>\n+     *   <li>{@code \"10.0.2.15:0:500} - default port number, weight 500</li>\n+     *   <li>{@code \"192.168.1.2:8443:700} - port number 8443, weight 700</li>\n+     * </ul>\n+     * Note that the port number must be specified when you want to specify the weight.\n+     */\n+    static ZookeeperDiscoverySpec ofLegacy() {", "originalCommit": "fd01c88b8f3e9b8c19a236716533c0829368fbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMjQ1Nw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433022457", "bodyText": "Let me remove of.", "author": "minwoox", "createdAt": "2020-06-01T02:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\nindex 12800e2d0..adffce1c6 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java\n\n@@ -30,21 +30,21 @@ public interface ZookeeperDiscoverySpec {\n \n     /**\n      * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n-     * This is also, compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n+     * This is also compatible with\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      */\n-    static ZookeeperDiscoverySpec ofCuratorX(String serviceName) {\n-        return builderForCuratorX(serviceName).build();\n+    static ZookeeperDiscoverySpec curator(String serviceName) {\n+        return builderForCurator(serviceName).build();\n     }\n \n     /**\n-     * Returns a new {@link CuratorXZookeeperDiscoverySpecBuilder}. The specification is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a> and\n+     * Returns a new {@link CuratorDiscoverySpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      */\n-    static CuratorXZookeeperDiscoverySpecBuilder builderForCuratorX(String serviceName) {\n-        return new CuratorXZookeeperDiscoverySpecBuilder(serviceName);\n+    static CuratorDiscoverySpecBuilder builderForCurator(String serviceName) {\n+        return new CuratorDiscoverySpecBuilder(serviceName);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNjk5Mg==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433016992", "bodyText": "Registration seems redundant.", "author": "trustin", "createdAt": "2020-06-01T02:23:54Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZookeeperRegistrationSpec.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.zookeeper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.zookeeper.ZookeeperDiscoverySpec;\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * A registration specification for {@link ZooKeeperUpdatingListener}. The specification is used for encoding\n+ * and registering the {@link Server} to <a href=\"https://zookeeper.apache.org/\">ZooKeeper</a>.\n+ *\n+ * @see ZookeeperDiscoverySpec\n+ */\n+public interface ZookeeperRegistrationSpec {\n+\n+    /**\n+     * Returns the {@link ZookeeperRegistrationSpec} that registers the {@link Server} using\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+     * This is also, compatible with\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     *\n+     * @see ZookeeperDiscoverySpec#ofCuratorX(String)\n+     */\n+    static ZookeeperRegistrationSpec ofCuratorXRegistration(String serviceName) {", "originalCommit": "fd01c88b8f3e9b8c19a236716533c0829368fbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMjUzMA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433022530", "bodyText": "Got it!", "author": "minwoox", "createdAt": "2020-06-01T02:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNjk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZookeeperRegistrationSpec.java b/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZookeeperRegistrationSpec.java\nindex 00386ab8a..49592030d 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZookeeperRegistrationSpec.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZookeeperRegistrationSpec.java\n\n@@ -29,25 +29,25 @@ public interface ZookeeperRegistrationSpec {\n \n     /**\n      * Returns the {@link ZookeeperRegistrationSpec} that registers the {@link Server} using\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n-     * This is also, compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n+     * This is also compatible with\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      *\n-     * @see ZookeeperDiscoverySpec#ofCuratorX(String)\n+     * @see ZookeeperDiscoverySpec#curator(String)\n      */\n-    static ZookeeperRegistrationSpec ofCuratorXRegistration(String serviceName) {\n-        return new CuratorXZookeeperRegistrationSpecBuilder(serviceName).build();\n+    static ZookeeperRegistrationSpec curator(String serviceName) {\n+        return new CuratorRegistrationSpecBuilder(serviceName).build();\n     }\n \n     /**\n-     * Returns a new {@link CuratorXZookeeperRegistrationSpecBuilder}. The specification is compatible with\n-     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a> and\n+     * Returns a new {@link CuratorRegistrationSpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n      *\n-     * @see ZookeeperDiscoverySpec#builderForCuratorX(String)\n+     * @see ZookeeperDiscoverySpec#builderForCurator(String)\n      */\n-    static CuratorXZookeeperRegistrationSpecBuilder builderForCuratorX(String serviceName) {\n-        return new CuratorXZookeeperRegistrationSpecBuilder(serviceName);\n+    static CuratorRegistrationSpecBuilder builderForCurator(String serviceName) {\n+        return new CuratorRegistrationSpecBuilder(serviceName);\n     }\n \n     /**\n"}}, {"oid": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "url": "https://github.com/line/armeria/commit/e37127a8e3e7e82b0caed36303f9661e105c8b16", "message": "Address comments by @trustin", "committedDate": "2020-06-01T08:56:52Z", "type": "commit"}, {"oid": "f535605f1b82f66de9b311c3de10c7f3c4a8083c", "url": "https://github.com/line/armeria/commit/f535605f1b82f66de9b311c3de10c7f3c4a8083c", "message": "Merge branch 'master' into x_discovery", "committedDate": "2020-06-02T01:58:45Z", "type": "commit"}, {"oid": "b5cc191839df10d7239e9de81a016c1a829bc78f", "url": "https://github.com/line/armeria/commit/b5cc191839df10d7239e9de81a016c1a829bc78f", "message": "Fix", "committedDate": "2020-06-02T02:09:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzNTcyMg==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433635722", "bodyText": "I wonder if we need to do any validation for serviceName, e.g. should not start with or contain /.", "author": "trustin", "createdAt": "2020-06-02T05:54:34Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorDiscoverySpec.java", "diffHunk": "@@ -24,20 +24,20 @@\n import com.linecorp.armeria.client.Endpoint;\n import com.linecorp.armeria.internal.common.zookeeper.CuratorXNodeValueCodec;\n \n-final class CuratorXZookeeperDiscoverySpec implements ZookeeperDiscoverySpec {\n+final class CuratorDiscoverySpec implements ZookeeperDiscoverySpec {\n \n-    private final String serviceName;\n+    private final String path;\n     private final Function<? super ServiceInstance<?>, Endpoint> converter;\n \n-    CuratorXZookeeperDiscoverySpec(\n+    CuratorDiscoverySpec(\n             String serviceName, Function<? super ServiceInstance<?>, Endpoint> converter) {\n-        this.serviceName = serviceName;\n+        path = '/' + serviceName;", "originalCommit": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNjA1NQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433706055", "bodyText": "Added the validation logic. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-02T08:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzNTcyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDU3NA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433640574", "bodyText": "How about hiding this method (as well as encode()) since it seems like an implementation detail? We'll have to turn this interface into an abstract class though. We could alternatively split this method into somewhere else.", "author": "trustin", "createdAt": "2020-06-02T06:09:18Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n+     * This is also compatible with\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static ZookeeperDiscoverySpec curator(String serviceName) {\n+        return builderForCurator(serviceName).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link CuratorDiscoverySpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static CuratorDiscoverySpecBuilder builderForCurator(String serviceName) {\n+        return new CuratorDiscoverySpecBuilder(serviceName);\n+    }\n+\n+    /**\n+     * Returns the legacy {@link ZookeeperDiscoverySpec} implementation which assumes a zNode value is\n+     * a comma-separated string. Each element of the zNode value represents an {@link Endpoint} whose format is\n+     * {@code <host>[:<port_number>[:weight]]}, such as:\n+     * <ul>\n+     *   <li>{@code \"foo.com\"} - default port number, default weight (1000)</li>\n+     *   <li>{@code \"bar.com:8080} - port number 8080, default weight (1000)</li>\n+     *   <li>{@code \"10.0.2.15:0:500} - default port number, weight 500</li>\n+     *   <li>{@code \"192.168.1.2:8443:700} - port number 8443, weight 700</li>\n+     * </ul>\n+     * Note that the port number must be specified when you want to specify the weight.\n+     */\n+    static ZookeeperDiscoverySpec legacy() {\n+        return LegacyZookeeperDiscoverySpec.INSTANCE;\n+    }\n+\n+    /**\n+     * Returns the path for finding the byte array representation of registered instances. The path is appended\n+     * to the {@code zNodePath} that is specified when creating {@link ZooKeeperEndpointGroup}.\n+     */\n+    @Nullable\n+    String path();\n+\n+    /**\n+     * Decodes a zNode value to an {@link Endpoint}.\n+     */\n+    @Nullable\n+    Endpoint decode(byte[] data);", "originalCommit": "b5cc191839df10d7239e9de81a016c1a829bc78f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNjM4OA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433706388", "bodyText": "As we had a chat, a user might want to implement his own spec so this should be an interface.", "author": "minwoox", "createdAt": "2020-06-02T08:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDU3NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "20b7e133f95e49b3bd6dde8c5dedeb153f69a811", "url": "https://github.com/line/armeria/commit/20b7e133f95e49b3bd6dde8c5dedeb153f69a811", "message": "Vaildate node path", "committedDate": "2020-06-02T08:25:44Z", "type": "commit"}, {"oid": "f45e0a1ecea703df1f8fed363267136da6ed8b1d", "url": "https://github.com/line/armeria/commit/f45e0a1ecea703df1f8fed363267136da6ed8b1d", "message": "Use IllegalArgumentException", "committedDate": "2020-06-02T08:28:19Z", "type": "commit"}, {"oid": "48ad9ae5bccacc19075a32ac123b7fbb072c44ea", "url": "https://github.com/line/armeria/commit/48ad9ae5bccacc19075a32ac123b7fbb072c44ea", "message": "fix comment", "committedDate": "2020-06-02T08:29:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxMzQ4Mw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433713483", "bodyText": "\"zNodePath: \" + zNodePath + \" (expected: ...)\" ?", "author": "trustin", "createdAt": "2020-06-02T08:38:44Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -70,12 +75,29 @@ protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n     /**\n      * Creates a new instance with the specified {@link CuratorFramework}.\n      */\n-    protected AbstractCuratorFrameworkBuilder(CuratorFramework client) {\n-        this.client = client;\n+    protected AbstractCuratorFrameworkBuilder(CuratorFramework client, String zNodePath) {\n+        this.client = requireNonNull(client, \"client\");\n+        validateZNodePath(zNodePath);\n+        this.zNodePath = zNodePath;\n         clientBuilder = null;\n         customizers = null;\n     }\n \n+    private static void validateZNodePath(String zNodePath) {\n+        try {\n+            PathUtils.validatePath(zNodePath);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"zNodePath is invalid.\", e);", "originalCommit": "48ad9ae5bccacc19075a32ac123b7fbb072c44ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxNzQ5MQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433717491", "bodyText": "or\n\"zNodePath: \" + zNodePath + \" (reason: \" + e.getMessage() + ')'", "author": "trustin", "createdAt": "2020-06-02T08:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxMzQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyMjM4MA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433722380", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-02T08:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxMzQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java b/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\nindex d0c3a44e7..a57f1af95 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\n\n@@ -87,7 +87,8 @@ public class AbstractCuratorFrameworkBuilder {\n         try {\n             PathUtils.validatePath(zNodePath);\n         } catch (IllegalArgumentException e) {\n-            throw new IllegalArgumentException(\"zNodePath is invalid.\", e);\n+            throw new IllegalArgumentException(\"zNodePath: \" + zNodePath +\n+                                               \" (reason: \" + e.getMessage() + ')');\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxMzY4OQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433713689", "bodyText": "Ditto - exception message consistency?", "author": "trustin", "createdAt": "2020-06-02T08:39:03Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.zookeeper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import org.apache.zookeeper.common.PathUtils;\n+\n+/**\n+ * A utility class for ZooKeeper path.\n+ */\n+public final class ZookeeperPathUtil {\n+\n+    /**\n+     * Validates a Zookeeper path.\n+     */\n+    public static String validatePath(String path, String name) {\n+        requireNonNull(path, name);\n+        try {\n+            if (path.indexOf('/') > 0) {\n+                throw new IllegalArgumentException(name + \" cannot have '/'. \" + name + \": \" + path);\n+            }\n+            // Simply prepend '/' to validate the path.\n+            PathUtils.validatePath('/' + path);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(name + \" is invalid.\", e);", "originalCommit": "48ad9ae5bccacc19075a32ac123b7fbb072c44ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java b/zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java\nindex f384dc2a2..102195c81 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java\n\n@@ -36,7 +36,7 @@ public final class ZookeeperPathUtil {\n             // Simply prepend '/' to validate the path.\n             PathUtils.validatePath('/' + path);\n         } catch (IllegalArgumentException e) {\n-            throw new IllegalArgumentException(name + \" is invalid.\", e);\n+            throw new IllegalArgumentException(name + \": \" + path + \" (reason: \" + e.getMessage() + ')');\n         }\n         return path;\n     }\n"}}, {"oid": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "url": "https://github.com/line/armeria/commit/4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "message": "Fix exception messages", "committedDate": "2020-06-02T08:53:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMjgwNQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433632805", "bodyText": "nit: How about making validateZNodePath() return zNodePath and\nthis.zNodePath = validateZNodePath(zNodePath);", "author": "ikhoon", "createdAt": "2020-06-02T05:44:51Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -56,9 +57,12 @@\n     /**\n      * Creates a new instance with the specified {@code zkConnectionStr}.\n      */\n-    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr, String zNodePath) {\n+        requireNonNull(zkConnectionStr, \"zkConnectionStr\");\n         checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty.\");\n+        validateZNodePath(zNodePath);\n         client = null;\n+        this.zNodePath = zNodePath;", "originalCommit": "b5cc191839df10d7239e9de81a016c1a829bc78f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTMxMg==", "url": "https://github.com/line/armeria/pull/2749#discussion_r434251312", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-03T00:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMjgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java b/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\nindex deb9408c8..38773e5f4 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\n\n@@ -60,9 +61,8 @@ public class AbstractCuratorFrameworkBuilder {\n     protected AbstractCuratorFrameworkBuilder(String zkConnectionStr, String zNodePath) {\n         requireNonNull(zkConnectionStr, \"zkConnectionStr\");\n         checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty.\");\n-        validateZNodePath(zNodePath);\n         client = null;\n-        this.zNodePath = zNodePath;\n+        this.zNodePath = validateZNodePath(zNodePath);\n         clientBuilder = CuratorFrameworkFactory.builder()\n                                                .connectString(zkConnectionStr)\n                                                .connectionTimeoutMs(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzAxOQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433633019", "bodyText": "Ditto.", "author": "ikhoon", "createdAt": "2020-06-02T05:45:37Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -70,12 +74,27 @@ protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n     /**\n      * Creates a new instance with the specified {@link CuratorFramework}.\n      */\n-    protected AbstractCuratorFrameworkBuilder(CuratorFramework client) {\n-        this.client = client;\n+    protected AbstractCuratorFrameworkBuilder(CuratorFramework client, String zNodePath) {\n+        this.client = requireNonNull(client, \"client\");\n+        validateZNodePath(zNodePath);\n+        this.zNodePath = zNodePath;", "originalCommit": "b5cc191839df10d7239e9de81a016c1a829bc78f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20b7e133f95e49b3bd6dde8c5dedeb153f69a811", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java b/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\nindex deb9408c8..d0c3a44e7 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java\n\n@@ -83,9 +84,11 @@ public class AbstractCuratorFrameworkBuilder {\n     }\n \n     private static void validateZNodePath(String zNodePath) {\n-        checkArgument(!requireNonNull(zNodePath, \"zNodePath\").isEmpty(), \"zNodePath can't be empty.\");\n-        checkArgument(zNodePath.charAt(zNodePath.length() - 1) != '/',\n-                      \"zNodePath must not end with /. zNodePath: %s\", zNodePath);\n+        try {\n+            PathUtils.validatePath(zNodePath);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"zNodePath is invalid.\", e);\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTQ2Ng==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433855466", "bodyText": "This try-catch block will also catch an IllegalArgumentException that occurred when a path contains /.\nThe concatenated error message will have duplicate name: path.\nname: path (reason: name cannot have /. name: path)\nCould we catch only PathUtils.validatePath()?", "author": "ikhoon", "createdAt": "2020-06-02T13:00:06Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.zookeeper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import org.apache.zookeeper.common.PathUtils;\n+\n+/**\n+ * A utility class for ZooKeeper path.\n+ */\n+public final class ZookeeperPathUtil {\n+\n+    /**\n+     * Validates a Zookeeper path.\n+     */\n+    public static String validatePath(String path, String name) {\n+        requireNonNull(path, name);\n+        try {\n+            if (path.indexOf('/') > 0) {\n+                throw new IllegalArgumentException(name + \" cannot have '/'. \" + name + \": \" + path);\n+            }\n+            // Simply prepend '/' to validate the path.\n+            PathUtils.validatePath('/' + path);\n+        } catch (IllegalArgumentException e) {", "originalCommit": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTIyMw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r434251223", "bodyText": "Oops Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-03T00:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "chunk": "diff --git a/zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java b/zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java\nindex 102195c81..694ce6a9e 100644\n--- a/zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java\n+++ b/zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java\n\n@@ -29,10 +29,10 @@ public final class ZookeeperPathUtil {\n      */\n     public static String validatePath(String path, String name) {\n         requireNonNull(path, name);\n+        if (path.indexOf('/') > 0) {\n+            throw new IllegalArgumentException(name + \" cannot have '/'. \" + name + \": \" + path);\n+        }\n         try {\n-            if (path.indexOf('/') > 0) {\n-                throw new IllegalArgumentException(name + \" cannot have '/'. \" + name + \": \" + path);\n-            }\n             // Simply prepend '/' to validate the path.\n             PathUtils.validatePath('/' + path);\n         } catch (IllegalArgumentException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3Mzg1NQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433873855", "bodyText": "nit: could merge two lines?", "author": "ikhoon", "createdAt": "2020-06-02T13:27:59Z", "path": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java", "diffHunk": "@@ -18,39 +18,62 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.awaitility.Awaitility.await;\n \n+import java.util.List;\n import java.util.Set;\n \n-import javax.annotation.Nullable;\n-\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceType;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSet.Builder;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n \n import zookeeperjunit.CloseableZooKeeper;\n \n class ZooKeeperEndpointGroupTest {\n \n     private static final String Z_NODE = \"/testEndPoints\";\n+    private static final String CURATOR_X_SERVICE_NAME = \"foo\";\n+    private static final String CURATOR_X_ADDRESS = \"foo.com\";\n     private static final int SESSION_TIMEOUT_MILLIS = 20000;\n-    private static final Set<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints();\n \n     @RegisterExtension\n     static ZooKeeperExtension zkInstance = new ZooKeeperExtension();\n-    @Nullable\n-    private static ZooKeeperEndpointGroup endpointGroup;\n \n-    private static void setNodeChild(Set<Endpoint> children) throws Throwable {\n+    @Test\n+    void legacyDiscoverySpec() throws Throwable {\n+        final List<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints(3);\n+        setLegacySpecNodeChildren(sampleEndpoints);\n+        final ZooKeeperEndpointGroup endpointGroup = endpointGroup(ZookeeperDiscoverySpec.legacy());\n+        await().untilAsserted(() -> assertThat(endpointGroup.endpoints()).hasSameElementsAs(sampleEndpoints));\n+\n+        // Add two more nodes.\n+        final List<Endpoint> extraEndpoints = ZooKeeperTestUtil.sampleEndpoints(2);\n+        setLegacySpecNodeChildren(extraEndpoints);\n+\n+        // Construct the final expected node list.\n+        final Builder<Endpoint> builder = ImmutableSet.builder();\n+        builder.addAll(sampleEndpoints).addAll(extraEndpoints);\n+        try (CloseableZooKeeper zk = zkInstance.connection()) {\n+            zk.sync(Z_NODE, (rc, path, ctx) -> {\n+            }, null);", "originalCommit": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "chunk": "diff --git a/zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java b/zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java\nindex bea0be5be..3567f0376 100644\n--- a/zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java\n+++ b/zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java\n\n@@ -43,7 +43,6 @@ class ZooKeeperEndpointGroupTest {\n \n     private static final String Z_NODE = \"/testEndPoints\";\n     private static final String CURATOR_X_SERVICE_NAME = \"foo\";\n-    private static final String CURATOR_X_ADDRESS = \"foo.com\";\n     private static final int SESSION_TIMEOUT_MILLIS = 20000;\n \n     @RegisterExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NjE5OA==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433876198", "bodyText": "unused?", "author": "ikhoon", "createdAt": "2020-06-02T13:31:09Z", "path": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java", "diffHunk": "@@ -18,39 +18,62 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.awaitility.Awaitility.await;\n \n+import java.util.List;\n import java.util.Set;\n \n-import javax.annotation.Nullable;\n-\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceType;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSet.Builder;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n \n import zookeeperjunit.CloseableZooKeeper;\n \n class ZooKeeperEndpointGroupTest {\n \n     private static final String Z_NODE = \"/testEndPoints\";\n+    private static final String CURATOR_X_SERVICE_NAME = \"foo\";\n+    private static final String CURATOR_X_ADDRESS = \"foo.com\";", "originalCommit": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "chunk": "diff --git a/zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java b/zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java\nindex bea0be5be..3567f0376 100644\n--- a/zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java\n+++ b/zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java\n\n@@ -43,7 +43,6 @@ class ZooKeeperEndpointGroupTest {\n \n     private static final String Z_NODE = \"/testEndPoints\";\n     private static final String CURATOR_X_SERVICE_NAME = \"foo\";\n-    private static final String CURATOR_X_ADDRESS = \"foo.com\";\n     private static final int SESSION_TIMEOUT_MILLIS = 20000;\n \n     @RegisterExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4NTk2Mw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r433885963", "bodyText": "Add space between // and all", "author": "ikhoon", "createdAt": "2020-06-02T13:44:32Z", "path": "zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java", "diffHunk": "@@ -20,115 +20,139 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n \n-import javax.annotation.Nullable;\n-\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceType;\n+import org.apache.curator.x.discovery.UriSpec;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.common.AggregatedHttpRequest;\n-import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.client.zookeeper.ZookeeperDiscoverySpec;\n import com.linecorp.armeria.common.HttpResponse;\n-import com.linecorp.armeria.common.HttpStatus;\n-import com.linecorp.armeria.common.ResponseHeaders;\n-import com.linecorp.armeria.common.util.CompletionActions;\n-import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;\n-import com.linecorp.armeria.server.AbstractHttpService;\n import com.linecorp.armeria.server.Server;\n import com.linecorp.armeria.server.ServerListener;\n-import com.linecorp.armeria.server.ServiceRequestContext;\n \n import zookeeperjunit.CloseableZooKeeper;\n \n class ZooKeeperRegistrationTest {\n \n     private static final String Z_NODE = \"/testEndPoints\";\n+    private static final String CURATOR_X_SERVICE_NAME = \"foo\";\n+    private static final String CURATOR_X_ADDRESS = \"foo.com\";\n     private static final int SESSION_TIMEOUT_MILLIS = 20000;\n-    private static final Set<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints();\n+    private static final List<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints(3);\n \n     @RegisterExtension\n     static ZooKeeperExtension zkInstance = new ZooKeeperExtension();\n-    @Nullable\n-    private List<Server> servers;\n \n-    @BeforeEach\n-    void startServers() {\n-        servers = new ArrayList<>();\n+    @Test\n+    void legacyZookeeperRegistrationSpec() throws Throwable {\n+        final List<Server> servers = startServers(true);\n+        //all servers start and with zNode created", "originalCommit": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "chunk": "diff --git a/zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java b/zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java\nindex cf182b8a3..db3268a19 100644\n--- a/zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java\n+++ b/zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java\n\n@@ -52,7 +52,7 @@ class ZooKeeperRegistrationTest {\n     @Test\n     void legacyZookeeperRegistrationSpec() throws Throwable {\n         final List<Server> servers = startServers(true);\n-        //all servers start and with zNode created\n+        // all servers start and with zNode created\n         await().untilAsserted(() -> sampleEndpoints.forEach(\n                 endpoint -> zkInstance.assertExists(Z_NODE + '/' + endpoint.host() + '_' + endpoint.port())));\n \n"}}, {"oid": "7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "url": "https://github.com/line/armeria/commit/7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "message": "Address comments by @ikhoon", "committedDate": "2020-06-03T00:51:15Z", "type": "commit"}, {"oid": "e06daafb2f4877561d0508f6ba29c2ce2545aa45", "url": "https://github.com/line/armeria/commit/e06daafb2f4877561d0508f6ba29c2ce2545aa45", "message": "Fix", "committedDate": "2020-06-03T00:54:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NTk0NQ==", "url": "https://github.com/line/armeria/pull/2749#discussion_r434285945", "bodyText": "It's time to update the documentation. \ud83d\ude09\nhttps://line.github.io/armeria/docs/advanced-zookeeper", "author": "ikhoon", "createdAt": "2020-06-03T03:20:27Z", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java", "diffHunk": "@@ -54,81 +55,97 @@\n      * Returns a new {@link ZooKeeperEndpointGroup} that retrieves the {@link Endpoint} list from\n      * the ZNode at the specified connection string and path. A new ZooKeeper client will be created internally.\n      * The ZooKeeper client will be destroyed when the returned {@link ZooKeeperEndpointGroup} is closed.\n+     *\n+     * @param zkConnectionStr the ZooKeeper connection string\n+     * @param zNodePath the ZooKeeper node to register\n+     * @param spec the {@link ZookeeperDiscoverySpec} to find and decode the registered instances\n      */\n-    public static ZooKeeperEndpointGroup of(String zkConnectionStr, String zNodePath) {\n-        return builder(zkConnectionStr, zNodePath).build();\n+    public static ZooKeeperEndpointGroup of(String zkConnectionStr, String zNodePath,\n+                                            ZookeeperDiscoverySpec spec) {", "originalCommit": "e06daafb2f4877561d0508f6ba29c2ce2545aa45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NzA1Mw==", "url": "https://github.com/line/armeria/pull/2749#discussion_r434287053", "bodyText": "Let me make a separate PR for that as I commented in the commit message.\nI want to implement the specs for ServerSet first and then document.", "author": "minwoox", "createdAt": "2020-06-03T03:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NTk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4OTMxNg==", "url": "https://github.com/line/armeria/pull/2749#discussion_r434289316", "bodyText": "SGTM \ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-06-03T03:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NTk0NQ=="}], "type": "inlineReview", "revised_code": null}]}