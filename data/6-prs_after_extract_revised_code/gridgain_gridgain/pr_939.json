{"pr_number": 939, "pr_title": "GG-26598 Expose per query memory usage", "pr_createdAt": "2020-02-19T16:05:55Z", "pr_url": "https://github.com/gridgain/gridgain/pull/939", "timeline": [{"oid": "1d97ccf67649703a38c232b227c1f645fadfbb0b", "url": "https://github.com/gridgain/gridgain/commit/1d97ccf67649703a38c232b227c1f645fadfbb0b", "message": "fix docs and style", "committedDate": "2020-02-20T09:26:14Z", "type": "forcePushed"}, {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "url": "https://github.com/gridgain/gridgain/commit/8afb926f4b39deadf6d769ee3d28b48f0c32191d", "message": "fix NPE when quota not set", "committedDate": "2020-02-20T12:54:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4NjE2MQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r381986161", "bodyText": "Can we encapsulate the tracking-related fields and logic into a dedicated object? Like IgniteTrace in gg-27202? I think we need to separate statistics gathering from the actual free memory tracking.", "author": "rkondakov", "createdAt": "2020-02-20T13:07:00Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -50,6 +51,18 @@\n     /** Memory reserved by query. */\n     private long reserved;\n \n+    /** Maximum number of bytes reserved by query. */", "originalCommit": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MDI5Mg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r386140292", "bodyText": "yes, it's already incapsulated within TrackableFileIO", "author": "korlov42", "createdAt": "2020-03-01T21:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4NjE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "befcf5000dc94af7e9952b036738a512a1939529", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\nindex 21cbf0a024e..a4664c7ad6d 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n\n@@ -49,38 +53,55 @@ public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryTrack\n     private long reservedFromParent;\n \n     /** Memory reserved by query. */\n-    private long reserved;\n+    private volatile long reserved;\n \n     /** Maximum number of bytes reserved by query. */\n-    private long maxReserved;\n+    private volatile long maxReserved;\n \n-    /** Total number of bytes written on disk tracked by current tracker. */\n-    private long totalWrittenOnDisk;\n+    /** Number of bytes written on disk at the current moment. */\n+    private volatile long writtenOnDisk;\n \n     /** Maximum number of bytes written on disk at the same time. */\n-    private long maxWrittenOnDisk;\n+    private volatile long maxWrittenOnDisk;\n \n-    /** Number of bytes written on disk at the current moment. */\n-    private long writtenOnDisk;\n+    /** Total number of bytes written on disk tracked by current tracker. */\n+    private volatile long totalWrittenOnDisk;\n \n     /** Close flag to prevent tracker reuse. */\n     private Boolean closed = Boolean.FALSE;\n \n+    /** The number of files created by the query. */\n+    private volatile int filesCreated;\n+\n+    /** Query descriptor (for logging). */\n+    private final String qryDesc;\n+\n     /**\n      * Constructor.\n      *\n+     * @param log Logger.\n      * @param parent Parent memory tracker.\n      * @param quota Query memory limit in bytes.\n      * @param blockSize Reservation block size.\n      * @param offloadingEnabled Flag whether to fail when memory limit is exceeded.\n+     * @param qryDesc Descriptor of the racked query.\n      */\n-    public QueryMemoryTracker(H2MemoryTracker parent, long quota, long blockSize, boolean offloadingEnabled) {\n+    public QueryMemoryTracker(\n+        IgniteLogger log,\n+        H2MemoryTracker parent,\n+        long quota,\n+        long blockSize,\n+        boolean offloadingEnabled,\n+        String qryDesc\n+    ) {\n         assert quota >= 0;\n \n+        this.log = log;\n         this.offloadingEnabled = offloadingEnabled;\n         this.parent = parent;\n         this.quota = quota;\n         this.blockSize = quota != 0 ? Math.min(quota, blockSize) : blockSize;\n+        this.qryDesc = qryDesc;\n     }\n \n     /** {@inheritDoc} */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MTkyMQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r381991921", "bodyText": "Should we track memory usage for statistics purposes even when the actual memory tracking (OOM prevention) is turned off?", "author": "rkondakov", "createdAt": "2020-02-20T13:18:53Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java", "diffHunk": "@@ -125,7 +148,8 @@ public Long register(String qry, GridCacheQueryType qryType, String schemaName,\n             schemaName,\n             System.currentTimeMillis(),\n             cancel,\n-            loc\n+            loc,\n+            memTracker == null ? DUMMY_TRACKER : memTracker", "originalCommit": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODE0Mg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r386138142", "bodyText": "yes, we should. And we actually track it. But there are two kind of queries that has not yet tracked by current tracker: text queries and streaming queries. So for now dummy tracker will be used in system views.", "author": "korlov42", "createdAt": "2020-03-01T20:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MTkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "40d79418306f334e74a4901a2890e4dc887a0620", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java\nindex 90fc7c0fa6c..a048246715f 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java\n\n@@ -142,7 +154,7 @@ public class RunningQueryManager {\n \n         GridRunningQueryInfo run = new GridRunningQueryInfo(\n             qryId,\n-            localNodeId,\n+            locNodeId,\n             qry,\n             qryType,\n             schemaName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5Mzk3Mg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r381993972", "bodyText": "Typo:\n\nofloaded", "author": "rkondakov", "createdAt": "2020-02-20T13:22:57Z", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/DiskSpillingMemoryTrackerTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.oom;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.query.GridQueryMemoryTracker;\n+import org.apache.ignite.internal.processors.query.h2.QueryMemoryManager;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases to ensure that ofloaded data properly tracked by memory tracker.", "originalCommit": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d97f90f2eae8de2ae547543cd97b827cc70ff6d", "chunk": "diff --git a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/DiskSpillingMemoryTrackerTest.java b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/DiskSpillingMemoryTrackerTest.java\nindex faec7ee6820..96ca2be6c86 100644\n--- a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/DiskSpillingMemoryTrackerTest.java\n+++ b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/DiskSpillingMemoryTrackerTest.java\n\n@@ -18,7 +18,7 @@ package org.apache.ignite.internal.processors.query.oom;\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.ignite.internal.IgniteEx;\n-import org.apache.ignite.internal.processors.query.GridQueryMemoryTracker;\n+import org.apache.ignite.internal.processors.query.GridQueryMemoryMetricProvider;\n import org.apache.ignite.internal.processors.query.h2.QueryMemoryManager;\n import org.apache.ignite.testframework.GridTestUtils;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwNTA3MQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r382005071", "bodyText": "Redundant initialization", "author": "rkondakov", "createdAt": "2020-02-20T13:43:05Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/AbstractExternalResult.java", "diffHunk": "@@ -25,23 +25,25 @@\n /**\n  * Basic class for external result.\n  */\n-@SuppressWarnings({\"MissortedModifiers\", \"WeakerAccess\", \"ForLoopReplaceableByForEach\"})\n+@SuppressWarnings({\"WeakerAccess\", \"ForLoopReplaceableByForEach\"})\n public abstract class AbstractExternalResult<T> implements AutoCloseable {\n-\n     /** Logger. */\n     protected final IgniteLogger log;\n \n     /** Current size in rows. */\n     protected int size;\n \n+    /** */\n+    protected long swapped = 0;", "originalCommit": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40d79418306f334e74a4901a2890e4dc887a0620", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/AbstractExternalResult.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/AbstractExternalResult.java\nindex ebb9d24d8d4..18d16e2abc3 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/AbstractExternalResult.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/AbstractExternalResult.java\n\n@@ -33,9 +33,6 @@ public abstract class AbstractExternalResult<T> implements AutoCloseable {\n     /** Current size in rows. */\n     protected int size;\n \n-    /** */\n-    protected long swapped = 0;\n-\n     /** Memory tracker. */\n     protected final H2MemoryTracker memTracker;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNjE0MA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r382016140", "bodyText": "In my opinion it is not the best way to track data amount that spilled to disk. I can see two drawbacks here:\n\nCode in external results became more complicated because of the tracking part\nIt is easy very easy to make a mistake and forget to count some disk offloads with this approach. Like it happened for ExternalResultHashIndex\n\nI think that using specialized FileIoFactory for tracking spilled files is more solid solution here. See example TrackableFileIoFactory in gg-27202 branch.", "author": "rkondakov", "createdAt": "2020-02-20T14:01:59Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/PlainExternalResult.java", "diffHunk": "@@ -115,16 +115,19 @@ private void spillRows() {\n         if (F.isEmpty(rowBuff))\n             return;\n \n-        data.store(rowBuff);\n+        long swapped = data.store(rowBuff);\n+\n+        memTracker.swap(swapped);\n+        this.swapped += swapped;", "originalCommit": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40d79418306f334e74a4901a2890e4dc887a0620", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/PlainExternalResult.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/PlainExternalResult.java\nindex d3e86d9c624..a41521a5e50 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/PlainExternalResult.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/PlainExternalResult.java\n\n@@ -115,19 +115,16 @@ public class PlainExternalResult extends AbstractExternalResult<Value> implement\n         if (F.isEmpty(rowBuff))\n             return;\n \n-        long swapped = data.store(rowBuff);\n-\n-        memTracker.swap(swapped);\n-        this.swapped += swapped;\n+        data.store(rowBuff);\n \n         long delta = 0;\n \n         for (Map.Entry<ValueRow, Value[]> row : rowBuff)\n-            delta += H2Utils.calculateMemoryDelta(null, null, row.getValue());\n+            delta += H2Utils.calculateMemoryDelta(null, row.getValue(), null);\n \n-        rowBuff.clear();\n+        memTracker.release(-delta);\n \n-        memTracker.release(delta);\n+        rowBuff.clear();\n     }\n \n     /** {@inheritDoc} */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNzAzMQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r382017031", "bodyText": "Seems like this field is not used here", "author": "rkondakov", "createdAt": "2020-02-20T14:03:24Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java", "diffHunk": "@@ -126,7 +127,10 @@\n     private IgniteLogger log;\n \n     /** */\n-    private final AtomicLong qryIdGen = new AtomicLong();\n+    private final RunningQueryManager runningQryMgr;", "originalCommit": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40d79418306f334e74a4901a2890e4dc887a0620", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java\nindex 7f2907765da..a4bf2606f04 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java\n\n@@ -126,9 +125,6 @@ public class GridReduceQueryExecutor {\n     /** */\n     private IgniteLogger log;\n \n-    /** */\n-    private final RunningQueryManager runningQryMgr;\n-\n     /** Generator of ids for query requests. */\n     private final AtomicLong qryReqIdGen = new AtomicLong();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNzY3NQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r382017675", "bodyText": "Redundant initialization", "author": "rkondakov", "createdAt": "2020-02-20T14:04:20Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedGroupByData.java", "diffHunk": "@@ -57,6 +57,9 @@\n     /** */\n     private int size;\n \n+    /** */\n+    private long swapped = 0;", "originalCommit": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "befcf5000dc94af7e9952b036738a512a1939529", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedGroupByData.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedGroupByData.java\nindex e1e99bd78e6..6eed5dfadde 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedGroupByData.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedGroupByData.java\n\n@@ -58,7 +58,7 @@ public class H2ManagedGroupByData extends GroupByData {\n     private int size;\n \n     /** */\n-    private long swapped = 0;\n+    private long swapped;\n \n     /**\n      * @param ses Session.\n"}}, {"oid": "befcf5000dc94af7e9952b036738a512a1939529", "url": "https://github.com/gridgain/gridgain/commit/befcf5000dc94af7e9952b036738a512a1939529", "message": "DRAFT: mem metrics for system view", "committedDate": "2020-02-28T08:07:46Z", "type": "commit"}, {"oid": "071af2afe1ee9ab728f45ee0a09afab7150e6783", "url": "https://github.com/gridgain/gridgain/commit/071af2afe1ee9ab728f45ee0a09afab7150e6783", "message": "fix compilation", "committedDate": "2020-02-28T09:07:12Z", "type": "commit"}, {"oid": "8dae651f667727d4c1497f24def5ebe7fd56844d", "url": "https://github.com/gridgain/gridgain/commit/8dae651f667727d4c1497f24def5ebe7fd56844d", "message": "another wip commit", "committedDate": "2020-03-01T18:20:04Z", "type": "commit"}, {"oid": "8dae651f667727d4c1497f24def5ebe7fd56844d", "url": "https://github.com/gridgain/gridgain/commit/8dae651f667727d4c1497f24def5ebe7fd56844d", "message": "another wip commit", "committedDate": "2020-03-01T18:20:04Z", "type": "forcePushed"}, {"oid": "40d79418306f334e74a4901a2890e4dc887a0620", "url": "https://github.com/gridgain/gridgain/commit/40d79418306f334e74a4901a2890e4dc887a0620", "message": "refactoring", "committedDate": "2020-03-01T20:26:57Z", "type": "commit"}, {"oid": "0cb6b879462cf944b6f3e041eec8cd30f3bacc60", "url": "https://github.com/gridgain/gridgain/commit/0cb6b879462cf944b6f3e041eec8cd30f3bacc60", "message": "minors", "committedDate": "2020-03-01T21:03:20Z", "type": "commit"}, {"oid": "e8f075e675b8764f1f7b686d27bfa9251692fe70", "url": "https://github.com/gridgain/gridgain/commit/e8f075e675b8764f1f7b686d27bfa9251692fe70", "message": "fix compilation", "committedDate": "2020-03-01T21:16:13Z", "type": "commit"}, {"oid": "ae76c3e616933cbef7a7a912082106a2db955eee", "url": "https://github.com/gridgain/gridgain/commit/ae76c3e616933cbef7a7a912082106a2db955eee", "message": "fix tests", "committedDate": "2020-03-02T10:17:34Z", "type": "commit"}, {"oid": "9708e6beabd3cc7b48295fd604f4e940608f5385", "url": "https://github.com/gridgain/gridgain/commit/9708e6beabd3cc7b48295fd604f4e940608f5385", "message": "fix npe", "committedDate": "2020-03-02T11:10:11Z", "type": "commit"}, {"oid": "5f19b17dce07321fc387912b787271a23858d65b", "url": "https://github.com/gridgain/gridgain/commit/5f19b17dce07321fc387912b787271a23858d65b", "message": "fix JDBC quota test", "committedDate": "2020-03-02T11:42:28Z", "type": "commit"}, {"oid": "9d97f90f2eae8de2ae547543cd97b827cc70ff6d", "url": "https://github.com/gridgain/gridgain/commit/9d97f90f2eae8de2ae547543cd97b827cc70ff6d", "message": "rename interface", "committedDate": "2020-03-02T11:51:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MDc0NA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r386370744", "bodyText": "non-atomic update\nRace is possible while updating  globalQuota and globalQuotaStr from different threads.", "author": "AMashenkov", "createdAt": "2020-03-02T12:44:53Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java", "diffHunk": "@@ -244,9 +228,20 @@ public boolean onQuotaExceeded(long size) {\n      *\n      * @param newGlobalQuota New global query quota.\n      */\n-    public synchronized void setGlobalQuota(String newGlobalQuota) {\n-        this.globalQuota = U.parseBytes(newGlobalQuota);\n-        this.globalQuotaStr = newGlobalQuota;\n+    public void setGlobalQuota(String newGlobalQuota) {\n+        long globalQuota0 = U.parseBytes(newGlobalQuota);\n+        long heapSize = Runtime.getRuntime().maxMemory();\n+\n+        A.ensure(\n+            heapSize > globalQuota0,\n+            \"Sql global memory quota can't be more than heap size: heapSize=\"\n+                + heapSize + \", quotaSize=\" + globalQuota0\n+        );\n+\n+        A.ensure(globalQuota0 >= 0, \"Sql global memory quota must be >= 0: quotaSize=\" + globalQuota0);\n+\n+        globalQuota = globalQuota0;\n+        globalQuotaStr = newGlobalQuota;", "originalCommit": "9708e6beabd3cc7b48295fd604f4e940608f5385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8260e09a51a92322876a84d59a41358019bb79d", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\nindex 4107ade0fd7..ef119194eb1 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\n\n@@ -228,7 +228,7 @@ public class QueryMemoryManager implements H2MemoryTracker, ManagedGroupByDataFa\n      *\n      * @param newGlobalQuota New global query quota.\n      */\n-    public void setGlobalQuota(String newGlobalQuota) {\n+    public synchronized void setGlobalQuota(String newGlobalQuota) {\n         long globalQuota0 = U.parseBytes(newGlobalQuota);\n         long heapSize = Runtime.getRuntime().maxMemory();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NDM2MQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r386374361", "bodyText": "It looks like there is no need to mark method with 'synchronized' just to read volatile field", "author": "AMashenkov", "createdAt": "2020-03-02T12:52:47Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -179,21 +182,36 @@ private boolean onQuotaExceeded() {\n     private void releaseFromParent() {\n         long toReleaseFromParent = reservedFromParent - reserved;\n \n-        parent.released(toReleaseFromParent);\n+        parent.release(toReleaseFromParent);\n \n         reservedFromParent -= toReleaseFromParent;\n \n         assert reservedFromParent >= 0 : reservedFromParent;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized long memoryReserved() {\n+    @Override public synchronized long reserved() {", "originalCommit": "9708e6beabd3cc7b48295fd604f4e940608f5385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc3575f1dcde70d7b1f6840050fd91bd365038d7", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\nindex b9754fc4405..006c4a89b8e 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n\n@@ -190,27 +193,27 @@ public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryTrack\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized long reserved() {\n+    @Override public long reserved() {\n         return reserved;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized long maxReserved() {\n+    @Override public long maxReserved() {\n         return maxReserved;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized long writtenOnDisk() {\n+    @Override public long writtenOnDisk() {\n         return writtenOnDisk;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized long maxWrittenOnDisk() {\n+    @Override public long maxWrittenOnDisk() {\n         return maxWrittenOnDisk;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized long totalWrittenOnDisk() {\n+    @Override public long totalWrittenOnDisk() {\n         return totalWrittenOnDisk;\n     }\n \n"}}, {"oid": "ca1d2aa85a4838610adaf423450b61a7b8fc90e8", "url": "https://github.com/gridgain/gridgain/commit/ca1d2aa85a4838610adaf423450b61a7b8fc90e8", "message": "another attempt to get green visa", "committedDate": "2020-03-03T06:05:41Z", "type": "commit"}, {"oid": "48cd37e2dc468afc04afc82fa9ae2a97726a9609", "url": "https://github.com/gridgain/gridgain/commit/48cd37e2dc468afc04afc82fa9ae2a97726a9609", "message": "save the progress", "committedDate": "2020-03-03T10:05:57Z", "type": "commit"}, {"oid": "cb4b5c82c97cafa5c74fd6f7c482b1aa63f308de", "url": "https://github.com/gridgain/gridgain/commit/cb4b5c82c97cafa5c74fd6f7c482b1aa63f308de", "message": "fix tests", "committedDate": "2020-03-03T11:16:06Z", "type": "commit"}, {"oid": "dc3575f1dcde70d7b1f6840050fd91bd365038d7", "url": "https://github.com/gridgain/gridgain/commit/dc3575f1dcde70d7b1f6840050fd91bd365038d7", "message": "save the progress", "committedDate": "2020-03-03T13:01:34Z", "type": "commit"}, {"oid": "317c5592198e02352234a8f71c1bbb2681b0040b", "url": "https://github.com/gridgain/gridgain/commit/317c5592198e02352234a8f71c1bbb2681b0040b", "message": "minors", "committedDate": "2020-03-03T13:35:21Z", "type": "commit"}, {"oid": "2262f9886257de14eb765f703bbe903619dd11a1", "url": "https://github.com/gridgain/gridgain/commit/2262f9886257de14eb765f703bbe903619dd11a1", "message": "fix failed tests", "committedDate": "2020-03-04T07:21:30Z", "type": "commit"}, {"oid": "fbb183f415294196ec3288504d848e3175be5eaa", "url": "https://github.com/gridgain/gridgain/commit/fbb183f415294196ec3288504d848e3175be5eaa", "message": "minors", "committedDate": "2020-03-04T09:39:11Z", "type": "commit"}, {"oid": "68df8071e510416aaa076f46244be540f406fd13", "url": "https://github.com/gridgain/gridgain/commit/68df8071e510416aaa076f46244be540f406fd13", "message": "save the progress", "committedDate": "2020-03-04T13:15:45Z", "type": "commit"}, {"oid": "12d75e939a64115b366a9c88b0f06c2d62f84109", "url": "https://github.com/gridgain/gridgain/commit/12d75e939a64115b366a9c88b0f06c2d62f84109", "message": "save the progress", "committedDate": "2020-03-04T13:45:34Z", "type": "commit"}, {"oid": "a8260e09a51a92322876a84d59a41358019bb79d", "url": "https://github.com/gridgain/gridgain/commit/a8260e09a51a92322876a84d59a41358019bb79d", "message": "minors", "committedDate": "2020-03-04T14:40:34Z", "type": "commit"}, {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a", "url": "https://github.com/gridgain/gridgain/commit/de3dd2ae3f106045b4340273542ef81211931b6a", "message": "minors", "committedDate": "2020-03-04T16:24:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3OTMzMQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388179331", "bodyText": "H2 has function to close Autoclosables: IOUtils.closeSilently()", "author": "AMashenkov", "createdAt": "2020-03-05T09:43:26Z", "path": "modules/h2/src/main/java/org/h2/index/HashJoinIndex.java", "diffHunk": "@@ -508,12 +507,15 @@ private boolean checkConditions(Session ses, Row r) {\n     public void clearHashTable(Session session) {\n         hashTbl = null;\n \n-        if (memoryReserved > 0) {\n-            assert session.memoryTracker() != null;\n-\n-            session.memoryTracker().released(memoryReserved);\n+        if (tracker != null) {\n+            try {", "originalCommit": "de3dd2ae3f106045b4340273542ef81211931b6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "chunk": "diff --git a/modules/h2/src/main/java/org/h2/index/HashJoinIndex.java b/modules/h2/src/main/java/org/h2/index/HashJoinIndex.java\nindex 7fbeacc5ce8..2ed3f5d4ef9 100644\n--- a/modules/h2/src/main/java/org/h2/index/HashJoinIndex.java\n+++ b/modules/h2/src/main/java/org/h2/index/HashJoinIndex.java\n\n@@ -507,16 +508,9 @@ public class HashJoinIndex extends BaseIndex {\n     public void clearHashTable(Session session) {\n         hashTbl = null;\n \n-        if (tracker != null) {\n-            try {\n-                tracker.close();\n-            }\n-            catch (Exception ignored) {\n-                // no-op\n-            }\n+        IOUtils.closeSilently(tracker);\n \n-            tracker = null;\n-        }\n+        tracker = null;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3OTk3NQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388179975", "bodyText": "Let's help GC in anyway\nif (values != null)\nvalues = null;\nif (tracker != null)\ntracker.release ....", "author": "AMashenkov", "createdAt": "2020-03-05T09:44:40Z", "path": "modules/h2/src/main/java/org/h2/expression/aggregate/AggregateDataCollecting.java", "diffHunk": "@@ -153,17 +155,16 @@ public Value getSharedArgument() {\n \n     /** {@inheritDoc} */\n     @Override public void cleanup(Session ses) {\n-        H2MemoryTracker memTracker;\n-        if (values != null && (memTracker = ses.memoryTracker()) != null) {\n+        if (values != null && tracker != null) {", "originalCommit": "de3dd2ae3f106045b4340273542ef81211931b6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "chunk": "diff --git a/modules/h2/src/main/java/org/h2/expression/aggregate/AggregateDataCollecting.java b/modules/h2/src/main/java/org/h2/expression/aggregate/AggregateDataCollecting.java\nindex b8ac9483da2..3d10dadca78 100644\n--- a/modules/h2/src/main/java/org/h2/expression/aggregate/AggregateDataCollecting.java\n+++ b/modules/h2/src/main/java/org/h2/expression/aggregate/AggregateDataCollecting.java\n\n@@ -155,11 +155,11 @@ public class AggregateDataCollecting extends AggregateData implements Iterable<V\n \n     /** {@inheritDoc} */\n     @Override public void cleanup(Session ses) {\n-        if (values != null && tracker != null) {\n+        if (values != null)\n             values = null;\n \n+        if (tracker != null)\n             tracker.release(tracker.reserved());\n-        }\n     }\n \n     /** */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NDU4NA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388184584", "bodyText": "This looks non optimal.\nLet's make stacktrace analyse as a second condition.\nif (canceled && X.hasCause...)\nAlso this conditions can be checked after 'errorCode' check.", "author": "AMashenkov", "createdAt": "2020-03-05T09:52:42Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java", "diffHunk": "@@ -162,6 +163,9 @@ private boolean fetchPage() throws IgniteCheckedException {\n                     return false;\n             }\n             catch (SQLException e) {\n+                if (X.hasCause(e, QueryMemoryTracker.TrackerWasClosedException.class) && canceled)", "originalCommit": "de3dd2ae3f106045b4340273542ef81211931b6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java\nindex fc2fff40232..9d338e079e6 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java\n\n@@ -163,10 +163,10 @@ public abstract class H2ResultSetIterator<T> extends GridIteratorAdapter<T> impl\n                     return false;\n             }\n             catch (SQLException e) {\n-                if (X.hasCause(e, QueryMemoryTracker.TrackerWasClosedException.class) && canceled)\n+                if (e.getErrorCode() == ErrorCode.STATEMENT_WAS_CANCELED)\n                     throw new QueryCancelledException();\n \n-                if (e.getErrorCode() == ErrorCode.STATEMENT_WAS_CANCELED)\n+                if (canceled && X.hasCause(e, QueryMemoryTracker.TrackerWasClosedException.class))\n                     throw new QueryCancelledException();\n \n                 throw new IgniteSQLException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NTIwNA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388185204", "bodyText": "Is it safe to skip Iterator close() call?", "author": "AMashenkov", "createdAt": "2020-03-05T09:53:48Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java", "diffHunk": "@@ -180,6 +184,9 @@ private boolean fetchPage() throws IgniteCheckedException {\n                     page.add(row);\n                 }\n                 catch (SQLException e) {\n+                    if (X.hasCause(e, QueryMemoryTracker.TrackerWasClosedException.class) && canceled)", "originalCommit": "de3dd2ae3f106045b4340273542ef81211931b6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1NTA3MA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388255070", "bodyText": "No it isn't. I've move this check after close() invoking.", "author": "korlov42", "createdAt": "2020-03-05T12:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NTIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8eb17e884a8872215837da42eb32293bfb3021c1", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java\nindex fc2fff40232..806580f2019 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java\n\n@@ -184,9 +184,6 @@ public abstract class H2ResultSetIterator<T> extends GridIteratorAdapter<T> impl\n                     page.add(row);\n                 }\n                 catch (SQLException e) {\n-                    if (X.hasCause(e, QueryMemoryTracker.TrackerWasClosedException.class) && canceled)\n-                        throw new QueryCancelledException();\n-\n                     close();\n \n                     if (e.getCause() instanceof IgniteSQLException)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMTgxOA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388201818", "bodyText": "Actually, there is no need to have reference to AtomicBoolean object.\nIt can be replaced with primitive and CAS can be replaced with Unsafe field update operation.", "author": "AMashenkov", "createdAt": "2020-03-05T10:23:52Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +224,223 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!closing.compareAndSet(false, true))", "originalCommit": "de3dd2ae3f106045b4340273542ef81211931b6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\nindex c338d0c298b..133f140486a 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n\n@@ -267,11 +279,15 @@ public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryMetri\n     @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (!closing.compareAndSet(false, true))\n+        if (!CLOSING_UPDATER.compareAndSet(this, NORMALLY_OPERATING_STATE, CLOSING_OR_CLOSED_STATE))\n             return;\n \n-        for (H2MemoryTracker child : children)\n-            child.close();\n+        synchronized (this) {\n+            for (H2MemoryTracker child : children)\n+                child.close();\n+\n+            children.clear();\n+        }\n \n         closed = true;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjUzNg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388202536", "bodyText": "There is no need to have heavy concurrent structure as collection is used mostly in single thread.\nWe can wrap it into synchronized", "author": "AMashenkov", "createdAt": "2020-03-05T10:25:09Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +224,223 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!closing.compareAndSet(false, true))\n             return;\n \n+        for (H2MemoryTracker child : children)", "originalCommit": "de3dd2ae3f106045b4340273542ef81211931b6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\nindex c338d0c298b..133f140486a 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n\n@@ -267,11 +279,15 @@ public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryMetri\n     @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (!closing.compareAndSet(false, true))\n+        if (!CLOSING_UPDATER.compareAndSet(this, NORMALLY_OPERATING_STATE, CLOSING_OR_CLOSED_STATE))\n             return;\n \n-        for (H2MemoryTracker child : children)\n-            child.close();\n+        synchronized (this) {\n+            for (H2MemoryTracker child : children)\n+                child.close();\n+\n+            children.clear();\n+        }\n \n         closed = true;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMzcxOA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388203718", "bodyText": "synchronized", "author": "AMashenkov", "createdAt": "2020-03-05T10:27:18Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +224,223 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!closing.compareAndSet(false, true))\n             return;\n \n+        for (H2MemoryTracker child : children)\n+            child.close();\n+\n         closed = true;\n \n         reserved = 0;\n \n         if (parent != null)\n-            parent.released(reservedFromParent);\n+            parent.release(reservedFromParent);\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Query has been completed with memory metrics: [bytesConsumed=\"  + totalReserved +\n-                \", bytesOffloaded=\" + totalWrittenOnDisk + \", filesCreated=\" + filesCreated +\n-                \", query=\" + qryDesc + ']');\n-        }\n+        onChildClosed(this);\n     }\n \n-    /**\n-     * @return Total number of bytes written on disk.\n-     */\n-    public long totalWrittenOnDisk() {\n-        return totalWrittenOnDisk;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void incrementFilesCreated() {\n+        if (parent != null)\n+            parent.incrementFilesCreated();\n+\n+        filesCreated++;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void addTotalWrittenOnDisk(long written) {\n-        this.totalWrittenOnDisk += written;\n-    }\n+    @Override public H2MemoryTracker createChildTracker() {", "originalCommit": "de3dd2ae3f106045b4340273542ef81211931b6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\nindex c338d0c298b..133f140486a 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n\n@@ -267,11 +279,15 @@ public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryMetri\n     @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (!closing.compareAndSet(false, true))\n+        if (!CLOSING_UPDATER.compareAndSet(this, NORMALLY_OPERATING_STATE, CLOSING_OR_CLOSED_STATE))\n             return;\n \n-        for (H2MemoryTracker child : children)\n-            child.close();\n+        synchronized (this) {\n+            for (H2MemoryTracker child : children)\n+                child.close();\n+\n+            children.clear();\n+        }\n \n         closed = true;\n \n"}}, {"oid": "8eb17e884a8872215837da42eb32293bfb3021c1", "url": "https://github.com/gridgain/gridgain/commit/8eb17e884a8872215837da42eb32293bfb3021c1", "message": "fix resource cleanup", "committedDate": "2020-03-05T11:48:33Z", "type": "commit"}, {"oid": "3c4fba49e2362adb932629617b02b9952bd4285a", "url": "https://github.com/gridgain/gridgain/commit/3c4fba49e2362adb932629617b02b9952bd4285a", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-26598", "committedDate": "2020-03-05T11:51:43Z", "type": "commit"}, {"oid": "a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "url": "https://github.com/gridgain/gridgain/commit/a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "message": "review", "committedDate": "2020-03-05T13:20:37Z", "type": "commit"}, {"oid": "c895c69cc62f0f1f159d41d0339c458ff8fec293", "url": "https://github.com/gridgain/gridgain/commit/c895c69cc62f0f1f159d41d0339c458ff8fec293", "message": "review", "committedDate": "2020-03-05T13:55:11Z", "type": "commit"}, {"oid": "17fc88ca4dd35091808a956ca72ff61e1d9da123", "url": "https://github.com/gridgain/gridgain/commit/17fc88ca4dd35091808a956ca72ff61e1d9da123", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-26598", "committedDate": "2020-03-05T16:58:01Z", "type": "commit"}, {"oid": "0aa4ef682beba600a34586ea51af1abecc84958c", "url": "https://github.com/gridgain/gridgain/commit/0aa4ef682beba600a34586ea51af1abecc84958c", "message": "fix jdbc2 query quota test", "committedDate": "2020-03-06T07:10:45Z", "type": "commit"}, {"oid": "2d3332e27d2457d4515522769a53ee739e0dd25a", "url": "https://github.com/gridgain/gridgain/commit/2d3332e27d2457d4515522769a53ee739e0dd25a", "message": "add test for child tracker verification", "committedDate": "2020-03-06T08:17:27Z", "type": "commit"}, {"oid": "4539bc347c43488f0594ec532f6247300fd5d6c0", "url": "https://github.com/gridgain/gridgain/commit/4539bc347c43488f0594ec532f6247300fd5d6c0", "message": "review", "committedDate": "2020-03-06T18:12:10Z", "type": "commit"}, {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25", "url": "https://github.com/gridgain/gridgain/commit/68a17877ef420e749a5ca770ad29e58333ab4b25", "message": "fix failed tests after review", "committedDate": "2020-03-10T09:18:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MTE2NA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390191164", "bodyText": "may be rename to memTrackerProvider, in order to not confuse with QueryMemoryTracker instances?", "author": "mshonichev", "createdAt": "2020-03-10T09:37:47Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridRunningQueryInfo.java", "diffHunk": "@@ -47,6 +47,9 @@\n     /** */\n     private final boolean loc;\n \n+    /** */\n+    private final GridQueryMemoryMetricProvider memTracker;", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwNjE1NQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390906155", "bodyText": "done", "author": "korlov42", "createdAt": "2020-03-11T11:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MTE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "a92bfb05d14cf079f18fdd7f8befed605ada743a", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridRunningQueryInfo.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridRunningQueryInfo.java\nindex 10e07ed4538..5db6937de3c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridRunningQueryInfo.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridRunningQueryInfo.java\n\n@@ -48,7 +48,7 @@ public class GridRunningQueryInfo {\n     private final boolean loc;\n \n     /** */\n-    private final GridQueryMemoryMetricProvider memTracker;\n+    private final GridQueryMemoryMetricProvider memMetricProvider;\n \n     /** */\n     private final QueryRunningFuture fut = new QueryRunningFuture();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5Mjk5Ng==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390192996", "bodyText": "Could you provide example of text queries ?", "author": "mshonichev", "createdAt": "2020-03-10T09:41:05Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java", "diffHunk": "@@ -44,14 +46,44 @@\n     /** Name of the MetricRegistry which metrics measure stats of queries initiated by user. */\n     public static final String SQL_USER_QUERIES_REG_NAME = \"sql.queries.user\";\n \n+    /** Dummy memory metric provider that returns only -1's. */\n+    // This provider used to highlight that query has no tracker at all.\n+    // It could be intentionally in case of streaming or text queries", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MDEwMA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390250100", "bodyText": "Any query running via GridQueryProcessor#executeQuery with qryType==TEXT", "author": "korlov42", "createdAt": "2020-03-10T11:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5Mjk5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDA2OQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390194069", "bodyText": "Do we have any kind of protection against resource leak in case queries are only registered and never unregistered?", "author": "mshonichev", "createdAt": "2020-03-10T09:43:04Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java", "diffHunk": "@@ -153,6 +191,15 @@ public void unregister(Long qryId, @Nullable Throwable failReason) {\n         if (qry == null)\n             return;\n \n+        if (qry.memoryTracker() instanceof AutoCloseable)\n+            U.close((AutoCloseable)qry.memoryTracker(), log);", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTIxMQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390251211", "bodyText": "What protection do you mean?", "author": "korlov42", "createdAt": "2020-03-10T11:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNDgxMA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390304810", "bodyText": "if we have some (periodic/triggered) check that all registered queries were unregistered once they are closed/completed", "author": "mshonichev", "createdAt": "2020-03-10T13:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTkzMg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390305932", "bodyText": "no, we have not such check", "author": "korlov42", "createdAt": "2020-03-10T13:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a92bfb05d14cf079f18fdd7f8befed605ada743a", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java\nindex 57599e49dc5..257e8282af4 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java\n\n@@ -191,12 +191,12 @@ public class RunningQueryManager {\n         if (qry == null)\n             return;\n \n-        if (qry.memoryTracker() instanceof AutoCloseable)\n-            U.close((AutoCloseable)qry.memoryTracker(), log);\n+        if (qry.memoryMetricProvider() instanceof AutoCloseable)\n+            U.close((AutoCloseable)qry.memoryMetricProvider(), log);\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"User's query \" + (failReason == null ? \"completed \" : \"failed \") +\n-                \"[id=\" + qryId + \", tracker=\" + qry.memoryTracker() +\n+                \"[id=\" + qryId + \", tracker=\" + qry.memoryMetricProvider() +\n                 \", failReason=\" + (failReason != null ? failReason.getMessage() : \"null\") + ']');\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NzAyNg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390197026", "bodyText": "As far as I know, query can continue executing after connection close, am I right?\nWouldn't .close() break OOM protection for that case?", "author": "mshonichev", "createdAt": "2020-03-10T09:47:59Z", "path": "modules/h2/src/main/java/org/h2/engine/Session.java", "diffHunk": "@@ -960,6 +975,11 @@ public void close() {\n             try {\n                 database.checkPowerOff();\n \n+                H2MemoryTracker tracker = memoryTracker;\n+                if (tracker != null) {\n+                    tracker.close();", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2ODY5NA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390268694", "bodyText": "I know about only one case - when query was cancelled. And this case is handled properly.", "author": "korlov42", "createdAt": "2020-03-10T12:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NzAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "chunk": "diff --git a/modules/h2/src/main/java/org/h2/engine/Session.java b/modules/h2/src/main/java/org/h2/engine/Session.java\nindex 31f688f665f..87bdaad3500 100644\n--- a/modules/h2/src/main/java/org/h2/engine/Session.java\n+++ b/modules/h2/src/main/java/org/h2/engine/Session.java\n\n@@ -976,9 +978,8 @@ public class Session extends SessionWithState implements TransactionStore.Rollba\n                 database.checkPowerOff();\n \n                 H2MemoryTracker tracker = memoryTracker;\n-                if (tracker != null) {\n+                if (tracker != null)\n                     tracker.close();\n-                }\n \n                 // release any open table locks\n                 rollback();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMTA5Mg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390201092", "bodyText": "need add inResult = null here too?", "author": "mshonichev", "createdAt": "2020-03-10T09:54:47Z", "path": "modules/h2/src/main/java/org/h2/index/IndexCursor.java", "diffHunk": "@@ -296,6 +300,9 @@ public boolean previous() {\n \n     @Override\n     public void close() throws Exception {\n+        if (inResult != null)\n+            inResult.close();", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzgxOA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390267818", "bodyText": "not sure. It could help GC, but currently there are more resources that is not cleared here", "author": "korlov42", "createdAt": "2020-03-10T12:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMTA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTIxMw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390305213", "bodyText": "and what about double call to close?", "author": "mshonichev", "createdAt": "2020-03-10T13:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMTA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwOTExNw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390309117", "bodyText": "close should be idempotent", "author": "korlov42", "createdAt": "2020-03-10T13:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMTA5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMTc3Mw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390201773", "bodyText": "(y)", "author": "mshonichev", "createdAt": "2020-03-10T09:55:49Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2QueryInfo.java", "diffHunk": "@@ -53,19 +59,22 @@\n     private final boolean lazy;\n \n     /** Prepared statement. */\n+    @GridToStringExclude", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "004d0aeddd1ba85e2c7ed9319ef037fb4c4552f7", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2QueryInfo.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2QueryInfo.java\nindex 4640bd9e64f..aee8549dd27 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2QueryInfo.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2QueryInfo.java\n\n@@ -59,7 +57,6 @@ public class H2QueryInfo {\n     private final boolean lazy;\n \n     /** Prepared statement. */\n-    @GridToStringExclude\n     private final Prepared stmt;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzYzMA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390203630", "bodyText": "Did we change conventions about negative values are reserved for disable memory tracking again ?\nIf yes, documentation ticket must be created with currently actual behavior description.", "author": "mshonichev", "createdAt": "2020-03-10T09:58:56Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java", "diffHunk": "@@ -174,48 +171,35 @@ public QueryMemoryManager(GridKernalContext ctx) {\n     /**\n      * Query memory tracker factory method.\n      *\n-     * Note: If 'maxQueryMemory' is zero, then {@link QueryMemoryManager#qryQuota}  will be used.\n-     * Note: Negative values are reserved for disable memory tracking.\n+     * Note: If 'maxQueryMemory' is zero, then {@link QueryMemoryManager#qryQuota} will be used.", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NjQyMQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390266421", "bodyText": "No, convention is not changed. Just for now memory tracking is always enabled.", "author": "korlov42", "createdAt": "2020-03-10T12:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTUxMA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390305510", "bodyText": "need to benchmark this", "author": "mshonichev", "createdAt": "2020-03-10T13:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "c36f5f7b60389640dcf21a90edf0cc5094bfe660", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\nindex bed35e8a8bf..a24640c19b1 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\n\n@@ -179,6 +179,9 @@ public class QueryMemoryManager implements H2MemoryTracker, ManagedGroupByDataFa\n     public GridQueryMemoryMetricProvider createQueryMemoryTracker(long maxQryMemory) {\n         long globalQuota0 = globalQuota;\n \n+        if (maxQryMemory == 0 && globalQuota0 == 0 && qryQuota == 0)\n+            return null;\n+\n         if (globalQuota0 > 0 && globalQuota0 < maxQryMemory) {\n             if (log.isInfoEnabled()) {\n                 LT.info(log, \"Query memory quota cannot exceed global memory quota.\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNTY3NQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390205675", "bodyText": "I don't understand that logic reserve anyway even if parent reservation fails.\nWhy don't use finally here?", "author": "mshonichev", "createdAt": "2020-03-10T10:02:31Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +235,239 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!STATE_UPDATER.compareAndSet(this, NORMALLY_OPERATING_STATE, CLOSING_OR_CLOSED_STATE))\n             return;\n \n+        synchronized (this) {\n+            for (H2MemoryTracker child : children)\n+                child.close();\n+\n+            children.clear();\n+        }\n+\n         closed = true;\n \n         reserved = 0;\n \n         if (parent != null)\n-            parent.released(reservedFromParent);\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Query has been completed with memory metrics: [bytesConsumed=\"  + totalReserved +\n-                \", bytesOffloaded=\" + totalWrittenOnDisk + \", filesCreated=\" + filesCreated +\n-                \", query=\" + qryDesc + ']');\n-        }\n+            parent.release(reservedFromParent);\n     }\n \n-    /**\n-     * @return Total number of bytes written on disk.\n-     */\n-    public long totalWrittenOnDisk() {\n-        return totalWrittenOnDisk;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void incrementFilesCreated() {\n+        if (parent != null)\n+            parent.incrementFilesCreated();\n+\n+        filesCreated++;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void addTotalWrittenOnDisk(long written) {\n-        this.totalWrittenOnDisk += written;\n-    }\n+    @Override public synchronized H2MemoryTracker createChildTracker() {\n+        checkClosed();\n \n-    /**\n-     * @return Total bytes reserved by current query.\n-     */\n-    public long totalReserved() {\n-        return totalReserved;\n-    }\n+        H2MemoryTracker child = new ChildMemoryTracker(this);\n \n-    /**\n-     * @return Total files number created by current query.\n-     */\n-    public int filesCreated() {\n-        return filesCreated;\n-    }\n+        children.add(child);\n \n-    /** {@inheritDoc} */\n-    @Override public synchronized void incrementFilesCreated() {\n-        this.filesCreated++;\n+        return child;\n     }\n \n-    /**\n-     * @return Query descriptor.\n-     */\n-    public String queryDescriptor() {\n-        return qryDesc;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void onChildClosed(H2MemoryTracker child) {\n+        if (state != CLOSING_OR_CLOSED_STATE)\n+            children.remove(child);\n     }\n \n     /** {@inheritDoc} */\n     @Override public String toString() {\n         return S.toString(QueryMemoryTracker.class, this);\n     }\n-}\n\\ No newline at end of file\n+\n+    /** */\n+    private static class ChildMemoryTracker implements H2MemoryTracker {\n+        /** State updater. */\n+        private static final AtomicIntegerFieldUpdater<ChildMemoryTracker> STATE_UPDATER\n+            = AtomicIntegerFieldUpdater.newUpdater(ChildMemoryTracker.class, \"state\");\n+\n+        /** */\n+        private final H2MemoryTracker parent;\n+\n+        /** */\n+        private long reserved;\n+\n+        /** */\n+        private long writtenOnDisk;\n+\n+        /** */\n+        private long totalWrittenOnDisk;\n+\n+        /** */\n+        private volatile int state;\n+\n+        /**\n+         * @param parent Parent.\n+         */\n+        public ChildMemoryTracker(H2MemoryTracker parent) {\n+            this.parent = parent;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean reserve(long size) {\n+            checkClosed();\n+\n+            boolean res;\n+            try {\n+                res = parent.reserve(size);\n+            }\n+            catch (IgniteSQLException ex) {\n+                reserved += size;", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NTIwOA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390265208", "bodyText": "Yes, finally is fit better, thanks!\nWe should count memory here to match tracked memory on parent (parent reserves memory, but then could throw exception and doesn't release memory)", "author": "korlov42", "createdAt": "2020-03-10T12:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNTY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a92bfb05d14cf079f18fdd7f8befed605ada743a", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\nindex ca2188c44ad..459c4a15213 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n\n@@ -236,7 +236,7 @@ public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryMetri\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void swap(long size) {\n+    @Override public synchronized void spill(long size) {\n         assert size >= 0;\n \n         if (size == 0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjQxNg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390206416", "bodyText": "shouldn't try .. catch be added here too?", "author": "mshonichev", "createdAt": "2020-03-10T10:03:46Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +235,239 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!STATE_UPDATER.compareAndSet(this, NORMALLY_OPERATING_STATE, CLOSING_OR_CLOSED_STATE))\n             return;\n \n+        synchronized (this) {\n+            for (H2MemoryTracker child : children)\n+                child.close();\n+\n+            children.clear();\n+        }\n+\n         closed = true;\n \n         reserved = 0;\n \n         if (parent != null)\n-            parent.released(reservedFromParent);\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Query has been completed with memory metrics: [bytesConsumed=\"  + totalReserved +\n-                \", bytesOffloaded=\" + totalWrittenOnDisk + \", filesCreated=\" + filesCreated +\n-                \", query=\" + qryDesc + ']');\n-        }\n+            parent.release(reservedFromParent);\n     }\n \n-    /**\n-     * @return Total number of bytes written on disk.\n-     */\n-    public long totalWrittenOnDisk() {\n-        return totalWrittenOnDisk;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void incrementFilesCreated() {\n+        if (parent != null)\n+            parent.incrementFilesCreated();\n+\n+        filesCreated++;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void addTotalWrittenOnDisk(long written) {\n-        this.totalWrittenOnDisk += written;\n-    }\n+    @Override public synchronized H2MemoryTracker createChildTracker() {\n+        checkClosed();\n \n-    /**\n-     * @return Total bytes reserved by current query.\n-     */\n-    public long totalReserved() {\n-        return totalReserved;\n-    }\n+        H2MemoryTracker child = new ChildMemoryTracker(this);\n \n-    /**\n-     * @return Total files number created by current query.\n-     */\n-    public int filesCreated() {\n-        return filesCreated;\n-    }\n+        children.add(child);\n \n-    /** {@inheritDoc} */\n-    @Override public synchronized void incrementFilesCreated() {\n-        this.filesCreated++;\n+        return child;\n     }\n \n-    /**\n-     * @return Query descriptor.\n-     */\n-    public String queryDescriptor() {\n-        return qryDesc;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void onChildClosed(H2MemoryTracker child) {\n+        if (state != CLOSING_OR_CLOSED_STATE)\n+            children.remove(child);\n     }\n \n     /** {@inheritDoc} */\n     @Override public String toString() {\n         return S.toString(QueryMemoryTracker.class, this);\n     }\n-}\n\\ No newline at end of file\n+\n+    /** */\n+    private static class ChildMemoryTracker implements H2MemoryTracker {\n+        /** State updater. */\n+        private static final AtomicIntegerFieldUpdater<ChildMemoryTracker> STATE_UPDATER\n+            = AtomicIntegerFieldUpdater.newUpdater(ChildMemoryTracker.class, \"state\");\n+\n+        /** */\n+        private final H2MemoryTracker parent;\n+\n+        /** */\n+        private long reserved;\n+\n+        /** */\n+        private long writtenOnDisk;\n+\n+        /** */\n+        private long totalWrittenOnDisk;\n+\n+        /** */\n+        private volatile int state;\n+\n+        /**\n+         * @param parent Parent.\n+         */\n+        public ChildMemoryTracker(H2MemoryTracker parent) {\n+            this.parent = parent;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean reserve(long size) {\n+            checkClosed();\n+\n+            boolean res;\n+            try {\n+                res = parent.reserve(size);\n+            }\n+            catch (IgniteSQLException ex) {\n+                reserved += size;\n+\n+                throw ex;\n+            }\n+\n+            reserved += size;\n+\n+            return res;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void release(long size) {\n+            checkClosed();\n+\n+            reserved -= size;\n+\n+            parent.release(size);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public long writtenOnDisk() {\n+            return writtenOnDisk;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public long totalWrittenOnDisk() {\n+            return totalWrittenOnDisk;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public long reserved() {\n+            return reserved;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void swap(long size) {\n+            checkClosed();\n+\n+            parent.swap(size);", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2MjM2Ng==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390262366", "bodyText": "no, because we expect exceptions only when you try to reserve memory and quota exceeded and  offloading is disabled", "author": "korlov42", "createdAt": "2020-03-10T11:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "a92bfb05d14cf079f18fdd7f8befed605ada743a", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\nindex ca2188c44ad..459c4a15213 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n\n@@ -236,7 +236,7 @@ public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryMetri\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void swap(long size) {\n+    @Override public synchronized void spill(long size) {\n         assert size >= 0;\n \n         if (size == 0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMDE4NQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390210185", "bodyText": "why was test expectation changed ?", "author": "mshonichev", "createdAt": "2020-03-10T10:10:46Z", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/metric/SqlStatisticOffloadingTest.java", "diffHunk": "@@ -80,7 +80,7 @@ public void testOffloadStats() {\n         // Ensure that metrics increased.\n         Metrics m1 = withdrawMetrics();\n \n-        Metrics expected = m0.add(Metrics.of(6249, 6249, 1, 16878, 16878, 1)); // Expected numbers of written bytes.\n+        Metrics expected = m0.add(Metrics.of(6249, 6249, 1, 16878, 16878, 2)); // Expected numbers of written bytes.", "originalCommit": "68a17877ef420e749a5ca770ad29e58333ab4b25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMDYxNw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390210617", "bodyText": "same question about JdbcQueryQuotaTest, btw, why was memory quota doubled there ?", "author": "mshonichev", "createdAt": "2020-03-10T10:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMDE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2MTc4OQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390261789", "bodyText": "because now all local map queries and reduce shares the common tracker, so they shares common quota", "author": "korlov42", "createdAt": "2020-03-10T11:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMDE4NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a92bfb05d14cf079f18fdd7f8befed605ada743a", "url": "https://github.com/gridgain/gridgain/commit/a92bfb05d14cf079f18fdd7f8befed605ada743a", "message": "review", "committedDate": "2020-03-10T12:41:37Z", "type": "commit"}, {"oid": "29eaaab19f8e082296dbb3d947d1deea5ebe2b60", "url": "https://github.com/gridgain/gridgain/commit/29eaaab19f8e082296dbb3d947d1deea5ebe2b60", "message": "tests for testplan", "committedDate": "2020-03-11T12:41:51Z", "type": "commit"}, {"oid": "df1454f5690a86fc1f28d728f60ab667b7510a65", "url": "https://github.com/gridgain/gridgain/commit/df1454f5690a86fc1f28d728f60ab667b7510a65", "message": "add new test to suit", "committedDate": "2020-03-11T12:43:14Z", "type": "commit"}, {"oid": "acde264d8790ad4c163b28cee541edc793d6fe04", "url": "https://github.com/gridgain/gridgain/commit/acde264d8790ad4c163b28cee541edc793d6fe04", "message": "minors", "committedDate": "2020-03-12T09:22:53Z", "type": "commit"}, {"oid": "c36f5f7b60389640dcf21a90edf0cc5094bfe660", "url": "https://github.com/gridgain/gridgain/commit/c36f5f7b60389640dcf21a90edf0cc5094bfe660", "message": "disable memory tracking", "committedDate": "2020-03-13T07:09:39Z", "type": "commit"}, {"oid": "59886b58e2c0efd007b2974da811001742c0d9c6", "url": "https://github.com/gridgain/gridgain/commit/59886b58e2c0efd007b2974da811001742c0d9c6", "message": "mock qry info", "committedDate": "2020-03-13T11:33:50Z", "type": "commit"}, {"oid": "004d0aeddd1ba85e2c7ed9319ef037fb4c4552f7", "url": "https://github.com/gridgain/gridgain/commit/004d0aeddd1ba85e2c7ed9319ef037fb4c4552f7", "message": "change H2QueryInfo description building", "committedDate": "2020-03-13T14:24:29Z", "type": "commit"}, {"oid": "761726bfb587bfef82e4c1599bf1997979e593c9", "url": "https://github.com/gridgain/gridgain/commit/761726bfb587bfef82e4c1599bf1997979e593c9", "message": "supplier for description", "committedDate": "2020-03-13T16:09:21Z", "type": "commit"}, {"oid": "9f6f1d7012ddfa9777fe71459ca85899ebb617e5", "url": "https://github.com/gridgain/gridgain/commit/9f6f1d7012ddfa9777fe71459ca85899ebb617e5", "message": "one more try", "committedDate": "2020-03-15T09:07:28Z", "type": "commit"}, {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "url": "https://github.com/gridgain/gridgain/commit/f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "message": "minor", "committedDate": "2020-03-15T14:57:33Z", "type": "commit"}, {"oid": "7642ca020ce0f80e6edabcdd6556c18f540f5ff8", "url": "https://github.com/gridgain/gridgain/commit/7642ca020ce0f80e6edabcdd6556c18f540f5ff8", "message": "minors", "committedDate": "2020-03-16T08:03:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NjAyMw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392846023", "bodyText": "Braces", "author": "AMashenkov", "createdAt": "2020-03-16T08:16:54Z", "path": "modules/h2/src/main/java/org/h2/engine/Session.java", "diffHunk": "@@ -960,6 +977,11 @@ public void close() {\n             try {\n                 database.checkPowerOff();\n \n+                H2MemoryTracker tracker = memoryTracker;\n+                if (tracker != null) {\n+                    tracker.close();", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5OTk2OA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392899968", "bodyText": "do we apply our code style rules to h2 module too?", "author": "korlov42", "createdAt": "2020-03-16T09:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NjAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "chunk": "diff --git a/modules/h2/src/main/java/org/h2/engine/Session.java b/modules/h2/src/main/java/org/h2/engine/Session.java\nindex 95880dac68d..87bdaad3500 100644\n--- a/modules/h2/src/main/java/org/h2/engine/Session.java\n+++ b/modules/h2/src/main/java/org/h2/engine/Session.java\n\n@@ -978,9 +978,8 @@ public class Session extends SessionWithState implements TransactionStore.Rollba\n                 database.checkPowerOff();\n \n                 H2MemoryTracker tracker = memoryTracker;\n-                if (tracker != null) {\n+                if (tracker != null)\n                     tracker.close();\n-                }\n \n                 // release any open table locks\n                 rollback();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NjQyMA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392846420", "bodyText": "Braces", "author": "AMashenkov", "createdAt": "2020-03-16T08:17:52Z", "path": "modules/h2/src/main/java/org/h2/index/IndexCursor.java", "diffHunk": "@@ -135,6 +134,11 @@ public void prepare(Session s, ArrayList<IndexCondition> indexConditions) {\n                 if ((isStart || isEnd) && !canUseIndexFor(inColumn)) {\n                     inColumn = null;\n                     inList = null;\n+\n+                    if (inResult != null) {\n+                        inResult.close();", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "chunk": "diff --git a/modules/h2/src/main/java/org/h2/index/IndexCursor.java b/modules/h2/src/main/java/org/h2/index/IndexCursor.java\nindex 191c82d247f..00ee3cfc248 100644\n--- a/modules/h2/src/main/java/org/h2/index/IndexCursor.java\n+++ b/modules/h2/src/main/java/org/h2/index/IndexCursor.java\n\n@@ -135,9 +135,8 @@ public class IndexCursor implements Cursor, AutoCloseable {\n                     inColumn = null;\n                     inList = null;\n \n-                    if (inResult != null) {\n+                    if (inResult != null)\n                         inResult.close();\n-                    }\n \n                     inResult = null;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NzEwNw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392847107", "bodyText": "Braces", "author": "AMashenkov", "createdAt": "2020-03-16T08:19:29Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java", "diffHunk": "@@ -391,6 +396,7 @@ private void addRowsToDisk(boolean forcePlainResult) {\n \n     /** {@inheritDoc} */\n     @Override public void done() {\n+        initMemTracker();\n         if (external != null) {\n             addRowsToDisk(false);", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java\nindex 1243591f59f..6b8d19774bc 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java\n\n@@ -397,21 +397,20 @@ public class H2ManagedLocalResult implements LocalResult {\n     /** {@inheritDoc} */\n     @Override public void done() {\n         initMemTracker();\n-        if (external != null) {\n+        if (external != null)\n             addRowsToDisk(false);\n-        }\n+\n         else {\n-            if (isAnyDistinct()) {\n+            if (isAnyDistinct())\n                 rows = new ArrayList<>(distinctRows.values());\n-            }\n+\n             if (sort != null && limit != 0 && !limitsWereApplied) {\n                 boolean withLimit = limit > 0 && withTiesSortOrder == null;\n-                if (offset > 0 || withLimit) {\n+\n+                if (offset > 0 || withLimit)\n                     sort.sort(rows, offset, withLimit ? limit : rows.size());\n-                }\n-                else {\n+                else\n                     sort.sort(rows);\n-                }\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NzE5OA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392847198", "bodyText": "Braces", "author": "AMashenkov", "createdAt": "2020-03-16T08:19:43Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java", "diffHunk": "@@ -472,6 +478,7 @@ private void trimExternal(int offset, int limit) {\n         ResultExternal temp = external;\n         external = null;\n         temp.reset();\n+        initMemTracker();\n         while (--offset >= 0) {", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java\nindex 1243591f59f..6b8d19774bc 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java\n\n@@ -474,33 +473,44 @@ public class H2ManagedLocalResult implements LocalResult {\n         }\n     }\n \n+    /**\n+     * @param offset Offset.\n+     * @param limit Limit.\n+     */\n     private void trimExternal(int offset, int limit) {\n         ResultExternal temp = external;\n         external = null;\n+\n         temp.reset();\n         initMemTracker();\n-        while (--offset >= 0) {\n+\n+        while (--offset >= 0)\n             temp.next();\n-        }\n+\n         Value[] row = null;\n+\n         while (--limit >= 0) {\n             row = temp.next();\n             rows.add(row);\n+\n             if (!hasAvailableMemory(null,null, row))\n                 addRowsToDisk(true);\n         }\n         if (withTiesSortOrder != null && row != null) {\n             Value[] expected = row;\n+\n             while ((row = temp.next()) != null && withTiesSortOrder.compare(expected, row) == 0) {\n                 rows.add(row);\n                 rowCount++;\n+\n                 if (!hasAvailableMemory(null,null, row))\n                     addRowsToDisk(true);\n             }\n         }\n-        if (external != null) {\n+\n+        if (external != null)\n             addRowsToDisk(true);\n-        }\n+\n         temp.close();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NzYxOQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392847619", "bodyText": "/**\n* @return Query id assigned by {@link RunningQueryManager}. \n*/", "author": "AMashenkov", "createdAt": "2020-03-16T08:20:43Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2QueryInfo.java", "diffHunk": "@@ -108,6 +114,11 @@ public void printLogMessage(IgniteLogger log, String msg, String additionalInfo)\n         printLogMessage(log, null, msg, additionalInfo);\n     }\n \n+    /** @return Query id assigned by {@link RunningQueryManager}. */", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0OTY3Mg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392849672", "bodyText": "Let's either uncomment or remove this.", "author": "AMashenkov", "createdAt": "2020-03-16T08:24:59Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java", "diffHunk": "@@ -174,48 +171,38 @@ public QueryMemoryManager(GridKernalContext ctx) {\n     /**\n      * Query memory tracker factory method.\n      *\n-     * Note: If 'maxQueryMemory' is zero, then {@link QueryMemoryManager#qryQuota}  will be used.\n-     * Note: Negative values are reserved for disable memory tracking.\n+     * Note: If 'maxQueryMemory' is zero, then {@link QueryMemoryManager#qryQuota} will be used.\n      *\n      * @param maxQryMemory Query memory limit in bytes.\n-     * @param qryDesc Query descriptor.\n      * @return Query memory tracker.\n      */\n-    public QueryMemoryTracker createQueryMemoryTracker(long maxQryMemory, String qryDesc) {\n-        assert maxQryMemory >= 0;\n-\n-        if (maxQryMemory == 0)\n-            maxQryMemory = qryQuota;\n-\n+    public GridQueryMemoryMetricProvider createQueryMemoryTracker(long maxQryMemory) {\n         long globalQuota0 = globalQuota;\n \n-        if (maxQryMemory == 0 && globalQuota0 == 0) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"No memory quota configured for the query. \" +\n-                    \"It will be executed without memory tracking: \"  + qryDesc);\n-            }\n-\n-            return null;\n-        }\n+//        if (maxQryMemory == 0 && globalQuota0 == 0 && qryQuota == 0)", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\nindex dbd47db5bee..3d0aa72da77 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java\n\n@@ -179,9 +179,6 @@ public class QueryMemoryManager implements H2MemoryTracker, ManagedGroupByDataFa\n     public GridQueryMemoryMetricProvider createQueryMemoryTracker(long maxQryMemory) {\n         long globalQuota0 = globalQuota;\n \n-//        if (maxQryMemory == 0 && globalQuota0 == 0 && qryQuota == 0)\n-//            return null;\n-\n         if (globalQuota0 > 0 && globalQuota0 < maxQryMemory) {\n             if (log.isInfoEnabled()) {\n                 LT.info(log, \"Query memory quota cannot exceed global memory quota.\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1MjAxNw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392852017", "bodyText": "Is it ok?\nNegative values were allowed for disabling global quota.", "author": "AMashenkov", "createdAt": "2020-03-16T08:29:50Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java", "diffHunk": "@@ -239,7 +226,18 @@ public boolean onQuotaExceeded(long size) {\n      * @param newGlobalQuota New global query quota.\n      */\n     public synchronized void setGlobalQuota(String newGlobalQuota) {\n-        this.globalQuota = U.parseBytes(newGlobalQuota);\n+        long globalQuota0 = U.parseBytes(newGlobalQuota);\n+        long heapSize = Runtime.getRuntime().maxMemory();\n+\n+        A.ensure(\n+            heapSize > globalQuota0,\n+            \"Sql global memory quota can't be more than heap size: heapSize=\"\n+                + heapSize + \", quotaSize=\" + globalQuota0\n+        );\n+\n+        A.ensure(globalQuota0 >= 0, \"Sql global memory quota must be >= 0: quotaSize=\" + globalQuota0);", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwNDg4MQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392904881", "bodyText": "according to IgniteConfiguration#setSqlGlobalMemoryQuota 0 means no quota", "author": "korlov42", "createdAt": "2020-03-16T10:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1MjAxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NDgxOQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392854819", "bodyText": "What do you think about STATE_INITIAL and STATE_CLOSED names?", "author": "AMashenkov", "createdAt": "2020-03-16T08:35:48Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -16,21 +16,33 @@\n \n package org.apache.ignite.internal.processors.query.h2;\n \n-import org.apache.ignite.IgniteLogger;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n import org.apache.ignite.internal.processors.cache.query.IgniteQueryErrorCode;\n+import org.apache.ignite.internal.processors.query.GridQueryMemoryMetricProvider;\n import org.apache.ignite.internal.processors.query.IgniteSQLException;\n+import org.apache.ignite.internal.util.tostring.GridToStringExclude;\n import org.apache.ignite.internal.util.typedef.internal.S;\n \n /**\n  * Query memory tracker.\n  *\n  * Track query memory usage and throws an exception if query tries to allocate memory over limit.\n  */\n-public class QueryMemoryTracker implements H2MemoryTracker {\n-    /** Logger. */\n-    private final IgniteLogger log;\n+public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryMetricProvider {\n+    /** State updater. */\n+    private static final AtomicIntegerFieldUpdater<QueryMemoryTracker> STATE_UPDATER\n+        = AtomicIntegerFieldUpdater.newUpdater(QueryMemoryTracker.class, \"state\");\n+\n+    /** Tracker is not closed and not in the middle of the closing process. */\n+    private static final int NORMALLY_OPERATING_STATE = 0;\n+\n+    /** Tracker is closed or in the middle of the closing process. */\n+    private static final int CLOSING_OR_CLOSED_STATE = 1;", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwNTcyOQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392905729", "bodyText": "ok", "author": "korlov42", "createdAt": "2020-03-16T10:10:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NDgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "chunk": "diff --git a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\nindex 459c4a15213..ff2d0f694bc 100644\n--- a/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n+++ b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java\n\n@@ -36,10 +36,10 @@ public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryMetri\n         = AtomicIntegerFieldUpdater.newUpdater(QueryMemoryTracker.class, \"state\");\n \n     /** Tracker is not closed and not in the middle of the closing process. */\n-    private static final int NORMALLY_OPERATING_STATE = 0;\n+    private static final int STATE_INITIAL = 0;\n \n     /** Tracker is closed or in the middle of the closing process. */\n-    private static final int CLOSING_OR_CLOSED_STATE = 1;\n+    private static final int STATE_CLOSED = 1;\n \n     /** Parent tracker. */\n     @GridToStringExclude\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NTg4MA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392855880", "bodyText": "Missed loop braces", "author": "AMashenkov", "createdAt": "2020-03-16T08:37:37Z", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java", "diffHunk": "@@ -171,6 +170,10 @@ public static Collection parameters() {\n             \"UNION ALL \" +\n             \"SELECT 31, 24, 'TWO-FOUR'\");\n \n+        for (H2ManagedLocalResult res : localResults)", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "chunk": "diff --git a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java\nindex 20d12320913..f221928fe97 100644\n--- a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java\n+++ b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java\n\n@@ -170,9 +170,10 @@ public class LazyOnDmlTest extends AbstractIndexingCommonTest {\n             \"UNION ALL \" +\n             \"SELECT 31, 24, 'TWO-FOUR'\");\n \n-        for (H2ManagedLocalResult res : localResults)\n+        for (H2ManagedLocalResult res : localResults) {\n             if (res.memoryTracker() != null)\n                 res.memoryTracker().close();\n+        }\n \n         localResults.clear();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjA5OQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392856099", "bodyText": "Missed loop braces", "author": "AMashenkov", "createdAt": "2020-03-16T08:38:03Z", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java", "diffHunk": "@@ -208,6 +211,10 @@ else if (cacheMode == CacheMode.REPLICATED)\n \n         }\n         finally {\n+            for (H2ManagedLocalResult res : localResults)", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "chunk": "diff --git a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java\nindex 20d12320913..f221928fe97 100644\n--- a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java\n+++ b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java\n\n@@ -211,9 +212,10 @@ public class LazyOnDmlTest extends AbstractIndexingCommonTest {\n \n         }\n         finally {\n-            for (H2ManagedLocalResult res : localResults)\n+            for (H2ManagedLocalResult res : localResults) {\n                 if (res.memoryTracker() != null)\n                     res.memoryTracker().close();\n+            }\n \n             localResults.clear();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1Njc4MQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392856781", "bodyText": "Braces", "author": "AMashenkov", "createdAt": "2020-03-16T08:39:27Z", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java", "diffHunk": "@@ -103,6 +103,10 @@\n         maxMem = MB;\n         useJdbcV2GlobalQuotaCfg = false;\n \n+        for (H2ManagedLocalResult res : localResults)", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "chunk": "diff --git a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java\nindex 28de4158807..bb2a082b070 100644\n--- a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java\n+++ b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java\n\n@@ -103,9 +103,10 @@ public abstract class AbstractQueryMemoryTrackerSelfTest extends GridCommonAbstr\n         maxMem = MB;\n         useJdbcV2GlobalQuotaCfg = false;\n \n-        for (H2ManagedLocalResult res : localResults)\n+        for (H2ManagedLocalResult res : localResults) {\n             if (res.memoryTracker() != null)\n                 res.memoryTracker().close();\n+        }\n \n         localResults.clear();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjgyNw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392856827", "bodyText": "braces", "author": "AMashenkov", "createdAt": "2020-03-16T08:39:35Z", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java", "diffHunk": "@@ -113,6 +117,10 @@\n \n     /** {@inheritDoc} */\n     @Override protected void afterTest() throws Exception {\n+        for (H2ManagedLocalResult res : localResults)", "originalCommit": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "chunk": "diff --git a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java\nindex 28de4158807..bb2a082b070 100644\n--- a/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java\n+++ b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java\n\n@@ -117,9 +118,10 @@ public abstract class AbstractQueryMemoryTrackerSelfTest extends GridCommonAbstr\n \n     /** {@inheritDoc} */\n     @Override protected void afterTest() throws Exception {\n-        for (H2ManagedLocalResult res : localResults)\n+        for (H2ManagedLocalResult res : localResults) {\n             if (res.memoryTracker() != null)\n                 res.memoryTracker().close();\n+        }\n \n         checkMemoryManagerState(grid(0));\n \n"}}, {"oid": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "url": "https://github.com/gridgain/gridgain/commit/563d4cd38a2c1d3709270fcb5df13c528a731e19", "message": "review fixes", "committedDate": "2020-03-16T11:15:25Z", "type": "forcePushed"}, {"oid": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "url": "https://github.com/gridgain/gridgain/commit/4fb2a479047fbab02d4414132d7d4cc574ffae23", "message": "review fixes", "committedDate": "2020-03-16T13:15:32Z", "type": "commit"}, {"oid": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "url": "https://github.com/gridgain/gridgain/commit/4fb2a479047fbab02d4414132d7d4cc574ffae23", "message": "review fixes", "committedDate": "2020-03-16T13:15:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjI4NA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r393016284", "bodyText": "Why do we count unspill bytes here, but not in trackReads()?", "author": "rkondakov", "createdAt": "2020-03-16T13:19:33Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/TrackableFileIoFactory.java", "diffHunk": "@@ -149,7 +149,23 @@ private void trackWrites(int written) {\n                 metrics.trackOffloadingWritten(written);\n \n             if (tracker != null)\n-                tracker.addTotalWrittenOnDisk(written);\n+                tracker.spill(written);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void clear() throws IOException {\n+            super.clear();\n+\n+            tracker.unspill(tracker.writtenOnDisk());\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void close() throws IOException {\n+            super.close();\n+\n+            tracker.unspill(tracker.writtenOnDisk());", "originalCommit": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNjY1NQ==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r393026655", "bodyText": "because when you read some portion of data it still remains on disk.", "author": "korlov42", "createdAt": "2020-03-16T13:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NTE5Nw==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r393045197", "bodyText": "Ok, I think we need to come to the same understanding of the unspilling term. I've found the only one definition of this word:\n\nWe call the process of flushing a portion\nof the operator\u2019s state to disk spilling and we call the process of bringing back to main\nmemory data spilled to disk unspilling.\n\nI found your definition in the code:\n\nAmount of bytes deleted from disk.\n\nI'm not sure which one is more correct. What do you think?", "author": "rkondakov", "createdAt": "2020-03-16T14:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3NjQ2Mg==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r393076462", "bodyText": "as we have discussed verbally I file a ticket for introducing another metric\nhttps://ggsystems.atlassian.net/browse/GG-28137", "author": "korlov42", "createdAt": "2020-03-16T14:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjI4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjU3OA==", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r393016578", "bodyText": "See question below", "author": "rkondakov", "createdAt": "2020-03-16T13:20:06Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/TrackableFileIoFactory.java", "diffHunk": "@@ -149,7 +149,23 @@ private void trackWrites(int written) {\n                 metrics.trackOffloadingWritten(written);\n \n             if (tracker != null)\n-                tracker.addTotalWrittenOnDisk(written);\n+                tracker.spill(written);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void clear() throws IOException {\n+            super.clear();\n+\n+            tracker.unspill(tracker.writtenOnDisk());", "originalCommit": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "11b374fd4e40c1669174d97da6cb4a599a52ea29", "url": "https://github.com/gridgain/gridgain/commit/11b374fd4e40c1669174d97da6cb4a599a52ea29", "message": "Merge branch 'master' into gg-26598", "committedDate": "2020-03-16T13:37:05Z", "type": "commit"}]}