{"pr_number": 1296, "pr_title": "GG-29802 [IGNITE-13125] SQL regressions framework: Random query generation", "pr_createdAt": "2020-07-09T11:14:37Z", "pr_url": "https://github.com/gridgain/gridgain/pull/1296", "timeline": [{"oid": "e21b61196a05751e1c13881443a6d3833c801618", "url": "https://github.com/gridgain/gridgain/commit/e21b61196a05751e1c13881443a6d3833c801618", "message": "GG-29802 [IGNITE-13125] SQL regressions framework: Random query generation", "committedDate": "2020-07-09T11:12:07Z", "type": "commit"}, {"oid": "a1ed0bb779e245367885f1faa9f2e572a847010e", "url": "https://github.com/gridgain/gridgain/commit/a1ed0bb779e245367885f1faa9f2e572a847010e", "message": "add ability to run against GG releases", "committedDate": "2020-07-30T08:48:01Z", "type": "commit"}, {"oid": "000babc7283ec85c4a2222fb44b5b0a2a7a6bca5", "url": "https://github.com/gridgain/gridgain/commit/000babc7283ec85c4a2222fb44b5b0a2a7a6bca5", "message": "minors", "committedDate": "2020-07-30T08:56:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1Nzk5NA==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462857994", "bodyText": "\"the old one\" means some specific old version. Seems, you mean \"one of previous versions\".\nSo, how old version will be chosen?\nWould you please to give a few words on this?", "author": "AMashenkov", "createdAt": "2020-07-30T09:06:19Z", "path": "modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.compatibility.sql;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.QueryEntity;\n+import org.apache.ignite.compatibility.sql.model.City;\n+import org.apache.ignite.compatibility.sql.model.Company;\n+import org.apache.ignite.compatibility.sql.model.Country;\n+import org.apache.ignite.compatibility.sql.model.Department;\n+import org.apache.ignite.compatibility.sql.model.ModelFactory;\n+import org.apache.ignite.compatibility.sql.model.Person;\n+import org.apache.ignite.compatibility.sql.randomsql.RandomQuerySupplier;\n+import org.apache.ignite.compatibility.sql.randomsql.Schema;\n+import org.apache.ignite.compatibility.sql.randomsql.Table;\n+import org.apache.ignite.compatibility.sql.runner.PredefinedQueriesSupplier;\n+import org.apache.ignite.compatibility.sql.runner.QueryDuelBenchmark;\n+import org.apache.ignite.compatibility.sql.runner.QueryDuelResult;\n+import org.apache.ignite.compatibility.testframework.junits.Dependency;\n+import org.apache.ignite.compatibility.testframework.junits.IgniteCompatibilityAbstractTest;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgnitionEx;\n+import org.apache.ignite.internal.util.typedef.F;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteInClosure;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.multijvm.IgniteProcessProxy;\n+import org.junit.Test;\n+\n+/**\n+ * Test for SQL queries regressions detection.\n+ * It happens in the next way:\n+ * \n+ * 1. Test starts two different Ignite versions: current version and the old one.", "originalCommit": "000babc7283ec85c4a2222fb44b5b0a2a7a6bca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MDA4OQ==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462860089", "bodyText": "It should be passed as System property. See https://github.com/gridgain/gridgain/pull/1296/files#diff-5d8bc8f077dd7b97c909e7fef5b24756R238", "author": "korlov42", "createdAt": "2020-07-30T09:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1Nzk5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5OTE4Nw==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462999187", "bodyText": "Would you please describe here how to run the test? or refer to sys properties? as it is still unclear how  \"old version\" is evaluated.", "author": "AMashenkov", "createdAt": "2020-07-30T13:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1Nzk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "312e274d1eba8a0df6cb4ef55b6f57c0ef3c45c1", "chunk": "diff --git a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java\nindex bde0b092ff8..864d87ac2bb 100644\n--- a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java\n+++ b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java\n\n@@ -135,7 +135,9 @@ public class SqlQueryRegressionsTest extends IgniteCompatibilityAbstractTest {\n         MODEL_FACTORIES.stream().map(ModelFactory::queryEntity).map(Table::new).forEach(SCHEMA::addTable);\n     }\n \n-    /** */\n+    /**\n+     * {@code true} if base is Ignite, {@code false} if it is GG\n+     */\n     private boolean baseIsIgnite;\n \n     /** */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MDEwNQ==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462860105", "bodyText": "{@true} if base is Ignite, {@false} if it is GG ?", "author": "AMashenkov", "createdAt": "2020-07-30T09:10:01Z", "path": "modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.compatibility.sql;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.QueryEntity;\n+import org.apache.ignite.compatibility.sql.model.City;\n+import org.apache.ignite.compatibility.sql.model.Company;\n+import org.apache.ignite.compatibility.sql.model.Country;\n+import org.apache.ignite.compatibility.sql.model.Department;\n+import org.apache.ignite.compatibility.sql.model.ModelFactory;\n+import org.apache.ignite.compatibility.sql.model.Person;\n+import org.apache.ignite.compatibility.sql.randomsql.RandomQuerySupplier;\n+import org.apache.ignite.compatibility.sql.randomsql.Schema;\n+import org.apache.ignite.compatibility.sql.randomsql.Table;\n+import org.apache.ignite.compatibility.sql.runner.PredefinedQueriesSupplier;\n+import org.apache.ignite.compatibility.sql.runner.QueryDuelBenchmark;\n+import org.apache.ignite.compatibility.sql.runner.QueryDuelResult;\n+import org.apache.ignite.compatibility.testframework.junits.Dependency;\n+import org.apache.ignite.compatibility.testframework.junits.IgniteCompatibilityAbstractTest;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgnitionEx;\n+import org.apache.ignite.internal.util.typedef.F;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteInClosure;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.multijvm.IgniteProcessProxy;\n+import org.junit.Test;\n+\n+/**\n+ * Test for SQL queries regressions detection.\n+ * It happens in the next way:\n+ * \n+ * 1. Test starts two different Ignite versions: current version and the old one.\n+ * 2. Then framework executes (randomly chosen/generated) equivalent queries in both versions.\n+ * 3. Execution time for both version is measured and if it exceeds some threshold, the query marked as suspected.\n+ * 4. All suspected queries are submitted to both Ignite versions one more time to get rid of outliers.\n+ * 5. If a poor execution time is reproducible for suspected query,\n+ *    this query is reported as a problematic and test fails because of it.\n+ */\n+@SuppressWarnings(\"TypeMayBeWeakened\")\n+public class SqlQueryRegressionsTest extends IgniteCompatibilityAbstractTest {\n+    /**\n+     * You may wanted to set this seed to particular value in case you will need to troubleshoot particular run. If it\n+     * set to the some value (not {@code null}), it will be used in random generator, otherwise generator will be\n+     * initialized with random seed.\n+     */\n+    private static final Integer SEED = null;\n+\n+    /** */\n+    private static final String BASE_VERSION_PARAM = \"BASE_VERSION\";\n+\n+    /** */\n+    private static final String BASE_IS_IGNITE_PARAM = \"BASE_IS_IGNITE\";\n+\n+    /** */\n+    private static final String SEED_PARAM = \"SEED\";\n+\n+    /** */\n+    private static final String DEFAULT_BASE_VERSION = \"8.7.22\";\n+\n+    /** */\n+    private static final boolean DEFAULT_BASE_IS_IGNITE = false;\n+\n+    /** */\n+    private static final int OLD_JDBC_PORT = 10800;\n+\n+    /** */\n+    private static final int NEW_JDBC_PORT = 10802;\n+\n+    /** */\n+    private static final long BENCHMARK_TIMEOUT = 60_000;\n+\n+    /** */\n+    private static final long WARM_UP_TIMEOUT = 5_000;\n+\n+    /** */\n+    private static final String JDBC_URL = \"jdbc:ignite:thin://127.0.0.1:\";\n+\n+    /** */\n+    private static final TcpDiscoveryIpFinder OLD_VER_FINDER = new TcpDiscoveryVmIpFinder(true) {{\n+        setAddresses(Collections.singleton(\"127.0.0.1:47500..47509\"));\n+    }};\n+\n+    /**  */\n+    private static final TcpDiscoveryVmIpFinder NEW_VER_FINDER = new TcpDiscoveryVmIpFinder(true) {{\n+        setAddresses(Collections.singleton(\"127.0.0.1:47510..47519\"));\n+    }};\n+\n+    /** Model factories. */\n+    private static final List<ModelFactory> MODEL_FACTORIES = Arrays.asList(\n+        new Person.Factory(),\n+        new Department.Factory(),\n+        new Country.Factory(),\n+        new City.Factory(),\n+        new Company.Factory()\n+    );\n+\n+    /** */\n+    private static final Schema SCHEMA = new Schema();\n+\n+    static {\n+        MODEL_FACTORIES.stream().map(ModelFactory::queryEntity).map(Table::new).forEach(SCHEMA::addTable);\n+    }\n+\n+    /** */\n+    private boolean baseIsIgnite;", "originalCommit": "000babc7283ec85c4a2222fb44b5b0a2a7a6bca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MTUwNg==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462861506", "bodyText": "Yep. Will note this in javadoc", "author": "korlov42", "createdAt": "2020-07-30T09:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MDEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "312e274d1eba8a0df6cb4ef55b6f57c0ef3c45c1", "chunk": "diff --git a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java\nindex bde0b092ff8..864d87ac2bb 100644\n--- a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java\n+++ b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/SqlQueryRegressionsTest.java\n\n@@ -135,7 +135,9 @@ public class SqlQueryRegressionsTest extends IgniteCompatibilityAbstractTest {\n         MODEL_FACTORIES.stream().map(ModelFactory::queryEntity).map(Table::new).forEach(SCHEMA::addTable);\n     }\n \n-    /** */\n+    /**\n+     * {@code true} if base is Ignite, {@code false} if it is GG\n+     */\n     private boolean baseIsIgnite;\n \n     /** */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3MzYyNg==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462873626", "bodyText": "Is it copy-pasted from GridTestUtil?", "author": "AMashenkov", "createdAt": "2020-07-30T09:34:02Z", "path": "modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.compatibility.sql.model;\n+\n+import java.util.Random;\n+\n+/** */\n+public final class ModelUtil {\n+    /** */\n+    private static final String ALPHABETH = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890_\";\n+\n+    /**\n+     * Generate random alphabetical string.\n+     *\n+     * @param rnd Random object.\n+     * @param minLen Minimum length of string.\n+     * @param maxLen Maximal length of string.\n+     * @return Random string object.\n+     */\n+    public static String randomString(Random rnd, int minLen, int maxLen) {", "originalCommit": "000babc7283ec85c4a2222fb44b5b0a2a7a6bca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjU0Mw==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462922543", "bodyText": "Have no idea, it's kinda legacy code from Roman. Also it may be artefact of porting from AI codebase.\nIt's better to get rig of ModelUtils at all =)", "author": "korlov42", "createdAt": "2020-07-30T11:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3MzYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjE0OQ==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r463546149", "bodyText": "Well I've got the answer: the AI has not such method, so if we are wanted to run benchmarks against AI, we have to provide it explicitly", "author": "korlov42", "createdAt": "2020-07-31T11:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3MzYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "312e274d1eba8a0df6cb4ef55b6f57c0ef3c45c1", "chunk": "diff --git a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java\ndeleted file mode 100644\nindex a0978674b46..00000000000\n--- a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java\n+++ /dev/null\n\n@@ -1,53 +0,0 @@\n-/*\n- * Copyright 2020 GridGain Systems, Inc. and Contributors.\n- *\n- * Licensed under the GridGain Community Edition License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.ignite.compatibility.sql.model;\n-\n-import java.util.Random;\n-\n-/** */\n-public final class ModelUtil {\n-    /** */\n-    private static final String ALPHABETH = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890_\";\n-\n-    /**\n-     * Generate random alphabetical string.\n-     *\n-     * @param rnd Random object.\n-     * @param minLen Minimum length of string.\n-     * @param maxLen Maximal length of string.\n-     * @return Random string object.\n-     */\n-    public static String randomString(Random rnd, int minLen, int maxLen) {\n-        assert minLen >= 0 : \"minLen >= 0\";\n-        assert maxLen >= minLen : \"maxLen >= minLen\";\n-\n-        int len = maxLen == minLen ? minLen : minLen + rnd.nextInt(maxLen - minLen);\n-\n-        StringBuilder b = new StringBuilder(len);\n-\n-        for (int i = 0; i < len; i++)\n-            b.append(ALPHABETH.charAt(rnd.nextInt(ALPHABETH.length())));\n-\n-        return b.toString();\n-    }\n-\n-    /**\n-     * Default constructor.\n-     */\n-    private ModelUtil() {\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3NzAzNQ==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462877035", "bodyText": "Factory classes looks identically, let's extract base\\abstract class.\nBaseFactory\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static class Factory implements ModelFactory {\n          \n          \n            \n                public static class BaseFactory implements ModelFactory {\n          \n          \n            \n               \n          \n          \n            \n               protected Random rnd;\n          \n          \n            \n               protected final qryEntity;\n          \n          \n            \n               \n          \n          \n            \n                public BaseFactory(QueryEntity ent, String tableName, int count) {\n          \n          \n            \n                ...\n          \n          \n            \n                }\n          \n          \n            \n               \n          \n          \n            \n                public abstract T createRandom();\n          \n          \n            \n               \n          \n          \n            \n                public void init(int seed) {\n          \n          \n            \n                        rnd = new Random(seed);\n          \n          \n            \n                 }\n          \n          \n            \n               \n          \n          \n            \n                 public QueryEntity queryEntity() {\n          \n          \n            \n                        return qryEntity;\n          \n          \n            \n                 }\n          \n          \n            \n            \n          \n          \n            \n               }", "author": "AMashenkov", "createdAt": "2020-07-30T09:39:59Z", "path": "modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/City.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.compatibility.sql.model;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import org.apache.ignite.cache.QueryEntity;\n+import org.apache.ignite.cache.QueryIndex;\n+import org.apache.ignite.cache.QueryIndexType;\n+import org.apache.ignite.cache.query.annotations.QuerySqlField;\n+\n+import static java.util.Collections.singletonList;\n+import static org.apache.ignite.compatibility.sql.model.Country.Factory.COUNTRY_CNT;\n+import static org.apache.ignite.compatibility.sql.model.ModelUtil.randomString;\n+\n+/**\n+ * City model.\n+ */\n+public class City {\n+    /** */\n+    @QuerySqlField\n+    private final String name;\n+\n+    /** */\n+    @QuerySqlField\n+    private final String zipCode;\n+\n+    /** */\n+    @QuerySqlField\n+    private final int countryId;\n+\n+    /** */\n+    @QuerySqlField\n+    private final int population;\n+\n+    /** */\n+    public City(String name, String zipCode, int countryId, int population) {\n+        this.name = name;\n+        this.zipCode = zipCode;\n+        this.countryId = countryId;\n+        this.population = population;\n+    }\n+\n+    /** */\n+    public String name() {\n+        return name;\n+    }\n+\n+    /** */\n+    public String zipCode() {\n+        return zipCode;\n+    }\n+\n+    /** */\n+    public int countryId() {\n+        return countryId;\n+    }\n+\n+    /** */\n+    public int population() {\n+        return population;\n+    }\n+\n+    /** */\n+    public static class Factory implements ModelFactory {", "originalCommit": "000babc7283ec85c4a2222fb44b5b0a2a7a6bca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyNzY3MQ==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462927671", "bodyText": "\ud83d\udc4c", "author": "korlov42", "createdAt": "2020-07-30T11:20:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3NzAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "312e274d1eba8a0df6cb4ef55b6f57c0ef3c45c1", "chunk": "diff --git a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/City.java b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/City.java\nindex 18d716e06c6..4bec21a68ff 100644\n--- a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/City.java\n+++ b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/City.java\n\n@@ -17,7 +17,6 @@\n package org.apache.ignite.compatibility.sql.model;\n \n import java.util.Arrays;\n-import java.util.Random;\n import org.apache.ignite.cache.QueryEntity;\n import org.apache.ignite.cache.QueryIndex;\n import org.apache.ignite.cache.QueryIndexType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3ODE3Nw==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462878177", "bodyText": "Why can't this class be a generic?", "author": "AMashenkov", "createdAt": "2020-07-30T09:41:56Z", "path": "modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.compatibility.sql.model;\n+\n+import org.apache.ignite.cache.QueryEntity;\n+\n+/**\n+ * Factory for model.\n+ */\n+public interface ModelFactory {\n+    /** Inits factory with a random seed. */\n+    public void init(int seed);\n+\n+    /** Creates random model objects. */\n+    public Object createRandom();", "originalCommit": "000babc7283ec85c4a2222fb44b5b0a2a7a6bca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyOTQ4Mg==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462929482", "bodyText": "Think it can, so let's do it", "author": "korlov42", "createdAt": "2020-07-30T11:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3ODE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "312e274d1eba8a0df6cb4ef55b6f57c0ef3c45c1", "chunk": "diff --git a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelFactory.java b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelFactory.java\nindex 17aa3e98a27..a534b1262aa 100644\n--- a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelFactory.java\n+++ b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelFactory.java\n\n@@ -21,12 +21,12 @@ import org.apache.ignite.cache.QueryEntity;\n /**\n  * Factory for model.\n  */\n-public interface ModelFactory {\n+public interface ModelFactory<T> {\n     /** Inits factory with a random seed. */\n     public void init(int seed);\n \n     /** Creates random model objects. */\n-    public Object createRandom();\n+    public T createRandom();\n \n     /** Returns model's query entity. */\n     public QueryEntity queryEntity();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MjA0OQ==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462882049", "bodyText": "Actually this return only \"numeric\" column.\nLet's rename the method to be more specific.\nAlso, I'd suggest to add \"string\" column support (or may be some another varlen type) as well.\nI'm ok to add new types support within separate ticket.", "author": "AMashenkov", "createdAt": "2020-07-30T09:48:59Z", "path": "modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/randomsql/RandomQuerySupplier.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.compatibility.sql.randomsql;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.Ast;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.BiCondition;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.ColumnRef;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.Const;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.InnerJoin;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.Operator;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.Select;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.TableList;\n+import org.apache.ignite.compatibility.sql.randomsql.ast.TableRef;\n+import org.apache.ignite.internal.util.typedef.F;\n+import org.apache.ignite.internal.util.typedef.internal.A;\n+\n+/**\n+ * Supplier which generates random SELECT queries.\n+ */\n+public class RandomQuerySupplier implements Supplier<String> {\n+    /** Generator of unique alias ID. */\n+    private final AtomicLong aliasIdGen = new AtomicLong();\n+\n+    /** */\n+    private final Schema schema;\n+\n+    /**\n+     * Instance of {@link Random}. Should be used for getting every random\n+     * value to ensure repeatability in troubleshooting.\n+     */\n+    private final Random rnd;\n+\n+    /**\n+     * @param schema Schema based on which query will be generated.\n+     * @param seed Seed used to initialize random value generator.\n+     */\n+    public RandomQuerySupplier(Schema schema, int seed) {\n+        A.notNull(schema, \"schema\");\n+\n+        this.schema = schema;\n+\n+        rnd = new Random(seed);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public String get() {\n+        RandomisedQueryContext rndQryCtx = new RandomisedQueryContext(schema);\n+\n+        Select select = rndSelect(rndQryCtx);\n+\n+        StringBuilder sb = new StringBuilder();\n+\n+        select.writeTo(sb);\n+\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Pick up to 4 random tables from provided schema. Some tables in\n+     * result list may appear twice.\n+     *\n+     * @param schema Schema.\n+     * @return List of random tables from schema (perhaps with duplicates).\n+     */\n+    private List<TableRef> rndTables(Schema schema) {\n+        int tblCnt = 1;\n+\n+        for (int i = 0 ; i < 3; i++) {\n+            if (rndWithRatio(2))\n+                tblCnt++;\n+        }\n+\n+        List<Table> tbls = new ArrayList<>(schema.tables());\n+\n+        tbls.addAll(schema.tables()); // add all tables again to get duplicates\n+\n+        Collections.shuffle(tbls, rnd);\n+\n+        List<TableRef> res = new ArrayList<>(tblCnt);\n+\n+        for (Table tbl : tbls.subList(0, tblCnt)) {\n+            String alias = String.valueOf(tbl.name().toLowerCase().charAt(0)) + aliasIdGen.incrementAndGet();\n+\n+            res.add(new TableRef(tbl, alias));\n+        }\n+\n+        return res;\n+    }\n+\n+    /**\n+     * Generates random WHERE expression for provided tables.\n+     *\n+     * @param tbls Tables that should have filter condition.\n+     * @return Ast representing WHERE expression.\n+     */\n+    private Ast rndWhereClause(List<TableRef> tbls) {\n+        assert !tbls.isEmpty();\n+\n+        List<TableRef> tbls0 = new ArrayList<>(tbls);\n+\n+        Ast cond;\n+\n+        if (rndWithRatio(4))\n+            cond = new Const(\"TRUE\");\n+        else {\n+            TableRef tbl = tbls0.get(rnd.nextInt(tbls0.size()));\n+\n+            cond = new BiCondition(\n+                rndColumn(tbl),\n+                new Const(Integer.toString(rnd.nextInt(100))),\n+                Operator.EQUALS\n+            );\n+        }\n+\n+        // all tables connected one by one with an AND expression\n+        while (tbls0.size() >= 2) {\n+            TableRef left = tbls0.remove(0);\n+            TableRef right = tbls0.get(0);\n+\n+            cond = new BiCondition(\n+                cond,\n+                new BiCondition(rndColumn(left), rndColumn(right), Operator.EQUALS),\n+                Operator.AND\n+            );\n+        }\n+\n+        return cond;\n+    }\n+\n+    /**\n+     * Generates random SELECT expression.\n+     *\n+     * @param rndQryCtx Context of randomised query.\n+     * @return Ast representing SELECT expression.\n+     */\n+    private Select rndSelect(RandomisedQueryContext rndQryCtx) {\n+        Ast from = rndFrom(rndQryCtx);\n+        Ast where = from instanceof TableList ? rndWhereClause(rndQryCtx.scopeTables()) : new Const(\"TRUE\");\n+\n+        return new Select().from(from).where(where);\n+    }\n+\n+    /**\n+     * Generates random FROM expression.\n+     *\n+     * @param rndQryCtx Context of randomised query.\n+     * @return Ast representing FROM expression.\n+     */\n+    private Ast rndFrom(RandomisedQueryContext rndQryCtx) {\n+        List<TableRef> tbls = rndTables(rndQryCtx.schema());\n+\n+        assert !F.isEmpty(tbls);\n+\n+        if (tbls.size() == 1 || rndWithRatio(5)) {\n+            tbls.forEach(rndQryCtx::addScopeTable);\n+\n+            return new TableList(tbls);\n+        }\n+\n+        TableRef leftTbl = tbls.get(0);\n+\n+        Ast from = leftTbl;\n+\n+        rndQryCtx.addScopeTable(leftTbl);\n+\n+        for (int i = 1; i < tbls.size(); i++) {\n+            TableRef rightTbl = tbls.get(i);\n+\n+            from = new InnerJoin(from, rightTbl,\n+                new BiCondition(rndColumn(rndScopeTable(rndQryCtx)), rndColumn(rightTbl), Operator.EQUALS));\n+\n+            rndQryCtx.addScopeTable(rightTbl); // add a table to the scope AFTER we created the join condition\n+        }\n+\n+        return from;\n+    }\n+\n+    /**\n+     * Returns random table which was used in FROM expression.\n+     *\n+     * @param rndQryCtx Context of randomised query.\n+     */\n+    private TableRef rndScopeTable(RandomisedQueryContext rndQryCtx) {\n+        if (F.isEmpty(rndQryCtx.scopeTables()))\n+            return null;\n+\n+        List<TableRef> tbls = new ArrayList<>(rndQryCtx.scopeTables());\n+\n+        if (tbls.size() > 1)\n+            Collections.shuffle(tbls, rnd);\n+\n+        return tbls.get(0);\n+    }\n+\n+    /**\n+     * Returns random column from provided table.\n+     *\n+     * @param tbl Table.\n+     * @return Random column.\n+     */\n+    private ColumnRef rndColumn(TableRef tbl) {", "originalCommit": "000babc7283ec85c4a2222fb44b5b0a2a7a6bca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2Mzg1OA==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r462963858", "bodyText": "Let's rename the method to be more specific\n\nOk\n\nI'd suggest to add \"string\" column support\n\nActually this PR is like MVP for regression test. There are plans to improve generator not only with supporting different types, but with generating more meaningful queries, where conditions not totally random, but generated with regard to the value bounds and logic relations.", "author": "korlov42", "createdAt": "2020-07-30T12:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MjA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "312e274d1eba8a0df6cb4ef55b6f57c0ef3c45c1", "chunk": "diff --git a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/randomsql/RandomQuerySupplier.java b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/randomsql/RandomQuerySupplier.java\nindex 1a3dfb7a037..e53b5d389a2 100644\n--- a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/randomsql/RandomQuerySupplier.java\n+++ b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/randomsql/RandomQuerySupplier.java\n\n@@ -127,7 +127,7 @@ public class RandomQuerySupplier implements Supplier<String> {\n             TableRef tbl = tbls0.get(rnd.nextInt(tbls0.size()));\n \n             cond = new BiCondition(\n-                rndColumn(tbl),\n+                rndNumericColumn(tbl),\n                 new Const(Integer.toString(rnd.nextInt(100))),\n                 Operator.EQUALS\n             );\n"}}, {"oid": "312e274d1eba8a0df6cb4ef55b6f57c0ef3c45c1", "url": "https://github.com/gridgain/gridgain/commit/312e274d1eba8a0df6cb4ef55b6f57c0ef3c45c1", "message": "review fixes", "committedDate": "2020-07-30T12:36:39Z", "type": "commit"}, {"oid": "b85e8b39ed2b5b567f2f573d99faedb29017d0ec", "url": "https://github.com/gridgain/gridgain/commit/b85e8b39ed2b5b567f2f573d99faedb29017d0ec", "message": "add h2 dep", "committedDate": "2020-07-30T14:22:01Z", "type": "commit"}, {"oid": "4aa36126be595cf615df782ff0b334fc5e52bbf4", "url": "https://github.com/gridgain/gridgain/commit/4aa36126be595cf615df782ff0b334fc5e52bbf4", "message": "return back ModelUtils", "committedDate": "2020-07-31T07:34:49Z", "type": "commit"}, {"oid": "030ca23e92df3b61be57bb1a3a7d2f371c96cc3f", "url": "https://github.com/gridgain/gridgain/commit/030ca23e92df3b61be57bb1a3a7d2f371c96cc3f", "message": "rename OLD->BASE, fix javadoc", "committedDate": "2020-07-31T09:41:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1Mjc1Nw==", "url": "https://github.com/gridgain/gridgain/pull/1296#discussion_r463552757", "bodyText": "Double license", "author": "AMashenkov", "createdAt": "2020-07-31T11:17:56Z", "path": "modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*", "originalCommit": "030ca23e92df3b61be57bb1a3a7d2f371c96cc3f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d00e0ecd6ff3280d745184a4c72f7e55da64f7d", "chunk": "diff --git a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java\nindex eafb1b52485..e42cc1bcf05 100644\n--- a/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java\n+++ b/modules/compatibility/src/test/java/org/apache/ignite/compatibility/sql/model/ModelUtil.java\n\n@@ -14,22 +14,6 @@\n  * limitations under the License.\n  */\n \n-/*\n- * Copyright 2020 GridGain Systems, Inc. and Contributors.\n- *\n- * Licensed under the GridGain Community Edition License (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n package org.apache.ignite.compatibility.sql.model;\n \n import java.util.Random;\n"}}, {"oid": "0d00e0ecd6ff3280d745184a4c72f7e55da64f7d", "url": "https://github.com/gridgain/gridgain/commit/0d00e0ecd6ff3280d745184a4c72f7e55da64f7d", "message": "remove extra license", "committedDate": "2020-07-31T11:20:06Z", "type": "commit"}, {"oid": "296337d8904cc658b42df6863c8c82b04af3784d", "url": "https://github.com/gridgain/gridgain/commit/296337d8904cc658b42df6863c8c82b04af3784d", "message": "fix styles", "committedDate": "2020-08-03T06:45:39Z", "type": "commit"}, {"oid": "59d438e806bd390160c735b396230910ddf29f5d", "url": "https://github.com/gridgain/gridgain/commit/59d438e806bd390160c735b396230910ddf29f5d", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-29802", "committedDate": "2020-08-03T06:48:55Z", "type": "commit"}, {"oid": "d9f8d6acbacd293483493b3b672cca7176b1e7d7", "url": "https://github.com/gridgain/gridgain/commit/d9f8d6acbacd293483493b3b672cca7176b1e7d7", "message": "revert not related changes", "committedDate": "2020-08-03T12:32:41Z", "type": "commit"}]}