{"pr_number": 1466, "pr_title": "GG-28240 Compression alpha", "pr_createdAt": "2020-09-30T15:08:11Z", "pr_url": "https://github.com/gridgain/gridgain/pull/1466", "timeline": [{"oid": "33ea568890a35beb1c5331c7d74b26f213b89532", "url": "https://github.com/gridgain/gridgain/commit/33ea568890a35beb1c5331c7d74b26f213b89532", "message": "GG-30839 Split into Compression SPI configuration and implementation.", "committedDate": "2020-09-30T15:49:41Z", "type": "forcePushed"}, {"oid": "c17f0258b68710682ecf7fc280d12efea42cc66a", "url": "https://github.com/gridgain/gridgain/commit/c17f0258b68710682ecf7fc280d12efea42cc66a", "message": "GG-30986 Gzip-based CompressionSpi.", "committedDate": "2020-10-02T14:17:38Z", "type": "forcePushed"}, {"oid": "908ce265fc449b6a408bb0ea172adacfebb02bca", "url": "https://github.com/gridgain/gridgain/commit/908ce265fc449b6a408bb0ea172adacfebb02bca", "message": "GG-30986 Gzip-based CompressionSpi.", "committedDate": "2020-10-05T13:57:52Z", "type": "forcePushed"}, {"oid": "78ebe7c9c768a58a3cc9a17a49a8c04b0516cc6a", "url": "https://github.com/gridgain/gridgain/commit/78ebe7c9c768a58a3cc9a17a49a8c04b0516cc6a", "message": "GG-30986 Add tests", "committedDate": "2020-10-07T16:42:31Z", "type": "forcePushed"}, {"oid": "aa6371ea902ca14a5e8e7dd4727e0e0fc8957e0a", "url": "https://github.com/gridgain/gridgain/commit/aa6371ea902ca14a5e8e7dd4727e0e0fc8957e0a", "message": "GG-30986 Add tests", "committedDate": "2020-10-09T14:17:23Z", "type": "forcePushed"}, {"oid": "263c24df2a2263ffec3f483ff73344b628e7a05e", "url": "https://github.com/gridgain/gridgain/commit/263c24df2a2263ffec3f483ff73344b628e7a05e", "message": "GG-30986 Add tests", "committedDate": "2020-10-09T19:27:39Z", "type": "forcePushed"}, {"oid": "3b1d90426cc116926229d9715502d5a4dbaaf694", "url": "https://github.com/gridgain/gridgain/commit/3b1d90426cc116926229d9715502d5a4dbaaf694", "message": "GG-28240 Allow pluggable entry-level compression.", "committedDate": "2020-10-14T14:53:12Z", "type": "forcePushed"}, {"oid": "1aeb096ae67d3e6d6af8af0d693357f3d4e610d8", "url": "https://github.com/gridgain/gridgain/commit/1aeb096ae67d3e6d6af8af0d693357f3d4e610d8", "message": "GG-28240 Allow pluggable entry-level compression.", "committedDate": "2020-10-19T12:50:00Z", "type": "forcePushed"}, {"oid": "d1f0ab565063cc5f0c2ff8af8fc80fc39a130650", "url": "https://github.com/gridgain/gridgain/commit/d1f0ab565063cc5f0c2ff8af8fc80fc39a130650", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version.", "committedDate": "2020-10-20T13:51:08Z", "type": "forcePushed"}, {"oid": "8c88c6e497b027cd44902f6c39aaf3a0fd4ca365", "url": "https://github.com/gridgain/gridgain/commit/8c88c6e497b027cd44902f6c39aaf3a0fd4ca365", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version.", "committedDate": "2020-10-22T18:54:50Z", "type": "forcePushed"}, {"oid": "3aa08ba8ec01dc80b2eb18d185a5758fabf79e6f", "url": "https://github.com/gridgain/gridgain/commit/3aa08ba8ec01dc80b2eb18d185a5758fabf79e6f", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version.", "committedDate": "2020-10-23T14:26:59Z", "type": "forcePushed"}, {"oid": "f69cb7f217866a823a2f71f654cc42d25f5030dd", "url": "https://github.com/gridgain/gridgain/commit/f69cb7f217866a823a2f71f654cc42d25f5030dd", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version.", "committedDate": "2020-10-23T14:38:44Z", "type": "forcePushed"}, {"oid": "3d7e75e8114f5166845d2f94ce6772c53a5cf6e1", "url": "https://github.com/gridgain/gridgain/commit/3d7e75e8114f5166845d2f94ce6772c53a5cf6e1", "message": "Fix tests", "committedDate": "2020-10-26T11:54:35Z", "type": "forcePushed"}, {"oid": "cb5fca9a6850567157afb7955b33ac5268a299f8", "url": "https://github.com/gridgain/gridgain/commit/cb5fca9a6850567157afb7955b33ac5268a299f8", "message": "Additional test coverage.", "committedDate": "2020-10-27T16:14:48Z", "type": "forcePushed"}, {"oid": "bd08f5e3a0ff93ee848066ebc795b84e5c9bcf99", "url": "https://github.com/gridgain/gridgain/commit/bd08f5e3a0ff93ee848066ebc795b84e5c9bcf99", "message": "Additional test coverage.", "committedDate": "2020-10-28T09:58:47Z", "type": "forcePushed"}, {"oid": "fac6db1e358cf3032c1d76ac382531087ba75c6f", "url": "https://github.com/gridgain/gridgain/commit/fac6db1e358cf3032c1d76ac382531087ba75c6f", "message": "Additional test coverage.", "committedDate": "2020-10-28T12:12:31Z", "type": "forcePushed"}, {"oid": "e53c28242b3d0d16e11854016c0e0c1c47788b24", "url": "https://github.com/gridgain/gridgain/commit/e53c28242b3d0d16e11854016c0e0c1c47788b24", "message": "Additional test coverage.", "committedDate": "2020-10-28T16:37:11Z", "type": "forcePushed"}, {"oid": "d02e5704562bd075c0bdefff197ab27c476429f5", "url": "https://github.com/gridgain/gridgain/commit/d02e5704562bd075c0bdefff197ab27c476429f5", "message": "Additional test coverage.", "committedDate": "2020-10-29T09:40:01Z", "type": "forcePushed"}, {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195", "url": "https://github.com/gridgain/gridgain/commit/451f0862c144b5790a2d97504c2d8e4478bc5195", "message": "Additional test coverage.", "committedDate": "2020-10-29T10:33:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNTE2NQ==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514305165", "bodyText": "It is not implementation, it is configuration.", "author": "agura", "createdAt": "2020-10-29T14:32:33Z", "path": "modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java", "diffHunk": "@@ -419,6 +421,11 @@\n      */\n     private boolean encryptionEnabled;\n \n+    /**\n+     * Cache entry compression implementation. If provided, data in cache will be compressed.", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java b/modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java\nindex 49ff6790794..a32e29df528 100644\n--- a/modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java\n+++ b/modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java\n\n@@ -422,7 +422,7 @@ public class CacheConfiguration<K, V> extends MutableConfiguration<K, V> {\n     private boolean encryptionEnabled;\n \n     /**\n-     * Cache entry compression implementation. If provided, data in cache will be compressed.\n+     * Cache entry compression configuration. If provided, data in cache will be compressed.\n      */\n     private EntryCompressionConfiguration entryCompressionCfg;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMDA2Mw==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514310063", "bodyText": "Please, avoid empty comments.", "author": "agura", "createdAt": "2020-10-29T14:38:39Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -52,6 +53,9 @@\n  */\n @IgniteCodeGeneratingFail // Fields arr and start should not be generated by MessageCodeGenerator.\n public final class BinaryObjectImpl extends BinaryObjectExImpl implements Externalizable, KeyCacheObject {\n+    /** */", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java b/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\nindex 247c75a4766..a970ef7e992 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\n\n@@ -53,7 +53,7 @@ import static java.nio.charset.StandardCharsets.UTF_8;\n  */\n @IgniteCodeGeneratingFail // Fields arr and start should not be generated by MessageCodeGenerator.\n public final class BinaryObjectImpl extends BinaryObjectExImpl implements Externalizable, KeyCacheObject {\n-    /** */\n+    /** Marker object signifying that compression of this object was already attempted. */\n     private static final byte[] UNCOMPRESSED = new byte[0];\n \n     /** */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMDE3Mg==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514310172", "bodyText": "Please, avoid empty comments.", "author": "agura", "createdAt": "2020-10-29T14:38:48Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -62,6 +66,10 @@\n     /** */\n     private byte[] arr;\n \n+    /** */", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java b/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\nindex 247c75a4766..a970ef7e992 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\n\n@@ -66,7 +66,7 @@ public final class BinaryObjectImpl extends BinaryObjectExImpl implements Extern\n     /** */\n     private byte[] arr;\n \n-    /** */\n+    /** Compressed form of previous array, ready to be written to page or WAL. Local to a node. */\n     @GridDirectTransient\n     private byte[] compressedArr;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMTc3OA==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514311778", "bodyText": "Here a rule about an empty line after each expression is still valid.", "author": "agura", "createdAt": "2020-10-29T14:40:48Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -168,30 +176,86 @@ public BinaryObjectImpl(BinaryContext ctx, byte[] arr, int start) {\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(ByteBuffer buf) throws IgniteCheckedException {\n-        return putValue(buf, 0, CacheObjectAdapter.objectPutSize(length()));\n+        return putValue(buf, 0, valueBytesLength(null));\n     }\n \n     /** {@inheritDoc} */\n     @Override public int putValue(long addr) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(addr, cacheObjectType(), arr, start, length());\n+        byte type = cacheObjectType();", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java b/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\nindex 247c75a4766..a970ef7e992 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\n\n@@ -182,7 +182,9 @@ public final class BinaryObjectImpl extends BinaryObjectExImpl implements Extern\n     /** {@inheritDoc} */\n     @Override public int putValue(long addr) throws IgniteCheckedException {\n         byte type = cacheObjectType();\n+\n         byte[] arr = this.arr;\n+\n         int len = length();\n \n         if (detached()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMTgzMw==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514311833", "bodyText": "Here a rule about an empty line after each expression is still valid.", "author": "agura", "createdAt": "2020-10-29T14:40:52Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -168,30 +176,86 @@ public BinaryObjectImpl(BinaryContext ctx, byte[] arr, int start) {\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(ByteBuffer buf) throws IgniteCheckedException {\n-        return putValue(buf, 0, CacheObjectAdapter.objectPutSize(length()));\n+        return putValue(buf, 0, valueBytesLength(null));\n     }\n \n     /** {@inheritDoc} */\n     @Override public int putValue(long addr) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(addr, cacheObjectType(), arr, start, length());\n+        byte type = cacheObjectType();\n+        byte[] arr = this.arr;\n+        int len = length();\n+\n+        if (detached()) {\n+            assert compressedArr != null : \"putValue() called before prepareForCache()\";\n+\n+            if (compressedArr.length > 0) {\n+                type = CacheObject.TYPE_BINARY_COMPRESSED;\n+\n+                arr = compressedArr;\n+\n+                len = compressedArr.length;\n+            }\n+        }\n+\n+        return CacheObjectAdapter.putValue(addr, type, arr, start, len);\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(final ByteBuffer buf, int off, int len) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(cacheObjectType(), buf, off, len, arr, start);\n+        byte type = cacheObjectType();", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java b/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\nindex 247c75a4766..a970ef7e992 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java\n\n@@ -182,7 +182,9 @@ public final class BinaryObjectImpl extends BinaryObjectExImpl implements Extern\n     /** {@inheritDoc} */\n     @Override public int putValue(long addr) throws IgniteCheckedException {\n         byte type = cacheObjectType();\n+\n         byte[] arr = this.arr;\n+\n         int len = length();\n \n         if (detached()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMDI0MQ==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514320241", "bodyText": "What if type == TYPE_BINARY_COMPRESSED? Is there any test to verify comparing of compressed keys?", "author": "agura", "createdAt": "2020-10-29T14:51:21Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/tree/CacheDataTree.java", "diffHunk": "@@ -461,38 +462,42 @@ private int compareKeys(KeyCacheObject key, final long link) throws IgniteChecke\n                     if (grp.storeCacheIdInDataPage())\n                         addr += 4; // Skip cache id.\n \n-                    final int len = PageUtils.getInt(addr, 0);\n+                    byte type = PageUtils.getByte(addr, 4);\n \n-                    int lenCmp = Integer.compare(len, bytes.length);\n+                    if (type != CacheObject.TYPE_BINARY_COMPRESSED) {", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NzIyOA==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514957228", "bodyText": "If type is CacheObject.TYPE_BINARY_COMPRESSED then regular non-optimized comparison takes place, such as with keys larger than page - fetch both entries off PDS, unwrap, compare.", "author": "alamar", "createdAt": "2020-10-30T09:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMDI0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMjAwNQ==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514322005", "bodyText": "Why it is critical if compressionStrategy couldn't be closed? May be close-quite semantic is more suitable here. WDYT?", "author": "agura", "createdAt": "2020-10-29T14:53:39Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java", "diffHunk": "@@ -854,6 +862,15 @@ void stopGroup() {\n         preldr.onKernalStop();\n \n         ctx.io().removeCacheGroupHandlers(grpId);\n+\n+        if (compressionStrategy != null) {\n+            try {\n+                compressionStrategy.close();\n+            }\n+            catch (Exception ex) {\n+                throw new IgniteException(ex);", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java\nindex b6aee81b2de..f873708613a 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java\n\n@@ -863,14 +862,7 @@ public class CacheGroupContext {\n \n         ctx.io().removeCacheGroupHandlers(grpId);\n \n-        if (compressionStrategy != null) {\n-            try {\n-                compressionStrategy.close();\n-            }\n-            catch (Exception ex) {\n-                throw new IgniteException(ex);\n-            }\n-        }\n+        U.close(compressionStrategy, log);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMzIzMg==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514333232", "bodyText": "It is really unreadable snippet :) What if we just replace usage below like this:\n if (compressionConfiguration != null) {\n            compressionStrategy = CU.entryCompressionStrategies(ctx).get(compressionConfiguration.getClass())\n                .apply(compressionConfiguration);\n\n            compressionStrategy.start(ctx, cfg);\n }", "author": "agura", "createdAt": "2020-10-29T15:07:27Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java", "diffHunk": "@@ -2461,6 +2467,21 @@ private CacheGroupContext startCacheGroup(\n         boolean persistenceEnabled = recoveryMode || sharedCtx.localNode().isClient() ? desc.persistenceEnabled() :\n             dataRegion != null && dataRegion.config().isPersistenceEnabled();\n \n+        EntryCompressionStrategy compressionStrategy = null;\n+\n+        Map<Class<? extends EntryCompressionConfiguration>,", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java\nindex 2024f2c40d6..15027ded438 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java\n\n@@ -2469,14 +2469,10 @@ public class GridCacheProcessor extends GridProcessorAdapter {\n \n         EntryCompressionStrategy compressionStrategy = null;\n \n-        Map<Class<? extends EntryCompressionConfiguration>,\n-            IgniteClosure<EntryCompressionConfiguration, EntryCompressionStrategy>> compressionStrats =\n-            CU.entryCompressionStrategies(ctx);\n-\n         EntryCompressionConfiguration compressionConfiguration = desc.config().getEntryCompressionConfiguration();\n \n         if (compressionConfiguration != null) {\n-            compressionStrategy = compressionStrats.get(compressionConfiguration.getClass())\n+            compressionStrategy = CU.entryCompressionStrategies(ctx).get(compressionConfiguration.getClass())\n                 .apply(compressionConfiguration);\n \n             compressionStrategy.start(ctx, cfg);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNjY5MQ==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514336691", "bodyText": "Please, don't use nonNull in such cases. Most code uses val != null and there is no any reason for change this style.\nUse nonNull only as simple lambda-expressions (see corresponding javadoc).", "author": "agura", "createdAt": "2020-10-29T15:11:46Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java", "diffHunk": "@@ -2117,6 +2120,29 @@ public static boolean isCacheTemplateName(String cacheName) {\n         return strategies;\n     }\n \n+    /**\n+     * Getting available cache entry compression strategies.\n+     *\n+     * @param kernalCtx Kernal context.\n+     * @return Mapping of configuration class to strategy class.\n+     */\n+    public static Map<Class<? extends EntryCompressionConfiguration>,\n+        IgniteClosure<EntryCompressionConfiguration, EntryCompressionStrategy>>\n+        entryCompressionStrategies(GridKernalContext kernalCtx) {\n+        Map strategies = new HashMap<>();\n+\n+        // Adding strategies from plugins.\n+        EntryCompressionStrategySupplier[] suppliers = kernalCtx.plugins()\n+            .extensions(EntryCompressionStrategySupplier.class);\n+\n+        if (nonNull(suppliers)) {", "originalCommit": "451f0862c144b5790a2d97504c2d8e4478bc5195", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java\nindex e5342990b3d..d20e3c2c364 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java\n\n@@ -2135,7 +2139,7 @@ public class GridCacheUtils {\n         EntryCompressionStrategySupplier[] suppliers = kernalCtx.plugins()\n             .extensions(EntryCompressionStrategySupplier.class);\n \n-        if (nonNull(suppliers)) {\n+        if (suppliers != null) {\n             for (EntryCompressionStrategySupplier supplier : suppliers)\n                 strategies.putAll(supplier.strategies());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyNzM2Mg==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r518127362", "bodyText": "Looks like a copy-paste error here: we pass compressKeys flag when preparing value, not key.", "author": "sergey-chugunov-1985", "createdAt": "2020-11-05T15:14:32Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java", "diffHunk": "@@ -1879,8 +1886,13 @@ private void invoke0(GridCacheContext cctx, CacheSearchRow row, OffheapInvokeClo\n                     return false;\n \n                 for (GridCacheMvccEntryInfo info : hist) {\n+                    CacheObject val = info.value();\n+\n+                    if (val != null)\n+                        val = val.prepareForCache(coCtx, coCtx.compressKeys());", "originalCommit": "2443428061ef22c037c86ee82979657fb6a4a85a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE3ODE2MA==", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r518178160", "bodyText": "Thank you, I will fix.", "author": "alamar", "createdAt": "2020-11-05T16:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyNzM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java\nindex ce13ebbae8c..60a1a35ad04 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java\n\n@@ -1889,7 +1889,7 @@ public class IgniteCacheOffheapManagerImpl implements IgniteCacheOffheapManager\n                     CacheObject val = info.value();\n \n                     if (val != null)\n-                        val = val.prepareForCache(coCtx, coCtx.compressKeys());\n+                        val = val.prepareForCache(coCtx, true);\n \n                     MvccDataRow row = new MvccDataRow(key,\n                         val,\n"}}, {"oid": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "url": "https://github.com/gridgain/gridgain/commit/1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version.", "committedDate": "2020-11-11T13:40:24Z", "type": "commit"}, {"oid": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "url": "https://github.com/gridgain/gridgain/commit/1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version.", "committedDate": "2020-11-11T13:40:24Z", "type": "forcePushed"}]}