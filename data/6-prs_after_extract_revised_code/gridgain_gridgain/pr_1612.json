{"pr_number": 1612, "pr_title": "GG-31881 [IGNITE-12582] Add Spring EL support in Spring Data.", "pr_createdAt": "2020-11-30T10:05:53Z", "pr_url": "https://github.com/gridgain/gridgain/pull/1612", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxOTk3MQ==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547319971", "bodyText": "Context is never used.", "author": "wirtsleg", "createdAt": "2020-12-22T14:50:15Z", "path": "modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -44,6 +49,18 @@\n     /** Ignite instance */\n     private Ignite ignite;\n \n+    /** Spring application context */\n+    private ApplicationContext ctx;", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java b/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\nindex 7d5f0339b78..1f28e4ff726 100644\n--- a/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\n+++ b/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\n\n@@ -49,9 +49,6 @@ public class IgniteRepositoryFactory extends RepositoryFactorySupport {\n     /** Ignite instance */\n     private Ignite ignite;\n \n-    /** Spring application context */\n-    private ApplicationContext ctx;\n-\n     /** Spring application bean factory */\n     private DefaultListableBeanFactory beanFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMDc5MQ==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547320791", "bodyText": "Context is never used.", "author": "wirtsleg", "createdAt": "2020-12-22T14:51:47Z", "path": "modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -45,6 +50,18 @@\n     /** Ignite instance */\n     private Ignite ignite;\n \n+    /** Spring application context */\n+    private ApplicationContext ctx;", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java b/modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java\nindex 49d1704bb39..f6f09cad99c 100644\n--- a/modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java\n+++ b/modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java\n\n@@ -50,9 +50,6 @@ public class IgniteRepositoryFactory extends RepositoryFactorySupport {\n     /** Ignite instance */\n     private Ignite ignite;\n \n-    /** Spring application context */\n-    private ApplicationContext ctx;\n-\n     /** Spring application bean factory */\n     private DefaultListableBeanFactory beanFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMjY5Nw==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547322697", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.ignite = Ignition.start(cfg);\n          \n          \n            \n            \n          \n          \n            \n                    this.ctx = ctx;\n          \n          \n            \n            \n          \n          \n            \n                    this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n          \n          \n            \n            \n          \n          \n            \n                    this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);\n          \n          \n            \n                    this(Ignition.start(cfg), ctx);", "author": "wirtsleg", "createdAt": "2020-12-22T14:55:18Z", "path": "modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -62,8 +85,14 @@ public IgniteRepositoryFactory(Ignite ignite) {\n      *\n      * @param cfg Ignite configuration.\n      */\n-    public IgniteRepositoryFactory(IgniteConfiguration cfg) {\n+    public IgniteRepositoryFactory(IgniteConfiguration cfg, ApplicationContext ctx) {\n         this.ignite = Ignition.start(cfg);\n+\n+        this.ctx = ctx;\n+\n+        this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n+\n+        this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java b/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\nindex 7d5f0339b78..1f28e4ff726 100644\n--- a/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\n+++ b/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\n\n@@ -86,13 +81,7 @@ public class IgniteRepositoryFactory extends RepositoryFactorySupport {\n      * @param cfg Ignite configuration.\n      */\n     public IgniteRepositoryFactory(IgniteConfiguration cfg, ApplicationContext ctx) {\n-        this.ignite = Ignition.start(cfg);\n-\n-        this.ctx = ctx;\n-\n-        this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n-\n-        this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);\n+        this(Ignition.start(cfg), ctx);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMjk3Ng==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547322976", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.ignite = Ignition.start(springCfgPath);\n          \n          \n            \n            \n          \n          \n            \n                    this.ctx = ctx;\n          \n          \n            \n            \n          \n          \n            \n                    this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n          \n          \n            \n            \n          \n          \n            \n                    this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);\n          \n          \n            \n                    this(Ignition.start(springCfgPath), ctx);", "author": "wirtsleg", "createdAt": "2020-12-22T14:55:48Z", "path": "modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -72,8 +101,14 @@ public IgniteRepositoryFactory(IgniteConfiguration cfg) {\n      *\n      * @param springCfgPath A path to Ignite configuration.\n      */\n-    public IgniteRepositoryFactory(String springCfgPath) {\n+    public IgniteRepositoryFactory(String springCfgPath, ApplicationContext ctx) {\n         this.ignite = Ignition.start(springCfgPath);\n+\n+        this.ctx = ctx;\n+\n+        this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n+\n+        this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java b/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\nindex 7d5f0339b78..1f28e4ff726 100644\n--- a/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\n+++ b/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\n\n@@ -102,13 +91,7 @@ public class IgniteRepositoryFactory extends RepositoryFactorySupport {\n      * @param springCfgPath A path to Ignite configuration.\n      */\n     public IgniteRepositoryFactory(String springCfgPath, ApplicationContext ctx) {\n-        this.ignite = Ignition.start(springCfgPath);\n-\n-        this.ctx = ctx;\n-\n-        this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n-\n-        this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);\n+        this(Ignition.start(springCfgPath), ctx);\n     }\n \n     /** {@inheritDoc} */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTMwMA==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547325300", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 *  evaluate the SpEL expression\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param spelExpression SpEL expression\n          \n          \n            \n                 * @return the result of execution of the SpEL expression\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 *  Evaluate the SpEL expression\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param spelExpression SpEL expression\n          \n          \n            \n                 * @return The result of execution of the SpEL expression\n          \n          \n            \n                 */", "author": "wirtsleg", "createdAt": "2020-12-22T14:59:52Z", "path": "modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -107,11 +142,23 @@ public IgniteRepositoryFactory(String springCfgPath) {\n         Assert.hasText(annotation.cacheName(), \"Set a name of an Apache Ignite cache using @RepositoryConfig \" +\n             \"annotation to map this repository to the underlying cache.\");\n \n-        repoToCache.put(repoItf, annotation.cacheName());\n+        String cacheName = evaluateExpression(annotation.cacheName());\n+\n+        repoToCache.put(repoItf, cacheName);\n \n         return super.getRepositoryMetadata(repoItf);\n     }\n \n+    /**\n+     *  evaluate the SpEL expression\n+     *\n+     * @param spelExpression SpEL expression\n+     * @return the result of execution of the SpEL expression\n+     */", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java b/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\nindex 7d5f0339b78..1f28e4ff726 100644\n--- a/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\n+++ b/modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java\n\n@@ -150,10 +133,10 @@ public class IgniteRepositoryFactory extends RepositoryFactorySupport {\n     }\n \n     /**\n-     *  evaluate the SpEL expression\n+     *  Evaluate the SpEL expression\n      *\n      * @param spelExpression SpEL expression\n-     * @return the result of execution of the SpEL expression\n+     * @return The result of execution of the SpEL expression\n      */\n     @NotNull private String evaluateExpression(String spelExpression) {\n         return (String)resolver.evaluate(spelExpression, beanExpressionContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyODE2MA==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547328160", "bodyText": "Javadoc is missing.", "author": "wirtsleg", "createdAt": "2020-12-22T15:05:03Z", "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();\n+    }\n+\n+    @Test\n+    public void testPutGet() {", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java b/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\nindex 3068bfb0027..1f979ed9862 100644\n--- a/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n+++ b/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n\n@@ -33,9 +33,6 @@ public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTe\n     /** Context. */\n     private static AnnotationConfigApplicationContext ctx;\n \n-    /** Number of entries to store */\n-    private static int CACHE_SIZE = 1000;\n-\n     /** {@inheritDoc} */\n     @Override protected void beforeTestsStarted() throws Exception {\n         super.beforeTestsStarted();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyODcxNA==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547328714", "bodyText": "Javadoc is missing.", "author": "wirtsleg", "createdAt": "2020-12-22T15:05:58Z", "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata.misc;\n+\n+/**\n+ * The bean with cache names\n+ */\n+public class CacheNamesBean {\n+\n+    private String personCacheName;", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java b/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\nindex bca5477c408..907e882814c 100644\n--- a/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\n+++ b/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\n\n@@ -20,18 +20,22 @@ package org.apache.ignite.springdata.misc;\n  * The bean with cache names\n  */\n public class CacheNamesBean {\n-\n+    /** Cache name for persons. */\n     private String personCacheName;\n \n     /**\n-     * Get name of cache for persons\n+     * Get name of the cache for persons.\n      *\n-     * @return name of cache\n+     * @return Name of cache.\n      */\n     public String getPersonCacheName() {\n         return personCacheName;\n     }\n \n+    /**\n+     * Set name of the cache for persons.\n+     * @param personCacheName Name of cache.\n+     */\n     public void setPersonCacheName(String personCacheName) {\n         this.personCacheName = personCacheName;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyODgxMA==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547328810", "bodyText": "Javadoc is missing.", "author": "wirtsleg", "createdAt": "2020-12-22T15:06:06Z", "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata.misc;\n+\n+/**\n+ * The bean with cache names\n+ */\n+public class CacheNamesBean {\n+\n+    private String personCacheName;\n+\n+    /**\n+     * Get name of cache for persons\n+     *\n+     * @return name of cache\n+     */\n+    public String getPersonCacheName() {\n+        return personCacheName;\n+    }\n+\n+    public void setPersonCacheName(String personCacheName) {", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java b/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\nindex bca5477c408..907e882814c 100644\n--- a/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\n+++ b/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\n\n@@ -20,18 +20,22 @@ package org.apache.ignite.springdata.misc;\n  * The bean with cache names\n  */\n public class CacheNamesBean {\n-\n+    /** Cache name for persons. */\n     private String personCacheName;\n \n     /**\n-     * Get name of cache for persons\n+     * Get name of the cache for persons.\n      *\n-     * @return name of cache\n+     * @return Name of cache.\n      */\n     public String getPersonCacheName() {\n         return personCacheName;\n     }\n \n+    /**\n+     * Set name of the cache for persons.\n+     * @param personCacheName Name of cache.\n+     */\n     public void setPersonCacheName(String personCacheName) {\n         this.personCacheName = personCacheName;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyOTgxOQ==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547329819", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 *  evaluate the SpEL expression\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param spelExpression SpEL expression\n          \n          \n            \n                 * @return the result of execution of the SpEL expression\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 *  Evaluate the SpEL expression\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param spelExpression SpEL expression\n          \n          \n            \n                 * @return The result of execution of the SpEL expression\n          \n          \n            \n                 */", "author": "wirtsleg", "createdAt": "2020-12-22T15:07:54Z", "path": "modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -108,11 +143,23 @@ public IgniteRepositoryFactory(String springCfgPath) {\n         Assert.hasText(annotation.cacheName(), \"Set a name of an Apache Ignite cache using @RepositoryConfig \" +\n             \"annotation to map this repository to the underlying cache.\");\n \n-        repoToCache.put(repoItf, annotation.cacheName());\n+        String cacheName = evaluateExpression(annotation.cacheName());\n+\n+        repoToCache.put(repoItf, cacheName);\n \n         return super.getRepositoryMetadata(repoItf);\n     }\n \n+    /**\n+     *  evaluate the SpEL expression\n+     *\n+     * @param spelExpression SpEL expression\n+     * @return the result of execution of the SpEL expression\n+     */", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java b/modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java\nindex 49d1704bb39..f6f09cad99c 100644\n--- a/modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java\n+++ b/modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java\n\n@@ -151,10 +134,10 @@ public class IgniteRepositoryFactory extends RepositoryFactorySupport {\n     }\n \n     /**\n-     *  evaluate the SpEL expression\n+     *  Evaluate the SpEL expression\n      *\n      * @param spelExpression SpEL expression\n-     * @return the result of execution of the SpEL expression\n+     * @return The result of execution of the SpEL expression\n      */\n     @NotNull private String evaluateExpression(String spelExpression) {\n         return (String)resolver.evaluate(spelExpression, beanExpressionContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMDEwNg==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547330106", "bodyText": "Javadoc is missing.", "author": "wirtsleg", "createdAt": "2020-12-22T15:08:25Z", "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();\n+    }\n+\n+    @Test", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\nindex 3068bfb0027..2b8f66f481c 100644\n--- a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n+++ b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n\n@@ -33,9 +33,6 @@ public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTe\n     /** Context. */\n     private static AnnotationConfigApplicationContext ctx;\n \n-    /** Number of entries to store */\n-    private static int CACHE_SIZE = 1000;\n-\n     /** {@inheritDoc} */\n     @Override protected void beforeTestsStarted() throws Exception {\n         super.beforeTestsStarted();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMDIwMg==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547330202", "bodyText": "Javadoc is missing.", "author": "wirtsleg", "createdAt": "2020-12-22T15:08:37Z", "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata.misc;\n+\n+/**\n+ * The bean with cache names\n+ */\n+public class CacheNamesBean {\n+\n+    private String personCacheName;", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\nindex 746ab5010c3..907e882814c 100644\n--- a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\n+++ b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\n\n@@ -20,17 +20,22 @@ package org.apache.ignite.springdata.misc;\n  * The bean with cache names\n  */\n public class CacheNamesBean {\n-\n+    /** Cache name for persons. */\n     private String personCacheName;\n \n     /**\n-     *  Get name of cache for persons\n-     * @return name of cache\n+     * Get name of the cache for persons.\n+     *\n+     * @return Name of cache.\n      */\n     public String getPersonCacheName() {\n         return personCacheName;\n     }\n \n+    /**\n+     * Set name of the cache for persons.\n+     * @param personCacheName Name of cache.\n+     */\n     public void setPersonCacheName(String personCacheName) {\n         this.personCacheName = personCacheName;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMDI2MA==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547330260", "bodyText": "Javadoc is missing.", "author": "wirtsleg", "createdAt": "2020-12-22T15:08:43Z", "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata.misc;\n+\n+/**\n+ * The bean with cache names\n+ */\n+public class CacheNamesBean {\n+\n+    private String personCacheName;\n+\n+    /**\n+     *  Get name of cache for persons\n+     * @return name of cache\n+     */\n+    public String getPersonCacheName() {\n+        return personCacheName;\n+    }\n+\n+    public void setPersonCacheName(String personCacheName) {", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\nindex 746ab5010c3..907e882814c 100644\n--- a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\n+++ b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java\n\n@@ -20,17 +20,22 @@ package org.apache.ignite.springdata.misc;\n  * The bean with cache names\n  */\n public class CacheNamesBean {\n-\n+    /** Cache name for persons. */\n     private String personCacheName;\n \n     /**\n-     *  Get name of cache for persons\n-     * @return name of cache\n+     * Get name of the cache for persons.\n+     *\n+     * @return Name of cache.\n      */\n     public String getPersonCacheName() {\n         return personCacheName;\n     }\n \n+    /**\n+     * Set name of the cache for persons.\n+     * @param personCacheName Name of cache.\n+     */\n     public void setPersonCacheName(String personCacheName) {\n         this.personCacheName = personCacheName;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMjU3MQ==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547332571", "bodyText": "Deprecated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ctx.destroy();\n          \n          \n            \n                    ctx.close();", "author": "wirtsleg", "createdAt": "2020-12-22T15:12:56Z", "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java b/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\nindex 3068bfb0027..1f979ed9862 100644\n--- a/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n+++ b/modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n\n@@ -33,9 +33,6 @@ public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTe\n     /** Context. */\n     private static AnnotationConfigApplicationContext ctx;\n \n-    /** Number of entries to store */\n-    private static int CACHE_SIZE = 1000;\n-\n     /** {@inheritDoc} */\n     @Override protected void beforeTestsStarted() throws Exception {\n         super.beforeTestsStarted();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMjc0Mg==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547332742", "bodyText": "Deprecated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ctx.destroy();\n          \n          \n            \n                    ctx.close();", "author": "wirtsleg", "createdAt": "2020-12-22T15:13:12Z", "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\nindex 3068bfb0027..2b8f66f481c 100644\n--- a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n+++ b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n\n@@ -33,9 +33,6 @@ public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTe\n     /** Context. */\n     private static AnnotationConfigApplicationContext ctx;\n \n-    /** Number of entries to store */\n-    private static int CACHE_SIZE = 1000;\n-\n     /** {@inheritDoc} */\n     @Override protected void beforeTestsStarted() throws Exception {\n         super.beforeTestsStarted();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNjQ4Mw==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547336483", "bodyText": "This test has a lot of strange logic.\n\nFills cache with unique and non-unique elements without any reason\nChecks for saving without id\n\nIn my opinion, it should just check repository bean is not null and do 1 put, 1 get (just in case).", "author": "wirtsleg", "createdAt": "2020-12-22T15:19:47Z", "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();\n+    }\n+\n+    @Test\n+    public void testPutGet() {\n+        Person person = new Person(\"some_name\", \"some_surname\");\n+\n+        int id = CACHE_SIZE + 1;\n+\n+        assertEquals(person, repo.save(id, person));\n+\n+        assertTrue(repo.existsById(id));\n+\n+        assertEquals(person, repo.findById(id).get());\n+\n+        try {\n+            repo.save(person);\n+\n+            fail(\"Managed to save a Person without ID\");\n+        }\n+        catch (UnsupportedOperationException e) {\n+            //excepted\n+        }\n+    }", "originalCommit": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "chunk": "diff --git a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\nindex 3068bfb0027..2b8f66f481c 100644\n--- a/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n+++ b/modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java\n\n@@ -33,9 +33,6 @@ public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTe\n     /** Context. */\n     private static AnnotationConfigApplicationContext ctx;\n \n-    /** Number of entries to store */\n-    private static int CACHE_SIZE = 1000;\n-\n     /** {@inheritDoc} */\n     @Override protected void beforeTestsStarted() throws Exception {\n         super.beforeTestsStarted();\n"}}, {"oid": "1dd2828f62ec51f56a0e225ac83672a40bd118dc", "url": "https://github.com/gridgain/gridgain/commit/1dd2828f62ec51f56a0e225ac83672a40bd118dc", "message": "GG-31881 [IGNITE-12582] Add Spring EL support in Spring Data.", "committedDate": "2020-12-24T15:34:41Z", "type": "commit"}, {"oid": "cd5cfc50fba706eaab759af0f59d4998bacf8b87", "url": "https://github.com/gridgain/gridgain/commit/cd5cfc50fba706eaab759af0f59d4998bacf8b87", "message": ".", "committedDate": "2020-12-24T15:34:41Z", "type": "commit"}, {"oid": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "url": "https://github.com/gridgain/gridgain/commit/76ec5ff649042d7ee06b3264f769fe85b8a04aff", "message": "GG-31881 Review fixes", "committedDate": "2020-12-24T15:34:41Z", "type": "commit"}, {"oid": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "url": "https://github.com/gridgain/gridgain/commit/76ec5ff649042d7ee06b3264f769fe85b8a04aff", "message": "GG-31881 Review fixes", "committedDate": "2020-12-24T15:34:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzMzcxMw==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r548833713", "bodyText": "Let's simplify this test a bit.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test\n          \n          \n            \n                public void testFailIfSaveWithoutId() {\n          \n          \n            \n                    assertNotNull(repo);\n          \n          \n            \n            \n          \n          \n            \n                    Person person = new Person(\"some_name\", \"some_surname\");\n          \n          \n            \n            \n          \n          \n            \n                    try {\n          \n          \n            \n                        repo.save(person);\n          \n          \n            \n            \n          \n          \n            \n                        fail(\"Managed to save a Person without ID\");\n          \n          \n            \n                    }\n          \n          \n            \n                    catch (UnsupportedOperationException e) {\n          \n          \n            \n                        //excepted\n          \n          \n            \n                    }\n          \n          \n            \n                @Test(expected = UnsupportedOperationException.class)\n          \n          \n            \n                public void testFailIfSaveWithoutId() {\n          \n          \n            \n                    assertNotNull(repo);\n          \n          \n            \n            \n          \n          \n            \n                    Person person = new Person(\"some_name\", \"some_surname\");\n          \n          \n            \n            \n          \n          \n            \n                    repo.save(person);", "author": "wirtsleg", "createdAt": "2020-12-25T08:34:18Z", "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        assertEquals(0, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.close();\n+    }\n+\n+    /**\n+     * Test that put and get operations are working.\n+     */\n+    @Test\n+    public void testPutGet() {\n+        assertNotNull(repo);\n+\n+        Person person = new Person(\"some_name\", \"some_surname\");\n+\n+        assertEquals(person, repo.save(0, person));\n+\n+        assertTrue(repo.existsById(0));\n+\n+        assertEquals(person, repo.findById(0).get());\n+    }\n+\n+    /**\n+     * Test that saving without an id fails.\n+     */\n+    @Test\n+    public void testFailIfSaveWithoutId() {\n+        assertNotNull(repo);\n+\n+        Person person = new Person(\"some_name\", \"some_surname\");\n+\n+        try {\n+            repo.save(person);\n+\n+            fail(\"Managed to save a Person without ID\");\n+        }\n+        catch (UnsupportedOperationException e) {\n+            //excepted\n+        }", "originalCommit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzMzgwNw==", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r548833807", "bodyText": "And this too.", "author": "wirtsleg", "createdAt": "2020-12-25T08:34:48Z", "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        assertEquals(0, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     * Test that put and get operations are working.\n+     */\n+    @Test\n+    public void testPutGet() {\n+        assertNotNull(repo);\n+\n+        Person person = new Person(\"some_name\", \"some_surname\");\n+\n+        assertEquals(person, repo.save(0, person));\n+\n+        assertTrue(repo.existsById(0));\n+\n+        assertEquals(person, repo.findById(0).get());\n+    }\n+\n+    /**\n+     * Test that saving without an id fails.\n+     */\n+    @Test\n+    public void testFailIfSaveWithoutId() {", "originalCommit": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}