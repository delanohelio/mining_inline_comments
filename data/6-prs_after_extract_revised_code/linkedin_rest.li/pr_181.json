{"pr_number": 181, "pr_title": "ClusterInfoProvider API and implementation", "pr_createdAt": "2020-02-20T23:59:23Z", "pr_url": "https://github.com/linkedin/rest.li/pull/181", "timeline": [{"oid": "144af8ba1f7a7ad93b56678c81cabb7e3007c092", "url": "https://github.com/linkedin/rest.li/commit/144af8ba1f7a7ad93b56678c81cabb7e3007c092", "message": "ClusterInfoProvider API and implementation", "committedDate": "2020-02-21T00:31:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1MzgzMQ==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r382653831", "bodyText": "what do you think about providing a fully async method? One idea is that I could provide the async as a base, and the blocking/sync as a convenience.", "author": "davidhoa", "createdAt": "2020-02-21T15:44:45Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+\n+\n+/**\n+ * ClusterInfoProvider provides a mechanism to access detailed cluster information from the D2 infrastructure.\n+ *\n+ * @author David Hoa\n+ * @version $Revision: $\n+ */\n+public interface ClusterInfoProvider\n+{\n+  String HTTPS_SCHEME = \"https\";\n+  int DEFAULT_PARTITION = 0;\n+\n+  /**\n+   * Obtain d2 cluster count\n+   * @return int\n+   */\n+  int getClusterCount(String clusterName, String scheme, int partitionId) throws ServiceUnavailableException;", "originalCommit": "144af8ba1f7a7ad93b56678c81cabb7e3007c092", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "chunk": "diff --git a/d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java b/d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java\nindex 70baef8d0..550ff24b3 100644\n--- a/d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java\n+++ b/d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java\n\n@@ -17,6 +17,7 @@\n package com.linkedin.d2.balancer.util;\n \n import com.linkedin.d2.balancer.ServiceUnavailableException;\n+import com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor;\n \n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MjA5NA==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383582094", "bodyText": "We can inline this.", "author": "zhang-chris", "createdAt": "2020-02-24T23:49:23Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java", "diffHunk": "@@ -866,6 +869,30 @@ private void die(Callback<?> callback, String serviceName, String message)\n     callback.onError(new ServiceUnavailableException(serviceName, message));\n   }\n \n+  @Override\n+  public int getClusterCount(String clusterName, String scheme, int partitionId) throws ServiceUnavailableException\n+  {\n+    FutureCallback<Integer> clusterCountFutureCallback = new FutureCallback<>();\n+    Runnable callback = () ->", "originalCommit": "144af8ba1f7a7ad93b56678c81cabb7e3007c092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwOTM2NQ==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383609365", "bodyText": "done.", "author": "davidhoa", "createdAt": "2020-02-25T01:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MjA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "chunk": "diff --git a/d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java b/d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java\nindex 8374b31e4..b48d7f7b5 100644\n--- a/d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java\n+++ b/d2/src/main/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancer.java\n\n@@ -873,22 +873,31 @@ public class SimpleLoadBalancer implements LoadBalancer, HashRingProvider, Clien\n   public int getClusterCount(String clusterName, String scheme, int partitionId) throws ServiceUnavailableException\n   {\n     FutureCallback<Integer> clusterCountFutureCallback = new FutureCallback<>();\n-    Runnable callback = () ->\n+\n+    _state.listenToCluster(clusterName, (type, name) ->\n     {\n-      Set<URI> uris = _state.getUriProperties(clusterName).getProperty().getUriBySchemeAndPartition(scheme, partitionId);\n-      // the uris will be null if there are no Uris announced for this scheme and/or partition. Return zero in this case.\n-      clusterCountFutureCallback.onSuccess((uris != null) ? uris.size() : 0);\n-    };\n-    _state.listenToCluster(clusterName, (type, name) -> callback.run());\n+      if (_state.getUriProperties(clusterName).getProperty() != null)\n+      {\n+        Set<URI> uris =\n+            _state.getUriProperties(clusterName).getProperty().getUriBySchemeAndPartition(scheme, partitionId);\n+\n+        clusterCountFutureCallback.onSuccess((uris != null) ? uris.size() : 0);\n+      }\n+      else\n+      {\n+        // there won't be a UriProperties if there are no Uris announced for this scheme and/or partition. Return zero in this case.\n+        clusterCountFutureCallback.onSuccess(0);\n+      }\n+    });\n \n     try\n     {\n       return clusterCountFutureCallback.get(_timeout, _unit);\n     }\n-    catch (ExecutionException | TimeoutException | InterruptedException e)\n+    catch (ExecutionException | TimeoutException | IllegalStateException | InterruptedException e )\n     {\n       die(\"ClusterInfo\", \"PEGA_1017, unable to retrieve cluster count for cluster: \" + clusterName +\n-          \", scheme: \" + scheme + \", partition: \" + partitionId + \", exception: \" + e.getMessage());\n+          \", scheme: \" + scheme + \", partition: \" + partitionId + \", exception: \" + e);\n       return -1;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NjMyMA==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383586320", "bodyText": "Are there public static variables for these already defined somewhere that we can use?", "author": "zhang-chris", "createdAt": "2020-02-25T00:02:23Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+   Copyright (c) 2019 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.util;\n+\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+\n+\n+/**\n+ * ClusterInfoProvider provides a mechanism to access detailed cluster information from the D2 infrastructure.\n+ *\n+ * @author David Hoa\n+ * @version $Revision: $\n+ */\n+public interface ClusterInfoProvider\n+{\n+  String HTTPS_SCHEME = \"https\";\n+  int DEFAULT_PARTITION = 0;", "originalCommit": "144af8ba1f7a7ad93b56678c81cabb7e3007c092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDA4NA==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383610084", "bodyText": "I switched to using DefaultPartitionAccessor.DEFAULT_PARTITION_ID, thanks for the suggestion. However, I did not find one for HTTPS_SCHEME. I added it to PropertyKeys, didn't find a better place for it.", "author": "davidhoa", "createdAt": "2020-02-25T01:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NjMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "chunk": "diff --git a/d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java b/d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java\nindex 70baef8d0..550ff24b3 100644\n--- a/d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java\n+++ b/d2/src/main/java/com/linkedin/d2/balancer/util/ClusterInfoProvider.java\n\n@@ -17,6 +17,7 @@\n package com.linkedin.d2.balancer.util;\n \n import com.linkedin.d2.balancer.ServiceUnavailableException;\n+import com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor;\n \n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzEzOQ==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383587139", "bodyText": "expand imports", "author": "zhang-chris", "createdAt": "2020-02-25T00:05:21Z", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -101,20 +101,27 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n+import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n import org.testng.annotations.AfterSuite;\n import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.*;", "originalCommit": "144af8ba1f7a7ad93b56678c81cabb7e3007c092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDE0MA==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383610140", "bodyText": "done.", "author": "davidhoa", "createdAt": "2020-02-25T01:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "chunk": "diff --git a/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java b/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\nindex 652e7efea..d227d1d23 100644\n--- a/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\n+++ b/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\n\n@@ -110,7 +109,7 @@ import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n-import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.*;\n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.DEFAULT_PARTITION_ID;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzY0MA==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383587640", "bodyText": "new Object[] is unnecessary.", "author": "zhang-chris", "createdAt": "2020-02-25T00:06:57Z", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -155,6 +162,87 @@ public void doOneTimeTearDown() throws IOException\n     }\n   }\n \n+  @DataProvider\n+  public Object[][] provideKeys()\n+  {\n+    return new Object[][] {\n+        // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n+        new Object[] {0, 3, 0, 3, 0, 0},\n+        new Object[] {3, 0, 3, 0, 0, 0},\n+        new Object[] {1, 1, 1, 1, 0, 0},\n+        new Object[] {0, 0, 0, 0, 0, 0},\n+        // alter the partitions to check\n+        new Object[] {0, 3, 0, 0, 0, 1},\n+        new Object[] {3, 0, 0, 0, 0, 1},\n+        new Object[] {1, 1, 0, 0, 0, 2},\n+        new Object[] {0, 0, 0, 0, 0, 1},\n+        // alter the partitions to add and check to match\n+        new Object[] {0, 3, 0, 3, 1, 1},\n+        new Object[] {3, 0, 3, 0, 1, 1},\n+        new Object[] {1, 1, 1, 1, 2, 2},\n+        new Object[] {0, 0, 0, 0, 1, 1}", "originalCommit": "144af8ba1f7a7ad93b56678c81cabb7e3007c092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDE5MA==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r383610190", "bodyText": "done", "author": "davidhoa", "createdAt": "2020-02-25T01:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "chunk": "diff --git a/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java b/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\nindex 652e7efea..d227d1d23 100644\n--- a/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\n+++ b/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\n\n@@ -167,20 +166,20 @@ public class SimpleLoadBalancerTest\n   {\n     return new Object[][] {\n         // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n-        new Object[] {0, 3, 0, 3, 0, 0},\n-        new Object[] {3, 0, 3, 0, 0, 0},\n-        new Object[] {1, 1, 1, 1, 0, 0},\n-        new Object[] {0, 0, 0, 0, 0, 0},\n+        {0, 3, 0, 3, 0, 0},\n+        {3, 0, 3, 0, 0, 0},\n+        {1, 1, 1, 1, 0, 0},\n+        {0, 0, 0, 0, 0, 0},\n         // alter the partitions to check\n-        new Object[] {0, 3, 0, 0, 0, 1},\n-        new Object[] {3, 0, 0, 0, 0, 1},\n-        new Object[] {1, 1, 0, 0, 0, 2},\n-        new Object[] {0, 0, 0, 0, 0, 1},\n+        {0, 3, 0, 0, 0, 1},\n+        {3, 0, 0, 0, 0, 1},\n+        {1, 1, 0, 0, 0, 2},\n+        {0, 0, 0, 0, 0, 1},\n         // alter the partitions to add and check to match\n-        new Object[] {0, 3, 0, 3, 1, 1},\n-        new Object[] {3, 0, 3, 0, 1, 1},\n-        new Object[] {1, 1, 1, 1, 2, 2},\n-        new Object[] {0, 0, 0, 0, 1, 1}\n+        {0, 3, 0, 3, 1, 1},\n+        {3, 0, 3, 0, 1, 1},\n+        {1, 1, 1, 1, 2, 2},\n+        {0, 0, 0, 0, 1, 1}\n     };\n   }\n \n"}}, {"oid": "21f210b824a63d3b3c57f1804bbf30e1755ce8d4", "url": "https://github.com/linkedin/rest.li/commit/21f210b824a63d3b3c57f1804bbf30e1755ce8d4", "message": "ClusterInfoProvider API and implementation", "committedDate": "2020-02-25T01:26:16Z", "type": "commit"}, {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "url": "https://github.com/linkedin/rest.li/commit/393f5b68a57f5bdfba17dc4da6c9894740e3e534", "message": "address'ed zhang-chris review comments.", "committedDate": "2020-02-25T01:26:17Z", "type": "commit"}, {"oid": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "url": "https://github.com/linkedin/rest.li/commit/393f5b68a57f5bdfba17dc4da6c9894740e3e534", "message": "address'ed zhang-chris review comments.", "committedDate": "2020-02-25T01:26:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MjY4MA==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384252680", "bodyText": "reference static variables", "author": "zhang-chris", "createdAt": "2020-02-26T03:07:05Z", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -101,20 +100,27 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n+import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n import org.testng.annotations.AfterSuite;\n import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import static com.linkedin.d2.balancer.util.partitions.DefaultPartitionAccessor.DEFAULT_PARTITION_ID;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n public class SimpleLoadBalancerTest\n {\n+  private static final String CLUSTER1_NAME = \"cluster-1\";\n+  private static final String HTTP_SCHEME = \"http\";\n+  private static final String HTTPS_SCHEME = \"https\";", "originalCommit": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODQ3MQ==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384308471", "bodyText": "done.", "author": "davidhoa", "createdAt": "2020-02-26T07:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MjY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "chunk": "diff --git a/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java b/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\nindex d227d1d23..ef3046727 100644\n--- a/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\n+++ b/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\n\n@@ -100,7 +100,6 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n-import javafx.concurrent.Service;\n import javax.annotation.Nonnull;\n import org.apache.commons.io.FileUtils;\n import org.testng.Assert;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1Mjg3Nw==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384252877", "bodyText": "-> new MockStore<>()\nHere and everywhere else", "author": "zhang-chris", "createdAt": "2020-02-26T03:08:05Z", "path": "d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java", "diffHunk": "@@ -155,6 +161,87 @@ public void doOneTimeTearDown() throws IOException\n     }\n   }\n \n+  @DataProvider\n+  public Object[][] provideKeys()\n+  {\n+    return new Object[][] {\n+        // numHttp, numHttps, expectedNumHttp, expectedNumHttps, partitionIdForAdd, partitionIdForCheck\n+        {0, 3, 0, 3, 0, 0},\n+        {3, 0, 3, 0, 0, 0},\n+        {1, 1, 1, 1, 0, 0},\n+        {0, 0, 0, 0, 0, 0},\n+        // alter the partitions to check\n+        {0, 3, 0, 0, 0, 1},\n+        {3, 0, 0, 0, 0, 1},\n+        {1, 1, 0, 0, 0, 2},\n+        {0, 0, 0, 0, 0, 1},\n+        // alter the partitions to add and check to match\n+        {0, 3, 0, 3, 1, 1},\n+        {3, 0, 3, 0, 1, 1},\n+        {1, 1, 1, 1, 2, 2},\n+        {0, 0, 0, 0, 1, 1}\n+    };\n+  }\n+\n+  @Test(dataProvider = \"provideKeys\")\n+  public void testClusterInfoProvider(int numHttp, int numHttps, int expectedNumHttp, int expectedNumHttps,\n+      int partitionIdForAdd, int partitionIdForCheck)\n+      throws InterruptedException, ExecutionException, ServiceUnavailableException\n+  {\n+    Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n+        new HashMap<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>>();\n+    Map<String, TransportClientFactory> clientFactories =\n+        new HashMap<String, TransportClientFactory>();\n+\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<ServiceProperties>();", "originalCommit": "393f5b68a57f5bdfba17dc4da6c9894740e3e534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODY5OQ==", "url": "https://github.com/linkedin/rest.li/pull/181#discussion_r384308699", "bodyText": "I'm only gonna modify this function. Doing it for all others is a cleanup task that shouldn't be done with this RB, it'd obfuscate what I really added here.", "author": "davidhoa", "createdAt": "2020-02-26T07:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1Mjg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "chunk": "diff --git a/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java b/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\nindex d227d1d23..ef3046727 100644\n--- a/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\n+++ b/d2/src/test/java/com/linkedin/d2/balancer/simple/SimpleLoadBalancerTest.java\n\n@@ -189,17 +186,16 @@ public class SimpleLoadBalancerTest\n       throws InterruptedException, ExecutionException, ServiceUnavailableException\n   {\n     Map<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>> loadBalancerStrategyFactories =\n-        new HashMap<String, LoadBalancerStrategyFactory<? extends LoadBalancerStrategy>>();\n-    Map<String, TransportClientFactory> clientFactories =\n-        new HashMap<String, TransportClientFactory>();\n+        new HashMap<>();\n+    Map<String, TransportClientFactory> clientFactories = new HashMap<>();\n \n-    MockStore<ServiceProperties> serviceRegistry = new MockStore<ServiceProperties>();\n-    MockStore<ClusterProperties> clusterRegistry = new MockStore<ClusterProperties>();\n-    MockStore<UriProperties> uriRegistry = new MockStore<UriProperties>();\n+    MockStore<ServiceProperties> serviceRegistry = new MockStore<>();\n+    MockStore<ClusterProperties> clusterRegistry = new MockStore<>();\n+    MockStore<UriProperties> uriRegistry = new MockStore<>();\n \n     loadBalancerStrategyFactories.put(\"degrader\", new DegraderLoadBalancerStrategyFactoryV3());\n-    clientFactories.put(HTTP_SCHEME, new DoNothingClientFactory());\n-    clientFactories.put(HTTPS_SCHEME, new DoNothingClientFactory());\n+    clientFactories.put(PropertyKeys.HTTP_SCHEME, new DoNothingClientFactory());\n+    clientFactories.put(PropertyKeys.HTTPS_SCHEME, new DoNothingClientFactory());\n \n     SimpleLoadBalancerState state =\n         new SimpleLoadBalancerState(new SynchronousExecutorService(),\n"}}, {"oid": "2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "url": "https://github.com/linkedin/rest.li/commit/2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "message": "address review comments.", "committedDate": "2020-02-26T07:19:52Z", "type": "commit"}, {"oid": "2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "url": "https://github.com/linkedin/rest.li/commit/2b0d981d63a0bb15f3e8a74b55da8c7fcd551ed1", "message": "address review comments.", "committedDate": "2020-02-26T07:19:52Z", "type": "forcePushed"}, {"oid": "0d6a01f37eb428678169257f4dbae1644a34a830", "url": "https://github.com/linkedin/rest.li/commit/0d6a01f37eb428678169257f4dbae1644a34a830", "message": "Merge branch 'master' into feature/ClusterInfoProvider", "committedDate": "2020-02-26T07:21:32Z", "type": "commit"}, {"oid": "e214579ae76e6181cb66f757c24dc7ad6d7db79c", "url": "https://github.com/linkedin/rest.li/commit/e214579ae76e6181cb66f757c24dc7ad6d7db79c", "message": "Merge branch 'master' into feature/ClusterInfoProvider", "committedDate": "2020-02-26T19:02:30Z", "type": "commit"}]}