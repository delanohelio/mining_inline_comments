{"pr_number": 385, "pr_title": "add optional set schema path suffix in file resolver", "pr_createdAt": "2020-08-17T02:31:33Z", "pr_url": "https://github.com/linkedin/rest.li/pull/385", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTA3Mg==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471225072", "bodyText": "It should be \"prefix\" not \"suffix\".", "author": "nickibi", "createdAt": "2020-08-17T04:25:35Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java", "diffHunk": "@@ -68,6 +68,12 @@\n    */\n   public static final String DEFAULT_EXTENSION = SchemaParser.FILE_EXTENSION;\n \n+  /**\n+   * The file path suffix for different types of schemas. Default is {@link InternalConstants#PEGASUS_DIR_IN_JAR}\n+   * Ex \"pegasus\" for data or \"extensions\" for relationship extension schema files\n+   */\n+  private String _schemasPathSuffix = InternalConstants.PEGASUS_DIR_IN_JAR;", "originalCommit": "cc2dc532b2edde189f292ed38b25295646671a53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MzA2Ng==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471293066", "bodyText": "its suffix to dir path and prefix to file name", "author": "aman1309", "createdAt": "2020-08-17T07:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5MjM2Mw==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471792363", "bodyText": "The path can be \"/pegasus/foo/bar/...\" calling it suffix doesn't sound right to me.", "author": "nickibi", "createdAt": "2020-08-17T21:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNTI0MQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471835241", "bodyText": "removed suffix", "author": "aman1309", "createdAt": "2020-08-17T23:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ea54079d66947e632330c72f613749a05cf6920e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\nindex 3008d8f3a..fcb6e8219 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n\n@@ -69,10 +68,10 @@ public class FileDataSchemaResolver extends AbstractDataSchemaResolver\n   public static final String DEFAULT_EXTENSION = SchemaParser.FILE_EXTENSION;\n \n   /**\n-   * The file path suffix for different types of schemas. Default is {@link InternalConstants#PEGASUS_DIR_IN_JAR}\n+   * The file path suffix for different types of schemas. Default is {@link SchemaDirLocation#pegasus}\n    * Ex \"pegasus\" for data or \"extensions\" for relationship extension schema files\n    */\n-  private String _schemasPathSuffix = InternalConstants.PEGASUS_DIR_IN_JAR;\n+  private SchemaDirLocation _schemasDirLocation = SchemaDirLocation.pegasus;\n \n   /**\n    * Constructor.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTExNQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471225115", "bodyText": "I think we should call it \"setSchemasDirectory\", same for get method.", "author": "nickibi", "createdAt": "2020-08-17T04:25:48Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java", "diffHunk": "@@ -184,6 +190,24 @@ public void setPaths(List<String> paths)\n     return _paths;\n   }\n \n+  /**\n+   * Return the current file path suffix for schemas location dir\n+   *\n+   * @return the current search paths.\n+   */\n+  public String getSchemasPathSuffix() {\n+    return _schemasPathSuffix;\n+  }\n+\n+  /**\n+   * Sets the file path suffix for schemas location dir\n+   *\n+   * @param schemasPathSuffix path suffix.\n+   */\n+  public void setSchemasPathSuffix(String schemasPathSuffix) {", "originalCommit": "cc2dc532b2edde189f292ed38b25295646671a53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MzI4NQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471293285", "bodyText": "updated to setSchemasDirPathSuffix", "author": "aman1309", "createdAt": "2020-08-17T07:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea54079d66947e632330c72f613749a05cf6920e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\nindex 3008d8f3a..fcb6e8219 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n\n@@ -195,17 +194,20 @@ public class FileDataSchemaResolver extends AbstractDataSchemaResolver\n    *\n    * @return the current search paths.\n    */\n-  public String getSchemasPathSuffix() {\n-    return _schemasPathSuffix;\n+  public SchemaDirLocation getSchemasDirLocation()\n+  {\n+    return _schemasDirLocation;\n   }\n \n   /**\n-   * Sets the file path suffix for schemas location dir\n+   * Sets the file path suffix for schemas location dir.\n+   * If not set Defaults to {@link SchemaDirLocation#pegasus}\n    *\n-   * @param schemasPathSuffix path suffix.\n+   * @param schemasDirLocation path suffix.\n    */\n-  public void setSchemasPathSuffix(String schemasPathSuffix) {\n-    _schemasPathSuffix = schemasPathSuffix;\n+  public void setSchemasDirLocation(SchemaDirLocation schemasDirLocation)\n+  {\n+    _schemasDirLocation = schemasDirLocation;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTgzMw==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471225833", "bodyText": "Add some comment for this use case. Also update the test comment - (line 73-76)", "author": "nickibi", "createdAt": "2020-08-17T04:29:17Z", "path": "data/src/test/java/com/linkedin/data/schema/resolver/TestFileDataSchemaResolver.java", "diffHunk": "@@ -83,6 +85,12 @@ public void testJarResolution() throws IOException\n     Assert.assertNotNull(schema);\n     Assert.assertTrue(schema.getProperties().containsKey(\"legit\"));\n     Assert.assertFalse(schema.getProperties().containsKey(\"impostor\"));\n+    // Assert extension schemas are not searched.\n+    Assert.assertNull(resolver.findDataSchema(\"com.example.models.FooExtension\", new StringBuilder()));\n+\n+    resolver.setSchemasPathSuffix(InternalConstants.PEGASUS_EXTENSIONS_DIR_IN_JAR);", "originalCommit": "cc2dc532b2edde189f292ed38b25295646671a53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea54079d66947e632330c72f613749a05cf6920e", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/resolver/TestFileDataSchemaResolver.java b/data/src/test/java/com/linkedin/data/schema/resolver/TestFileDataSchemaResolver.java\nindex bcdfb2396..67e82cf1b 100644\n--- a/data/src/test/java/com/linkedin/data/schema/resolver/TestFileDataSchemaResolver.java\n+++ b/data/src/test/java/com/linkedin/data/schema/resolver/TestFileDataSchemaResolver.java\n\n@@ -88,7 +89,8 @@ public class TestFileDataSchemaResolver\n     // Assert extension schemas are not searched.\n     Assert.assertNull(resolver.findDataSchema(\"com.example.models.FooExtension\", new StringBuilder()));\n \n-    resolver.setSchemasPathSuffix(InternalConstants.PEGASUS_EXTENSIONS_DIR_IN_JAR);\n+    // Assert that schemas are resolved from provided directory path\n+    resolver.setSchemasDirLocation(SchemaDirLocation.extensions);\n     schema = resolver.findDataSchema(\"com.example.models.FooExtension\", new StringBuilder());\n     Assert.assertTrue(schema.getProperties().containsKey(\"legit\"));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTkxNg==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471225916", "bodyText": "We support /pegasus directory by default. Now we also want to support /extensions directory if configuration is provided. What will happen if user pass neither \"pegasus\" nor \"extensions\" in the set method? Shall we provide some check here? Also we should update this information in the set method java doc, so users could know what directories are supported.", "author": "nickibi", "createdAt": "2020-08-17T04:29:44Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java", "diffHunk": "@@ -241,7 +265,7 @@ protected DataSchemaLocation transform(String path)\n           StringBuilder builder = new StringBuilder();\n           // within a JAR file, files are treated as resources. Thus, we should lookup using the resource separator\n           // character, which is '/'\n-          builder.append(InternalConstants.PEGASUS_DIR_IN_JAR)\n+          builder.append(_schemasPathSuffix)", "originalCommit": "cc2dc532b2edde189f292ed38b25295646671a53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5NTMzMg==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471295332", "bodyText": "_schemasPathSuffix is initialized with default \"pegasus\". Had added the comments on field now added the same on setter method", "author": "aman1309", "createdAt": "2020-08-17T07:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0ODA5Mg==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471548092", "bodyText": "The default one can be overridden by any value passed in the set method. For example, resolver.setSchemaDirectory(\"\") or resolver.setSchemaDirectory(\"foo\"). We don't provide any constrains, just pass whatever user pass in the set method and use it as the directory doesn't seem right. Any schemas placed at root or alternative root directory other than \"pegasus\" and \"extensions\" should be ignored.\nMaybe we should introduce an enum, use that one as the setter value.", "author": "nickibi", "createdAt": "2020-08-17T15:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NDc4MQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471794781", "bodyText": "I think from the security point of view, we can gather allowable strings in allowed enums, so that other content won't be leaked.", "author": "BrianPin", "createdAt": "2020-08-17T21:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "ea54079d66947e632330c72f613749a05cf6920e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\nindex 3008d8f3a..fcb6e8219 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n\n@@ -265,7 +267,7 @@ public class FileDataSchemaResolver extends AbstractDataSchemaResolver\n           StringBuilder builder = new StringBuilder();\n           // within a JAR file, files are treated as resources. Thus, we should lookup using the resource separator\n           // character, which is '/'\n-          builder.append(_schemasPathSuffix)\n+          builder.append(_schemasDirLocation)\n               .append('/')\n               .append(transformedName.replace(File.separatorChar, '/'));\n           return new InJarFileDataSchemaLocation(jarFile, builder.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NDcyMQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471774721", "bodyText": "Lets do restli coding convention?\nLeft curl -brace at new line", "author": "BrianPin", "createdAt": "2020-08-17T21:05:22Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java", "diffHunk": "@@ -184,6 +190,25 @@ public void setPaths(List<String> paths)\n     return _paths;\n   }\n \n+  /**\n+   * Return the current file path suffix for schemas location dir\n+   *\n+   * @return the current search paths.\n+   */\n+  public String getSchemasDirPathSuffix() {", "originalCommit": "061fcfca8f9839d72bea450e90f723be92761d06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea54079d66947e632330c72f613749a05cf6920e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\nindex 5fb7acaa5..fcb6e8219 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n\n@@ -195,18 +194,20 @@ public class FileDataSchemaResolver extends AbstractDataSchemaResolver\n    *\n    * @return the current search paths.\n    */\n-  public String getSchemasDirPathSuffix() {\n-    return _schemasDirPathSuffix;\n+  public SchemaDirLocation getSchemasDirLocation()\n+  {\n+    return _schemasDirLocation;\n   }\n \n   /**\n    * Sets the file path suffix for schemas location dir.\n-   * If not set Defaults to {@link InternalConstants#PEGASUS_DIR_IN_JAR}\n+   * If not set Defaults to {@link SchemaDirLocation#pegasus}\n    *\n-   * @param schemasDirPathSuffix path suffix.\n+   * @param schemasDirLocation path suffix.\n    */\n-  public void setSchemasDirPathSuffix(String schemasDirPathSuffix) {\n-    _schemasDirPathSuffix = schemasDirPathSuffix;\n+  public void setSchemasDirLocation(SchemaDirLocation schemasDirLocation)\n+  {\n+    _schemasDirLocation = schemasDirLocation;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3OTEyNg==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471779126", "bodyText": "if it is the first part of the string, the variable _schemasDirPathSuffix seems to be suitable by calling pathPrefix?", "author": "BrianPin", "createdAt": "2020-08-17T21:15:20Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java", "diffHunk": "@@ -241,7 +266,7 @@ protected DataSchemaLocation transform(String path)\n           StringBuilder builder = new StringBuilder();\n           // within a JAR file, files are treated as resources. Thus, we should lookup using the resource separator\n           // character, which is '/'\n-          builder.append(InternalConstants.PEGASUS_DIR_IN_JAR)\n+          builder.append(_schemasDirPathSuffix)", "originalCommit": "061fcfca8f9839d72bea450e90f723be92761d06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyNjE1Mw==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471826153", "bodyText": "please refer other comment also. its file/ schema name prefix not path", "author": "aman1309", "createdAt": "2020-08-17T23:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3OTEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMTQ2Ng==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471831466", "bodyText": "removed suffix from name", "author": "aman1309", "createdAt": "2020-08-17T23:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3OTEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "ea54079d66947e632330c72f613749a05cf6920e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\nindex 5fb7acaa5..fcb6e8219 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java\n\n@@ -266,7 +267,7 @@ public class FileDataSchemaResolver extends AbstractDataSchemaResolver\n           StringBuilder builder = new StringBuilder();\n           // within a JAR file, files are treated as resources. Thus, we should lookup using the resource separator\n           // character, which is '/'\n-          builder.append(_schemasDirPathSuffix)\n+          builder.append(_schemasDirLocation)\n               .append('/')\n               .append(transformedName.replace(File.separatorChar, '/'));\n           return new InJarFileDataSchemaLocation(jarFile, builder.toString());\n"}}, {"oid": "ea54079d66947e632330c72f613749a05cf6920e", "url": "https://github.com/linkedin/rest.li/commit/ea54079d66947e632330c72f613749a05cf6920e", "message": "address comments 2", "committedDate": "2020-08-17T23:41:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMzY0NA==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471833644", "bodyText": "For proper formatting, we should probably have the enums upper-case (PEGASUS, EXTENSIONS), with string parameters referring to the directory name. The usage above would call SchemaDirLocation#getName or something like that.", "author": "evanw555", "createdAt": "2020-08-17T23:44:22Z", "path": "pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirLocation.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.internal.common;\n+\n+/**\n+ * Directories within resource jar file that holds different types of pegasus schemas. Ex. Data or Extensions\n+ *\n+ * @author Aman Gupta\n+ */\n+public enum SchemaDirLocation\n+{\n+  /**\n+   * Directory holds the pegasus schemas. Pegasus parsers and resolvers look for pegasus\n+   * files(*.pdl, *.pdsc) only within this directory.\n+   */\n+  pegasus,", "originalCommit": "ea54079d66947e632330c72f613749a05cf6920e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5793e68d07612750380ad8a622eca82eb285e1f", "chunk": "diff --git a/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirLocation.java b/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java\nsimilarity index 83%\nrename from pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirLocation.java\nrename to pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java\nindex 5624959fc..168e82262 100644\n--- a/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirLocation.java\n+++ b/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java\n\n@@ -21,16 +21,27 @@ package com.linkedin.internal.common;\n  *\n  * @author Aman Gupta\n  */\n-public enum SchemaDirLocation\n+public enum SchemaDirectoryName\n {\n   /**\n    * Directory holds the pegasus schemas. Pegasus parsers and resolvers look for pegasus\n    * files(*.pdl, *.pdsc) only within this directory.\n    */\n-  pegasus,\n+  PEGASUS(\"pegasus\"),\n   /**\n    * Directory holds the Entity Relationship pegasus schemas.\n    * Pegasus Extensions schema parsers and resolvers look for pegasus files(*.pdl) only within this directory.\n    */\n-  extensions\n+  EXTENSIONS(\"extensions\");\n+\n+  private String _name;\n+\n+  SchemaDirectoryName(String name)\n+  {\n+    _name = name;\n+  }\n+\n+  public String getName() {\n+    return _name;\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDQ3MQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471834471", "bodyText": "\"Schema dir location\" seems a little confusing and kinda redundant. It seems to me that it's more of a schema dir \"type\" or schema dir \"name\". Also, I would prefer that the class name contains the word \"Directory\" rather than the abbreviated \"Dir\"\nSo perhaps something like:\n\nSchemaDirectory\nSchemaDirectoryType\nSchemaDirectoryName", "author": "evanw555", "createdAt": "2020-08-17T23:47:10Z", "path": "pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirLocation.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.internal.common;\n+\n+/**\n+ * Directories within resource jar file that holds different types of pegasus schemas. Ex. Data or Extensions\n+ *\n+ * @author Aman Gupta\n+ */\n+public enum SchemaDirLocation", "originalCommit": "ea54079d66947e632330c72f613749a05cf6920e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5793e68d07612750380ad8a622eca82eb285e1f", "chunk": "diff --git a/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirLocation.java b/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java\nsimilarity index 83%\nrename from pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirLocation.java\nrename to pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java\nindex 5624959fc..168e82262 100644\n--- a/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirLocation.java\n+++ b/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java\n\n@@ -21,16 +21,27 @@ package com.linkedin.internal.common;\n  *\n  * @author Aman Gupta\n  */\n-public enum SchemaDirLocation\n+public enum SchemaDirectoryName\n {\n   /**\n    * Directory holds the pegasus schemas. Pegasus parsers and resolvers look for pegasus\n    * files(*.pdl, *.pdsc) only within this directory.\n    */\n-  pegasus,\n+  PEGASUS(\"pegasus\"),\n   /**\n    * Directory holds the Entity Relationship pegasus schemas.\n    * Pegasus Extensions schema parsers and resolvers look for pegasus files(*.pdl) only within this directory.\n    */\n-  extensions\n+  EXTENSIONS(\"extensions\");\n+\n+  private String _name;\n+\n+  SchemaDirectoryName(String name)\n+  {\n+    _name = name;\n+  }\n+\n+  public String getName() {\n+    return _name;\n+  }\n }\n"}}, {"oid": "a5793e68d07612750380ad8a622eca82eb285e1f", "url": "https://github.com/linkedin/rest.li/commit/a5793e68d07612750380ad8a622eca82eb285e1f", "message": "refactor", "committedDate": "2020-08-18T00:01:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDk0OA==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r471850948", "bodyText": "I am wondering why it is in the internal common package? Users will use it to set up the resolver schema directory name, so it is not for internal using purpose. Do you think we should move this enum to the same package as SchemaResolver?", "author": "nickibi", "createdAt": "2020-08-18T00:47:56Z", "path": "pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.internal.common;", "originalCommit": "a5793e68d07612750380ad8a622eca82eb285e1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f67dabd3ab82a17a896d39a5fb1984a69d9fd3e", "chunk": "diff --git a/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java b/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java\ndeleted file mode 100644\nindex 168e82262..000000000\n--- a/pegasus-common/src/main/java/com/linkedin/internal/common/SchemaDirectoryName.java\n+++ /dev/null\n\n@@ -1,47 +0,0 @@\n-/*\n-   Copyright (c) 2020 LinkedIn Corp.\n-\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-*/\n-\n-package com.linkedin.internal.common;\n-\n-/**\n- * Directories within resource jar file that holds different types of pegasus schemas. Ex. Data or Extensions\n- *\n- * @author Aman Gupta\n- */\n-public enum SchemaDirectoryName\n-{\n-  /**\n-   * Directory holds the pegasus schemas. Pegasus parsers and resolvers look for pegasus\n-   * files(*.pdl, *.pdsc) only within this directory.\n-   */\n-  PEGASUS(\"pegasus\"),\n-  /**\n-   * Directory holds the Entity Relationship pegasus schemas.\n-   * Pegasus Extensions schema parsers and resolvers look for pegasus files(*.pdl) only within this directory.\n-   */\n-  EXTENSIONS(\"extensions\");\n-\n-  private String _name;\n-\n-  SchemaDirectoryName(String name)\n-  {\n-    _name = name;\n-  }\n-\n-  public String getName() {\n-    return _name;\n-  }\n-}\n"}}, {"oid": "1f67dabd3ab82a17a896d39a5fb1984a69d9fd3e", "url": "https://github.com/linkedin/rest.li/commit/1f67dabd3ab82a17a896d39a5fb1984a69d9fd3e", "message": "add optional set schema path suffix in file resolver", "committedDate": "2020-08-18T18:36:14Z", "type": "commit"}, {"oid": "e8b1c5a27c8cb1c9bcf388c13e7cd77009012a3c", "url": "https://github.com/linkedin/rest.li/commit/e8b1c5a27c8cb1c9bcf388c13e7cd77009012a3c", "message": "address comments", "committedDate": "2020-08-18T18:36:14Z", "type": "commit"}, {"oid": "ea54ee7368dba7d3653c7f68ba7bdce545ee782c", "url": "https://github.com/linkedin/rest.li/commit/ea54ee7368dba7d3653c7f68ba7bdce545ee782c", "message": "address comments 2", "committedDate": "2020-08-18T18:37:23Z", "type": "commit"}, {"oid": "b882f8f13b81d14985f2c6a81d851f1a73dd86f6", "url": "https://github.com/linkedin/rest.li/commit/b882f8f13b81d14985f2c6a81d851f1a73dd86f6", "message": "refactor", "committedDate": "2020-08-18T18:37:29Z", "type": "commit"}, {"oid": "8df65de4b5ac6fe8d9c8cf4c185c7cd3e62e9962", "url": "https://github.com/linkedin/rest.li/commit/8df65de4b5ac6fe8d9c8cf4c185c7cd3e62e9962", "message": "address review comments", "committedDate": "2020-08-18T18:39:01Z", "type": "forcePushed"}, {"oid": "f797103b190ba57e29f1ace1e2b5ea2727cf4f4d", "url": "https://github.com/linkedin/rest.li/commit/f797103b190ba57e29f1ace1e2b5ea2727cf4f4d", "message": "address review comments", "committedDate": "2020-08-18T19:13:58Z", "type": "commit"}, {"oid": "f797103b190ba57e29f1ace1e2b5ea2727cf4f4d", "url": "https://github.com/linkedin/rest.li/commit/f797103b190ba57e29f1ace1e2b5ea2727cf4f4d", "message": "address review comments", "committedDate": "2020-08-18T19:13:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNzkwNw==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r472437907", "bodyText": "For \"/extensions\", we have to support loading from both /pegasus and /extensions paths. Because extension schema includes base schema in /pegasus. If we do not load both paths, the extension schemas can not be resolved.", "author": "nickibi", "createdAt": "2020-08-18T19:44:10Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java", "diffHunk": "@@ -241,7 +266,7 @@ protected DataSchemaLocation transform(String path)\n           StringBuilder builder = new StringBuilder();\n           // within a JAR file, files are treated as resources. Thus, we should lookup using the resource separator\n           // character, which is '/'\n-          builder.append(InternalConstants.PEGASUS_DIR_IN_JAR)\n+          builder.append(_schemasDirectoryName.getName())", "originalCommit": "f797103b190ba57e29f1ace1e2b5ea2727cf4f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NTY0OA==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r472445648", "bodyText": "Is it actually both , not \"either ... or..\"?", "author": "BrianPin", "createdAt": "2020-08-18T19:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ1MjI3MQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r472452271", "bodyText": "@BrianPin  For /extensions directory contains ER extensions schemas, which includes base schema which is under /pegasus directory, if we don't loading both, extension schemas cannot be resolved by missing base schemas.\nIf directorName is \"pegasus\", we only load pegasus, if it is \"extensions\", we have to load both.", "author": "nickibi", "createdAt": "2020-08-18T20:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ1NDcxMw==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r472454713", "bodyText": "clear", "author": "BrianPin", "createdAt": "2020-08-18T20:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0MjkzNQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r472842935", "bodyText": "One question for now,\nThe parser usually takes a resolver path, and the resolver takes the resolver path for finding schema files to resolve.\nBut for this extension schema, should we have two resolver path?\nIf we just have one resolver path, we seem can't resolver schemas in the other directory.", "author": "BrianPin", "createdAt": "2020-08-19T08:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4MjgyNQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r472982825", "bodyText": "Added Extensions multi resolver. Please take a look", "author": "aman1309", "createdAt": "2020-08-19T12:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxODczNg==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r473218736", "bodyText": "Hi, few comments (Mostly as a question type of comments)\n\n\nThe file data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java and this data/src/main/java/com/linkedin/data/schema/resolver/ExtensionsDataSchemaResolver.java two resolvers are a bit confusing in terms of when should we use which.  I feel I can have either one to work with extensions.\n\n\nThe addition of _schemasDirectoryName in data/src/main/java/com/linkedin/data/schema/resolver/FileDataSchemaResolver.java seems to me that the addition's purpose is for us to tell the schema prefix (or directories), this thing itself seems more relavant to ClasspathResourceDataSchemaResolver or ExtensionsDataSchemaResolver, The FileDataSchemaResolver seems can remove this _schemasDirectoryName member?\n\n\nMore like two questions above, we can chat offline", "author": "BrianPin", "createdAt": "2020-08-19T17:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MDgyNQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r473270825", "bodyText": "Answered offline. Also, feel free ping directly for any doubts.\nClasspathResource is for schema already loaded using classLoader, whereas FileDataResolver loads schema from any file directory.", "author": "aman1309", "createdAt": "2020-08-19T19:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNzkwNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "17ec6cd83f0bb4adcad930c19e3f2d9465302012", "url": "https://github.com/linkedin/rest.li/commit/17ec6cd83f0bb4adcad930c19e3f2d9465302012", "message": "add extension multi path file resolver", "committedDate": "2020-08-19T12:19:35Z", "type": "commit"}, {"oid": "17ec6cd83f0bb4adcad930c19e3f2d9465302012", "url": "https://github.com/linkedin/rest.li/commit/17ec6cd83f0bb4adcad930c19e3f2d9465302012", "message": "add extension multi path file resolver", "committedDate": "2020-08-19T12:19:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2MzM3MQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r473163371", "bodyText": "conventions of left brace", "author": "BrianPin", "createdAt": "2020-08-19T16:30:29Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java", "diffHunk": "@@ -106,9 +130,19 @@ public SingleFormatClasspathSchemaResolver(DataSchemaParserFactory parserFactory\n       this._extension = \".\" + parserFactory.getLanguageExtension();\n     }\n \n+    /**\n+     * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n+     */\n+    public SingleFormatClasspathSchemaResolver(DataSchemaParserFactory parserFactory,\n+        SchemaDirectoryName schemaDirectoryName) {", "originalCommit": "17ec6cd83f0bb4adcad930c19e3f2d9465302012", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c4cb35bdcd2237337b37454b95779e808641285", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\nindex 79e0d10fd..845c16def 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n\n@@ -134,7 +161,8 @@ public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatData\n      * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n      */\n     public SingleFormatClasspathSchemaResolver(DataSchemaParserFactory parserFactory,\n-        SchemaDirectoryName schemaDirectoryName) {\n+        SchemaDirectoryName schemaDirectoryName)\n+    {\n       super(parserFactory, ClasspathResourceDataSchemaResolver.this);\n       this._extension = \".\" + parserFactory.getLanguageExtension();\n       this._schemasDirectoryName = schemaDirectoryName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3OTQyNg==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r473179426", "bodyText": "So for our case, the resolver we use should be this one and only one right?\nAnd this is the resolver that be passed to the parser.", "author": "BrianPin", "createdAt": "2020-08-19T16:53:58Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java", "diffHunk": "@@ -80,6 +79,26 @@ public ClasspathResourceDataSchemaResolver(ClassLoader classLoader)\n     _classLoader = classLoader;\n   }\n \n+  /**\n+   * Construct a new instance that uses the specified {@link ClassLoader}.\n+   *\n+   * @param classLoader provides the {@link ClassLoader}.\n+   * @param schemaDirectoryName The file directory name for different types of schemas.\n+   *                            Default is {@link SchemaDirectoryName#PEGASUS}\n+   */\n+  public ClasspathResourceDataSchemaResolver(ClassLoader classLoader, SchemaDirectoryName schemaDirectoryName)", "originalCommit": "17ec6cd83f0bb4adcad930c19e3f2d9465302012", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MTMyNQ==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r473271325", "bodyText": "Both classpath or extension resolver can be used depending on build time or runtime", "author": "aman1309", "createdAt": "2020-08-19T19:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3OTQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "3c4cb35bdcd2237337b37454b95779e808641285", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\nindex 79e0d10fd..845c16def 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n\n@@ -88,9 +103,10 @@ public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatData\n    */\n   public ClasspathResourceDataSchemaResolver(ClassLoader classLoader, SchemaDirectoryName schemaDirectoryName)\n   {\n+    _schemasDirectoryName = schemaDirectoryName;\n     for (DataSchemaParserFactory parserForFormat: BUILTIN_FORMAT_PARSER_FACTORIES)\n     {\n-      addResolver(new SingleFormatClasspathSchemaResolver(parserForFormat, schemaDirectoryName));\n+      addResolver(new SingleFormatClasspathSchemaResolver(parserForFormat, _schemasDirectoryName));\n       if (schemaDirectoryName == SchemaDirectoryName.EXTENSIONS)\n       {\n         addResolver(new SingleFormatClasspathSchemaResolver(parserForFormat, SchemaDirectoryName.PEGASUS));\n"}}, {"oid": "3c4cb35bdcd2237337b37454b95779e808641285", "url": "https://github.com/linkedin/rest.li/commit/3c4cb35bdcd2237337b37454b95779e808641285", "message": "review comments", "committedDate": "2020-08-19T19:47:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2NzM4Mw==", "url": "https://github.com/linkedin/rest.li/pull/385#discussion_r473567383", "bodyText": "Should here be the input schemaDirectoryName?", "author": "BrianPin", "createdAt": "2020-08-20T03:34:00Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/ExtensionsDataSchemaResolver.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data.schema.resolver;\n+\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.grammar.PdlSchemaParserFactory;\n+\n+\n+/**\n+ * Combines schema resolver for pegasus data and extensions schema directory.\n+ *\n+ * @author Aman Gupta\n+ */\n+public class ExtensionsDataSchemaResolver extends AbstractMultiFormatDataSchemaResolver\n+{\n+  public ExtensionsDataSchemaResolver(String resolverPath)\n+  {\n+    addResolver(createSchemaResolver(resolverPath, SchemaDirectoryName.PEGASUS, this));\n+    addResolver(createSchemaResolver(resolverPath, SchemaDirectoryName.EXTENSIONS, this));\n+  }\n+\n+  public ExtensionsDataSchemaResolver(String resolverPath, DataSchemaResolver dependencyResolver)\n+  {\n+    addResolver(createSchemaResolver(resolverPath, SchemaDirectoryName.PEGASUS, dependencyResolver));\n+    addResolver(createSchemaResolver(resolverPath, SchemaDirectoryName.EXTENSIONS, dependencyResolver));\n+  }\n+\n+  private FileDataSchemaResolver createSchemaResolver(String resolverPath, SchemaDirectoryName schemaDirectoryName,\n+      DataSchemaResolver dependencyResolver)\n+  {\n+    FileDataSchemaResolver resolver =\n+        new FileDataSchemaResolver(PdlSchemaParserFactory.instance(), resolverPath, dependencyResolver);\n+    resolver.setExtension(PdlSchemaParser.FILE_EXTENSION);\n+    resolver.setSchemasDirectoryName(SchemaDirectoryName.EXTENSIONS);", "originalCommit": "3c4cb35bdcd2237337b37454b95779e808641285", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}