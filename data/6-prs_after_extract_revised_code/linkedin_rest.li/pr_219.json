{"pr_number": 219, "pr_title": "Introduce an object creation timeout to completely de-couple channel creation from channelPool", "pr_createdAt": "2020-03-12T18:01:08Z", "pr_url": "https://github.com/linkedin/rest.li/pull/219", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzNTg0Ng==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391835846", "bodyText": "This looks like a duplicate of TimeoutCallback. Can you just reuse that?", "author": "cx-super", "createdAt": "2020-03-12T19:12:11Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -816,6 +831,40 @@ public long getTime()\n     }\n   }\n \n+  private class ObjectCreationTimeoutCallback implements Callback<T>", "originalCommit": "642144b82c48b317830e69732b5366e0547a864b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2MTIxOA==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391861218", "bodyText": "I wanted to throw a retry exception since it is connection related. I have refactored TimeoutCallback to accommodate this need. Removed the redundant  ObjectCreationTimeoutCallback", "author": "nizarm", "createdAt": "2020-03-12T20:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzNTg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "chunk": "diff --git a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\nindex 8ed3554de..b81088948 100644\n--- a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n+++ b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n\n@@ -831,40 +834,6 @@ public class AsyncPoolImpl<T> implements AsyncPool<T>\n     }\n   }\n \n-  private class ObjectCreationTimeoutCallback implements Callback<T>\n-  {\n-    private final SingleTimeout<Callback<T>> _timeout;\n-\n-    private ObjectCreationTimeoutCallback(final Callback<T> callback)\n-    {\n-      _timeout = new SingleTimeout<>(_timeoutExecutor, _creationTimeout, TimeUnit.MILLISECONDS, callback, () -> {\n-        callback.onError(\n-            new ObjectCreationTimeoutException(\n-                \"Exceeded creation timeout of \" + _creationTimeout + \"ms: in Pool: \"+ _poolName));\n-      });\n-    }\n-\n-    @Override\n-    public void onError(Throwable e)\n-    {\n-      Callback<T> callback = _timeout.getItem();\n-      if (callback != null)\n-      {\n-        callback.onError(e);\n-      }\n-    }\n-\n-    @Override\n-    public void onSuccess(T result)\n-    {\n-      Callback<T> callback = _timeout.getItem();\n-      if (callback != null)\n-      {\n-        callback.onSuccess(result);\n-      }\n-    }\n-  }\n-\n   private class WaiterTimeoutCallback implements Callback<T>\n   {\n     private final SingleTimeout<Callback<T>> _timeout;\n"}}, {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "url": "https://github.com/linkedin/rest.li/commit/390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "message": "Introduce an object creation timeout to completely de-couple channel pool from the behaviour of object creator (lifecycle). This will make sure that channel pool always claim its objects slot if the object creator did not return in time. Fix the SSL Completion event handling. Fix the error handling when channel creation fails so that it wont create a retry creation task in the rate limitor", "committedDate": "2020-03-12T19:59:52Z", "type": "commit"}, {"oid": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "url": "https://github.com/linkedin/rest.li/commit/390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "message": "Introduce an object creation timeout to completely de-couple channel pool from the behaviour of object creator (lifecycle). This will make sure that channel pool always claim its objects slot if the object creator did not return in time. Fix the SSL Completion event handling. Fix the error handling when channel creation fails so that it wont create a retry creation task in the rate limitor", "committedDate": "2020-03-12T19:59:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNjM5NQ==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391806395", "bodyText": "s/withing/within", "author": "ssheng", "createdAt": "2020-03-12T18:16:17Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -646,8 +648,10 @@ public void run(final SimpleCallback callback)\n           return;\n         }\n \n-        _lifecycle.create(new Callback<T>()\n-        {\n+        // Lets not trust the _lifecycle to timely return a response here.\n+        // Embedding the callback inside a timeout callback (ObjectCreationTimeoutCallback)\n+        // to force a response withing creationTimeout deadline to reclaim the object slot in the pool", "originalCommit": "642144b82c48b317830e69732b5366e0547a864b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3NjE4NA==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391876184", "bodyText": "This is taken care in the recent push", "author": "nizarm", "createdAt": "2020-03-12T20:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNjM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "chunk": "diff --git a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\nindex 8ed3554de..b81088948 100644\n--- a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n+++ b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n\n@@ -650,8 +652,8 @@ public class AsyncPoolImpl<T> implements AsyncPool<T>\n \n         // Lets not trust the _lifecycle to timely return a response here.\n         // Embedding the callback inside a timeout callback (ObjectCreationTimeoutCallback)\n-        // to force a response withing creationTimeout deadline to reclaim the object slot in the pool\n-        _lifecycle.create(new ObjectCreationTimeoutCallback(new Callback<T>() {\n+        // to force a response within creationTimeout deadline to reclaim the object slot in the pool\n+        _lifecycle.create(new TimeoutCallback<>(_timeoutExecutor, _creationTimeout, TimeUnit.MILLISECONDS, new Callback<T>() {\n           @Override\n           public void onSuccess(T t)\n           {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3NTczMA==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391875730", "bodyText": "Why is this moved down?", "author": "ssheng", "createdAt": "2020-03-12T20:26:14Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -698,17 +709,24 @@ public void onError(final Throwable e)\n                 LOG.error(\"Encountered error while invoking error waiter callback\", ex);\n               }\n             }\n+\n+            // Now after cancelling all the pending tasks, lets make sure to back off on the creation\n+            _rateLimiter.incrementPeriod();", "originalCommit": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MDI1Ng==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391880256", "bodyText": "call to this method '_rateLimiter.incrementPeriod()' will schedule the next pending task for object creation execution before the current thread get a chance to execute cancelPendingTasks. So by moving this down after cancelPendingTasks - we make sure that the rate limiter only submit new requests after the failure.", "author": "nizarm", "createdAt": "2020-03-12T20:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3NTczMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MjYwNA==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391882604", "bodyText": "Do we have guarantee that cause() is not null?", "author": "ssheng", "createdAt": "2020-03-12T20:41:26Z", "path": "r2-netty/src/main/java/com/linkedin/r2/transport/http/client/common/ChannelPoolLifecycle.java", "diffHunk": "@@ -118,19 +118,24 @@ public void create(final Callback<Channel> channelCallback)\n         @Override\n         public void userEventTriggered(ChannelHandlerContext ctx, Object evt)\n         {\n-          if(evt == SslHandshakeCompletionEvent.SUCCESS){\n+          if(evt == SslHandshakeCompletionEvent.SUCCESS)\n+          {\n             channelCallback.onSuccess(c);\n             c.pipeline().remove(CHANNELPOOL_SSL_CALLBACK_HANDLER);\n           }\n+          else if (evt instanceof SslHandshakeCompletionEvent)\n+          {\n+            Throwable sslException = ((SslHandshakeCompletionEvent) evt).cause();\n+            onError(channelCallback, sslException);", "originalCommit": "390ff61e8fe9d5ffd86d92955fa5bc5ebcf751de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NTI3NQ==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391885275", "bodyText": "Yes if it is not instance of SslHandshakeCompletionEvent.SUCCESS - it is guaranteed to have cause() in it.\nhttps://github.com/netty/netty/blob/00afb19d7a37de21b35ce4f6cb3fa7f74809f2ab/handler/src/main/java/io/netty/handler/ssl/SslHandshakeCompletionEvent.java\nBut yea - it make sense to not depend on this implementation detail and I will add a null check.", "author": "nizarm", "createdAt": "2020-03-12T20:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MjYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzODIxOA==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391938218", "bodyText": "Let's add a comment here then", "author": "FreCap", "createdAt": "2020-03-12T22:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MjYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzODQ2OQ==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391938469", "bodyText": "Shouldn't this also be a retriable exception?", "author": "FreCap", "createdAt": "2020-03-12T22:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MjYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0MjI2NQ==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391942265", "bodyText": "Thank you. good point. I will address this in the next release as I already merged the pull request and Identity do not leverage retry exception.", "author": "nizarm", "createdAt": "2020-03-12T22:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MjYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0MjM5MA==", "url": "https://github.com/linkedin/rest.li/pull/219#discussion_r391942390", "bodyText": "@FreCap  - please let me know if you have any other concerns !", "author": "nizarm", "createdAt": "2020-03-12T22:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MjYwNA=="}], "type": "inlineReview", "revised_code": null}]}