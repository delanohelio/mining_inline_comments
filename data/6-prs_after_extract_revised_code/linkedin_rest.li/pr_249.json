{"pr_number": 249, "pr_title": "Disable Request Waiter Timeout if not within fail fast threshold and Optimize SingleTimeout runnable to not capture callback to deal with the future.cancel behaviour in ScheduledExecutor", "pr_createdAt": "2020-04-03T20:34:31Z", "pr_url": "https://github.com/linkedin/rest.li/pull/249", "timeline": [{"oid": "e392324b948885b9b03441155542f7536512e193", "url": "https://github.com/linkedin/rest.li/commit/e392324b948885b9b03441155542f7536512e193", "message": "Disable Request Waiter Timeout if not within fast fail threshold", "committedDate": "2020-04-03T20:32:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDEwOQ==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403340109", "bodyText": "You can also fix the leak in the SingleTimeout\n  public SingleTimeout(ScheduledExecutorService executor, long timeout, TimeUnit timeoutUnit, T item, Consumer<T> timeoutAction) \n  { \n    ArgumentUtil.ensureNotNull(item,\"item\"); \n    ArgumentUtil.ensureNotNull(timeoutAction,\"timeoutAction\"); \n \n    _item = new AtomicReference<>(item); \n    _future = executor.schedule(() -> { \n      T item1 = _item.getAndSet(null); \n      if (item1 != null) \n      { \n        try \n        { \n          timeoutAction.apply(item1); \n        } catch (Throwable e) \n        { \n          LOG.error(\"Failed to execute timeout action\", e); \n        } \n      } \n    }, timeout, timeoutUnit); \n  }", "author": "FreCap", "createdAt": "2020-04-03T21:16:28Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -440,6 +444,11 @@ public boolean cancel()\n     };\n   }\n \n+  private boolean isWaiterTimeoutWithinFastFailThreshold()\n+  {\n+    return _waiterTimeout >= MIN_WAITER_TIMEOUT && _waiterTimeout <= MAX_WAITER_TIMEOUT;\n+  }\n+\n   @Override\n   public void put(T obj)\n   {", "originalCommit": "e392324b948885b9b03441155542f7536512e193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MDkzMA==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403390930", "bodyText": "Done", "author": "nizarm", "createdAt": "2020-04-04T00:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MzcxMA==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403393710", "bodyText": "SingleTime not part of this PR.", "author": "ssheng", "createdAt": "2020-04-04T00:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NDQ0Mw==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403394443", "bodyText": "You mean - you dont want to include singletimeout? It is already present in this PR as a separate commit following this. I will squash these during merge time", "author": "nizarm", "createdAt": "2020-04-04T00:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2f122b7210ef388f9063551b3ad589efa525e4a", "chunk": "diff --git a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\nindex 06503c490..9ff640b59 100644\n--- a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n+++ b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n\n@@ -444,8 +444,9 @@ public class AsyncPoolImpl<T> implements AsyncPool<T>\n     };\n   }\n \n-  private boolean isWaiterTimeoutWithinFastFailThreshold()\n+  private boolean isWaiterTimeoutEnabled()\n   {\n+    // Do not enable waiter timeout if the configured value is not within the fail fast threshold\n     return _waiterTimeout >= MIN_WAITER_TIMEOUT && _waiterTimeout <= MAX_WAITER_TIMEOUT;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDY2OQ==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403340669", "bodyText": "isWaiterTimeoutEnabled?", "author": "FreCap", "createdAt": "2020-04-03T21:17:52Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -440,6 +444,11 @@ public boolean cancel()\n     };\n   }\n \n+  private boolean isWaiterTimeoutWithinFastFailThreshold()", "originalCommit": "e392324b948885b9b03441155542f7536512e193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDg0Nw==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403340847", "bodyText": "within fast fail threshold can be a impl comment", "author": "FreCap", "createdAt": "2020-04-03T21:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MDY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2f122b7210ef388f9063551b3ad589efa525e4a", "chunk": "diff --git a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\nindex 06503c490..9ff640b59 100644\n--- a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n+++ b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n\n@@ -444,8 +444,9 @@ public class AsyncPoolImpl<T> implements AsyncPool<T>\n     };\n   }\n \n-  private boolean isWaiterTimeoutWithinFastFailThreshold()\n+  private boolean isWaiterTimeoutEnabled()\n   {\n+    // Do not enable waiter timeout if the configured value is not within the fail fast threshold\n     return _waiterTimeout >= MIN_WAITER_TIMEOUT && _waiterTimeout <= MAX_WAITER_TIMEOUT;\n   }\n \n"}}, {"oid": "c2f122b7210ef388f9063551b3ad589efa525e4a", "url": "https://github.com/linkedin/rest.li/commit/c2f122b7210ef388f9063551b3ad589efa525e4a", "message": "Scheduled executor is not cleaning up scheduled job upon cancelling the future", "committedDate": "2020-04-03T23:48:02Z", "type": "commit"}, {"oid": "bf55f1fbc3c2c8674f19187a8c02eb6b438aaa2d", "url": "https://github.com/linkedin/rest.li/commit/bf55f1fbc3c2c8674f19187a8c02eb6b438aaa2d", "message": "update version in preparation for a releaes", "committedDate": "2020-04-03T23:55:35Z", "type": "commit"}, {"oid": "f2220c99cf40720bc20eee7fc136e431e966531a", "url": "https://github.com/linkedin/rest.li/commit/f2220c99cf40720bc20eee7fc136e431e966531a", "message": "Update TimeoutCallback Constructor", "committedDate": "2020-04-04T00:02:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjgwOA==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403392808", "bodyText": "This check should also exist within the constructor and offspring factory where it is passed in. We do address this in a separate PR if you'd like.", "author": "ssheng", "createdAt": "2020-04-04T00:15:25Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -374,8 +374,12 @@ public Cancellable get(final Callback<T> callback)\n           {\n             if (_waiters.size() < _maxWaiters)\n             {\n+              if (isWaiterTimeoutWithinFastFailThreshold())", "originalCommit": "e392324b948885b9b03441155542f7536512e193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NDcyOQ==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403394729", "bodyText": "Why this needs to be there in other places ? checking here should take care of all the cases right?", "author": "nizarm", "createdAt": "2020-04-04T00:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5OTY0OA==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403399648", "bodyText": "We should not silently ignore configs passed in. If we could fail early in HttpClientFactory.Builder or the Offspring factory user can detect much earlier.", "author": "ssheng", "createdAt": "2020-04-04T00:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMjc4Nw==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403412787", "bodyText": "Understood. I will create a separate PR for this.", "author": "nizarm", "createdAt": "2020-04-04T02:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "ecf920c54842e616ac11d13f6049350ab423e86a", "chunk": "diff --git a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\nindex 06503c490..ae248d800 100644\n--- a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n+++ b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n\n@@ -374,7 +374,7 @@ public class AsyncPoolImpl<T> implements AsyncPool<T>\n           {\n             if (_waiters.size() < _maxWaiters)\n             {\n-              if (isWaiterTimeoutWithinFastFailThreshold())\n+              if (isWaiterTimeoutEnabled())\n               {\n                 callbackWithTracking = new WaiterTimeoutCallback(callbackWithTracking);\n               }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNzY2MQ==", "url": "https://github.com/linkedin/rest.li/pull/249#discussion_r403407661", "bodyText": "I would rather not put a number in the callback variable, something like: callbackIfTimeout", "author": "FreCap", "createdAt": "2020-04-04T01:49:53Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java", "diffHunk": "@@ -840,15 +850,15 @@ public long getTime()\n \n     private WaiterTimeoutCallback(final Callback<T> callback)\n     {\n-      _timeout = new SingleTimeout<>(_timeoutExecutor, _waiterTimeout, TimeUnit.MILLISECONDS, callback, () -> {\n+      _timeout = new SingleTimeout<>(_timeoutExecutor, _waiterTimeout, TimeUnit.MILLISECONDS, callback, (callback1) -> {\n \n         synchronized (_lock)\n         {\n           _waiters.remove(this);\n           _statsTracker.incrementWaiterTimedOut();\n         }\n         LOG.debug(\"{}: failing waiter due to waiter timeout\", _poolName);\n-        callback.onError(\n+        callback1.onError(", "originalCommit": "f2220c99cf40720bc20eee7fc136e431e966531a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecf920c54842e616ac11d13f6049350ab423e86a", "chunk": "diff --git a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\nindex 9ff640b59..ae248d800 100644\n--- a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n+++ b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/AsyncPoolImpl.java\n\n@@ -850,7 +850,7 @@ public class AsyncPoolImpl<T> implements AsyncPool<T>\n \n     private WaiterTimeoutCallback(final Callback<T> callback)\n     {\n-      _timeout = new SingleTimeout<>(_timeoutExecutor, _waiterTimeout, TimeUnit.MILLISECONDS, callback, (callback1) -> {\n+      _timeout = new SingleTimeout<>(_timeoutExecutor, _waiterTimeout, TimeUnit.MILLISECONDS, callback, (callbackIfTimeout) -> {\n \n         synchronized (_lock)\n         {\n"}}, {"oid": "ecf920c54842e616ac11d13f6049350ab423e86a", "url": "https://github.com/linkedin/rest.li/commit/ecf920c54842e616ac11d13f6049350ab423e86a", "message": "Address Francesco's comments", "committedDate": "2020-04-04T01:57:13Z", "type": "commit"}]}