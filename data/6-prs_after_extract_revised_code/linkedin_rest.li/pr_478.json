{"pr_number": 478, "pr_title": "Reserve symbol table resource name", "pr_createdAt": "2020-11-12T12:43:30Z", "pr_url": "https://github.com/linkedin/rest.li/pull/478", "timeline": [{"oid": "edc7158e4b97d385996e37bc9e765cc2f44993f4", "url": "https://github.com/linkedin/rest.li/commit/edc7158e4b97d385996e37bc9e765cc2f44993f4", "message": "Reserve symbol table resource name and fix request symbol table", "committedDate": "2020-11-12T12:46:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODQzNw==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522358437", "bodyText": "Excellent catch! Can you please change this check to checking for scheme instead of startsWith and use the d2 constant please?", "author": "karthikrg", "createdAt": "2020-11-12T19:23:59Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java", "diffHunk": "@@ -220,6 +220,11 @@ public SymbolTable getSymbolTable(String symbolTableName)\n   @Override\n   public SymbolTable getRequestSymbolTable(URI requestUri)\n   {\n+    if (!requestUri.toString().startsWith(\"d2://\"))", "originalCommit": "edc7158e4b97d385996e37bc9e765cc2f44993f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODU5Nw==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522358597", "bodyText": "Also may want to add a debug log here.", "author": "karthikrg", "createdAt": "2020-11-12T19:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MzI1Mg==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522893252", "bodyText": "should it be: startsWith(_uriPrefix) ?", "author": "karthikbalasub", "createdAt": "2020-11-13T11:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NDk0Mw==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522894943", "bodyText": "Also can you cleanup the comment from line 237-238? Looks like this was missed inthe previous PR", "author": "karthikbalasub", "createdAt": "2020-11-13T11:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1ODQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "71dbc16cab21b83ef362446660ccd352a04c5c5b", "chunk": "diff --git a/restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java b/restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java\nindex 713092b2c..2510e24cb 100644\n--- a/restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java\n+++ b/restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java\n\n@@ -220,34 +221,48 @@ public class RestLiSymbolTableProvider implements SymbolTableProvider, ResourceD\n   @Override\n   public SymbolTable getRequestSymbolTable(URI requestUri)\n   {\n-    if (!requestUri.toString().startsWith(\"d2://\"))\n+    // If the URI prefix doesn't match, return null.\n+    if (!requestUri.toString().startsWith(_uriPrefix))\n     {\n       return null;\n     }\n-\n     String serviceName = LoadBalancerUtil.getServiceNameFromUri(requestUri);\n \n     // First check the cache.\n     SymbolTable symbolTable = _serviceNameToSymbolTableCache.getIfPresent(serviceName);\n     if (symbolTable != null)\n     {\n-      return symbolTable;\n+      // If we got a 404, we will cache an empty symbol table. For such cases, just return null, so that no\n+      // symbol table is used.\n+      return symbolTable == EmptySymbolTable.SHARED ? null : symbolTable;\n     }\n \n-    // Ok, we didn't find it in the cache, let's go query the other service using the URI prefix. In this case, we\n-    // make sure to set the {@link RestConstants#HEADER_SERVICE_SCOPED_PATH} header to true to indicate that this\n-    // path, post resolution must be interpreted as a service scoped path.\n     try\n     {\n       URI symbolTableUri = new URI(_uriPrefix + serviceName + \"/\" + RestLiSymbolTableRequestHandler.SYMBOL_TABLE_URI_PATH);\n-      symbolTable = fetchRemoteSymbolTable(symbolTableUri, Collections.emptyMap());\n+\n+      //\n+      // Fetch remote symbol table, configuring the fetch to return an empty table on 404. This will ensure that\n+      // for services that don't have symbol tables enabled yet, we will not use any symbol tables when encoding.\n+      //\n+      symbolTable = fetchRemoteSymbolTable(symbolTableUri, Collections.emptyMap(), true);\n \n       if (symbolTable != null)\n       {\n         // Cache the retrieved table.\n         _serviceNameToSymbolTableCache.put(serviceName, symbolTable);\n-        _symbolTableNameToSymbolTableCache.put(\n-            _symbolTableNameHandler.extractMetadata(symbolTable.getName()).getSymbolTableName(), symbolTable);\n+\n+        // If this symbol table is not the shared empty table, also cache it by symbol table name, else return null\n+        // to not use any symbol tables when encoding.\n+        if (symbolTable != EmptySymbolTable.SHARED)\n+        {\n+          _symbolTableNameToSymbolTableCache.put(\n+              _symbolTableNameHandler.extractMetadata(symbolTable.getName()).getSymbolTableName(), symbolTable);\n+        }\n+        else\n+        {\n+          return null;\n+        }\n       }\n \n       return symbolTable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU5MQ==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r522896591", "bodyText": "This is not sufficient. If a resource has string Keys and if the key is \"symbolTable\" it can still cause conflict. We might have to revert Sang's commit.", "author": "karthikbalasub", "createdAt": "2020-11-13T11:37:28Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/model/RestLiApiBuilder.java", "diffHunk": "@@ -119,6 +120,12 @@ private static void processResourceInOrder(Class<?> annotatedClass, Map<Class<?>\n     if (model.isRoot())\n     {\n       String path = \"/\" + model.getName();\n+      if (model.getName().equals(DefaultSymbolTableProvider.SYMBOL_TABLE_URI_PATH))", "originalCommit": "edc7158e4b97d385996e37bc9e765cc2f44993f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNjQ2OA==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532006468", "bodyText": "updated symbol table request to include a header flag to avoid conflict.", "author": "aman1309", "createdAt": "2020-11-28T08:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MTUwMg==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532851502", "bodyText": "do you still need this change?", "author": "karthikbalasub", "createdAt": "2020-11-30T19:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg2Njc0NA==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532866744", "bodyText": "No, but kept it to avoid confusion", "author": "aman1309", "createdAt": "2020-11-30T19:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU5MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "71dbc16cab21b83ef362446660ccd352a04c5c5b", "url": "https://github.com/linkedin/rest.li/commit/71dbc16cab21b83ef362446660ccd352a04c5c5b", "message": "address review comments", "committedDate": "2020-11-28T08:38:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNzQ2Mw==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532837463", "bodyText": "It needs to be \"X-RestLi\", Capitalize L", "author": "junchuanwang", "createdAt": "2020-11-30T19:15:57Z", "path": "data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java", "diffHunk": "@@ -47,6 +47,11 @@\n    */\n   private static final String ACCEPT_HEADER = \"Accept\";\n \n+  /**\n+   * Symbol table request header\n+   */\n+  private static final String SYMBOL_TABLE_HEADER = \"X-Restli-Symbol-Table-Request\";", "originalCommit": "71dbc16cab21b83ef362446660ccd352a04c5c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzODQwMg==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532838402", "bodyText": "HTTP Headers are case insensitive, and h2 actually sends them as lower case. I would suggest lowercasing everything to save some garbage :D", "author": "karthikrg", "createdAt": "2020-11-30T19:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNzQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MTYwMQ==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532851601", "bodyText": "thanks will do", "author": "aman1309", "createdAt": "2020-11-30T19:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNzQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7e921a264b4b0c23b0de45d9abbeb8cd3b82d50a", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java b/data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java\nindex 22e6f7f87..b8a0abdaf 100644\n--- a/data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java\n+++ b/data/src/main/java/com/linkedin/data/codec/symbol/DefaultSymbolTableProvider.java\n\n@@ -47,11 +47,6 @@ public class DefaultSymbolTableProvider implements SymbolTableProvider\n    */\n   private static final String ACCEPT_HEADER = \"Accept\";\n \n-  /**\n-   * Symbol table request header\n-   */\n-  private static final String SYMBOL_TABLE_HEADER = \"X-Restli-Symbol-Table-Request\";\n-\n   /**\n    * Logger.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MDE0Ng==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532850146", "bodyText": "why are assuming # of path segments to 2 or 3? I mean the original code seems more natural", "author": "junchuanwang", "createdAt": "2020-11-30T19:37:05Z", "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "diffHunk": "@@ -90,11 +90,20 @@ public boolean shouldHandle(Request request)\n       return false;\n     }\n \n-    //\n     // When path is service scoped, URI is in the form of /<SERVICE>/symbolTable, else it\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n-    return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n-        || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    boolean isSymbolTableRequest = request.getHeaders().containsKey(RestConstants.HEADER_FETCH_SYMBOL_TABLE);\n+    if (isSymbolTableRequest)\n+    {\n+      return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n+              || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n+    if (isServiceScopedPath)\n+    {\n+      return (pathSegments.size() == 3) && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    return ((pathSegments.size() == 2 || pathSegments.size() == 3) && pathSegments.get(1).getPath().equals(SYMBOL_TABLE_URI_PATH));", "originalCommit": "71dbc16cab21b83ef362446660ccd352a04c5c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NDE1Nw==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532854157", "bodyText": "this is reverting to original code, reverts below pr\nhttps://github.com/linkedin/rest.li/pull/465/files", "author": "aman1309", "createdAt": "2020-11-30T19:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MDE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7e921a264b4b0c23b0de45d9abbeb8cd3b82d50a", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java b/restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java\nindex dc011bd75..887fb9ad6 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java\n\n@@ -90,20 +90,11 @@ public class RestLiSymbolTableRequestHandler implements NonResourceRequestHandle\n       return false;\n     }\n \n+    //\n     // When path is service scoped, URI is in the form of /<SERVICE>/symbolTable, else it\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n-    boolean isSymbolTableRequest = request.getHeaders().containsKey(RestConstants.HEADER_FETCH_SYMBOL_TABLE);\n-    if (isSymbolTableRequest)\n-    {\n-      return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n-              || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n-    }\n-    boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n-    if (isServiceScopedPath)\n-    {\n-      return (pathSegments.size() == 3) && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n-    }\n-    return ((pathSegments.size() == 2 || pathSegments.size() == 3) && pathSegments.get(1).getPath().equals(SYMBOL_TABLE_URI_PATH));\n+    return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n+        || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0OTYzNQ==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532849635", "bodyText": "Did you add this back for compatibility with the old logic?", "author": "karthikbalasub", "createdAt": "2020-11-30T19:36:17Z", "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "diffHunk": "@@ -90,11 +90,20 @@ public boolean shouldHandle(Request request)\n       return false;\n     }\n \n-    //\n     // When path is service scoped, URI is in the form of /<SERVICE>/symbolTable, else it\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n-    return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n-        || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    boolean isSymbolTableRequest = request.getHeaders().containsKey(RestConstants.HEADER_FETCH_SYMBOL_TABLE);\n+    if (isSymbolTableRequest)\n+    {\n+      return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n+              || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n+    if (isServiceScopedPath)\n+    {\n+      return (pathSegments.size() == 3) && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n+    }\n+    return ((pathSegments.size() == 2 || pathSegments.size() == 3) && pathSegments.get(1).getPath().equals(SYMBOL_TABLE_URI_PATH));", "originalCommit": "71dbc16cab21b83ef362446660ccd352a04c5c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NzI1NQ==", "url": "https://github.com/linkedin/rest.li/pull/478#discussion_r532857255", "bodyText": "yes, for older clients using symbol table.", "author": "aman1309", "createdAt": "2020-11-30T19:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0OTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7e921a264b4b0c23b0de45d9abbeb8cd3b82d50a", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java b/restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java\nindex dc011bd75..887fb9ad6 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java\n\n@@ -90,20 +90,11 @@ public class RestLiSymbolTableRequestHandler implements NonResourceRequestHandle\n       return false;\n     }\n \n+    //\n     // When path is service scoped, URI is in the form of /<SERVICE>/symbolTable, else it\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n-    boolean isSymbolTableRequest = request.getHeaders().containsKey(RestConstants.HEADER_FETCH_SYMBOL_TABLE);\n-    if (isSymbolTableRequest)\n-    {\n-      return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n-              || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n-    }\n-    boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n-    if (isServiceScopedPath)\n-    {\n-      return (pathSegments.size() == 3) && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n-    }\n-    return ((pathSegments.size() == 2 || pathSegments.size() == 3) && pathSegments.get(1).getPath().equals(SYMBOL_TABLE_URI_PATH));\n+    return pathSegments.get(pathSegments.size() - 1).getPath().equals(SYMBOL_TABLE_URI_PATH)\n+        || pathSegments.get(pathSegments.size() - 2).getPath().equals(SYMBOL_TABLE_URI_PATH);\n   }\n \n   @Override\n"}}, {"oid": "7e921a264b4b0c23b0de45d9abbeb8cd3b82d50a", "url": "https://github.com/linkedin/rest.li/commit/7e921a264b4b0c23b0de45d9abbeb8cd3b82d50a", "message": "Reserve symbol table resource name and fix request symbol table", "committedDate": "2020-11-30T19:53:09Z", "type": "commit"}, {"oid": "070123e2346752e6d86b6b881748175ae8c10b28", "url": "https://github.com/linkedin/rest.li/commit/070123e2346752e6d86b6b881748175ae8c10b28", "message": "address review comments", "committedDate": "2020-11-30T19:53:09Z", "type": "commit"}, {"oid": "63b5d34a9cfeda7bf8d934aeff8183dd6ce86fd2", "url": "https://github.com/linkedin/rest.li/commit/63b5d34a9cfeda7bf8d934aeff8183dd6ce86fd2", "message": "address comments", "committedDate": "2020-11-30T19:54:13Z", "type": "forcePushed"}, {"oid": "64b27145b436dc8a99de824faed72c0556afa3ad", "url": "https://github.com/linkedin/rest.li/commit/64b27145b436dc8a99de824faed72c0556afa3ad", "message": "address comments", "committedDate": "2020-11-30T19:56:55Z", "type": "forcePushed"}, {"oid": "b1af535414f91be9974b81b1e58f99bb5bb0b524", "url": "https://github.com/linkedin/rest.li/commit/b1af535414f91be9974b81b1e58f99bb5bb0b524", "message": "address comments", "committedDate": "2020-11-30T20:00:59Z", "type": "forcePushed"}, {"oid": "90b95a4ac77a5a7625e22e5dd97513fc4ae49276", "url": "https://github.com/linkedin/rest.li/commit/90b95a4ac77a5a7625e22e5dd97513fc4ae49276", "message": "address comments", "committedDate": "2020-11-30T20:46:56Z", "type": "commit"}, {"oid": "90b95a4ac77a5a7625e22e5dd97513fc4ae49276", "url": "https://github.com/linkedin/rest.li/commit/90b95a4ac77a5a7625e22e5dd97513fc4ae49276", "message": "address comments", "committedDate": "2020-11-30T20:46:56Z", "type": "forcePushed"}]}