{"pr_number": 216, "pr_title": "pretty print json in pdl builder", "pr_createdAt": "2020-03-09T22:57:39Z", "pr_url": "https://github.com/linkedin/rest.li/pull/216", "timeline": [{"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde", "url": "https://github.com/linkedin/rest.li/commit/b59ffb330a112210d205ad43953b96d6be5a4cde", "message": "pretty print json in pdl builder", "committedDate": "2020-03-10T20:59:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwNzUwMw==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390607503", "bodyText": "these are not related to your change.. please check", "author": "karthikbalasub", "createdAt": "2020-03-10T20:59:53Z", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -1660,6 +1660,46 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n               null,\n               null,\n               null\n+          },", "originalCommit": "ae2499aeb5c14b5b8a4e6791616830ef9d49c262", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwOTg1Ng==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390609856", "bodyText": "yes updated the branch", "author": "aman1309", "createdAt": "2020-03-10T21:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwNzUwMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b59ffb330a112210d205ad43953b96d6be5a4cde", "url": "https://github.com/linkedin/rest.li/commit/b59ffb330a112210d205ad43953b96d6be5a4cde", "message": "pretty print json in pdl builder", "committedDate": "2020-03-10T20:59:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2ODk1NQ==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390668955", "bodyText": "Should this be using two spaces? SPACE * INDENT_WIDTH?", "author": "karthikbalasub", "createdAt": "2020-03-10T23:28:42Z", "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,15 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException\n+  {\n+    DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n+    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));", "originalCommit": "b59ffb330a112210d205ad43953b96d6be5a4cde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0NjgyMA==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390746820", "bodyText": "fixed", "author": "aman1309", "createdAt": "2020-03-11T04:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2ODk1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0d25fd6baed17526daf3e4a98c685ec75e6733c8", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java b/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\nindex 43ad526ac..635fc09f0 100644\n--- a/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\n\n@@ -124,7 +124,8 @@ class IndentedPdlBuilder extends PdlBuilder\n   PdlBuilder writeJson(Object value) throws IOException\n   {\n     DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n-    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));\n+    prettyPrinter.indentObjectsWith(\n+        new DefaultIndenter(getIndentSpaces(1), DefaultIndenter.SYS_LF + getIndentSpaces(_indentDepth)));\n     _jsonCodec.setPrettyPrinter(prettyPrinter);\n     return super.writeJson(value);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MDU3MA==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390670570", "bodyText": "Suggest creating a local codec for this.\nThis way of changing the state of a member variable for each function call is not clean.", "author": "karthikbalasub", "createdAt": "2020-03-10T23:34:06Z", "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,15 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException\n+  {\n+    DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n+    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));\n+    _jsonCodec.setPrettyPrinter(prettyPrinter);", "originalCommit": "b59ffb330a112210d205ad43953b96d6be5a4cde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0NDgzMw==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390744833", "bodyText": "that is why I changed static to property, this is need to add pdl stateful indentation at the beginning of each line in json", "author": "aman1309", "createdAt": "2020-03-11T04:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MDU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2MjExMw==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r391062113", "bodyText": "The state is not for the entire PdlBuilder, but only when writeJson is called (ie at a function scope). After this function is completed, the state of _jsonBuilder is invalid. So using a member variable to set the state for a particular function is odd.\nWhat if someone uses the _jsonCodec on some other code path without updating the prettyPrinter?\nIt is not explicit that pretty printer should be updated before the code should be used.\nWhat happens if PdlBuilder stops using _jsonCodec in toJson?\nIt is not explict that PdlBuilder is expecting json to be formatted by custom builders.", "author": "karthikbalasub", "createdAt": "2020-03-11T15:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MDU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "0d25fd6baed17526daf3e4a98c685ec75e6733c8", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java b/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\nindex 43ad526ac..635fc09f0 100644\n--- a/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\n\n@@ -124,7 +124,8 @@ class IndentedPdlBuilder extends PdlBuilder\n   PdlBuilder writeJson(Object value) throws IOException\n   {\n     DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n-    prettyPrinter.indentObjectsWith(new DefaultIndenter(\" \", DefaultIndenter.SYS_LF + getIndentSpaces()));\n+    prettyPrinter.indentObjectsWith(\n+        new DefaultIndenter(getIndentSpaces(1), DefaultIndenter.SYS_LF + getIndentSpaces(_indentDepth)));\n     _jsonCodec.setPrettyPrinter(prettyPrinter);\n     return super.writeJson(value);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MTQ5MQ==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390671491", "bodyText": "Can you add the testcases you used for testing, but comment them out for now. It would be easier to just enable those tests later.", "author": "karthikbalasub", "createdAt": "2020-03-10T23:37:07Z", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -37,31 +39,39 @@\n   private static Object[][] propertiesMapProvider()\n   {\n     DataMap properties1 = new DataMap();\n-    properties1.put(\"empty\", new DataMap());\n+    properties1.put(\"empty\", new DataList(Arrays.asList(1, 2, 3)));\n     DataMap properties2 = new DataMap();\n     properties2.put(\"validate\", properties1);\n     return new Object[][]\n         {\n             {\n               properties1,\n-              \"@empty = {}\\n\"\n+              \"@empty = [ 1, 2, 3 ]\\n\",\n+              \"@empty=[1,2,3]\"\n             },\n             {\n               properties2,\n-              \"@validate.empty = {}\\n\"\n+              \"@validate.empty = [ 1, 2, 3 ]\\n\",\n+              \"@validate.empty=[1,2,3]\"\n             }\n         //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic", "originalCommit": "b59ffb330a112210d205ad43953b96d6be5a4cde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1MDkyNg==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390750926", "bodyText": "done", "author": "aman1309", "createdAt": "2020-03-11T05:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MTQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0d25fd6baed17526daf3e4a98c685ec75e6733c8", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\nindex 8716047c0..d104e8ec6 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n\n@@ -38,23 +38,40 @@ public class TestPdlBuilder\n   @DataProvider\n   private static Object[][] propertiesMapProvider()\n   {\n-    DataMap properties1 = new DataMap();\n-    properties1.put(\"empty\", new DataList(Arrays.asList(1, 2, 3)));\n-    DataMap properties2 = new DataMap();\n-    properties2.put(\"validate\", properties1);\n+    DataMap emptyProperty = new DataMap();\n+    emptyProperty.put(\"empty\", new DataMap());\n+    DataMap arrayValueProperty = new DataMap();\n+    arrayValueProperty.put(\"array\", new DataList(Arrays.asList(1, 2, 3)));\n+    DataMap flattenProperty = new DataMap();\n+    flattenProperty.put(\"flatten\", arrayValueProperty);\n+    DataMap multipleProp = new DataMap();\n+    multipleProp.putAll(emptyProperty);\n+    multipleProp.putAll(arrayValueProperty);\n+    DataMap jsonValueProp = new DataMap();\n+    jsonValueProp.put(\"nested\", multipleProp);\n     return new Object[][]\n         {\n             {\n-              properties1,\n-              \"@empty = [ 1, 2, 3 ]\\n\",\n-              \"@empty=[1,2,3]\"\n+              emptyProperty,\n+              \"@empty = { }\\n\",\n+              \"@empty={}\"\n             },\n             {\n-              properties2,\n-              \"@validate.empty = [ 1, 2, 3 ]\\n\",\n-              \"@validate.empty=[1,2,3]\"\n-            }\n-        //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic\n+              arrayValueProperty,\n+              \"@`array` = [ 1, 2, 3 ]\\n\",\n+              \"@`array`=[1,2,3]\"\n+            },\n+            {\n+              flattenProperty,\n+              \"@flatten.`array` = [ 1, 2, 3 ]\\n\",\n+              \"@flatten.`array`=[1,2,3]\"\n+            },\n+            /* TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic\n+            {\n+              jsonValueProp,\n+              \"@nested = {\\n  \\\"array\\\" : [ 1, 2, 3 ],\\n  \\\"empty\\\" : { }\\n}\\n\",\n+              \"@nested={\\\"array\\\":[1,2,3],\\\"empty\\\":{}}\"\n+            }*/\n         };\n   }\n \n"}}, {"oid": "0d25fd6baed17526daf3e4a98c685ec75e6733c8", "url": "https://github.com/linkedin/rest.li/commit/0d25fd6baed17526daf3e4a98c685ec75e6733c8", "message": "address karthik comments", "committedDate": "2020-03-11T05:19:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MzM3Ng==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390783376", "bodyText": "I'd suggest adding a map test case with only 1 property per level, along with a TODO saying to add more properties at each level.", "author": "evanw555", "createdAt": "2020-03-11T07:24:35Z", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -36,32 +38,57 @@\n   @DataProvider\n   private static Object[][] propertiesMapProvider()\n   {\n-    DataMap properties1 = new DataMap();\n-    properties1.put(\"empty\", new DataMap());\n-    DataMap properties2 = new DataMap();\n-    properties2.put(\"validate\", properties1);\n+    DataMap emptyProperty = new DataMap();\n+    emptyProperty.put(\"empty\", new DataMap());\n+    DataMap arrayValueProperty = new DataMap();\n+    arrayValueProperty.put(\"array\", new DataList(Arrays.asList(1, 2, 3)));\n+    DataMap flattenProperty = new DataMap();\n+    flattenProperty.put(\"flatten\", arrayValueProperty);\n+    DataMap multipleProp = new DataMap();\n+    multipleProp.putAll(emptyProperty);\n+    multipleProp.putAll(arrayValueProperty);\n+    DataMap jsonValueProp = new DataMap();\n+    jsonValueProp.put(\"nested\", multipleProp);\n     return new Object[][]\n         {\n             {\n-              properties1,\n-              \"@empty = {}\\n\"\n+              emptyProperty,\n+              \"@empty = { }\\n\",\n+              \"@empty={}\"\n             },\n             {\n-              properties2,\n-              \"@validate.empty = {}\\n\"\n-            }\n-        //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic\n+              arrayValueProperty,\n+              \"@`array` = [ 1, 2, 3 ]\\n\",\n+              \"@`array`=[1,2,3]\"\n+            },\n+            {\n+              flattenProperty,\n+              \"@flatten.`array` = [ 1, 2, 3 ]\\n\",\n+              \"@flatten.`array`=[1,2,3]\"\n+            },\n+            /* TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic", "originalCommit": "0d25fd6baed17526daf3e4a98c685ec75e6733c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NjYyNg==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390796626", "bodyText": "flatten array property map is that use case and we need it to test compact logic.\nthat is why added separate test for json case.", "author": "aman1309", "createdAt": "2020-03-11T08:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MzM3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4Njk3Ng==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390786976", "bodyText": "I don't think this method is necessary. You can avoid adding this logic as an overridden method which calls the super method (a little confusing) by just updating the codec's pretty printer on indent change (i.e. #increaseIndent and #decreaseIndent). It seems more intuitive IMO to compute the indent string and update the pretty printer on indent change rather than on each use.", "author": "evanw555", "createdAt": "2020-03-11T07:34:54Z", "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -124,6 +120,16 @@ boolean writeDoc(String doc) throws IOException\n     return false;\n   }\n \n+  @Override\n+  PdlBuilder writeJson(Object value) throws IOException", "originalCommit": "0d25fd6baed17526daf3e4a98c685ec75e6733c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5ODA1MA==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390798050", "bodyText": "It shouldn't be confusing at Indenter is kind of decorating the vanilla builder so it should be good to have child class calling super method.\nRegarding having this logic in increase and decrease indent I would avoid it as to why build it when it's not needed.", "author": "aman1309", "createdAt": "2020-03-11T08:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4Njk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b3b17132f0203e218941c3ca2aa22fd1b962546f", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java b/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\nindex 635fc09f0..a1b39b9c7 100644\n--- a/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java\n\n@@ -123,11 +124,13 @@ class IndentedPdlBuilder extends PdlBuilder\n   @Override\n   PdlBuilder writeJson(Object value) throws IOException\n   {\n+    JacksonDataCodec jsonCodec = new JacksonDataCodec();\n     DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();\n     prettyPrinter.indentObjectsWith(\n         new DefaultIndenter(getIndentSpaces(1), DefaultIndenter.SYS_LF + getIndentSpaces(_indentDepth)));\n-    _jsonCodec.setPrettyPrinter(prettyPrinter);\n-    return super.writeJson(value);\n+    jsonCodec.setPrettyPrinter(prettyPrinter);\n+    write(toJson(value, jsonCodec));\n+    return this;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4OTcxOQ==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390789719", "bodyText": "I would make this method static, since it's just a helper method to compute indent text. Whether to use static methods when possible or to avoid static methods seems to be a contentious and subjective issue, so it's up to you tbh.", "author": "evanw555", "createdAt": "2020-03-11T07:42:36Z", "path": "data/src/main/java/com/linkedin/data/schema/IndentedPdlBuilder.java", "diffHunk": "@@ -133,4 +139,15 @@ private void writeLine(String code) throws IOException\n   {\n     indent().write(code).newline();\n   }\n+\n+  private String getIndentSpaces(int indentDepth)", "originalCommit": "0d25fd6baed17526daf3e4a98c685ec75e6733c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5ODcwOA==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390798708", "bodyText": "lets keep it like this for now, as scope of method is for this class only", "author": "aman1309", "createdAt": "2020-03-11T08:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4OTcxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4OTgxOQ==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r390789819", "bodyText": "Should be protected.", "author": "evanw555", "createdAt": "2020-03-11T07:42:50Z", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -63,6 +61,7 @@\n   }\n \n   private final Writer _writer;\n+  final JacksonDataCodec _jsonCodec = new JacksonDataCodec();", "originalCommit": "0d25fd6baed17526daf3e4a98c685ec75e6733c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5b86bb7712c3fe4a4e109a8b58655a44d296d24", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\nindex 2f3e7f040..6c5eb9623 100644\n--- a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n\n@@ -61,7 +61,7 @@ abstract class PdlBuilder\n   }\n \n   private final Writer _writer;\n-  final JacksonDataCodec _jsonCodec = new JacksonDataCodec();\n+  protected final JacksonDataCodec _jsonCodec = new JacksonDataCodec();\n \n   PdlBuilder(Writer writer)\n   {\n"}}, {"oid": "c5b86bb7712c3fe4a4e109a8b58655a44d296d24", "url": "https://github.com/linkedin/rest.li/commit/c5b86bb7712c3fe4a4e109a8b58655a44d296d24", "message": "address evan comment: make codec protected", "committedDate": "2020-03-11T08:09:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2NDUyNg==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r391064526", "bodyText": "Cleaner option is to create two protected abstrac methods toJson(DataMap) toJson(DataList) and let concrete implementations decide how the json is generated.", "author": "karthikbalasub", "createdAt": "2020-03-11T15:39:22Z", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -275,11 +274,11 @@ private String toJson(Object value) throws IOException\n   {\n     if (value instanceof DataMap)\n     {\n-      return JSON_CODEC.mapToString((DataMap) value);\n+      return _jsonCodec.mapToString((DataMap) value);", "originalCommit": "c5b86bb7712c3fe4a4e109a8b58655a44d296d24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzMxOA==", "url": "https://github.com/linkedin/rest.li/pull/216#discussion_r391207318", "bodyText": "why not have only 1 ie toJson(Object) and writeJson is kind of fulfilling that but if needed we can separate out toJson\nfor jsonCodec being updated, would it be okay if local codec in toJson/writeJson is initialized everytime.", "author": "aman1309", "createdAt": "2020-03-11T19:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2NDUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "b3b17132f0203e218941c3ca2aa22fd1b962546f", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\nindex 6c5eb9623..7c56289b9 100644\n--- a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n\n@@ -270,15 +265,15 @@ abstract class PdlBuilder\n    * @param value the value to serialize to JSON.\n    * @return a JSON serialized string representation of the data value.\n    */\n-  private String toJson(Object value) throws IOException\n+  protected String toJson(Object value, JacksonDataCodec jsonCodec) throws IOException\n   {\n     if (value instanceof DataMap)\n     {\n-      return _jsonCodec.mapToString((DataMap) value);\n+      return jsonCodec.mapToString((DataMap) value);\n     }\n     else if (value instanceof DataList)\n     {\n-      return _jsonCodec.listToString((DataList) value);\n+      return jsonCodec.listToString((DataList) value);\n     }\n     else if (value instanceof String)\n     {\n"}}, {"oid": "b3b17132f0203e218941c3ca2aa22fd1b962546f", "url": "https://github.com/linkedin/rest.li/commit/b3b17132f0203e218941c3ca2aa22fd1b962546f", "message": "address karthik comments", "committedDate": "2020-03-11T19:48:27Z", "type": "commit"}]}