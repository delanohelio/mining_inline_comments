{"pr_number": 169, "pr_title": "Fix bug that would cause pdl encoder to import types conflicting with inline types.", "pr_createdAt": "2020-02-13T04:03:21Z", "pr_url": "https://github.com/linkedin/rest.li/pull/169", "timeline": [{"oid": "39310c032b48b12d60a9cc67d5e42da179257ab8", "url": "https://github.com/linkedin/rest.li/commit/39310c032b48b12d60a9cc67d5e42da179257ab8", "message": "Fix bug that would cause pdl encoder to import types conflicting with\ninline types.\nAlso improves how imports for includes are handled.", "committedDate": "2020-02-13T03:27:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MDg3OA==", "url": "https://github.com/linkedin/rest.li/pull/169#discussion_r379050878", "bodyText": "Nice catch.", "author": "evanw555", "createdAt": "2020-02-13T18:48:14Z", "path": "data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java", "diffHunk": "@@ -782,7 +782,7 @@ private void gatherTypes(DataSchema schema, boolean isDeclaredInline, Set<Name>\n         }\n         for (NamedDataSchema include : recordSchema.getInclude())\n         {\n-          gatherTypes(include, true, encounteredTypes, inlinedTypes);\n+          gatherTypes(include, recordSchema.isIncludeDeclaredInline(include), encounteredTypes, inlinedTypes);", "originalCommit": "39310c032b48b12d60a9cc67d5e42da179257ab8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3894a5755537501ab021f98a60d4cd831e7eeb85", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java b/data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java\nindex 0966ec32e..43aaba972 100644\n--- a/data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java\n\n@@ -778,35 +779,35 @@ public class SchemaToPdlEncoder extends AbstractSchemaEncoder\n         RecordDataSchema recordSchema = (RecordDataSchema) schema;\n         for (RecordDataSchema.Field field : recordSchema.getFields())\n         {\n-          gatherTypes(field.getType(), field.isDeclaredInline(), encounteredTypes, inlinedTypes);\n+          gatherTypes(field.getType(), field.isDeclaredInline(), encounteredTypes, inlinedTypeNames);\n         }\n         for (NamedDataSchema include : recordSchema.getInclude())\n         {\n-          gatherTypes(include, recordSchema.isIncludeDeclaredInline(include), encounteredTypes, inlinedTypes);\n+          gatherTypes(include, recordSchema.isIncludeDeclaredInline(include), encounteredTypes, inlinedTypeNames);\n         }\n       }\n       else if (schema instanceof TyperefDataSchema)\n       {\n         TyperefDataSchema typerefSchema = (TyperefDataSchema) schema;\n-        gatherTypes(typerefSchema.getRef(), typerefSchema.isRefDeclaredInline(), encounteredTypes, inlinedTypes);\n+        gatherTypes(typerefSchema.getRef(), typerefSchema.isRefDeclaredInline(), encounteredTypes, inlinedTypeNames);\n       }\n       else if (schema instanceof UnionDataSchema)\n       {\n         UnionDataSchema unionSchema = (UnionDataSchema) schema;\n         for (UnionDataSchema.Member member : unionSchema.getMembers())\n         {\n-          gatherTypes(member.getType(), member.isDeclaredInline(), encounteredTypes, inlinedTypes);\n+          gatherTypes(member.getType(), member.isDeclaredInline(), encounteredTypes, inlinedTypeNames);\n         }\n       }\n       else if (schema instanceof MapDataSchema)\n       {\n         MapDataSchema mapSchema = (MapDataSchema) schema;\n-        gatherTypes(mapSchema.getValues(), mapSchema.isValuesDeclaredInline(), encounteredTypes, inlinedTypes);\n+        gatherTypes(mapSchema.getValues(), mapSchema.isValuesDeclaredInline(), encounteredTypes, inlinedTypeNames);\n       }\n       else if (schema instanceof ArrayDataSchema)\n       {\n         ArrayDataSchema arraySchema = (ArrayDataSchema) schema;\n-        gatherTypes(arraySchema.getItems(), arraySchema.isItemsDeclaredInline(), encounteredTypes, inlinedTypes);\n+        gatherTypes(arraySchema.getItems(), arraySchema.isItemsDeclaredInline(), encounteredTypes, inlinedTypeNames);\n       }\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MTg3NQ==", "url": "https://github.com/linkedin/rest.li/pull/169#discussion_r379051875", "bodyText": "We should clarify that this set is a collection of simple names, not full names.", "author": "evanw555", "createdAt": "2020-02-13T18:50:08Z", "path": "data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java", "diffHunk": "@@ -756,7 +756,7 @@ private void writeDocAndProperties(RecordDataSchema.Field field) throws IOExcept\n    * @param inlinedTypes cumulative set of all inlined types in this schema (and its descendents).", "originalCommit": "39310c032b48b12d60a9cc67d5e42da179257ab8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3894a5755537501ab021f98a60d4cd831e7eeb85", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java b/data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java\nindex 0966ec32e..43aaba972 100644\n--- a/data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java\n\n@@ -753,10 +754,10 @@ public class SchemaToPdlEncoder extends AbstractSchemaEncoder\n    * @param isDeclaredInline true if the schema should be treated as an inline declaration, false if it should be\n    *                         considered a by-name reference.\n    * @param encounteredTypes cumulative set of all encountered types in this schema (and its descendents).\n-   * @param inlinedTypes cumulative set of all inlined types in this schema (and its descendents).\n+   * @param inlinedTypeNames cumulative set of simple names of all inlined types in this schema (and its descendents).\n    */\n   private void gatherTypes(DataSchema schema, boolean isDeclaredInline, Set<Name> encounteredTypes,\n-      Set<String> inlinedTypes)\n+      Set<String> inlinedTypeNames)\n   {\n     // If named type, add to the set of encountered types\n     if (schema instanceof NamedDataSchema)\n"}}, {"oid": "3894a5755537501ab021f98a60d4cd831e7eeb85", "url": "https://github.com/linkedin/rest.li/commit/3894a5755537501ab021f98a60d4cd831e7eeb85", "message": "Addressing Evan's review comments", "committedDate": "2020-02-13T19:38:49Z", "type": "commit"}]}