{"pr_number": 166, "pr_title": "Change pdl property encoding logic to not flatten if nested branches > 1", "pr_createdAt": "2020-02-11T23:41:36Z", "pr_url": "https://github.com/linkedin/rest.li/pull/166", "timeline": [{"oid": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "url": "https://github.com/linkedin/rest.li/commit/5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "message": "Change pdl property encoding logic to not flatten if there are more than 1 branch in structure", "committedDate": "2020-02-11T23:39:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MTkxMw==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r377991913", "bodyText": "Most of the comments in this method are now invalid. You should update them.\n\nFavor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\nencode non-empty value property like @x.y.z = \"value\"\nencode empty value property like @x.y = {}\n\nI'd also suggest cleaning this up.\n\nUse shorthand for boolean true.  Instead of writing \"@deprecated = true\",\nwrite \"@deprecated\".\n\nAlso, remove this from the method javadoc.\n\nTODO: Support configuration for preferring collapsed \"map\" style over expanded \"path\" style.", "author": "evanw555", "createdAt": "2020-02-12T01:13:26Z", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -149,7 +149,7 @@ PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties)\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }", "originalCommit": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODg3OA==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378568878", "bodyText": "Your changes still don't address most of this.", "author": "evanw555", "createdAt": "2020-02-12T23:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\nindex 915407f13..65649b857 100644\n--- a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n\n@@ -149,14 +147,14 @@ abstract class PdlBuilder\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\n         DataMap dm = (DataMap) value;\n-        if (!dm.isEmpty() && dm.size() == 1)\n+        if (dm.size() == 1)\n         {\n           // encode non-empty value property like @x.y.z = \"value\"\n           writeProperties(pathParts, dm);\n         }\n-        else if (!pathParts.isEmpty())\n+        else\n         {\n-          // encode empty value property like @x.y = {}\n+          // encode value property like @x.y = {jsonValue}\n           writeProperty(pathParts, dm);\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MjAyNg==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r377992026", "bodyText": "Redundant. Just dm.size() == 1 suffices.", "author": "evanw555", "createdAt": "2020-02-12T01:13:53Z", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -149,7 +149,7 @@ PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties)\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\n         DataMap dm = (DataMap) value;\n-        if (!dm.isEmpty())\n+        if (!dm.isEmpty() && dm.size() == 1)", "originalCommit": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4MDk3MA==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378480970", "bodyText": "done. Initially thought dm could be null also which is not the case", "author": "aman1309", "createdAt": "2020-02-12T19:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MjAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\nindex 915407f13..65649b857 100644\n--- a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n\n@@ -149,14 +147,14 @@ abstract class PdlBuilder\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\n         DataMap dm = (DataMap) value;\n-        if (!dm.isEmpty() && dm.size() == 1)\n+        if (dm.size() == 1)\n         {\n           // encode non-empty value property like @x.y.z = \"value\"\n           writeProperties(pathParts, dm);\n         }\n-        else if (!pathParts.isEmpty())\n+        else\n         {\n-          // encode empty value property like @x.y = {}\n+          // encode value property like @x.y = {jsonValue}\n           writeProperty(pathParts, dm);\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NDQwOA==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r377994408", "bodyText": "By adding more test cases that don't apply to the original intent of the test method, this becomes more confusing. I'd suggest making this more generalized of a method which just tests custom property encoding.\nHowever, this brings up another interesting point. This test assumes the ordering of properties, which is currently NOT deterministic. I'd suggest keeping the tests right now limited to only one property per test case, and adding a TODO to be addressed by whoever implements deterministic ordering. In addition, this sort of testing should be done by PdlEncoderTest, which makes testing the encoder much easier. You can avoid defining the schema as a string literal.", "author": "evanw555", "createdAt": "2020-02-12T01:23:37Z", "path": "data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java", "diffHunk": "@@ -22,19 +22,38 @@\n import java.io.StringWriter;\n import java.util.HashMap;\n import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n import static org.junit.Assert.*;\n \n \n public class TestSchemaToPdlEncoder\n {\n-  @Test\n-  public void testEncodeRecordWithEmptyDataMapInProperty() throws IOException\n+\n+  @DataProvider\n+  private static Object[][] recordSchemaProvider()\n+  {\n+    DataMap properties1 = new DataMap();\n+    properties1.put(\"empty\", new DataMap());\n+    DataMap properties2 = new DataMap();\n+    properties2.put(\"validate\", properties1);\n+    DataMap properties3 = new DataMap();\n+    DataMap nestedMap = new DataMap(properties2);\n+    nestedMap.putAll(properties1);\n+    properties3.put(\"nested\", nestedMap);\n+    return new Object[][]{{properties1, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@empty = {}\\nrecord RecordDataSchema {}\"},\n+        {properties2, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@validate.empty = {}\\n\" + \"@empty = {}\\nrecord RecordDataSchema {}\"},\n+        {properties3, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@nested = {\\\"validate\\\":{\\\"empty\\\":{}},\\\"empty\\\":{}}\\n\"\n+            + \"@empty = {}\\n\" + \"record RecordDataSchema {}\"}};\n+  }\n+\n+  @Test(dataProvider = \"recordSchemaProvider\")\n+  public void testEncodeRecordWithEmptyDataMapInProperty(Map<String, Object> properties, String pdlString) throws IOException", "originalCommit": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMTM4OQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378531389", "bodyText": "I thought of writing it in PdlEncoderTest but then its in a different module, and also uses SchemaToPdlEncoder.\nNow, I have added a new test class for TestPdlEncoder in same package.\nRegarding the deterministic ordering I have removed the last test for now.", "author": "aman1309", "createdAt": "2020-02-12T21:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NDQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java b/data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java\nindex 3eb07de0f..a3c99482f 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java\n\n@@ -22,8 +22,6 @@ import java.io.IOException;\n import java.io.StringWriter;\n import java.util.HashMap;\n import java.util.Map;\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n import static org.junit.Assert.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMjA2NQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378002065", "bodyText": "Remove this line and fix the test data accordingly. It is cleaner that way.", "author": "karthikbalasub", "createdAt": "2020-02-12T01:54:36Z", "path": "data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java", "diffHunk": "@@ -22,19 +22,38 @@\n import java.io.StringWriter;\n import java.util.HashMap;\n import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n import static org.junit.Assert.*;\n \n \n public class TestSchemaToPdlEncoder\n {\n-  @Test\n-  public void testEncodeRecordWithEmptyDataMapInProperty() throws IOException\n+\n+  @DataProvider\n+  private static Object[][] recordSchemaProvider()\n+  {\n+    DataMap properties1 = new DataMap();\n+    properties1.put(\"empty\", new DataMap());\n+    DataMap properties2 = new DataMap();\n+    properties2.put(\"validate\", properties1);\n+    DataMap properties3 = new DataMap();\n+    DataMap nestedMap = new DataMap(properties2);\n+    nestedMap.putAll(properties1);\n+    properties3.put(\"nested\", nestedMap);\n+    return new Object[][]{{properties1, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@empty = {}\\nrecord RecordDataSchema {}\"},\n+        {properties2, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@validate.empty = {}\\n\" + \"@empty = {}\\nrecord RecordDataSchema {}\"},\n+        {properties3, \"namespace com.linkedin.test\\n\" + \"\\n\" + \"@nested = {\\\"validate\\\":{\\\"empty\\\":{}},\\\"empty\\\":{}}\\n\"\n+            + \"@empty = {}\\n\" + \"record RecordDataSchema {}\"}};\n+  }\n+\n+  @Test(dataProvider = \"recordSchemaProvider\")\n+  public void testEncodeRecordWithEmptyDataMapInProperty(Map<String, Object> properties, String pdlString) throws IOException\n   {\n     RecordDataSchema source =\n         new RecordDataSchema(new Name(\"com.linkedin.test.RecordDataSchema\"), RecordDataSchema.RecordType.RECORD);\n-    Map<String, Object> properties = new HashMap<>();\n     properties.put(\"empty\", new DataMap());", "originalCommit": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4MjIzOQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378482239", "bodyText": "done", "author": "aman1309", "createdAt": "2020-02-12T20:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMjA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java b/data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java\nindex 3eb07de0f..a3c99482f 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestSchemaToPdlEncoder.java\n\n@@ -22,8 +22,6 @@ import java.io.IOException;\n import java.io.StringWriter;\n import java.util.HashMap;\n import java.util.Map;\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n import static org.junit.Assert.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMjQ5Ng==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378002496", "bodyText": "the !pathParts.empty() check in the else if block is redundant. Just make it else {\nAlso update the comment in that block, it is no longer only for empty datamap.", "author": "karthikbalasub", "createdAt": "2020-02-12T01:56:22Z", "path": "data/src/main/java/com/linkedin/data/schema/PdlBuilder.java", "diffHunk": "@@ -149,7 +149,7 @@ PdlBuilder writeProperties(List<String> prefix, Map<String, Object> properties)\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\n         DataMap dm = (DataMap) value;\n-        if (!dm.isEmpty())\n+        if (!dm.isEmpty() && dm.size() == 1)", "originalCommit": "5fa78d6c54a80e37a7e96c1c3367a5e2f749bac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4MjkxMQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378482911", "bodyText": "done", "author": "aman1309", "createdAt": "2020-02-12T20:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMjQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\nindex 915407f13..65649b857 100644\n--- a/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n+++ b/data/src/main/java/com/linkedin/data/schema/PdlBuilder.java\n\n@@ -149,14 +147,14 @@ abstract class PdlBuilder\n       {\n         // Favor @x.y.z = \"value\" property encoding style over @x = { \"y\": { \"z\": \"value\" } }\n         DataMap dm = (DataMap) value;\n-        if (!dm.isEmpty() && dm.size() == 1)\n+        if (dm.size() == 1)\n         {\n           // encode non-empty value property like @x.y.z = \"value\"\n           writeProperties(pathParts, dm);\n         }\n-        else if (!pathParts.isEmpty())\n+        else\n         {\n-          // encode empty value property like @x.y = {}\n+          // encode value property like @x.y = {jsonValue}\n           writeProperty(pathParts, dm);\n         }\n       }\n"}}, {"oid": "d02a6096df05ebf140ee359072df3f4db25fc85e", "url": "https://github.com/linkedin/rest.li/commit/d02a6096df05ebf140ee359072df3f4db25fc85e", "message": "address review comments", "committedDate": "2020-02-12T22:27:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NTkzMQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378565931", "bodyText": "License", "author": "evanw555", "createdAt": "2020-02-12T23:09:10Z", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;", "originalCommit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4ODkwOQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378588909", "bodyText": "done", "author": "aman1309", "createdAt": "2020-02-13T00:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NTkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\nindex 4bd75382f..9f11714ed 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n\n@@ -1,3 +1,19 @@\n+/*\n+   Copyright (c) 2015 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n package com.linkedin.data.schema;\n \n import com.linkedin.data.DataMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NjI5Mw==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378566293", "bodyText": "Add javadoc, my personal convention for test javadocs is: Tests for {@link PdlBuilder}.", "author": "evanw555", "createdAt": "2020-02-12T23:10:18Z", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.DataMap;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+", "originalCommit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4ODk3MA==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378588970", "bodyText": "done", "author": "aman1309", "createdAt": "2020-02-13T00:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NjI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\nindex 4bd75382f..9f11714ed 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n\n@@ -1,3 +1,19 @@\n+/*\n+   Copyright (c) 2015 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n package com.linkedin.data.schema;\n \n import com.linkedin.data.DataMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2Nzc3Ng==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378567776", "bodyText": "It's fine that each test (for now) has one root-level property, but none of them branch. Thus, these cases don't actually test your changes. You'll need to make this a little more comprehensive.", "author": "evanw555", "createdAt": "2020-02-12T23:14:53Z", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.DataMap;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestPdlBuilder {\n+\n+  @DataProvider\n+  private static Object[][] propertiesMapProvider()\n+  {\n+    DataMap properties1 = new DataMap();\n+    properties1.put(\"empty\", new DataMap());\n+    DataMap properties2 = new DataMap();\n+    properties2.put(\"validate\", properties1);\n+    DataMap properties3 = new DataMap();\n+    DataMap nestedMap = new DataMap(properties2);\n+    nestedMap.putAll(properties1);\n+    properties3.put(\"nested\", nestedMap);\n+    return new Object[][]{{properties1, \"@empty = {}\\n\"},\n+        {properties2, \"@validate.empty = {}\\n\"}\n+        //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic", "originalCommit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MjM5OQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378592399", "bodyText": "as discussed this is not possible right now, as ordering is not deterministic.", "author": "aman1309", "createdAt": "2020-02-13T00:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2Nzc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\nindex 4bd75382f..9f11714ed 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n\n@@ -1,3 +1,19 @@\n+/*\n+   Copyright (c) 2015 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n package com.linkedin.data.schema;\n \n import com.linkedin.data.DataMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODA0MQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378568041", "bodyText": "nit: I'd suggest mapping the test method name directly to the method being tested; testing writeProperties -> testWriteProperties", "author": "evanw555", "createdAt": "2020-02-12T23:15:40Z", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.DataMap;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestPdlBuilder {\n+\n+  @DataProvider\n+  private static Object[][] propertiesMapProvider()\n+  {\n+    DataMap properties1 = new DataMap();\n+    properties1.put(\"empty\", new DataMap());\n+    DataMap properties2 = new DataMap();\n+    properties2.put(\"validate\", properties1);\n+    DataMap properties3 = new DataMap();\n+    DataMap nestedMap = new DataMap(properties2);\n+    nestedMap.putAll(properties1);\n+    properties3.put(\"nested\", nestedMap);\n+    return new Object[][]{{properties1, \"@empty = {}\\n\"},\n+        {properties2, \"@validate.empty = {}\\n\"}\n+        //TODO Add test case for multiple properties in a map level once iteration logic is fixed to be deterministic\n+    };\n+  }\n+\n+  @Test(dataProvider = \"propertiesMapProvider\")\n+  public void testPropertiesWriter(Map<String, Object> properties, String pdlString) throws IOException", "originalCommit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4OTAxOA==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378589018", "bodyText": "done", "author": "aman1309", "createdAt": "2020-02-13T00:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\nindex 4bd75382f..9f11714ed 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n\n@@ -1,3 +1,19 @@\n+/*\n+   Copyright (c) 2015 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n package com.linkedin.data.schema;\n \n import com.linkedin.data.DataMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODQ1NQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378568455", "bodyText": "Please use the Rest.li brace style convention (braces on new lines). This goes especially for your data provider, the return value should be expanded neatly.", "author": "evanw555", "createdAt": "2020-02-12T23:16:52Z", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.linkedin.data.schema;\n+\n+import com.linkedin.data.DataMap;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestPdlBuilder {", "originalCommit": "d02a6096df05ebf140ee359072df3f4db25fc85e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4OTE5MQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378589191", "bodyText": "done", "author": "aman1309", "createdAt": "2020-02-13T00:26:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\nindex 4bd75382f..9f11714ed 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n\n@@ -1,3 +1,19 @@\n+/*\n+   Copyright (c) 2015 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n package com.linkedin.data.schema;\n \n import com.linkedin.data.DataMap;\n"}}, {"oid": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "url": "https://github.com/linkedin/rest.li/commit/e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "message": "address evan review comments", "committedDate": "2020-02-13T00:41:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5NDQxMQ==", "url": "https://github.com/linkedin/rest.li/pull/166#discussion_r378594411", "bodyText": "Looks good overall, just fix this to 2020.", "author": "evanw555", "createdAt": "2020-02-13T00:44:36Z", "path": "data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+   Copyright (c) 2015 LinkedIn Corp.", "originalCommit": "e7cb61e5c22ff28e74e75bff0fa547639f607b2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e2efce595d275b6c3c63f074f8aeb2c8357675c", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\nindex 9f11714ed..52356400b 100644\n--- a/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n+++ b/data/src/test/java/com/linkedin/data/schema/TestPdlBuilder.java\n\n@@ -1,5 +1,5 @@\n /*\n-   Copyright (c) 2015 LinkedIn Corp.\n+   Copyright (c) 2020 LinkedIn Corp.\n \n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n"}}, {"oid": "2e2efce595d275b6c3c63f074f8aeb2c8357675c", "url": "https://github.com/linkedin/rest.li/commit/2e2efce595d275b6c3c63f074f8aeb2c8357675c", "message": "update licence year", "committedDate": "2020-02-13T00:46:39Z", "type": "commit"}]}