{"pr_number": 223, "pr_title": "Raise exception in ValidateSchemaAnnotationTask if any handler configured not found.", "pr_createdAt": "2020-03-18T01:06:32Z", "pr_url": "https://github.com/linkedin/rest.li/pull/223", "timeline": [{"oid": "bcd15269fa2eeff66dee390f3f1cc731a5face3a", "url": "https://github.com/linkedin/rest.li/commit/bcd15269fa2eeff66dee390f3f1cc731a5face3a", "message": "Raise exception in ValidateSchemaAnnotationTask if any handler configured not found.", "committedDate": "2020-03-18T01:00:04Z", "type": "commit"}, {"oid": "b58d96ba46f9b9a87df7f94a3d3f8ecd792e3f28", "url": "https://github.com/linkedin/rest.li/commit/b58d96ba46f9b9a87df7f94a3d3f8ecd792e3f28", "message": "Reword error message", "committedDate": "2020-03-18T01:08:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NTE5Ng==", "url": "https://github.com/linkedin/rest.li/pull/223#discussion_r394055196", "bodyText": "Is this assuming one handler per jar?", "author": "karthikbalasub", "createdAt": "2020-03-18T01:12:58Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java", "diffHunk": "@@ -89,6 +91,15 @@ public void validateSchemaAnnotation() throws IOException\n \n     getProject().getLogger().info(\"started schema annotation validation\");\n \n+    int expectedHandlersNumber = ((DefaultConfiguration) _handlerJarPath).getAllDependencies().size();", "originalCommit": "b58d96ba46f9b9a87df7f94a3d3f8ecd792e3f28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjE3Nw==", "url": "https://github.com/linkedin/rest.li/pull/223#discussion_r394056177", "bodyText": "This wouldn't work if one Jar has more than one handle and another fails to load. A better check would be to ensure atleast one handler per jar dependency.\nIdeally, we shouldn't use these heuristics. We should provide a way for users to explicity say which class or package to load and we should error if it cannot be loaded.", "author": "karthikbalasub", "createdAt": "2020-03-18T01:17:22Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java", "diffHunk": "@@ -108,12 +119,16 @@ public void validateSchemaAnnotation() throws IOException\n       scanHandlersInClassPathJar(f, foundClassNames, scannedClass);\n     }\n \n-    // skip if no handlers configured or found\n-    if (handlerJarPathUrls.size() == 0 || foundClassNames.size() == 0)\n+    // For now, every schema annotation handler should be in its own module\n+    // if the number of found handlers doesn't match number of configured modules, will throw exception\n+    if (foundClassNames.size() != expectedHandlersNumber)", "originalCommit": "b58d96ba46f9b9a87df7f94a3d3f8ecd792e3f28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDM3Mg==", "url": "https://github.com/linkedin/rest.li/pull/223#discussion_r394060372", "bodyText": "I thought about this, and I know you are referring to something like\nfoundClassNames.size() < expectedHandlersNumber\nThat Is why I mentioned:\n\"every schema annotation handler should be in its own module\". Can we enforce this rule?", "author": "junchuanwang", "createdAt": "2020-03-18T01:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzNjQ5MQ==", "url": "https://github.com/linkedin/rest.li/pull/223#discussion_r394136491", "bodyText": "It is hard to enforce. I think this change is okay for now, but create a backlog ticket to fix this cleanly. we could discuss during ideas meeting", "author": "karthikbalasub", "createdAt": "2020-03-18T06:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjE3Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "37bba062849e8562552a22099e4c6b9bcbe32818", "url": "https://github.com/linkedin/rest.li/commit/37bba062849e8562552a22099e4c6b9bcbe32818", "message": "Merge branch 'master' into validate_schema_should_fail_on_error", "committedDate": "2020-03-23T18:15:39Z", "type": "commit"}]}