{"pr_number": 267, "pr_title": "Optimize Zookeeper Read during Announcing/DeAnnouncing", "pr_createdAt": "2020-04-22T23:14:55Z", "pr_url": "https://github.com/linkedin/rest.li/pull/267", "timeline": [{"oid": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "url": "https://github.com/linkedin/rest.li/commit/626ad9b648cd04c5c587300d960a07f8e3e5e698", "message": "Optimize Zookeeper Read during Announcing/DeAnnouncing\n1. Introduce a URI hashbased ephimeral prefix instead of the existing ephemoral\n2. All the Announcers use the URI hashcode to prefix the ephemeral node getting created during markUp\n3. ZookeeperEphemeralStore uses the Prefix Generator to filter out or remove unwanted child reads during markUp/markDown\n4. A D2 cluster of Size 1000 nodes can create 2.7 million Zookeeper read requests just from the deploying nodes during a service deploy\n5. This enhancement helps to reduce the 2.7 million reads down to just under 3K reads: A reduction by 99%", "committedDate": "2020-04-23T02:23:33Z", "type": "commit"}, {"oid": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "url": "https://github.com/linkedin/rest.li/commit/626ad9b648cd04c5c587300d960a07f8e3e5e698", "message": "Optimize Zookeeper Read during Announcing/DeAnnouncing\n1. Introduce a URI hashbased ephimeral prefix instead of the existing ephemoral\n2. All the Announcers use the URI hashcode to prefix the ephemeral node getting created during markUp\n3. ZookeeperEphemeralStore uses the Prefix Generator to filter out or remove unwanted child reads during markUp/markDown\n4. A D2 cluster of Size 1000 nodes can create 2.7 million Zookeeper read requests just from the deploying nodes during a service deploy\n5. This enhancement helps to reduce the 2.7 million reads down to just under 3K reads: A reduction by 99%", "committedDate": "2020-04-23T02:23:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjEwMw==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r413996103", "bodyText": "Still prefer to use the full hostName + others as the prefix. I do not see big benefit using hashing -- you need to generated hash value every time so no CPU savings. More importantly, using the host name as the node name can immediately help me to find the right node when I browse the zk directory. That's very helpful for manual checking!", "author": "cx-super", "createdAt": "2020-04-23T17:42:13Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/servers/AnnouncerUriHashPrefixGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.servers;\n+\n+import com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n+\n+/**\n+ * EphemeralPrefixGenerator helps to create a hash based prefix for Ephemeral Nodes in {@link ZooKeeperEphemeralStore}\n+ * The hash generated by EphemeralPrefixGenerator will be based on the URI of the {@link ZooKeeperAnnouncer}\n+ * This hash prefixing of EphemeralNodes helps {@link ZooKeeperEphemeralStore} to optimize the reads during markUp/markDown\n+ * @author Nizar Mankulangara (nmankulangara@linkedin.com)\n+ */\n+\n+public class AnnouncerUriHashPrefixGenerator implements ZookeeperEphemeralPrefixGenerator\n+{\n+  private final ZooKeeperAnnouncer _announcer;\n+\n+  public AnnouncerUriHashPrefixGenerator(ZooKeeperAnnouncer Announcer)\n+  {\n+    _announcer = Announcer;\n+  }\n+\n+  @Override\n+  public String generatePrefix()\n+  {\n+    return getAnnouncedUriHashCode();\n+  }\n+\n+  public String getAnnouncedUriHashCode()\n+  {\n+    if (_announcer == null || _announcer.getUri() == null)\n+    {\n+      return ZooKeeperEphemeralStore.DEFAULT_PREFIX;\n+    }\n+\n+    int hashCode = Math.abs(_announcer.getUri().hashCode());\n+    return Integer.toString(hashCode);\n+  }", "originalCommit": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMzAwMw==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414213003", "bodyText": "agree on the value of keeping the hostname. Could we append the hostName after the hash code? like \"HashCode_HostName_\"?\nI think the hashCode could save us a few reads on some nodes in the case that many URIs (from multiple applications) are hosted on one host.", "author": "bohhyang", "createdAt": "2020-04-24T00:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxOTY5Mg==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414219692", "bodyText": "I mean \"HashCode-HostName-\" (with hyphens instead of underscores). The filter class could only match the hashCode part, and leave the hostname for manual debugging.", "author": "bohhyang", "createdAt": "2020-04-24T00:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3OTk5MQ==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414779991", "bodyText": "Thanks - If we prefer hostname - I am okay with it too. I want to keep it simple and avoid combining both hostname and hashcode as the value of combining is not that significant. Also we may have other repercussions if the size of the znode is too big than the current one.", "author": "nizarm", "createdAt": "2020-04-24T18:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "805345c2ad18f10ded2ece069a9772316f3cd873", "chunk": "diff --git a/d2/src/main/java/com/linkedin/d2/balancer/servers/AnnouncerUriHashPrefixGenerator.java b/d2/src/main/java/com/linkedin/d2/balancer/servers/AnnouncerHostPrefixGenerator.java\nsimilarity index 70%\nrename from d2/src/main/java/com/linkedin/d2/balancer/servers/AnnouncerUriHashPrefixGenerator.java\nrename to d2/src/main/java/com/linkedin/d2/balancer/servers/AnnouncerHostPrefixGenerator.java\nindex d4d3b594f..257bddfb0 100644\n--- a/d2/src/main/java/com/linkedin/d2/balancer/servers/AnnouncerUriHashPrefixGenerator.java\n+++ b/d2/src/main/java/com/linkedin/d2/balancer/servers/AnnouncerHostPrefixGenerator.java\n\n@@ -26,29 +26,27 @@ import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n  * @author Nizar Mankulangara (nmankulangara@linkedin.com)\n  */\n \n-public class AnnouncerUriHashPrefixGenerator implements ZookeeperEphemeralPrefixGenerator\n+public class AnnouncerHostPrefixGenerator implements ZookeeperEphemeralPrefixGenerator\n {\n-  private final ZooKeeperAnnouncer _announcer;\n+  private final String _hostName;\n \n-  public AnnouncerUriHashPrefixGenerator(ZooKeeperAnnouncer Announcer)\n+  public AnnouncerHostPrefixGenerator(String hostName)\n   {\n-    _announcer = Announcer;\n+    if (hostName == null)\n+    {\n+      _hostName = null;\n+    }\n+    else\n+    {\n+      // Since just want to use the machine name for pre-fix and not the entire FQDN to reduce the size of name\n+      int machineNameEndIndex = hostName.indexOf('.');\n+      _hostName = machineNameEndIndex > 0 ? hostName.substring(0, machineNameEndIndex) : hostName;\n+    }\n   }\n \n   @Override\n   public String generatePrefix()\n   {\n-    return getAnnouncedUriHashCode();\n-  }\n-\n-  public String getAnnouncedUriHashCode()\n-  {\n-    if (_announcer == null || _announcer.getUri() == null)\n-    {\n-      return ZooKeeperEphemeralStore.DEFAULT_PREFIX;\n-    }\n-\n-    int hashCode = Math.abs(_announcer.getUri().hashCode());\n-    return Integer.toString(hashCode);\n+    return _hostName;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxODM4MA==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414218380", "bodyText": "use java 8 stream?", "author": "bohhyang", "createdAt": "2020-04-24T00:48:34Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.servers;\n+\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n+import com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperChildFilter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * ChildPrefixFilter helps to filter the children in {@link ZooKeeperEphemeralStore}\n+ * to avoid reading other child data when not required. ChildPrefixFilter filter out other child names\n+ * that are not matching the same prefix generated by the given {@link ZookeeperEphemeralPrefixGenerator}\n+ * @author Nizar Mankulangara (nmankulangara@linkedin.com)\n+ */\n+\n+public class ZookeeperPrefixChildFilter implements ZookeeperChildFilter\n+{\n+  private final ZookeeperEphemeralPrefixGenerator _prefixGenerator;\n+\n+  public ZookeeperPrefixChildFilter(ZookeeperEphemeralPrefixGenerator prefixGenerator)\n+  {\n+    _prefixGenerator = prefixGenerator;\n+  }\n+\n+  @Override\n+  public List<String> filter(List<String> children)\n+  {\n+    List<String> filteredChildren = new ArrayList<>();\n+    for (String child : children)", "originalCommit": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "805345c2ad18f10ded2ece069a9772316f3cd873", "chunk": "diff --git a/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java b/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\nindex a71b20e53..3058ee1e3 100644\n--- a/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\n+++ b/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\n\n@@ -16,12 +16,14 @@\n \n package com.linkedin.d2.balancer.servers;\n \n-import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n import com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore;\n import com.linkedin.d2.discovery.stores.zk.ZookeeperChildFilter;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n \n /**\n  * ChildPrefixFilter helps to filter the children in {@link ZooKeeperEphemeralStore}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxODkwOA==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414218908", "bodyText": "if you take the previous comment about having \"HashCode-HostName-\" as the prefix, then this could be searching for the first index instead of the last?", "author": "bohhyang", "createdAt": "2020-04-24T00:50:40Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.servers;\n+\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n+import com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperChildFilter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * ChildPrefixFilter helps to filter the children in {@link ZooKeeperEphemeralStore}\n+ * to avoid reading other child data when not required. ChildPrefixFilter filter out other child names\n+ * that are not matching the same prefix generated by the given {@link ZookeeperEphemeralPrefixGenerator}\n+ * @author Nizar Mankulangara (nmankulangara@linkedin.com)\n+ */\n+\n+public class ZookeeperPrefixChildFilter implements ZookeeperChildFilter\n+{\n+  private final ZookeeperEphemeralPrefixGenerator _prefixGenerator;\n+\n+  public ZookeeperPrefixChildFilter(ZookeeperEphemeralPrefixGenerator prefixGenerator)\n+  {\n+    _prefixGenerator = prefixGenerator;\n+  }\n+\n+  @Override\n+  public List<String> filter(List<String> children)\n+  {\n+    List<String> filteredChildren = new ArrayList<>();\n+    for (String child : children)\n+    {\n+      int separatorIndex = child.lastIndexOf('-');", "originalCommit": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "805345c2ad18f10ded2ece069a9772316f3cd873", "chunk": "diff --git a/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java b/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\nindex a71b20e53..3058ee1e3 100644\n--- a/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\n+++ b/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\n\n@@ -16,12 +16,14 @@\n \n package com.linkedin.d2.balancer.servers;\n \n-import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n import com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore;\n import com.linkedin.d2.discovery.stores.zk.ZookeeperChildFilter;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n \n /**\n  * ChildPrefixFilter helps to filter the children in {@link ZooKeeperEphemeralStore}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyMzMyMQ==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414223321", "bodyText": "ephemeral?", "author": "bohhyang", "createdAt": "2020-04-24T01:06:16Z", "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperEphemeralStore.java", "diffHunk": "@@ -74,6 +75,7 @@\n   private static final Logger                                      _log =\n                                                                          LoggerFactory.getLogger(ZooKeeperEphemeralStore.class);\n   private static final Pattern PATH_PATTERN    = Pattern.compile(\"(.*)/(.*)$\");\n+  public static final String DEFAULT_PREFIX = \"ephemoral\";", "originalCommit": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNDYxNQ==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414224615", "bodyText": "\"children -> children\" could be Function::identity?", "author": "bohhyang", "createdAt": "2020-04-24T01:11:00Z", "path": "d2/src/main/java/com/linkedin/d2/discovery/stores/zk/ZooKeeperEphemeralStore.java", "diffHunk": "@@ -165,6 +196,8 @@ public ZooKeeperEphemeralStore(ZKConnection client,\n       useNewWatcher = true;\n     }\n \n+    _zookeeperChildFilter = zookeeperChildFilter == null ? (children -> children) : zookeeperChildFilter;", "originalCommit": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMzkwOA==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414313908", "bodyText": "I'm confused by the 2 packages /balancer and /discovery here. If ZookeeperPrefixChildFiler is only used by ZookeeperEphemeralStore, and the interfaces stays in discovery package, why does this file stay under /balancer package? What's the line between these 2 packages?", "author": "rachelhanhan", "createdAt": "2020-04-24T05:56:36Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.servers;", "originalCommit": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "805345c2ad18f10ded2ece069a9772316f3cd873", "chunk": "diff --git a/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java b/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\nindex a71b20e53..3058ee1e3 100644\n--- a/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\n+++ b/d2/src/main/java/com/linkedin/d2/balancer/servers/ZookeeperPrefixChildFilter.java\n\n@@ -16,12 +16,14 @@\n \n package com.linkedin.d2.balancer.servers;\n \n-import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n import com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore;\n import com.linkedin.d2.discovery.stores.zk.ZookeeperChildFilter;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n \n /**\n  * ChildPrefixFilter helps to filter the children in {@link ZooKeeperEphemeralStore}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3ODIyOA==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r414378228", "bodyText": "Will this class replace the existing class ZKUriStoreFactory.java? Having 2 very similar classes looks confusing to me, if the plan is to use this class going forward, we can probably mark ZKUriStoreFactory as deprecated and add the doc to explain.\n(I don't really see any non-testing usage of ZKUriStoreFactory today, looks like container creates its own impl of the factory interface)", "author": "rachelhanhan", "createdAt": "2020-04-24T08:04:41Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/servers/ZooKeeperUriStoreFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.linkedin.d2.balancer.servers;\n+\n+import com.linkedin.d2.balancer.properties.UriProperties;\n+import com.linkedin.d2.balancer.properties.UriPropertiesJsonSerializer;\n+import com.linkedin.d2.balancer.properties.UriPropertiesMerger;\n+import com.linkedin.d2.discovery.stores.zk.ZKConnection;\n+import com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperChildFilter;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n+import com.linkedin.d2.discovery.stores.zk.builder.ZooKeeperEphemeralStoreBuilder;\n+\n+/**\n+ * A factory class to create {@link ZooKeeperEphemeralStore < UriProperties >}\n+ *\n+ * @author Nizar Mankulangara (nmankulangara@linkedin.com)\n+ */\n+public class ZooKeeperUriStoreFactory implements ZooKeeperConnectionManager.ZKStoreFactory<UriProperties, ZooKeeperEphemeralStore<UriProperties>>", "originalCommit": "626ad9b648cd04c5c587300d960a07f8e3e5e698", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "805345c2ad18f10ded2ece069a9772316f3cd873", "chunk": "diff --git a/d2/src/main/java/com/linkedin/d2/balancer/servers/ZooKeeperUriStoreFactory.java b/d2/src/main/java/com/linkedin/d2/balancer/servers/ZooKeeperUriStoreFactory.java\nindex 90ee78c65..79b53c816 100644\n--- a/d2/src/main/java/com/linkedin/d2/balancer/servers/ZooKeeperUriStoreFactory.java\n+++ b/d2/src/main/java/com/linkedin/d2/balancer/servers/ZooKeeperUriStoreFactory.java\n\n@@ -20,6 +20,11 @@ public class ZooKeeperUriStoreFactory implements ZooKeeperConnectionManager.ZKSt\n   private ZookeeperEphemeralPrefixGenerator _prefixGenerator;\n   private boolean _useHashEphemeralPrefix;\n \n+  public ZooKeeperUriStoreFactory()\n+  {\n+    this(null, null, false);\n+  }\n+\n   public ZooKeeperUriStoreFactory(ZookeeperChildFilter childFilter, ZookeeperEphemeralPrefixGenerator prefixGenerator, boolean useHashEphemeralPrefix)\n   {\n \n"}}, {"oid": "805345c2ad18f10ded2ece069a9772316f3cd873", "url": "https://github.com/linkedin/rest.li/commit/805345c2ad18f10ded2ece069a9772316f3cd873", "message": "Iterate with Review comments", "committedDate": "2020-04-25T00:42:47Z", "type": "commit"}, {"oid": "8278bdc408a9830be2bb6ee2329d917862f74222", "url": "https://github.com/linkedin/rest.li/commit/8278bdc408a9830be2bb6ee2329d917862f74222", "message": "Add tests for AnnouncerHostPrefixGenerator & Child Filter", "committedDate": "2020-04-27T23:12:55Z", "type": "commit"}, {"oid": "8278bdc408a9830be2bb6ee2329d917862f74222", "url": "https://github.com/linkedin/rest.li/commit/8278bdc408a9830be2bb6ee2329d917862f74222", "message": "Add tests for AnnouncerHostPrefixGenerator & Child Filter", "committedDate": "2020-04-27T23:12:55Z", "type": "forcePushed"}, {"oid": "294c2413bf121eeb51fc261a11c0a4c35452eabb", "url": "https://github.com/linkedin/rest.li/commit/294c2413bf121eeb51fc261a11c0a4c35452eabb", "message": "Merge branch 'master' into feature/OptimizeD2ServerZkReads", "committedDate": "2020-04-28T00:15:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NzY1Nw==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r416777657", "bodyText": "cross colo announcement might have duplicate host name. should be fine since we still have unique ID. still we can consider adding fabric name.", "author": "cx-super", "createdAt": "2020-04-28T17:03:19Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/servers/AnnouncerHostPrefixGenerator.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.d2.balancer.servers;\n+\n+import com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore;\n+import com.linkedin.d2.discovery.stores.zk.ZookeeperEphemeralPrefixGenerator;\n+\n+/**\n+ * EphemeralPrefixGenerator helps to create a hash based prefix for Ephemeral Nodes in {@link ZooKeeperEphemeralStore}\n+ * The hash generated by EphemeralPrefixGenerator will be based on the URI of the {@link ZooKeeperAnnouncer}\n+ * This hash prefixing of EphemeralNodes helps {@link ZooKeeperEphemeralStore} to optimize the reads during markUp/markDown\n+ * @author Nizar Mankulangara (nmankulangara@linkedin.com)\n+ */\n+\n+public class AnnouncerHostPrefixGenerator implements ZookeeperEphemeralPrefixGenerator\n+{\n+  private final String _hostName;\n+\n+  public AnnouncerHostPrefixGenerator(String hostName)\n+  {\n+    if (hostName == null)\n+    {\n+      _hostName = null;\n+    }\n+    else\n+    {\n+      // Since just want to use the machine name for pre-fix and not the entire FQDN to reduce the size of name\n+      int machineNameEndIndex = hostName.indexOf('.');\n+      _hostName = machineNameEndIndex > 0 ? hostName.substring(0, machineNameEndIndex) : hostName;", "originalCommit": "294c2413bf121eeb51fc261a11c0a4c35452eabb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MjIwNQ==", "url": "https://github.com/linkedin/rest.li/pull/267#discussion_r416792205", "bodyText": "Thank you. Since the fabric name is part of the machine name - we will be having the fabric name.\nlsg1-app\nltx1-app\netc", "author": "nizarm", "createdAt": "2020-04-28T17:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NzY1Nw=="}], "type": "inlineReview", "revised_code": null}]}