{"pr_number": 460, "pr_title": "Performance improved: add lazy instantiation of Throwable objects for\u2026", "pr_createdAt": "2020-10-26T22:07:30Z", "pr_url": "https://github.com/linkedin/rest.li/pull/460", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2NTcyNQ==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r512965725", "bodyText": "Do we need this change in the interface? Since this is leverage only inside TimeoutCallback, Why don't we resolve the lambda inside the TimeoutException itself while calling onError?", "author": "nizarm", "createdAt": "2020-10-27T19:23:28Z", "path": "pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java", "diffHunk": "@@ -32,4 +35,13 @@\n    * @param e the error\n    */\n   void onError(Throwable e);\n+\n+  /**\n+   * Called with lazy Throwable creation if the asynchronous operation failed with an error\n+   * @param throwableSupplier the supplier to create Throwable when needed\n+   */\n+  default void onError(Supplier<Throwable> throwableSupplier)\n+  {\n+    onError(throwableSupplier.get());\n+  }", "originalCommit": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxOTYxOQ==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513019619", "bodyText": "Because we want to postpone the Throwable creation until #onError is called. This can save us a lot of time if onError is never called.", "author": "cx-super", "createdAt": "2020-10-27T20:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2NTcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODAzMA==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513058030", "bodyText": "That part I understood. The question is, since this new onError method is only used by TimeoutCallback - can we resolve the lambda inside this callback when it is about to call onError?\nSee the comment below on TimeoutCallback.java", "author": "nizarm", "createdAt": "2020-10-27T21:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2NTcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxNTMwMw==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513615303", "bodyText": "We can. But the question is wether we want to limit this optimization to TimeoutCallBack or CallBack at all. If you check how many implementation of CallBack, you'll notice that there are a lot of chances of optimization. Of course most of them have limited usage so no need to do anything for now. But should we leave this option open so that when needed, we do not have to come back to change it?", "author": "cx-super", "createdAt": "2020-10-28T17:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2NTcyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0eb3ced006f54c92d3c0113214f2db20c907105", "chunk": "diff --git a/pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java b/pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java\nindex 523ba7569..c7abcba97 100644\n--- a/pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java\n+++ b/pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java\n\n@@ -35,13 +32,4 @@ public interface Callback<T> extends SuccessCallback<T>\n    * @param e the error\n    */\n   void onError(Throwable e);\n-\n-  /**\n-   * Called with lazy Throwable creation if the asynchronous operation failed with an error\n-   * @param throwableSupplier the supplier to create Throwable when needed\n-   */\n-  default void onError(Supplier<Throwable> throwableSupplier)\n-  {\n-    onError(throwableSupplier.get());\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2OTE3NA==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r512969174", "bodyText": "Now instead of creating a throwable object, we are creating a lambda. How can we be sure that the cost of a lambda is smaller than the cost of the throwable object?", "author": "nizarm", "createdAt": "2020-10-27T19:27:28Z", "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -221,7 +221,7 @@ public void onSuccess(Channel channel)\n           }\n         });\n       }\n-    }, new ObjectCreationTimeoutException(\n+    }, () -> new ObjectCreationTimeoutException(\n     \"Exceeded creation timeout of \" + _channelCreationTimeoutMs + \"ms: for HTTP/2 parent channel, remote=\" + _address)));", "originalCommit": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxOTg4Mg==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513019882", "bodyText": "See pervious comments.", "author": "cx-super", "createdAt": "2020-10-27T20:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2OTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1OTgyNA==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513059824", "bodyText": "I understand that we are trying to lazily create the object instance. But my question is more on the cost of creating a lambda. Since the lambda also involves a closure, wouldnt that create a seperate lambda object for each request. So the question is, did we validate if the cost of lambda object for each request is smaller than the cost of creating the Throwable itself?", "author": "nizarm", "createdAt": "2020-10-27T22:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2OTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxNjY3OQ==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513616679", "bodyText": "According to this (https://stackoverflow.com/questions/2347828/how-expensive-is-thread-getstacktrace/10625065#10625065), the answer is definitely yet.", "author": "cx-super", "createdAt": "2020-10-28T17:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2OTE3NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTExMw==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513099113", "bodyText": "Also, note that this code path only gets invoked when there are no spare channels in the pool for the incoming request. This is not invoked for every request!", "author": "nizarm", "createdAt": "2020-10-27T23:53:01Z", "path": "r2-netty/src/main/java/com/linkedin/r2/netty/client/http2/Http2ChannelLifecycle.java", "diffHunk": "@@ -221,7 +221,7 @@ public void onSuccess(Channel channel)\n           }\n         });\n       }\n-    }, new ObjectCreationTimeoutException(\n+    }, () -> new ObjectCreationTimeoutException(\n     \"Exceeded creation timeout of \" + _channelCreationTimeoutMs + \"ms: for HTTP/2 parent channel, remote=\" + _address)));", "originalCommit": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxODY5OA==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513618698", "bodyText": "Agree the save here is small. It's just one of the spots that our customer identified.", "author": "cx-super", "createdAt": "2020-10-28T17:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTExMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDU3MQ==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513100571", "bodyText": "The default method introduced in Callback.java can be avoided if we invoke as follows\ncallbackIfTimeout -> callbackIfTimeout.onError(timeoutThrowableSupplier.get())", "author": "nizarm", "createdAt": "2020-10-27T23:57:27Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/TimeoutCallback.java", "diffHunk": "@@ -67,13 +68,30 @@ public TimeoutCallback(ScheduledExecutorService executor, long timeout, TimeUnit\n    * @param timeoutUnit the {@link TimeUnit} for the timeout parameter.\n    * @param callback the {@link Callback} to be invoked on success or error.\n    * @param timeoutThrowable the custom exception that will be used during the timeout\n+   * @Deprecated use {@link #TimeoutCallback(ScheduledExecutorService, long, TimeUnit, Callback, Supplier)} instead\n    */\n+  @Deprecated\n   public TimeoutCallback(ScheduledExecutorService executor, long timeout, TimeUnit timeoutUnit,\n       final Callback<T> callback, final Throwable timeoutThrowable)\n   {\n     _timeout = new SingleTimeout<>(executor, timeout, timeoutUnit, callback, (callbackIfTimeout) -> callbackIfTimeout.onError(timeoutThrowable));\n   }\n \n+  /**\n+   * Construct a new instance.\n+   *\n+   * @param executor the {@link ScheduledExecutorService} used to schedule the timeout\n+   * @param timeout the timeout delay, in the specified {@link TimeUnit}.\n+   * @param timeoutUnit the {@link TimeUnit} for the timeout parameter.\n+   * @param callback the {@link Callback} to be invoked on success or error.\n+   * @param timeoutThrowableSupplier the custom exception supplier that will be used during the timeout\n+   */\n+  public TimeoutCallback(ScheduledExecutorService executor, long timeout, TimeUnit timeoutUnit,\n+      final Callback<T> callback, final Supplier<Throwable> timeoutThrowableSupplier)\n+  {\n+    _timeout = new SingleTimeout<>(executor, timeout, timeoutUnit, callback, callbackIfTimeout -> callbackIfTimeout.onError(timeoutThrowableSupplier));", "originalCommit": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxODk5MQ==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513618991", "bodyText": "Agree. See my earlier comments.", "author": "cx-super", "createdAt": "2020-10-28T17:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0eb3ced006f54c92d3c0113214f2db20c907105", "chunk": "diff --git a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/TimeoutCallback.java b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/TimeoutCallback.java\nindex a4454fe6a..b708c970a 100644\n--- a/r2-core/src/main/java/com/linkedin/r2/transport/http/client/TimeoutCallback.java\n+++ b/r2-core/src/main/java/com/linkedin/r2/transport/http/client/TimeoutCallback.java\n\n@@ -68,9 +68,7 @@ public class TimeoutCallback<T> implements Callback<T>\n    * @param timeoutUnit the {@link TimeUnit} for the timeout parameter.\n    * @param callback the {@link Callback} to be invoked on success or error.\n    * @param timeoutThrowable the custom exception that will be used during the timeout\n-   * @Deprecated use {@link #TimeoutCallback(ScheduledExecutorService, long, TimeUnit, Callback, Supplier)} instead\n    */\n-  @Deprecated\n   public TimeoutCallback(ScheduledExecutorService executor, long timeout, TimeUnit timeoutUnit,\n       final Callback<T> callback, final Throwable timeoutThrowable)\n   {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwMTE5Ng==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513301196", "bodyText": "Recommend to avoid this change to a simple interface. I think the suggestion below for calling supplier.get() can help us avoid the need of this change.", "author": "ssheng", "createdAt": "2020-10-28T09:38:25Z", "path": "pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java", "diffHunk": "@@ -32,4 +35,13 @@\n    * @param e the error\n    */\n   void onError(Throwable e);\n+\n+  /**\n+   * Called with lazy Throwable creation if the asynchronous operation failed with an error\n+   * @param throwableSupplier the supplier to create Throwable when needed\n+   */\n+  default void onError(Supplier<Throwable> throwableSupplier)\n+  {\n+    onError(throwableSupplier.get());\n+  }", "originalCommit": "94abfbdbb36d85cbdb26caa41d6d46b0aec38b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxOTMyMQ==", "url": "https://github.com/linkedin/rest.li/pull/460#discussion_r513619321", "bodyText": "See my earlier comments.", "author": "cx-super", "createdAt": "2020-10-28T17:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwMTE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d0eb3ced006f54c92d3c0113214f2db20c907105", "chunk": "diff --git a/pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java b/pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java\nindex 523ba7569..c7abcba97 100644\n--- a/pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java\n+++ b/pegasus-common/src/main/java/com/linkedin/common/callback/Callback.java\n\n@@ -35,13 +32,4 @@ public interface Callback<T> extends SuccessCallback<T>\n    * @param e the error\n    */\n   void onError(Throwable e);\n-\n-  /**\n-   * Called with lazy Throwable creation if the asynchronous operation failed with an error\n-   * @param throwableSupplier the supplier to create Throwable when needed\n-   */\n-  default void onError(Supplier<Throwable> throwableSupplier)\n-  {\n-    onError(throwableSupplier.get());\n-  }\n }\n"}}, {"oid": "d0eb3ced006f54c92d3c0113214f2db20c907105", "url": "https://github.com/linkedin/rest.li/commit/d0eb3ced006f54c92d3c0113214f2db20c907105", "message": "Performance improved: add lazy instantiation of Throwable objects for timeout errors", "committedDate": "2020-11-12T21:32:06Z", "type": "commit"}, {"oid": "d0eb3ced006f54c92d3c0113214f2db20c907105", "url": "https://github.com/linkedin/rest.li/commit/d0eb3ced006f54c92d3c0113214f2db20c907105", "message": "Performance improved: add lazy instantiation of Throwable objects for timeout errors", "committedDate": "2020-11-12T21:32:06Z", "type": "forcePushed"}]}