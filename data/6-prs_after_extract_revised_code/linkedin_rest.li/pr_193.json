{"pr_number": 193, "pr_title": "Use pathspec object as hash map key in ResolvedPropertiesReaderVisitor", "pr_createdAt": "2020-02-26T21:48:55Z", "pr_url": "https://github.com/linkedin/rest.li/pull/193", "timeline": [{"oid": "191e834ca481e54b3af1fc48dc813201adec214e", "url": "https://github.com/linkedin/rest.li/commit/191e834ca481e54b3af1fc48dc813201adec214e", "message": "For annotation processor's ResolvedPropertiesReaderVisitor, use pathSpect object as key of hashmap, instead of using string as key", "committedDate": "2020-02-26T21:35:08Z", "type": "commit"}, {"oid": "53b5ba4b920b412e7cc0656f49dffc8b2a76b517", "url": "https://github.com/linkedin/rest.li/commit/53b5ba4b920b412e7cc0656f49dffc8b2a76b517", "message": "fake commit 2", "committedDate": "2020-02-26T21:36:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5ODM2NQ==", "url": "https://github.com/linkedin/rest.li/pull/193#discussion_r384798365", "bodyText": "Just use Collection", "author": "karthikbalasub", "createdAt": "2020-02-26T22:11:04Z", "path": "data/src/main/java/com/linkedin/data/schema/PathSpec.java", "diffHunk": "@@ -84,6 +86,17 @@ public PathSpec(String... segments)\n     _path = new ArrayList<String>(Arrays.asList(segments));\n   }\n \n+  /**\n+   * Construct a new {@link PathSpec} from {@link AbstractCollection} type\n+   *\n+   * @param pathSpecCollection the collection that contains path segments.\n+   */\n+  public PathSpec(AbstractCollection<String> pathSpecCollection)", "originalCommit": "53b5ba4b920b412e7cc0656f49dffc8b2a76b517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0e6f33edd1742ddcc2a3c6bfd46803ef646dd2e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/PathSpec.java b/data/src/main/java/com/linkedin/data/schema/PathSpec.java\nindex eccf12c08..314bc2795 100644\n--- a/data/src/main/java/com/linkedin/data/schema/PathSpec.java\n+++ b/data/src/main/java/com/linkedin/data/schema/PathSpec.java\n\n@@ -87,13 +86,13 @@ public class PathSpec\n   }\n \n   /**\n-   * Construct a new {@link PathSpec} from {@link AbstractCollection} type\n+   * Construct a new {@link PathSpec} from {@link java.util.Collection} type\n    *\n    * @param pathSpecCollection the collection that contains path segments.\n    */\n-  public PathSpec(AbstractCollection<String> pathSpecCollection)\n+  public PathSpec(Collection<String> pathSpecCollection)\n   {\n-    _path = new ArrayList<>();\n+    _path = new ArrayList<>(pathSpecCollection.size());\n     _path.addAll(pathSpecCollection);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5OTA3MQ==", "url": "https://github.com/linkedin/rest.li/pull/193#discussion_r384799071", "bodyText": "initialize size using Collection::size()", "author": "karthikbalasub", "createdAt": "2020-02-26T22:12:32Z", "path": "data/src/main/java/com/linkedin/data/schema/PathSpec.java", "diffHunk": "@@ -84,6 +86,17 @@ public PathSpec(String... segments)\n     _path = new ArrayList<String>(Arrays.asList(segments));\n   }\n \n+  /**\n+   * Construct a new {@link PathSpec} from {@link AbstractCollection} type\n+   *\n+   * @param pathSpecCollection the collection that contains path segments.\n+   */\n+  public PathSpec(AbstractCollection<String> pathSpecCollection)\n+  {\n+    _path = new ArrayList<>();", "originalCommit": "53b5ba4b920b412e7cc0656f49dffc8b2a76b517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0e6f33edd1742ddcc2a3c6bfd46803ef646dd2e", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/PathSpec.java b/data/src/main/java/com/linkedin/data/schema/PathSpec.java\nindex eccf12c08..314bc2795 100644\n--- a/data/src/main/java/com/linkedin/data/schema/PathSpec.java\n+++ b/data/src/main/java/com/linkedin/data/schema/PathSpec.java\n\n@@ -87,13 +86,13 @@ public class PathSpec\n   }\n \n   /**\n-   * Construct a new {@link PathSpec} from {@link AbstractCollection} type\n+   * Construct a new {@link PathSpec} from {@link java.util.Collection} type\n    *\n    * @param pathSpecCollection the collection that contains path segments.\n    */\n-  public PathSpec(AbstractCollection<String> pathSpecCollection)\n+  public PathSpec(Collection<String> pathSpecCollection)\n   {\n-    _path = new ArrayList<>();\n+    _path = new ArrayList<>(pathSpecCollection.size());\n     _path.addAll(pathSpecCollection);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMDI3Mw==", "url": "https://github.com/linkedin/rest.li/pull/193#discussion_r384800273", "bodyText": "Why is it okay to skip?", "author": "karthikbalasub", "createdAt": "2020-02-26T22:15:08Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java", "diffHunk": "@@ -198,10 +198,16 @@ private void checkHandlerAnnotation(String name, List<String> foundClasses) thro\n             return;\n           }\n         }\n-      } catch (ClassNotFoundException e)\n+      }\n+      catch (ClassNotFoundException e)\n       {\n         throw new IOException(\"Failed to load class while scanning classes\", e);\n       }\n+      catch (Exception | Error e)\n+      {\n+        getProject().getLogger()\n+                    .info(\"Unexpected exceptions or errors found during scanning class, ok to skip\", e);", "originalCommit": "53b5ba4b920b412e7cc0656f49dffc8b2a76b517", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMzc1NQ==", "url": "https://github.com/linkedin/rest.li/pull/193#discussion_r384803755", "bodyText": "Sorry I found I made a mistake regarding the content to publish. Let me create a separate view for above change.\nI want this review to only focus on PathSpec key type change", "author": "junchuanwang", "createdAt": "2020-02-26T22:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMDI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "138c0bc457a4c4f4c96a0bea738d19a61a2fffb8", "chunk": "diff --git a/gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java b/gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java\nindex 8599942bf..0d2d07a73 100644\n--- a/gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java\n+++ b/gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/ValidateSchemaAnnotationTask.java\n\n@@ -198,16 +198,10 @@ public class ValidateSchemaAnnotationTask extends DefaultTask\n             return;\n           }\n         }\n-      }\n-      catch (ClassNotFoundException e)\n+      } catch (ClassNotFoundException e)\n       {\n         throw new IOException(\"Failed to load class while scanning classes\", e);\n       }\n-      catch (Exception | Error e)\n-      {\n-        getProject().getLogger()\n-                    .info(\"Unexpected exceptions or errors found during scanning class, ok to skip\", e);\n-      }\n     }\n   }\n \n"}}, {"oid": "138c0bc457a4c4f4c96a0bea738d19a61a2fffb8", "url": "https://github.com/linkedin/rest.li/commit/138c0bc457a4c4f4c96a0bea738d19a61a2fffb8", "message": "Revert \"fake commit 2\"\n\nThis reverts commit 53b5ba4b920b412e7cc0656f49dffc8b2a76b517.", "committedDate": "2020-02-26T22:19:21Z", "type": "commit"}, {"oid": "a0e6f33edd1742ddcc2a3c6bfd46803ef646dd2e", "url": "https://github.com/linkedin/rest.li/commit/a0e6f33edd1742ddcc2a3c6bfd46803ef646dd2e", "message": "address Karthik's comment", "committedDate": "2020-02-26T22:20:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNDMwNg==", "url": "https://github.com/linkedin/rest.li/pull/193#discussion_r384804306", "bodyText": "Only change in test?", "author": "mchen07", "createdAt": "2020-02-26T22:23:44Z", "path": "data/src/test/java/com/linkedin/data/schema/annotation/TestSchemaAnnotationProcessor.java", "diffHunk": "@@ -344,7 +345,7 @@ public void testDenormalizedSchemaProcessing(String filePath, List<List<String>>\n     ResolvedPropertiesReaderVisitor resolvedPropertiesReaderVisitor = new ResolvedPropertiesReaderVisitor();\n     DataSchemaRichContextTraverser traverser = new DataSchemaRichContextTraverser(resolvedPropertiesReaderVisitor);\n     traverser.traverse(result.getResultSchema());\n-    Map<String, Map<String, Object>> pathSpecToResolvedPropertiesMap = resolvedPropertiesReaderVisitor.getLeafFieldsPathSpecToResolvedPropertiesMap();\n+    Map<PathSpec, Map<String, Object>> pathSpecToResolvedPropertiesMap = resolvedPropertiesReaderVisitor.getLeafFieldsPathSpecToResolvedPropertiesMap();", "originalCommit": "138c0bc457a4c4f4c96a0bea738d19a61a2fffb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3371afcbc35cdd85e376ac0e583c035b023a3df7", "chunk": "diff --git a/data/src/test/java/com/linkedin/data/schema/annotation/TestSchemaAnnotationProcessor.java b/data/src/test/java/com/linkedin/data/schema/annotation/TestSchemaAnnotationProcessor.java\nindex 001719a0e..3a38c016b 100644\n--- a/data/src/test/java/com/linkedin/data/schema/annotation/TestSchemaAnnotationProcessor.java\n+++ b/data/src/test/java/com/linkedin/data/schema/annotation/TestSchemaAnnotationProcessor.java\n\n@@ -345,7 +345,7 @@ public class TestSchemaAnnotationProcessor\n     ResolvedPropertiesReaderVisitor resolvedPropertiesReaderVisitor = new ResolvedPropertiesReaderVisitor();\n     DataSchemaRichContextTraverser traverser = new DataSchemaRichContextTraverser(resolvedPropertiesReaderVisitor);\n     traverser.traverse(result.getResultSchema());\n-    Map<PathSpec, Map<String, Object>> pathSpecToResolvedPropertiesMap = resolvedPropertiesReaderVisitor.getLeafFieldsPathSpecToResolvedPropertiesMap();\n+    Map<PathSpec, Map<String, Object>> pathSpecToResolvedPropertiesMap = resolvedPropertiesReaderVisitor.getLeafFieldsPathSpecObjToResolvedPropertiesMap();\n     Assert.assertEquals(pathSpecToResolvedPropertiesMap.entrySet().size(), expected.size());\n \n     for (List<String> pair : expected)\n"}}, {"oid": "3eb74670319ea49c3071e73f0371168f7adc7693", "url": "https://github.com/linkedin/rest.li/commit/3eb74670319ea49c3071e73f0371168f7adc7693", "message": "add ResolvedPropertiesReaderVisitor", "committedDate": "2020-02-27T00:38:11Z", "type": "commit"}, {"oid": "3371afcbc35cdd85e376ac0e583c035b023a3df7", "url": "https://github.com/linkedin/rest.li/commit/3371afcbc35cdd85e376ac0e583c035b023a3df7", "message": "change to avoid major version bump", "committedDate": "2020-02-28T01:22:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NDI4NA==", "url": "https://github.com/linkedin/rest.li/pull/193#discussion_r385464284", "bodyText": "I understand that you need to rename the method to avoid conflicts, but this is very wordy. I'd suggest cutting it down. How about getLeafFieldToResolvedPropertiesMap? You don't need to say \"pathSpec\" because it's implied based on the return type.", "author": "evanw555", "createdAt": "2020-02-28T01:29:31Z", "path": "data/src/main/java/com/linkedin/data/schema/annotation/ResolvedPropertiesReaderVisitor.java", "diffHunk": "@@ -122,8 +122,26 @@ public void callbackOnContext(DataSchemaRichContextTraverser.TraverserContext co\n     return null;\n   }\n \n-  public Map<PathSpec, Map<String, Object>> getLeafFieldsPathSpecToResolvedPropertiesMap()\n+  /**\n+   * This method is deprecated and should not be used due to performance consideration, because this method will generate string and use that as map keys,\n+   * and it is not necessarily memory-efficient.\n+   *\n+   * User should use {@link #getLeafFieldsPathSpecObjToResolvedPropertiesMap}, which use PathSpec object as map key.\n+   * @return a map with {@link PathSpec} string points to leaf field as map key and the resolved properties as its value\n+   *\n+   */\n+  @Deprecated\n+  public Map<String, Map<String, Object>> getLeafFieldsPathSpecToResolvedPropertiesMap()\n   {\n-    return _leafFieldsPathSpecToResolvedPropertiesMap;\n+    return _leafFieldsPathSpecObjToResolvedPropertiesMap.entrySet()\n+                                                        .stream()\n+                                                        .collect(Collectors.toMap(e -> e.getKey().toString(),\n+                                                                                  Map.Entry::getValue));\n+\n+  }\n+\n+  public Map<PathSpec, Map<String, Object>> getLeafFieldsPathSpecObjToResolvedPropertiesMap()", "originalCommit": "3371afcbc35cdd85e376ac0e583c035b023a3df7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f59b19c823c8d02cb8f384b3b57d0d78f2571f", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/annotation/ResolvedPropertiesReaderVisitor.java b/data/src/main/java/com/linkedin/data/schema/annotation/ResolvedPropertiesReaderVisitor.java\nindex 85e975320..5c440a137 100644\n--- a/data/src/main/java/com/linkedin/data/schema/annotation/ResolvedPropertiesReaderVisitor.java\n+++ b/data/src/main/java/com/linkedin/data/schema/annotation/ResolvedPropertiesReaderVisitor.java\n\n@@ -126,22 +126,22 @@ public class ResolvedPropertiesReaderVisitor implements DataSchemaRichContextTra\n    * This method is deprecated and should not be used due to performance consideration, because this method will generate string and use that as map keys,\n    * and it is not necessarily memory-efficient.\n    *\n-   * User should use {@link #getLeafFieldsPathSpecObjToResolvedPropertiesMap}, which use PathSpec object as map key.\n+   * User should use {@link #getLeafFieldsToResolvedPropertiesMap}, which use PathSpec object as map key.\n    * @return a map with {@link PathSpec} string points to leaf field as map key and the resolved properties as its value\n    *\n    */\n   @Deprecated\n   public Map<String, Map<String, Object>> getLeafFieldsPathSpecToResolvedPropertiesMap()\n   {\n-    return _leafFieldsPathSpecObjToResolvedPropertiesMap.entrySet()\n-                                                        .stream()\n-                                                        .collect(Collectors.toMap(e -> e.getKey().toString(),\n+    return _leafFieldsToResolvedPropertiesMap.entrySet()\n+                                               .stream()\n+                                               .collect(Collectors.toMap(e -> e.getKey().toString(),\n                                                                                   Map.Entry::getValue));\n \n   }\n \n-  public Map<PathSpec, Map<String, Object>> getLeafFieldsPathSpecObjToResolvedPropertiesMap()\n+  public Map<PathSpec, Map<String, Object>> getLeafFieldsToResolvedPropertiesMap()\n   {\n-    return _leafFieldsPathSpecObjToResolvedPropertiesMap;\n+    return _leafFieldsToResolvedPropertiesMap;\n   }\n }\n"}}, {"oid": "35f59b19c823c8d02cb8f384b3b57d0d78f2571f", "url": "https://github.com/linkedin/rest.li/commit/35f59b19c823c8d02cb8f384b3b57d0d78f2571f", "message": "address one more comment", "committedDate": "2020-02-28T01:32:44Z", "type": "commit"}, {"oid": "cfeead313bbecf3503233f1af6a423887034a589", "url": "https://github.com/linkedin/rest.li/commit/cfeead313bbecf3503233f1af6a423887034a589", "message": "Merge branch 'master' into junchuan_use_pathSpec_in_hashmap", "committedDate": "2020-02-28T01:33:35Z", "type": "commit"}]}