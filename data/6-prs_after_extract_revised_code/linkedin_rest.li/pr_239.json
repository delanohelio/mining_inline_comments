{"pr_number": 239, "pr_title": "Add resource key validation while parsing", "pr_createdAt": "2020-03-27T10:09:59Z", "pr_url": "https://github.com/linkedin/rest.li/pull/239", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjUwNg==", "url": "https://github.com/linkedin/rest.li/pull/239#discussion_r408602506", "bodyText": "Also add a test where the key type is NullSchemaRecord", "author": "karthikbalasub", "createdAt": "2020-04-15T06:12:01Z", "path": "restli-common/src/test/java/com/linkedin/restli/common/TestComplexResourceKey.java", "diffHunk": "@@ -126,30 +127,59 @@ public void testReadOnlyWithNullParams()\n     }\n   }\n \n-  @Test\n-  public void testKeySchema()\n+  @DataProvider\n+  public Object[][] keySchemaValidation() {\n+    return new Object[][]\n+        {\n+            {11, 11, false},\n+            {1, 1, true},\n+            {11, 1, false},\n+            {1, 11, true}\n+        };\n+  }\n+\n+  @Test(dataProvider = \"keySchemaValidation\")\n+  public void testKeySchema(int keyValue, int paramValue, boolean validationFailure)\n   {\n     RecordDataSchema schema = OmniRecord.schema;\n     TypeSpec<OmniRecord> keyType = new TypeSpec<OmniRecord>(OmniRecord.class, schema);\n-    TypeSpec<OmniRecord> paramsType = new TypeSpec<OmniRecord>(OmniRecord.class, schema);\n-    ComplexKeySpec<OmniRecord, OmniRecord> keySpec = new ComplexKeySpec<OmniRecord, OmniRecord>(keyType, paramsType);\n-\n+    TypeSpec<NullSchemaRecord> paramsType = new TypeSpec<NullSchemaRecord>(NullSchemaRecord.class, null);\n+    ComplexKeySpec<OmniRecord, NullSchemaRecord> keySpec =\n+        new ComplexKeySpec<OmniRecord, NullSchemaRecord>(keyType, paramsType);\n+    DataMap paramsData = new DataMap();\n+    paramsData.put(\"int\", paramValue);\n     DataMap data = new DataMap();\n-    data.put(\"int\", 1);\n+    data.put(\"int\", keyValue);\n+    data.put(\"$params\", paramsData);\n \n-    ComplexResourceKey<RecordTemplate, RecordTemplate> key = ComplexResourceKey.buildFromDataMap(data, keySpec);\n-\n-    Assert.assertEquals(key.getKey().schema(), schema);\n-    Assert.assertEquals(key.getParams().schema(), schema);\n+    try\n+    {\n+      ComplexResourceKey<RecordTemplate, RecordTemplate> key = ComplexResourceKey.buildFromDataMap(data, keySpec);\n+      key.validate();\n+      Assert.assertEquals(key.getKey().schema(), schema);\n+      Assert.assertNull(key.getParams().schema());\n+      Assert.assertFalse(validationFailure);\n+    }\n+    catch (IllegalArgumentException ex)\n+    {\n+      Assert.assertTrue(validationFailure, \"Unexpected validation failure\");\n+    }\n   }\n \n   public static class OmniRecord extends RecordTemplate {\n     private static RecordDataSchema schema =\n-            (RecordDataSchema) DataTemplateUtil.parseSchema(\"{ \\\"type\\\" : \\\"record\\\", \\\"name\\\" : \\\"omni\\\", \\\"fields\\\" : [ { \\\"name\\\" : \\\"int\\\", \\\"type\\\" : \\\"int\\\" } ] }\");\n+            (RecordDataSchema) DataTemplateUtil.parseSchema(\"{ \\\"type\\\" : \\\"record\\\", \\\"name\\\" : \\\"omni\\\", \\\"fields\\\" : [ { \\\"name\\\" : \\\"int\\\", \\\"type\\\" : \\\"int\\\", \\\"validate\\\": { \\\"regex\\\": { \\\"regex\\\": \\\"[0-9][0-9]\\\" } } } ] }\");\n \n     public OmniRecord(DataMap map)\n     {\n       super(map, schema);\n     }\n   }\n+\n+  public static class NullSchemaRecord extends RecordTemplate {", "originalCommit": "bb15e0edf35ffb9725b5c998f89f292b0cf526ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa2ae52b9d724010edfb040dc0dac857432c5428", "chunk": "diff --git a/restli-common/src/test/java/com/linkedin/restli/common/TestComplexResourceKey.java b/restli-common/src/test/java/com/linkedin/restli/common/TestComplexResourceKey.java\nindex beeadf551..fc19c01d0 100644\n--- a/restli-common/src/test/java/com/linkedin/restli/common/TestComplexResourceKey.java\n+++ b/restli-common/src/test/java/com/linkedin/restli/common/TestComplexResourceKey.java\n\n@@ -131,21 +131,20 @@ public class TestComplexResourceKey\n   public Object[][] keySchemaValidation() {\n     return new Object[][]\n         {\n-            {11, 11, false},\n-            {1, 1, true},\n-            {11, 1, false},\n-            {1, 11, true}\n+            {11, 11, false, OmniRecord.class},\n+            {11, 1, true, OmniRecord.class},\n+            {1, 11, true, OmniRecord.class},\n+            {1, 1, false, NullSchemaRecord.class},\n         };\n   }\n \n   @Test(dataProvider = \"keySchemaValidation\")\n-  public void testKeySchema(int keyValue, int paramValue, boolean validationFailure)\n+  public void testKeySchema(int keyValue, int paramValue, boolean validationFailure, Class<RecordTemplate> schemaClass)\n   {\n-    RecordDataSchema schema = OmniRecord.schema;\n-    TypeSpec<OmniRecord> keyType = new TypeSpec<OmniRecord>(OmniRecord.class, schema);\n-    TypeSpec<NullSchemaRecord> paramsType = new TypeSpec<NullSchemaRecord>(NullSchemaRecord.class, null);\n-    ComplexKeySpec<OmniRecord, NullSchemaRecord> keySpec =\n-        new ComplexKeySpec<OmniRecord, NullSchemaRecord>(keyType, paramsType);\n+    TypeSpec<RecordTemplate> keyType = new TypeSpec<RecordTemplate>(schemaClass);\n+    TypeSpec<RecordTemplate> paramsType = new TypeSpec<RecordTemplate>(schemaClass);\n+    ComplexKeySpec<RecordTemplate, RecordTemplate> keySpec =\n+        new ComplexKeySpec<RecordTemplate, RecordTemplate>(keyType, paramsType);\n     DataMap paramsData = new DataMap();\n     paramsData.put(\"int\", paramValue);\n     DataMap data = new DataMap();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNjk4OA==", "url": "https://github.com/linkedin/rest.li/pull/239#discussion_r408606988", "bodyText": "System properties are shared. Setting it this way might cause flakiness if tests are running in parallel.\nYou should ideally pass these as parameter to the init method. (There are similar methods already). To make this generic, you can add a init method that takes in RestLiConfig directly.", "author": "karthikbalasub", "createdAt": "2020-04-15T06:24:45Z", "path": "restli-int-test/src/test/java/com/linkedin/restli/examples/TestTyperefCustomDoubleAssociationKeyResource.java", "diffHunk": "@@ -69,13 +68,15 @@\n   @BeforeClass\n   public void initClass() throws Exception\n   {\n+    System.setProperty(RestLiIntTestServer.VALIDATE_KEYS_PROPERTY_NAME, Boolean.TRUE.toString());", "originalCommit": "bb15e0edf35ffb9725b5c998f89f292b0cf526ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa2ae52b9d724010edfb040dc0dac857432c5428", "chunk": "diff --git a/restli-int-test/src/test/java/com/linkedin/restli/examples/TestTyperefCustomDoubleAssociationKeyResource.java b/restli-int-test/src/test/java/com/linkedin/restli/examples/TestTyperefCustomDoubleAssociationKeyResource.java\nindex c4306bc29..52142ec36 100644\n--- a/restli-int-test/src/test/java/com/linkedin/restli/examples/TestTyperefCustomDoubleAssociationKeyResource.java\n+++ b/restli-int-test/src/test/java/com/linkedin/restli/examples/TestTyperefCustomDoubleAssociationKeyResource.java\n\n@@ -68,15 +69,15 @@ public class TestTyperefCustomDoubleAssociationKeyResource extends RestLiIntegra\n   @BeforeClass\n   public void initClass() throws Exception\n   {\n-    System.setProperty(RestLiIntTestServer.VALIDATE_KEYS_PROPERTY_NAME, Boolean.TRUE.toString());\n-    super.init();\n+    RestLiConfig config = new RestLiConfig();\n+    config.setValidateResourceKeys(true);\n+    super.init(false, config);\n   }\n \n   @AfterClass\n   public void shutDown() throws Exception\n   {\n     super.shutdown();\n-    System.setProperty(RestLiIntTestServer.VALIDATE_KEYS_PROPERTY_NAME, Boolean.FALSE.toString());\n   }\n \n   @Test(dataProvider = TestConstants.RESTLI_PROTOCOL_1_2_PREFIX + \"requestOptionsDataProvider\")\n"}}, {"oid": "05e65600a4d8cf5b139bb5e3e322d2d8fba6adb3", "url": "https://github.com/linkedin/rest.li/commit/05e65600a4d8cf5b139bb5e3e322d2d8fba6adb3", "message": "Add resource key validation while parsing", "committedDate": "2020-04-15T07:53:09Z", "type": "forcePushed"}, {"oid": "fa2ae52b9d724010edfb040dc0dac857432c5428", "url": "https://github.com/linkedin/rest.li/commit/fa2ae52b9d724010edfb040dc0dac857432c5428", "message": "Add resource key validation while parsing\nbump minor version for feature addition", "committedDate": "2020-04-18T07:29:20Z", "type": "commit"}, {"oid": "fa2ae52b9d724010edfb040dc0dac857432c5428", "url": "https://github.com/linkedin/rest.li/commit/fa2ae52b9d724010edfb040dc0dac857432c5428", "message": "Add resource key validation while parsing\nbump minor version for feature addition", "committedDate": "2020-04-18T07:29:20Z", "type": "forcePushed"}]}