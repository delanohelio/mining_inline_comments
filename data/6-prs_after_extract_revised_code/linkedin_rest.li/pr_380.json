{"pr_number": 380, "pr_title": "Provide an option in SmoothRateLimiter to not drop tasks if going above", "pr_createdAt": "2020-08-13T18:40:44Z", "pr_url": "https://github.com/linkedin/rest.li/pull/380", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0NTY5OQ==", "url": "https://github.com/linkedin/rest.li/pull/380#discussion_r470245699", "bodyText": "Should this be a warning instead? And \"PEGA_xxx\" is normally only returned with exception right? Without the exception I don't see why we want to give this code in a rate limited log", "author": "rachelhanhan", "createdAt": "2020-08-13T21:00:37Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/SmoothRateLimiter.java", "diffHunk": "@@ -107,7 +133,17 @@ public void submit(Callback<None> callback) throws RejectedExecutionException\n \n     if (_pendingCount.get() >= _maxBuffered)\n     {\n-      throw new RejectedExecutionException(\"Cannot submit callback because the buffer is full at \" + _maxBuffered);\n+      if (_bufferOverflowMode == BufferOverflowMode.DROP)\n+      {\n+        throw new RejectedExecutionException(\n+          String.format(\"PEGA_2000: Cannot submit callback because the buffer is full at %d tasks for ratelimiter: %s\", _maxBuffered, _rateLimiterName));\n+      }\n+      else\n+      {\n+        _rateLimitedLoggerOverBuffer.error(String.format(\n+          \"PEGA_2001: the buffer is full at %d tasks for ratelimiter: %s. Executing a request immediately to avoid overflowing and dropping the task.\", _maxBuffered,", "originalCommit": "d0be7f9608a8b05dc5c77cc8ea021feac2bb061a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNjQwMA==", "url": "https://github.com/linkedin/rest.li/pull/380#discussion_r470726400", "bodyText": "In theory, this is a \"Serious problem\" that they should solve, so I made it an error. But I can make this a warning if you prefer", "author": "FreCap", "createdAt": "2020-08-14T16:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0NTY5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1MDU0Mw==", "url": "https://github.com/linkedin/rest.li/pull/380#discussion_r470250543", "bodyText": "What is the rateLimiterName used for? Do we expect CapacityAwareClient to pass the name?", "author": "rachelhanhan", "createdAt": "2020-08-13T21:10:49Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/SmoothRateLimiter.java", "diffHunk": "@@ -78,19 +97,26 @@ public SmoothRateLimiter(ScheduledExecutorService scheduler, Executor executor,\n     _executor = executor;\n     _pendingCallbacks = pendingCallbacks;\n     _maxBuffered = maxBuffered;\n+    _bufferOverflowMode = bufferOverflowMode;\n+    _rateLimiterName = rateLimiterName;", "originalCommit": "d0be7f9608a8b05dc5c77cc8ea021feac2bb061a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNzMxNA==", "url": "https://github.com/linkedin/rest.li/pull/380#discussion_r470727314", "bodyText": "Yes, it is used for logging purposes. I realized that it is very useful to know it when you throw the exception or log the warning, since otherwise you don't know the queue it was happening.\ne.g. you have several services that are using the queue, but only one is the offender. How do you identify it?\nIt is the same concept as the threadName, without it you're completely lost at debug time", "author": "FreCap", "createdAt": "2020-08-14T16:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1MDU0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1NTYyNw==", "url": "https://github.com/linkedin/rest.li/pull/380#discussion_r470255627", "bodyText": "Just wondering if the queue is full, does it mean the enqueue rate and dequeue rate would be exactly the same at that point? Basically if the queue is full, we would not perform any rate limiting? Just want to get some clarification on the expected behavior.", "author": "rachelhanhan", "createdAt": "2020-08-13T21:20:51Z", "path": "r2-core/src/main/java/com/linkedin/r2/transport/http/client/SmoothRateLimiter.java", "diffHunk": "@@ -207,6 +250,13 @@ public void loop()\n         return;\n       }\n \n+      // the size of the pending cannot be ever greater than the maxBuffered. We prefer\n+      // running above the limit then risking a leak", "originalCommit": "d0be7f9608a8b05dc5c77cc8ea021feac2bb061a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNzQyMg==", "url": "https://github.com/linkedin/rest.li/pull/380#discussion_r470727422", "bodyText": "Exactly!", "author": "FreCap", "createdAt": "2020-08-14T16:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1NTYyNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a8af80eff9e7e6ba1dc55f21ba096efe78e8fa11", "url": "https://github.com/linkedin/rest.li/commit/a8af80eff9e7e6ba1dc55f21ba096efe78e8fa11", "message": "Provide an option in SmoothRateLimiter to not drop tasks if going above\nthe max buffered. Dropping tasks might be more diruptive to workflows\ncompared to just not ratelimit.", "committedDate": "2020-08-14T17:17:09Z", "type": "forcePushed"}, {"oid": "f81c7e1c8d3c6ce65eeb145f8fcd568259b47d3f", "url": "https://github.com/linkedin/rest.li/commit/f81c7e1c8d3c6ce65eeb145f8fcd568259b47d3f", "message": "Provide an option in SmoothRateLimiter to not drop tasks if going above\nthe max buffered. Dropping tasks might be more diruptive to workflows\ncompared to just not ratelimit.", "committedDate": "2020-08-14T22:27:29Z", "type": "commit"}, {"oid": "f81c7e1c8d3c6ce65eeb145f8fcd568259b47d3f", "url": "https://github.com/linkedin/rest.li/commit/f81c7e1c8d3c6ce65eeb145f8fcd568259b47d3f", "message": "Provide an option in SmoothRateLimiter to not drop tasks if going above\nthe max buffered. Dropping tasks might be more diruptive to workflows\ncompared to just not ratelimit.", "committedDate": "2020-08-14T22:27:29Z", "type": "forcePushed"}]}