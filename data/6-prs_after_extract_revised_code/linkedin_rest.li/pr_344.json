{"pr_number": 344, "pr_title": "Add an option (enabled by default) to gracefully degrade on encountering invalid surrogate pairs during protobuf string serialization", "pr_createdAt": "2020-07-01T21:23:13Z", "pr_url": "https://github.com/linkedin/rest.li/pull/344", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNjMxNQ==", "url": "https://github.com/linkedin/rest.li/pull/344#discussion_r448626315", "bodyText": "add bool param doc", "author": "aman1309", "createdAt": "2020-07-01T21:29:47Z", "path": "li-protobuf/src/main/java/com/linkedin/data/protobuf/Utf8Utils.java", "diffHunk": "@@ -134,6 +137,40 @@ public static int lookupUtfTable(int initialByte)\n    *                                        {@code bytes.length - offset}\n    */\n   public static int encode(CharSequence in, byte[] out, int offset, int length)\n+  {\n+    return encode(in, out, offset, length, false);\n+  }\n+\n+  /**\n+   * Encodes an input character sequence ({@code in}) to UTF-8 in the target array ({@code out}).\n+   * For a string, this method is similar to\n+   *\n+   * <pre>{@code\n+   * byte[] a = string.getBytes(UTF_8);\n+   * System.arraycopy(a, 0, bytes, offset, a.length);\n+   * return offset + a.length;\n+   * }</pre>\n+   * <p>\n+   * but is more efficient in both time and space. If tolerateInvalidSurrogatePairs is set to true, then\n+   * this method replaces unpaired surrogates with the default replacement character, else\n+   * this method throws {@link IllegalArgumentException}.\n+   *\n+   * <p>To ensure sufficient space in the output buffer, either call {@link #encodedLength} to\n+   * compute the exact amount needed, or leave room for {@code Utf8.MAX_BYTES_PER_CHAR *\n+   * sequence.length()}, which is the largest possible number of bytes that any input can be\n+   * encoded to.\n+   *\n+   * @param in     the input character sequence to be encoded\n+   * @param out    the target array\n+   * @param offset the starting offset in {@code bytes} to start writing at\n+   * @param length the length of the {@code bytes}, starting from {@code offset}", "originalCommit": "d48fb64e704cde1c766255434495d6b2fafa9bba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNDAzMA==", "url": "https://github.com/linkedin/rest.li/pull/344#discussion_r448634030", "bodyText": "Fixed", "author": "karthikrg", "createdAt": "2020-07-01T21:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNjMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "512d246279f6b693303c4d359c42d9238b42db2b", "chunk": "diff --git a/li-protobuf/src/main/java/com/linkedin/data/protobuf/Utf8Utils.java b/li-protobuf/src/main/java/com/linkedin/data/protobuf/Utf8Utils.java\nindex 7126f4865..0d9befdd2 100644\n--- a/li-protobuf/src/main/java/com/linkedin/data/protobuf/Utf8Utils.java\n+++ b/li-protobuf/src/main/java/com/linkedin/data/protobuf/Utf8Utils.java\n\n@@ -160,10 +160,13 @@ public class Utf8Utils\n    * sequence.length()}, which is the largest possible number of bytes that any input can be\n    * encoded to.\n    *\n-   * @param in     the input character sequence to be encoded\n-   * @param out    the target array\n-   * @param offset the starting offset in {@code bytes} to start writing at\n-   * @param length the length of the {@code bytes}, starting from {@code offset}\n+   * @param in                            the input character sequence to be encoded\n+   * @param out                           the target array\n+   * @param offset                        the starting offset in {@code bytes} to start writing at\n+   * @param length                        the length of the {@code bytes}, starting from {@code offset}\n+   * @param tolerateInvalidSurrogatePairs True if invalid surrogate pairs should be tolerated, emitting the standard\n+   *                                      replacement character when encountering them; false if an exception should\n+   *                                      be thrown when encountering them.\n    * @return the new offset, equivalent to {@code offset + Utf8.encodedLength(sequence)}\n    * @throws IllegalArgumentException       if {@code sequence} contains ill-formed UTF-16 (unpaired\n    *                                        surrogates) and tolerateInvalidSurrogatePairs is true.\n"}}, {"oid": "512d246279f6b693303c4d359c42d9238b42db2b", "url": "https://github.com/linkedin/rest.li/commit/512d246279f6b693303c4d359c42d9238b42db2b", "message": "Add an option (enabled by default) to gracefully degrade on encountering invalid surrogate pairs during protobuf string serialization", "committedDate": "2020-07-01T21:48:17Z", "type": "forcePushed"}, {"oid": "d3d9eb7a5b50165440eb9548848c24ca0df7b7fe", "url": "https://github.com/linkedin/rest.li/commit/d3d9eb7a5b50165440eb9548848c24ca0df7b7fe", "message": "Add an option (enabled by default) to gracefully degrade on encountering invalid surrogate pairs during protobuf string serialization", "committedDate": "2020-07-02T03:46:16Z", "type": "forcePushed"}, {"oid": "c17874e34de73872ea1e7a3b006144c18c4b5e6a", "url": "https://github.com/linkedin/rest.li/commit/c17874e34de73872ea1e7a3b006144c18c4b5e6a", "message": "Add an option (enabled by default) to gracefully degrade on encountering invalid surrogate pairs during protobuf string serialization", "committedDate": "2020-07-02T04:13:20Z", "type": "forcePushed"}, {"oid": "66f86c8a97480d4eee3bfabc30d67534fb644940", "url": "https://github.com/linkedin/rest.li/commit/66f86c8a97480d4eee3bfabc30d67534fb644940", "message": "Add an option (enabled by default) to gracefully degrade on encountering invalid surrogate pairs during protobuf string serialization", "committedDate": "2020-07-02T04:15:50Z", "type": "forcePushed"}, {"oid": "45398da52e1737acc4f36a0801370491d245df32", "url": "https://github.com/linkedin/rest.li/commit/45398da52e1737acc4f36a0801370491d245df32", "message": "Add an option (enabled by default) to gracefully degrade on encountering invalid surrogate pairs during protobuf string serialization", "committedDate": "2020-07-02T04:20:55Z", "type": "commit"}, {"oid": "45398da52e1737acc4f36a0801370491d245df32", "url": "https://github.com/linkedin/rest.li/commit/45398da52e1737acc4f36a0801370491d245df32", "message": "Add an option (enabled by default) to gracefully degrade on encountering invalid surrogate pairs during protobuf string serialization", "committedDate": "2020-07-02T04:20:55Z", "type": "forcePushed"}]}