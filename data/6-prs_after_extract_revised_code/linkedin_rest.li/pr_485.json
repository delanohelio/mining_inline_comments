{"pr_number": 485, "pr_title": "Enhance request symbol table fetch", "pr_createdAt": "2020-11-21T07:02:17Z", "pr_url": "https://github.com/linkedin/rest.li/pull/485", "timeline": [{"oid": "33285f904f39985b3c316b00fe12b699ac6753bf", "url": "https://github.com/linkedin/rest.li/commit/33285f904f39985b3c316b00fe12b699ac6753bf", "message": "Enhance request symbol table fetch. Return null if uri prefix doesn't match. If the fetch call 404s internally store an empty symbol table and return null. This will avoid repeated invocations to services that are not yet ready to support symbol tables", "committedDate": "2020-11-21T07:01:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3MTQwMA==", "url": "https://github.com/linkedin/rest.li/pull/485#discussion_r528571400", "bodyText": "shouldn't requestUri will always start with uriPrefix?\nreason for adding d2 check was for HTTP(s) prefixes adding /serviceName/resources or something else might be different from where symbol table endpoint is hosted since we are using zk serverNodeUri to construct symbol table API endpoint", "author": "aman1309", "createdAt": "2020-11-23T09:37:41Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/symbol/RestLiSymbolTableProvider.java", "diffHunk": "@@ -220,13 +221,21 @@ public SymbolTable getSymbolTable(String symbolTableName)\n   @Override\n   public SymbolTable getRequestSymbolTable(URI requestUri)\n   {\n+    // If the URI prefix doesn't match, return null.\n+    if (!requestUri.toString().startsWith(_uriPrefix))\n+    {\n+      return null;\n+    }", "originalCommit": "33285f904f39985b3c316b00fe12b699ac6753bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjI2OA==", "url": "https://github.com/linkedin/rest.li/pull/485#discussion_r528896268", "bodyText": "There is currently no guarantee that request URI has to start with uriPrefix. This check just ensures that.\nYes, practically it is going to be d2 or http(s) but the contract of this class itself makes no assumptions about that. Hence, its safer to code it this way.", "author": "karthikrg", "createdAt": "2020-11-23T18:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3MTQwMA=="}], "type": "inlineReview", "revised_code": null}]}