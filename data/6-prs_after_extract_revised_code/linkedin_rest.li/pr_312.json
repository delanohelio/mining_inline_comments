{"pr_number": 312, "pr_title": "When server builds URI and projection fields are included, convert ra\u2026", "pr_createdAt": "2020-05-29T21:30:02Z", "pr_url": "https://github.com/linkedin/rest.li/pull/312", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTA5OA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r432771098", "bodyText": "This is a public method, so you can't necessarily make this assumption.", "author": "evanw555", "createdAt": "2020-05-29T22:43:49Z", "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -469,6 +470,7 @@ public static void addSortedParams(UriBuilder uriBuilder, DataMap params, Protoc\n \n   public static URI replaceQueryParam(URI uri, String queryParam, DataComplex values, DataMap parameters, ProtocolVersion version)\n   {\n+    // This is only used by BatchFinderResponseBuilder right now", "originalCommit": "5b517dc50a9c7764d35b7082061b7174edca1a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2NzI0OA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433367248", "bodyText": "The change is moved to the BatchFinderResponseBuilder class now, and it is only limited in that class use case", "author": "BrianPin", "createdAt": "2020-06-01T17:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "00b65e251ccccbaf6d5579316428e50a929dee27", "chunk": "diff --git a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\nindex c29271f7f..4793a9617 100644\n--- a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n+++ b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n\n@@ -470,7 +469,6 @@ public class URIParamUtils\n \n   public static URI replaceQueryParam(URI uri, String queryParam, DataComplex values, DataMap parameters, ProtocolVersion version)\n   {\n-    // This is only used by BatchFinderResponseBuilder right now\n     UriBuilder builder = UriBuilder.fromPath(uri.getPath());\n     DataMap newQueryParams = new DataMap();\n     newQueryParams.putAll(parameters);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTYyNQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r432771625", "bodyText": "Is this extra logic necessary? Isn't the parsed mask tree available in the response builder?", "author": "evanw555", "createdAt": "2020-05-29T22:45:41Z", "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -478,6 +480,30 @@ public static URI replaceQueryParam(URI uri, String queryParam, DataComplex valu\n     return builder.build();\n   }\n \n+  private static void convertRawProjectionFieldsToMaskTree(DataMap queryParams)", "originalCommit": "5b517dc50a9c7764d35b7082061b7174edca1a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MDU3Mg==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433370572", "bodyText": "yes, you are right,  the mastrees are generated during the class ResourceContextImpl constructor, so to avoid this extra step, I just need a reference from ResourceContextImpl instance", "author": "BrianPin", "createdAt": "2020-06-01T17:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "00b65e251ccccbaf6d5579316428e50a929dee27", "chunk": "diff --git a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\nindex c29271f7f..4793a9617 100644\n--- a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n+++ b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n\n@@ -480,30 +478,6 @@ public class URIParamUtils\n     return builder.build();\n   }\n \n-  private static void convertRawProjectionFieldsToMaskTree(DataMap queryParams)\n-  {\n-    for (final String projectionKeyName : RestConstants.PROJECTION_PARAMETERS)\n-    {\n-      if (queryParams.containsKey(projectionKeyName))\n-      {\n-        Object value = queryParams.get(projectionKeyName);\n-        if (value instanceof String)\n-        {\n-          try\n-          {\n-            MaskTree _projectionMask = URIMaskUtil.decodeMaskUriFormat(new StringBuilder((String) value));\n-            queryParams.put(projectionKeyName, _projectionMask.getDataMap());\n-          }\n-          catch (IllegalMaskException illegalMaskException)\n-          {\n-            throw new RuntimeException(\"Illegal mask projection string in URI\");\n-          }\n-        }\n-      }\n-    }\n-\n-  }\n-\n   /**\n    * Add the given parameters to the UriBuilder, in sorted order.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTY0OA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r432771648", "bodyText": "Once again, this method is public so you should be careful about changing behavior.", "author": "evanw555", "createdAt": "2020-05-29T22:45:45Z", "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -486,6 +512,7 @@ public static URI replaceQueryParam(URI uri, String queryParam, DataComplex valu\n    */\n   public static void addSortedParams(UriBuilder uriBuilder, DataMap params)", "originalCommit": "5b517dc50a9c7764d35b7082061b7174edca1a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3Njk2Mw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433376963", "bodyText": "yes, it is resolved", "author": "BrianPin", "createdAt": "2020-06-01T17:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MTY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "00b65e251ccccbaf6d5579316428e50a929dee27", "chunk": "diff --git a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\nindex c29271f7f..4793a9617 100644\n--- a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n+++ b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n\n@@ -512,7 +486,6 @@ public class URIParamUtils\n    */\n   public static void addSortedParams(UriBuilder uriBuilder, DataMap params)\n   {\n-    convertRawProjectionFieldsToMaskTree(params);\n     Map<String, String> map = dataMapToQueryParams(params);\n     addSortedParams(uriBuilder, map);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxOTQxOA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r432819418", "bodyText": "Agree with Evan, also the projection parameters are already available as MaskTree in resourContext. So a better fix would be to update the buildCriteriaURI() method in BatchFinderResponseBuilder to replace the projection params with masktree objects.", "author": "karthikbalasub", "createdAt": "2020-05-30T07:33:39Z", "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -486,6 +512,7 @@ public static URI replaceQueryParam(URI uri, String queryParam, DataComplex valu\n    */\n   public static void addSortedParams(UriBuilder uriBuilder, DataMap params)\n   {\n+    convertRawProjectionFieldsToMaskTree(params);", "originalCommit": "5b517dc50a9c7764d35b7082061b7174edca1a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3NzM1NQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433377355", "bodyText": "Yes, changed the way I extract projection MaskTree by directly referencing those projection fields which already in ResourceContextImpl", "author": "BrianPin", "createdAt": "2020-06-01T17:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxOTQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "00b65e251ccccbaf6d5579316428e50a929dee27", "chunk": "diff --git a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\nindex c29271f7f..4793a9617 100644\n--- a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n+++ b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n\n@@ -512,7 +486,6 @@ public class URIParamUtils\n    */\n   public static void addSortedParams(UriBuilder uriBuilder, DataMap params)\n   {\n-    convertRawProjectionFieldsToMaskTree(params);\n     Map<String, String> map = dataMapToQueryParams(params);\n     addSortedParams(uriBuilder, map);\n   }\n"}}, {"oid": "00b65e251ccccbaf6d5579316428e50a929dee27", "url": "https://github.com/linkedin/rest.li/commit/00b65e251ccccbaf6d5579316428e50a929dee27", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree", "committedDate": "2020-06-01T16:59:17Z", "type": "forcePushed"}, {"oid": "e8fa0feb708a520a35969643c51af0c7f1865ff1", "url": "https://github.com/linkedin/rest.li/commit/e8fa0feb708a520a35969643c51af0c7f1865ff1", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree", "committedDate": "2020-06-01T17:22:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3ODMzOQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433378339", "bodyText": "You should create a copy instead of modifying the underlying parameters. There might be logic elsewhere (and custom filter) that depend on these parameters parsed from URI.", "author": "karthikbalasub", "createdAt": "2020-06-01T17:25:47Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -207,14 +208,33 @@ private DataList getCriteriaParameters(RoutingResult routingResult)\n     return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n+    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           queryParam,\n+                                           batchParamName,\n                                            criteriaList,\n-                                           resourceContext.getParameters(),\n+                                           queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n+\n+  private DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  {\n+    DataMap queryParams = resourceContext.getParameters();", "originalCommit": "e8fa0feb708a520a35969643c51af0c7f1865ff1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5NTk0MA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433395940", "bodyText": "Got it, DataMap has two copy related method, clone and copy, the clone seems to be a shallow copy and the copy seems to be suit for this use case", "author": "BrianPin", "createdAt": "2020-06-01T17:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3ODMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\nindex 6b4684133..0c07220cd 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n\n@@ -204,8 +204,8 @@ public class BatchFinderResponseBuilder\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n   private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n"}}, {"oid": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "url": "https://github.com/linkedin/rest.li/commit/6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree", "committedDate": "2020-06-01T17:52:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NzY0NA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433457644", "bodyText": "Deep copy might be expensive and for this usecase, a shallow copy is sufficient.", "author": "karthikbalasub", "createdAt": "2020-06-01T20:00:10Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +196,52 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n+    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           queryParam,\n+                                           batchParamName,\n                                            criteriaList,\n-                                           resourceContext.getParameters(),\n+                                           queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n+\n+  private DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  {\n+    try\n+    {\n+      DataMap queryParams = resourceContext.getParameters().copy();", "originalCommit": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "efcb515c721a5a92e3a475b9e782a44302984db0", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\nindex 0c07220cd..c0a1226ee 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n\n@@ -208,23 +208,23 @@ public class BatchFinderResponseBuilder\n     return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n+  protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n     DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           batchParamName,\n+                                           batchParameterName,\n                                            criteriaList,\n                                            queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n \n-  private DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  protected static DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n   {\n     try\n     {\n-      DataMap queryParams = resourceContext.getParameters().copy();\n+      DataMap queryParams = resourceContext.getParameters().clone();\n       if (queryParams.containsKey(RestConstants.FIELDS_PARAM))\n       {\n         queryParams.put(RestConstants.FIELDS_PARAM, resourceContext.getProjectionMask().getDataMap());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1ODIxNg==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433458216", "bodyText": "This is not a good way to recover this error. I'd prefer failing the request as this is unexpected.", "author": "karthikbalasub", "createdAt": "2020-06-01T20:01:23Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +196,52 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n+    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           queryParam,\n+                                           batchParamName,\n                                            criteriaList,\n-                                           resourceContext.getParameters(),\n+                                           queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n+\n+  private DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  {\n+    try\n+    {\n+      DataMap queryParams = resourceContext.getParameters().copy();\n+      if (queryParams.containsKey(RestConstants.FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.FIELDS_PARAM, resourceContext.getProjectionMask().getDataMap());\n+      }\n+      if (queryParams.containsKey(RestConstants.PAGING_FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.PAGING_FIELDS_PARAM, resourceContext.getPagingProjectionMask().getDataMap());\n+      }\n+      if (queryParams.containsKey(RestConstants.METADATA_FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.METADATA_FIELDS_PARAM, resourceContext.getMetadataProjectionMask().getDataMap());\n+      }\n+      return queryParams;\n+    }\n+    catch (CloneNotSupportedException cloneNotSupportedException)\n+    {\n+      return resourceContext.getParameters();", "originalCommit": "6e5c57a83f3cfc7ef4207de5cb77dd4b9ac4853e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTE3Ng==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433511176", "bodyText": "Instead of copy I used clone, according to the comment and short code trace, clone should be the shallow copy", "author": "BrianPin", "createdAt": "2020-06-01T21:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1ODIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "efcb515c721a5a92e3a475b9e782a44302984db0", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\nindex 0c07220cd..c0a1226ee 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n\n@@ -208,23 +208,23 @@ public class BatchFinderResponseBuilder\n     return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParamName, URI uri)\n+  protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n     DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           batchParamName,\n+                                           batchParameterName,\n                                            criteriaList,\n                                            queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n \n-  private DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  protected static DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n   {\n     try\n     {\n-      DataMap queryParams = resourceContext.getParameters().copy();\n+      DataMap queryParams = resourceContext.getParameters().clone();\n       if (queryParams.containsKey(RestConstants.FIELDS_PARAM))\n       {\n         queryParams.put(RestConstants.FIELDS_PARAM, resourceContext.getProjectionMask().getDataMap());\n"}}, {"oid": "efcb515c721a5a92e3a475b9e782a44302984db0", "url": "https://github.com/linkedin/rest.li/commit/efcb515c721a5a92e3a475b9e782a44302984db0", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree", "committedDate": "2020-06-01T21:51:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDg4NQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433510885", "bodyText": "These tested URL has not:\n\nBe real batch criterias at all (just single criteria) I will add to later test\nThese URLs are not exhaustive, I will add more URL test cases", "author": "BrianPin", "createdAt": "2020-06-01T21:53:52Z", "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java", "diffHunk": "@@ -341,4 +344,62 @@ private static Foo generateMetaData(Boolean onError)\n     Foo foo = new Foo(map);\n     return foo;\n   }\n+\n+  @DataProvider(name = \"build_uri_test_cases\")\n+  public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n+  {\n+    String[] requestUrls =\n+    {\n+      \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",", "originalCommit": "efcb515c721a5a92e3a475b9e782a44302984db0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "chunk": "diff --git a/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java b/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\nindex 44ad89c90..bf8b6936e 100644\n--- a/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\n+++ b/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\n\n@@ -348,47 +348,66 @@ public class TestBatchFinderResponseBuilder\n   @DataProvider(name = \"build_uri_test_cases\")\n   public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n   {\n-    String[] requestUrls =\n+    String[] requestURIs =\n     {\n-      \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n-      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n-      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n     };\n \n     String[] batchCriteriaParameterNames =\n     {\n-      \"criteria\",\n-      \"candidates\",\n-      \"candidates\"\n+        \"criteria\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n     };\n \n-    ProtocolVersion[] protocolVersions =\n+    String[] expectedURIs =\n     {\n-      AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion(),\n-      AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion(),\n-      AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion()\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n     };\n \n-    Object[][] testData = new Object[requestUrls.length][5];\n-    for (int i = 0; i < requestUrls.length; i++)\n+    int totalCriteriaCases = 7;\n+    Object[][] testData = new Object[totalCriteriaCases][5];\n+    int cases = 0;\n+    int uriIndex = 0;\n+    while (cases < totalCriteriaCases)\n     {\n       Object[] singleCase = new Object[5];\n-      URI uri = URI.create(requestUrls[i]);\n+      URI uri = URI.create(requestURIs[uriIndex]);\n+      RequestContext requestContext = new RequestContext();\n+      requestContext.putLocalAttr(\"timingsDisabled\", true);\n       ResourceContextImpl resourceContext = new ResourceContextImpl(new PathKeysImpl(),\n           new RestRequestBuilder(uri)\n-              .setHeader(RestConstants.HEADER_RESTLI_PROTOCOL_VERSION, protocolVersions[i].toString())\n+              .setHeader(RestConstants.HEADER_RESTLI_PROTOCOL_VERSION, AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion().toString())\n               .build(),\n-          new RequestContext());\n-\n-      DataList criteriaParameters = (DataList) resourceContext.getStructuredParameter(batchCriteriaParameterNames[i]);\n-      RecordTemplate criteria = new AnyRecord((DataMap) criteriaParameters.get(0));\n-      singleCase[0] = resourceContext;\n-      singleCase[1] = criteria;\n-      singleCase[2] = batchCriteriaParameterNames[i];\n-      singleCase[3] = uri;\n-      singleCase[4] = uri;\n-      testData[i] = singleCase;\n+          requestContext);\n+\n+      DataList criteriaParameters = (DataList) resourceContext.getStructuredParameter(batchCriteriaParameterNames[uriIndex]);\n+      for (int i = 0; i < criteriaParameters.size(); i++)\n+      {\n+        RecordTemplate criteria = new AnyRecord((DataMap) criteriaParameters.get(i));\n+        singleCase[0] = resourceContext;\n+        singleCase[1] = criteria;\n+        singleCase[2] = batchCriteriaParameterNames[uriIndex];\n+        singleCase[3] = uri;\n+        singleCase[4] = URI.create(expectedURIs[cases]);\n+        testData[cases] = singleCase;\n+        cases ++;\n+      }\n+      uriIndex ++;\n     }\n+\n     return testData;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTcxNQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433511715", "bodyText": "In this part of error handling, because I don't expect to change all the callers of buildCriteriaURI with throws\nso I instead throws a RuntimeException", "author": "BrianPin", "createdAt": "2020-06-01T21:56:03Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +196,52 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n+    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n-                                           queryParam,\n+                                           batchParameterName,\n                                            criteriaList,\n-                                           resourceContext.getParameters(),\n+                                           queryParams,\n                                            resourceContext.getRestliProtocolVersion());\n   }\n+\n+  protected static DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n+  {\n+    try\n+    {\n+      DataMap queryParams = resourceContext.getParameters().clone();\n+      if (queryParams.containsKey(RestConstants.FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.FIELDS_PARAM, resourceContext.getProjectionMask().getDataMap());\n+      }\n+      if (queryParams.containsKey(RestConstants.PAGING_FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.PAGING_FIELDS_PARAM, resourceContext.getPagingProjectionMask().getDataMap());\n+      }\n+      if (queryParams.containsKey(RestConstants.METADATA_FIELDS_PARAM))\n+      {\n+        queryParams.put(RestConstants.METADATA_FIELDS_PARAM, resourceContext.getMetadataProjectionMask().getDataMap());\n+      }\n+      return queryParams;\n+    }\n+    catch (CloneNotSupportedException exception)\n+    {\n+      throw new RuntimeException(exception);", "originalCommit": "efcb515c721a5a92e3a475b9e782a44302984db0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MjIzMw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433642233", "bodyText": "I think throwing a RestLiServiceException with 500 status code and cleaner error message would be good here. For reference you can check the other response builders.", "author": "karthikbalasub", "createdAt": "2020-06-02T06:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NzY0Ng==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433667646", "bodyText": "I just fixed it, one point I am curious is that, for each entry in the batch, is it better to put in 500 error code for each entry, or just fail the whole batch in one 500 code?", "author": "BrianPin", "createdAt": "2020-06-02T07:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2ODYxNA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433668614", "bodyText": "For this, just one 500 error is fine. The paging parameters are common for all criteria.", "author": "karthikbalasub", "createdAt": "2020-06-02T07:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MjkzMg==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433672932", "bodyText": "got it I will make another change then, right now i put failure in one entry, the other will continue to process or they will generate another 500.", "author": "BrianPin", "createdAt": "2020-06-02T07:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNjM4NQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434236385", "bodyText": "@karthikbalasub , all the changes regarding clone and exception handling are reverted since I use a simpler way to address the original issue", "author": "BrianPin", "createdAt": "2020-06-02T23:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\nindex c0a1226ee..02a42466d 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n\n@@ -209,6 +218,7 @@ public class BatchFinderResponseBuilder\n   }\n \n   protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n+      throws CloneNotSupportedException\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5NzU4Mg==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433597582", "bodyText": "Why is this an array instead of a constant? Will we have more values here?", "author": "karthikrg", "createdAt": "2020-06-02T03:15:15Z", "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java", "diffHunk": "@@ -341,4 +344,62 @@ private static Foo generateMetaData(Boolean onError)\n     Foo foo = new Foo(map);\n     return foo;\n   }\n+\n+  @DataProvider(name = \"build_uri_test_cases\")\n+  public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n+  {\n+    String[] requestUrls =\n+    {\n+      \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+    };\n+\n+    String[] batchCriteriaParameterNames =\n+    {\n+      \"criteria\",\n+      \"candidates\",\n+      \"candidates\"\n+    };\n+\n+    ProtocolVersion[] protocolVersions =", "originalCommit": "efcb515c721a5a92e3a475b9e782a44302984db0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMDI5Nw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433610297", "bodyText": "Yeah, it is an array because I found we have two protocol versions in the code. So I assume it is needed to test in both protocol versions.", "author": "BrianPin", "createdAt": "2020-06-02T04:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5NzU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMDc2Mg==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433610762", "bodyText": "The detail is, if there exists some http client and it send a request with a http header saying it is protocol version 100, then our ResourceContextImpl class internally will parse query parameters differently.", "author": "BrianPin", "createdAt": "2020-06-02T04:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5NzU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMTE2OQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433611169", "bodyText": "I understand that we need to support both 1.0 and 2.0, however all your array values are 2.0", "author": "karthikrg", "createdAt": "2020-06-02T04:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5NzU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMzQwOA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433613408", "bodyText": "yes, I met some issues where it only happens in 1.0 so I will include that fix in this PR and then that is complete", "author": "BrianPin", "createdAt": "2020-06-02T04:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5NzU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MzA1NQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433643055", "bodyText": "As we discussed, let us get the fix in for the projection issue with protocol 2.0.0 support and raise a separate PR for 1.0.0 issue.", "author": "karthikbalasub", "createdAt": "2020-06-02T06:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5NzU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NzkwMw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433667903", "bodyText": "yes, the 1.0.0 part of the issue is long existing one", "author": "BrianPin", "createdAt": "2020-06-02T07:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5NzU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "chunk": "diff --git a/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java b/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\nindex 44ad89c90..bf8b6936e 100644\n--- a/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\n+++ b/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\n\n@@ -348,47 +348,66 @@ public class TestBatchFinderResponseBuilder\n   @DataProvider(name = \"build_uri_test_cases\")\n   public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n   {\n-    String[] requestUrls =\n+    String[] requestURIs =\n     {\n-      \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n-      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n-      \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n     };\n \n     String[] batchCriteriaParameterNames =\n     {\n-      \"criteria\",\n-      \"candidates\",\n-      \"candidates\"\n+        \"criteria\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n     };\n \n-    ProtocolVersion[] protocolVersions =\n+    String[] expectedURIs =\n     {\n-      AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion(),\n-      AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion(),\n-      AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion()\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n     };\n \n-    Object[][] testData = new Object[requestUrls.length][5];\n-    for (int i = 0; i < requestUrls.length; i++)\n+    int totalCriteriaCases = 7;\n+    Object[][] testData = new Object[totalCriteriaCases][5];\n+    int cases = 0;\n+    int uriIndex = 0;\n+    while (cases < totalCriteriaCases)\n     {\n       Object[] singleCase = new Object[5];\n-      URI uri = URI.create(requestUrls[i]);\n+      URI uri = URI.create(requestURIs[uriIndex]);\n+      RequestContext requestContext = new RequestContext();\n+      requestContext.putLocalAttr(\"timingsDisabled\", true);\n       ResourceContextImpl resourceContext = new ResourceContextImpl(new PathKeysImpl(),\n           new RestRequestBuilder(uri)\n-              .setHeader(RestConstants.HEADER_RESTLI_PROTOCOL_VERSION, protocolVersions[i].toString())\n+              .setHeader(RestConstants.HEADER_RESTLI_PROTOCOL_VERSION, AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion().toString())\n               .build(),\n-          new RequestContext());\n-\n-      DataList criteriaParameters = (DataList) resourceContext.getStructuredParameter(batchCriteriaParameterNames[i]);\n-      RecordTemplate criteria = new AnyRecord((DataMap) criteriaParameters.get(0));\n-      singleCase[0] = resourceContext;\n-      singleCase[1] = criteria;\n-      singleCase[2] = batchCriteriaParameterNames[i];\n-      singleCase[3] = uri;\n-      singleCase[4] = uri;\n-      testData[i] = singleCase;\n+          requestContext);\n+\n+      DataList criteriaParameters = (DataList) resourceContext.getStructuredParameter(batchCriteriaParameterNames[uriIndex]);\n+      for (int i = 0; i < criteriaParameters.size(); i++)\n+      {\n+        RecordTemplate criteria = new AnyRecord((DataMap) criteriaParameters.get(i));\n+        singleCase[0] = resourceContext;\n+        singleCase[1] = criteria;\n+        singleCase[2] = batchCriteriaParameterNames[uriIndex];\n+        singleCase[3] = uri;\n+        singleCase[4] = URI.create(expectedURIs[cases]);\n+        testData[cases] = singleCase;\n+        cases ++;\n+      }\n+      uriIndex ++;\n     }\n+\n     return testData;\n   }\n \n"}}, {"oid": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "url": "https://github.com/linkedin/rest.li/commit/a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree", "committedDate": "2020-06-02T07:10:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MzYzMA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r433673630", "bodyText": "Note the original case's %3B became ;\nthat is minor but I just want to highlight it in case something is wrong", "author": "BrianPin", "createdAt": "2020-06-02T07:27:41Z", "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java", "diffHunk": "@@ -341,4 +344,81 @@ private static Foo generateMetaData(Boolean onError)\n     Foo foo = new Foo(map);\n     return foo;\n   }\n+\n+  @DataProvider(name = \"build_uri_test_cases\")\n+  public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n+  {\n+    String[] requestURIs =\n+    {\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n+    };\n+\n+    String[] batchCriteriaParameterNames =\n+    {\n+        \"criteria\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+    };\n+\n+    String[] expectedURIs =\n+    {\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))&fields=candidate\",", "originalCommit": "a882594de73c32f39ef1351c01f0e9ed2c7f7a19", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0a1d298e6accfa7c572398bcd5754d7f5b1ad18", "chunk": "diff --git a/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java b/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\nindex bf8b6936e..a54f5295b 100644\n--- a/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\n+++ b/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\n\n@@ -355,6 +355,10 @@ public class TestBatchFinderResponseBuilder\n         \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n         \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))\",\n         \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val1),(field1:val2,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=person:(firstname,lastname)&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/groups?fields=state,locale&metadataFields=city,age&pagingFields=start,count&q=emailDomain&search=List((field1:value1))\",\n     };\n \n     String[] batchCriteriaParameterNames =\n"}}, {"oid": "b0a1d298e6accfa7c572398bcd5754d7f5b1ad18", "url": "https://github.com/linkedin/rest.li/commit/b0a1d298e6accfa7c572398bcd5754d7f5b1ad18", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree", "committedDate": "2020-06-02T17:32:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwODc3Nw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434108777", "bodyText": "If I remember correctly, you do not have to do this. You can just throw a RestLiServiceException with 500 status from within extractQueryParamsFromResourceContext method and the framework should convert that into an error response.", "author": "karthikbalasub", "createdAt": "2020-06-02T18:58:31Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -105,45 +107,56 @@ public RestLiResponse buildResponse(RoutingResult routingResult,\n     TimingContextUtil.beginTiming(routingResult.getContext().getRawRequestContext(),\n         FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n \n-    for (Object criteriaParam : criteriaParams.values())\n+    try\n     {\n-      RecordTemplate criteria = new AnyRecord((DataMap) criteriaParam);\n-      BatchFinderEntry entry;\n-      if (result.getResults().containsKey(criteria))\n+      for (Object criteriaParam : criteriaParams.values())\n       {\n-        CollectionResult<RecordTemplate, RecordTemplate> cr = result.getResult(criteria);\n-\n-        //Process elements\n-        List<AnyRecord> elements = buildElements(cr, resourceContext);\n-\n-        //Process paging\n-        final CollectionMetadata projectedPaging =\n-            buildPaginationMetaData(routingResult, criteria, resourceContext, request, cr);\n-\n-        //Process metadata\n-        final AnyRecord projectedCustomMetadata = buildMetaData(cr, resourceContext);\n-\n-        entry = new BatchFinderEntry(elements, projectedPaging, projectedCustomMetadata);\n-      }\n-      else if (result.getErrors().containsKey(criteria))\n-      {\n-        entry = new BatchFinderEntry(result.getErrors().get(criteria));\n+        RecordTemplate criteria = new AnyRecord((DataMap) criteriaParam);\n+        BatchFinderEntry entry;\n+        if (result.getResults().containsKey(criteria))\n+        {\n+          CollectionResult<RecordTemplate, RecordTemplate> cr = result.getResult(criteria);\n+\n+          //Process elements\n+          List<AnyRecord> elements = buildElements(cr, resourceContext);\n+\n+          //Process paging\n+          final CollectionMetadata projectedPaging =\n+              buildPaginationMetaData(routingResult, criteria, resourceContext, request, cr);\n+\n+          //Process metadata\n+          final AnyRecord projectedCustomMetadata = buildMetaData(cr, resourceContext);\n+\n+          entry = new BatchFinderEntry(elements, projectedPaging, projectedCustomMetadata);\n+        }\n+        else if (result.getErrors().containsKey(criteria))\n+        {\n+          entry = new BatchFinderEntry(result.getErrors().get(criteria));\n+        }\n+        else\n+        {\n+          entry = new BatchFinderEntry(\n+              new RestLiServiceException(S_404_NOT_FOUND, \"The server didn't find a representation for this criteria\"));\n+        }\n+\n+        collectionResponse.add(entry);\n       }\n-      else\n-      {\n-        entry = new BatchFinderEntry(\n-            new RestLiServiceException(S_404_NOT_FOUND, \"The server didn't find a representation for this criteria\"));\n-      }\n-\n-      collectionResponse.add(entry);\n-    }\n \n-    TimingContextUtil.endTiming(routingResult.getContext().getRawRequestContext(),\n-        FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n+      TimingContextUtil.endTiming(routingResult.getContext().getRawRequestContext(),\n+          FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n \n-    return new RestLiResponseDataImpl<>(new BatchFinderResponseEnvelope(HttpStatus.S_200_OK, collectionResponse),\n-                                        headers,\n-                                        cookies);\n+      return new RestLiResponseDataImpl<>(new BatchFinderResponseEnvelope(HttpStatus.S_200_OK, collectionResponse),\n+          headers,\n+          cookies);\n+    }\n+    catch (CloneNotSupportedException exception)\n+    {\n+      BatchFinderEntry entry = new BatchFinderEntry(\n+          new RestLiServiceException(S_500_INTERNAL_SERVER_ERROR, \"Batch finder response builder failed when rebuild projection URI\"));\n+      return new RestLiResponseDataImpl<>(new BatchFinderResponseEnvelope(S_500_INTERNAL_SERVER_ERROR, collectionResponse),\n+          headers,\n+          cookies);", "originalCommit": "677c7094617bc60d2386e32394abc1ac540ca9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNTYxNQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434125615", "bodyText": "Sounds good", "author": "BrianPin", "createdAt": "2020-06-02T19:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwODc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNjc0Nw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434236747", "bodyText": "I addressed the original issue with another simpler approach, so returning 500 as server side error is not needed now", "author": "BrianPin", "createdAt": "2020-06-02T23:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwODc3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "946e1305d793645c8cc300d5ef6334af8d82642f", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\nindex 1b0a38577..02a42466d 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n\n@@ -107,19 +107,19 @@ public class BatchFinderResponseBuilder\n     TimingContextUtil.beginTiming(routingResult.getContext().getRawRequestContext(),\n         FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n \n-    try\n+    for (Object criteriaParam : criteriaParams.values())\n     {\n-      for (Object criteriaParam : criteriaParams.values())\n+      RecordTemplate criteria = new AnyRecord((DataMap) criteriaParam);\n+      BatchFinderEntry entry;\n+      if (result.getResults().containsKey(criteria))\n       {\n-        RecordTemplate criteria = new AnyRecord((DataMap) criteriaParam);\n-        BatchFinderEntry entry;\n-        if (result.getResults().containsKey(criteria))\n-        {\n-          CollectionResult<RecordTemplate, RecordTemplate> cr = result.getResult(criteria);\n+        CollectionResult<RecordTemplate, RecordTemplate> cr = result.getResult(criteria);\n \n-          //Process elements\n-          List<AnyRecord> elements = buildElements(cr, resourceContext);\n+        //Process elements\n+        List<AnyRecord> elements = buildElements(cr, resourceContext);\n \n+        try\n+        {\n           //Process paging\n           final CollectionMetadata projectedPaging =\n               buildPaginationMetaData(routingResult, criteria, resourceContext, request, cr);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDAxNw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434170017", "bodyText": "I'd suggest making private methods package-private if they need to be accessed by a unit test. Making it protected opens the access too much and implies an intended inheritance relationship.", "author": "evanw555", "createdAt": "2020-06-02T20:55:15Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +204,47 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)", "originalCommit": "511313d74d93a566098cb80b8e44c44f76adc771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzODA2NQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434238065", "bodyText": "Done", "author": "BrianPin", "createdAt": "2020-06-03T00:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\nindex f88b010c0..7f734ae83 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n\n@@ -216,35 +207,14 @@ public class BatchFinderResponseBuilder\n     return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n-      throws CloneNotSupportedException\n+  static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n-    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n                                            batchParameterName,\n                                            criteriaList,\n-                                           queryParams,\n+                                           resourceContext.getParameters(),\n                                            resourceContext.getRestliProtocolVersion());\n   }\n-\n-  protected static DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n-      throws CloneNotSupportedException\n-  {\n-    DataMap queryParams = resourceContext.getParameters().clone();\n-    if (queryParams.containsKey(RestConstants.FIELDS_PARAM))\n-    {\n-      queryParams.put(RestConstants.FIELDS_PARAM, resourceContext.getProjectionMask().getDataMap());\n-    }\n-    if (queryParams.containsKey(RestConstants.PAGING_FIELDS_PARAM))\n-    {\n-      queryParams.put(RestConstants.PAGING_FIELDS_PARAM, resourceContext.getPagingProjectionMask().getDataMap());\n-    }\n-    if (queryParams.containsKey(RestConstants.METADATA_FIELDS_PARAM))\n-    {\n-      queryParams.put(RestConstants.METADATA_FIELDS_PARAM, resourceContext.getMetadataProjectionMask().getDataMap());\n-    }\n-    return queryParams;\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDEwNQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434170105", "bodyText": "nit: fix spacing", "author": "evanw555", "createdAt": "2020-06-02T20:55:26Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,26 +204,47 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);", "originalCommit": "511313d74d93a566098cb80b8e44c44f76adc771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\nindex f88b010c0..7f734ae83 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n\n@@ -216,35 +207,14 @@ public class BatchFinderResponseBuilder\n     return(DataList)routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  protected static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n-      throws CloneNotSupportedException\n+  static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)\n   {\n     DataList criteriaList = new DataList(1);\n     criteriaList.add(criteria.data());\n-    DataMap queryParams = extractQueryParamsFromResourceContext(resourceContext);\n     return URIParamUtils.replaceQueryParam(uri,\n                                            batchParameterName,\n                                            criteriaList,\n-                                           queryParams,\n+                                           resourceContext.getParameters(),\n                                            resourceContext.getRestliProtocolVersion());\n   }\n-\n-  protected static DataMap extractQueryParamsFromResourceContext(ResourceContextImpl resourceContext)\n-      throws CloneNotSupportedException\n-  {\n-    DataMap queryParams = resourceContext.getParameters().clone();\n-    if (queryParams.containsKey(RestConstants.FIELDS_PARAM))\n-    {\n-      queryParams.put(RestConstants.FIELDS_PARAM, resourceContext.getProjectionMask().getDataMap());\n-    }\n-    if (queryParams.containsKey(RestConstants.PAGING_FIELDS_PARAM))\n-    {\n-      queryParams.put(RestConstants.PAGING_FIELDS_PARAM, resourceContext.getPagingProjectionMask().getDataMap());\n-    }\n-    if (queryParams.containsKey(RestConstants.METADATA_FIELDS_PARAM))\n-    {\n-      queryParams.put(RestConstants.METADATA_FIELDS_PARAM, resourceContext.getMetadataProjectionMask().getDataMap());\n-    }\n-    return queryParams;\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MTk5NQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434171995", "bodyText": "Wrapping so much logic here in a try-catch is excessive and makes it harder to understand.\nGiven that the resulting service error says that the error happens because Rest.li was unable to build the criteria URI, it makes sense to me to actually put this try-catch and service error inside #buildCriteriaURI", "author": "evanw555", "createdAt": "2020-06-02T20:58:56Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -105,45 +107,52 @@ public RestLiResponse buildResponse(RoutingResult routingResult,\n     TimingContextUtil.beginTiming(routingResult.getContext().getRawRequestContext(),\n         FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n \n-    for (Object criteriaParam : criteriaParams.values())\n+    try", "originalCommit": "511313d74d93a566098cb80b8e44c44f76adc771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzA1NQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434237055", "bodyText": "As we discussed earlier, this logic is not needed since we addressed the problem in the other way", "author": "BrianPin", "createdAt": "2020-06-02T23:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "946e1305d793645c8cc300d5ef6334af8d82642f", "chunk": "diff --git a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\nindex f88b010c0..02a42466d 100644\n--- a/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n+++ b/restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java\n\n@@ -107,19 +107,19 @@ public class BatchFinderResponseBuilder\n     TimingContextUtil.beginTiming(routingResult.getContext().getRawRequestContext(),\n         FrameworkTimingKeys.SERVER_RESPONSE_RESTLI_PROJECTION_APPLY.key());\n \n-    try\n+    for (Object criteriaParam : criteriaParams.values())\n     {\n-      for (Object criteriaParam : criteriaParams.values())\n+      RecordTemplate criteria = new AnyRecord((DataMap) criteriaParam);\n+      BatchFinderEntry entry;\n+      if (result.getResults().containsKey(criteria))\n       {\n-        RecordTemplate criteria = new AnyRecord((DataMap) criteriaParam);\n-        BatchFinderEntry entry;\n-        if (result.getResults().containsKey(criteria))\n-        {\n-          CollectionResult<RecordTemplate, RecordTemplate> cr = result.getResult(criteria);\n+        CollectionResult<RecordTemplate, RecordTemplate> cr = result.getResult(criteria);\n \n-          //Process elements\n-          List<AnyRecord> elements = buildElements(cr, resourceContext);\n+        //Process elements\n+        List<AnyRecord> elements = buildElements(cr, resourceContext);\n \n+        try\n+        {\n           //Process paging\n           final CollectionMetadata projectedPaging =\n               buildPaginationMetaData(routingResult, criteria, resourceContext, request, cr);\n"}}, {"oid": "946e1305d793645c8cc300d5ef6334af8d82642f", "url": "https://github.com/linkedin/rest.li/commit/946e1305d793645c8cc300d5ef6334af8d82642f", "message": "When server builds URI and projection fields are included, convert raw string to MaskTree", "committedDate": "2020-06-02T22:52:44Z", "type": "commit"}, {"oid": "48bde76df70a9f4ccc18db6240e8fa4c618de0bd", "url": "https://github.com/linkedin/rest.li/commit/48bde76df70a9f4ccc18db6240e8fa4c618de0bd", "message": "Address comment on batchfinder exceptions into a single 500 error", "committedDate": "2020-06-02T22:52:44Z", "type": "commit"}, {"oid": "9e01f7b5863d24d5158ae063219e7d6e10ea1221", "url": "https://github.com/linkedin/rest.li/commit/9e01f7b5863d24d5158ae063219e7d6e10ea1221", "message": "Address throw restli service exception comment", "committedDate": "2020-06-02T22:52:45Z", "type": "commit"}, {"oid": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "url": "https://github.com/linkedin/rest.li/commit/4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "message": "Address the comment for making the solution using simpler code", "committedDate": "2020-06-02T22:52:45Z", "type": "commit"}, {"oid": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "url": "https://github.com/linkedin/rest.li/commit/4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "message": "Address the comment for making the solution using simpler code", "committedDate": "2020-06-02T22:52:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyMDE3OQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434220179", "bodyText": "Using try-catches to dictate normal logic flow (rather than just for exceptions) is bad practice. I would suggest retrieving the generic object from the map and checking its type.\nOverall though this is better IMO.", "author": "evanw555", "createdAt": "2020-06-02T22:59:43Z", "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -62,7 +62,14 @@\n     {\n       if (dataMap.containsKey(parameterName))\n       {\n-        result.put(parameterName, URIMaskUtil.encodeMaskForURI(dataMap.getDataMap(parameterName)));\n+        try", "originalCommit": "4931bb4fc274dfb2aa5d7b68b28953d6402d687a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzExNA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434237114", "bodyText": "Thanks for the advice, fixed it.", "author": "BrianPin", "createdAt": "2020-06-02T23:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyMDE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a42d09f7c3a062f78d71c22fac7abe166ca48854", "chunk": "diff --git a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\nindex cea5c3211..6c1e69fcc 100644\n--- a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n+++ b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n\n@@ -62,11 +70,11 @@ public class URIParamUtils\n     {\n       if (dataMap.containsKey(parameterName))\n       {\n-        try\n+        if (dataMap.get(parameterName) instanceof String)\n         {\n           result.put(parameterName, dataMap.getString(parameterName));\n         }\n-        catch (ClassCastException exception)\n+        else if (dataMap.get(parameterName) instanceof DataMap)\n         {\n           result.put(parameterName, URIMaskUtil.encodeMaskForURI(dataMap.getDataMap(parameterName)));\n         }\n"}}, {"oid": "a42d09f7c3a062f78d71c22fac7abe166ca48854", "url": "https://github.com/linkedin/rest.li/commit/a42d09f7c3a062f78d71c22fac7abe166ca48854", "message": "Address comment on class cases handling", "committedDate": "2020-06-02T23:50:06Z", "type": "commit"}, {"oid": "87cd2f535254013d67a0dfe6eb09972f90b28c6f", "url": "https://github.com/linkedin/rest.li/commit/87cd2f535254013d67a0dfe6eb09972f90b28c6f", "message": "Address comment on spacing", "committedDate": "2020-06-02T23:52:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NzIyNA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434257224", "bodyText": "Minor comments:\n\nAdd a final else case which throws an exception. If one of these projection params is present but is not a string or data map, then it should be treated as an illegal argument.\nA minor optimization could be made here. You have 4 different get accessor calls here, you could do one initial get then perform the checks/casting on that object.", "author": "evanw555", "createdAt": "2020-06-03T01:15:44Z", "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -62,7 +70,14 @@\n     {\n       if (dataMap.containsKey(parameterName))\n       {\n-        result.put(parameterName, URIMaskUtil.encodeMaskForURI(dataMap.getDataMap(parameterName)));\n+        if (dataMap.get(parameterName) instanceof String)", "originalCommit": "87cd2f535254013d67a0dfe6eb09972f90b28c6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwMjE3Mw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434302173", "bodyText": "Fixed", "author": "BrianPin", "createdAt": "2020-06-03T04:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NzIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "49fd7b714f56e225e0ddb3237ecfc292a6886821", "chunk": "diff --git a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\nindex 6c1e69fcc..1fdffe65c 100644\n--- a/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n+++ b/restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java\n\n@@ -70,13 +70,18 @@ public class URIParamUtils\n     {\n       if (dataMap.containsKey(parameterName))\n       {\n-        if (dataMap.get(parameterName) instanceof String)\n+        Object projectionParameters = dataMap.get(parameterName);\n+        if (projectionParameters instanceof String)\n         {\n-          result.put(parameterName, dataMap.getString(parameterName));\n+          result.put(parameterName, (String) projectionParameters);\n         }\n-        else if (dataMap.get(parameterName) instanceof DataMap)\n+        else if (projectionParameters instanceof DataMap)\n         {\n-          result.put(parameterName, URIMaskUtil.encodeMaskForURI(dataMap.getDataMap(parameterName)));\n+          result.put(parameterName, URIMaskUtil.encodeMaskForURI((DataMap) projectionParameters));\n+        }\n+        else\n+        {\n+          throw new IllegalArgumentException(\"Invalid projection field data type\");\n         }\n       }\n     }\n"}}, {"oid": "49fd7b714f56e225e0ddb3237ecfc292a6886821", "url": "https://github.com/linkedin/rest.li/commit/49fd7b714f56e225e0ddb3237ecfc292a6886821", "message": "Address comment to add test on BatchFinderResource and minor optimization", "committedDate": "2020-06-03T04:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4NTA1OA==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434385058", "bodyText": "This is a cleaner solution, Nice!", "author": "karthikbalasub", "createdAt": "2020-06-03T08:08:19Z", "path": "restli-common/src/main/java/com/linkedin/restli/internal/common/URIParamUtils.java", "diffHunk": "@@ -53,6 +53,14 @@\n   private static final Pattern NORMALIZED_URI_PATTERN = Pattern.compile(\"(^/|/$)\");\n   private static final Pattern URI_SEPARATOR_PATTERN = Pattern.compile(\"/+\");\n \n+  /**\n+   * Return the string encoded version of query parameters.\n+   * For projection parameters stored in dataMap, this function handles both cases when the value is a original string", "originalCommit": "49fd7b714f56e225e0ddb3237ecfc292a6886821", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NTA2Ng==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434395066", "bodyText": "remove CloneNotSupportedException", "author": "aman1309", "createdAt": "2020-06-03T08:25:33Z", "path": "restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java", "diffHunk": "@@ -341,4 +344,94 @@ private static Foo generateMetaData(Boolean onError)\n     Foo foo = new Foo(map);\n     return foo;\n   }\n+\n+  @DataProvider(name = \"build_uri_test_cases\")\n+  public Object[][] testBuildCriteriaURIDataProvider() throws RestLiSyntaxException\n+  {\n+    String[] requestURIs =\n+    {\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577),(candidate:urn%3Baba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val1),(field1:val2,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=person:(firstname,lastname)&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/groups?fields=state,locale&metadataFields=city,age&pagingFields=start,count&q=emailDomain&search=List((field1:value1))\",\n+    };\n+\n+    String[] batchCriteriaParameterNames =\n+    {\n+        \"criteria\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"candidates\",\n+        \"search_criteria\",\n+        \"search_criteria\",\n+        \"search_criteria\",\n+        \"search\",\n+    };\n+\n+    String[] expectedURIs =\n+    {\n+        \"/greetings?bq=searchGreetings&criteria=List((id:1,tone:SINCERE))&message=hello\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn%3Ali%3Ats_hire_identity%3A88156577))&fields=candidate\",\n+        \"/talent/api/talentHiringProjectCandidates?bq=candidates&candidates=List((candidate:urn;aba%3Ats_hire_identity%3A88156588))&fields=candidate\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val1,field2:val1))\",\n+        \"/test/api/restli?bq=findSomething&fields=field1&search_criteria=List((field1:val2,field2:val2))\",\n+        \"/test/api/restli?bq=findSomething&fields=person:(firstname,lastname)&search_criteria=List((field1:val1,field2:val2))\",\n+        \"/groups?fields=state,locale&metadataFields=city,age&pagingFields=start,count&q=emailDomain&search=List((field1:value1))\",\n+    };\n+\n+    int totalCriteriaCases = expectedURIs.length;\n+    Object[][] testData = new Object[totalCriteriaCases][5];\n+    int cases = 0;\n+    int uriIndex = 0;\n+    while (cases < totalCriteriaCases)\n+    {\n+      Object[] singleCase = new Object[5];\n+      URI uri = URI.create(requestURIs[uriIndex]);\n+      RequestContext requestContext = new RequestContext();\n+      requestContext.putLocalAttr(\"timingsDisabled\", true);\n+      ResourceContextImpl resourceContext = new ResourceContextImpl(new PathKeysImpl(),\n+          new RestRequestBuilder(uri)\n+              .setHeader(RestConstants.HEADER_RESTLI_PROTOCOL_VERSION, AllProtocolVersions.RESTLI_PROTOCOL_2_0_0.getProtocolVersion().toString())\n+              .build(),\n+          requestContext);\n+\n+      DataList criteriaParameters = (DataList) resourceContext.getStructuredParameter(batchCriteriaParameterNames[uriIndex]);\n+      for (int i = 0; i < criteriaParameters.size(); i++)\n+      {\n+        RecordTemplate criteria = new AnyRecord((DataMap) criteriaParameters.get(i));\n+        singleCase[0] = resourceContext;\n+        singleCase[1] = criteria;\n+        singleCase[2] = batchCriteriaParameterNames[uriIndex];\n+        singleCase[3] = uri;\n+        singleCase[4] = URI.create(expectedURIs[cases]);\n+        testData[cases] = singleCase;\n+        cases ++;\n+      }\n+      uriIndex ++;\n+    }\n+\n+    return testData;\n+  }\n+\n+  @Test(dataProvider = \"build_uri_test_cases\")\n+  public void testBuildCriteriaURI(ResourceContextImpl resourceContext,\n+                                   RecordTemplate criteria,\n+                                   String batchParameterName,\n+                                   URI uri,\n+                                   URI expectedURI) throws CloneNotSupportedException", "originalCommit": "49fd7b714f56e225e0ddb3237ecfc292a6886821", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2MjU5Ng==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434662596", "bodyText": "Done", "author": "BrianPin", "createdAt": "2020-06-03T15:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NTA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "28ad12b36e7db40d783c461534a28653742ee1eb", "chunk": "diff --git a/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java b/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\nindex a54f5295b..2b4dd1472 100644\n--- a/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\n+++ b/restli-server/src/test/java/com/linkedin/restli/internal/server/response/TestBatchFinderResponseBuilder.java\n\n@@ -429,7 +429,7 @@ public class TestBatchFinderResponseBuilder\n                                    RecordTemplate criteria,\n                                    String batchParameterName,\n                                    URI uri,\n-                                   URI expectedURI) throws CloneNotSupportedException\n+                                   URI expectedURI)\n   {\n     URI generatedURI = BatchFinderResponseBuilder.buildCriteriaURI(resourceContext, criteria, batchParameterName, uri);\n     Assert.assertEquals(generatedURI.toString(), expectedURI.toString());\n"}}, {"oid": "28ad12b36e7db40d783c461534a28653742ee1eb", "url": "https://github.com/linkedin/rest.li/commit/28ad12b36e7db40d783c461534a28653742ee1eb", "message": "Remove unnecessary exception CloneNotSupportedException in test function", "committedDate": "2020-06-03T15:38:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTU2Nw==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434691567", "bodyText": "Is this for testing purpose only? If yes, we should add a comment \"package-private for testing purpose\".", "author": "nickibi", "createdAt": "2020-06-03T16:17:03Z", "path": "restli-server/src/main/java/com/linkedin/restli/internal/server/response/BatchFinderResponseBuilder.java", "diffHunk": "@@ -195,24 +195,24 @@ private AnyRecord buildMetaData(CollectionResult<RecordTemplate, RecordTemplate>\n     return null;\n   }\n \n-  private String getBatchParamterName(RoutingResult routingResult)\n+  private String getBatchParameterName(RoutingResult routingResult)\n   {\n     int batchFinderCriteriaIndex = routingResult.getResourceMethod().getBatchFinderCriteriaParamIndex();\n     return routingResult.getResourceMethod().getParameters().get(batchFinderCriteriaIndex).getName();\n   }\n \n   private DataList getCriteriaParameters(RoutingResult routingResult)\n   {\n-    String batchParamName = getBatchParamterName(routingResult);\n-    return(DataList)routingResult.getContext().getStructuredParameter(batchParamName);\n+    String batchParameterName = getBatchParameterName(routingResult);\n+    return (DataList) routingResult.getContext().getStructuredParameter(batchParameterName);\n   }\n \n-  private URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String queryParam, URI uri)\n+  static URI buildCriteriaURI(ResourceContextImpl resourceContext, RecordTemplate criteria, String batchParameterName, URI uri)", "originalCommit": "28ad12b36e7db40d783c461534a28653742ee1eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5ODUzMQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434698531", "bodyText": "Sorry just saw this, will do in my next PR.", "author": "BrianPin", "createdAt": "2020-06-03T16:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5ODk3MQ==", "url": "https://github.com/linkedin/rest.li/pull/312#discussion_r434698971", "bodyText": "This is for testing only right now", "author": "BrianPin", "createdAt": "2020-06-03T16:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTU2Nw=="}], "type": "inlineReview", "revised_code": null}]}