{"pr_number": 214, "pr_title": "Fix Classpath resource schema resolver to handle pdl resources.", "pr_createdAt": "2020-03-07T00:57:14Z", "pr_url": "https://github.com/linkedin/rest.li/pull/214", "timeline": [{"oid": "cbd331a402e0e3ae6c6e35e111d0693f4812a57e", "url": "https://github.com/linkedin/rest.li/commit/cbd331a402e0e3ae6c6e35e111d0693f4812a57e", "message": "Fix ClassPath resource schema resolver to handle pdl resources.", "committedDate": "2020-03-07T00:55:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMDk1OA==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389210958", "bodyText": "I suggest you move this field and its corresponding setter near the top of the inner class. It would be easier to read.", "author": "evanw555", "createdAt": "2020-03-07T01:09:28Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java", "diffHunk": "@@ -33,61 +34,106 @@\n  *\n  * @author Min Chen\n  */\n-public class ClasspathResourceDataSchemaResolver extends DefaultDataSchemaResolver\n+public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatDataSchemaResolver\n {\n   /**\n    * The default file name extension is \".pdsc\".\n+   * @deprecated Do not use.\n    */\n+  @Deprecated\n   public static final String DEFAULT_EXTENSION = SchemaParser.FILE_EXTENSION;\n \n+  private final ClassLoader _classLoader;\n+\n+\n   /**\n    * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n    */\n+  public ClasspathResourceDataSchemaResolver()\n+  {\n+    this(null, Thread.currentThread().getContextClassLoader());\n+  }\n+\n+  /**\n+   * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n+   *\n+   * @deprecated The parserFactory is not needed as this class now uses builtin parsers. Use\n+   * {@link #ClasspathResourceDataSchemaResolver()} instead\n+   */\n+  @Deprecated\n   public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory)\n   {\n-    super(parserFactory);\n-    _classLoader = Thread.currentThread().getContextClassLoader();\n+    this(Thread.currentThread().getContextClassLoader());\n   }\n \n   /**\n    * Construct a new instance that uses the specified {@link ClassLoader}.\n    *\n    * @param classLoader provides the {@link ClassLoader}.\n    */\n-  public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory, ClassLoader classLoader)\n+  public ClasspathResourceDataSchemaResolver(ClassLoader classLoader)\n   {\n-    super(parserFactory);\n+    for (DataSchemaParserFactory parserForFormat: BUILTIN_FORMAT_PARSER_FACTORIES)\n+    {\n+      SingleFormatClasspathSchemaResolver resolver = new SingleFormatClasspathSchemaResolver(parserForFormat);\n+      resolver.setExtension(\".\" + parserForFormat.getLanguageExtension());\n+      addResolver(resolver);\n+    }\n     _classLoader = classLoader;\n   }\n-\n-  private String getDataSchemaResourcePath(String schemaName)\n+  /**\n+   * Construct a new instance that uses the specified {@link ClassLoader}.\n+   *\n+   * @deprecated The parserFactory is not needed as this class now uses builtin parsers. Use\n+   * {@link #ClasspathResourceDataSchemaResolver(ClassLoader)} instead\n+   * @param classLoader provides the {@link ClassLoader}.\n+   */\n+  @Deprecated\n+  public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory, ClassLoader classLoader)\n   {\n-    return InternalConstants.PEGASUS_DIR_IN_JAR + \"/\" + schemaName.replace('.', '/') + DEFAULT_EXTENSION;\n+    this(classLoader);\n   }\n \n-  @Override\n-  protected NamedDataSchema locateDataSchema(String schemaName, StringBuilder errorMessageBuilder)\n+  private class SingleFormatClasspathSchemaResolver extends DefaultDataSchemaResolver\n   {\n-    NamedDataSchema schema = null;\n-    final String schemaResourcePath = getDataSchemaResourcePath(schemaName);\n-    try (InputStream stream = _classLoader.getResourceAsStream(schemaResourcePath))\n+    /**\n+     * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n+     */\n+    public SingleFormatClasspathSchemaResolver(DataSchemaParserFactory parserFactory)\n+    {\n+      super(parserFactory);\n+    }\n+\n+    private String getDataSchemaResourcePath(String schemaName)\n     {\n-      if (stream == null)\n+      return InternalConstants.PEGASUS_DIR_IN_JAR + \"/\" + schemaName.replace('.', '/') + _extension;\n+    }\n+\n+    @Override\n+    protected NamedDataSchema locateDataSchema(String schemaName, StringBuilder errorMessageBuilder)\n+    {\n+      NamedDataSchema schema = null;\n+      final String schemaResourcePath = getDataSchemaResourcePath(schemaName);\n+      try (InputStream stream = _classLoader.getResourceAsStream(schemaResourcePath))\n       {\n-        errorMessageBuilder.append(String.format(\"Unable to find data schema file \\\"%s\\\" in classpath.\", schemaResourcePath));\n+        if (stream != null)\n+        {\n+          DataSchemaLocation location = new FileDataSchemaLocation(new File(schemaResourcePath));\n+          schema = parse(stream, location, schemaName, errorMessageBuilder);\n+        }\n       }\n-      else\n+      catch (IOException e)\n       {\n-        DataSchemaLocation location = new FileDataSchemaLocation(new File(schemaResourcePath));\n-        schema = parse(stream, location, schemaName, errorMessageBuilder);\n+        errorMessageBuilder.append(String.format(\"Failed to read/close data schema file \\\"%s\\\" in classpath: \\\"%s\\\"\", schemaResourcePath, e.getMessage()));\n       }\n+      return schema;\n     }\n-    catch (IOException e)\n+\n+    void setExtension(String extension)\n     {\n-      errorMessageBuilder.append(String.format(\"Failed to read/close data schema file \\\"%s\\\" in classpath: \\\"%s\\\"\", schemaResourcePath, e.getMessage()));\n+      this._extension = extension;\n     }\n-    return schema;\n-  }\n \n-  private final ClassLoader _classLoader;\n+    private String _extension = SchemaParser.FILE_EXTENSION;", "originalCommit": "cbd331a402e0e3ae6c6e35e111d0693f4812a57e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a730cdce2622d766abf054e92542c6c0d02c2669", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\nindex de5e87cdc..af630250e 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n\n@@ -51,7 +51,7 @@ public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatData\n    */\n   public ClasspathResourceDataSchemaResolver()\n   {\n-    this(null, Thread.currentThread().getContextClassLoader());\n+    this(Thread.currentThread().getContextClassLoader());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMTc1NQ==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389211755", "bodyText": "This class no longer extends DefaultDataSchemaResolver. Are you sure you're not removing any default functionality it had before?", "author": "evanw555", "createdAt": "2020-03-07T01:15:25Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java", "diffHunk": "@@ -33,61 +34,106 @@\n  *\n  * @author Min Chen\n  */\n-public class ClasspathResourceDataSchemaResolver extends DefaultDataSchemaResolver", "originalCommit": "cbd331a402e0e3ae6c6e35e111d0693f4812a57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMzE1MQ==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389213151", "bodyText": "Since this delegates to the SingleFormat resolver (inner class) which extends the Default resolver, there shouldn't be any regression.", "author": "karthikbalasub", "createdAt": "2020-03-07T01:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMTc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNTcwOQ==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389215709", "bodyText": "Ah, that's right. It's interesting how the relationship of the multi-format resolvers with the default resolver logic is more \"has-a\" than \"is-a\". Reminds me of CS class...", "author": "evanw555", "createdAt": "2020-03-07T01:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMTc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a730cdce2622d766abf054e92542c6c0d02c2669", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\nindex de5e87cdc..af630250e 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n\n@@ -51,7 +51,7 @@ public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatData\n    */\n   public ClasspathResourceDataSchemaResolver()\n   {\n-    this(null, Thread.currentThread().getContextClassLoader());\n+    this(Thread.currentThread().getContextClassLoader());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjA5MA==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389212090", "bodyText": "How is this different from current MultiFormatDataSchemaResolver (https://github.com/linkedin/rest.li/blob/master/data/src/main/java/com/linkedin/data/schema/resolver/MultiFormatDataSchemaResolver.java)?", "author": "mchen07", "createdAt": "2020-03-07T01:17:35Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/AbstractMultiFormatDataSchemaResolver.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2015 Coursera Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.linkedin.data.schema.resolver;\n+\n+import com.linkedin.data.schema.DataSchemaLocation;\n+import com.linkedin.data.schema.DataSchemaParserFactory;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.Name;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.SchemaParser;\n+import com.linkedin.data.schema.SchemaParserFactory;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.grammar.PdlSchemaParserFactory;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * Combines multiple file format specific resolvers (and respective file format specific parsers)\n+ * into a single resolver.\n+ *\n+ * E.g. a resolver for the \".pdsc\" file format and the \".pdl\" file format, each with their\n+ * own file format specific parsers, can be combined into a single resolver able to look up\n+ * schemas of either file format.\n+ */\n+public class AbstractMultiFormatDataSchemaResolver implements DataSchemaResolver", "originalCommit": "cbd331a402e0e3ae6c6e35e111d0693f4812a57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjcwNA==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389212704", "bodyText": "Based on my understanding, he wanted to add similar logic to ClasspathResourceDataSchemaResolver, so it makes more sense to add the shared logic in a common abstract class.", "author": "evanw555", "createdAt": "2020-03-07T01:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjk5Mg==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389212992", "bodyText": "Correct, refactored the existing resolver to extract the common logic to abstract class. Forgot to make it abstract, will do it.\nThe existing multi-format resolver is the file based one.", "author": "karthikbalasub", "createdAt": "2020-03-07T01:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNDM3MQ==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389214371", "bodyText": "Never mind, I found out when I read through to the end.", "author": "mchen07", "createdAt": "2020-03-07T01:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "a730cdce2622d766abf054e92542c6c0d02c2669", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/AbstractMultiFormatDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/AbstractMultiFormatDataSchemaResolver.java\nindex aba31cf41..fdd02b3fb 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/AbstractMultiFormatDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/AbstractMultiFormatDataSchemaResolver.java\n\n@@ -36,11 +36,14 @@ import java.util.Map;\n  * Combines multiple file format specific resolvers (and respective file format specific parsers)\n  * into a single resolver.\n  *\n+ * Concrete implementations should initialize the list of resolvers to use by calling\n+ * {@link #addResolver(DataSchemaResolver)}\n+ *\n  * E.g. a resolver for the \".pdsc\" file format and the \".pdl\" file format, each with their\n  * own file format specific parsers, can be combined into a single resolver able to look up\n  * schemas of either file format.\n  */\n-public class AbstractMultiFormatDataSchemaResolver implements DataSchemaResolver\n+public abstract class AbstractMultiFormatDataSchemaResolver implements DataSchemaResolver\n {\n   /**\n    * File extensions for all builtin parsers: PDSC, PDL.\n"}}, {"oid": "a730cdce2622d766abf054e92542c6c0d02c2669", "url": "https://github.com/linkedin/rest.li/commit/a730cdce2622d766abf054e92542c6c0d02c2669", "message": "Address review comments", "committedDate": "2020-03-07T01:37:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjE2Mw==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389216163", "bodyText": "why do we need this setter exposed? Should constructor handle this automatically?", "author": "mchen07", "createdAt": "2020-03-07T01:52:05Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java", "diffHunk": "@@ -33,61 +34,106 @@\n  *\n  * @author Min Chen\n  */\n-public class ClasspathResourceDataSchemaResolver extends DefaultDataSchemaResolver\n+public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatDataSchemaResolver\n {\n   /**\n    * The default file name extension is \".pdsc\".\n+   * @deprecated Do not use.\n    */\n+  @Deprecated\n   public static final String DEFAULT_EXTENSION = SchemaParser.FILE_EXTENSION;\n \n+  private final ClassLoader _classLoader;\n+\n+\n   /**\n    * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n    */\n+  public ClasspathResourceDataSchemaResolver()\n+  {\n+    this(null, Thread.currentThread().getContextClassLoader());\n+  }\n+\n+  /**\n+   * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n+   *\n+   * @deprecated The parserFactory is not needed as this class now uses builtin parsers. Use\n+   * {@link #ClasspathResourceDataSchemaResolver()} instead\n+   */\n+  @Deprecated\n   public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory)\n   {\n-    super(parserFactory);\n-    _classLoader = Thread.currentThread().getContextClassLoader();\n+    this(Thread.currentThread().getContextClassLoader());\n   }\n \n   /**\n    * Construct a new instance that uses the specified {@link ClassLoader}.\n    *\n    * @param classLoader provides the {@link ClassLoader}.\n    */\n-  public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory, ClassLoader classLoader)\n+  public ClasspathResourceDataSchemaResolver(ClassLoader classLoader)\n   {\n-    super(parserFactory);\n+    for (DataSchemaParserFactory parserForFormat: BUILTIN_FORMAT_PARSER_FACTORIES)\n+    {\n+      SingleFormatClasspathSchemaResolver resolver = new SingleFormatClasspathSchemaResolver(parserForFormat);\n+      resolver.setExtension(\".\" + parserForFormat.getLanguageExtension());", "originalCommit": "cbd331a402e0e3ae6c6e35e111d0693f4812a57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjcwNg==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389216706", "bodyText": "+1", "author": "evanw555", "createdAt": "2020-03-07T01:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyNjM2NA==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389226364", "bodyText": "Fixed, this was remnant of an alternate implementation I started with. Cleaned it now.", "author": "karthikbalasub", "createdAt": "2020-03-07T04:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "80b4dfefd02489c580e3c265a7656c28a2741f9f", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\nindex de5e87cdc..6d3ecee48 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n\n@@ -51,7 +51,7 @@ public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatData\n    */\n   public ClasspathResourceDataSchemaResolver()\n   {\n-    this(null, Thread.currentThread().getContextClassLoader());\n+    this(Thread.currentThread().getContextClassLoader());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjIzNA==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389216234", "bodyText": "I may prefer that we make this final, and initialized in constructor and hide setter for this.", "author": "mchen07", "createdAt": "2020-03-07T01:52:59Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java", "diffHunk": "@@ -33,61 +34,106 @@\n  *\n  * @author Min Chen\n  */\n-public class ClasspathResourceDataSchemaResolver extends DefaultDataSchemaResolver\n+public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatDataSchemaResolver\n {\n   /**\n    * The default file name extension is \".pdsc\".\n+   * @deprecated Do not use.\n    */\n+  @Deprecated\n   public static final String DEFAULT_EXTENSION = SchemaParser.FILE_EXTENSION;\n \n+  private final ClassLoader _classLoader;\n+\n+\n   /**\n    * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n    */\n+  public ClasspathResourceDataSchemaResolver()\n+  {\n+    this(null, Thread.currentThread().getContextClassLoader());\n+  }\n+\n+  /**\n+   * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n+   *\n+   * @deprecated The parserFactory is not needed as this class now uses builtin parsers. Use\n+   * {@link #ClasspathResourceDataSchemaResolver()} instead\n+   */\n+  @Deprecated\n   public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory)\n   {\n-    super(parserFactory);\n-    _classLoader = Thread.currentThread().getContextClassLoader();\n+    this(Thread.currentThread().getContextClassLoader());\n   }\n \n   /**\n    * Construct a new instance that uses the specified {@link ClassLoader}.\n    *\n    * @param classLoader provides the {@link ClassLoader}.\n    */\n-  public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory, ClassLoader classLoader)\n+  public ClasspathResourceDataSchemaResolver(ClassLoader classLoader)\n   {\n-    super(parserFactory);\n+    for (DataSchemaParserFactory parserForFormat: BUILTIN_FORMAT_PARSER_FACTORIES)\n+    {\n+      SingleFormatClasspathSchemaResolver resolver = new SingleFormatClasspathSchemaResolver(parserForFormat);\n+      resolver.setExtension(\".\" + parserForFormat.getLanguageExtension());\n+      addResolver(resolver);\n+    }\n     _classLoader = classLoader;\n   }\n-\n-  private String getDataSchemaResourcePath(String schemaName)\n+  /**\n+   * Construct a new instance that uses the specified {@link ClassLoader}.\n+   *\n+   * @deprecated The parserFactory is not needed as this class now uses builtin parsers. Use\n+   * {@link #ClasspathResourceDataSchemaResolver(ClassLoader)} instead\n+   * @param classLoader provides the {@link ClassLoader}.\n+   */\n+  @Deprecated\n+  public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory, ClassLoader classLoader)\n   {\n-    return InternalConstants.PEGASUS_DIR_IN_JAR + \"/\" + schemaName.replace('.', '/') + DEFAULT_EXTENSION;\n+    this(classLoader);\n   }\n \n-  @Override\n-  protected NamedDataSchema locateDataSchema(String schemaName, StringBuilder errorMessageBuilder)\n+  private class SingleFormatClasspathSchemaResolver extends DefaultDataSchemaResolver\n   {\n-    NamedDataSchema schema = null;\n-    final String schemaResourcePath = getDataSchemaResourcePath(schemaName);\n-    try (InputStream stream = _classLoader.getResourceAsStream(schemaResourcePath))\n+    /**\n+     * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n+     */\n+    public SingleFormatClasspathSchemaResolver(DataSchemaParserFactory parserFactory)\n+    {\n+      super(parserFactory);\n+    }\n+\n+    private String getDataSchemaResourcePath(String schemaName)\n     {\n-      if (stream == null)\n+      return InternalConstants.PEGASUS_DIR_IN_JAR + \"/\" + schemaName.replace('.', '/') + _extension;\n+    }\n+\n+    @Override\n+    protected NamedDataSchema locateDataSchema(String schemaName, StringBuilder errorMessageBuilder)\n+    {\n+      NamedDataSchema schema = null;\n+      final String schemaResourcePath = getDataSchemaResourcePath(schemaName);\n+      try (InputStream stream = _classLoader.getResourceAsStream(schemaResourcePath))\n       {\n-        errorMessageBuilder.append(String.format(\"Unable to find data schema file \\\"%s\\\" in classpath.\", schemaResourcePath));\n+        if (stream != null)\n+        {\n+          DataSchemaLocation location = new FileDataSchemaLocation(new File(schemaResourcePath));\n+          schema = parse(stream, location, schemaName, errorMessageBuilder);\n+        }\n       }\n-      else\n+      catch (IOException e)\n       {\n-        DataSchemaLocation location = new FileDataSchemaLocation(new File(schemaResourcePath));\n-        schema = parse(stream, location, schemaName, errorMessageBuilder);\n+        errorMessageBuilder.append(String.format(\"Failed to read/close data schema file \\\"%s\\\" in classpath: \\\"%s\\\"\", schemaResourcePath, e.getMessage()));\n       }\n+      return schema;\n     }\n-    catch (IOException e)\n+\n+    void setExtension(String extension)\n     {\n-      errorMessageBuilder.append(String.format(\"Failed to read/close data schema file \\\"%s\\\" in classpath: \\\"%s\\\"\", schemaResourcePath, e.getMessage()));\n+      this._extension = extension;\n     }\n-    return schema;\n-  }\n \n-  private final ClassLoader _classLoader;\n+    private String _extension = SchemaParser.FILE_EXTENSION;", "originalCommit": "cbd331a402e0e3ae6c6e35e111d0693f4812a57e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80b4dfefd02489c580e3c265a7656c28a2741f9f", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\nindex de5e87cdc..6d3ecee48 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n\n@@ -51,7 +51,7 @@ public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatData\n    */\n   public ClasspathResourceDataSchemaResolver()\n   {\n-    this(null, Thread.currentThread().getContextClassLoader());\n+    this(Thread.currentThread().getContextClassLoader());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjU1Mw==", "url": "https://github.com/linkedin/rest.li/pull/214#discussion_r389216553", "bodyText": "one last nit: move to below constructor (Edit: just remove, as per Min's suggestion)", "author": "evanw555", "createdAt": "2020-03-07T01:56:05Z", "path": "data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java", "diffHunk": "@@ -33,61 +34,107 @@\n  *\n  * @author Min Chen\n  */\n-public class ClasspathResourceDataSchemaResolver extends DefaultDataSchemaResolver\n+public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatDataSchemaResolver\n {\n   /**\n    * The default file name extension is \".pdsc\".\n+   * @deprecated Do not use.\n    */\n+  @Deprecated\n   public static final String DEFAULT_EXTENSION = SchemaParser.FILE_EXTENSION;\n \n+  private final ClassLoader _classLoader;\n+\n+\n   /**\n    * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n    */\n+  public ClasspathResourceDataSchemaResolver()\n+  {\n+    this(Thread.currentThread().getContextClassLoader());\n+  }\n+\n+  /**\n+   * Construct a new instance that uses the {@link Thread#getContextClassLoader()} for the current thread.\n+   *\n+   * @deprecated The parserFactory is not needed as this class now uses builtin parsers. Use\n+   * {@link #ClasspathResourceDataSchemaResolver()} instead\n+   */\n+  @Deprecated\n   public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory)\n   {\n-    super(parserFactory);\n-    _classLoader = Thread.currentThread().getContextClassLoader();\n+    this(Thread.currentThread().getContextClassLoader());\n   }\n \n   /**\n    * Construct a new instance that uses the specified {@link ClassLoader}.\n    *\n    * @param classLoader provides the {@link ClassLoader}.\n    */\n-  public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory, ClassLoader classLoader)\n+  public ClasspathResourceDataSchemaResolver(ClassLoader classLoader)\n   {\n-    super(parserFactory);\n+    for (DataSchemaParserFactory parserForFormat: BUILTIN_FORMAT_PARSER_FACTORIES)\n+    {\n+      SingleFormatClasspathSchemaResolver resolver = new SingleFormatClasspathSchemaResolver(parserForFormat);\n+      resolver.setExtension(\".\" + parserForFormat.getLanguageExtension());\n+      addResolver(resolver);\n+    }\n     _classLoader = classLoader;\n   }\n \n-  private String getDataSchemaResourcePath(String schemaName)\n+  /**\n+   * Construct a new instance that uses the specified {@link ClassLoader}.\n+   *\n+   * @deprecated The parserFactory is not needed as this class now uses builtin parsers. Use\n+   * {@link #ClasspathResourceDataSchemaResolver(ClassLoader)} instead\n+   * @param classLoader provides the {@link ClassLoader}.\n+   */\n+  @Deprecated\n+  public ClasspathResourceDataSchemaResolver(SchemaParserFactory parserFactory, ClassLoader classLoader)\n   {\n-    return InternalConstants.PEGASUS_DIR_IN_JAR + \"/\" + schemaName.replace('.', '/') + DEFAULT_EXTENSION;\n+    this(classLoader);\n   }\n \n-  @Override\n-  protected NamedDataSchema locateDataSchema(String schemaName, StringBuilder errorMessageBuilder)\n+  private class SingleFormatClasspathSchemaResolver extends DefaultDataSchemaResolver\n   {\n-    NamedDataSchema schema = null;\n-    final String schemaResourcePath = getDataSchemaResourcePath(schemaName);\n-    try (InputStream stream = _classLoader.getResourceAsStream(schemaResourcePath))\n+    private String _extension = SchemaParser.FILE_EXTENSION;\n+\n+    void setExtension(String extension)", "originalCommit": "a730cdce2622d766abf054e92542c6c0d02c2669", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80b4dfefd02489c580e3c265a7656c28a2741f9f", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\nindex af630250e..6d3ecee48 100644\n--- a/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n+++ b/data/src/main/java/com/linkedin/data/schema/resolver/ClasspathResourceDataSchemaResolver.java\n\n@@ -75,9 +75,7 @@ public class ClasspathResourceDataSchemaResolver extends AbstractMultiFormatData\n   {\n     for (DataSchemaParserFactory parserForFormat: BUILTIN_FORMAT_PARSER_FACTORIES)\n     {\n-      SingleFormatClasspathSchemaResolver resolver = new SingleFormatClasspathSchemaResolver(parserForFormat);\n-      resolver.setExtension(\".\" + parserForFormat.getLanguageExtension());\n-      addResolver(resolver);\n+      addResolver(new SingleFormatClasspathSchemaResolver(parserForFormat));\n     }\n     _classLoader = classLoader;\n   }\n"}}, {"oid": "80b4dfefd02489c580e3c265a7656c28a2741f9f", "url": "https://github.com/linkedin/rest.li/commit/80b4dfefd02489c580e3c265a7656c28a2741f9f", "message": "Remove the setter for extension.", "committedDate": "2020-03-07T04:15:51Z", "type": "commit"}, {"oid": "161d8c998282107ce0e6b1c5d84804e84dc95f99", "url": "https://github.com/linkedin/rest.li/commit/161d8c998282107ce0e6b1c5d84804e84dc95f99", "message": "Release version 28.1.27", "committedDate": "2020-03-07T04:17:03Z", "type": "commit"}, {"oid": "da1bd47408d1c08e4a30dbb22b9054003a3afcd0", "url": "https://github.com/linkedin/rest.li/commit/da1bd47408d1c08e4a30dbb22b9054003a3afcd0", "message": "Merge branch 'master' into bug/pdl_classpath_resolver", "committedDate": "2020-03-07T15:28:44Z", "type": "commit"}]}