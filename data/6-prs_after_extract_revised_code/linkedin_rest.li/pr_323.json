{"pr_number": 323, "pr_title": "Fix non-deterministic issue for annotations in the generated data template code by using right schema location for typeref class template", "pr_createdAt": "2020-06-08T08:20:12Z", "pr_url": "https://github.com/linkedin/rest.li/pull/323", "timeline": [{"oid": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0", "url": "https://github.com/linkedin/rest.li/commit/d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0", "message": "Fix the non-deterministic issue by sorting source schema files everytime", "committedDate": "2020-06-08T21:09:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDk2MA==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437014960", "bodyText": "can you test using PDL? not to say pdsc is not good for this kind of testing, But since we are migrating to PDL. Need to make sure PDL is actually working. Also if we use PDL now, we don't need to worry about later they are migrated in this MP", "author": "junchuanwang", "createdAt": "2020-06-08T21:35:36Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +210,78 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},", "originalCommit": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NzAyMA==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437087020", "bodyText": "Yes, PDL cases are added", "author": "BrianPin", "createdAt": "2020-06-09T01:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\nindex ec001ef7d..6e57e54f0 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n\n@@ -211,18 +209,63 @@ public class TestPegasusDataTemplateGenerator\n             Function.identity()));\n   }\n \n-  @DataProvider(name = \"withMultiDataTemplateCases\")\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n   private Object[][] createDataTemplateCases()\n   {\n     return new Object[][]\n         {\n-            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},\n-            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n         };\n   }\n \n-  @Test(dataProvider = \"withMultiDataTemplateCases\")\n-  public void testDataTemplateGenerationOrderWithResolver(String[] pegasusFilenames)\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)\n       throws Exception\n   {\n     File tempDir = Files.createTempDirectory(\"restli\").toFile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTI5Ng==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437015296", "bodyText": "as we discussed offline, Please confirm if the inline typeref's dataSchemaLocation is also using enclosingSchema's location.", "author": "junchuanwang", "createdAt": "2020-06-08T21:36:26Z", "path": "generator/src/main/java/com/linkedin/pegasus/generator/TemplateSpecGenerator.java", "diffHunk": "@@ -712,6 +712,7 @@ private ClassTemplateSpec generateFixed(FixedDataSchema schema)\n \n   private TyperefTemplateSpec generateTyperef(TyperefDataSchema schema, TyperefDataSchema originalTyperefSchema)\n   {\n+    pushCurrentLocation(_schemaResolver.nameToDataSchemaLocations().get(schema.getFullName()));", "originalCommit": "d4b9bcb1c1c900c2ed53ddefe26bc0f8d4ff81c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NjkwMA==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437086900", "bodyText": "Junchuan, I confirmed this in my new added test case", "author": "BrianPin", "createdAt": "2020-06-09T01:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTI5Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "url": "https://github.com/linkedin/rest.li/commit/a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "message": "Add inline record test and PDL typed file test", "committedDate": "2020-06-09T01:25:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTA4OQ==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437115089", "bodyText": "I think the only 2 cases you need are\n{\"BRecord.pdl\", \"InlineRecord.java\"},\n{\"InlineRecord.java\", \"BRecord.pdl\"},\"\nUnless you want to test duplicates  like you have here.", "author": "Astro03", "createdAt": "2020-06-09T03:18:02Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},", "originalCommit": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\nindex 6e57e54f0..0b304ec76 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n\n@@ -209,63 +209,18 @@ public class TestPegasusDataTemplateGenerator\n             Function.identity()));\n   }\n \n-  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n   private Object[][] createDataTemplateCases()\n   {\n     return new Object[][]\n         {\n-            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n-            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n         };\n   }\n \n-  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n-  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n-  private Object[][] createCasesWithTyperefFieldInRecord()\n-  {\n-    return new Object[][]\n-        {\n-            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n-            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n-        };\n-  }\n-\n-  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n-  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n-  private Object[][] createCasesWithInlineFieldInRecord()\n-  {\n-    return new Object[][]\n-        {\n-            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n-        };\n-  }\n-\n-  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n-  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)\n+  @Test(dataProvider = \"withMultiDataTemplateCases\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] pegasusFilenames)\n       throws Exception\n   {\n     File tempDir = Files.createTempDirectory(\"restli\").toFile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTU0Nw==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437115547", "bodyText": "nit: fill javadoc comment out?", "author": "Astro03", "createdAt": "2020-06-09T03:19:57Z", "path": "generator/src/test/resources/referenceJava/BRecord.java", "diffHunk": "@@ -0,0 +1,135 @@\n+import java.util.List;\n+import javax.annotation.Generated;\n+import javax.annotation.Nonnull;\n+import com.linkedin.data.DataMap;\n+import com.linkedin.data.schema.PathSpec;\n+import com.linkedin.data.schema.RecordDataSchema;\n+import com.linkedin.data.schema.SchemaFormatType;\n+import com.linkedin.data.template.DataTemplateUtil;\n+import com.linkedin.data.template.GetMode;\n+import com.linkedin.data.template.RecordTemplate;\n+import com.linkedin.data.template.SetMode;\n+\n+\n+/**\n+ * ", "originalCommit": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNDAxMw==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437214013", "bodyText": "this is removed (by addressing Karthik's comment)", "author": "BrianPin", "createdAt": "2020-06-09T08:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/resources/referenceJava/BRecord.java b/generator/src/test/resources/referenceJava/BRecord.java\ndeleted file mode 100644\nindex ef9a7f8ec..000000000\n--- a/generator/src/test/resources/referenceJava/BRecord.java\n+++ /dev/null\n\n@@ -1,135 +0,0 @@\n-import java.util.List;\n-import javax.annotation.Generated;\n-import javax.annotation.Nonnull;\n-import com.linkedin.data.DataMap;\n-import com.linkedin.data.schema.PathSpec;\n-import com.linkedin.data.schema.RecordDataSchema;\n-import com.linkedin.data.schema.SchemaFormatType;\n-import com.linkedin.data.template.DataTemplateUtil;\n-import com.linkedin.data.template.GetMode;\n-import com.linkedin.data.template.RecordTemplate;\n-import com.linkedin.data.template.SetMode;\n-\n-\n-/**\n- * \n- * \n- */\n-@Generated(value = \"com.linkedin.pegasus.generator.JavaCodeUtil\", comments = \"Rest.li Data Template. Generated from /Users/bpin/code/pegasus/pegasus/generator/src/test/resources/generator/BRecord.pdl.\")\n-public class BRecord\n-    extends RecordTemplate\n-{\n-\n-    private final static BRecord.Fields _fields = new BRecord.Fields();\n-    private final static RecordDataSchema SCHEMA = ((RecordDataSchema) DataTemplateUtil.parseSchema(\"record BRecord{bField:record InlineRecord{}}\", SchemaFormatType.PDL));\n-    private final static RecordDataSchema.Field FIELD_BField = SCHEMA.getField(\"bField\");\n-\n-    public BRecord() {\n-        super(new DataMap(2, 0.75F), SCHEMA, 2);\n-    }\n-\n-    public BRecord(DataMap data) {\n-        super(data, SCHEMA);\n-    }\n-\n-    public static BRecord.Fields fields() {\n-        return _fields;\n-    }\n-\n-    /**\n-     * Existence checker for bField\n-     * \n-     * @see BRecord.Fields#bField\n-     */\n-    public boolean hasBField() {\n-        return contains(FIELD_BField);\n-    }\n-\n-    /**\n-     * Remover for bField\n-     * \n-     * @see BRecord.Fields#bField\n-     */\n-    public void removeBField() {\n-        remove(FIELD_BField);\n-    }\n-\n-    /**\n-     * Getter for bField\n-     * \n-     * @see BRecord.Fields#bField\n-     */\n-    public InlineRecord getBField(GetMode mode) {\n-        return obtainWrapped(FIELD_BField, InlineRecord.class, mode);\n-    }\n-\n-    /**\n-     * Getter for bField\n-     * \n-     * @return\n-     *     Required field. Could be null for partial record.\n-     * @see BRecord.Fields#bField\n-     */\n-    @Nonnull\n-    public InlineRecord getBField() {\n-        return obtainWrapped(FIELD_BField, InlineRecord.class, GetMode.STRICT);\n-    }\n-\n-    /**\n-     * Setter for bField\n-     * \n-     * @see BRecord.Fields#bField\n-     */\n-    public BRecord setBField(InlineRecord value, SetMode mode) {\n-        putWrapped(FIELD_BField, InlineRecord.class, value, mode);\n-        return this;\n-    }\n-\n-    /**\n-     * Setter for bField\n-     * \n-     * @param value\n-     *     Must not be null. For more control, use setters with mode instead.\n-     * @see BRecord.Fields#bField\n-     */\n-    public BRecord setBField(\n-        @Nonnull\n-        InlineRecord value) {\n-        putWrapped(FIELD_BField, InlineRecord.class, value, SetMode.DISALLOW_NULL);\n-        return this;\n-    }\n-\n-    @Override\n-    public BRecord clone()\n-        throws CloneNotSupportedException\n-    {\n-        return ((BRecord) super.clone());\n-    }\n-\n-    @Override\n-    public BRecord copy()\n-        throws CloneNotSupportedException\n-    {\n-        return ((BRecord) super.copy());\n-    }\n-\n-    public static class Fields\n-        extends PathSpec\n-    {\n-\n-\n-        public Fields(List<String> path, String name) {\n-            super(path, name);\n-        }\n-\n-        public Fields() {\n-            super();\n-        }\n-\n-        public InlineRecord.Fields bField() {\n-            return new InlineRecord.Fields(getPathComponents(), \"bField\");\n-        }\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjE1Mw==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437116153", "bodyText": "nit: testDataTemplateGenerationDeterminism  (the Deterministic in the sentence doesn't make sense)", "author": "Astro03", "createdAt": "2020-06-09T03:22:29Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "originalCommit": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNTAxNw==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437215017", "bodyText": "thanks, addressed", "author": "BrianPin", "createdAt": "2020-06-09T08:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\nindex 6e57e54f0..0b304ec76 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n\n@@ -209,63 +209,18 @@ public class TestPegasusDataTemplateGenerator\n             Function.identity()));\n   }\n \n-  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n   private Object[][] createDataTemplateCases()\n   {\n     return new Object[][]\n         {\n-            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n-            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n         };\n   }\n \n-  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n-  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n-  private Object[][] createCasesWithTyperefFieldInRecord()\n-  {\n-    return new Object[][]\n-        {\n-            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n-            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n-        };\n-  }\n-\n-  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n-  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n-  private Object[][] createCasesWithInlineFieldInRecord()\n-  {\n-    return new Object[][]\n-        {\n-            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n-        };\n-  }\n-\n-  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n-  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)\n+  @Test(dataProvider = \"withMultiDataTemplateCases\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] pegasusFilenames)\n       throws Exception\n   {\n     File tempDir = Files.createTempDirectory(\"restli\").toFile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExODE1NQ==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437118155", "bodyText": "Oh, sorry, I just realized what you are doing with all these tests.\nSince you only really have one test with a nuance on the inputs, the better practice would be to have 1 DataProvider with your different tests as it's inputs.\ni.e.\ndata resolver\n{\n// typered fields with pdsc files\n{ ...}\n{...}\n// typeref field with pdl files\n{ ...}\n{ ... }\n// inline field with pdsc files\n{ ...}\n{...}\n//inline field with pdl files\n{ ...}\n{ ...}\n}\nthen your test would be just the one test you had.", "author": "Astro03", "createdAt": "2020-06-09T03:31:05Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)", "originalCommit": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNTIyMQ==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437215221", "bodyText": "Yes, thanks, addressed into a single data provider \"test_schema_permutation_deterministic\"", "author": "BrianPin", "createdAt": "2020-06-09T08:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExODE1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1ODQzNA==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437558434", "bodyText": "I see that you changed to a single data provider but you still have only 1 input arrray into your test, then within your test, you split it up by dividing by 2.\nYou should have two separate arrays, one for each variable. It makes it a lot easier to understand the logic within your code/test.", "author": "Astro03", "createdAt": "2020-06-09T16:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExODE1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\nindex 6e57e54f0..0b304ec76 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n\n@@ -209,63 +209,18 @@ public class TestPegasusDataTemplateGenerator\n             Function.identity()));\n   }\n \n-  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n   private Object[][] createDataTemplateCases()\n   {\n     return new Object[][]\n         {\n-            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n-            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n         };\n   }\n \n-  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n-  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n-  private Object[][] createCasesWithTyperefFieldInRecord()\n-  {\n-    return new Object[][]\n-        {\n-            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n-            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n-        };\n-  }\n-\n-  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n-  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n-  private Object[][] createCasesWithInlineFieldInRecord()\n-  {\n-    return new Object[][]\n-        {\n-            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n-        };\n-  }\n-\n-  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n-  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)\n+  @Test(dataProvider = \"withMultiDataTemplateCases\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] pegasusFilenames)\n       throws Exception\n   {\n     File tempDir = Files.createTempDirectory(\"restli\").toFile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437150776", "bodyText": "A better way to test this (and avoid having to update java files everytime code generation logic changes) is to take two arrays of Pegasus schemas as input (in different order) and then generate the source files and compare they are same.", "author": "karthikbalasub", "createdAt": "2020-06-09T05:45:12Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +208,123 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  private Object[][] createDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n+  private Object[][] createCasesWithTyperefFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n+            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n+  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n+  private Object[][] createCasesWithInlineFieldInRecord()\n+  {\n+    return new Object[][]\n+        {\n+            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n+  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n+      throws Exception\n+  {\n+    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n+    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n+    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n+  }\n+\n+  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)", "originalCommit": "a7e7cbaea156f9fc10cfc5a2c761a8dd8b33490f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2MDE0Ng==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437160146", "bodyText": "That was my first attempt, sometime today in my chat with Astro, I changed to current way.\nI think ...... I can do the original way", "author": "BrianPin", "createdAt": "2020-06-09T06:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2MzQwMQ==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437163401", "bodyText": "I think you can just generate MD5 for all the generated files together by xor-ing individual MD5s and compare. It would be simpler than current logic.\nSee https://stackoverflow.com/questions/47253864/order-independent-hash-in-java", "author": "karthikbalasub", "createdAt": "2020-06-09T06:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2ODI0NQ==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437568245", "bodyText": "I was talking about this comment. What did i suggest?", "author": "Astro03", "createdAt": "2020-06-09T16:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\nindex 6e57e54f0..0b304ec76 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n\n@@ -209,63 +209,18 @@ public class TestPegasusDataTemplateGenerator\n             Function.identity()));\n   }\n \n-  @DataProvider(name = \"with_typeref_field_in_record_pdsc\")\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n   private Object[][] createDataTemplateCases()\n   {\n     return new Object[][]\n         {\n-            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n-            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\", \"IsoDuration.java\", \"PremiumService.java\", \"PremiumServiceState.java\", \"AccountBalanceType.java\"},\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n         };\n   }\n \n-  @Test(dataProvider = \"with_typeref_field_in_record_pdsc\")\n-  public void testDataTemplateGenerationOrderWithResolver(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  @DataProvider(name = \"with_typeref_field_in_record_pdl\")\n-  private Object[][] createCasesWithTyperefFieldInRecord()\n-  {\n-    return new Object[][]\n-        {\n-            {\"AField.pdl\", \"ARecord.pdl\", \"AField.java\", \"ARecord.java\"},\n-            {\"ARecord.pdl\", \"AField.pdl\", \"AField.java\", \"ARecord.java\"},\n-        };\n-  }\n-\n-  @Test(dataProvider = \"with_typeref_field_in_record_pdl\")\n-  public void testCasesWithTyperefFieldInRecord(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 2);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 2, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  @DataProvider(name = \"with_inline_field_in_record_pdl\")\n-  private Object[][] createCasesWithInlineFieldInRecord()\n-  {\n-    return new Object[][]\n-        {\n-            {\"BRecord.pdl\", \"InlineRecord.java\", \"BRecord.java\"},\n-        };\n-  }\n-\n-  @Test(dataProvider = \"with_inline_field_in_record_pdl\")\n-  public void testCasesWithInlineFieldInRecord(String[] testArgs)\n-      throws Exception\n-  {\n-    String[] pegasusFilenames = Arrays.copyOfRange(testArgs, 0, 1);\n-    String[] javaFilenames = Arrays.copyOfRange(testArgs, 1, testArgs.length);\n-    testDataTemplateGenerationDeterministic(pegasusFilenames, javaFilenames);\n-  }\n-\n-  private void testDataTemplateGenerationDeterministic(String[] pegasusFilenames, String[] javaFilenames)\n+  @Test(dataProvider = \"withMultiDataTemplateCases\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] pegasusFilenames)\n       throws Exception\n   {\n     File tempDir = Files.createTempDirectory(\"restli\").toFile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MTQ5MA==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437291490", "bodyText": "I suggest you return two arrays of strings as input.\nEg\n{{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}}\n\nAnd add a comment explaining why order is important for this test.", "author": "karthikbalasub", "createdAt": "2020-06-09T10:01:08Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},", "originalCommit": "daf1944372684acf7166584d36b176fd99230d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNTY0OA==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437605648", "bodyText": "Both of the two points are addressed, I added a comment on the DataProvider, Please let me know if the comment is clear", "author": "BrianPin", "createdAt": "2020-06-09T17:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MTQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\nindex a3382191b..0b304ec76 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n\n@@ -207,61 +209,77 @@ public class TestPegasusDataTemplateGenerator\n             Function.identity()));\n   }\n \n-  @DataProvider(name = \"test_schema_permutation_deterministic\")\n-  private Object[][] createPermutedDataTemplateCases()\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n+  private Object[][] createDataTemplateCases()\n   {\n     return new Object[][]\n         {\n-            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n-            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n-            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n         };\n   }\n \n-  @Test(dataProvider = \"test_schema_permutation_deterministic\")\n-  public void testDataTemplateGenerationDeterminism(String[] testArgs)\n+  @Test(dataProvider = \"withMultiDataTemplateCases\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] pegasusFilenames)\n       throws Exception\n-  {\n-    int permuteLength = testArgs.length / 2;\n-    String[] pegasusFilenames1 = Arrays.copyOfRange(testArgs, 0, permuteLength);\n-    String[] pegasusFilenames2 = Arrays.copyOfRange(testArgs, permuteLength, testArgs.length);\n-    File[] generatedFiles1 = generateDataTemplateFiles(pegasusFilenames1);\n-    File[] generatedFiles2 = generateDataTemplateFiles(pegasusFilenames2);\n-    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n-  }\n-\n-  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n   {\n     File tempDir = Files.createTempDirectory(\"restli\").toFile();\n     File argFile = new File(tempDir, \"resolverPath\");\n     Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n     System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n     String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n-    String[] mainArgs = new String[pegasusFilenames.length + 1];\n-    mainArgs[0] = tempDirectoryPath1;\n-    for (int i = 0; i < pegasusFilenames.length; i++)\n-    {\n-      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n-    }\n-    PegasusDataTemplateGenerator.main(mainArgs);\n+    String[] args1 = new String[3];\n+    args1[0] = tempDirectoryPath1;\n+    args1[1] = new File(pegasusDir + FS + pegasusFilenames[0]).getAbsolutePath();\n+    args1[2] = new File(pegasusDir + FS + pegasusFilenames[1]).getAbsolutePath();\n+\n+    PegasusDataTemplateGenerator.main(args1);\n+\n     File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));\n     Assert.assertNotNull(generatedFiles, \"Found no generated Java files.\");\n-    return generatedFiles;\n-  }\n+    Map<String, byte[]> checkSumByFile = new HashMap<>();\n \n-  private void checkGeneratedFilesConsistency(File[] generatedFiles1, File[] generatedFiles2) throws IOException\n-  {\n-    Assert.assertEquals(generatedFiles1.length, generatedFiles2.length);\n-    for (int i = 0; i < generatedFiles1.length; i++)\n+    Arrays.stream(generatedFiles).forEach(file ->\n     {\n-      Assert.assertTrue(compareTwoFiles(generatedFiles1[i], generatedFiles2[i]));\n-    }\n-  }\n-\n-  private boolean compareTwoFiles(File file1, File file2) throws IOException\n-  {\n-    byte[] content1 = Files.readAllBytes(file1.toPath());\n-    byte[] content2 = Files.readAllBytes(file2.toPath());\n-    return Arrays.equals(content1, content2);\n+      try\n+      {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(Files.readAllBytes(file.toPath()));\n+        checkSumByFile.put(file.getName(), md.digest());\n+      }\n+      catch (NoSuchAlgorithmException e)\n+      {\n+        throw new RuntimeException(\"MessageDigest module does not have MD5 algorithm\");\n+      }\n+      catch (IOException e)\n+      {\n+        throw new RuntimeException(\"Can't read generated data template file \" + file.getName());\n+      }\n+    });\n+    File[] expectedFiles = new File[4];\n+    expectedFiles[0] = new File(pegasusDirGenerated + FS + \"IsoDuration.java\");\n+    expectedFiles[1] = new File(pegasusDirGenerated + FS + \"PremiumService.java\");\n+    expectedFiles[2] = new File(pegasusDirGenerated + FS + \"PremiumServiceState.java\");\n+    expectedFiles[3] = new File(pegasusDirGenerated + FS + \"AccountBalanceType.java\");\n+    Arrays.stream(expectedFiles).forEach(file ->\n+    {\n+      try\n+      {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(Files.readAllBytes(file.toPath()));\n+        byte[] digests = md.digest();\n+        Assert.assertTrue(checkSumByFile.containsKey(file.getName()));\n+        Assert.assertEquals(checkSumByFile.get(file.getName()), digests);\n+      }\n+      catch (NoSuchAlgorithmException e)\n+      {\n+        throw new RuntimeException(\"MessageDigest module does not have MD5 algorithm\");\n+      }\n+      catch (IOException e)\n+      {\n+        throw new RuntimeException(\"Can't read generated data template file \" + file.getName());\n+      }\n+    });\n+    Assert.assertEquals(expectedFiles.length, generatedFiles.length);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MzI2Ng==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437293266", "bodyText": "Is this guaranteed to return the files sorted alphabetically?", "author": "karthikbalasub", "createdAt": "2020-06-09T10:04:08Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,62 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  @DataProvider(name = \"test_schema_permutation_deterministic\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n+            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n+            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_deterministic\")\n+  public void testDataTemplateGenerationDeterminism(String[] testArgs)\n+      throws Exception\n+  {\n+    int permuteLength = testArgs.length / 2;\n+    String[] pegasusFilenames1 = Arrays.copyOfRange(testArgs, 0, permuteLength);\n+    String[] pegasusFilenames2 = Arrays.copyOfRange(testArgs, permuteLength, testArgs.length);\n+    File[] generatedFiles1 = generateDataTemplateFiles(pegasusFilenames1);\n+    File[] generatedFiles2 = generateDataTemplateFiles(pegasusFilenames2);\n+    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n+  }\n+\n+  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n+  {\n+    File tempDir = Files.createTempDirectory(\"restli\").toFile();\n+    File argFile = new File(tempDir, \"resolverPath\");\n+    Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n+    System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n+    String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n+    String[] mainArgs = new String[pegasusFilenames.length + 1];\n+    mainArgs[0] = tempDirectoryPath1;\n+    for (int i = 0; i < pegasusFilenames.length; i++)\n+    {\n+      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n+    }\n+    PegasusDataTemplateGenerator.main(mainArgs);\n+    File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));", "originalCommit": "daf1944372684acf7166584d36b176fd99230d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNjQ4Mg==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437606482", "bodyText": "the returning files are not needed to be sorted, (if it sorts that is fine), the requirement is that for two consecutive calls of _tempDir.listFiles , the  returning files order shall be the same.", "author": "BrianPin", "createdAt": "2020-06-09T17:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MzI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMDMxOA==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437610318", "bodyText": "I don't see that consecutive calls would return the same order: https://docs.oracle.com/javase/7/docs/api/java/io/File.html#listFiles()\nI suggest sorting the generateFiles array to be sure this cannot cause flakiness.", "author": "karthikbalasub", "createdAt": "2020-06-09T17:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MzI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\nindex a3382191b..0b304ec76 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n\n@@ -207,61 +209,77 @@ public class TestPegasusDataTemplateGenerator\n             Function.identity()));\n   }\n \n-  @DataProvider(name = \"test_schema_permutation_deterministic\")\n-  private Object[][] createPermutedDataTemplateCases()\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n+  private Object[][] createDataTemplateCases()\n   {\n     return new Object[][]\n         {\n-            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\", \"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n-            {\"AField.pdl\", \"ARecord.pdl\", \"ARecord.pdl\", \"AField.pdl\"},\n-            {\"BRecord.pdl\", \"BField.pdl\", \"BField.pdl\", \"BRecord.pdl\"},\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n         };\n   }\n \n-  @Test(dataProvider = \"test_schema_permutation_deterministic\")\n-  public void testDataTemplateGenerationDeterminism(String[] testArgs)\n+  @Test(dataProvider = \"withMultiDataTemplateCases\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] pegasusFilenames)\n       throws Exception\n-  {\n-    int permuteLength = testArgs.length / 2;\n-    String[] pegasusFilenames1 = Arrays.copyOfRange(testArgs, 0, permuteLength);\n-    String[] pegasusFilenames2 = Arrays.copyOfRange(testArgs, permuteLength, testArgs.length);\n-    File[] generatedFiles1 = generateDataTemplateFiles(pegasusFilenames1);\n-    File[] generatedFiles2 = generateDataTemplateFiles(pegasusFilenames2);\n-    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n-  }\n-\n-  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n   {\n     File tempDir = Files.createTempDirectory(\"restli\").toFile();\n     File argFile = new File(tempDir, \"resolverPath\");\n     Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n     System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n     String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n-    String[] mainArgs = new String[pegasusFilenames.length + 1];\n-    mainArgs[0] = tempDirectoryPath1;\n-    for (int i = 0; i < pegasusFilenames.length; i++)\n-    {\n-      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n-    }\n-    PegasusDataTemplateGenerator.main(mainArgs);\n+    String[] args1 = new String[3];\n+    args1[0] = tempDirectoryPath1;\n+    args1[1] = new File(pegasusDir + FS + pegasusFilenames[0]).getAbsolutePath();\n+    args1[2] = new File(pegasusDir + FS + pegasusFilenames[1]).getAbsolutePath();\n+\n+    PegasusDataTemplateGenerator.main(args1);\n+\n     File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));\n     Assert.assertNotNull(generatedFiles, \"Found no generated Java files.\");\n-    return generatedFiles;\n-  }\n+    Map<String, byte[]> checkSumByFile = new HashMap<>();\n \n-  private void checkGeneratedFilesConsistency(File[] generatedFiles1, File[] generatedFiles2) throws IOException\n-  {\n-    Assert.assertEquals(generatedFiles1.length, generatedFiles2.length);\n-    for (int i = 0; i < generatedFiles1.length; i++)\n+    Arrays.stream(generatedFiles).forEach(file ->\n     {\n-      Assert.assertTrue(compareTwoFiles(generatedFiles1[i], generatedFiles2[i]));\n-    }\n-  }\n-\n-  private boolean compareTwoFiles(File file1, File file2) throws IOException\n-  {\n-    byte[] content1 = Files.readAllBytes(file1.toPath());\n-    byte[] content2 = Files.readAllBytes(file2.toPath());\n-    return Arrays.equals(content1, content2);\n+      try\n+      {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(Files.readAllBytes(file.toPath()));\n+        checkSumByFile.put(file.getName(), md.digest());\n+      }\n+      catch (NoSuchAlgorithmException e)\n+      {\n+        throw new RuntimeException(\"MessageDigest module does not have MD5 algorithm\");\n+      }\n+      catch (IOException e)\n+      {\n+        throw new RuntimeException(\"Can't read generated data template file \" + file.getName());\n+      }\n+    });\n+    File[] expectedFiles = new File[4];\n+    expectedFiles[0] = new File(pegasusDirGenerated + FS + \"IsoDuration.java\");\n+    expectedFiles[1] = new File(pegasusDirGenerated + FS + \"PremiumService.java\");\n+    expectedFiles[2] = new File(pegasusDirGenerated + FS + \"PremiumServiceState.java\");\n+    expectedFiles[3] = new File(pegasusDirGenerated + FS + \"AccountBalanceType.java\");\n+    Arrays.stream(expectedFiles).forEach(file ->\n+    {\n+      try\n+      {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(Files.readAllBytes(file.toPath()));\n+        byte[] digests = md.digest();\n+        Assert.assertTrue(checkSumByFile.containsKey(file.getName()));\n+        Assert.assertEquals(checkSumByFile.get(file.getName()), digests);\n+      }\n+      catch (NoSuchAlgorithmException e)\n+      {\n+        throw new RuntimeException(\"MessageDigest module does not have MD5 algorithm\");\n+      }\n+      catch (IOException e)\n+      {\n+        throw new RuntimeException(\"Can't read generated data template file \" + file.getName());\n+      }\n+    });\n+    Assert.assertEquals(expectedFiles.length, generatedFiles.length);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNzU0Ng==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437607546", "bodyText": "This change here is happening is only because the test wasn't need to mock the schema location before, now it has to, so I have to patch this test, it is not because of any additional logic change", "author": "BrianPin", "createdAt": "2020-06-09T17:42:52Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestTemplateSpecGenerator.java", "diffHunk": "@@ -72,14 +74,18 @@\n   private AtomicInteger _uniqueNumberGenerator;\n   @Mock\n   private DataSchemaResolver _resolver;\n-  @Mock\n   private DataSchemaLocation _location;\n \n   @BeforeMethod\n   public void initMocks() {\n     MockitoAnnotations.initMocks(this);\n     _uniqueNumberGenerator = new AtomicInteger();\n-    Mockito.when(_resolver.nameToDataSchemaLocations()).thenReturn(Collections.singletonMap(INPUT_SCHEMA_NAME, _location));\n+    _location = new StringDataSchemaLocation(\"location\");\n+    HashMap<String, DataSchemaLocation> schemaToLocation = new HashMap<>();\n+    schemaToLocation.put(INPUT_SCHEMA_NAME, _location);\n+    schemaToLocation.put(CUSTOM_TYPE_1.getFullName(), _location);\n+    schemaToLocation.put(CUSTOM_TYPE_2.getFullName(), _location);\n+    Mockito.when(_resolver.nameToDataSchemaLocations()).thenReturn(schemaToLocation);", "originalCommit": "387e8f5da5715c676ef045d4233ab036ba3bdfd9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestTemplateSpecGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestTemplateSpecGenerator.java\nindex 33232a4fb..96c7b9341 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestTemplateSpecGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestTemplateSpecGenerator.java\n\n@@ -74,18 +72,14 @@ public class TestTemplateSpecGenerator\n   private AtomicInteger _uniqueNumberGenerator;\n   @Mock\n   private DataSchemaResolver _resolver;\n+  @Mock\n   private DataSchemaLocation _location;\n \n   @BeforeMethod\n   public void initMocks() {\n     MockitoAnnotations.initMocks(this);\n     _uniqueNumberGenerator = new AtomicInteger();\n-    _location = new StringDataSchemaLocation(\"location\");\n-    HashMap<String, DataSchemaLocation> schemaToLocation = new HashMap<>();\n-    schemaToLocation.put(INPUT_SCHEMA_NAME, _location);\n-    schemaToLocation.put(CUSTOM_TYPE_1.getFullName(), _location);\n-    schemaToLocation.put(CUSTOM_TYPE_2.getFullName(), _location);\n-    Mockito.when(_resolver.nameToDataSchemaLocations()).thenReturn(schemaToLocation);\n+    Mockito.when(_resolver.nameToDataSchemaLocations()).thenReturn(Collections.singletonMap(INPUT_SCHEMA_NAME, _location));\n   }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTk2Mw==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437611963", "bodyText": "I guess I made a mistake in my suggestion, what I wanted is for this method to take 2 args:\n(String[] inputSchemasOrder1, String[] inputSchemasOrder2)", "author": "karthikbalasub", "createdAt": "2020-06-09T17:50:27Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java", "diffHunk": "@@ -205,4 +206,64 @@ private void testRunGenerator(String pegasusFilename, Map<String, String> expect\n             file -> file.getName().replace(\".java\", \"\"),\n             Function.identity()));\n   }\n+\n+  /**\n+   *\n+   * @return an array of test cases where each case has two array of test schema file names. Those file names are\n+   *   in the different permutations of same group of test schema files\n+   */\n+  @DataProvider(name = \"test_schema_permutation_determinisim\")\n+  private Object[][] createPermutedDataTemplateCases()\n+  {\n+    return new Object[][]\n+        {\n+            {new String[]{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, new String[]{\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}},\n+            {new String[]{\"AField.pdl\", \"ARecord.pdl\"}, new String[]{\"ARecord.pdl\", \"AField.pdl\"}},\n+            {new String[]{\"BRecord.pdl\", \"BField.pdl\"}, new String[]{\"BField.pdl\", \"BRecord.pdl\"}},\n+        };\n+  }\n+\n+  @Test(dataProvider = \"test_schema_permutation_determinisim\")\n+  public void testDataTemplateGenerationDeterminism(String[][] testArgs)", "originalCommit": "387e8f5da5715c676ef045d4233ab036ba3bdfd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNDI4NQ==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437624285", "bodyText": "I agree, is this not how this test framework organizes the inputs for DataProviders?", "author": "Astro03", "createdAt": "2020-06-09T18:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNDM2MQ==", "url": "https://github.com/linkedin/rest.li/pull/323#discussion_r437814361", "bodyText": "This is addressed", "author": "BrianPin", "createdAt": "2020-06-10T01:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "016da33797fa463c9ce9fb775a47c325a0613dff", "chunk": "diff --git a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\nindex 69184fbdf..0b304ec76 100644\n--- a/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n+++ b/generator/src/test/java/com/linkedin/pegasus/generator/TestPegasusDataTemplateGenerator.java\n\n@@ -207,63 +209,77 @@ public class TestPegasusDataTemplateGenerator\n             Function.identity()));\n   }\n \n-  /**\n-   *\n-   * @return an array of test cases where each case has two array of test schema file names. Those file names are\n-   *   in the different permutations of same group of test schema files\n-   */\n-  @DataProvider(name = \"test_schema_permutation_determinisim\")\n-  private Object[][] createPermutedDataTemplateCases()\n+  @DataProvider(name = \"withMultiDataTemplateCases\")\n+  private Object[][] createDataTemplateCases()\n   {\n     return new Object[][]\n         {\n-            {new String[]{\"IsoDuration.pdsc\", \"PremiumService.pdsc\"}, new String[]{\"PremiumService.pdsc\", \"IsoDuration.pdsc\"}},\n-            {new String[]{\"AField.pdl\", \"ARecord.pdl\"}, new String[]{\"ARecord.pdl\", \"AField.pdl\"}},\n-            {new String[]{\"BRecord.pdl\", \"BField.pdl\"}, new String[]{\"BField.pdl\", \"BRecord.pdl\"}},\n+            {\"IsoDuration.pdsc\", \"PremiumService.pdsc\"},\n+            {\"PremiumService.pdsc\", \"IsoDuration.pdsc\"},\n         };\n   }\n \n-  @Test(dataProvider = \"test_schema_permutation_determinisim\")\n-  public void testDataTemplateGenerationDeterminism(String[][] testArgs)\n+  @Test(dataProvider = \"withMultiDataTemplateCases\")\n+  public void testDataTemplateGenerationOrderWithResolver(String[] pegasusFilenames)\n       throws Exception\n-  {\n-    File[] generatedFiles1 = generateDataTemplateFiles(testArgs[0]);\n-    File[] generatedFiles2 = generateDataTemplateFiles(testArgs[1]);\n-    checkGeneratedFilesConsistency(generatedFiles1, generatedFiles2);\n-  }\n-\n-  private File[] generateDataTemplateFiles(String[] pegasusFilenames) throws Exception\n   {\n     File tempDir = Files.createTempDirectory(\"restli\").toFile();\n     File argFile = new File(tempDir, \"resolverPath\");\n     Files.write(argFile.toPath(), Collections.singletonList(pegasusDir));\n     System.setProperty(AbstractGenerator.GENERATOR_RESOLVER_PATH, String.format(\"@%s\", argFile.toPath()));\n     String tempDirectoryPath1 = _tempDir.getAbsolutePath();\n-    String[] mainArgs = new String[pegasusFilenames.length + 1];\n-    mainArgs[0] = tempDirectoryPath1;\n-    for (int i = 0; i < pegasusFilenames.length; i++)\n-    {\n-      mainArgs[i+1] = new File(pegasusDir + FS + pegasusFilenames[i]).getAbsolutePath();\n-    }\n-    PegasusDataTemplateGenerator.main(mainArgs);\n+    String[] args1 = new String[3];\n+    args1[0] = tempDirectoryPath1;\n+    args1[1] = new File(pegasusDir + FS + pegasusFilenames[0]).getAbsolutePath();\n+    args1[2] = new File(pegasusDir + FS + pegasusFilenames[1]).getAbsolutePath();\n+\n+    PegasusDataTemplateGenerator.main(args1);\n+\n     File[] generatedFiles = _tempDir.listFiles((File dir, String name) -> name.endsWith(\".java\"));\n     Assert.assertNotNull(generatedFiles, \"Found no generated Java files.\");\n-    return generatedFiles;\n-  }\n+    Map<String, byte[]> checkSumByFile = new HashMap<>();\n \n-  private void checkGeneratedFilesConsistency(File[] generatedFiles1, File[] generatedFiles2) throws IOException\n-  {\n-    Assert.assertEquals(generatedFiles1.length, generatedFiles2.length);\n-    for (int i = 0; i < generatedFiles1.length; i++)\n+    Arrays.stream(generatedFiles).forEach(file ->\n     {\n-      Assert.assertTrue(compareTwoFiles(generatedFiles1[i], generatedFiles2[i]));\n-    }\n-  }\n-\n-  private boolean compareTwoFiles(File file1, File file2) throws IOException\n-  {\n-    byte[] content1 = Files.readAllBytes(file1.toPath());\n-    byte[] content2 = Files.readAllBytes(file2.toPath());\n-    return Arrays.equals(content1, content2);\n+      try\n+      {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(Files.readAllBytes(file.toPath()));\n+        checkSumByFile.put(file.getName(), md.digest());\n+      }\n+      catch (NoSuchAlgorithmException e)\n+      {\n+        throw new RuntimeException(\"MessageDigest module does not have MD5 algorithm\");\n+      }\n+      catch (IOException e)\n+      {\n+        throw new RuntimeException(\"Can't read generated data template file \" + file.getName());\n+      }\n+    });\n+    File[] expectedFiles = new File[4];\n+    expectedFiles[0] = new File(pegasusDirGenerated + FS + \"IsoDuration.java\");\n+    expectedFiles[1] = new File(pegasusDirGenerated + FS + \"PremiumService.java\");\n+    expectedFiles[2] = new File(pegasusDirGenerated + FS + \"PremiumServiceState.java\");\n+    expectedFiles[3] = new File(pegasusDirGenerated + FS + \"AccountBalanceType.java\");\n+    Arrays.stream(expectedFiles).forEach(file ->\n+    {\n+      try\n+      {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(Files.readAllBytes(file.toPath()));\n+        byte[] digests = md.digest();\n+        Assert.assertTrue(checkSumByFile.containsKey(file.getName()));\n+        Assert.assertEquals(checkSumByFile.get(file.getName()), digests);\n+      }\n+      catch (NoSuchAlgorithmException e)\n+      {\n+        throw new RuntimeException(\"MessageDigest module does not have MD5 algorithm\");\n+      }\n+      catch (IOException e)\n+      {\n+        throw new RuntimeException(\"Can't read generated data template file \" + file.getName());\n+      }\n+    });\n+    Assert.assertEquals(expectedFiles.length, generatedFiles.length);\n   }\n }\n"}}, {"oid": "016da33797fa463c9ce9fb775a47c325a0613dff", "url": "https://github.com/linkedin/rest.li/commit/016da33797fa463c9ce9fb775a47c325a0613dff", "message": "Fix the non-deterministic issue by sorting source schema files everytime", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "abca9456c31005b6e1c60fd2d2b8e47989549052", "url": "https://github.com/linkedin/rest.li/commit/abca9456c31005b6e1c60fd2d2b8e47989549052", "message": "Add inline record test and PDL typed file test", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "463e56c9d71ee87129ad4e63e2863afa7d7db1be", "url": "https://github.com/linkedin/rest.li/commit/463e56c9d71ee87129ad4e63e2863afa7d7db1be", "message": "address comment regarding test code logic and make it clear", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "c5937fa473d49241c13c6f0e9e4b50547658b75b", "url": "https://github.com/linkedin/rest.li/commit/c5937fa473d49241c13c6f0e9e4b50547658b75b", "message": "address comment for no new line at end of file", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "5326383483d6aaa1d338dec43d5f905382041fbf", "url": "https://github.com/linkedin/rest.li/commit/5326383483d6aaa1d338dec43d5f905382041fbf", "message": "Change test function naming for clarity to address comment", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "ce400abfd211d14705faf3eb34a45065bed1e02c", "url": "https://github.com/linkedin/rest.li/commit/ce400abfd211d14705faf3eb34a45065bed1e02c", "message": "Addressing comment to have better test case arrangement and address other test case failures", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "a7c38f77439154b4ee96907657964fb592c5393d", "url": "https://github.com/linkedin/rest.li/commit/a7c38f77439154b4ee96907657964fb592c5393d", "message": "Addressing Karthik's comment", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "7a17a5eaadc399c865d4feeb81cc89f23ead78a5", "url": "https://github.com/linkedin/rest.li/commit/7a17a5eaadc399c865d4feeb81cc89f23ead78a5", "message": "Addressing comment and fix bug for generated files in the same dir", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "9f498a017197a6847d29edb34500040177dfccd4", "url": "https://github.com/linkedin/rest.li/commit/9f498a017197a6847d29edb34500040177dfccd4", "message": "Address all comments and made sure if the fix is not in place the test case will fail", "committedDate": "2020-06-12T02:43:26Z", "type": "commit"}, {"oid": "16304caa56054ac353f560c931d8e898a7210aff", "url": "https://github.com/linkedin/rest.li/commit/16304caa56054ac353f560c931d8e898a7210aff", "message": "Make naming of test data properly", "committedDate": "2020-06-12T03:22:34Z", "type": "forcePushed"}, {"oid": "1695bd26d47707899ad4d1d76d09e87579168d57", "url": "https://github.com/linkedin/rest.li/commit/1695bd26d47707899ad4d1d76d09e87579168d57", "message": "Make naming of test data properly", "committedDate": "2020-06-12T06:37:27Z", "type": "commit"}, {"oid": "1695bd26d47707899ad4d1d76d09e87579168d57", "url": "https://github.com/linkedin/rest.li/commit/1695bd26d47707899ad4d1d76d09e87579168d57", "message": "Make naming of test data properly", "committedDate": "2020-06-12T06:37:27Z", "type": "forcePushed"}]}