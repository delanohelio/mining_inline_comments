{"pr_number": 282, "pr_title": "Fixed length encoding support for floats and doubles in protobuf", "pr_createdAt": "2020-05-02T23:37:24Z", "pr_url": "https://github.com/linkedin/rest.li/pull/282", "timeline": [{"oid": "290d0426df4082991c30436f53084a2cc2a84b8a", "url": "https://github.com/linkedin/rest.li/commit/290d0426df4082991c30436f53084a2cc2a84b8a", "message": "Provide an option to serialize floating point values (aka floats and doubles) using fixed size integers.", "committedDate": "2020-05-03T00:01:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNTE1MA==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419025150", "bodyText": "would recommend moving these flags to a Config class and using an instance of it as an argument here. I would avoid this constructor to explode.", "author": "aman1309", "createdAt": "2020-05-03T00:15:09Z", "path": "data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java", "diffHunk": "@@ -78,9 +81,17 @@ public ProtobufDataCodec(SymbolTable symbolTable)\n   }\n \n   public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  {\n+    this(symbolTable, supportsASCIIOnlyStrings, false);\n+  }\n+\n+  public ProtobufDataCodec(SymbolTable symbolTable,\n+      boolean supportsASCIIOnlyStrings,\n+      boolean useFixedLengthEncodingForFloatingPointValues)", "originalCommit": "290d0426df4082991c30436f53084a2cc2a84b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODg4MA==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419138880", "bodyText": "Great idea. I am going to create the config class as a separate top level class in the same package, so that it can be used by your streaming version in the future.", "author": "karthikrg", "createdAt": "2020-05-03T18:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNTE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "2fbe9f8c7db2c1b1b047ec0e3b26d45e8b6b5e69", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java b/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\nindex 1c1b2957a..76be2775f 100644\n--- a/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\n+++ b/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\n\n@@ -65,42 +64,61 @@ public class ProtobufDataCodec implements DataCodec\n   private static final byte FIXED_FLOAT_ORDINAL = 21;\n   private static final byte FIXED_DOUBLE_ORDINAL = 22;\n \n+  /**\n+   * @deprecated Use {@link #_options} and invoke {@link ProtobufCodecOptions#getSymbolTable()} instead.\n+   */\n+  @Deprecated\n   protected final SymbolTable _symbolTable;\n \n+  /**\n+   * @deprecated Use {@link #_options} and invoke {@link ProtobufCodecOptions#shouldEnableASCIIOnlyStrings()} instead.\n+   */\n+  @Deprecated\n   protected final boolean _supportsASCIIOnlyStrings;\n-  protected final boolean _useFixedLengthEncodingForFloatingPointValues;\n \n-  public ProtobufDataCodec()\n-  {\n-    this((SymbolTable) null);\n-  }\n+  protected final ProtobufCodecOptions _options;\n \n-  public ProtobufDataCodec(SymbolTable symbolTable)\n+  public ProtobufDataCodec()\n   {\n-    this(symbolTable, false);\n+    this(new ProtobufCodecOptions.Builder().build());\n   }\n \n-  public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  /**\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead. This constructor\n+   * ignores its argument.\n+   */\n+  @Deprecated\n+  public ProtobufDataCodec(String symbolTableName)\n   {\n-    this(symbolTable, supportsASCIIOnlyStrings, false);\n+    this(new ProtobufCodecOptions.Builder().build());\n   }\n \n-  public ProtobufDataCodec(SymbolTable symbolTable,\n-      boolean supportsASCIIOnlyStrings,\n-      boolean useFixedLengthEncodingForFloatingPointValues)\n+  /**\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead.\n+   */\n+  @Deprecated\n+  public ProtobufDataCodec(SymbolTable symbolTable)\n   {\n-    _symbolTable = symbolTable == null ? EmptySymbolTable.SHARED : symbolTable;\n-    _supportsASCIIOnlyStrings = supportsASCIIOnlyStrings;\n-    _useFixedLengthEncodingForFloatingPointValues = useFixedLengthEncodingForFloatingPointValues;\n+    this(new ProtobufCodecOptions.Builder().setSymbolTable(symbolTable).build());\n   }\n \n   /**\n-   * @deprecated Use {@link #ProtobufDataCodec(SymbolTable)} instead. This constructor ignores its argument.\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead.\n    */\n   @Deprecated\n-  public ProtobufDataCodec(String symbolTableName)\n+  public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  {\n+    this(new ProtobufCodecOptions.Builder()\n+        .setSymbolTable(symbolTable)\n+        .setEnableASCIIOnlyStrings(supportsASCIIOnlyStrings)\n+        .build());\n+  }\n+\n+  public ProtobufDataCodec(ProtobufCodecOptions options)\n   {\n-    this((SymbolTable) null);\n+    _options = options;\n+    _symbolTable = options.getSymbolTable();\n+    _supportsASCIIOnlyStrings = options.shouldEnableASCIIOnlyStrings();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNTI0NA==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419025244", "bodyText": "deprecate this if using config class as argument", "author": "aman1309", "createdAt": "2020-05-03T00:16:29Z", "path": "data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java", "diffHunk": "@@ -78,9 +81,17 @@ public ProtobufDataCodec(SymbolTable symbolTable)\n   }\n \n   public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)", "originalCommit": "290d0426df4082991c30436f53084a2cc2a84b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fbe9f8c7db2c1b1b047ec0e3b26d45e8b6b5e69", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java b/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\nindex 1c1b2957a..76be2775f 100644\n--- a/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\n+++ b/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\n\n@@ -65,42 +64,61 @@ public class ProtobufDataCodec implements DataCodec\n   private static final byte FIXED_FLOAT_ORDINAL = 21;\n   private static final byte FIXED_DOUBLE_ORDINAL = 22;\n \n+  /**\n+   * @deprecated Use {@link #_options} and invoke {@link ProtobufCodecOptions#getSymbolTable()} instead.\n+   */\n+  @Deprecated\n   protected final SymbolTable _symbolTable;\n \n+  /**\n+   * @deprecated Use {@link #_options} and invoke {@link ProtobufCodecOptions#shouldEnableASCIIOnlyStrings()} instead.\n+   */\n+  @Deprecated\n   protected final boolean _supportsASCIIOnlyStrings;\n-  protected final boolean _useFixedLengthEncodingForFloatingPointValues;\n \n-  public ProtobufDataCodec()\n-  {\n-    this((SymbolTable) null);\n-  }\n+  protected final ProtobufCodecOptions _options;\n \n-  public ProtobufDataCodec(SymbolTable symbolTable)\n+  public ProtobufDataCodec()\n   {\n-    this(symbolTable, false);\n+    this(new ProtobufCodecOptions.Builder().build());\n   }\n \n-  public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  /**\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead. This constructor\n+   * ignores its argument.\n+   */\n+  @Deprecated\n+  public ProtobufDataCodec(String symbolTableName)\n   {\n-    this(symbolTable, supportsASCIIOnlyStrings, false);\n+    this(new ProtobufCodecOptions.Builder().build());\n   }\n \n-  public ProtobufDataCodec(SymbolTable symbolTable,\n-      boolean supportsASCIIOnlyStrings,\n-      boolean useFixedLengthEncodingForFloatingPointValues)\n+  /**\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead.\n+   */\n+  @Deprecated\n+  public ProtobufDataCodec(SymbolTable symbolTable)\n   {\n-    _symbolTable = symbolTable == null ? EmptySymbolTable.SHARED : symbolTable;\n-    _supportsASCIIOnlyStrings = supportsASCIIOnlyStrings;\n-    _useFixedLengthEncodingForFloatingPointValues = useFixedLengthEncodingForFloatingPointValues;\n+    this(new ProtobufCodecOptions.Builder().setSymbolTable(symbolTable).build());\n   }\n \n   /**\n-   * @deprecated Use {@link #ProtobufDataCodec(SymbolTable)} instead. This constructor ignores its argument.\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead.\n    */\n   @Deprecated\n-  public ProtobufDataCodec(String symbolTableName)\n+  public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  {\n+    this(new ProtobufCodecOptions.Builder()\n+        .setSymbolTable(symbolTable)\n+        .setEnableASCIIOnlyStrings(supportsASCIIOnlyStrings)\n+        .build());\n+  }\n+\n+  public ProtobufDataCodec(ProtobufCodecOptions options)\n   {\n-    this((SymbolTable) null);\n+    _options = options;\n+    _symbolTable = options.getSymbolTable();\n+    _supportsASCIIOnlyStrings = options.shouldEnableASCIIOnlyStrings();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyODE5Mw==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419028193", "bodyText": "this will again be a new content type? that change is will be followed by this one?", "author": "aman1309", "createdAt": "2020-05-03T00:52:07Z", "path": "data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java", "diffHunk": "@@ -62,10 +62,13 @@\n   private static final byte RAW_BYTES_ORDINAL = 10;\n   private static final byte NULL_ORDINAL = 11;\n   private static final byte ASCII_STRING_LITERAL_ORDINAL = 20;\n+  private static final byte FIXED_FLOAT_ORDINAL = 21;\n+  private static final byte FIXED_DOUBLE_ORDINAL = 22;\n \n   protected final SymbolTable _symbolTable;\n \n   protected final boolean _supportsASCIIOnlyStrings;\n+  protected final boolean _useFixedLengthEncodingForFloatingPointValues;", "originalCommit": "290d0426df4082991c30436f53084a2cc2a84b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzOTIxMw==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419139213", "bodyText": "No. As I mentioned in the summary, the choice of using zigzag is the sensible default in most cases.\nFor the tensor use cases, they often need more control over encoding (for example encoding indices using run length encoding etc.) so they extend ProtobufDataCodec and create application specific custom content types.\nGiven this, I am inclined to not create a new content type in rest.li for this now, and revisit in the future, if this becomes more of a generic requirement.\nThis mirrors what we are doing for PSON today, where some of the options like encode string length and collection length are disabled by default, and are enabled in extensions of PSON in some applications with injected application specific custom content types.", "author": "karthikrg", "createdAt": "2020-05-03T18:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyODE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2fbe9f8c7db2c1b1b047ec0e3b26d45e8b6b5e69", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java b/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\nindex 1c1b2957a..76be2775f 100644\n--- a/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\n+++ b/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\n\n@@ -65,42 +64,61 @@ public class ProtobufDataCodec implements DataCodec\n   private static final byte FIXED_FLOAT_ORDINAL = 21;\n   private static final byte FIXED_DOUBLE_ORDINAL = 22;\n \n+  /**\n+   * @deprecated Use {@link #_options} and invoke {@link ProtobufCodecOptions#getSymbolTable()} instead.\n+   */\n+  @Deprecated\n   protected final SymbolTable _symbolTable;\n \n+  /**\n+   * @deprecated Use {@link #_options} and invoke {@link ProtobufCodecOptions#shouldEnableASCIIOnlyStrings()} instead.\n+   */\n+  @Deprecated\n   protected final boolean _supportsASCIIOnlyStrings;\n-  protected final boolean _useFixedLengthEncodingForFloatingPointValues;\n \n-  public ProtobufDataCodec()\n-  {\n-    this((SymbolTable) null);\n-  }\n+  protected final ProtobufCodecOptions _options;\n \n-  public ProtobufDataCodec(SymbolTable symbolTable)\n+  public ProtobufDataCodec()\n   {\n-    this(symbolTable, false);\n+    this(new ProtobufCodecOptions.Builder().build());\n   }\n \n-  public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  /**\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead. This constructor\n+   * ignores its argument.\n+   */\n+  @Deprecated\n+  public ProtobufDataCodec(String symbolTableName)\n   {\n-    this(symbolTable, supportsASCIIOnlyStrings, false);\n+    this(new ProtobufCodecOptions.Builder().build());\n   }\n \n-  public ProtobufDataCodec(SymbolTable symbolTable,\n-      boolean supportsASCIIOnlyStrings,\n-      boolean useFixedLengthEncodingForFloatingPointValues)\n+  /**\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead.\n+   */\n+  @Deprecated\n+  public ProtobufDataCodec(SymbolTable symbolTable)\n   {\n-    _symbolTable = symbolTable == null ? EmptySymbolTable.SHARED : symbolTable;\n-    _supportsASCIIOnlyStrings = supportsASCIIOnlyStrings;\n-    _useFixedLengthEncodingForFloatingPointValues = useFixedLengthEncodingForFloatingPointValues;\n+    this(new ProtobufCodecOptions.Builder().setSymbolTable(symbolTable).build());\n   }\n \n   /**\n-   * @deprecated Use {@link #ProtobufDataCodec(SymbolTable)} instead. This constructor ignores its argument.\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead.\n    */\n   @Deprecated\n-  public ProtobufDataCodec(String symbolTableName)\n+  public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  {\n+    this(new ProtobufCodecOptions.Builder()\n+        .setSymbolTable(symbolTable)\n+        .setEnableASCIIOnlyStrings(supportsASCIIOnlyStrings)\n+        .build());\n+  }\n+\n+  public ProtobufDataCodec(ProtobufCodecOptions options)\n   {\n-    this((SymbolTable) null);\n+    _options = options;\n+    _symbolTable = options.getSymbolTable();\n+    _supportsASCIIOnlyStrings = options.shouldEnableASCIIOnlyStrings();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTYzNw==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419031637", "bodyText": "do we need this? writing size can be skipped here right? same with int64", "author": "aman1309", "createdAt": "2020-05-03T01:32:35Z", "path": "li-protobuf/src/main/java/com/linkedin/data/protobuf/ProtoWriter.java", "diffHunk": "@@ -137,7 +139,19 @@ public void writeBytes(byte[] value, int offset, int length) throws IOException\n   }\n \n   /**\n-   * Write a 32-bit signed integer.\n+   * Write a fixed length 32-bit signed integer.\n+   */\n+  public final void writeFixedInt32(final int value) throws IOException\n+  {\n+    flushIfNotAvailable(FIXED32_SIZE);", "originalCommit": "290d0426df4082991c30436f53084a2cc2a84b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzOTM1NQ==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419139355", "bodyText": "We are not writing size here. We are flushing the buffer if needed and making sure that at least 4 bytes in the case of int and 8 bytes in the case of double are available to write in the buffer.", "author": "karthikrg", "createdAt": "2020-05-03T18:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTYzNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTkwNw==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419031907", "bodyText": "can you rename this to something shorter? like useFixedFloatDouble or useFixedDecimalValue etc", "author": "aman1309", "createdAt": "2020-05-03T01:36:12Z", "path": "data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java", "diffHunk": "@@ -62,10 +62,13 @@\n   private static final byte RAW_BYTES_ORDINAL = 10;\n   private static final byte NULL_ORDINAL = 11;\n   private static final byte ASCII_STRING_LITERAL_ORDINAL = 20;\n+  private static final byte FIXED_FLOAT_ORDINAL = 21;\n+  private static final byte FIXED_DOUBLE_ORDINAL = 22;\n \n   protected final SymbolTable _symbolTable;\n \n   protected final boolean _supportsASCIIOnlyStrings;\n+  protected final boolean _useFixedLengthEncodingForFloatingPointValues;", "originalCommit": "290d0426df4082991c30436f53084a2cc2a84b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1MTM4MQ==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419151381", "bodyText": "Done", "author": "karthikrg", "createdAt": "2020-05-03T19:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "2fbe9f8c7db2c1b1b047ec0e3b26d45e8b6b5e69", "chunk": "diff --git a/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java b/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\nindex 1c1b2957a..76be2775f 100644\n--- a/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\n+++ b/data/src/main/java/com/linkedin/data/codec/ProtobufDataCodec.java\n\n@@ -65,42 +64,61 @@ public class ProtobufDataCodec implements DataCodec\n   private static final byte FIXED_FLOAT_ORDINAL = 21;\n   private static final byte FIXED_DOUBLE_ORDINAL = 22;\n \n+  /**\n+   * @deprecated Use {@link #_options} and invoke {@link ProtobufCodecOptions#getSymbolTable()} instead.\n+   */\n+  @Deprecated\n   protected final SymbolTable _symbolTable;\n \n+  /**\n+   * @deprecated Use {@link #_options} and invoke {@link ProtobufCodecOptions#shouldEnableASCIIOnlyStrings()} instead.\n+   */\n+  @Deprecated\n   protected final boolean _supportsASCIIOnlyStrings;\n-  protected final boolean _useFixedLengthEncodingForFloatingPointValues;\n \n-  public ProtobufDataCodec()\n-  {\n-    this((SymbolTable) null);\n-  }\n+  protected final ProtobufCodecOptions _options;\n \n-  public ProtobufDataCodec(SymbolTable symbolTable)\n+  public ProtobufDataCodec()\n   {\n-    this(symbolTable, false);\n+    this(new ProtobufCodecOptions.Builder().build());\n   }\n \n-  public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  /**\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead. This constructor\n+   * ignores its argument.\n+   */\n+  @Deprecated\n+  public ProtobufDataCodec(String symbolTableName)\n   {\n-    this(symbolTable, supportsASCIIOnlyStrings, false);\n+    this(new ProtobufCodecOptions.Builder().build());\n   }\n \n-  public ProtobufDataCodec(SymbolTable symbolTable,\n-      boolean supportsASCIIOnlyStrings,\n-      boolean useFixedLengthEncodingForFloatingPointValues)\n+  /**\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead.\n+   */\n+  @Deprecated\n+  public ProtobufDataCodec(SymbolTable symbolTable)\n   {\n-    _symbolTable = symbolTable == null ? EmptySymbolTable.SHARED : symbolTable;\n-    _supportsASCIIOnlyStrings = supportsASCIIOnlyStrings;\n-    _useFixedLengthEncodingForFloatingPointValues = useFixedLengthEncodingForFloatingPointValues;\n+    this(new ProtobufCodecOptions.Builder().setSymbolTable(symbolTable).build());\n   }\n \n   /**\n-   * @deprecated Use {@link #ProtobufDataCodec(SymbolTable)} instead. This constructor ignores its argument.\n+   * @deprecated Use {@link ProtobufDataCodec#ProtobufDataCodec(ProtobufCodecOptions)} instead.\n    */\n   @Deprecated\n-  public ProtobufDataCodec(String symbolTableName)\n+  public ProtobufDataCodec(SymbolTable symbolTable, boolean supportsASCIIOnlyStrings)\n+  {\n+    this(new ProtobufCodecOptions.Builder()\n+        .setSymbolTable(symbolTable)\n+        .setEnableASCIIOnlyStrings(supportsASCIIOnlyStrings)\n+        .build());\n+  }\n+\n+  public ProtobufDataCodec(ProtobufCodecOptions options)\n   {\n-    this((SymbolTable) null);\n+    _options = options;\n+    _symbolTable = options.getSymbolTable();\n+    _supportsASCIIOnlyStrings = options.shouldEnableASCIIOnlyStrings();\n   }\n \n   @Override\n"}}, {"oid": "2fbe9f8c7db2c1b1b047ec0e3b26d45e8b6b5e69", "url": "https://github.com/linkedin/rest.li/commit/2fbe9f8c7db2c1b1b047ec0e3b26d45e8b6b5e69", "message": "Provide an option to serialize floating point values (aka floats and doubles) using fixed size integers.", "committedDate": "2020-05-03T19:53:20Z", "type": "forcePushed"}, {"oid": "f8fd40a44c84432d5cd3c4f78a3313737b144f5c", "url": "https://github.com/linkedin/rest.li/commit/f8fd40a44c84432d5cd3c4f78a3313737b144f5c", "message": "Provide an option to serialize floating point values (aka floats and doubles) using fixed size integers.", "committedDate": "2020-05-04T22:01:18Z", "type": "commit"}, {"oid": "f8fd40a44c84432d5cd3c4f78a3313737b144f5c", "url": "https://github.com/linkedin/rest.li/commit/f8fd40a44c84432d5cd3c4f78a3313737b144f5c", "message": "Provide an option to serialize floating point values (aka floats and doubles) using fixed size integers.", "committedDate": "2020-05-04T22:01:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNjg4MA==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419026880", "bodyText": "What does this condition mean? this readFixedInt32 is not supposed to be invoked? So it is malformat?", "author": "mchen07", "createdAt": "2020-05-03T00:36:19Z", "path": "li-protobuf/src/main/java/com/linkedin/data/protobuf/ByteArrayReader.java", "diffHunk": "@@ -275,6 +275,36 @@ else if ((x ^= ((long) buffer[tempPos++] << 49)) < 0L)\n     return readRawVarint64SlowPath();\n   }\n \n+  @Override\n+  public int readFixedInt32() throws IOException\n+  {\n+    if (_limit - _pos < ProtoWriter.FIXED32_SIZE) {", "originalCommit": "290d0426df4082991c30436f53084a2cc2a84b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg2ODUyNg==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419868526", "bodyText": "This condition means: Does that buffer have at least 4 bytes remaining. Else error out.", "author": "karthikrg", "createdAt": "2020-05-05T05:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNjg4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNzE3Ng==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419027176", "bodyText": "so for unsigned integer, you don't need to fixed size version?", "author": "mchen07", "createdAt": "2020-05-03T00:40:01Z", "path": "li-protobuf/src/main/java/com/linkedin/data/protobuf/ProtoWriter.java", "diffHunk": "@@ -211,7 +241,7 @@ private void flushIfNotAvailable(int requiredSize) throws IOException\n   }\n \n   /**\n-   * Write a 32-bit unsigned integer.\n+   * Write a variable length 32-bit unsigned integer.\n    */\n   public void writeUInt32(int value) throws IOException", "originalCommit": "290d0426df4082991c30436f53084a2cc2a84b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg2ODY5Mg==", "url": "https://github.com/linkedin/rest.li/pull/282#discussion_r419868692", "bodyText": "No need so far, since we are using the fixed variants for long and double.", "author": "karthikrg", "createdAt": "2020-05-05T05:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNzE3Ng=="}], "type": "inlineReview", "revised_code": null}]}