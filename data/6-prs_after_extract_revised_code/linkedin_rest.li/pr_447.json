{"pr_number": 447, "pr_title": "Fix the bug so properties for typeref in unionWithAlias should be pro\u2026", "pr_createdAt": "2020-10-15T04:44:53Z", "pr_url": "https://github.com/linkedin/rest.li/pull/447", "timeline": [{"oid": "5395a5428b79b6e22f22ff8624eef3a239a66d0b", "url": "https://github.com/linkedin/rest.li/commit/5395a5428b79b6e22f22ff8624eef3a239a66d0b", "message": "Fix the bug so properties for typeref in unionWithAlias should be propagated during pegasus to avro\ntranslation", "committedDate": "2020-10-15T04:43:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NDI0Mw==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505164243", "bodyText": "Can you please update the javadoc for this new param?", "author": "nickibi", "createdAt": "2020-10-15T04:58:38Z", "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -180,7 +187,7 @@ private DataSchema modifyFieldSchema(RecordDataSchema recordSchema, RecordDataSc\n    * @param modifiedDefaultValue The override default value to use for the specified field\n    */", "originalCommit": "5395a5428b79b6e22f22ff8624eef3a239a66d0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2ODg1Nw==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505168857", "bodyText": "Can you please add some description about this bug fix?\nThis change is overriding the union field property to the propagated property if the union field type is typeref. This is the expected behavior? Could you mind share some context about it?\n\nStill in initial review. Confirming with customer and once confirmed, I will add more description.\nBut for what you mentioned:\n\nThis change is overriding the union field property to the propagated property if the union field type is typeref.\n\nThis is the desired behavior, but before this fix, it won't work with unionWithAlias type. This fix is to address issue", "author": "junchuanwang", "createdAt": "2020-10-15T05:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NDI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "309f679eb8adab01078acf233c3ec81e2d22ba45", "chunk": "diff --git a/data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java b/data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java\nindex f18e457ec..cee317270 100644\n--- a/data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java\n+++ b/data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java\n\n@@ -185,6 +187,7 @@ class PegasusUnionToAvroRecordConvertCallback implements DataSchemaTraverse.Call\n    * @param field Reference to the field whose schema and default value is being overridden\n    * @param modifiedSchema The override schema to use for the specified field\n    * @param modifiedDefaultValue The override default value to use for the specified field\n+   * @param propagatedProperties The properties value to use for the specified field\n    */\n   private void overrideUnionFieldSchemaAndDefault(RecordDataSchema.Field field,\n       DataSchema modifiedSchema, Object modifiedDefaultValue, Map<String, Object> propagatedProperties)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NDU2Nw==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505164567", "bodyText": "nit: extra line after previous method.", "author": "nickibi", "createdAt": "2020-10-15T04:59:40Z", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -69,6 +69,217 @@ public void testTranslateDefaultBackwardsCompatibility()\n \n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n+  @DataProvider", "originalCommit": "5395a5428b79b6e22f22ff8624eef3a239a66d0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2OTM4NA==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505169384", "bodyText": "Will do", "author": "junchuanwang", "createdAt": "2020-10-15T05:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NDU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "309f679eb8adab01078acf233c3ec81e2d22ba45", "chunk": "diff --git a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\nindex 663aaf192..24b7414a6 100644\n--- a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n+++ b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n\n@@ -69,8 +69,9 @@ public class TestSchemaTranslator\n \n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n+\n   @DataProvider\n-  public Object[][] toAvroSchemaData_testTypeRefAnnotationPropagationUnionWithAlias()\n+  public Object[][] toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias()\n   {\n     return new Object[][]\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NTc2OQ==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505165769", "bodyText": "Can you please update the test method name to camelcase to follow the method naming style?\nSame as data provider name.", "author": "nickibi", "createdAt": "2020-10-15T05:04:31Z", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -322,6 +533,20 @@ public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBefor\n    assertEquals(fieldsPropertiesMap, avroSchemaAsDataMap);\n  }\n \n+  @Test(dataProvider = \"toAvroSchemaData_testTypeRefAnnotationPropagation\")\n+  public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBeforeTranslation,", "originalCommit": "5395a5428b79b6e22f22ff8624eef3a239a66d0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2OTM4OQ==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505169389", "bodyText": "Will do", "author": "junchuanwang", "createdAt": "2020-10-15T05:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NTc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4Mjk0Nw==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505682947", "bodyText": "It still has '_'", "author": "nickibi", "createdAt": "2020-10-15T16:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NTc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyODY0Mg==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r507928642", "bodyText": "corrected", "author": "junchuanwang", "createdAt": "2020-10-19T17:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NTc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "309f679eb8adab01078acf233c3ec81e2d22ba45", "chunk": "diff --git a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\nindex 663aaf192..24b7414a6 100644\n--- a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n+++ b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n\n@@ -533,7 +534,7 @@ public class TestSchemaTranslator\n    assertEquals(fieldsPropertiesMap, avroSchemaAsDataMap);\n  }\n \n-  @Test(dataProvider = \"toAvroSchemaData_testTypeRefAnnotationPropagation\")\n+  @Test(dataProvider = \"toAvroSchemaDataTestTypeRefAnnotationPropagation\")\n   public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBeforeTranslation,\n       String expectedAvroSchemaAsString) throws Exception\n   {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2NzczMA==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505167730", "bodyText": "Please add comment to explain this specific use case.", "author": "nickibi", "createdAt": "2020-10-15T05:11:48Z", "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -62,6 +63,12 @@ public void callback(List<String> path, DataSchema schema)\n     {\n       DataSchema fieldSchema = field.getType().getDereferencedDataSchema();\n \n+      Map<String, Object>  propagatedProperties = new HashMap<>();", "originalCommit": "5395a5428b79b6e22f22ff8624eef3a239a66d0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "309f679eb8adab01078acf233c3ec81e2d22ba45", "chunk": "diff --git a/data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java b/data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java\nindex f18e457ec..cee317270 100644\n--- a/data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java\n+++ b/data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java\n\n@@ -63,9 +63,11 @@ class PegasusUnionToAvroRecordConvertCallback implements DataSchemaTraverse.Call\n     {\n       DataSchema fieldSchema = field.getType().getDereferencedDataSchema();\n \n-      Map<String, Object>  propagatedProperties = new HashMap<>();\n+      Map<String, Object>  propagatedProperties = fieldSchema.getProperties();\n       if (field.getType().getType() == DataSchema.Type.TYPEREF)\n       {\n+        // If the field schema type is TypeRef,\n+        // then use the merged typeref properties instead\n         propagatedProperties = ((TyperefDataSchema) field.getType()).getMergedTyperefProperties();\n       }\n \n"}}, {"oid": "309f679eb8adab01078acf233c3ec81e2d22ba45", "url": "https://github.com/linkedin/rest.li/commit/309f679eb8adab01078acf233c3ec81e2d22ba45", "message": "Address yingjie's comments", "committedDate": "2020-10-15T05:24:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODI4OA==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505368288", "bodyText": "Suggest to put these test data in a file, and leave the path/file name here for the test function, and then read the file during test, this way, it is easy to see the test data clear and if we want to change it is also easy to change", "author": "BrianPin", "createdAt": "2020-10-15T08:55:26Z", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -70,8 +70,220 @@ public void testTranslateDefaultBackwardsCompatibility()\n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n \n+  @DataProvider\n+  public Object[][] toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                \"record test {\" +", "originalCommit": "309f679eb8adab01078acf233c3ec81e2d22ba45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3MTYyOQ==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505371629", "bodyText": "I believe new tests in Pegasus are already written using the conversion you mentioned\nTBH in order to achieve that in this particular file, maybe it is same as we discussed today: SchemaTranslator need to be rewritten and gradually migrated all the functionality.", "author": "junchuanwang", "createdAt": "2020-10-15T08:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxMzQ4NA==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505713484", "bodyText": "I think what Brian suggested was using pdl file(path) as input. You can use TestUtil#dataSchemaFromPdlInputStream(getClass().getResourceAsStream()) to get the DataSchema. It will be better than writing pdl string in the test class.\nHowever, for your test case, you still need avroschema as expected result. You may still end up writing avro schema string.", "author": "nickibi", "createdAt": "2020-10-15T17:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDE0MQ==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r507924141", "bodyText": "I understood what Brian meant, but that is really impractical since that file included a lot of (small) tests", "author": "junchuanwang", "createdAt": "2020-10-19T17:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "606bab99666a87de3924b46d89e7761027c42e29", "chunk": "diff --git a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\nindex 24b7414a6..780e1d635 100644\n--- a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n+++ b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n\n@@ -75,161 +75,217 @@ public class TestSchemaTranslator\n   {\n     return new Object[][]\n         {\n+//            {\n+//                \"record test {\" +\n+//                    \"  unionTyperef:\" +\n+//                    \"  @compliance = {\" +\n+//                    \"    \\\"/string\\\": \\\"NONE\\\"\" +\n+//                    \"  }\" +\n+//                    \"  typeref unionRefNoAlias =\" +\n+//                    \"  union[int, string]\" +\n+//                    \"}\",\n+//                \"{\" +\n+//                    \"    \\\"type\\\": \\\"record\\\",\" +\n+//                    \"    \\\"name\\\": \\\"test\\\",\" +\n+//                    \"    \\\"fields\\\": [\" +\n+//                    \"        {\" +\n+//                    \"            \\\"name\\\": \\\"unionTyperef\\\",\" +\n+//                    \"            \\\"type\\\": [\" +\n+//                    \"                \\\"int\\\",\" +\n+//                    \"                \\\"string\\\"\" +\n+//                    \"            ],\" +\n+//                    \"            \\\"compliance\\\": {\" +\n+//                    \"                \\\"/string\\\": \\\"NONE\\\"\" +\n+//                    \"            }\" +\n+//                    \"        }\" +\n+//                    \"    ]\" +\n+//                    \"}\"\n+//            },\n+//            {\n+//                \"record test {\" +\n+//                    \"  unionTyperef:\" +\n+//                    \"  @compliance = {\" +\n+//                    \"    \\\"/*/f1\\\": \\\"NONE\\\"\" +\n+//                    \"  }\" +\n+//                    \"  typeref arrayToUnionWithAlias = array[\" +\n+//                    \"  union[f1:int, f2:string]\" +\n+//                    \"  ]\" +\n+//                    \"}\",\n+//                \"{\" +\n+//                    \"    \\\"type\\\": \\\"record\\\",\" +\n+//                    \"    \\\"name\\\": \\\"test\\\",\" +\n+//                    \"    \\\"fields\\\": [\" +\n+//                    \"        {\" +\n+//                    \"            \\\"name\\\": \\\"unionTyperef\\\",\" +\n+//                    \"            \\\"type\\\": {\" +\n+//                    \"                \\\"type\\\": \\\"array\\\",\" +\n+//                    \"                \\\"items\\\": {\" +\n+//                    \"                    \\\"type\\\": \\\"record\\\",\" +\n+//                    \"                    \\\"name\\\": \\\"testUnionTyperef\\\",\" +\n+//                    \"                    \\\"fields\\\": [\" +\n+//                    \"                        {\" +\n+//                    \"                            \\\"name\\\": \\\"f1\\\",\" +\n+//                    \"                            \\\"type\\\": [\" +\n+//                    \"                                \\\"null\\\",\" +\n+//                    \"                                \\\"int\\\"\" +\n+//                    \"                            ],\" +\n+//                    \"                            \\\"default\\\": null\" +\n+//                    \"                        },\" +\n+//                    \"                        {\" +\n+//                    \"                            \\\"name\\\": \\\"f2\\\",\" +\n+//                    \"                            \\\"type\\\": [\" +\n+//                    \"                                \\\"null\\\",\" +\n+//                    \"                                \\\"string\\\"\" +\n+//                    \"                            ],\" +\n+//                    \"                            \\\"default\\\": null\" +\n+//                    \"                        },\" +\n+//                    \"                        {\" +\n+//                    \"                            \\\"name\\\": \\\"fieldDiscriminator\\\",\" +\n+//                    \"                            \\\"type\\\": {\" +\n+//                    \"                                \\\"type\\\": \\\"enum\\\",\" +\n+//                    \"                                \\\"name\\\": \\\"testUnionTyperefDiscriminator\\\",\" +\n+//                    \"                                \\\"symbols\\\": [\" +\n+//                    \"                                    \\\"f1\\\",\" +\n+//                    \"                                    \\\"f2\\\"\" +\n+//                    \"                                ]\" +\n+//                    \"                            },\" +\n+//                    \"                            \\\"doc\\\": \\\"Contains the name of the field that has its value set.\\\"\" +\n+//                    \"                        }\" +\n+//                    \"                    ]\" +\n+//                    \"                }\" +\n+//                    \"            },\" +\n+//                    \"            \\\"compliance\\\": {\" +\n+//                    \"                \\\"/*/f1\\\": \\\"NONE\\\"\" +\n+//                    \"            }\" +\n+//                    \"        }\" +\n+//                    \"    ]\" +\n+//                    \"}\"\n+//            },\n+//            {\n+//                \"record test {\" +\n+//                    \"  unionTyperef:\" +\n+//                    \"  @compliance = {\" +\n+//                    \"    \\\"/$key\\\": \\\"None\\\",\" +\n+//                    \"    \\\"/*/f1\\\": \\\"NONE\\\"\" +\n+//                    \"  }\" +\n+//                    \"  typeref unionRefNoAlias = map[string, \" +\n+//                    \"  union[f1:int, f2:string]\" +\n+//                    \"  ]\" +\n+//                    \"}\",\n+//                \"{\" +\n+//                    \"    \\\"type\\\": \\\"record\\\",\" +\n+//                    \"    \\\"name\\\": \\\"test\\\",\" +\n+//                    \"    \\\"fields\\\": [\" +\n+//                    \"        {\" +\n+//                    \"            \\\"name\\\": \\\"unionTyperef\\\",\" +\n+//                    \"            \\\"type\\\": {\" +\n+//                    \"                \\\"type\\\": \\\"map\\\",\" +\n+//                    \"                \\\"values\\\": {\" +\n+//                    \"                    \\\"type\\\": \\\"record\\\",\" +\n+//                    \"                    \\\"name\\\": \\\"testUnionTyperef\\\",\" +\n+//                    \"                    \\\"fields\\\": [\" +\n+//                    \"                        {\" +\n+//                    \"                            \\\"name\\\": \\\"f1\\\",\" +\n+//                    \"                            \\\"type\\\": [\" +\n+//                    \"                                \\\"null\\\",\" +\n+//                    \"                                \\\"int\\\"\" +\n+//                    \"                            ],\" +\n+//                    \"                            \\\"default\\\": null\" +\n+//                    \"                        },\" +\n+//                    \"                        {\" +\n+//                    \"                            \\\"name\\\": \\\"f2\\\",\" +\n+//                    \"                            \\\"type\\\": [\" +\n+//                    \"                                \\\"null\\\",\" +\n+//                    \"                                \\\"string\\\"\" +\n+//                    \"                            ],\" +\n+//                    \"                            \\\"default\\\": null\" +\n+//                    \"                        },\" +\n+//                    \"                        {\" +\n+//                    \"                            \\\"name\\\": \\\"fieldDiscriminator\\\",\" +\n+//                    \"                            \\\"type\\\": {\" +\n+//                    \"                                \\\"type\\\": \\\"enum\\\",\" +\n+//                    \"                                \\\"name\\\": \\\"testUnionTyperefDiscriminator\\\",\" +\n+//                    \"                                \\\"symbols\\\": [\" +\n+//                    \"                                    \\\"f1\\\",\" +\n+//                    \"                                    \\\"f2\\\"\" +\n+//                    \"                                ]\" +\n+//                    \"                            },\" +\n+//                    \"                            \\\"doc\\\": \\\"Contains the name of the field that has its value set.\\\"\" +\n+//                    \"                        }\" +\n+//                    \"                    ]\" +\n+//                    \"                }\" +\n+//                    \"            },\" +\n+//                    \"            \\\"compliance\\\": {\" +\n+//                    \"                \\\"/$key\\\": \\\"None\\\",\" +\n+//                    \"                \\\"/*/f1\\\": \\\"NONE\\\"\" +\n+//                    \"            }\" +\n+//                    \"        }\" +\n+//                    \"    ]\" +\n+//                    \"}\"\n+//            },\n+//            {\n+//                \"record test {\" +\n+//                    \"  unionTyperef:\" +\n+//                    \"  @compliance = {\" +\n+//                    \"    \\\"/f1\\\": \\\"NONE\\\"\" +\n+//                    \"  }\" +\n+//                    \"  typeref unionRefWithAlias =\" +\n+//                    \"  union[f1:int, f2:string]\" +\n+//                    \"}\",\n+//                \"{\" +\n+//                    \"    \\\"type\\\": \\\"record\\\",\" +\n+//                    \"    \\\"name\\\": \\\"test\\\",\" +\n+//                    \"    \\\"fields\\\": [\" +\n+//                    \"        {\" +\n+//                    \"            \\\"name\\\": \\\"unionTyperef\\\",\" +\n+//                    \"            \\\"type\\\": {\" +\n+//                    \"                \\\"type\\\": \\\"record\\\",\" +\n+//                    \"                \\\"name\\\": \\\"testUnionTyperef\\\",\" +\n+//                    \"                \\\"fields\\\": [\" +\n+//                    \"                    {\" +\n+//                    \"                        \\\"name\\\": \\\"f1\\\",\" +\n+//                    \"                        \\\"type\\\": [\" +\n+//                    \"                            \\\"null\\\",\" +\n+//                    \"                            \\\"int\\\"\" +\n+//                    \"                        ],\" +\n+//                    \"                        \\\"default\\\": null\" +\n+//                    \"                    },\" +\n+//                    \"                    {\" +\n+//                    \"                        \\\"name\\\": \\\"f2\\\",\" +\n+//                    \"                        \\\"type\\\": [\" +\n+//                    \"                            \\\"null\\\",\" +\n+//                    \"                            \\\"string\\\"\" +\n+//                    \"                        ],\" +\n+//                    \"                        \\\"default\\\": null\" +\n+//                    \"                    },\" +\n+//                    \"                    {\" +\n+//                    \"                        \\\"name\\\": \\\"fieldDiscriminator\\\",\" +\n+//                    \"                        \\\"type\\\": {\" +\n+//                    \"                            \\\"type\\\": \\\"enum\\\",\" +\n+//                    \"                            \\\"name\\\": \\\"testUnionTyperefDiscriminator\\\",\" +\n+//                    \"                            \\\"symbols\\\": [\" +\n+//                    \"                                \\\"f1\\\",\" +\n+//                    \"                                \\\"f2\\\"\" +\n+//                    \"                            ]\" +\n+//                    \"                        },\" +\n+//                    \"                        \\\"doc\\\": \\\"Contains the name of the field that has its value set.\\\"\" +\n+//                    \"                    }\" +\n+//                    \"                ]\" +\n+//                    \"            },\" +\n+//                    \"            \\\"compliance\\\": {\" +\n+//                    \"                \\\"/f1\\\": \\\"NONE\\\"\" +\n+//                    \"            }\" +\n+//                    \"        }\" +\n+//                    \"    ]\" +\n+//                    \"}\"\n+//             },\n             {\n                 \"record test {\" +\n                     \"  unionTyperef:\" +\n-                    \"  @compliance = {\" +\n-                    \"    \\\"/string\\\": \\\"NONE\\\"\" +\n-                    \"  }\" +\n-                    \"  typeref unionRefNoAlias =\" +\n-                    \"  union[int, string]\" +\n-                    \"}\",\n-                \"{\" +\n-                    \"    \\\"type\\\": \\\"record\\\",\" +\n-                    \"    \\\"name\\\": \\\"test\\\",\" +\n-                    \"    \\\"fields\\\": [\" +\n-                    \"        {\" +\n-                    \"            \\\"name\\\": \\\"unionTyperef\\\",\" +\n-                    \"            \\\"type\\\": [\" +\n-                    \"                \\\"int\\\",\" +\n-                    \"                \\\"string\\\"\" +\n-                    \"            ],\" +\n-                    \"            \\\"compliance\\\": {\" +\n-                    \"                \\\"/string\\\": \\\"NONE\\\"\" +\n-                    \"            }\" +\n-                    \"        }\" +\n-                    \"    ]\" +\n-                    \"}\"\n-            },\n-            {\n-                \"record test {\" +\n-                    \"  unionTyperef:\" +\n-                    \"  @compliance = {\" +\n-                    \"    \\\"/*/f1\\\": \\\"NONE\\\"\" +\n-                    \"  }\" +\n-                    \"  typeref arrayToUnionWithAlias = array[\" +\n-                    \"  union[f1:int, f2:string]\" +\n-                    \"  ]\" +\n-                    \"}\",\n-                \"{\" +\n-                    \"    \\\"type\\\": \\\"record\\\",\" +\n-                    \"    \\\"name\\\": \\\"test\\\",\" +\n-                    \"    \\\"fields\\\": [\" +\n-                    \"        {\" +\n-                    \"            \\\"name\\\": \\\"unionTyperef\\\",\" +\n-                    \"            \\\"type\\\": {\" +\n-                    \"                \\\"type\\\": \\\"array\\\",\" +\n-                    \"                \\\"items\\\": {\" +\n-                    \"                    \\\"type\\\": \\\"record\\\",\" +\n-                    \"                    \\\"name\\\": \\\"testUnionTyperef\\\",\" +\n-                    \"                    \\\"fields\\\": [\" +\n-                    \"                        {\" +\n-                    \"                            \\\"name\\\": \\\"f1\\\",\" +\n-                    \"                            \\\"type\\\": [\" +\n-                    \"                                \\\"null\\\",\" +\n-                    \"                                \\\"int\\\"\" +\n-                    \"                            ],\" +\n-                    \"                            \\\"default\\\": null\" +\n-                    \"                        },\" +\n-                    \"                        {\" +\n-                    \"                            \\\"name\\\": \\\"f2\\\",\" +\n-                    \"                            \\\"type\\\": [\" +\n-                    \"                                \\\"null\\\",\" +\n-                    \"                                \\\"string\\\"\" +\n-                    \"                            ],\" +\n-                    \"                            \\\"default\\\": null\" +\n-                    \"                        },\" +\n-                    \"                        {\" +\n-                    \"                            \\\"name\\\": \\\"fieldDiscriminator\\\",\" +\n-                    \"                            \\\"type\\\": {\" +\n-                    \"                                \\\"type\\\": \\\"enum\\\",\" +\n-                    \"                                \\\"name\\\": \\\"testUnionTyperefDiscriminator\\\",\" +\n-                    \"                                \\\"symbols\\\": [\" +\n-                    \"                                    \\\"f1\\\",\" +\n-                    \"                                    \\\"f2\\\"\" +\n-                    \"                                ]\" +\n-                    \"                            },\" +\n-                    \"                            \\\"doc\\\": \\\"Contains the name of the field that has its value set.\\\"\" +\n-                    \"                        }\" +\n-                    \"                    ]\" +\n-                    \"                }\" +\n-                    \"            },\" +\n-                    \"            \\\"compliance\\\": {\" +\n-                    \"                \\\"/*/f1\\\": \\\"NONE\\\"\" +\n-                    \"            }\" +\n-                    \"        }\" +\n-                    \"    ]\" +\n-                    \"}\"\n-            },\n-            {\n-                \"record test {\" +\n-                    \"  unionTyperef:\" +\n-                    \"  @compliance = {\" +\n-                    \"    \\\"/$key\\\": \\\"None\\\",\" +\n-                    \"    \\\"/*/f1\\\": \\\"NONE\\\"\" +\n-                    \"  }\" +\n-                    \"  typeref unionRefNoAlias = map[string, \" +\n-                    \"  union[f1:int, f2:string]\" +\n-                    \"  ]\" +\n-                    \"}\",\n-                \"{\" +\n-                    \"    \\\"type\\\": \\\"record\\\",\" +\n-                    \"    \\\"name\\\": \\\"test\\\",\" +\n-                    \"    \\\"fields\\\": [\" +\n-                    \"        {\" +\n-                    \"            \\\"name\\\": \\\"unionTyperef\\\",\" +\n-                    \"            \\\"type\\\": {\" +\n-                    \"                \\\"type\\\": \\\"map\\\",\" +\n-                    \"                \\\"values\\\": {\" +\n-                    \"                    \\\"type\\\": \\\"record\\\",\" +\n-                    \"                    \\\"name\\\": \\\"testUnionTyperef\\\",\" +\n-                    \"                    \\\"fields\\\": [\" +\n-                    \"                        {\" +\n-                    \"                            \\\"name\\\": \\\"f1\\\",\" +\n-                    \"                            \\\"type\\\": [\" +\n-                    \"                                \\\"null\\\",\" +\n-                    \"                                \\\"int\\\"\" +\n-                    \"                            ],\" +\n-                    \"                            \\\"default\\\": null\" +\n-                    \"                        },\" +\n-                    \"                        {\" +\n-                    \"                            \\\"name\\\": \\\"f2\\\",\" +\n-                    \"                            \\\"type\\\": [\" +\n-                    \"                                \\\"null\\\",\" +\n-                    \"                                \\\"string\\\"\" +\n-                    \"                            ],\" +\n-                    \"                            \\\"default\\\": null\" +\n-                    \"                        },\" +\n-                    \"                        {\" +\n-                    \"                            \\\"name\\\": \\\"fieldDiscriminator\\\",\" +\n-                    \"                            \\\"type\\\": {\" +\n-                    \"                                \\\"type\\\": \\\"enum\\\",\" +\n-                    \"                                \\\"name\\\": \\\"testUnionTyperefDiscriminator\\\",\" +\n-                    \"                                \\\"symbols\\\": [\" +\n-                    \"                                    \\\"f1\\\",\" +\n-                    \"                                    \\\"f2\\\"\" +\n-                    \"                                ]\" +\n-                    \"                            },\" +\n-                    \"                            \\\"doc\\\": \\\"Contains the name of the field that has its value set.\\\"\" +\n-                    \"                        }\" +\n-                    \"                    ]\" +\n-                    \"                }\" +\n-                    \"            },\" +\n-                    \"            \\\"compliance\\\": {\" +\n-                    \"                \\\"/$key\\\": \\\"None\\\",\" +\n-                    \"                \\\"/*/f1\\\": \\\"NONE\\\"\" +\n-                    \"            }\" +\n-                    \"        }\" +\n-                    \"    ]\" +\n-                    \"}\"\n-            },\n-            {\n-                \"record test {\" +\n-                    \"  unionTyperef:\" +\n+                    \"  typeref unionRefWithAlias =\" +\n                     \"  @compliance = {\" +\n                     \"    \\\"/f1\\\": \\\"NONE\\\"\" +\n                     \"  }\" +\n-                    \"  typeref unionRefWithAlias =\" +\n                     \"  union[f1:int, f2:string]\" +\n                     \"}\",\n                 \"{\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3NjUwMQ==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505476501", "bodyText": "nit: would be good to use test annotation instead of compliance here.", "author": "aman1309", "createdAt": "2020-10-15T11:46:31Z", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -69,6 +69,217 @@ public void testTranslateDefaultBackwardsCompatibility()\n \n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n+  @DataProvider\n+  public Object[][] toAvroSchemaData_testTypeRefAnnotationPropagationUnionWithAlias()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                \"record test {\" +\n+                    \"  unionTyperef:\" +\n+                    \"  @compliance = {\" +", "originalCommit": "5395a5428b79b6e22f22ff8624eef3a239a66d0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6f56d54e6aa45ba37846fc64cd88c90be728af1", "chunk": "diff --git a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\nindex 663aaf192..80944b86e 100644\n--- a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n+++ b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n\n@@ -69,8 +69,9 @@ public class TestSchemaTranslator\n \n     assertSame(DataToAvroSchemaTranslationOptions.DEFAULT_OPTIONAL_DEFAULT_MODE, OptionalDefaultMode.TRANSLATE_DEFAULT);\n   }\n+\n   @DataProvider\n-  public Object[][] toAvroSchemaData_testTypeRefAnnotationPropagationUnionWithAlias()\n+  public Object[][] toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias()\n   {\n     return new Object[][]\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MjIxNw==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r505762217", "bodyText": "Name consistency?  (toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias)", "author": "BrianPin", "createdAt": "2020-10-15T18:41:40Z", "path": "data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java", "diffHunk": "@@ -308,11 +520,11 @@ public void testTranslateDefaultBackwardsCompatibility()\n \n  }\n \n- @Test(dataProvider = \"toAvroSchemaData_testTypeRefAnnotationPropagation\")\n- public void testToAvroSchema_testTypeRefAnnotationPropagation(String schemaBeforeTranslation,\n+ @Test(dataProvider = \"toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias\")\n+ public void testToAvroSchema_testTypeRefAnnotationPropagationUnionWithAlias(String schemaBeforeTranslation,", "originalCommit": "309f679eb8adab01078acf233c3ec81e2d22ba45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d8836b3acac36af2f30bdd11dd0e5d2d6385fa", "chunk": "diff --git a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\nindex 24b7414a6..7c567d6b0 100644\n--- a/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n+++ b/data-avro/src/test/java/com/linkedin/data/avro/TestSchemaTranslator.java\n\n@@ -521,7 +521,7 @@ public class TestSchemaTranslator\n  }\n \n  @Test(dataProvider = \"toAvroSchemaDataTestTypeRefAnnotationPropagationUnionWithAlias\")\n- public void testToAvroSchema_testTypeRefAnnotationPropagationUnionWithAlias(String schemaBeforeTranslation,\n+ public void testToAvroSchemaTestTypeRefAnnotationPropagationUnionWithAlias(String schemaBeforeTranslation,\n                                                                String expectedAvroSchemaAsString) throws Exception\n  {\n    DataSchema schema = TestUtil.dataSchemaFromPdlString(schemaBeforeTranslation);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzNDM1Mg==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r506034352", "bodyText": "I wonder if you can just call getMergedTyperefProperties\nlike\nMap<String, Object>  propagatedProperties = fieldSchema.getMergedTyperefProperties();\nBecause looking into the getMergedTyperefProperties function it will do the judge for you if it is a TypeRef", "author": "BrianPin", "createdAt": "2020-10-16T03:53:00Z", "path": "data-avro/src/main/java/com/linkedin/data/avro/PegasusUnionToAvroRecordConvertCallback.java", "diffHunk": "@@ -62,6 +63,14 @@ public void callback(List<String> path, DataSchema schema)\n     {\n       DataSchema fieldSchema = field.getType().getDereferencedDataSchema();\n \n+      Map<String, Object>  propagatedProperties = fieldSchema.getProperties();", "originalCommit": "309f679eb8adab01078acf233c3ec81e2d22ba45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNjU3Nw==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r507926577", "bodyText": "Hi Brian,\nI think you misunderstood. The branch with judge \"(getRef().getType() == Type.TYPEREF)\" is for a recursive call.\nthis getMergedTyperefProperties is only available in TyperefDataSchema", "author": "junchuanwang", "createdAt": "2020-10-19T17:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0MTQwNA==", "url": "https://github.com/linkedin/rest.li/pull/447#discussion_r508041404", "bodyText": "Thanks, You are right, I didnt fint it a typeref specific method", "author": "BrianPin", "createdAt": "2020-10-19T20:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzNDM1Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a6f56d54e6aa45ba37846fc64cd88c90be728af1", "url": "https://github.com/linkedin/rest.li/commit/a6f56d54e6aa45ba37846fc64cd88c90be728af1", "message": "Update test name", "committedDate": "2020-10-19T17:28:07Z", "type": "commit"}, {"oid": "84d8836b3acac36af2f30bdd11dd0e5d2d6385fa", "url": "https://github.com/linkedin/rest.li/commit/84d8836b3acac36af2f30bdd11dd0e5d2d6385fa", "message": "Update test name", "committedDate": "2020-10-19T17:31:54Z", "type": "commit"}, {"oid": "606bab99666a87de3924b46d89e7761027c42e29", "url": "https://github.com/linkedin/rest.li/commit/606bab99666a87de3924b46d89e7761027c42e29", "message": "Fix another bug (To put the properties back to the record that created by the Union)", "committedDate": "2020-10-19T23:24:54Z", "type": "commit"}, {"oid": "da1cc5328f2b097bbd70010d68a34684576d0f5a", "url": "https://github.com/linkedin/rest.li/commit/da1cc5328f2b097bbd70010d68a34684576d0f5a", "message": "Comment back tests", "committedDate": "2020-10-19T23:27:44Z", "type": "commit"}, {"oid": "3ebf3ab4ba1dd6856a39c05e487aa062ffb1ace0", "url": "https://github.com/linkedin/rest.li/commit/3ebf3ab4ba1dd6856a39c05e487aa062ffb1ace0", "message": "Merge branch 'master' into bug_fix_typeref_unionwithalias", "committedDate": "2020-10-20T19:36:25Z", "type": "commit"}, {"oid": "c03c83b7e445c443a2589009dc2683066ad1d432", "url": "https://github.com/linkedin/rest.li/commit/c03c83b7e445c443a2589009dc2683066ad1d432", "message": "Update changelog", "committedDate": "2020-10-21T01:29:18Z", "type": "commit"}]}