{"pr_number": 4503, "pr_title": "SSE Flow.Subscriber injectable as event sink", "pr_createdAt": "2020-06-10T09:01:06Z", "pr_url": "https://github.com/eclipse-ee4j/jersey/pull/4503", "timeline": [{"oid": "7a95ecf1258aad146e309b10491af85dbd345483", "url": "https://github.com/eclipse-ee4j/jersey/commit/7a95ecf1258aad146e309b10491af85dbd345483", "message": "SSE Flow.Subscriber injectable as event sink\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-06-10T09:04:04Z", "type": "forcePushed"}, {"oid": "4fec4143271eafa043394de61bbc90fa6751d75c", "url": "https://github.com/eclipse-ee4j/jersey/commit/4fec4143271eafa043394de61bbc90fa6751d75c", "message": "Rename JerseySink to JerseyFlowSubscriber\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-06-11T08:49:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0NTE2MQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r438645161", "bodyText": "Change to this file seems unnecessary.", "author": "tomas-langer", "createdAt": "2020-06-11T09:03:08Z", "path": "core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.", "originalCommit": "4fec4143271eafa043394de61bbc90fa6751d75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMTUxNA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r438931514", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-06-11T16:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0NTE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a3c9ad4de965282ebb4c5aa581505a91fb35962e", "chunk": "diff --git a/core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java b/core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java\nindex 2f92d6e1e..7a7ce4e42 100644\n--- a/core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java\n+++ b/core-common/src/main/java11/org/glassfish/jersey/internal/jsr166/SubmissionPublisher.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n"}}, {"oid": "a3c9ad4de965282ebb4c5aa581505a91fb35962e", "url": "https://github.com/eclipse-ee4j/jersey/commit/a3c9ad4de965282ebb4c5aa581505a91fb35962e", "message": "Tests for Sse with injected Flow.Subscriber\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-06-11T18:04:20Z", "type": "forcePushed"}, {"oid": "a014999495e4d9d8e76f642f52ccaaa0eb2959b3", "url": "https://github.com/eclipse-ee4j/jersey/commit/a014999495e4d9d8e76f642f52ccaaa0eb2959b3", "message": "Reactive streams tck tests for JerseyEventSink\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-06-12T14:42:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyODk4OA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r439528988", "bodyText": "@jansupol Is this proper way to propagate close from client to JerseyEventSink?", "author": "danielkec", "createdAt": "2020-06-12T16:42:03Z", "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -290,6 +290,7 @@ public Void call() throws IOException {\n         } finally {\n             if (closed) {\n                 try {\n+                    closeByClient();\n                     responseContext.close();", "originalCommit": "10ee8d8a787f2890264329fa69907994e04ed323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NjM1NQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444286355", "bodyText": "how about to name it \u00f2nClose()?", "author": "jansupol", "createdAt": "2020-06-23T14:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyODk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1NjMwOA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r464956308", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-08-04T10:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyODk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d2d7cd33c6b8752563628c5db2b8a668800bd610", "chunk": "diff --git a/core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java b/core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java\nindex d0cbb8181..40c3e7c2c 100644\n--- a/core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java\n+++ b/core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java\n\n@@ -290,7 +290,7 @@ public class ChunkedOutput<T> extends GenericType<T> implements Closeable {\n         } finally {\n             if (closed) {\n                 try {\n-                    closeByClient();\n+                    onClose();\n                     responseContext.close();\n                 } catch (final Exception e) {\n                     // if no exception remembered before, remember this one\n"}}, {"oid": "135a0eaa1d12c6f9852b1f106893f5870305f14e", "url": "https://github.com/eclipse-ee4j/jersey/commit/135a0eaa1d12c6f9852b1f106893f5870305f14e", "message": "Cancel on close propagation\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-06-12T16:47:22Z", "type": "forcePushed"}, {"oid": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "url": "https://github.com/eclipse-ee4j/jersey/commit/58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "message": "SseTypeResolver\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-06-15T12:43:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NTg2OQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444275869", "bodyText": "clazz = AccessController.doPrivileged(ReflectionHelper.classForNamePA(\"java.util.concurrent.Flow.Subscriber\", null)", "author": "jansupol", "createdAt": "2020-06-23T14:38:18Z", "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.glassfish.jersey.server.model.internal;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SseTypeResolver {\n+\n+    private static final Set<Class<?>> SUPPORTED_SSE_SINK_TYPES;\n+\n+    static {\n+        Set<Class<?>> set = new HashSet<>(8);\n+\n+        set.add(org.glassfish.jersey.internal.jsr166.Flow.Subscriber.class);\n+        set.add(javax.ws.rs.sse.SseEventSink.class);\n+        try {\n+            Class<?> clazz = Class.forName(\"java.util.concurrent.Flow.Subscriber\");", "originalCommit": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1ODg4Mg==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r464958882", "bodyText": "thx fixed", "author": "danielkec", "createdAt": "2020-08-04T10:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NTg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d2d7cd33c6b8752563628c5db2b8a668800bd610", "chunk": "diff --git a/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java b/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\nindex 6a4f55766..7e16b8756 100644\n--- a/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\n+++ b/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\n\n@@ -1,23 +1,29 @@\n package org.glassfish.jersey.server.model.internal;\n \n+import java.security.AccessController;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class SseTypeResolver {\n+import org.glassfish.jersey.internal.util.ReflectionHelper;\n+\n+public final class SseTypeResolver {\n \n     private static final Set<Class<?>> SUPPORTED_SSE_SINK_TYPES;\n \n+    private SseTypeResolver() {\n+    }\n+\n     static {\n         Set<Class<?>> set = new HashSet<>(8);\n \n         set.add(org.glassfish.jersey.internal.jsr166.Flow.Subscriber.class);\n         set.add(javax.ws.rs.sse.SseEventSink.class);\n-        try {\n-            Class<?> clazz = Class.forName(\"java.util.concurrent.Flow.Subscriber\");\n+        Class<?> clazz = AccessController\n+                .doPrivileged(ReflectionHelper.classForNamePA(\"java.util.concurrent.Flow.Subscriber\", null));\n+\n+        if (clazz != null) {\n             set.add(clazz);\n-        } catch (ClassNotFoundException e) {\n-            // Not java 9+\n         }\n         SUPPORTED_SSE_SINK_TYPES = Collections.unmodifiableSet(set);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3ODIxMA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444278210", "bodyText": "Please make it final with private constructor", "author": "jansupol", "createdAt": "2020-06-23T14:41:18Z", "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.glassfish.jersey.server.model.internal;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SseTypeResolver {", "originalCommit": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1NjM4NQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r464956385", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-08-04T10:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3ODIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "d2d7cd33c6b8752563628c5db2b8a668800bd610", "chunk": "diff --git a/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java b/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\nindex 6a4f55766..7e16b8756 100644\n--- a/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\n+++ b/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\n\n@@ -1,23 +1,29 @@\n package org.glassfish.jersey.server.model.internal;\n \n+import java.security.AccessController;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class SseTypeResolver {\n+import org.glassfish.jersey.internal.util.ReflectionHelper;\n+\n+public final class SseTypeResolver {\n \n     private static final Set<Class<?>> SUPPORTED_SSE_SINK_TYPES;\n \n+    private SseTypeResolver() {\n+    }\n+\n     static {\n         Set<Class<?>> set = new HashSet<>(8);\n \n         set.add(org.glassfish.jersey.internal.jsr166.Flow.Subscriber.class);\n         set.add(javax.ws.rs.sse.SseEventSink.class);\n-        try {\n-            Class<?> clazz = Class.forName(\"java.util.concurrent.Flow.Subscriber\");\n+        Class<?> clazz = AccessController\n+                .doPrivileged(ReflectionHelper.classForNamePA(\"java.util.concurrent.Flow.Subscriber\", null));\n+\n+        if (clazz != null) {\n             set.add(clazz);\n-        } catch (ClassNotFoundException e) {\n-            // Not java 9+\n         }\n         SUPPORTED_SSE_SINK_TYPES = Collections.unmodifiableSet(set);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5OTQ3OQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r444299479", "bodyText": "how about calling this.close()? Same as onComplete? Would you still need the onClose()?", "author": "jansupol", "createdAt": "2020-06-23T15:09:38Z", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);\n         }\n     }\n \n     @Override\n     public void onError(final Throwable throwable) {\n-        checkClosed();\n         if (throwable == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"throwable\"));\n         }\n-        subscription.cancel();\n+        try {\n+            super.close();", "originalCommit": "58d0a4fabe7a42d5ff528b266a28d94660fe9a39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1ODc2Ng==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r464958766", "bodyText": "Intention was differentiate client side close(disconnect) where cancel is expected, from upstream close where cancel is not desirable as upstream is cause of closing. Change should avoid similar issues as oracle/helidon/issues/806 in the future.", "author": "danielkec", "createdAt": "2020-08-04T10:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5OTQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\nindex 0a0cac6de..b43d5448b 100644\n--- a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n+++ b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n\n@@ -56,27 +53,6 @@ class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n     private final AtomicBoolean subscribed = new AtomicBoolean(false);\n     private volatile MediaType implicitMediaType = null;\n \n-    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n-\n-    static {\n-        Map<Class<?>, MediaType> map = new HashMap<>(8);\n-\n-        // Already wrapped\n-        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n-\n-        // No wrapping for raw types\n-        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n-\n-        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n-    }\n-\n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n"}}, {"oid": "d2d7cd33c6b8752563628c5db2b8a668800bd610", "url": "https://github.com/eclipse-ee4j/jersey/commit/d2d7cd33c6b8752563628c5db2b8a668800bd610", "message": "Review issues", "committedDate": "2020-08-03T15:03:00Z", "type": "forcePushed"}, {"oid": "680068c5e848b44202994426f1ebca4e79597a52", "url": "https://github.com/eclipse-ee4j/jersey/commit/680068c5e848b44202994426f1ebca4e79597a52", "message": "Review issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-08-03T15:05:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNjkxNg==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489436916", "bodyText": "Please update copyright to ChunkedOutput", "author": "jansupol", "createdAt": "2020-09-16T13:28:29Z", "path": "core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java", "diffHunk": "@@ -287,6 +287,7 @@ public Void call() throws IOException {\n             closed = true;", "originalCommit": "aed6eb4741ce964c139e008ee706384db0ec7a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjQ4MA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266480", "bodyText": "updated", "author": "danielkec", "createdAt": "2020-09-21T18:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNjkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java b/core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java\nindex f24217597..12cecf50b 100644\n--- a/core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java\n+++ b/core-server/src/main/java/org/glassfish/jersey/server/ChunkedOutput.java\n\n@@ -291,7 +303,11 @@ public class ChunkedOutput<T> extends GenericType<T> implements Closeable {\n         } finally {\n             if (closed) {\n                 try {\n-                    responseContext.close();\n+                    synchronized (lock) {\n+                        if (!touchingEntityStream) {\n+                            responseContext.close();\n+                        } // else the next thread will close responseContext\n+                    }\n                 } catch (final Exception e) {\n                     // if no exception remembered before, remember this one\n                     // otherwise the previously remembered exception (from catch clause) takes precedence\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNzUyOA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489437528", "bodyText": "Please add copyright", "author": "jansupol", "createdAt": "2020-09-16T13:29:17Z", "path": "core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.glassfish.jersey.server.model.internal;", "originalCommit": "aed6eb4741ce964c139e008ee706384db0ec7a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NTc0OA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492265748", "bodyText": "added", "author": "danielkec", "createdAt": "2020-09-21T18:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNzUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java b/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\nindex b72deaf92..c9abef4cb 100644\n--- a/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\n+++ b/core-server/src/main/java/org/glassfish/jersey/server/model/internal/SseTypeResolver.java\n\n@@ -1,3 +1,18 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License v. 2.0, which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * This Source Code may also be made available under the following Secondary\n+ * Licenses when the conditions for such availability set forth in the\n+ * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,\n+ * version 2 with the GNU Classpath Exception, which is available at\n+ * https://www.gnu.org/software/classpath/license.html.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n+ */\n package org.glassfish.jersey.server.model.internal;\n \n import java.security.AccessController;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2MzAxNw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489463017", "bodyText": "This class is duplicated. One in SSE module, one in the test module. Does it make sense to move the test from SSE module to the test module to contain just a single copy of the class?", "author": "jansupol", "createdAt": "2020-09-16T14:03:19Z", "path": "media/sse/src/test/java/org/glassfish/jersey/media/sse/JerseyFlowAdapters.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*", "originalCommit": "aed6eb4741ce964c139e008ee706384db0ec7a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NTg3Mw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492265873", "bodyText": "moved", "author": "danielkec", "createdAt": "2020-09-21T18:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2MzAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/media/sse/src/test/java/org/glassfish/jersey/media/sse/JerseyFlowAdapters.java b/media/sse/src/test/java/org/glassfish/jersey/media/sse/JerseyFlowAdapters.java\ndeleted file mode 100644\nindex 6899d9690..000000000\n--- a/media/sse/src/test/java/org/glassfish/jersey/media/sse/JerseyFlowAdapters.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-/*\n- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License v. 2.0, which is available at\n- * http://www.eclipse.org/legal/epl-2.0.\n- *\n- * This Source Code may also be made available under the following Secondary\n- * Licenses when the conditions for such availability set forth in the\n- * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,\n- * version 2 with the GNU Classpath Exception, which is available at\n- * https://www.gnu.org/software/classpath/license.html.\n- *\n- * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n- */\n-\n-package org.glassfish.jersey.media.sse;\n-\n-import org.glassfish.jersey.internal.jsr166.Flow;\n-\n-public class JerseyFlowAdapters {\n-\n-    /**\n-     * Adapt {@link org.glassfish.jersey.internal.jsr166.Flow.Subscriber} to\n-     * {@link org.reactivestreams.Subscriber}.\n-     *\n-     * @param jerseySubscriber Jersey's repackaged {@link org.glassfish.jersey.internal.jsr166.Flow.Subscriber}\n-     * @param <T>              payload type\n-     * @return Reactive Streams's {@link org.reactivestreams.Subscriber}\n-     */\n-    static <T> org.reactivestreams.Subscriber<T> toSubscriber(Flow.Subscriber<T> jerseySubscriber) {\n-        return new org.reactivestreams.Subscriber<T>() {\n-            @Override\n-            public void onSubscribe(final org.reactivestreams.Subscription subscription) {\n-                jerseySubscriber.onSubscribe(new Flow.Subscription() {\n-                    @Override\n-                    public void request(final long n) {\n-                        subscription.request(n);\n-                    }\n-\n-                    @Override\n-                    public void cancel() {\n-                        subscription.cancel();\n-                    }\n-                });\n-            }\n-\n-            @Override\n-            public void onNext(final T t) {\n-                jerseySubscriber.onNext(t);\n-            }\n-\n-            @Override\n-            public void onError(final Throwable throwable) {\n-                jerseySubscriber.onError(throwable);\n-            }\n-\n-            @Override\n-            public void onComplete() {\n-                jerseySubscriber.onComplete();\n-            }\n-        };\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MjA0Ng==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489482046", "bodyText": "Would this work correctly for Float.class, BigDecimal.class? Perhaps check if Number.class.isAssignableFrom(item.getClass()) + Character & String & Boolean?", "author": "jansupol", "createdAt": "2020-09-16T14:28:40Z", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +180,30 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelUpstream();\n+    }\n+\n+    private void cancelUpstream() {\n+        if (subscription != null) {\n+            subscription.cancel();\n+        }\n     }\n \n     private void checkClosed() {\n         if (isClosed()) {\n+            cancelUpstream();\n             throw new IllegalStateException(LocalizationMessages.EVENT_SOURCE_ALREADY_CLOSED());\n         }\n     }\n+\n+    private MediaType resolveMediaType(Object item) {\n+        // all stream is presumed to be of items with same type\n+        if (implicitMediaType == null) {\n+            // unknown unwrapped objects are treated as json media type\n+            implicitMediaType = IMPLICIT_MEDIA_TYPE.getOrDefault(item.getClass(), MediaType.APPLICATION_JSON_TYPE);", "originalCommit": "aed6eb4741ce964c139e008ee706384db0ec7a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjM4Mw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266383", "bodyText": "\ud83e\udd26 sorry, fixed", "author": "danielkec", "createdAt": "2020-09-21T18:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MjA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\nindex f1f21d4ee..b43d5448b 100644\n--- a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n+++ b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n\n@@ -182,10 +161,10 @@ class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n \n     @Override\n     protected void onClose(Exception e) {\n-        cancelUpstream();\n+        cancelSubscription();\n     }\n \n-    private void cancelUpstream() {\n+    private void cancelSubscription() {\n         if (subscription != null) {\n             subscription.cancel();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MDA1Mw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489490053", "bodyText": "if (MediaType.SERVER_SENT_EVENTS_TYPE.equals(implicitType)) {", "author": "jansupol", "createdAt": "2020-09-16T14:38:47Z", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {", "originalCommit": "aed6eb4741ce964c139e008ee706384db0ec7a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjU3Ng==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266576", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-09-21T18:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MDA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\nindex f1f21d4ee..b43d5448b 100644\n--- a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n+++ b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n\n@@ -56,27 +53,6 @@ class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n     private final AtomicBoolean subscribed = new AtomicBoolean(false);\n     private volatile MediaType implicitMediaType = null;\n \n-    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n-\n-    static {\n-        Map<Class<?>, MediaType> map = new HashMap<>(8);\n-\n-        // Already wrapped\n-        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n-\n-        // No wrapping for raw types\n-        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n-\n-        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n-    }\n-\n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489500112", "bodyText": "INFO ? It's an exception, we should not consume it silently with info level.\nMaybe catch IOException only, checkClosed is called just from onError, and the exeception is not propagated, so checkClosed should only log, not throw.", "author": "jansupol", "createdAt": "2020-09-16T14:51:31Z", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -39,55 +45,109 @@\n  * <p>\n  * The reference should be obtained via injection into the resource method.\n  *\n- * @author Adam Lindenthal]\n+ * @author Adam Lindenthal\n  */\n class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n-        implements SseEventSink, Flushable, Flow.Subscriber<OutboundSseEvent> {\n+        implements SseEventSink, Flushable, JerseyFlowSubscriber<Object> {\n \n     private static final Logger LOGGER = Logger.getLogger(JerseyEventSink.class.getName());\n-    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\n+    private static final byte[] SSE_EVENT_DELIMITER = \"\\n\".getBytes(StandardCharsets.UTF_8);\n     private Flow.Subscription subscription = null;\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private volatile MediaType implicitMediaType = null;\n+\n+    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n+\n+    static {\n+        Map<Class<?>, MediaType> map = new HashMap<>(8);\n+\n+        // Already wrapped\n+        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n+\n+        // No wrapping for raw types\n+        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n+        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n+\n+        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n+    }\n \n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n \n     @Override\n     public void onSubscribe(final Flow.Subscription subscription) {\n-        checkClosed();\n         if (subscription == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"subscription\"));\n         }\n+        if (subscribed.getAndSet(true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n         this.subscription = subscription;\n-        subscription.request(Long.MAX_VALUE);\n+        if (isClosed()) {\n+            subscription.cancel();\n+        } else {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n     }\n \n \n     @Override\n-    public void onNext(final OutboundSseEvent item) {\n-        checkClosed();\n+    public void onNext(final Object item) {\n         if (item == null) {\n             throw new NullPointerException(LocalizationMessages.PARAM_NULL(\"outboundSseEvent\"));\n         }\n         try {\n-            write(item);\n-        } catch (final IOException e) {\n-            onError(e);\n+            checkClosed();\n+            MediaType implicitType = resolveMediaType(item);\n+            if (MediaType.SERVER_SENT_EVENTS_TYPE == implicitType) {\n+                // already wrapped\n+                write((OutboundSseEvent) item);\n+            } else {\n+                // implicit wrapping\n+                // TODO: Jersey annotation for explicit media type\n+                write(new OutboundEvent.Builder()\n+                        .mediaType(implicitType)\n+                        .data(item)\n+                        .build());\n+            }\n+        } catch (final Throwable e) {\n+            LOGGER.log(Level.INFO, LocalizationMessages.EVENT_SOURCE_DEFAULT_ONERROR(), e);", "originalCommit": "aed6eb4741ce964c139e008ee706384db0ec7a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTg0Nw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492211847", "bodyText": "There can be also Runtime exception propagated from flushQueue, specs forbids Subscriber from throwing anything else than NPE from onNext", "author": "danielkec", "createdAt": "2020-09-21T17:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzk5OA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492213998", "bodyText": "This time I have checked to be sure \ud83d\ude01 https://github.com/reactive-streams/reactive-streams-jvm#2.13", "author": "danielkec", "createdAt": "2020-09-21T17:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjkxNA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266914", "bodyText": "SEVERE it is", "author": "danielkec", "createdAt": "2020-09-21T18:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMDExMg=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\nindex f1f21d4ee..b43d5448b 100644\n--- a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n+++ b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n\n@@ -56,27 +53,6 @@ class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n     private final AtomicBoolean subscribed = new AtomicBoolean(false);\n     private volatile MediaType implicitMediaType = null;\n \n-    private static final Map<Class<?>, MediaType> IMPLICIT_MEDIA_TYPE;\n-\n-    static {\n-        Map<Class<?>, MediaType> map = new HashMap<>(8);\n-\n-        // Already wrapped\n-        map.put(OutboundSseEvent.class, MediaType.SERVER_SENT_EVENTS_TYPE);\n-\n-        // No wrapping for raw types\n-        map.put(String.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Character.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Boolean.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Byte.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Short.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Integer.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Long.class, MediaType.TEXT_PLAIN_TYPE);\n-        map.put(Double.class, MediaType.TEXT_PLAIN_TYPE);\n-\n-        IMPLICIT_MEDIA_TYPE = Collections.unmodifiableMap(map);\n-    }\n-\n     JerseyEventSink(Provider<AsyncContext> asyncContextProvider) {\n         super(SSE_EVENT_DELIMITER, asyncContextProvider);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNTQ4NQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r489525485", "bodyText": "Can you name this cancelSubscription()?", "author": "jansupol", "createdAt": "2020-09-16T15:24:52Z", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +180,30 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelUpstream();\n+    }\n+\n+    private void cancelUpstream() {", "originalCommit": "aed6eb4741ce964c139e008ee706384db0ec7a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2Njk3OA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492266978", "bodyText": "sure", "author": "danielkec", "createdAt": "2020-09-21T18:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNTQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\nindex f1f21d4ee..b43d5448b 100644\n--- a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n+++ b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n\n@@ -182,10 +161,10 @@ class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n \n     @Override\n     protected void onClose(Exception e) {\n-        cancelUpstream();\n+        cancelSubscription();\n     }\n \n-    private void cancelUpstream() {\n+    private void cancelSubscription() {\n         if (subscription != null) {\n             subscription.cancel();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4ODgyNw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492388827", "bodyText": "Character, String and Boolean are final classes. Faster is just to compare them.", "author": "jansupol", "createdAt": "2020-09-21T22:48:10Z", "path": "media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java", "diffHunk": "@@ -118,15 +158,38 @@ public void flush() throws IOException {\n         super.flushQueue();\n     }\n \n-    public void onComplete() {\n-        checkClosed();\n-        subscription.cancel();\n-        close();\n+    @Override\n+    protected void onClose(Exception e) {\n+        cancelSubscription();\n+    }\n+\n+    private void cancelSubscription() {\n+        if (subscription != null) {\n+            subscription.cancel();\n+        }\n     }\n \n     private void checkClosed() {\n         if (isClosed()) {\n+            cancelSubscription();\n             throw new IllegalStateException(LocalizationMessages.EVENT_SOURCE_ALREADY_CLOSED());\n         }\n     }\n+\n+    private MediaType resolveMediaType(Object item) {\n+        // all stream is presumed to be of items with same type\n+        if (implicitMediaType == null) {\n+            Class<?> clazz = item.getClass();\n+            if (Number.class.isAssignableFrom(clazz)\n+                    || Character.class.isAssignableFrom(clazz)", "originalCommit": "c7e62e3fa332c1c1c8720f9d3edef87d5bd4d4cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMzI2Nw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4503#discussion_r492523267", "bodyText": "My bad sorry", "author": "danielkec", "createdAt": "2020-09-22T07:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4ODgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "chunk": "diff --git a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\nindex 22ebfcd2f..b43d5448b 100644\n--- a/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n+++ b/media/sse/src/main/java/org/glassfish/jersey/media/sse/internal/JerseyEventSink.java\n\n@@ -177,13 +178,13 @@ class JerseyEventSink extends ChunkedOutput<OutboundSseEvent>\n     }\n \n     private MediaType resolveMediaType(Object item) {\n-        // all stream is presumed to be of items with same type\n+        // resolve lazily as all stream items are presumed to be of a same type\n         if (implicitMediaType == null) {\n             Class<?> clazz = item.getClass();\n-            if (Number.class.isAssignableFrom(clazz)\n-                    || Character.class.isAssignableFrom(clazz)\n-                    || String.class.isAssignableFrom(clazz)\n-                    || Boolean.class.isAssignableFrom(clazz)) {\n+            if (String.class.equals(clazz)\n+                    || Number.class.isAssignableFrom(clazz)\n+                    || Character.class.equals(clazz)\n+                    || Boolean.class.equals(clazz)) {\n                 implicitMediaType = MediaType.TEXT_PLAIN_TYPE;\n                 return implicitMediaType;\n             }\n"}}, {"oid": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "url": "https://github.com/eclipse-ee4j/jersey/commit/e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "message": "SSE Flow.Subscriber injectable as event sink\n\n  * Java Flow api used only by JerseyEventSink in java 11+\n  * Reactive streams tck tests for JerseyEventSink\n  * Cancel on close propagation\n  * Remove tests contradicting reactive streams spec https://github.com/reactive-streams/reactive-streams-jvm#2.13\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-23T13:54:56Z", "type": "commit"}, {"oid": "e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "url": "https://github.com/eclipse-ee4j/jersey/commit/e2ba4868a8b50f3b74665db589efcd5024cc4b0a", "message": "SSE Flow.Subscriber injectable as event sink\n\n  * Java Flow api used only by JerseyEventSink in java 11+\n  * Reactive streams tck tests for JerseyEventSink\n  * Cancel on close propagation\n  * Remove tests contradicting reactive streams spec https://github.com/reactive-streams/reactive-streams-jvm#2.13\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-23T13:54:56Z", "type": "forcePushed"}]}