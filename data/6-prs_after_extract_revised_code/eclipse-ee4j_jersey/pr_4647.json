{"pr_number": 4647, "pr_title": "Add support RFC 5987 for attribute filename* in HTTP header Content-Disposition", "pr_createdAt": "2020-11-30T11:50:20Z", "pr_url": "https://github.com/eclipse-ee4j/jersey/pull/4647", "timeline": [{"oid": "4522d94c4a6d892e0194deff468dc21d031a6801", "url": "https://github.com/eclipse-ee4j/jersey/commit/4522d94c4a6d892e0194deff468dc21d031a6801", "message": "Add support RFC 5987 for attribute filename* in HTTP header Content-Disposition\n\nSigned-off-by: Andrii Serkes <andrii.serkes@oracle.com>", "committedDate": "2020-11-30T11:45:48Z", "type": "commit"}, {"oid": "9c1437bd5e84f9778435051e0ef94e98662e0579", "url": "https://github.com/eclipse-ee4j/jersey/commit/9c1437bd5e84f9778435051e0ef94e98662e0579", "message": "Update year in Copyright comments\n\nSigned-off-by: Andrii Serkes <andrii.serkes@oracle.com>", "committedDate": "2020-11-30T11:47:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r535208335", "bodyText": "I am not expert on RFC 5987 but for example this (ISO-8859-1 in lower case) will not match:\niso-8859-1'language-us'abc%a1abc%a2%b1!#$&+.^_`|~-\nIt would be good to pick many examples of valid strings for testing.", "author": "jbescos", "createdAt": "2020-12-03T13:01:48Z", "path": "media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java", "diffHunk": "@@ -40,6 +41,8 @@\n     private Date modificationDate;\n     private Date readDate;\n     private long size;\n+    private static final Pattern FILENAME_EXT_VALUE_PATTERN =\n+            Pattern.compile(\"(UTF-8|ISO-8859-1)'([a-z]{2,8}(-[a-z0-9]+)?)?'(%[a-f0-9]{2}|[a-z0-9!#$&+.^_`|~-])+\");", "originalCommit": "9c1437bd5e84f9778435051e0ef94e98662e0579", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg1MTAxOQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r536851019", "bodyText": "The purpose of the PR should be to allow multi-language (non ASCII) file names. And, for example, this pattern fileNameExt = \"UTF-8''\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430_\u043d\u0430\u0437\u0432\u0430.pdf\"; does not work. Same applies for the pattern: fileNameExt = \"UTF-8''nombre_espa\u00f1ol.pdf\";. And what is the most disapointing here, it does not allow capital letters (even ASCII) in the name.\n@aserkes, could you please fix this?", "author": "senivam", "createdAt": "2020-12-05T18:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg3NjQ1Nw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r536876457", "bodyText": "RFC 5987 does not allow any symbols except in ASCII encoding. Symbols in any other encoding have to be encoded as described in https://tools.ietf.org/html/rfc3986#section-2.1", "author": "aserkes", "createdAt": "2020-12-05T19:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4ODk2Mg==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r536888962", "bodyText": "OK, so the pattern for multi-language file name shall look like fileNameExt = \"UTF-8''nombre_espa%c3%b1ol.pdf\"\nAnd what about language-tag? The RFC 5987 references Section 2.3 of [RFC2978] but I'm not sure it can include the word language itself. It might be that the whole [ language ] construct in the ext-value description shall be substituted by language code from RFC 2978. Or do I understand this wrong?\nAnd yes, it is legitimate to indicate encoding character insensitive, so comment and fix about this is fine.", "author": "senivam", "createdAt": "2020-12-05T20:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NTQ0Mw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r536895443", "bodyText": "Language-Tag can exist or can be omitted. Requirements to this tag are described in https://tools.ietf.org/html/rfc5646#section-2.1 . This tag can have various content that is not always standardized and can expand, but main pattern for it looks like ([a-z]{2,8}(-[a-z0-9]+)?)? (if I understand RFC 5646 correctly).", "author": "aserkes", "createdAt": "2020-12-05T21:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMTE1Mw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r537301153", "bodyText": "the pattern seems to be relevant,\nand another thing comes to mind - it might be good to extend existing constructor (along with related builders) with the fileNameExt parameter. Just not to take fileNameExt from header and to have the whole ContentDisposition class consistent.\n@jansupol what do you think?", "author": "senivam", "createdAt": "2020-12-07T08:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MjU0Nw==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r543662547", "bodyText": "The RFC 5987 describes:\n\nThe character set the recipient is about to support. Mandatory is UTF-8, ISO-88592-1 is optional as per RFC 8187, and other charsets are possible. However, Jersey does not support the charsets per se, the PR only checks the EBNF. From this point of view, I am not sure it makes sense to prohibit other charsets.\nFile-name value characters. Jersey encodes data such as URL, query params,... for the users. This PR does not encode anything, however. Since the encoding is left on the user, I am not sure whether the code should restrict filename* values for characters that do not match the regular expression. The encoding is left on the users. Should they use a non-encoded symbol it is they who would deal with it at the end. The corresponding bug specifically asks for being able to add non-encoded symbols.\n\nFor these two reasons, should we just have the following?:\n   private void createParameters() throws ParseException {\n        fileName = parameters.get(\"filename\");\n\n        String fileNameExt = parameters.get(\"filename*\");\n        if (fileNameExt != null) {\n            fileName = fileNameExt;\n        }\n        ....", "author": "jansupol", "createdAt": "2020-12-15T20:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0Mzg0OA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r545843848", "bodyText": "The ideal behaviour would be:\n\nCheck whether the file name is encoded. If not, check the char set. Only UTF-8 needs to be supported per RFC 8187, and only UTF-8 is supported by Jersey internal econding utility UriComponent#encode. If the not encoded and not UTF-8, throw exception. If UTF-8, and non encoded, encode.\nIf encoded, we do not care about the char set. UTF-8, ISO-8859-2, or any other is fine. Just check for valid characters, if not valid, throw exception. If valid check language.\nThe language should be checked by the regular expression you have in PR. If not valid, throw exception.", "author": "jansupol", "createdAt": "2020-12-18T13:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5ODU2Ng==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r551198566", "bodyText": "Made some changes :\n\nAdded encoding for a filename* parameter if it is valid, not encoded, and its charset is UTF-8.\nJersey will throw an exception if a filename* parameter is not valid.\nAt the same time I left only 2 possible charset for a filename* parameter (ISO-8859-1 and UTF-8) because as mentioned in RFC 5987 :\n\n\nProducers MUST use either the \"UTF-8\" ([RFC3629]) or the \"ISO-8859-1\"\n([ISO-8859-1]) character set.", "author": "aserkes", "createdAt": "2021-01-04T09:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwODMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3089053bbc186c6ea6ed0fecd02cc8c864b521bc", "chunk": "diff --git a/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java b/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\nindex a5701b9fc..5f0f3771b 100644\n--- a/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\n+++ b/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\n\n@@ -42,7 +42,8 @@ public class ContentDisposition {\n     private Date readDate;\n     private long size;\n     private static final Pattern FILENAME_EXT_VALUE_PATTERN =\n-            Pattern.compile(\"(UTF-8|ISO-8859-1)'([a-z]{2,8}(-[a-z0-9]+)?)?'(%[a-f0-9]{2}|[a-z0-9!#$&+.^_`|~-])+\");\n+            Pattern.compile(\"(UTF-8|ISO-8859-1)'([a-z]{2,8}(-[a-z0-9]+)?)?'(%[a-f0-9]{2}|[a-z0-9!#$&+.^_`|~-])+\",\n+                    Pattern.CASE_INSENSITIVE);\n \n     protected ContentDisposition(final String type, final String fileName, final Date creationDate,\n                                  final Date modificationDate, final Date readDate, final long size) {\n"}}, {"oid": "3089053bbc186c6ea6ed0fecd02cc8c864b521bc", "url": "https://github.com/eclipse-ee4j/jersey/commit/3089053bbc186c6ea6ed0fecd02cc8c864b521bc", "message": "Fix problem with capital letters, add more filename patterns for tests\n\nSigned-off-by: Andrii Serkes <andrii.serkes@oracle.com>", "committedDate": "2020-12-05T19:17:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5MjIxOQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r536892219", "bodyText": "regarding those tests - it would be good to extract duplicated code into some method and call it only with those parameters which differs.", "author": "senivam", "createdAt": "2020-12-05T21:02:47Z", "path": "tests/e2e/src/test/java/org/glassfish/jersey/tests/api/ContentDispositionTest.java", "diffHunk": "@@ -97,6 +97,136 @@ public void testToString() {\n         assertEquals(header, contentDisposition.toString());\n     }\n \n+    @Test\n+    public void testFileNameExt() {\n+        final Date date = new Date();\n+        final String dateString = HttpDateFormat.getPreferredDateFormat().format(date);\n+        final String fileName = \"test.file\";\n+\n+        try {\n+            //correct fileNameExt\n+            String fileNameExt = \"testExt.file\";\n+            final String prefixHeader = contentDispositionType + \";filename=\\\"\" + fileName + \"\\\";\"\n+                    + \"creation-date=\\\"\" + dateString + \"\\\";modification-date=\\\"\" + dateString + \"\\\";read-date=\\\"\"\n+                    + dateString + \"\\\";size=1222\" + \";name=\\\"testData\\\";\" + \"filename*=\\\"\";\n+            String header = prefixHeader + fileNameExt + \"\\\"\";\n+            ContentDisposition contentDisposition =\n+                    new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'abc%a1abc%a2%b1!#$&+.^_`|~-\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"UTF-8'us'fileName.txt\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //incorrect fileNameExt\n+            fileNameExt = \"utf-8'languageTooLong'fileName.txt\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"utf-8''a\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //incorrect fileNameExt\n+            fileNameExt = \"utf-8'lang-'a\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'a\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'a%a1\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //incorrect fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'a%z1\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'abc%a1abc%a2%b1\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //incorrect fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'a%\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'abc%a1abc%a2%b1!#$&+.^_`|~-\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'abc%a1abc%a2%b1!#$&+.^_`|~-\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"iso-8859-1'language-us'abc.TXT\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());\n+\n+            //incorrect fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //incorrect fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'c:\\\\file.txt\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //incorrect fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'home/file.txt\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //incorrect fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'\u674e.txt\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileName, contentDisposition.getFileName());\n+\n+            //correct fileNameExt\n+            fileNameExt = \"ISO-8859-1'language-us'FILEname.tXt\";\n+            header = prefixHeader + fileNameExt + \"\\\"\";\n+            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+            assertEquals(fileNameExt, contentDisposition.getFileName());", "originalCommit": "3089053bbc186c6ea6ed0fecd02cc8c864b521bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MTQ5OQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r537441499", "bodyText": "fixed", "author": "aserkes", "createdAt": "2020-12-07T11:43:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5MjIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "109e685d99d2458f18c5629af8521095b960625c", "chunk": "diff --git a/tests/e2e/src/test/java/org/glassfish/jersey/tests/api/ContentDispositionTest.java b/tests/e2e/src/test/java/org/glassfish/jersey/tests/api/ContentDispositionTest.java\nindex dbced0288..8f14b246e 100644\n--- a/tests/e2e/src/test/java/org/glassfish/jersey/tests/api/ContentDispositionTest.java\n+++ b/tests/e2e/src/test/java/org/glassfish/jersey/tests/api/ContentDispositionTest.java\n\n@@ -99,134 +99,104 @@ public class ContentDispositionTest {\n \n     @Test\n     public void testFileNameExt() {\n-        final Date date = new Date();\n-        final String dateString = HttpDateFormat.getPreferredDateFormat().format(date);\n         final String fileName = \"test.file\";\n-\n         try {\n-            //correct fileNameExt\n+            //incorrect fileNameExt - does not contain charset''\n             String fileNameExt = \"testExt.file\";\n-            final String prefixHeader = contentDispositionType + \";filename=\\\"\" + fileName + \"\\\";\"\n-                    + \"creation-date=\\\"\" + dateString + \"\\\";modification-date=\\\"\" + dateString + \"\\\";read-date=\\\"\"\n-                    + dateString + \"\\\";size=1222\" + \";name=\\\"testData\\\";\" + \"filename*=\\\"\";\n-            String header = prefixHeader + fileNameExt + \"\\\"\";\n-            ContentDisposition contentDisposition =\n-                    new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"ISO-8859-1'language-us'abc%a1abc%a2%b1!#$&+.^_`|~-\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"UTF-8'us'fileName.txt\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n-            //incorrect fileNameExt\n+            //incorrect fileNameExt - too long language tag\n             fileNameExt = \"utf-8'languageTooLong'fileName.txt\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"utf-8''a\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n-            //incorrect fileNameExt\n+            //incorrect fileNameExt - language tag does not match to pattern\n             fileNameExt = \"utf-8'lang-'a\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"ISO-8859-1'language-us'a\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"ISO-8859-1'language-us'a%a1\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n-            //incorrect fileNameExt\n+            //incorrect fileNameExt - ext-value contains an inappropriate symbol sequence (%z1)\n             fileNameExt = \"ISO-8859-1'language-us'a%z1\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"ISO-8859-1'language-us'abc%a1abc%a2%b1\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n-            //incorrect fileNameExt\n+            //incorrect fileNameExt - ext-value contains % without two HEXDIG\n             fileNameExt = \"ISO-8859-1'language-us'a%\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"ISO-8859-1'language-us'abc%a1abc%a2%b1!#$&+.^_`|~-\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"ISO-8859-1'language-us'abc%a1abc%a2%b1!#$&+.^_`|~-\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"iso-8859-1'language-us'abc.TXT\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n-            //incorrect fileNameExt\n+            //incorrect fileNameExt - no ext-value\n             fileNameExt = \"ISO-8859-1'language-us'\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n-            //incorrect fileNameExt\n+            //incorrect fileNameExt - ext-value contains forbidden symbol (\\)\n             fileNameExt = \"ISO-8859-1'language-us'c:\\\\file.txt\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n-            //incorrect fileNameExt\n+            //incorrect fileNameExt - ext-value contains forbidden symbol (/)\n             fileNameExt = \"ISO-8859-1'language-us'home/file.txt\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n-            //incorrect fileNameExt\n+            //incorrect fileNameExt - ext-value contains forbidden symbol (\u674e)\n             fileNameExt = \"ISO-8859-1'language-us'\u674e.txt\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileName, contentDisposition.getFileName());\n+            assertFileNameExt(fileName, fileName, fileNameExt);\n \n             //correct fileNameExt\n             fileNameExt = \"ISO-8859-1'language-us'FILEname.tXt\";\n-            header = prefixHeader + fileNameExt + \"\\\"\";\n-            contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n-            assertEquals(fileNameExt, contentDisposition.getFileName());\n+            assertFileNameExt(fileNameExt, fileName, fileNameExt);\n \n         } catch (ParseException ex) {\n             fail(ex.getMessage());\n         }\n     }\n \n+    private void assertFileNameExt(\n+            final String expectedFileName,\n+            final String actualFileName,\n+            final String actualFileNameExt\n+    ) throws ParseException {\n+        final Date date = new Date();\n+        final String dateString = HttpDateFormat.getPreferredDateFormat().format(date);\n+        final String prefixHeader = contentDispositionType + \";filename=\\\"\" + actualFileName + \"\\\";\"\n+                + \"creation-date=\\\"\" + dateString + \"\\\";modification-date=\\\"\" + dateString + \"\\\";read-date=\\\"\"\n+                + dateString + \"\\\";size=1222\" + \";name=\\\"testData\\\";\" + \"filename*=\\\"\";\n+        final String header = prefixHeader + actualFileNameExt + \"\\\"\";\n+        final ContentDisposition contentDisposition = new ContentDisposition(HttpHeaderReader.newInstance(header), true);\n+        assertEquals(expectedFileName, contentDisposition.getFileName());\n+    }\n+\n     protected void assertContentDisposition(final ContentDisposition contentDisposition, Date date) {\n         assertNotNull(contentDisposition);\n         assertEquals(contentDispositionType, contentDisposition.getType());\n"}}, {"oid": "109e685d99d2458f18c5629af8521095b960625c", "url": "https://github.com/eclipse-ee4j/jersey/commit/109e685d99d2458f18c5629af8521095b960625c", "message": "code refactoring\n\nSigned-off-by: Andrii Serkes <andrii.serkes@oracle.com>", "committedDate": "2020-12-07T11:42:19Z", "type": "commit"}, {"oid": "b8fac127278365f5de870fc43f6ff3b1c34a0c27", "url": "https://github.com/eclipse-ee4j/jersey/commit/b8fac127278365f5de870fc43f6ff3b1c34a0c27", "message": "Encode a filename parameter if it is not encoded, throw an exception if a filename parameter is not valid\n\nSigned-off-by: aserkes <andrii.serkes@oracle.com>", "committedDate": "2021-01-04T09:02:13Z", "type": "commit"}, {"oid": "b8fac127278365f5de870fc43f6ff3b1c34a0c27", "url": "https://github.com/eclipse-ee4j/jersey/commit/b8fac127278365f5de870fc43f6ff3b1c34a0c27", "message": "Encode a filename parameter if it is not encoded, throw an exception if a filename parameter is not valid\n\nSigned-off-by: aserkes <andrii.serkes@oracle.com>", "committedDate": "2021-01-04T09:02:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1Mjk4OA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r552252988", "bodyText": "This never happens in your tests, since isEncodedInUriFormat(fileNameExt) always fail on '. Perhaps you meant if (isEncodedInUriFormat(matcher.group(FILENAME_GROUP_NAME)))?\nBut then again, why you do if (matcher.matches()) ? If isEncodedInUriFormat(matcher.group(FILENAME_GROUP_NAME)) is true, we likely should not care about the charset. You are right, the obsolete RFC 5987 requires UTF-8 or ISO-8859-1, but then new RFC 8187 changes the charset to UTF-8, but then next month another RFC supporting UTF-16 can arise - do you see a reason for not supporting it at the moment when it is already encoded by the user?", "author": "jansupol", "createdAt": "2021-01-05T23:09:33Z", "path": "media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java", "diffHunk": "@@ -192,6 +205,42 @@ private void createParameters() throws ParseException {\n         size = createLong(\"size\");\n     }\n \n+    private String defineFileName() throws ParseException {\n+        final String fileName = parameters.get(\"filename\");\n+\n+        final String fileNameExt = parameters.get(\"filename*\");\n+        if (fileNameExt == null) {\n+            return fileName;\n+        }\n+\n+        final Matcher matcher = FILENAME_EXT_VALUE_PATTERN.matcher(fileNameExt);\n+        if (matcher.matches()) {\n+            if (isEncodedInUriFormat(fileNameExt)) {\n+                return fileNameExt;", "originalCommit": "b8fac127278365f5de870fc43f6ff3b1c34a0c27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2MTM2Mg==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r553361362", "bodyText": "You are right about if (isEncodedInUriFormat(matcher.group(FILENAME_GROUP_NAME))) and I fixed it.\nif (matcher.matches()) uses to check if filename* parameter has correct structure and also it uses to check language value in this parameter.\nI agree with you that it is not necessary to require only UTF-8 or ISO-8859-1 charset if filename is encoded, so I made necessary changes.", "author": "aserkes", "createdAt": "2021-01-07T14:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1Mjk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "7d4d5d588055c7fd62b5d47940c3a3daa24d1bb3", "chunk": "diff --git a/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java b/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\nindex 8f0bd09bc..ec3a19d02 100644\n--- a/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\n+++ b/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\n\n@@ -206,26 +208,31 @@ public class ContentDisposition {\n     }\n \n     private String defineFileName() throws ParseException {\n-        final String fileName = parameters.get(\"filename\");\n \n+        final String fileName = parameters.get(\"filename\");\n         final String fileNameExt = parameters.get(\"filename*\");\n+\n         if (fileNameExt == null) {\n             return fileName;\n         }\n \n         final Matcher matcher = FILENAME_EXT_VALUE_PATTERN.matcher(fileNameExt);\n+\n         if (matcher.matches()) {\n-            if (isEncodedInUriFormat(fileNameExt)) {\n+\n+            final String fileNameValueChars = matcher.group(FILENAME_GROUP_NAME);\n+            if (isFilenameValueCharsEncoded(fileNameValueChars)) {\n                 return fileNameExt;\n+            }\n+\n+            if (matcher.group(CHARSET_GROUP_NAME).equalsIgnoreCase(\"UTF-8\")) {\n+                return new StringBuilder(matcher.group(CHARSET_GROUP_NAME))\n+                        .append(\"'\")\n+                        .append(matcher.group(LANG_GROUP_NAME) == null ? \"\" : matcher.group(LANG_GROUP_NAME))\n+                        .append(\"'\")\n+                        .append(encodeToUriFormat(fileNameValueChars))\n+                        .toString();\n             } else {\n-                if (matcher.group(CHARSET_GROUP_NAME).equalsIgnoreCase(\"UTF-8\")) {\n-                    return new StringBuilder(matcher.group(CHARSET_GROUP_NAME))\n-                            .append(\"'\")\n-                            .append(matcher.group(LANG_GROUP_NAME) == null ? \"\" : matcher.group(LANG_GROUP_NAME))\n-                            .append(\"'\")\n-                            .append(encodeToUriFormat(matcher.group(FILENAME_GROUP_NAME)))\n-                            .toString();\n-                }\n                 throw new ParseException(matcher.group(CHARSET_GROUP_NAME) + \" charset is not supported\", 0);\n             }\n         }\n"}}, {"oid": "7d4d5d588055c7fd62b5d47940c3a3daa24d1bb3", "url": "https://github.com/eclipse-ee4j/jersey/commit/7d4d5d588055c7fd62b5d47940c3a3daa24d1bb3", "message": "All charsets for the filename* parameter are permitted\n\nSigned-off-by: aserkes <andrii.serkes@oracle.com>", "committedDate": "2021-01-07T14:20:17Z", "type": "commit"}, {"oid": "7d4d5d588055c7fd62b5d47940c3a3daa24d1bb3", "url": "https://github.com/eclipse-ee4j/jersey/commit/7d4d5d588055c7fd62b5d47940c3a3daa24d1bb3", "message": "All charsets for the filename* parameter are permitted\n\nSigned-off-by: aserkes <andrii.serkes@oracle.com>", "committedDate": "2021-01-07T14:20:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYzNjgzNA==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r553636834", "bodyText": "Regexps are possibly not the fastest piece of code. Can you store the result of matcher.group(LANG_GROUP_NAME) and reuse?", "author": "jansupol", "createdAt": "2021-01-07T22:45:07Z", "path": "media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java", "diffHunk": "@@ -192,6 +207,47 @@ private void createParameters() throws ParseException {\n         size = createLong(\"size\");\n     }\n \n+    private String defineFileName() throws ParseException {\n+\n+        final String fileName = parameters.get(\"filename\");\n+        final String fileNameExt = parameters.get(\"filename*\");\n+\n+        if (fileNameExt == null) {\n+            return fileName;\n+        }\n+\n+        final Matcher matcher = FILENAME_EXT_VALUE_PATTERN.matcher(fileNameExt);\n+\n+        if (matcher.matches()) {\n+\n+            final String fileNameValueChars = matcher.group(FILENAME_GROUP_NAME);\n+            if (isFilenameValueCharsEncoded(fileNameValueChars)) {\n+                return fileNameExt;\n+            }\n+\n+            if (matcher.group(CHARSET_GROUP_NAME).equalsIgnoreCase(\"UTF-8\")) {\n+                return new StringBuilder(matcher.group(CHARSET_GROUP_NAME))\n+                        .append(\"'\")\n+                        .append(matcher.group(LANG_GROUP_NAME) == null ? \"\" : matcher.group(LANG_GROUP_NAME))", "originalCommit": "7d4d5d588055c7fd62b5d47940c3a3daa24d1bb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NDk1NQ==", "url": "https://github.com/eclipse-ee4j/jersey/pull/4647#discussion_r553944955", "bodyText": "Done.", "author": "aserkes", "createdAt": "2021-01-08T13:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYzNjgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "b523c015e32be84362493f939233ddeda0cb6f9f", "chunk": "diff --git a/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java b/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\nindex ec3a19d02..cb2ee378d 100644\n--- a/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\n+++ b/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/ContentDisposition.java\n\n@@ -225,15 +225,17 @@ public class ContentDisposition {\n                 return fileNameExt;\n             }\n \n+            final String charset = matcher.group(CHARSET_GROUP_NAME);\n             if (matcher.group(CHARSET_GROUP_NAME).equalsIgnoreCase(\"UTF-8\")) {\n-                return new StringBuilder(matcher.group(CHARSET_GROUP_NAME))\n+                final String language = matcher.group(LANG_GROUP_NAME);\n+                return new StringBuilder(charset)\n                         .append(\"'\")\n-                        .append(matcher.group(LANG_GROUP_NAME) == null ? \"\" : matcher.group(LANG_GROUP_NAME))\n+                        .append(language == null ? \"\" : language)\n                         .append(\"'\")\n                         .append(encodeToUriFormat(fileNameValueChars))\n                         .toString();\n             } else {\n-                throw new ParseException(matcher.group(CHARSET_GROUP_NAME) + \" charset is not supported\", 0);\n+                throw new ParseException(charset + \" charset is not supported\", 0);\n             }\n         }\n \n"}}, {"oid": "b523c015e32be84362493f939233ddeda0cb6f9f", "url": "https://github.com/eclipse-ee4j/jersey/commit/b523c015e32be84362493f939233ddeda0cb6f9f", "message": "Refactoring\n\nSigned-off-by: aserkes <andrii.serkes@oracle.com>", "committedDate": "2021-01-09T17:06:06Z", "type": "commit"}, {"oid": "b523c015e32be84362493f939233ddeda0cb6f9f", "url": "https://github.com/eclipse-ee4j/jersey/commit/b523c015e32be84362493f939233ddeda0cb6f9f", "message": "Refactoring\n\nSigned-off-by: aserkes <andrii.serkes@oracle.com>", "committedDate": "2021-01-09T17:06:06Z", "type": "forcePushed"}, {"oid": "10ca1544160d98ecb4a1a943d562478ced07bc55", "url": "https://github.com/eclipse-ee4j/jersey/commit/10ca1544160d98ecb4a1a943d562478ced07bc55", "message": "Update year in Copyright comments\n\nSigned-off-by: aserkes <andrii.serkes@oracle.com>", "committedDate": "2021-01-13T10:10:43Z", "type": "commit"}]}