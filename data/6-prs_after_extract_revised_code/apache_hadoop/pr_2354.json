{"pr_number": 2354, "pr_title": "HADOOP-17281 Implement FileSystem.listStatusIterator() in S3AFileSystem", "pr_createdAt": "2020-10-01T06:56:27Z", "pr_url": "https://github.com/apache/hadoop/pull/2354", "timeline": [{"oid": "a981d9be789c163283ea4c1c9379e9933412f7b8", "url": "https://github.com/apache/hadoop/commit/a981d9be789c163283ea4c1c9379e9933412f7b8", "message": "HADOOP-17281 Implement FileSystem.listStatusIterator() in S3AFileSystem", "committedDate": "2020-10-01T06:52:53Z", "type": "commit"}, {"oid": "63d539eee3c0735248f9aafcd9a8ee58fe809d95", "url": "https://github.com/apache/hadoop/commit/63d539eee3c0735248f9aafcd9a8ee58fe809d95", "message": "HADOOP-17281  Review comments", "committedDate": "2020-10-05T13:12:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMDU4Mg==", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r499720582", "bodyText": "same: List as variable type\nActually, it may make sense to type this method\nRemoteIterator<T extends FileStatus>\n\nand have\nList<T>\n\nand\nRemoteIterator<T>\n\nwhere appropriate", "author": "steveloughran", "createdAt": "2020-10-05T16:21:29Z", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java", "diffHunk": "@@ -1453,6 +1453,52 @@ public static TreeScanResults treeWalk(FileSystem fs, Path path)\n     return list;\n   }\n \n+  /**\n+   * Convert a remote iterator over file status results into a list.\n+   * The utility equivalents in commons collection and guava cannot be\n+   * used here, as this is a different interface, one whose operators\n+   * can throw IOEs.\n+   * @param iterator input iterator\n+   * @return the file status entries as a list.\n+   * @throws IOException\n+   */\n+  public static List<? extends FileStatus> iteratorToList(\n+          RemoteIterator<? extends FileStatus> iterator) throws IOException {\n+    ArrayList<FileStatus> list = new ArrayList<>();\n+    while (iterator.hasNext()) {\n+      list.add(iterator.next());\n+    }\n+    return list;\n+  }\n+\n+\n+  /**\n+   * Convert a remote iterator over file status results into a list.\n+   * This uses {@link RemoteIterator#next()} calls only, expecting\n+   * a raised {@link NoSuchElementException} exception to indicate that\n+   * the end of the listing has been reached. This iteration strategy is\n+   * designed to verify that the implementation of the remote iterator\n+   * generates results and terminates consistently with the {@code hasNext/next}\n+   * iteration. More succinctly \"verifies that the {@code next()} operator\n+   * isn't relying on {@code hasNext()} to always be called during an iteration.\n+   * @param iterator input iterator\n+   * @return the status entries as a list.\n+   * @throws IOException IO problems\n+   */\n+  @SuppressWarnings(\"InfiniteLoopStatement\")\n+  public static List<? extends FileStatus> iteratorToListThroughNextCallsAlone(\n+          RemoteIterator<? extends FileStatus> iterator) throws IOException {\n+    ArrayList<FileStatus> list = new ArrayList<>();", "originalCommit": "63d539eee3c0735248f9aafcd9a8ee58fe809d95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d658f83bb7acf96ce57816924ecc2b84cbb3e4f", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java\nindex a82d0e3938a..57fa1ae05bd 100644\n--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java\n+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java\n\n@@ -1462,9 +1462,9 @@ public static TreeScanResults treeWalk(FileSystem fs, Path path)\n    * @return the file status entries as a list.\n    * @throws IOException\n    */\n-  public static List<? extends FileStatus> iteratorToList(\n-          RemoteIterator<? extends FileStatus> iterator) throws IOException {\n-    ArrayList<FileStatus> list = new ArrayList<>();\n+  public static <T extends FileStatus> List<T> iteratorToList(\n+          RemoteIterator<T> iterator) throws IOException {\n+    List<T> list = new ArrayList<>();\n     while (iterator.hasNext()) {\n       list.add(iterator.next());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMzgzMQ==", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r499723831", "bodyText": "if you can have both sets of listing as collections, use Assertions.assertThat() as you've done earlier", "author": "steveloughran", "createdAt": "2020-10-05T16:26:52Z", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractRootDirectoryTest.java", "diffHunk": "@@ -242,6 +243,13 @@ public void testSimpleRootListing() throws IOException {\n             + \"listStatus = \" + listStatusResult\n             + \"listFiles = \" + listFilesResult,\n         fileList.size() <= statuses.length);\n+    List<FileStatus> statusList = (List<FileStatus>) iteratorToList(\n+            fs.listStatusIterator(root));\n+    String listStatusItrRes = join(statusList, \"\\n\");", "originalCommit": "63d539eee3c0735248f9aafcd9a8ee58fe809d95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d658f83bb7acf96ce57816924ecc2b84cbb3e4f", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractRootDirectoryTest.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractRootDirectoryTest.java\nindex c53f63c4d8c..201434cfe4f 100644\n--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractRootDirectoryTest.java\n+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractRootDirectoryTest.java\n\n@@ -245,11 +248,10 @@ public void testSimpleRootListing() throws IOException {\n         fileList.size() <= statuses.length);\n     List<FileStatus> statusList = (List<FileStatus>) iteratorToList(\n             fs.listStatusIterator(root));\n-    String listStatusItrRes = join(statusList, \"\\n\");\n-    assertEquals(\"listStatus(/) vs listStatusIterator(/) with \\n\"\n-                    + \"listStatus =\" + listStatusResult\n-                    +\" listLocatedStatus = \" + listStatusItrRes,\n-            statuses.length, statusList.size());\n+    Assertions.assertThat(statusList)\n+            .describedAs(\"Result of listStatus(/) and listStatusIterator(/)\" +\n+                    \"must match\")\n+            .hasSameElementsAs(Arrays.stream(statuses).collect(Collectors.toList()));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNDY2Nw==", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r499724667", "bodyText": "AssertionsAssertThat to assert that the list size == 1", "author": "steveloughran", "createdAt": "2020-10-05T16:28:16Z", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java", "diffHunk": "@@ -322,6 +355,22 @@ public void testListStatusFile() throws Throwable {\n     verifyStatusArrayMatchesFile(f, getFileSystem().listStatus(f));\n   }\n \n+  @Test\n+  public void testListStatusIteratorFile() throws Throwable {\n+    describe(\"test the listStatusIterator(path) on a file\");\n+    Path f = touchf(\"listStItrFile\");\n+    List<FileStatus> statusList = (List<FileStatus>) iteratorToList(\n+            getFileSystem().listStatusIterator(f));\n+    assertEquals(\"size of file list returned\", 1, statusList.size());\n+    assertIsNamedFile(f, statusList.get(0));\n+    List<FileStatus> statusList2 =\n+            (List<FileStatus>) iteratorToListThroughNextCallsAlone(\n+                    getFileSystem().listStatusIterator(f));\n+    assertEquals(\"size of file list returned through next() calls\",", "originalCommit": "63d539eee3c0735248f9aafcd9a8ee58fe809d95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d658f83bb7acf96ce57816924ecc2b84cbb3e4f", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java\nindex a8e6757f53c..f888886a9ee 100644\n--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java\n+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java\n\n@@ -359,16 +357,39 @@ public void testListStatusFile() throws Throwable {\n   public void testListStatusIteratorFile() throws Throwable {\n     describe(\"test the listStatusIterator(path) on a file\");\n     Path f = touchf(\"listStItrFile\");\n+\n     List<FileStatus> statusList = (List<FileStatus>) iteratorToList(\n             getFileSystem().listStatusIterator(f));\n-    assertEquals(\"size of file list returned\", 1, statusList.size());\n-    assertIsNamedFile(f, statusList.get(0));\n+    validateListingForFile(f, statusList, false);\n+\n     List<FileStatus> statusList2 =\n             (List<FileStatus>) iteratorToListThroughNextCallsAlone(\n                     getFileSystem().listStatusIterator(f));\n-    assertEquals(\"size of file list returned through next() calls\",\n-            1, statusList2.size());\n-    assertIsNamedFile(f, statusList2.get(0));\n+    validateListingForFile(f, statusList2, true);\n+  }\n+\n+  /**\n+   * Validate listing result for an input path which is file.\n+   * @param f file.\n+   * @param statusList list status of a file.\n+   * @param nextCallAlone whether the listing generated just using\n+   *                      next() calls.\n+   */\n+  private void validateListingForFile(Path f,\n+                                      List<FileStatus> statusList,\n+                                      boolean nextCallAlone) {\n+    String msg = String.format(\"size of file list returned using %s should \" +\n+            \"be 1\", nextCallAlone ?\n+            \"next() calls alone\" : \"hasNext() and next() calls\");\n+    Assertions.assertThat(statusList)\n+            .describedAs(msg)\n+            .hasSize(1);\n+    Assertions.assertThat(statusList.get(0).getPath().toString())\n+            .describedAs(\"path returned should match with the input path\")\n+            .isEqualTo(f.toString());\n+    Assertions.assertThat(statusList.get(0).isFile())\n+            .describedAs(\"path returned should be a file\")\n+            .isEqualTo(true);\n   }\n \n   @Test\n"}}, {"oid": "1d658f83bb7acf96ce57816924ecc2b84cbb3e4f", "url": "https://github.com/apache/hadoop/commit/1d658f83bb7acf96ce57816924ecc2b84cbb3e4f", "message": "HADOOP-17281 some more review comments, checkstyle.", "committedDate": "2020-10-06T09:13:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI1MzUwOQ==", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r500253509", "bodyText": "any reason not to leave both as Path and let Path.equals() to do the work? It compares URIs", "author": "steveloughran", "createdAt": "2020-10-06T12:57:42Z", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java", "diffHunk": "@@ -359,16 +357,39 @@ public void testListStatusFile() throws Throwable {\n   public void testListStatusIteratorFile() throws Throwable {\n     describe(\"test the listStatusIterator(path) on a file\");\n     Path f = touchf(\"listStItrFile\");\n+\n     List<FileStatus> statusList = (List<FileStatus>) iteratorToList(\n             getFileSystem().listStatusIterator(f));\n-    assertEquals(\"size of file list returned\", 1, statusList.size());\n-    assertIsNamedFile(f, statusList.get(0));\n+    validateListingForFile(f, statusList, false);\n+\n     List<FileStatus> statusList2 =\n             (List<FileStatus>) iteratorToListThroughNextCallsAlone(\n                     getFileSystem().listStatusIterator(f));\n-    assertEquals(\"size of file list returned through next() calls\",\n-            1, statusList2.size());\n-    assertIsNamedFile(f, statusList2.get(0));\n+    validateListingForFile(f, statusList2, true);\n+  }\n+\n+  /**\n+   * Validate listing result for an input path which is file.\n+   * @param f file.\n+   * @param statusList list status of a file.\n+   * @param nextCallAlone whether the listing generated just using\n+   *                      next() calls.\n+   */\n+  private void validateListingForFile(Path f,\n+                                      List<FileStatus> statusList,\n+                                      boolean nextCallAlone) {\n+    String msg = String.format(\"size of file list returned using %s should \" +\n+            \"be 1\", nextCallAlone ?\n+            \"next() calls alone\" : \"hasNext() and next() calls\");\n+    Assertions.assertThat(statusList)\n+            .describedAs(msg)\n+            .hasSize(1);\n+    Assertions.assertThat(statusList.get(0).getPath().toString())\n+            .describedAs(\"path returned should match with the input path\")", "originalCommit": "1d658f83bb7acf96ce57816924ecc2b84cbb3e4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90efdfa29c0dede97f5a2a4e211d81ddf0c98e44", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java\nindex f888886a9ee..c0d9733bbb9 100644\n--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java\n+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java\n\n@@ -384,9 +384,9 @@ private void validateListingForFile(Path f,\n     Assertions.assertThat(statusList)\n             .describedAs(msg)\n             .hasSize(1);\n-    Assertions.assertThat(statusList.get(0).getPath().toString())\n+    Assertions.assertThat(statusList.get(0).getPath())\n             .describedAs(\"path returned should match with the input path\")\n-            .isEqualTo(f.toString());\n+            .isEqualTo(f);\n     Assertions.assertThat(statusList.get(0).isFile())\n             .describedAs(\"path returned should be a file\")\n             .isEqualTo(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI1NDcxOA==", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r500254718", "bodyText": "as discussed: better to fix DirListingIterator to match RemoteIterator API; we can consider it's failure a bug", "author": "steveloughran", "createdAt": "2020-10-06T12:59:23Z", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java", "diffHunk": "@@ -1520,7 +1521,8 @@ public static TreeScanResults treeWalk(FileSystem fs, Path path)\n       while (true) {\n         list.add(iterator.next());\n       }\n-    } catch (NoSuchElementException expected) {\n+    } catch (NoSuchElementException | IllegalStateException expected) {", "originalCommit": "1d658f83bb7acf96ce57816924ecc2b84cbb3e4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90efdfa29c0dede97f5a2a4e211d81ddf0c98e44", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java\nindex 57fa1ae05bd..39a41d01c45 100644\n--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java\n+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java\n\n@@ -1521,8 +1520,7 @@ public static TreeScanResults treeWalk(FileSystem fs, Path path)\n       while (true) {\n         list.add(iterator.next());\n       }\n-    } catch (NoSuchElementException | IllegalStateException expected) {\n-      // DirListingIterator.next() throws IllegalStateException\n+    } catch (NoSuchElementException expected) {\n       // ignored\n     }\n     return list;\n"}}, {"oid": "90efdfa29c0dede97f5a2a4e211d81ddf0c98e44", "url": "https://github.com/apache/hadoop/commit/90efdfa29c0dede97f5a2a4e211d81ddf0c98e44", "message": "HADOOP-17300 FileSystem.DirListingIterator.next() call should return NoSuchElementException", "committedDate": "2020-10-06T13:31:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4NDQ5Nw==", "url": "https://github.com/apache/hadoop/pull/2354#discussion_r500284497", "bodyText": "Please remove this before merging. Was just added to trigger hdfs tests by yetus.", "author": "mukund-thakur", "createdAt": "2020-10-06T13:38:23Z", "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -1107,6 +1107,7 @@ public Void next(final FileSystem fs, final Path p)\n     }\n \n     HdfsFileStatus[] partialListing = thisListing.getPartialListing();\n+", "originalCommit": "90efdfa29c0dede97f5a2a4e211d81ddf0c98e44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e493c0a7a412c4b021361e7da7e69b39f52ba0e", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java b/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java\nindex 41190130093..f4fb621b29e 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java\n\n@@ -1107,7 +1107,6 @@ public Void next(final FileSystem fs, final Path p)\n     }\n \n     HdfsFileStatus[] partialListing = thisListing.getPartialListing();\n-\n     if (!thisListing.hasMore()) { // got all entries of the directory\n       FileStatus[] stats = new FileStatus[partialListing.length];\n       for (int i = 0; i < partialListing.length; i++) {\n"}}, {"oid": "1e493c0a7a412c4b021361e7da7e69b39f52ba0e", "url": "https://github.com/apache/hadoop/commit/1e493c0a7a412c4b021361e7da7e69b39f52ba0e", "message": "checkstyle fix and removing extra line from DistributedFileSystem", "committedDate": "2020-10-07T11:12:03Z", "type": "commit"}]}