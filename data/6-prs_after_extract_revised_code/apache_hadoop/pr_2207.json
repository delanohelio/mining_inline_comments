{"pr_number": 2207, "pr_title": "HADOOP-17074 Optimise s3a Listing to be fully asynchronous.", "pr_createdAt": "2020-08-10T09:09:28Z", "pr_url": "https://github.com/apache/hadoop/pull/2207", "timeline": [{"oid": "7d4126a745103e0874950b687948d90feae8b7e1", "url": "https://github.com/apache/hadoop/commit/7d4126a745103e0874950b687948d90feae8b7e1", "message": "HADOOP-17074 Optimise s3a Listing to be fully asynchronous.", "committedDate": "2020-08-10T08:25:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwNTQzNg==", "url": "https://github.com/apache/hadoop/pull/2207#discussion_r467905436", "bodyText": "move the log into fetchNextBatchAsyncIfPresent", "author": "steveloughran", "createdAt": "2020-08-10T13:32:22Z", "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java", "diffHunk": "@@ -761,29 +777,44 @@ public boolean hasNext() throws IOException {\n     @Retries.RetryTranslated\n     public S3ListResult next() throws IOException {\n       if (firstListing) {\n-        // on the first listing, don't request more data.\n-        // Instead just clear the firstListing flag so that it future calls\n-        // will request new data.\n+        // clear the firstListing flag for future calls.\n         firstListing = false;\n+        // Calculating the result of last async list call.\n+        objects = awaitFuture(s3ListResultFuture);\n+        fetchNextBatchAsyncIfPresent();\n       } else {\n         try {\n-          if (!objects.isTruncated()) {\n+          if (objectsPrev!= null && !objectsPrev.isTruncated()) {\n             // nothing more to request: fail.\n             throw new NoSuchElementException(\"No more results in listing of \"\n-                + listPath);\n+                    + listPath);\n           }\n-          // need to request a new set of objects.\n+          // Calculating the result of last async list call.\n+          objects = awaitFuture(s3ListResultFuture);\n+          // Requesting next batch of results.\n           LOG.debug(\"[{}], Requesting next {} objects under {}\",", "originalCommit": "7d4126a745103e0874950b687948d90feae8b7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "744ef7bd8e31f4db1e16f282f31a9ad53753a960", "chunk": "diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java\nindex 1336fd96abe..07f766e89a4 100644\n--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java\n+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java\n\n@@ -792,8 +792,6 @@ public S3ListResult next() throws IOException {\n           // Calculating the result of last async list call.\n           objects = awaitFuture(s3ListResultFuture);\n           // Requesting next batch of results.\n-          LOG.debug(\"[{}], Requesting next {} objects under {}\",\n-              listingCount, maxKeys, listPath);\n           fetchNextBatchAsyncIfPresent();\n           listingCount++;\n           LOG.debug(\"New listing status: {}\", this);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwNjE4OQ==", "url": "https://github.com/apache/hadoop/pull/2207#discussion_r467906189", "bodyText": "make private unless someone needs to get at these in mockito tests", "author": "steveloughran", "createdAt": "2020-08-10T13:33:29Z", "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java", "diffHunk": "@@ -1956,6 +1956,14 @@ protected S3ListResult listObjects(S3ListRequest request) throws IOException {\n     }\n   }\n \n+  protected CompletableFuture<S3ListResult> listObjectsAsync(S3ListRequest request) {", "originalCommit": "7d4126a745103e0874950b687948d90feae8b7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "744ef7bd8e31f4db1e16f282f31a9ad53753a960", "chunk": "diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java\nindex 4dd5ddd513c..4e46dc6717f 100644\n--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java\n+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java\n\n@@ -1956,14 +1960,6 @@ protected S3ListResult listObjects(S3ListRequest request) throws IOException {\n     }\n   }\n \n-  protected CompletableFuture<S3ListResult> listObjectsAsync(S3ListRequest request) {\n-    return submit(\n-            unboundedThreadPool,\n-            () -> {\n-              return listObjects(request);\n-            });\n-  }\n-\n   /**\n    * Validate the list arguments with this bucket's settings.\n    * @param request the request to validate\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwNjk2OA==", "url": "https://github.com/apache/hadoop/pull/2207#discussion_r467906968", "bodyText": "get a WriteOperationHelper instance and invoke via that", "author": "steveloughran", "createdAt": "2020-08-10T13:34:43Z", "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java", "diffHunk": "@@ -2244,8 +2263,9 @@ public UploadInfo putObject(PutObjectRequest putObjectRequest) {\n    * not be saved to the metadata store and\n    * fs.s3a.metadatastore.fail.on.write.error=true\n    */\n+  @VisibleForTesting\n   @Retries.OnceRaw(\"For PUT; post-PUT actions are RetryTranslated\")\n-  PutObjectResult putObjectDirect(PutObjectRequest putObjectRequest)\n+  public PutObjectResult putObjectDirect(PutObjectRequest putObjectRequest)", "originalCommit": "7d4126a745103e0874950b687948d90feae8b7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "744ef7bd8e31f4db1e16f282f31a9ad53753a960", "chunk": "diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java\nindex 4dd5ddd513c..4e46dc6717f 100644\n--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java\n+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java\n\n@@ -2265,7 +2250,7 @@ public UploadInfo putObject(PutObjectRequest putObjectRequest) {\n    */\n   @VisibleForTesting\n   @Retries.OnceRaw(\"For PUT; post-PUT actions are RetryTranslated\")\n-  public PutObjectResult putObjectDirect(PutObjectRequest putObjectRequest)\n+  PutObjectResult putObjectDirect(PutObjectRequest putObjectRequest)\n       throws AmazonClientException, MetadataPersistenceException {\n     long len = getPutRequestLength(putObjectRequest);\n     LOG.debug(\"PUT {} bytes to {}\", len, putObjectRequest.getKey());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNDEwOQ==", "url": "https://github.com/apache/hadoop/pull/2207#discussion_r467914109", "bodyText": "any reason to not use a local variable here?", "author": "steveloughran", "createdAt": "2020-08-10T13:45:31Z", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java", "diffHunk": "@@ -137,6 +159,78 @@ public void testListOperations() throws Throwable {\n     }\n   }\n \n+  @Test\n+  public void testMultiPagesListingPerformanceAndCorrectness() throws Throwable {\n+    describe(\"Check performance and correctness for multi page listing \" +\n+            \"using different listing api\");\n+    Path dir = path(this.getMethodName());\n+    Configuration conf = getConfigurationWithConfiguredBatchSize(10);\n+    fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf);", "originalCommit": "7d4126a745103e0874950b687948d90feae8b7e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgzNzQ0NA==", "url": "https://github.com/apache/hadoop/pull/2207#discussion_r469837444", "bodyText": "Initially there were two tests so I thought of reusing the class level variable and closing the fs in teardown.\nSince there is just one test, I have moved to a local variable and closing using try-with-resources.", "author": "mukund-thakur", "createdAt": "2020-08-13T09:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNDEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "744ef7bd8e31f4db1e16f282f31a9ad53753a960", "chunk": "diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\nindex 7db72b1f434..5855b16b7bd 100644\n--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\n+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\n\n@@ -163,22 +160,27 @@ public void testListOperations() throws Throwable {\n   public void testMultiPagesListingPerformanceAndCorrectness() throws Throwable {\n     describe(\"Check performance and correctness for multi page listing \" +\n             \"using different listing api\");\n-    Path dir = path(this.getMethodName());\n-    Configuration conf = getConfigurationWithConfiguredBatchSize(10);\n-    fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf);\n-    assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n-    fs.create(dir);\n+    final Path dir = methodPath();\n+    final int batchSize = 10;\n+    final int numOfPutRequests = 1000;\n+    final int eachFileProcessingTime = 10;\n+    final int numOfPutThreads = 50;\n+    final Configuration conf = getConfigurationWithConfiguredBatchSize(batchSize);\n     final InputStream im = new InputStream() {\n       @Override\n       public int read() throws IOException {\n         return -1;\n       }\n     };\n-    final int numOfPutRequests = 500;\n     final List<String> originalListOfFiles = new ArrayList<>();\n     List<Callable<PutObjectResult>> putObjectRequests = new ArrayList<>();\n-    ExecutorService executorService = Executors.newFixedThreadPool(50);\n-    try {\n+    ExecutorService executorService = Executors\n+            .newFixedThreadPool(numOfPutThreads);\n+\n+    NanoTimer uploadTimer = new NanoTimer();\n+    try(S3AFileSystem fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf)) {\n+      fs.create(dir);\n+      assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n       for (int i=0; i<numOfPutRequests; i++) {\n         Path file = new Path(dir, String.format(\"file-%03d\", i));\n         originalListOfFiles.add(file.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNDE4Nw==", "url": "https://github.com/apache/hadoop/pull/2207#discussion_r467914187", "bodyText": "methodPath()", "author": "steveloughran", "createdAt": "2020-08-10T13:45:39Z", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java", "diffHunk": "@@ -137,6 +159,78 @@ public void testListOperations() throws Throwable {\n     }\n   }\n \n+  @Test\n+  public void testMultiPagesListingPerformanceAndCorrectness() throws Throwable {\n+    describe(\"Check performance and correctness for multi page listing \" +\n+            \"using different listing api\");\n+    Path dir = path(this.getMethodName());", "originalCommit": "7d4126a745103e0874950b687948d90feae8b7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "744ef7bd8e31f4db1e16f282f31a9ad53753a960", "chunk": "diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\nindex 7db72b1f434..5855b16b7bd 100644\n--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\n+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\n\n@@ -163,22 +160,27 @@ public void testListOperations() throws Throwable {\n   public void testMultiPagesListingPerformanceAndCorrectness() throws Throwable {\n     describe(\"Check performance and correctness for multi page listing \" +\n             \"using different listing api\");\n-    Path dir = path(this.getMethodName());\n-    Configuration conf = getConfigurationWithConfiguredBatchSize(10);\n-    fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf);\n-    assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n-    fs.create(dir);\n+    final Path dir = methodPath();\n+    final int batchSize = 10;\n+    final int numOfPutRequests = 1000;\n+    final int eachFileProcessingTime = 10;\n+    final int numOfPutThreads = 50;\n+    final Configuration conf = getConfigurationWithConfiguredBatchSize(batchSize);\n     final InputStream im = new InputStream() {\n       @Override\n       public int read() throws IOException {\n         return -1;\n       }\n     };\n-    final int numOfPutRequests = 500;\n     final List<String> originalListOfFiles = new ArrayList<>();\n     List<Callable<PutObjectResult>> putObjectRequests = new ArrayList<>();\n-    ExecutorService executorService = Executors.newFixedThreadPool(50);\n-    try {\n+    ExecutorService executorService = Executors\n+            .newFixedThreadPool(numOfPutThreads);\n+\n+    NanoTimer uploadTimer = new NanoTimer();\n+    try(S3AFileSystem fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf)) {\n+      fs.create(dir);\n+      assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n       for (int i=0; i<numOfPutRequests; i++) {\n         Path file = new Path(dir, String.format(\"file-%03d\", i));\n         originalListOfFiles.add(file.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNDc2Mw==", "url": "https://github.com/apache/hadoop/pull/2207#discussion_r467914763", "bodyText": "Add some tracking/logging of how long it took to create all these files.", "author": "steveloughran", "createdAt": "2020-08-10T13:46:34Z", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java", "diffHunk": "@@ -137,6 +159,78 @@ public void testListOperations() throws Throwable {\n     }\n   }\n \n+  @Test\n+  public void testMultiPagesListingPerformanceAndCorrectness() throws Throwable {\n+    describe(\"Check performance and correctness for multi page listing \" +\n+            \"using different listing api\");\n+    Path dir = path(this.getMethodName());\n+    Configuration conf = getConfigurationWithConfiguredBatchSize(10);\n+    fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf);\n+    assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n+    fs.create(dir);\n+    final InputStream im = new InputStream() {\n+      @Override\n+      public int read() throws IOException {\n+        return -1;\n+      }\n+    };\n+    final int numOfPutRequests = 500;\n+    final List<String> originalListOfFiles = new ArrayList<>();\n+    List<Callable<PutObjectResult>> putObjectRequests = new ArrayList<>();\n+    ExecutorService executorService = Executors.newFixedThreadPool(50);\n+    try {\n+      for (int i=0; i<numOfPutRequests; i++) {\n+        Path file = new Path(dir, String.format(\"file-%03d\", i));\n+        originalListOfFiles.add(file.toString());\n+        ObjectMetadata om = fs.newObjectMetadata(0L);\n+        PutObjectRequest put = new PutObjectRequest(fs.getBucket(),\n+                fs.pathToKey(file),\n+                im,\n+                om);\n+        putObjectRequests.add(() -> fs.putObjectDirect(put));\n+      }\n+      executorService.invokeAll(putObjectRequests);", "originalCommit": "7d4126a745103e0874950b687948d90feae8b7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "744ef7bd8e31f4db1e16f282f31a9ad53753a960", "chunk": "diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\nindex 7db72b1f434..5855b16b7bd 100644\n--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\n+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\n\n@@ -163,22 +160,27 @@ public void testListOperations() throws Throwable {\n   public void testMultiPagesListingPerformanceAndCorrectness() throws Throwable {\n     describe(\"Check performance and correctness for multi page listing \" +\n             \"using different listing api\");\n-    Path dir = path(this.getMethodName());\n-    Configuration conf = getConfigurationWithConfiguredBatchSize(10);\n-    fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf);\n-    assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n-    fs.create(dir);\n+    final Path dir = methodPath();\n+    final int batchSize = 10;\n+    final int numOfPutRequests = 1000;\n+    final int eachFileProcessingTime = 10;\n+    final int numOfPutThreads = 50;\n+    final Configuration conf = getConfigurationWithConfiguredBatchSize(batchSize);\n     final InputStream im = new InputStream() {\n       @Override\n       public int read() throws IOException {\n         return -1;\n       }\n     };\n-    final int numOfPutRequests = 500;\n     final List<String> originalListOfFiles = new ArrayList<>();\n     List<Callable<PutObjectResult>> putObjectRequests = new ArrayList<>();\n-    ExecutorService executorService = Executors.newFixedThreadPool(50);\n-    try {\n+    ExecutorService executorService = Executors\n+            .newFixedThreadPool(numOfPutThreads);\n+\n+    NanoTimer uploadTimer = new NanoTimer();\n+    try(S3AFileSystem fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf)) {\n+      fs.create(dir);\n+      assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n       for (int i=0; i<numOfPutRequests; i++) {\n         Path file = new Path(dir, String.format(\"file-%03d\", i));\n         originalListOfFiles.add(file.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNTA5OQ==", "url": "https://github.com/apache/hadoop/pull/2207#discussion_r467915099", "bodyText": "use a shorter name so the lines after are less wide", "author": "steveloughran", "createdAt": "2020-08-10T13:47:03Z", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java", "diffHunk": "@@ -137,6 +159,78 @@ public void testListOperations() throws Throwable {\n     }\n   }\n \n+  @Test\n+  public void testMultiPagesListingPerformanceAndCorrectness() throws Throwable {\n+    describe(\"Check performance and correctness for multi page listing \" +\n+            \"using different listing api\");\n+    Path dir = path(this.getMethodName());\n+    Configuration conf = getConfigurationWithConfiguredBatchSize(10);\n+    fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf);\n+    assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n+    fs.create(dir);\n+    final InputStream im = new InputStream() {\n+      @Override\n+      public int read() throws IOException {\n+        return -1;\n+      }\n+    };\n+    final int numOfPutRequests = 500;\n+    final List<String> originalListOfFiles = new ArrayList<>();\n+    List<Callable<PutObjectResult>> putObjectRequests = new ArrayList<>();\n+    ExecutorService executorService = Executors.newFixedThreadPool(50);\n+    try {\n+      for (int i=0; i<numOfPutRequests; i++) {\n+        Path file = new Path(dir, String.format(\"file-%03d\", i));\n+        originalListOfFiles.add(file.toString());\n+        ObjectMetadata om = fs.newObjectMetadata(0L);\n+        PutObjectRequest put = new PutObjectRequest(fs.getBucket(),\n+                fs.pathToKey(file),\n+                im,\n+                om);\n+        putObjectRequests.add(() -> fs.putObjectDirect(put));\n+      }\n+      executorService.invokeAll(putObjectRequests);\n+    } finally {\n+      executorService.shutdown();\n+    }\n+    RemoteIterator<LocatedFileStatus> locatedFileStatusRemoteIterator =", "originalCommit": "7d4126a745103e0874950b687948d90feae8b7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "744ef7bd8e31f4db1e16f282f31a9ad53753a960", "chunk": "diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\nindex 7db72b1f434..5855b16b7bd 100644\n--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\n+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/scale/ITestS3ADirectoryPerformance.java\n\n@@ -163,22 +160,27 @@ public void testListOperations() throws Throwable {\n   public void testMultiPagesListingPerformanceAndCorrectness() throws Throwable {\n     describe(\"Check performance and correctness for multi page listing \" +\n             \"using different listing api\");\n-    Path dir = path(this.getMethodName());\n-    Configuration conf = getConfigurationWithConfiguredBatchSize(10);\n-    fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf);\n-    assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n-    fs.create(dir);\n+    final Path dir = methodPath();\n+    final int batchSize = 10;\n+    final int numOfPutRequests = 1000;\n+    final int eachFileProcessingTime = 10;\n+    final int numOfPutThreads = 50;\n+    final Configuration conf = getConfigurationWithConfiguredBatchSize(batchSize);\n     final InputStream im = new InputStream() {\n       @Override\n       public int read() throws IOException {\n         return -1;\n       }\n     };\n-    final int numOfPutRequests = 500;\n     final List<String> originalListOfFiles = new ArrayList<>();\n     List<Callable<PutObjectResult>> putObjectRequests = new ArrayList<>();\n-    ExecutorService executorService = Executors.newFixedThreadPool(50);\n-    try {\n+    ExecutorService executorService = Executors\n+            .newFixedThreadPool(numOfPutThreads);\n+\n+    NanoTimer uploadTimer = new NanoTimer();\n+    try(S3AFileSystem fs = (S3AFileSystem) FileSystem.get(dir.toUri(), conf)) {\n+      fs.create(dir);\n+      assume(\"Test is only for raw fs\", !fs.hasMetadataStore());\n       for (int i=0; i<numOfPutRequests; i++) {\n         Path file = new Path(dir, String.format(\"file-%03d\", i));\n         originalListOfFiles.add(file.toString());\n"}}, {"oid": "744ef7bd8e31f4db1e16f282f31a9ad53753a960", "url": "https://github.com/apache/hadoop/commit/744ef7bd8e31f4db1e16f282f31a9ad53753a960", "message": "HADOOP-17074 Fixing review comments", "committedDate": "2020-08-13T09:53:26Z", "type": "commit"}, {"oid": "47ecbef4b3940cc74db05d3e67d09e4900800872", "url": "https://github.com/apache/hadoop/commit/47ecbef4b3940cc74db05d3e67d09e4900800872", "message": "HADOOP-17074 checkstyle", "committedDate": "2020-08-24T12:03:33Z", "type": "commit"}]}