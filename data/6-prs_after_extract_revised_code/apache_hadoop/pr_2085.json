{"pr_number": 2085, "pr_title": "HADOOP-17079. Optimize UGI#getGroups by adding UGI#getGroupsSet.", "pr_createdAt": "2020-06-21T04:43:43Z", "pr_url": "https://github.com/apache/hadoop/pull/2085", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzODEyMA==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r444638120", "bodyText": "replace with lambda statement?", "author": "Hexiaoqiao", "createdAt": "2020-06-24T04:30:59Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java", "diffHunk": "@@ -345,28 +373,28 @@ public long read() {\n      * implementation, otherwise is arranges for the cache to be updated later\n      */\n     @Override\n-    public ListenableFuture<List<String>> reload(final String key,\n-                                                 List<String> oldValue)\n+    public ListenableFuture<Set<String>> reload(final String key,\n+                                                 Set<String> oldValue)\n         throws Exception {\n       LOG.debug(\"GroupCacheLoader - reload (async).\");\n       if (!reloadGroupsInBackground) {\n         return super.reload(key, oldValue);\n       }\n \n       backgroundRefreshQueued.incrementAndGet();\n-      ListenableFuture<List<String>> listenableFuture =\n-          executorService.submit(new Callable<List<String>>() {\n+      ListenableFuture<Set<String>> listenableFuture =\n+          executorService.submit(new Callable<Set<String>>() {", "originalCommit": "5a7f6107e136ec34308e5b064da2002dbeb66128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNzIxNg==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r445127216", "bodyText": "Good catch. Fixed.", "author": "xiaoyuyao", "createdAt": "2020-06-24T19:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzODEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "2332e0d00dc79c366bce24a42a032537ef960403", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\nindex 0d104a317af..8e150876a79 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\n\n@@ -383,14 +383,11 @@ public long read() {\n \n       backgroundRefreshQueued.incrementAndGet();\n       ListenableFuture<Set<String>> listenableFuture =\n-          executorService.submit(new Callable<Set<String>>() {\n-            @Override\n-            public Set<String> call() throws Exception {\n-              backgroundRefreshQueued.decrementAndGet();\n-              backgroundRefreshRunning.incrementAndGet();\n-              Set<String> results = load(key);\n-              return results;\n-            }\n+          executorService.submit(() -> {\n+            backgroundRefreshQueued.decrementAndGet();\n+            backgroundRefreshRunning.incrementAndGet();\n+            Set<String> results = load(key);\n+            return results;\n           });\n       Futures.addCallback(listenableFuture, new FutureCallback<Set<String>>() {\n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzODk3NA==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r444638974", "bodyText": "suggest single class import.", "author": "Hexiaoqiao", "createdAt": "2020-06-24T04:34:45Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/JniBasedUnixGroupsMapping.java", "diffHunk": "@@ -19,9 +19,9 @@\n package org.apache.hadoop.security;\n \n import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.List;\n+import java.util.*;", "originalCommit": "5a7f6107e136ec34308e5b064da2002dbeb66128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyODA3OA==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r445128078", "bodyText": "IntelliJ auto folded the imports. I will fix them in the next commit.", "author": "xiaoyuyao", "createdAt": "2020-06-24T19:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzODk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "2332e0d00dc79c366bce24a42a032537ef960403", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/JniBasedUnixGroupsMapping.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/JniBasedUnixGroupsMapping.java\nindex f86745a8db8..6c24427f3e5 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/JniBasedUnixGroupsMapping.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/JniBasedUnixGroupsMapping.java\n\n@@ -19,7 +19,10 @@\n package org.apache.hadoop.security;\n \n import java.io.IOException;\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n \n import org.apache.commons.collections.CollectionUtils;\n import org.apache.hadoop.classification.InterfaceAudience;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MDg1Mg==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r444640852", "bodyText": "return Collections.emptySet();\nreturn EMPTY set rather than Null may be more safety?", "author": "Hexiaoqiao", "createdAt": "2020-06-24T04:43:28Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/NullGroupsMapping.java", "diffHunk": "@@ -31,6 +33,19 @@\n   public void cacheGroupsAdd(List<String> groups) {\n   }\n \n+  /**\n+   * Get all various group memberships of a given user.\n+   * Returns EMPTY set in case of non-existing user\n+   *\n+   * @param user User's name\n+   * @return set of group memberships of user\n+   * @throws IOException\n+   */\n+  @Override\n+  public Set<String> getGroupsSet(String user) throws IOException {\n+    return null;", "originalCommit": "5a7f6107e136ec34308e5b064da2002dbeb66128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyODQxOA==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r445128418", "bodyText": "Fixed.", "author": "xiaoyuyao", "createdAt": "2020-06-24T19:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MDg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2332e0d00dc79c366bce24a42a032537ef960403", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/NullGroupsMapping.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/NullGroupsMapping.java\nindex 8431f111637..9592ecc32c0 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/NullGroupsMapping.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/NullGroupsMapping.java\n\n@@ -43,7 +43,7 @@ public void cacheGroupsAdd(List<String> groups) {\n    */\n   @Override\n   public Set<String> getGroupsSet(String user) throws IOException {\n-    return null;\n+    return Collections.emptySet();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MjgwNg==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r444642806", "bodyText": "another one star import.", "author": "Hexiaoqiao", "createdAt": "2020-06-24T04:52:07Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/AccessControlList.java", "diffHunk": "@@ -20,10 +20,7 @@\n import java.io.DataInput;\n import java.io.DataOutput;\n import java.io.IOException;\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.*;", "originalCommit": "5a7f6107e136ec34308e5b064da2002dbeb66128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyODY1MQ==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r445128651", "bodyText": "Fixed.", "author": "xiaoyuyao", "createdAt": "2020-06-24T19:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MjgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "2332e0d00dc79c366bce24a42a032537ef960403", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/AccessControlList.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/AccessControlList.java\nindex 94bb5656a1b..e86d918b055 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/AccessControlList.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/AccessControlList.java\n\n@@ -20,7 +20,11 @@\n import java.io.DataInput;\n import java.io.DataOutput;\n import java.io.IOException;\n-import java.util.*;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n \n import org.apache.hadoop.classification.InterfaceAudience;\n import org.apache.hadoop.classification.InterfaceStability;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDE2Ng==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r444644166", "bodyText": "return Collections.emptySet(); ?\nBTW, it seems that class DummyGroupMapping is never used now, do we need scrubbed it off?", "author": "Hexiaoqiao", "createdAt": "2020-06-24T04:57:34Z", "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/security/DummyGroupMapping.java", "diffHunk": "@@ -47,4 +48,9 @@ public void cacheGroupsRefresh() throws IOException {\n   @Override\n   public void cacheGroupsAdd(List<String> groups) throws IOException {\n   }\n+\n+  @Override\n+  public Set<String> getGroupsSet(String user) throws IOException {\n+    return null;", "originalCommit": "5a7f6107e136ec34308e5b064da2002dbeb66128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMDY3NA==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r445130674", "bodyText": "Fixed.", "author": "xiaoyuyao", "createdAt": "2020-06-24T19:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2332e0d00dc79c366bce24a42a032537ef960403", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/security/DummyGroupMapping.java b/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/security/DummyGroupMapping.java\nindex 0db77a5a1c8..9df018b67ad 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/security/DummyGroupMapping.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/security/DummyGroupMapping.java\n\n@@ -51,6 +52,15 @@ public void cacheGroupsAdd(List<String> groups) throws IOException {\n \n   @Override\n   public Set<String> getGroupsSet(String user) throws IOException {\n-    return null;\n+    if (user.equals(\"root\")) {\n+      return Sets.newHashSet(\"admin\");\n+    }\n+    else if (user.equals(\"nobody\")) {\n+      return Sets.newHashSet(\"nobody\");\n+    } else {\n+      String[] groups = HadoopUsersConfTestHelper.getHadoopUserGroups(user);\n+      return (groups != null) ? Sets.newHashSet(groups) :\n+          Collections.emptySet();\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDk4MQ==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r444644981", "bodyText": "Do we need keep the same logic with getGroups. Not sure if this method will invoke by other unit test.\n    @Override\n    public List<String> getGroups(String user) throws IOException {\n      LOG.info(\"Getting groups in MockUnixGroupsMapping\");\n      String g1 = user + (10 * i + 1);\n      String g2 = user + (10 * i + 2);\n      List<String> l = new ArrayList<String>(2);\n      l.add(g1);\n      l.add(g2);\n      i++;\n      return l;\n    }", "author": "Hexiaoqiao", "createdAt": "2020-06-24T05:00:41Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterUserMappings.java", "diffHunk": "@@ -111,6 +112,11 @@ public void cacheGroupsRefresh() throws IOException {\n     @Override\n     public void cacheGroupsAdd(List<String> groups) throws IOException {\n     }\n+\n+    @Override\n+    public Set<String> getGroupsSet(String user) throws IOException {\n+      return null;", "originalCommit": "5a7f6107e136ec34308e5b064da2002dbeb66128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMzEwMg==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r445133102", "bodyText": "Fixed with similar logic.", "author": "xiaoyuyao", "createdAt": "2020-06-24T19:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2332e0d00dc79c366bce24a42a032537ef960403", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterUserMappings.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterUserMappings.java\nindex 8a9ae161d69..887e0a91155 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterUserMappings.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterUserMappings.java\n\n@@ -115,7 +116,12 @@ public void cacheGroupsAdd(List<String> groups) throws IOException {\n \n     @Override\n     public Set<String> getGroupsSet(String user) throws IOException {\n-      return null;\n+      LOG.info(\"Getting groups in MockUnixGroupsMapping\");\n+      String g1 = user + (10 * i + 1);\n+      String g2 = user + (10 * i + 2);\n+      Set<String> s = Sets.newHashSet(g1, g2);\n+      i++;\n+      return s;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NTQxMg==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r444645412", "bodyText": "It seems that is not related to this changes.", "author": "Hexiaoqiao", "createdAt": "2020-06-24T05:02:27Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSPermissionChecker.java", "diffHunk": "@@ -549,7 +549,6 @@ private boolean hasPermission(INodeAttributes inode, FsAction access) {\n    * - Default entries may be present, but they are ignored during enforcement.\n    *\n    * @param inode INodeAttributes accessed inode\n-   * @param snapshotId int snapshot ID", "originalCommit": "5a7f6107e136ec34308e5b064da2002dbeb66128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMjk1Nw==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r445132957", "bodyText": "I just reverted this change.", "author": "xiaoyuyao", "createdAt": "2020-06-24T19:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NTQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "2332e0d00dc79c366bce24a42a032537ef960403", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSPermissionChecker.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSPermissionChecker.java\nindex aa18f1d04c5..93fefeea317 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSPermissionChecker.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSPermissionChecker.java\n\n@@ -549,6 +549,7 @@ private boolean hasPermission(INodeAttributes inode, FsAction access) {\n    * - Default entries may be present, but they are ignored during enforcement.\n    *\n    * @param inode INodeAttributes accessed inode\n+   * @param snapshotId int snapshot ID\n    * @param access FsAction requested permission\n    * @param mode FsPermission mode from inode\n    * @param aclFeature AclFeature of inode\n"}}, {"oid": "2332e0d00dc79c366bce24a42a032537ef960403", "url": "https://github.com/apache/hadoop/commit/2332e0d00dc79c366bce24a42a032537ef960403", "message": "Address code review feedbacks.", "committedDate": "2020-06-24T19:56:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxMTM4OQ==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r446311389", "bodyText": "Would it make sense to deprecate this API to push users to use the new API?", "author": "jojochuang", "createdAt": "2020-06-26T17:18:13Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java", "diffHunk": "@@ -203,17 +202,47 @@ private IOException noGroupsForUser(String user) {\n   /**\n    * Get the group memberships of a given user.\n    * If the user's group is not cached, this method may block.\n+   * Note this method can be expensive as it involves Set->List conversion.\n+   * For user with large group membership (i.e., > 1000 groups), we recommend\n+   * using getGroupSet to avoid the conversion and fast membership look up via\n+   * contains().", "originalCommit": "4344467575bbc5da03173204adb569e47579a0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7feede7d42f5c3698733f2fb4c9ad46842fd89", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\nindex 6343b0b3b78..f28e0c4d3e2 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\n\n@@ -242,7 +242,7 @@ private IOException noGroupsForUser(String user) {\n     if (staticUserToGroupsMap != null) {\n       Set<String> staticMapping = staticUserToGroupsMap.get(user);\n       if (staticMapping != null) {\n-        return Collections.unmodifiableSet(staticMapping);\n+        return staticMapping;\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxMzEyNQ==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r446313125", "bodyText": "No need to add Collections.unmodifiableSet here as the caller from the public API will do it.  Will fix in the next commit.", "author": "xiaoyuyao", "createdAt": "2020-06-26T17:21:50Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java", "diffHunk": "@@ -203,17 +202,47 @@ private IOException noGroupsForUser(String user) {\n   /**\n    * Get the group memberships of a given user.\n    * If the user's group is not cached, this method may block.\n+   * Note this method can be expensive as it involves Set->List conversion.\n+   * For user with large group membership (i.e., > 1000 groups), we recommend\n+   * using getGroupSet to avoid the conversion and fast membership look up via\n+   * contains().\n    * @param user User's name\n-   * @return the group memberships of the user\n+   * @return the group memberships of the user as list\n    * @throws IOException if user does not exist\n    */\n   public List<String> getGroups(final String user) throws IOException {\n+    return Collections.unmodifiableList(new ArrayList<>(\n+        getGroupInternal(user)));\n+  }\n+\n+  /**\n+   * Get the group memberships of a given user.\n+   * If the user's group is not cached, this method may block.\n+   * This provide better performance when user has large group membership via\n+   * 1) avoid set->list->set conversion for the caller UGI/PermissionCheck\n+   * 2) fast lookup using contains() via Set instead of List\n+   * @param user User's name\n+   * @return the group memberships of the user as set\n+   * @throws IOException if user does not exist\n+   */\n+  public Set<String> getGroupsSet(final String user) throws IOException {\n+    return Collections.unmodifiableSet(getGroupInternal(user));\n+  }\n+\n+  /**\n+   * Get the group memberships of a given user.\n+   * If the user's group is not cached, this method may block.\n+   * @param user User's name\n+   * @return the group memberships of the user as Set\n+   * @throws IOException if user does not exist\n+   */\n+  private Set<String> getGroupInternal(final String user) throws IOException {\n     // No need to lookup for groups of static users\n-    Map<String, List<String>> staticUserToGroupsMap = staticMapRef.get();\n+    Map<String, Set<String>> staticUserToGroupsMap = staticMapRef.get();\n     if (staticUserToGroupsMap != null) {\n-      List<String> staticMapping = staticUserToGroupsMap.get(user);\n+      Set<String> staticMapping = staticUserToGroupsMap.get(user);\n       if (staticMapping != null) {\n-        return staticMapping;", "originalCommit": "4344467575bbc5da03173204adb569e47579a0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec7feede7d42f5c3698733f2fb4c9ad46842fd89", "chunk": "diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\nindex 6343b0b3b78..f28e0c4d3e2 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java\n\n@@ -242,7 +242,7 @@ private IOException noGroupsForUser(String user) {\n     if (staticUserToGroupsMap != null) {\n       Set<String> staticMapping = staticUserToGroupsMap.get(user);\n       if (staticMapping != null) {\n-        return Collections.unmodifiableSet(staticMapping);\n+        return staticMapping;\n       }\n     }\n \n"}}, {"oid": "f5994e784c341041f1043f4d5e550a7daf019da3", "url": "https://github.com/apache/hadoop/commit/f5994e784c341041f1043f4d5e550a7daf019da3", "message": "HADOOP-17079. Optimize UGI#getGroups by adding UGI#getGroupsSet.", "committedDate": "2020-06-26T22:25:54Z", "type": "commit"}, {"oid": "68a4062707ae94c039c889db2e962e7c95ea26e3", "url": "https://github.com/apache/hadoop/commit/68a4062707ae94c039c889db2e962e7c95ea26e3", "message": "Address code review feedbacks.", "committedDate": "2020-06-26T22:25:54Z", "type": "commit"}, {"oid": "7b2846431cdfd8e7209d84afb7f37955ad26c568", "url": "https://github.com/apache/hadoop/commit/7b2846431cdfd8e7209d84afb7f37955ad26c568", "message": "fix checkstyle", "committedDate": "2020-06-26T22:25:54Z", "type": "commit"}, {"oid": "7c1bcaa8be2f2161fe6367484cf0e730dd492e30", "url": "https://github.com/apache/hadoop/commit/7c1bcaa8be2f2161fe6367484cf0e730dd492e30", "message": "Fix unit tests", "committedDate": "2020-06-26T22:25:54Z", "type": "commit"}, {"oid": "a0447676fef3d4de5615cc776e923083f55845c4", "url": "https://github.com/apache/hadoop/commit/a0447676fef3d4de5615cc776e923083f55845c4", "message": "Fix checkstyle", "committedDate": "2020-06-26T22:25:54Z", "type": "commit"}, {"oid": "ec7feede7d42f5c3698733f2fb4c9ad46842fd89", "url": "https://github.com/apache/hadoop/commit/ec7feede7d42f5c3698733f2fb4c9ad46842fd89", "message": "findbugs and checkstyle", "committedDate": "2020-06-26T22:25:54Z", "type": "commit"}, {"oid": "8dae651fd7b3834aa001a9f97384196ab91127d5", "url": "https://github.com/apache/hadoop/commit/8dae651fd7b3834aa001a9f97384196ab91127d5", "message": "additional unit test fix", "committedDate": "2020-06-26T23:45:24Z", "type": "commit"}, {"oid": "8dae651fd7b3834aa001a9f97384196ab91127d5", "url": "https://github.com/apache/hadoop/commit/8dae651fd7b3834aa001a9f97384196ab91127d5", "message": "additional unit test fix", "committedDate": "2020-06-26T23:45:24Z", "type": "forcePushed"}, {"oid": "214ee3da5abf89a6dad04a23d165cb47401b4f57", "url": "https://github.com/apache/hadoop/commit/214ee3da5abf89a6dad04a23d165cb47401b4f57", "message": "Fix testGetGroupsToLower", "committedDate": "2020-06-28T00:16:02Z", "type": "commit"}, {"oid": "dc2a4e08172d9a274f41c44d504a019229b59640", "url": "https://github.com/apache/hadoop/commit/dc2a4e08172d9a274f41c44d504a019229b59640", "message": "checkstyle", "committedDate": "2020-06-28T00:18:57Z", "type": "commit"}, {"oid": "dfb7c3cb26f0fad4b735b2c2c41c1be08da43848", "url": "https://github.com/apache/hadoop/commit/dfb7c3cb26f0fad4b735b2c2c41c1be08da43848", "message": "add deprecated annotation for getGroups() call", "committedDate": "2020-06-28T00:34:24Z", "type": "commit"}, {"oid": "2a88387ccf91531b42ac7eef1d2bfd8b2b81c5df", "url": "https://github.com/apache/hadoop/commit/2a88387ccf91531b42ac7eef1d2bfd8b2b81c5df", "message": "Remove unused imports", "committedDate": "2020-06-30T00:07:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNDMxNg==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r451814316", "bodyText": "Why do we use volatile variables here?", "author": "jojochuang", "createdAt": "2020-07-08T20:43:59Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java", "diffHunk": "@@ -320,21 +321,21 @@\n   private Iterator<BindUserInfo> bindUsers;\n   private BindUserInfo currentBindUser;\n \n-  private String userbaseDN;\n+  private volatile String userbaseDN;", "originalCommit": "2a88387ccf91531b42ac7eef1d2bfd8b2b81c5df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4MzAyMg==", "url": "https://github.com/apache/hadoop/pull/2085#discussion_r451883022", "bodyText": "Just realized it's there to make findbugs happy.", "author": "jojochuang", "createdAt": "2020-07-08T23:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNDMxNg=="}], "type": "inlineReview", "revised_code": null}]}