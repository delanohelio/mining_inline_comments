{"pr_number": 1992, "pr_title": "HDFS-15320. StringIndexOutOfBoundsException in HostRestrictingAuthorizationFilter", "pr_createdAt": "2020-05-01T09:41:37Z", "pr_url": "https://github.com/apache/hadoop/pull/1992", "timeline": [{"oid": "b1130f78a9796c8db8e26c0cf4ad7afe24e10804", "url": "https://github.com/apache/hadoop/commit/b1130f78a9796c8db8e26c0cf4ad7afe24e10804", "message": "HDFS-15320. StringIndexOutOfBoundsException in HostRestrictingAuthorizationFilter.", "committedDate": "2020-05-01T08:16:47Z", "type": "commit"}, {"oid": "e417288decb7beae577e766dc3c94e7d28a5f803", "url": "https://github.com/apache/hadoop/commit/e417288decb7beae577e766dc3c94e7d28a5f803", "message": "Verbose trace log", "committedDate": "2020-05-01T08:19:02Z", "type": "commit"}, {"oid": "e2e249363f5530f8f1bd2d5419979f4e78fb7548", "url": "https://github.com/apache/hadoop/commit/e2e249363f5530f8f1bd2d5419979f4e78fb7548", "message": "More lambda", "committedDate": "2020-05-01T08:21:38Z", "type": "commit"}, {"oid": "df3ed14f3631943db88141cbadfce7e86c10d084", "url": "https://github.com/apache/hadoop/commit/df3ed14f3631943db88141cbadfce7e86c10d084", "message": "Avoid direct use of 404", "committedDate": "2020-05-01T08:34:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMjI4Mg==", "url": "https://github.com/apache/hadoop/pull/1992#discussion_r418732282", "bodyText": "nit: use /** as javadoc", "author": "liuml07", "createdAt": "2020-05-01T20:50:48Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java", "diffHunk": "@@ -243,6 +243,34 @@ public void doFilter(ServletRequest servletRequest,\n     filter.destroy();\n   }\n \n+  /*\n+   * Test acceptable behavior to malformed requests", "originalCommit": "df3ed14f3631943db88141cbadfce7e86c10d084", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47e71cab3cfc477a9128d76b97ba33667a72f720", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\nindex c5d5e98d248..34bc616e540 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\n\n@@ -243,18 +243,15 @@ public void doFilter(ServletRequest servletRequest,\n     filter.destroy();\n   }\n \n-  /*\n+  /**\n    * Test acceptable behavior to malformed requests\n    * Case: the request URI does not start with \"/webhdfs/v1\"\n    */\n   @Test\n   public void testInvalidURI() throws Exception {\n     HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n-    Mockito.when(request.getRemoteAddr()).thenReturn(null);\n     Mockito.when(request.getMethod()).thenReturn(\"GET\");\n     Mockito.when(request.getRequestURI()).thenReturn(\"/InvalidURI\");\n-    Mockito.when(request.getQueryString()).thenReturn(null);\n-\n     HttpServletResponse response = Mockito.mock(HttpServletResponse.class);\n \n     Filter filter = new HostRestrictingAuthorizationFilter();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNDk3OA==", "url": "https://github.com/apache/hadoop/pull/1992#discussion_r418734978", "bodyText": "nit: this seems not required?", "author": "liuml07", "createdAt": "2020-05-01T20:58:03Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java", "diffHunk": "@@ -243,6 +243,34 @@ public void doFilter(ServletRequest servletRequest,\n     filter.destroy();\n   }\n \n+  /*\n+   * Test acceptable behavior to malformed requests\n+   * Case: the request URI does not start with \"/webhdfs/v1\"\n+   */\n+  @Test\n+  public void testInvalidURI() throws Exception {\n+    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n+    Mockito.when(request.getRemoteAddr()).thenReturn(null);", "originalCommit": "df3ed14f3631943db88141cbadfce7e86c10d084", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47e71cab3cfc477a9128d76b97ba33667a72f720", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\nindex c5d5e98d248..34bc616e540 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\n\n@@ -243,18 +243,15 @@ public void doFilter(ServletRequest servletRequest,\n     filter.destroy();\n   }\n \n-  /*\n+  /**\n    * Test acceptable behavior to malformed requests\n    * Case: the request URI does not start with \"/webhdfs/v1\"\n    */\n   @Test\n   public void testInvalidURI() throws Exception {\n     HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n-    Mockito.when(request.getRemoteAddr()).thenReturn(null);\n     Mockito.when(request.getMethod()).thenReturn(\"GET\");\n     Mockito.when(request.getRequestURI()).thenReturn(\"/InvalidURI\");\n-    Mockito.when(request.getQueryString()).thenReturn(null);\n-\n     HttpServletResponse response = Mockito.mock(HttpServletResponse.class);\n \n     Filter filter = new HostRestrictingAuthorizationFilter();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNTAyMg==", "url": "https://github.com/apache/hadoop/pull/1992#discussion_r418735022", "bodyText": "nit: this seems not required?", "author": "liuml07", "createdAt": "2020-05-01T20:58:10Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java", "diffHunk": "@@ -243,6 +243,34 @@ public void doFilter(ServletRequest servletRequest,\n     filter.destroy();\n   }\n \n+  /*\n+   * Test acceptable behavior to malformed requests\n+   * Case: the request URI does not start with \"/webhdfs/v1\"\n+   */\n+  @Test\n+  public void testInvalidURI() throws Exception {\n+    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n+    Mockito.when(request.getRemoteAddr()).thenReturn(null);\n+    Mockito.when(request.getMethod()).thenReturn(\"GET\");\n+    Mockito.when(request.getRequestURI()).thenReturn(\"/InvalidURI\");\n+    Mockito.when(request.getQueryString()).thenReturn(null);", "originalCommit": "df3ed14f3631943db88141cbadfce7e86c10d084", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47e71cab3cfc477a9128d76b97ba33667a72f720", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\nindex c5d5e98d248..34bc616e540 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/common/TestHostRestrictingAuthorizationFilter.java\n\n@@ -243,18 +243,15 @@ public void doFilter(ServletRequest servletRequest,\n     filter.destroy();\n   }\n \n-  /*\n+  /**\n    * Test acceptable behavior to malformed requests\n    * Case: the request URI does not start with \"/webhdfs/v1\"\n    */\n   @Test\n   public void testInvalidURI() throws Exception {\n     HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n-    Mockito.when(request.getRemoteAddr()).thenReturn(null);\n     Mockito.when(request.getMethod()).thenReturn(\"GET\");\n     Mockito.when(request.getRequestURI()).thenReturn(\"/InvalidURI\");\n-    Mockito.when(request.getQueryString()).thenReturn(null);\n-\n     HttpServletResponse response = Mockito.mock(HttpServletResponse.class);\n \n     Filter filter = new HostRestrictingAuthorizationFilter();\n"}}, {"oid": "47e71cab3cfc477a9128d76b97ba33667a72f720", "url": "https://github.com/apache/hadoop/commit/47e71cab3cfc477a9128d76b97ba33667a72f720", "message": "Reflected Mingliang's comments", "committedDate": "2020-05-02T13:27:25Z", "type": "commit"}]}