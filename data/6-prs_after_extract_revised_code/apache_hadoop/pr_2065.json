{"pr_number": 2065, "pr_title": "MAPREDUCE-7280. MiniMRYarnCluster has hard-coded timeout waiting to start history server, with no way to disable.", "pr_createdAt": "2020-06-10T14:50:13Z", "pr_url": "https://github.com/apache/hadoop/pull/2065", "timeline": [{"oid": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb", "url": "https://github.com/apache/hadoop/commit/94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb", "message": "MAPREDUCE-7280. MiniMRYarnCluster has hard-coded timeout waiting to start history server, with no way to disable.", "committedDate": "2020-06-10T14:48:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMDYzNw==", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438320637", "bodyText": "Should this historyServer and thread only be initialized when the new configuration is enabled? Would be nice to avoid allocating the resources if we don't need them.", "author": "ndimiduk", "createdAt": "2020-06-10T18:16:55Z", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "diffHunk": "@@ -259,7 +267,10 @@ public void run() {\n           };\n         }.start();", "originalCommit": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMjIyMg==", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438522222", "bodyText": "historyServer is not initialized if mapreduce.jobhistory.minicluster.enabled is set to false. I would like to keep the default value to be true to avoid breaking existing tests of hadoop and downstreams.", "author": "iwasakims", "createdAt": "2020-06-11T03:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMDYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMjc3OA==", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r442402778", "bodyText": "Yes, preserving the default value makes sense. I'm just wondering if the resource allocation can be skipped entirely when the jhs is disabled.", "author": "ndimiduk", "createdAt": "2020-06-18T17:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMDYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "01e77a720738ee6211bddaabeb9a4ea9ed777efe", "chunk": "diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java\nindex d53b280c0f5..dbd87e24914 100644\n--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java\n+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java\n\n@@ -263,15 +264,15 @@ public synchronized void serviceStart() throws Exception {\n         new Thread() {\n           public void run() {\n             historyServer.start();\n-            jhsStarted = true;\n           };\n         }.start();\n \n         final int launchTimeout = getConfig().getInt(\n-            JHAdminConfig.MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS,\n-            JHAdminConfig.DEFAULT_MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS);\n-        GenericTestUtils.waitFor(() -> jhsStarted, 1500, launchTimeout);\n-\n+            MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS, 60_000);\n+        GenericTestUtils.waitFor(\n+            () -> historyServer.getServiceState() == STATE.STARTED\n+                || historyServer.getServiceState() == STATE.STOPPED,\n+            100, launchTimeout);\n         if (historyServer.getServiceState() != STATE.STARTED) {\n           throw new IOException(\"HistoryServer failed to start\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMTM0Mg==", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438321342", "bodyText": "nit: this code would be simpler using a CountDownLatch.", "author": "ndimiduk", "createdAt": "2020-06-10T18:18:09Z", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java", "diffHunk": "@@ -259,7 +267,10 @@ public void run() {\n           };\n         }.start();\n \n-        GenericTestUtils.waitFor(() -> jhsStarted, 1500, 60_000);\n+        final int launchTimeout = getConfig().getInt(\n+            JHAdminConfig.MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS,\n+            JHAdminConfig.DEFAULT_MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS);\n+        GenericTestUtils.waitFor(() -> jhsStarted, 1500, launchTimeout);", "originalCommit": "94feccf6f1ef7dbd03ec99ccc972f389a00ca1bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMzg1OA==", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r438523858", "bodyText": "I removed the jhsStarted var in a bit different way.", "author": "iwasakims", "createdAt": "2020-06-11T03:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMTM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "01e77a720738ee6211bddaabeb9a4ea9ed777efe", "chunk": "diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java\nindex d53b280c0f5..dbd87e24914 100644\n--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java\n+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/v2/MiniMRYarnCluster.java\n\n@@ -263,15 +264,15 @@ public synchronized void serviceStart() throws Exception {\n         new Thread() {\n           public void run() {\n             historyServer.start();\n-            jhsStarted = true;\n           };\n         }.start();\n \n         final int launchTimeout = getConfig().getInt(\n-            JHAdminConfig.MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS,\n-            JHAdminConfig.DEFAULT_MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS);\n-        GenericTestUtils.waitFor(() -> jhsStarted, 1500, launchTimeout);\n-\n+            MR_HISTORY_MINICLUSTER_LAUNCH_TIMEOUT_MS, 60_000);\n+        GenericTestUtils.waitFor(\n+            () -> historyServer.getServiceState() == STATE.STARTED\n+                || historyServer.getServiceState() == STATE.STOPPED,\n+            100, launchTimeout);\n         if (historyServer.getServiceState() != STATE.STARTED) {\n           throw new IOException(\"HistoryServer failed to start\");\n         }\n"}}, {"oid": "01e77a720738ee6211bddaabeb9a4ea9ed777efe", "url": "https://github.com/apache/hadoop/commit/01e77a720738ee6211bddaabeb9a4ea9ed777efe", "message": "addressed checkstyle warnings. avoiding to expose test only configurations via mapred-default.xml. Simplified waiting logic for JHS startup.", "committedDate": "2020-06-11T03:28:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMTk1MA==", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r442401950", "bodyText": "should this assert happen after the call to start()?", "author": "ndimiduk", "createdAt": "2020-06-18T17:52:19Z", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRBringup.java", "diffHunk": "@@ -36,5 +40,21 @@ public void testBringUp() throws IOException {\n       if (mr != null) { mr.shutdown(); }\n     }\n   }\n-  \n+\n+  @Test\n+  public void testMiniMRYarnClusterWithoutJHS() throws IOException {\n+    MiniMRYarnCluster mr = null;\n+    try {\n+      final Configuration conf = new Configuration();\n+      conf.setBoolean(MiniMRYarnCluster.MR_HISTORY_MINICLUSTER_ENABLED, false);\n+      mr = new MiniMRYarnCluster(\"testMiniMRYarnClusterWithoutJHS\");\n+      mr.init(conf);\n+      Assert.assertEquals(null, mr.getHistoryServer());", "originalCommit": "01e77a720738ee6211bddaabeb9a4ea9ed777efe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1MDUzOQ==", "url": "https://github.com/apache/hadoop/pull/2065#discussion_r442550539", "bodyText": "Sure. It makes more stable for future change. I updated the code.", "author": "iwasakims", "createdAt": "2020-06-18T23:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMTk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "915c4d335e22104f4350ce0aca99b21ba2a1c773", "chunk": "diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRBringup.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRBringup.java\nindex 76cb1de6dbe..fc49fa56902 100644\n--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRBringup.java\n+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRBringup.java\n\n@@ -49,8 +49,8 @@ public void testMiniMRYarnClusterWithoutJHS() throws IOException {\n       conf.setBoolean(MiniMRYarnCluster.MR_HISTORY_MINICLUSTER_ENABLED, false);\n       mr = new MiniMRYarnCluster(\"testMiniMRYarnClusterWithoutJHS\");\n       mr.init(conf);\n-      Assert.assertEquals(null, mr.getHistoryServer());\n       mr.start();\n+      Assert.assertEquals(null, mr.getHistoryServer());\n     } finally {\n       if (mr != null) {\n         mr.stop();\n"}}, {"oid": "915c4d335e22104f4350ce0aca99b21ba2a1c773", "url": "https://github.com/apache/hadoop/commit/915c4d335e22104f4350ce0aca99b21ba2a1c773", "message": "assertion after starting minicluster should be more stable for future refactoring.", "committedDate": "2020-06-18T23:17:22Z", "type": "commit"}]}