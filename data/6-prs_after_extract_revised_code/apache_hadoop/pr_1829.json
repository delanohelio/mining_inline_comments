{"pr_number": 1829, "pr_title": "HDFS-14743. Enhance INodeAttributeProvider/ AccessControlEnforcer Interface in HDFS to support Authorization of mkdir, rm, rmdir, copy, move etc...", "pr_createdAt": "2020-02-03T19:28:12Z", "pr_url": "https://github.com/apache/hadoop/pull/1829", "timeline": [{"oid": "d2ccfffe606a2799a0c36d5852c92ec5ca51c5db", "url": "https://github.com/apache/hadoop/commit/d2ccfffe606a2799a0c36d5852c92ec5ca51c5db", "message": "Introduce a builder for AuthorizationContext.\n\nChange-Id: Ice1cc086a748bc8c85a5502fe7382c1ad8cf9f84", "committedDate": "2020-02-05T22:13:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzQ5Nw==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r377977497", "bodyText": "NIT: can you add javadoc for the new public method?", "author": "xiaoyuyao", "createdAt": "2020-02-12T00:21:39Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java", "diffHunk": "@@ -68,6 +277,8 @@ public abstract void checkPermission(String fsOwner, String supergroup,\n         boolean ignoreEmptyDir)\n             throws AccessControlException;\n \n+    void checkPermissionWithContext(AuthorizationContext authzContext)", "originalCommit": "d1d954ba992b7be55b98ee4aaf16ddad655f52d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3ODM4NQ==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r381478385", "bodyText": "done.", "author": "jojochuang", "createdAt": "2020-02-19T18:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f5b205e4af2aeb907ac6670e65a7e1c5d2794bc5", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\nindex 4d9197a5fb4..3e249dda76b 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\n\n@@ -277,6 +271,14 @@ public abstract void checkPermission(String fsOwner, String supergroup,\n         boolean ignoreEmptyDir)\n             throws AccessControlException;\n \n+    /**\n+     * Checks permission on a file system object. Has to throw an Exception\n+     * if the filesystem object is not accessessible by the calling Ugi.\n+     * @param authzContext an {@link AuthorizationContext} object encapsulating\n+     *                     the various parameters required to authorize an\n+     *                     operation.\n+     * @throws AccessControlException\n+     */\n     void checkPermissionWithContext(AuthorizationContext authzContext)\n         throws AccessControlException;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzkxNw==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r377977917", "bodyText": "I don't think it is right to return always return true for two different AuthorizationContext instances.", "author": "xiaoyuyao", "createdAt": "2020-02-12T00:23:01Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java", "diffHunk": "@@ -17,19 +17,227 @@\n  */\n package org.apache.hadoop.hdfs.server.namenode;\n \n+import com.google.common.annotations.VisibleForTesting;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.classification.InterfaceAudience;\n import org.apache.hadoop.classification.InterfaceStability;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.fs.permission.FsAction;\n import org.apache.hadoop.hdfs.DFSUtil;\n+import org.apache.hadoop.ipc.CallerContext;\n import org.apache.hadoop.security.AccessControlException;\n import org.apache.hadoop.security.UserGroupInformation;\n \n @InterfaceAudience.Public\n @InterfaceStability.Unstable\n public abstract class INodeAttributeProvider {\n \n+  public static class AuthorizationContext {\n+    public String fsOwner;\n+    public String supergroup;\n+    public UserGroupInformation callerUgi;\n+    public INodeAttributes[] inodeAttrs;\n+    public INode[] inodes;\n+    public byte[][] pathByNameArr;\n+    public int snapshotId;\n+    public String path;\n+    public int ancestorIndex;\n+    public boolean doCheckOwner;\n+    public FsAction ancestorAccess;\n+    public FsAction parentAccess;\n+    public FsAction access;\n+    public FsAction subAccess;\n+    public boolean ignoreEmptyDir;\n+    public String operationName;\n+    public CallerContext callerContext;\n+\n+    public static class Builder {\n+      public String fsOwner;\n+      public String supergroup;\n+      public UserGroupInformation callerUgi;\n+      public INodeAttributes[] inodeAttrs;\n+      public INode[] inodes;\n+      public byte[][] pathByNameArr;\n+      public int snapshotId;\n+      public String path;\n+      public int ancestorIndex;\n+      public boolean doCheckOwner;\n+      public FsAction ancestorAccess;\n+      public FsAction parentAccess;\n+      public FsAction access;\n+      public FsAction subAccess;\n+      public boolean ignoreEmptyDir;\n+      public String operationName;\n+      public CallerContext callerContext;\n+\n+      public AuthorizationContext build() {\n+        return new AuthorizationContext(this);\n+      }\n+\n+      public Builder fsOwner(String val) {\n+        this.fsOwner = val;\n+        return this;\n+      }\n+\n+      public Builder supergroup(String val) {\n+        this.supergroup = val;\n+        return this;\n+      }\n+\n+      public Builder callerUgi(UserGroupInformation val) {\n+        this.callerUgi = val;\n+        return this;\n+      }\n+\n+      public Builder inodeAttrs(INodeAttributes[] val) {\n+        this.inodeAttrs = val;\n+        return this;\n+      }\n+\n+      public Builder inodes(INode[] val) {\n+        this.inodes = val;\n+        return this;\n+      }\n+\n+      public Builder pathByNameArr(byte[][] val) {\n+        this.pathByNameArr = val;\n+        return this;\n+      }\n+\n+      public Builder snapshotId(int val) {\n+        this.snapshotId = val;\n+        return this;\n+      }\n+\n+      public Builder path(String val) {\n+        this.path = val;\n+        return this;\n+      }\n+\n+      public Builder ancestorIndex(int val) {\n+        this.ancestorIndex = val;\n+        return this;\n+      }\n+\n+      public Builder doCheckOwner(boolean val) {\n+        this.doCheckOwner = val;\n+        return this;\n+      }\n+\n+      public Builder ancestorAccess(FsAction val) {\n+        this.ancestorAccess = val;\n+        return this;\n+      }\n+\n+      public Builder parentAccess(FsAction val) {\n+        this.parentAccess = val;\n+        return this;\n+      }\n+\n+      public Builder access(FsAction val) {\n+        this.access = val;\n+        return this;\n+      }\n+\n+      public Builder subAccess(FsAction val) {\n+        this.subAccess = val;\n+        return this;\n+      }\n+\n+      public Builder ignoreEmptyDir(boolean val) {\n+        this.ignoreEmptyDir = val;\n+        return this;\n+      }\n+\n+      public Builder operationName(String val) {\n+        this.operationName = val;\n+        return this;\n+      }\n+\n+      public Builder callerContext(CallerContext val) {\n+        this.callerContext = val;\n+        return this;\n+      }\n+    }\n+\n+    public AuthorizationContext(\n+        String fsOwner,\n+        String supergroup,\n+        UserGroupInformation callerUgi,\n+        INodeAttributes[] inodeAttrs,\n+        INode[] inodes,\n+        byte[][] pathByNameArr,\n+        int snapshotId,\n+        String path,\n+        int ancestorIndex,\n+        boolean doCheckOwner,\n+        FsAction ancestorAccess,\n+        FsAction parentAccess,\n+        FsAction access,\n+        FsAction subAccess,\n+        boolean ignoreEmptyDir) {\n+      this.fsOwner = fsOwner;\n+      this.supergroup = supergroup;\n+      this.callerUgi = callerUgi;\n+      this.inodeAttrs = inodeAttrs;\n+      this.inodes = inodes;\n+      this.pathByNameArr = pathByNameArr;\n+      this.snapshotId = snapshotId;\n+      this.path = path;\n+      this.ancestorIndex = ancestorIndex;\n+      this.doCheckOwner = doCheckOwner;\n+      this.ancestorAccess = ancestorAccess;\n+      this.parentAccess = parentAccess;\n+      this.access = access;\n+      this.subAccess = subAccess;\n+      this.ignoreEmptyDir = ignoreEmptyDir;\n+    }\n+\n+    public AuthorizationContext(\n+        String fsOwner,\n+        String supergroup,\n+        UserGroupInformation callerUgi,\n+        INodeAttributes[] inodeAttrs,\n+        INode[] inodes,\n+        byte[][] pathByNameArr,\n+        int snapshotId,\n+        String path,\n+        int ancestorIndex,\n+        boolean doCheckOwner,\n+        FsAction ancestorAccess,\n+        FsAction parentAccess,\n+        FsAction access,\n+        FsAction subAccess,\n+        boolean ignoreEmptyDir,\n+        String operationName,\n+        CallerContext callerContext) {\n+      this(fsOwner, supergroup, callerUgi, inodeAttrs, inodes,\n+          pathByNameArr, snapshotId, path, ancestorIndex, doCheckOwner,\n+          ancestorAccess, parentAccess, access, subAccess, ignoreEmptyDir);\n+      this.operationName = operationName;\n+      this.callerContext = callerContext;\n+    }\n+\n+    public AuthorizationContext(Builder builder) {\n+      this(builder.fsOwner, builder.supergroup, builder.callerUgi,\n+          builder.inodeAttrs, builder.inodes, builder.pathByNameArr,\n+          builder.snapshotId, builder.path, builder.ancestorIndex,\n+          builder.doCheckOwner, builder.ancestorAccess, builder.parentAccess,\n+          builder.access, builder.subAccess, builder.ignoreEmptyDir);\n+      this.operationName = builder.operationName;\n+      this.callerContext = builder.callerContext;\n+    }\n+\n+    @VisibleForTesting\n+    @Override\n+    public boolean equals(Object obj) {\n+      if (!(obj instanceof AuthorizationContext)) {\n+        return false;\n+      }\n+      return true;", "originalCommit": "d1d954ba992b7be55b98ee4aaf16ddad655f52d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3ODM0Ng==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r381478346", "bodyText": "yes... it was meant only for test. Updated the patch to include the full object equivalence check.", "author": "jojochuang", "createdAt": "2020-02-19T18:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "f5b205e4af2aeb907ac6670e65a7e1c5d2794bc5", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\nindex 4d9197a5fb4..3e249dda76b 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\n\n@@ -28,6 +28,8 @@\n import org.apache.hadoop.security.AccessControlException;\n import org.apache.hadoop.security.UserGroupInformation;\n \n+import java.util.Arrays;\n+\n @InterfaceAudience.Public\n @InterfaceStability.Unstable\n public abstract class INodeAttributeProvider {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODYwNQ==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r377978605", "bodyText": "can we have only one constructor with the all the parameters to avoid the operationName/callerContext assign in multiple places?", "author": "xiaoyuyao", "createdAt": "2020-02-12T00:25:21Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java", "diffHunk": "@@ -17,19 +17,227 @@\n  */\n package org.apache.hadoop.hdfs.server.namenode;\n \n+import com.google.common.annotations.VisibleForTesting;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.classification.InterfaceAudience;\n import org.apache.hadoop.classification.InterfaceStability;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.fs.permission.FsAction;\n import org.apache.hadoop.hdfs.DFSUtil;\n+import org.apache.hadoop.ipc.CallerContext;\n import org.apache.hadoop.security.AccessControlException;\n import org.apache.hadoop.security.UserGroupInformation;\n \n @InterfaceAudience.Public\n @InterfaceStability.Unstable\n public abstract class INodeAttributeProvider {\n \n+  public static class AuthorizationContext {\n+    public String fsOwner;\n+    public String supergroup;\n+    public UserGroupInformation callerUgi;\n+    public INodeAttributes[] inodeAttrs;\n+    public INode[] inodes;\n+    public byte[][] pathByNameArr;\n+    public int snapshotId;\n+    public String path;\n+    public int ancestorIndex;\n+    public boolean doCheckOwner;\n+    public FsAction ancestorAccess;\n+    public FsAction parentAccess;\n+    public FsAction access;\n+    public FsAction subAccess;\n+    public boolean ignoreEmptyDir;\n+    public String operationName;\n+    public CallerContext callerContext;\n+\n+    public static class Builder {\n+      public String fsOwner;\n+      public String supergroup;\n+      public UserGroupInformation callerUgi;\n+      public INodeAttributes[] inodeAttrs;\n+      public INode[] inodes;\n+      public byte[][] pathByNameArr;\n+      public int snapshotId;\n+      public String path;\n+      public int ancestorIndex;\n+      public boolean doCheckOwner;\n+      public FsAction ancestorAccess;\n+      public FsAction parentAccess;\n+      public FsAction access;\n+      public FsAction subAccess;\n+      public boolean ignoreEmptyDir;\n+      public String operationName;\n+      public CallerContext callerContext;\n+\n+      public AuthorizationContext build() {\n+        return new AuthorizationContext(this);\n+      }\n+\n+      public Builder fsOwner(String val) {\n+        this.fsOwner = val;\n+        return this;\n+      }\n+\n+      public Builder supergroup(String val) {\n+        this.supergroup = val;\n+        return this;\n+      }\n+\n+      public Builder callerUgi(UserGroupInformation val) {\n+        this.callerUgi = val;\n+        return this;\n+      }\n+\n+      public Builder inodeAttrs(INodeAttributes[] val) {\n+        this.inodeAttrs = val;\n+        return this;\n+      }\n+\n+      public Builder inodes(INode[] val) {\n+        this.inodes = val;\n+        return this;\n+      }\n+\n+      public Builder pathByNameArr(byte[][] val) {\n+        this.pathByNameArr = val;\n+        return this;\n+      }\n+\n+      public Builder snapshotId(int val) {\n+        this.snapshotId = val;\n+        return this;\n+      }\n+\n+      public Builder path(String val) {\n+        this.path = val;\n+        return this;\n+      }\n+\n+      public Builder ancestorIndex(int val) {\n+        this.ancestorIndex = val;\n+        return this;\n+      }\n+\n+      public Builder doCheckOwner(boolean val) {\n+        this.doCheckOwner = val;\n+        return this;\n+      }\n+\n+      public Builder ancestorAccess(FsAction val) {\n+        this.ancestorAccess = val;\n+        return this;\n+      }\n+\n+      public Builder parentAccess(FsAction val) {\n+        this.parentAccess = val;\n+        return this;\n+      }\n+\n+      public Builder access(FsAction val) {\n+        this.access = val;\n+        return this;\n+      }\n+\n+      public Builder subAccess(FsAction val) {\n+        this.subAccess = val;\n+        return this;\n+      }\n+\n+      public Builder ignoreEmptyDir(boolean val) {\n+        this.ignoreEmptyDir = val;\n+        return this;\n+      }\n+\n+      public Builder operationName(String val) {\n+        this.operationName = val;\n+        return this;\n+      }\n+\n+      public Builder callerContext(CallerContext val) {\n+        this.callerContext = val;\n+        return this;\n+      }\n+    }\n+\n+    public AuthorizationContext(\n+        String fsOwner,\n+        String supergroup,\n+        UserGroupInformation callerUgi,\n+        INodeAttributes[] inodeAttrs,\n+        INode[] inodes,\n+        byte[][] pathByNameArr,\n+        int snapshotId,\n+        String path,\n+        int ancestorIndex,\n+        boolean doCheckOwner,\n+        FsAction ancestorAccess,\n+        FsAction parentAccess,\n+        FsAction access,\n+        FsAction subAccess,\n+        boolean ignoreEmptyDir) {\n+      this.fsOwner = fsOwner;\n+      this.supergroup = supergroup;\n+      this.callerUgi = callerUgi;\n+      this.inodeAttrs = inodeAttrs;\n+      this.inodes = inodes;\n+      this.pathByNameArr = pathByNameArr;\n+      this.snapshotId = snapshotId;\n+      this.path = path;\n+      this.ancestorIndex = ancestorIndex;\n+      this.doCheckOwner = doCheckOwner;\n+      this.ancestorAccess = ancestorAccess;\n+      this.parentAccess = parentAccess;\n+      this.access = access;\n+      this.subAccess = subAccess;\n+      this.ignoreEmptyDir = ignoreEmptyDir;\n+    }\n+\n+    public AuthorizationContext(\n+        String fsOwner,\n+        String supergroup,\n+        UserGroupInformation callerUgi,\n+        INodeAttributes[] inodeAttrs,\n+        INode[] inodes,\n+        byte[][] pathByNameArr,\n+        int snapshotId,\n+        String path,\n+        int ancestorIndex,\n+        boolean doCheckOwner,\n+        FsAction ancestorAccess,\n+        FsAction parentAccess,\n+        FsAction access,\n+        FsAction subAccess,\n+        boolean ignoreEmptyDir,\n+        String operationName,\n+        CallerContext callerContext) {\n+      this(fsOwner, supergroup, callerUgi, inodeAttrs, inodes,\n+          pathByNameArr, snapshotId, path, ancestorIndex, doCheckOwner,\n+          ancestorAccess, parentAccess, access, subAccess, ignoreEmptyDir);\n+      this.operationName = operationName;", "originalCommit": "d1d954ba992b7be55b98ee4aaf16ddad655f52d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3Nzc1MQ==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r381477751", "bodyText": "removed this constructor. It is not used.", "author": "jojochuang", "createdAt": "2020-02-19T18:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f5b205e4af2aeb907ac6670e65a7e1c5d2794bc5", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\nindex 4d9197a5fb4..3e249dda76b 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java\n\n@@ -28,6 +28,8 @@\n import org.apache.hadoop.security.AccessControlException;\n import org.apache.hadoop.security.UserGroupInformation;\n \n+import java.util.Arrays;\n+\n @InterfaceAudience.Public\n @InterfaceStability.Unstable\n public abstract class INodeAttributeProvider {\n"}}, {"oid": "f5b205e4af2aeb907ac6670e65a7e1c5d2794bc5", "url": "https://github.com/apache/hadoop/commit/f5b205e4af2aeb907ac6670e65a7e1c5d2794bc5", "message": "Addressed Xiaoyu's review comments.\n\n(1) Updated INodeAttributeProvider#equals.\n(2) Added javadoc of checkPermissionWithContext.\n(3) Removed the unused constructor.\n\nChange-Id: I15b4235dd220330072f62c3cfa1954eda0308632", "committedDate": "2020-02-19T22:07:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4Mzc3OA==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r386483778", "bodyText": "what does this do?", "author": "steveloughran", "createdAt": "2020-03-02T16:01:06Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestINodeAttributeProvider.java", "diffHunk": "@@ -81,6 +81,20 @@ public void checkPermission(String fsOwner, String supergroup,\n         }\n         CALLED.add(\"checkPermission|\" + ancestorAccess + \"|\" + parentAccess + \"|\" + access);\n       }\n+\n+      @Override\n+      public void checkPermissionWithContext(\n+          AuthorizationContext authzContext) throws AccessControlException {\n+        if (authzContext.ancestorIndex > 1\n+            && authzContext.inodes[1].getLocalName().equals(\"user\")\n+            && authzContext.inodes[2].getLocalName().equals(\"acl\")) {\n+          this.ace.checkPermissionWithContext(authzContext);\n+        }\n+        CALLED.add(\"checkPermission|\" + authzContext.ancestorAccess + \"|\" +\n+            authzContext.parentAccess + \"|\" + authzContext.access);\n+      }\n+\n+      public void abc() {}", "originalCommit": "f7541ec89d78b0bde5b567eccc53bf350bad11d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "472ef2853b61adc21668c520f1ff166bbd1284db", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestINodeAttributeProvider.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestINodeAttributeProvider.java\nindex 4cb48762e3c..89cb260388c 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestINodeAttributeProvider.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestINodeAttributeProvider.java\n\n@@ -81,20 +81,6 @@ public void checkPermission(String fsOwner, String supergroup,\n         }\n         CALLED.add(\"checkPermission|\" + ancestorAccess + \"|\" + parentAccess + \"|\" + access);\n       }\n-\n-      @Override\n-      public void checkPermissionWithContext(\n-          AuthorizationContext authzContext) throws AccessControlException {\n-        if (authzContext.ancestorIndex > 1\n-            && authzContext.inodes[1].getLocalName().equals(\"user\")\n-            && authzContext.inodes[2].getLocalName().equals(\"acl\")) {\n-          this.ace.checkPermissionWithContext(authzContext);\n-        }\n-        CALLED.add(\"checkPermission|\" + authzContext.ancestorAccess + \"|\" +\n-            authzContext.parentAccess + \"|\" + authzContext.access);\n-      }\n-\n-      public void abc() {}\n     }\n \n     @Override\n"}}, {"oid": "472ef2853b61adc21668c520f1ff166bbd1284db", "url": "https://github.com/apache/hadoop/commit/472ef2853b61adc21668c520f1ff166bbd1284db", "message": "Stash", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "f68af77bc4b87b09d6dbb3e6f17a5f8a65dd01e1", "url": "https://github.com/apache/hadoop/commit/f68af77bc4b87b09d6dbb3e6f17a5f8a65dd01e1", "message": "In progress", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "26bccb23248568873fd48486ac3043c9b4d4c79d", "url": "https://github.com/apache/hadoop/commit/26bccb23248568873fd48486ac3043c9b4d4c79d", "message": "Revert FSNamesystem change", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "c375d1cb9d819014ee6b302f6821644fa5ff9bf4", "url": "https://github.com/apache/hadoop/commit/c375d1cb9d819014ee6b302f6821644fa5ff9bf4", "message": "Stash", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "38216768c72d1a43dcf60af24d6ffe1409963320", "url": "https://github.com/apache/hadoop/commit/38216768c72d1a43dcf60af24d6ffe1409963320", "message": "Make AuthorizationContext variables public\n\nChange-Id: I1e86ec74e3bc2174a38b00c7731a9e870f87bbd5\n(cherry picked from commit 8d7657694928353018a25541f23577d734ed9dea)", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "762b8a161cd004e7e3de9a9e2ca91183ca2ad175", "url": "https://github.com/apache/hadoop/commit/762b8a161cd004e7e3de9a9e2ca91183ca2ad175", "message": "Add log messages.\n\nChange-Id: Ib22ef70b26fa6eccbac0dedd10b906cbaa84f47b\n(cherry picked from commit b92754e8a9eb56ddba862c6ffcf7349a6bf8688e)", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "61086ae883226f111ace942cbcb356c5428dc2ec", "url": "https://github.com/apache/hadoop/commit/61086ae883226f111ace942cbcb356c5428dc2ec", "message": "Fixed log message & compilation errors.\n\nChange-Id: I4e103e333b980a41214d9c954dfdfced64202ac1", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "11d84c48646f155d0842c032e0fde5be962773cf", "url": "https://github.com/apache/hadoop/commit/11d84c48646f155d0842c032e0fde5be962773cf", "message": "Introduce a builder for AuthorizationContext.\n\nChange-Id: Ice1cc086a748bc8c85a5502fe7382c1ad8cf9f84", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "c3edec943783155084ff7bb9b077a12cab6f64ed", "url": "https://github.com/apache/hadoop/commit/c3edec943783155084ff7bb9b077a12cab6f64ed", "message": "Add unit tests for the new API interface.\n\nChange-Id: I2fc6bf724f21193fb06f6cd9b9c98ef7ba786fa1", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "84e448d930773bfc78fe2b075888c5bd9cfcdc35", "url": "https://github.com/apache/hadoop/commit/84e448d930773bfc78fe2b075888c5bd9cfcdc35", "message": "Simplify test code.\n\nChange-Id: I245e000bd1ca41b5a261f60672e9fd4ecfe272b1", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "b7abcad21c3566f99dfa2a701b9b12978f56f6d4", "url": "https://github.com/apache/hadoop/commit/b7abcad21c3566f99dfa2a701b9b12978f56f6d4", "message": "Addressed Xiaoyu's review comments.\n\n(1) Updated INodeAttributeProvider#equals.\n(2) Added javadoc of checkPermissionWithContext.\n(3) Removed the unused constructor.\n\nChange-Id: I15b4235dd220330072f62c3cfa1954eda0308632", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "c7e8be277a3738ad2e5288ee1e9e2a241b701ef9", "url": "https://github.com/apache/hadoop/commit/c7e8be277a3738ad2e5288ee1e9e2a241b701ef9", "message": "Add a dummy hashCode() to address the findbugs message.\n\nChange-Id: I9e3c673ac8b1091a18ada941c7dfe360a6f2f5ca", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "66eeaa706eda0ecf2a8bd0bc2136a8cc1fab5b6c", "url": "https://github.com/apache/hadoop/commit/66eeaa706eda0ecf2a8bd0bc2136a8cc1fab5b6c", "message": "Remove needless code.\n\nChange-Id: Ibf4af2171a86acefa424b96dbfa6dcefc4dbb07d", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "95ae9b4a9a7ce1c9ede1b16304f75286d4c26208", "url": "https://github.com/apache/hadoop/commit/95ae9b4a9a7ce1c9ede1b16304f75286d4c26208", "message": "Update for checkstyle, findbugs and javac warnings.\n\nChange-Id: I83d03a9925c80f220d178cced4bd73045bb7b346", "committedDate": "2020-03-09T18:44:02Z", "type": "commit"}, {"oid": "95ae9b4a9a7ce1c9ede1b16304f75286d4c26208", "url": "https://github.com/apache/hadoop/commit/95ae9b4a9a7ce1c9ede1b16304f75286d4c26208", "message": "Update for checkstyle, findbugs and javac warnings.\n\nChange-Id: I83d03a9925c80f220d178cced4bd73045bb7b346", "committedDate": "2020-03-09T18:44:02Z", "type": "forcePushed"}, {"oid": "2be1f3b95ef67954703775f7a6b3ccbf4b1a1378", "url": "https://github.com/apache/hadoop/commit/2be1f3b95ef67954703775f7a6b3ccbf4b1a1378", "message": "Fix compilation error\n\nChange-Id: Id2bfea072e0d2cf4415e9cd766d6221b3296e034", "committedDate": "2020-03-09T20:17:21Z", "type": "commit"}, {"oid": "92defa1e4e6498b69644a8a8cf63f3646bfcde8e", "url": "https://github.com/apache/hadoop/commit/92defa1e4e6498b69644a8a8cf63f3646bfcde8e", "message": "Address checkstyles.\n\nChange-Id: I5d729710b7786e36470de6ad8dd4bcc5be80b48a", "committedDate": "2020-03-10T00:30:40Z", "type": "commit"}, {"oid": "a250c8b20c4a2672e3a553b1b9601794916e12b4", "url": "https://github.com/apache/hadoop/commit/a250c8b20c4a2672e3a553b1b9601794916e12b4", "message": "Fixed a bug in builder pattern\n\nChange-Id: If12c8353698e4a14607ede51fd3ba691d83ebc74", "committedDate": "2020-03-10T18:37:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEyMQ==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r391173121", "bodyText": "There are other places that need to be patched with setOperationType After HDFS-7416 refactor, not all permission check is done in FSN.\nHere is the list of missed ones:\nFSDirSymlinkOp#createSymlinkInt()\nNameNodeAdapter#getFileInfo()\nNamenodeFsck#getBlockLocations()\nFSNDNCache#addCacheDirective/removeCacheDirective/modifyCacheDirective/listCacheDirectives/listCachePools", "author": "xiaoyuyao", "createdAt": "2020-03-11T18:19:23Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java", "diffHunk": "@@ -1982,6 +1982,7 @@ void setPermission(String src, FsPermission permission) throws IOException {\n     FileStatus auditStat;\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc = getPermissionChecker();\n+    FSPermissionChecker.setOperationType(operationName);", "originalCommit": "a250c8b20c4a2672e3a553b1b9601794916e12b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMTg5OQ==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r391311899", "bodyText": "Thanks @xiaoyuyao for the review.\n\n\nFSDirSymlinkOp#createSymlinkInt() is an exception. It doesn't check permission in the FSNamesystem so missed this one. Added.\n\n\nNameNodeAdapter#getFileInfo() is used only in tests.\n\n\nNamenodeFsck#getBlockLocations() --> call it fsckGetBlockLocations to distinguish it from regular open operations.\n\n\nFSNDNCache#addCacheDirective/removeCacheDirective/modifyCacheDirective/listCacheDirectives/listCachePools --> done", "author": "jojochuang", "createdAt": "2020-03-11T22:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3OTU1MQ==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r391179551", "bodyText": "NIT: typo: accessessible", "author": "xiaoyuyao", "createdAt": "2020-03-11T18:30:42Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java", "diffHunk": "@@ -68,6 +391,16 @@ public abstract void checkPermission(String fsOwner, String supergroup,\n         boolean ignoreEmptyDir)\n             throws AccessControlException;\n \n+    /**\n+     * Checks permission on a file system object. Has to throw an Exception\n+     * if the filesystem object is not accessessible by the calling Ugi.", "originalCommit": "a250c8b20c4a2672e3a553b1b9601794916e12b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4Nzc2OQ==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r391187769", "bodyText": "NIT: do we have a test case when the attributeProvider=null?", "author": "xiaoyuyao", "createdAt": "2020-03-11T18:45:20Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestAuthorizationContext.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdfs.server.namenode;\n+\n+import org.apache.hadoop.ipc.CallerContext;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class TestAuthorizationContext {\n+\n+  private String fsOwner = \"hdfs\";\n+  private String superGroup = \"hdfs\";\n+  private UserGroupInformation ugi = UserGroupInformation.\n+      createUserForTesting(fsOwner, new String[] {superGroup});\n+\n+  private INodeAttributes[] emptyINodeAttributes = new INodeAttributes[] {};\n+  private INodesInPath iip = mock(INodesInPath.class);\n+  private int snapshotId = 0;\n+  private INode[] inodes = new INode[] {};\n+  private byte[][] components = new byte[][] {};\n+  private String path = \"\";\n+  private int ancestorIndex = inodes.length - 2;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    when(iip.getPathSnapshotId()).thenReturn(snapshotId);\n+    when(iip.getINodesArray()).thenReturn(inodes);\n+    when(iip.getPathComponents()).thenReturn(components);\n+    when(iip.getPath()).thenReturn(path);\n+  }\n+\n+  @Test\n+  public void testBuilder() {\n+    String opType = \"test\";\n+    CallerContext.setCurrent(new CallerContext.Builder(\n+        \"TestAuthorizationContext\").build());\n+\n+    INodeAttributeProvider.AuthorizationContext.Builder builder =\n+        new INodeAttributeProvider.AuthorizationContext.Builder();\n+    builder.fsOwner(fsOwner).\n+        supergroup(superGroup).\n+        callerUgi(ugi).\n+        inodeAttrs(emptyINodeAttributes).\n+        inodes(inodes).\n+        pathByNameArr(components).\n+        snapshotId(snapshotId).\n+        path(path).\n+        ancestorIndex(ancestorIndex).\n+        doCheckOwner(true).\n+        ancestorAccess(null).\n+        parentAccess(null).\n+        access(null).\n+        subAccess(null).\n+        ignoreEmptyDir(true).\n+        operationName(opType).\n+        callerContext(CallerContext.getCurrent());\n+\n+    INodeAttributeProvider.AuthorizationContext authzContext = builder.build();\n+    assertEquals(authzContext.getFsOwner(), fsOwner);\n+    assertEquals(authzContext.getSupergroup(), superGroup);\n+    assertEquals(authzContext.getCallerUgi(), ugi);\n+    assertEquals(authzContext.getInodeAttrs(), emptyINodeAttributes);\n+    assertEquals(authzContext.getInodes(), inodes);\n+    assertEquals(authzContext.getPathByNameArr(), components);\n+    assertEquals(authzContext.getSnapshotId(), snapshotId);\n+    assertEquals(authzContext.getPath(), path);\n+    assertEquals(authzContext.getAncestorIndex(), ancestorIndex);\n+    assertEquals(authzContext.getOperationName(), opType);\n+    assertEquals(authzContext.getCallerContext(), CallerContext.getCurrent());\n+  }\n+\n+  @Test\n+  public void testLegacyAPI() throws IOException {\n+    INodeAttributeProvider.AccessControlEnforcer\n+        mockEnforcer = mock(INodeAttributeProvider.AccessControlEnforcer.class);\n+    INodeAttributeProvider mockINodeAttributeProvider =\n+        mock(INodeAttributeProvider.class);\n+    when(mockINodeAttributeProvider.getExternalAccessControlEnforcer(any())).\n+        thenReturn(mockEnforcer);\n+\n+    FSPermissionChecker checker = new FSPermissionChecker(\n+        fsOwner, superGroup, ugi, mockINodeAttributeProvider);", "originalCommit": "a250c8b20c4a2672e3a553b1b9601794916e12b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMzAwNQ==", "url": "https://github.com/apache/hadoop/pull/1829#discussion_r391313005", "bodyText": "this is covered by existing tests when FSDirectory initializes a FSPermissionChecker, so this is good.", "author": "jojochuang", "createdAt": "2020-03-11T22:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4Nzc2OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f904810a7bab857fd400c5a10be64de4930740e6", "url": "https://github.com/apache/hadoop/commit/f904810a7bab857fd400c5a10be64de4930740e6", "message": "Added a few missing operation names.\n\nChange-Id: Ia2c18eab38e120b634d07dbe807977e72b88ee77", "committedDate": "2020-03-11T23:20:37Z", "type": "commit"}, {"oid": "32dd2c1aa78d38256f06b60ffeb05f3993af924c", "url": "https://github.com/apache/hadoop/commit/32dd2c1aa78d38256f06b60ffeb05f3993af924c", "message": "Address checkstyle issue.\n\nChange-Id: I19ba8945b0408e6570d096b23fb50198b4cac362", "committedDate": "2020-03-13T18:28:13Z", "type": "commit"}]}