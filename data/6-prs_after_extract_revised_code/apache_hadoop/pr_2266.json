{"pr_number": 2266, "pr_title": "HDFS-15554. RBF: force router check file existence in destinations before adding/updating mount points", "pr_createdAt": "2020-09-01T21:49:58Z", "pr_url": "https://github.com/apache/hadoop/pull/2266", "timeline": [{"oid": "4ddfb34bdaec13f609d421391108edb021638f26", "url": "https://github.com/apache/hadoop/commit/4ddfb34bdaec13f609d421391108edb021638f26", "message": "[RBF] Force check destination file exists before adding/updating mount points", "committedDate": "2020-09-01T21:41:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1ODM5Nw==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481458397", "bodyText": "Avoid", "author": "goiri", "createdAt": "2020-09-01T22:05:46Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java", "diffHunk": "@@ -128,7 +166,6 @@ public void testAddMountTable() throws IOException {\n     MountTable newEntry = MountTable.newInstance(\n         \"/testpath\", Collections.singletonMap(\"ns0\", \"/testdir\"),\n         Time.now(), Time.now());\n-", "originalCommit": "4ddfb34bdaec13f609d421391108edb021638f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "173407f369cc42db84502ad5b5c160bd7f1378d8", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\nindex e468d7c598e..24315a8a11e 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n\n@@ -166,6 +147,7 @@ public void testAddMountTable() throws IOException {\n     MountTable newEntry = MountTable.newInstance(\n         \"/testpath\", Collections.singletonMap(\"ns0\", \"/testdir\"),\n         Time.now(), Time.now());\n+\n     RouterClient client = routerContext.getAdminClient();\n     MountTableManager mountTable = client.getMountTableManager();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1ODU2Mg==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481458562", "bodyText": "Add a comment highlighting what this part does.", "author": "goiri", "createdAt": "2020-09-01T22:06:11Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java", "diffHunk": "@@ -103,11 +113,39 @@ public static void globalSetUp() throws Exception {\n         createNamenodeReport(\"ns1\", \"nn1\", HAServiceState.ACTIVE));\n     stateStore.refreshCaches(true);\n \n+    setUpMocks();\n+  }\n+\n+  private static void setUpMocks() throws IOException {\n     RouterRpcServer spyRpcServer =\n         Mockito.spy(routerContext.getRouter().createRpcServer());\n     Whitebox\n         .setInternalState(routerContext.getRouter(), \"rpcServer\", spyRpcServer);\n     Mockito.doReturn(null).when(spyRpcServer).getFileInfo(Mockito.anyString());\n+\n+    mockRpcClient = Mockito.spy(spyRpcServer.getRPCClient());", "originalCommit": "4ddfb34bdaec13f609d421391108edb021638f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "173407f369cc42db84502ad5b5c160bd7f1378d8", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\nindex e468d7c598e..24315a8a11e 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n\n@@ -113,39 +110,23 @@ public static void globalSetUp() throws Exception {\n         createNamenodeReport(\"ns1\", \"nn1\", HAServiceState.ACTIVE));\n     stateStore.refreshCaches(true);\n \n-    setUpMocks();\n-  }\n-\n-  private static void setUpMocks() throws IOException {\n     RouterRpcServer spyRpcServer =\n         Mockito.spy(routerContext.getRouter().createRpcServer());\n-    Whitebox\n-        .setInternalState(routerContext.getRouter(), \"rpcServer\", spyRpcServer);\n-    Mockito.doReturn(null).when(spyRpcServer).getFileInfo(Mockito.anyString());\n-\n+    FieldSetter.setField(routerContext.getRouter(),\n+        Router.class.getDeclaredField(\"rpcServer\"), spyRpcServer);\n+    Mockito.doReturn(null).when(spyRpcServer)\n+        .getFileInfo(Mockito.anyString());\n+    // Mocked two files corresponding to the two mount entries.\n     mockRpcClient = Mockito.spy(spyRpcServer.getRPCClient());\n-    Whitebox\n-        .setInternalState(spyRpcServer, \"rpcClient\", mockRpcClient);\n-    RemoteLocation remoteLocation0 = new RemoteLocation(\"ns0\", \"/testdir\", null);\n-    RemoteLocation remoteLocation1 = new RemoteLocation(\"ns1\", \"/\", null);\n-    mockResponse0.put(remoteLocation0,\n-        new HdfsFileStatus.Builder().build());\n-    Mockito.doReturn(mockResponse0).when(mockRpcClient).invokeConcurrent(\n-        Mockito.eq(Lists.newArrayList(remoteLocation0)),\n-        Mockito.any(RemoteMethod.class),\n-        Mockito.eq(false),\n-        Mockito.eq(false),\n-        Mockito.eq(HdfsFileStatus.class)\n-    );\n-    mockResponse1.put(remoteLocation1,\n-        new HdfsFileStatus.Builder().build());\n-    Mockito.doReturn(mockResponse1).when(mockRpcClient).invokeConcurrent(\n-        Mockito.eq(Lists.newArrayList(remoteLocation1)),\n-        Mockito.any(RemoteMethod.class),\n-        Mockito.eq(false),\n-        Mockito.eq(false),\n-        Mockito.eq(HdfsFileStatus.class)\n-    );\n+    FieldSetter.setField(spyRpcServer,\n+        RouterRpcServer.class.getDeclaredField(\"rpcClient\"),\n+        mockRpcClient);\n+    FederationTestUtils.mockMountTableDestination(\n+        mockRpcClient, null,\n+        Lists.newArrayList(\"ns0\"), Lists.newArrayList(\"/testdir\"));\n+    FederationTestUtils.mockMountTableDestination(\n+        mockRpcClient, null,\n+        Lists.newArrayList(\"ns1\"), Lists.newArrayList(\"/\"));\n   }\n \n   @AfterClass\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1ODYyNw==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481458627", "bodyText": "Add javadoc", "author": "goiri", "createdAt": "2020-09-01T22:06:20Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java", "diffHunk": "@@ -103,11 +113,39 @@ public static void globalSetUp() throws Exception {\n         createNamenodeReport(\"ns1\", \"nn1\", HAServiceState.ACTIVE));\n     stateStore.refreshCaches(true);\n \n+    setUpMocks();\n+  }\n+\n+  private static void setUpMocks() throws IOException {", "originalCommit": "4ddfb34bdaec13f609d421391108edb021638f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "173407f369cc42db84502ad5b5c160bd7f1378d8", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\nindex e468d7c598e..24315a8a11e 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n\n@@ -113,39 +110,23 @@ public static void globalSetUp() throws Exception {\n         createNamenodeReport(\"ns1\", \"nn1\", HAServiceState.ACTIVE));\n     stateStore.refreshCaches(true);\n \n-    setUpMocks();\n-  }\n-\n-  private static void setUpMocks() throws IOException {\n     RouterRpcServer spyRpcServer =\n         Mockito.spy(routerContext.getRouter().createRpcServer());\n-    Whitebox\n-        .setInternalState(routerContext.getRouter(), \"rpcServer\", spyRpcServer);\n-    Mockito.doReturn(null).when(spyRpcServer).getFileInfo(Mockito.anyString());\n-\n+    FieldSetter.setField(routerContext.getRouter(),\n+        Router.class.getDeclaredField(\"rpcServer\"), spyRpcServer);\n+    Mockito.doReturn(null).when(spyRpcServer)\n+        .getFileInfo(Mockito.anyString());\n+    // Mocked two files corresponding to the two mount entries.\n     mockRpcClient = Mockito.spy(spyRpcServer.getRPCClient());\n-    Whitebox\n-        .setInternalState(spyRpcServer, \"rpcClient\", mockRpcClient);\n-    RemoteLocation remoteLocation0 = new RemoteLocation(\"ns0\", \"/testdir\", null);\n-    RemoteLocation remoteLocation1 = new RemoteLocation(\"ns1\", \"/\", null);\n-    mockResponse0.put(remoteLocation0,\n-        new HdfsFileStatus.Builder().build());\n-    Mockito.doReturn(mockResponse0).when(mockRpcClient).invokeConcurrent(\n-        Mockito.eq(Lists.newArrayList(remoteLocation0)),\n-        Mockito.any(RemoteMethod.class),\n-        Mockito.eq(false),\n-        Mockito.eq(false),\n-        Mockito.eq(HdfsFileStatus.class)\n-    );\n-    mockResponse1.put(remoteLocation1,\n-        new HdfsFileStatus.Builder().build());\n-    Mockito.doReturn(mockResponse1).when(mockRpcClient).invokeConcurrent(\n-        Mockito.eq(Lists.newArrayList(remoteLocation1)),\n-        Mockito.any(RemoteMethod.class),\n-        Mockito.eq(false),\n-        Mockito.eq(false),\n-        Mockito.eq(HdfsFileStatus.class)\n-    );\n+    FieldSetter.setField(spyRpcServer,\n+        RouterRpcServer.class.getDeclaredField(\"rpcClient\"),\n+        mockRpcClient);\n+    FederationTestUtils.mockMountTableDestination(\n+        mockRpcClient, null,\n+        Lists.newArrayList(\"ns0\"), Lists.newArrayList(\"/testdir\"));\n+    FederationTestUtils.mockMountTableDestination(\n+        mockRpcClient, null,\n+        Lists.newArrayList(\"ns1\"), Lists.newArrayList(\"/\"));\n   }\n \n   @AfterClass\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1ODg4MQ==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481458881", "bodyText": "I think whitebox needed to be deprecated.", "author": "goiri", "createdAt": "2020-09-01T22:06:56Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java", "diffHunk": "@@ -103,11 +113,39 @@ public static void globalSetUp() throws Exception {\n         createNamenodeReport(\"ns1\", \"nn1\", HAServiceState.ACTIVE));\n     stateStore.refreshCaches(true);\n \n+    setUpMocks();\n+  }\n+\n+  private static void setUpMocks() throws IOException {\n     RouterRpcServer spyRpcServer =\n         Mockito.spy(routerContext.getRouter().createRpcServer());\n     Whitebox\n         .setInternalState(routerContext.getRouter(), \"rpcServer\", spyRpcServer);\n     Mockito.doReturn(null).when(spyRpcServer).getFileInfo(Mockito.anyString());\n+\n+    mockRpcClient = Mockito.spy(spyRpcServer.getRPCClient());\n+    Whitebox", "originalCommit": "4ddfb34bdaec13f609d421391108edb021638f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "173407f369cc42db84502ad5b5c160bd7f1378d8", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\nindex e468d7c598e..24315a8a11e 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n\n@@ -113,39 +110,23 @@ public static void globalSetUp() throws Exception {\n         createNamenodeReport(\"ns1\", \"nn1\", HAServiceState.ACTIVE));\n     stateStore.refreshCaches(true);\n \n-    setUpMocks();\n-  }\n-\n-  private static void setUpMocks() throws IOException {\n     RouterRpcServer spyRpcServer =\n         Mockito.spy(routerContext.getRouter().createRpcServer());\n-    Whitebox\n-        .setInternalState(routerContext.getRouter(), \"rpcServer\", spyRpcServer);\n-    Mockito.doReturn(null).when(spyRpcServer).getFileInfo(Mockito.anyString());\n-\n+    FieldSetter.setField(routerContext.getRouter(),\n+        Router.class.getDeclaredField(\"rpcServer\"), spyRpcServer);\n+    Mockito.doReturn(null).when(spyRpcServer)\n+        .getFileInfo(Mockito.anyString());\n+    // Mocked two files corresponding to the two mount entries.\n     mockRpcClient = Mockito.spy(spyRpcServer.getRPCClient());\n-    Whitebox\n-        .setInternalState(spyRpcServer, \"rpcClient\", mockRpcClient);\n-    RemoteLocation remoteLocation0 = new RemoteLocation(\"ns0\", \"/testdir\", null);\n-    RemoteLocation remoteLocation1 = new RemoteLocation(\"ns1\", \"/\", null);\n-    mockResponse0.put(remoteLocation0,\n-        new HdfsFileStatus.Builder().build());\n-    Mockito.doReturn(mockResponse0).when(mockRpcClient).invokeConcurrent(\n-        Mockito.eq(Lists.newArrayList(remoteLocation0)),\n-        Mockito.any(RemoteMethod.class),\n-        Mockito.eq(false),\n-        Mockito.eq(false),\n-        Mockito.eq(HdfsFileStatus.class)\n-    );\n-    mockResponse1.put(remoteLocation1,\n-        new HdfsFileStatus.Builder().build());\n-    Mockito.doReturn(mockResponse1).when(mockRpcClient).invokeConcurrent(\n-        Mockito.eq(Lists.newArrayList(remoteLocation1)),\n-        Mockito.any(RemoteMethod.class),\n-        Mockito.eq(false),\n-        Mockito.eq(false),\n-        Mockito.eq(HdfsFileStatus.class)\n-    );\n+    FieldSetter.setField(spyRpcServer,\n+        RouterRpcServer.class.getDeclaredField(\"rpcClient\"),\n+        mockRpcClient);\n+    FederationTestUtils.mockMountTableDestination(\n+        mockRpcClient, null,\n+        Lists.newArrayList(\"ns0\"), Lists.newArrayList(\"/testdir\"));\n+    FederationTestUtils.mockMountTableDestination(\n+        mockRpcClient, null,\n+        Lists.newArrayList(\"ns1\"), Lists.newArrayList(\"/\"));\n   }\n \n   @AfterClass\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1OTA3Ng==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481459076", "bodyText": "What are we doing with this? Is there a test actually using it?", "author": "goiri", "createdAt": "2020-09-01T22:07:28Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java", "diffHunk": "@@ -103,11 +113,39 @@ public static void globalSetUp() throws Exception {\n         createNamenodeReport(\"ns1\", \"nn1\", HAServiceState.ACTIVE));\n     stateStore.refreshCaches(true);\n \n+    setUpMocks();\n+  }\n+\n+  private static void setUpMocks() throws IOException {\n     RouterRpcServer spyRpcServer =\n         Mockito.spy(routerContext.getRouter().createRpcServer());\n     Whitebox\n         .setInternalState(routerContext.getRouter(), \"rpcServer\", spyRpcServer);\n     Mockito.doReturn(null).when(spyRpcServer).getFileInfo(Mockito.anyString());\n+\n+    mockRpcClient = Mockito.spy(spyRpcServer.getRPCClient());\n+    Whitebox\n+        .setInternalState(spyRpcServer, \"rpcClient\", mockRpcClient);\n+    RemoteLocation remoteLocation0 = new RemoteLocation(\"ns0\", \"/testdir\", null);\n+    RemoteLocation remoteLocation1 = new RemoteLocation(\"ns1\", \"/\", null);\n+    mockResponse0.put(remoteLocation0,\n+        new HdfsFileStatus.Builder().build());\n+    Mockito.doReturn(mockResponse0).when(mockRpcClient).invokeConcurrent(\n+        Mockito.eq(Lists.newArrayList(remoteLocation0)),\n+        Mockito.any(RemoteMethod.class),\n+        Mockito.eq(false),\n+        Mockito.eq(false),\n+        Mockito.eq(HdfsFileStatus.class)\n+    );\n+    mockResponse1.put(remoteLocation1,\n+        new HdfsFileStatus.Builder().build());\n+    Mockito.doReturn(mockResponse1).when(mockRpcClient).invokeConcurrent(", "originalCommit": "4ddfb34bdaec13f609d421391108edb021638f26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMjQ4NA==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481522484", "bodyText": "After adding the new logic in addMount and updateMount, the current tests would fail since they don't have the file created in destination ns. The mock is to avoid the failure for existing tests.\nI can add a negative test.", "author": "fengnanli", "createdAt": "2020-09-02T01:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1OTA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "173407f369cc42db84502ad5b5c160bd7f1378d8", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\nindex e468d7c598e..24315a8a11e 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n\n@@ -113,39 +110,23 @@ public static void globalSetUp() throws Exception {\n         createNamenodeReport(\"ns1\", \"nn1\", HAServiceState.ACTIVE));\n     stateStore.refreshCaches(true);\n \n-    setUpMocks();\n-  }\n-\n-  private static void setUpMocks() throws IOException {\n     RouterRpcServer spyRpcServer =\n         Mockito.spy(routerContext.getRouter().createRpcServer());\n-    Whitebox\n-        .setInternalState(routerContext.getRouter(), \"rpcServer\", spyRpcServer);\n-    Mockito.doReturn(null).when(spyRpcServer).getFileInfo(Mockito.anyString());\n-\n+    FieldSetter.setField(routerContext.getRouter(),\n+        Router.class.getDeclaredField(\"rpcServer\"), spyRpcServer);\n+    Mockito.doReturn(null).when(spyRpcServer)\n+        .getFileInfo(Mockito.anyString());\n+    // Mocked two files corresponding to the two mount entries.\n     mockRpcClient = Mockito.spy(spyRpcServer.getRPCClient());\n-    Whitebox\n-        .setInternalState(spyRpcServer, \"rpcClient\", mockRpcClient);\n-    RemoteLocation remoteLocation0 = new RemoteLocation(\"ns0\", \"/testdir\", null);\n-    RemoteLocation remoteLocation1 = new RemoteLocation(\"ns1\", \"/\", null);\n-    mockResponse0.put(remoteLocation0,\n-        new HdfsFileStatus.Builder().build());\n-    Mockito.doReturn(mockResponse0).when(mockRpcClient).invokeConcurrent(\n-        Mockito.eq(Lists.newArrayList(remoteLocation0)),\n-        Mockito.any(RemoteMethod.class),\n-        Mockito.eq(false),\n-        Mockito.eq(false),\n-        Mockito.eq(HdfsFileStatus.class)\n-    );\n-    mockResponse1.put(remoteLocation1,\n-        new HdfsFileStatus.Builder().build());\n-    Mockito.doReturn(mockResponse1).when(mockRpcClient).invokeConcurrent(\n-        Mockito.eq(Lists.newArrayList(remoteLocation1)),\n-        Mockito.any(RemoteMethod.class),\n-        Mockito.eq(false),\n-        Mockito.eq(false),\n-        Mockito.eq(HdfsFileStatus.class)\n-    );\n+    FieldSetter.setField(spyRpcServer,\n+        RouterRpcServer.class.getDeclaredField(\"rpcClient\"),\n+        mockRpcClient);\n+    FederationTestUtils.mockMountTableDestination(\n+        mockRpcClient, null,\n+        Lists.newArrayList(\"ns0\"), Lists.newArrayList(\"/testdir\"));\n+    FederationTestUtils.mockMountTableDestination(\n+        mockRpcClient, null,\n+        Lists.newArrayList(\"ns1\"), Lists.newArrayList(\"/\"));\n   }\n \n   @AfterClass\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1OTI1Nw==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481459257", "bodyText": "Add exception reasons", "author": "goiri", "createdAt": "2020-09-01T22:07:58Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java", "diffHunk": "@@ -562,11 +595,35 @@ public GetDestinationResponse getDestination(\n       LOG.error(\"Cannot get location for {}: {}\",\n           src, ioe.getMessage());\n     }\n-    if (nsIds.isEmpty() && !locations.isEmpty()) {\n-      String nsId = locations.get(0).getNameserviceId();\n-      nsIds.add(nsId);\n+    return nsIds;\n+  }\n+\n+  /**\n+   * Verify the file exists in destination nameservices to avoid dangling\n+   * mount points.\n+   *\n+   * @param entry the new mount points added, could be from add or update.\n+   * @return destination nameservices where the file doesn't exist.\n+   * @throws IOException", "originalCommit": "4ddfb34bdaec13f609d421391108edb021638f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "173407f369cc42db84502ad5b5c160bd7f1378d8", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java\nindex 6665ff47a30..5d514d4983b 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java\n\n@@ -604,9 +604,9 @@ public GetDestinationResponse getDestination(\n    *\n    * @param entry the new mount points added, could be from add or update.\n    * @return destination nameservices where the file doesn't exist.\n-   * @throws IOException\n+   * @throws IOException unable to verify the file in destinations\n    */\n-  private List<String> verifyFileInDestinations(MountTable entry)\n+  public List<String> verifyFileInDestinations(MountTable entry)\n       throws IOException {\n     GetDestinationRequest request =\n         GetDestinationRequest.newInstance(entry.getSourcePath());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjgwOA==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481606808", "bodyText": "I would unit tests just for this function if possible.", "author": "goiri", "createdAt": "2020-09-02T03:29:42Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java", "diffHunk": "@@ -562,11 +595,35 @@ public GetDestinationResponse getDestination(\n       LOG.error(\"Cannot get location for {}: {}\",\n           src, ioe.getMessage());\n     }\n-    if (nsIds.isEmpty() && !locations.isEmpty()) {\n-      String nsId = locations.get(0).getNameserviceId();\n-      nsIds.add(nsId);\n+    return nsIds;\n+  }\n+\n+  /**\n+   * Verify the file exists in destination nameservices to avoid dangling\n+   * mount points.\n+   *\n+   * @param entry the new mount points added, could be from add or update.\n+   * @return destination nameservices where the file doesn't exist.\n+   * @throws IOException\n+   */\n+  private List<String> verifyFileInDestinations(MountTable entry)", "originalCommit": "4ddfb34bdaec13f609d421391108edb021638f26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY5MTI1MQ==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r481691251", "bodyText": "Yeah, I can add that.\nThis logic change will break a lot of current tests listed by yetus above. What is a good practice here? I have two ideas in mind:\n\nmake the logic based on a command option when adding/updating mount tables.\nadd mock (if possible) like what I did for TestRouterAdmin.java to fake out the dirs in namenodes.\nI like 2 since I think this should be the default check, what's your opinion?", "author": "fengnanli", "createdAt": "2020-09-02T04:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0NTgyOQ==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r482245829", "bodyText": "I would fix those tests to have those paths existing yes.", "author": "goiri", "createdAt": "2020-09-02T17:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNjE3NA==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r483126174", "bodyText": "Thanks for the suggestion. I want to involve more people as well since when I started to fix the tests, I found there are quite a few tests targeting/testing cases for dangling mount points.\n@aajisaka Can you share your thoughts as well?", "author": "fengnanli", "createdAt": "2020-09-03T16:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5OTM3Ng==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r483399376", "bodyText": "@goiri Uploaded an early version of trying to fix all tests. This is pretty tedious work so before I spend more time on this, let me know your thoughts.\nThere are mainly two types of tests when dealing with mount table:\n\nUse mock RouterRpcServer and so on, this way no downstream namenode calls are made. I put the mock as well, see the change for TestRouterAdmin.java\nUse real downstream namenode interaction, see TestRouterMountTable.java. I created the paths before calling mount points change.\n\nI kept thinking a much easier way is to add a Router server side config to turn this on and the default is on. In the tests I can just turn the config off explicitly and this way I don't need to deal with individual tests.", "author": "fengnanli", "createdAt": "2020-09-04T05:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc2MDk4Mg==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r483760982", "bodyText": "Eventually we may want to make all the tests be correct, but for now I'm fine setting up the config for just the new tests.", "author": "goiri", "createdAt": "2020-09-04T17:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc2Nzc3Mg==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r483767772", "bodyText": "If that's the case, I will try to fix all in one batch.", "author": "fengnanli", "createdAt": "2020-09-04T17:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2OTM3Mw==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r484569373", "bodyText": "Had a discussion with @ayushtkn in the jira ticket and he suggested just making the config to preserve the current workflow and enable this feature optionally. I updated the diff as that and it is not necessary to fix a lot of tests in that case.", "author": "fengnanli", "createdAt": "2020-09-07T21:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "173407f369cc42db84502ad5b5c160bd7f1378d8", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java\nindex 6665ff47a30..5d514d4983b 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java\n\n@@ -604,9 +604,9 @@ public GetDestinationResponse getDestination(\n    *\n    * @param entry the new mount points added, could be from add or update.\n    * @return destination nameservices where the file doesn't exist.\n-   * @throws IOException\n+   * @throws IOException unable to verify the file in destinations\n    */\n-  private List<String> verifyFileInDestinations(MountTable entry)\n+  public List<String> verifyFileInDestinations(MountTable entry)\n       throws IOException {\n     GetDestinationRequest request =\n         GetDestinationRequest.newInstance(entry.getSourcePath());\n"}}, {"oid": "173407f369cc42db84502ad5b5c160bd7f1378d8", "url": "https://github.com/apache/hadoop/commit/173407f369cc42db84502ad5b5c160bd7f1378d8", "message": "[WIP] Fix tests", "committedDate": "2020-09-04T05:38:23Z", "type": "commit"}, {"oid": "8c206b268a3029502527a0b8755ba1af0020236d", "url": "https://github.com/apache/hadoop/commit/8c206b268a3029502527a0b8755ba1af0020236d", "message": "Add config to control the logic, avoid changing massive tests", "committedDate": "2020-09-07T21:17:17Z", "type": "commit"}, {"oid": "9274efe2c77bcddf5968491791cb74044b269d44", "url": "https://github.com/apache/hadoop/commit/9274efe2c77bcddf5968491791cb74044b269d44", "message": "Remove unused whitebox import", "committedDate": "2020-09-09T06:09:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5MTI4OQ==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r485891289", "bodyText": "Avoid the empty change", "author": "goiri", "createdAt": "2020-09-09T20:05:59Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java", "diffHunk": "@@ -128,7 +175,6 @@ public void testAddMountTable() throws IOException {\n     MountTable newEntry = MountTable.newInstance(\n         \"/testpath\", Collections.singletonMap(\"ns0\", \"/testdir\"),\n         Time.now(), Time.now());\n-", "originalCommit": "9274efe2c77bcddf5968491791cb74044b269d44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcaf4c0405352f6887c592e1509b4c4cfa556d7", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\nindex b98ae98d234..20dd4789574 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n\n@@ -175,6 +175,7 @@ public void testAddMountTable() throws IOException {\n     MountTable newEntry = MountTable.newInstance(\n         \"/testpath\", Collections.singletonMap(\"ns0\", \"/testdir\"),\n         Time.now(), Time.now());\n+\n     RouterClient client = routerContext.getAdminClient();\n     MountTableManager mountTable = client.getMountTableManager();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5MjAyNQ==", "url": "https://github.com/apache/hadoop/pull/2266#discussion_r485892025", "bodyText": "checkstyle is complaining", "author": "goiri", "createdAt": "2020-09-09T20:07:21Z", "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java", "diffHunk": "@@ -78,6 +83,11 @@\n       \"Hadoop:service=Router,name=FederationRPC\";\n   private static List<MountTable> mockMountTable;\n   private static StateStoreService stateStore;\n+  private static RouterRpcClient mockRpcClient;\n+  private static final Map<RemoteLocation, HdfsFileStatus> mockResponse0 =", "originalCommit": "9274efe2c77bcddf5968491791cb74044b269d44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcaf4c0405352f6887c592e1509b4c4cfa556d7", "chunk": "diff --git a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\nindex b98ae98d234..20dd4789574 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java\n\n@@ -84,10 +84,6 @@\n   private static List<MountTable> mockMountTable;\n   private static StateStoreService stateStore;\n   private static RouterRpcClient mockRpcClient;\n-  private static final Map<RemoteLocation, HdfsFileStatus> mockResponse0 =\n-      new HashMap<>();\n-  private static final Map<RemoteLocation, HdfsFileStatus> mockResponse1 =\n-      new HashMap<>();\n \n   @BeforeClass\n   public static void globalSetUp() throws Exception {\n"}}, {"oid": "ebcaf4c0405352f6887c592e1509b4c4cfa556d7", "url": "https://github.com/apache/hadoop/commit/ebcaf4c0405352f6887c592e1509b4c4cfa556d7", "message": "Fix style", "committedDate": "2020-09-09T20:36:32Z", "type": "commit"}, {"oid": "2dd5214764f9bfce29920aa86bdcbe908968a8f4", "url": "https://github.com/apache/hadoop/commit/2dd5214764f9bfce29920aa86bdcbe908968a8f4", "message": "Fixing checkstyle again", "committedDate": "2020-09-10T20:36:25Z", "type": "commit"}]}