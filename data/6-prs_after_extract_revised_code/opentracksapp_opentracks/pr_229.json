{"pr_number": 229, "pr_title": "Split detail and record to simplify the code.", "pr_createdAt": "2020-05-12T15:33:27Z", "pr_url": "https://github.com/OpenTracksApp/OpenTracks/pull/229", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMjg0Mw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/229#discussion_r424022843", "bodyText": "Made my day :)", "author": "dennisguse", "createdAt": "2020-05-12T20:46:11Z", "path": "src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/*\n+ * Copyright 2008 Google Inc.", "originalCommit": "1099edc19eb5d2b16212fa9d2b29b6da90a22928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMjE4Mw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/229#discussion_r424202183", "bodyText": "\ud83d\ude05", "author": "rgmf", "createdAt": "2020-05-13T06:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMjg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "04a70d060a966b5e77aba073e4e3765f57c88882", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java b/src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java\nindex 53b96a9c1..e91b749e3 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java\n\n@@ -1,19 +1,3 @@\n-/*\n- * Copyright 2008 Google Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n package de.dennisguse.opentracks;\n \n import android.content.Intent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMzYwMg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/229#discussion_r424023602", "bodyText": "Why not make it 0?\nAnd default to throw RuntimeException?", "author": "dennisguse", "createdAt": "2020-05-12T20:47:38Z", "path": "src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package de.dennisguse.opentracks;\n+\n+import android.content.Intent;\n+import android.content.SharedPreferences;\n+import android.content.SharedPreferences.OnSharedPreferenceChangeListener;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.view.WindowManager;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentPagerAdapter;\n+import androidx.viewpager.widget.ViewPager;\n+\n+import com.google.android.material.tabs.TabLayout;\n+\n+import de.dennisguse.opentracks.content.TrackDataHub;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.fragments.ChartFragment;\n+import de.dennisguse.opentracks.fragments.ChooseActivityTypeDialogFragment;\n+import de.dennisguse.opentracks.fragments.ConfirmDeleteDialogFragment;\n+import de.dennisguse.opentracks.fragments.RecordFragment;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceInterface;\n+import de.dennisguse.opentracks.settings.SettingsActivity;\n+import de.dennisguse.opentracks.util.IntentUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.TrackIconUtils;\n+import de.dennisguse.opentracks.util.TrackUtils;\n+\n+/**\n+ * An activity to show the track detail, record a new track or resumes an existing one.\n+ *\n+ * @author Leif Hendrik Wilden\n+ * @author Rodrigo Damazio\n+ */\n+public class TrackRecordActivity extends AbstractListActivity implements ChooseActivityTypeDialogFragment.ChooseActivityTypeCaller, ConfirmDeleteDialogFragment.ConfirmDeleteCaller, TrackActivityDataHubInterface {\n+\n+    public static final String EXTRA_TRACK_ID = \"track_id\";\n+\n+    private static final String TAG = TrackRecordActivity.class.getSimpleName();\n+\n+    private static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\n+\n+    // The following are set in onCreate\n+    private ContentProviderUtils contentProviderUtils;\n+    private SharedPreferences sharedPreferences;\n+    private TrackRecordingServiceConnection trackRecordingServiceConnection;\n+    private TrackDataHub trackDataHub;\n+    private ViewPager pager;\n+    private TrackController trackController;\n+\n+    // From intent\n+    private long trackId;\n+\n+    // Preferences\n+    private long recordingTrackId = PreferencesUtils.RECORDING_TRACK_ID_DEFAULT;\n+    private boolean recordingTrackPaused;\n+\n+    private final Runnable bindChangedCallback = new Runnable() {\n+        @Override\n+        public void run() {\n+            // After binding changes (is available), update the total time in trackController.\n+            runOnUiThread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    trackController.update(true, recordingTrackPaused);\n+                }\n+            });\n+\n+            if (recordingTrackId == -1L) {\n+                TrackRecordingServiceInterface service = trackRecordingServiceConnection.getServiceIfBound();\n+                if (service == null) {\n+                    Log.d(TAG, \"could not get TrackRecordingService\");\n+                    return;\n+                }\n+\n+                // Starts or resumes a track.\n+                int msg;\n+                if (trackId == -1L) {\n+                    // trackId isn't initialized -> leads a new recording.\n+                    trackId = service.startNewTrack();\n+                    recordingTrackId = trackId;\n+                    msg = R.string.track_detail_record_success;\n+                } else {\n+                    // trackId is initialized -> resumes the track.\n+                    recordingTrackId = trackId;\n+                    service.resumeTrack(trackId);\n+                    msg = R.string.track_detail_resume_success;\n+                }\n+\n+                // A recording track is on.\n+                Toast.makeText(TrackRecordActivity.this, msg, Toast.LENGTH_SHORT).show();\n+                trackDataHub.loadTrack(trackId);\n+                trackController.update(true, false);\n+                trackController.onResume(true, recordingTrackPaused);\n+            }\n+        }\n+    };\n+\n+    private final OnSharedPreferenceChangeListener sharedPreferenceChangeListener = new OnSharedPreferenceChangeListener() {\n+        @Override\n+        public void onSharedPreferenceChanged(SharedPreferences preferences, String key) {\n+            if (PreferencesUtils.isKey(TrackRecordActivity.this, R.string.recording_track_id_key, key)) {\n+                recordingTrackId = PreferencesUtils.getRecordingTrackId(TrackRecordActivity.this);\n+                setLockscreenPolicy();\n+                setScreenOnPolicy();\n+            }\n+\n+            if (PreferencesUtils.isKey(TrackRecordActivity.this, R.string.recording_track_paused_key, key)) {\n+                recordingTrackPaused = PreferencesUtils.isRecordingTrackPaused(TrackRecordActivity.this);\n+                setLockscreenPolicy();\n+                setScreenOnPolicy();\n+            }\n+\n+            if (PreferencesUtils.isKey(TrackRecordActivity.this, R.string.stats_show_on_lockscreen_while_recording_key, key)) {\n+                setLockscreenPolicy();\n+            }\n+\n+            if (PreferencesUtils.isKey(TrackRecordActivity.this, R.string.stats_keep_screen_on_while_recording_key, key)) {\n+                setScreenOnPolicy();\n+            }\n+\n+            if (key == null) return;\n+\n+            runOnUiThread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    TrackRecordActivity.this.invalidateOptionsMenu();\n+                    trackController.update(true, recordingTrackPaused);\n+                }\n+            });\n+        }\n+    };\n+\n+    private MenuItem insertMarkerMenuItem;\n+    private MenuItem markerListMenuItem;\n+\n+    private final OnClickListener recordListener = new OnClickListener() {\n+        @Override\n+        public void onClick(View v) {\n+            if (recordingTrackPaused) {\n+                // Paused -> Resume\n+                updateMenuItems(false);\n+                trackRecordingServiceConnection.resumeTrack();\n+                trackController.update(true, false);\n+            } else {\n+                // Recording -> Paused\n+                updateMenuItems(true);\n+                trackRecordingServiceConnection.pauseTrack();\n+                trackController.update(true, true);\n+            }\n+        }\n+    };\n+\n+    private final OnClickListener stopListener = new OnClickListener() {\n+        @Override\n+        public void onClick(View v) {\n+            trackRecordingServiceConnection.stopRecording(TrackRecordActivity.this, true);\n+            Intent newIntent = IntentUtils.newIntent(TrackRecordActivity.this, TrackDetailActivity.class)\n+                    .putExtra(TrackDetailActivity.EXTRA_TRACK_ID, trackId);\n+            startActivity(newIntent);\n+            updateMenuItems(true);\n+            finish();\n+        }\n+    };\n+\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        recordingTrackPaused = PreferencesUtils.isRecordingTrackPausedDefault(this);\n+\n+        contentProviderUtils = new ContentProviderUtils(this);\n+        handleIntent(getIntent());\n+\n+        sharedPreferences = PreferencesUtils.getSharedPreferences(this);\n+\n+        trackRecordingServiceConnection = new TrackRecordingServiceConnection(bindChangedCallback);\n+        trackDataHub = new TrackDataHub(this);\n+\n+        FragmentPagerAdapter adapter = new FragmentPagerAdapter(getSupportFragmentManager(), 1) {\n+            @Override\n+            public int getCount() {\n+                return 3;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public Fragment getItem(int position) {\n+                switch (position) {\n+                    case 1:\n+                        return ChartFragment.newInstance(false);\n+                    case 2:\n+                        return ChartFragment.newInstance(true);\n+                    default: //0", "originalCommit": "1099edc19eb5d2b16212fa9d2b29b6da90a22928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNDk0OQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/229#discussion_r424204949", "bodyText": "Better.\nI've changed TrackDetailActivity too.", "author": "rgmf", "createdAt": "2020-05-13T06:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMzYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "04a70d060a966b5e77aba073e4e3765f57c88882", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java b/src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java\nindex 53b96a9c1..e91b749e3 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackRecordActivity.java\n\n@@ -1,19 +1,3 @@\n-/*\n- * Copyright 2008 Google Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n package de.dennisguse.opentracks;\n \n import android.content.Intent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNjM2OQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/229#discussion_r424026369", "bodyText": "Should be in UnitConversions.", "author": "dennisguse", "createdAt": "2020-05-12T20:52:44Z", "path": "src/main/java/de/dennisguse/opentracks/util/StringUtils.java", "diffHunk": "@@ -63,6 +63,11 @@\n         ISO_8601_BASE.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n+    private static final long SECOND_IN_MILLIS = 1000;", "originalCommit": "1099edc19eb5d2b16212fa9d2b29b6da90a22928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNjczNQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/229#discussion_r424206735", "bodyText": "I did all these changes to add datetime in track detail in a human friendly way, but I really don't like so much the way it looks.\nAlso, layouts will be changed so I'm going to remove all this code ;)", "author": "rgmf", "createdAt": "2020-05-13T06:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNjM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "04a70d060a966b5e77aba073e4e3765f57c88882", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/util/StringUtils.java b/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\nindex 30c2d8655..8091a8c9c 100644\n--- a/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\n+++ b/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\n\n@@ -63,11 +63,6 @@ public class StringUtils {\n         ISO_8601_BASE.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n-    private static final long SECOND_IN_MILLIS = 1000;\n-    private static final long MINUTE_IN_MILLIS = SECOND_IN_MILLIS * 60;\n-    private static final long HOUR_IN_MILLIS = MINUTE_IN_MILLIS * 60;\n-    private static final long DAY_IN_MILLIS = HOUR_IN_MILLIS * 24;\n-\n     private StringUtils() {\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNzE5NA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/229#discussion_r424027194", "bodyText": "Why do this computation manually and not using Java's default?\nDate expiry = new Date(Long.parseLong(date));", "author": "dennisguse", "createdAt": "2020-05-12T20:54:16Z", "path": "src/main/java/de/dennisguse/opentracks/util/StringUtils.java", "diffHunk": "@@ -91,6 +96,77 @@ public static String formatDateTimeIso8601(long time_ms) {\n         }\n     }\n \n+    /**\n+     * Returns a datetime string in a readable user format.\n+     *\n+     * @param context       the context object.\n+     * @param timeInMillis  datetime in milliseconds.\n+     * @return              The formatted datetime string.\n+     */\n+    private static String getReadableDateTimeString(Context context, long timeInMillis) {\n+        int flags = DateUtils.FORMAT_SHOW_DATE\n+                | DateUtils.FORMAT_SHOW_TIME\n+                | DateUtils.FORMAT_SHOW_YEAR\n+                | DateUtils.FORMAT_SHOW_WEEKDAY;\n+\n+        return DateUtils.formatDateTime(context, timeInMillis, flags);\n+    }\n+\n+    /**\n+     * Returns the number of days since the epoch (January 01, 1970, 12:00 Midnight UTC).\n+     *\n+     * @param date date in milliseconds.\n+     * @return the number of days in UTC time from the epoch.\n+     */\n+    public static long getDayNumber(long date) {", "originalCommit": "1099edc19eb5d2b16212fa9d2b29b6da90a22928", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04a70d060a966b5e77aba073e4e3765f57c88882", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/util/StringUtils.java b/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\nindex 30c2d8655..8091a8c9c 100644\n--- a/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\n+++ b/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\n\n@@ -96,77 +91,6 @@ public class StringUtils {\n         }\n     }\n \n-    /**\n-     * Returns a datetime string in a readable user format.\n-     *\n-     * @param context       the context object.\n-     * @param timeInMillis  datetime in milliseconds.\n-     * @return              The formatted datetime string.\n-     */\n-    private static String getReadableDateTimeString(Context context, long timeInMillis) {\n-        int flags = DateUtils.FORMAT_SHOW_DATE\n-                | DateUtils.FORMAT_SHOW_TIME\n-                | DateUtils.FORMAT_SHOW_YEAR\n-                | DateUtils.FORMAT_SHOW_WEEKDAY;\n-\n-        return DateUtils.formatDateTime(context, timeInMillis, flags);\n-    }\n-\n-    /**\n-     * Returns the number of days since the epoch (January 01, 1970, 12:00 Midnight UTC).\n-     *\n-     * @param date date in milliseconds.\n-     * @return the number of days in UTC time from the epoch.\n-     */\n-    public static long getDayNumber(long date) {\n-        TimeZone tz = TimeZone.getDefault();\n-        long gmtOffset = tz.getOffset(date);\n-        return (date + gmtOffset) / DAY_IN_MILLIS;\n-    }\n-\n-    /**\n-     * Given a datetime in milliseconds, returns just the name to use for that day.\n-     * For example: \"today\", \"yesterday\", \"Wednesday\".\n-     *\n-     * @param context      the context object.\n-     * @param dateInMillis the datetime in milliseconds.\n-     * @return the string day of the week.\n-     */\n-    private static String getDayName(Context context, long dateInMillis) {\n-\n-        long dayNumber = getDayNumber(dateInMillis);\n-        long currentDayNumber = getDayNumber(System.currentTimeMillis());\n-        if (dayNumber == currentDayNumber) {\n-            return context.getString(R.string.generic_today);\n-        } else if (dayNumber == currentDayNumber - 1) {\n-            return context.getString(R.string.generic_yesterday);\n-        } else {\n-            SimpleDateFormat dayFormat = new SimpleDateFormat(\"EEEE\");\n-            return dayFormat.format(dateInMillis);\n-        }\n-    }\n-\n-    /**\n-     * Converts the datetime into something to display to users.\n-     *\n-     * @param context      context object.\n-     * @param dateInMillis datetime in milliseconds.\n-     * @return a string with a friendly user datetime format.\n-     */\n-    public static String getFriendlyDateTimeString(Context context, long dateInMillis) {\n-        long dayNumber = getDayNumber(dateInMillis);\n-        long currentDayNumber = getDayNumber(System.currentTimeMillis());\n-        String dayName = getDayName(context, dateInMillis);\n-        String readableDate = getReadableDateTimeString(context, dateInMillis);\n-\n-        if (currentDayNumber - dayNumber < 2) {\n-            String localizedDayName = new SimpleDateFormat(\"EEEE\").format(dateInMillis);\n-            return readableDate.replace(localizedDayName, dayName);\n-        } else {\n-            return readableDate;\n-        }\n-    }\n-\n     /**\n      * Formats the elapsed timed in the form \"MM:SS\" or \"H:MM:SS\".\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNzU1Ng==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/229#discussion_r424027556", "bodyText": "Do we have test coverage for this functions?", "author": "dennisguse", "createdAt": "2020-05-12T20:54:52Z", "path": "src/main/java/de/dennisguse/opentracks/util/StringUtils.java", "diffHunk": "@@ -91,6 +96,77 @@ public static String formatDateTimeIso8601(long time_ms) {\n         }\n     }\n \n+    /**\n+     * Returns a datetime string in a readable user format.\n+     *\n+     * @param context       the context object.\n+     * @param timeInMillis  datetime in milliseconds.\n+     * @return              The formatted datetime string.\n+     */\n+    private static String getReadableDateTimeString(Context context, long timeInMillis) {\n+        int flags = DateUtils.FORMAT_SHOW_DATE\n+                | DateUtils.FORMAT_SHOW_TIME\n+                | DateUtils.FORMAT_SHOW_YEAR\n+                | DateUtils.FORMAT_SHOW_WEEKDAY;\n+\n+        return DateUtils.formatDateTime(context, timeInMillis, flags);\n+    }\n+\n+    /**\n+     * Returns the number of days since the epoch (January 01, 1970, 12:00 Midnight UTC).\n+     *\n+     * @param date date in milliseconds.\n+     * @return the number of days in UTC time from the epoch.\n+     */\n+    public static long getDayNumber(long date) {\n+        TimeZone tz = TimeZone.getDefault();\n+        long gmtOffset = tz.getOffset(date);\n+        return (date + gmtOffset) / DAY_IN_MILLIS;\n+    }\n+\n+    /**\n+     * Given a datetime in milliseconds, returns just the name to use for that day.\n+     * For example: \"today\", \"yesterday\", \"Wednesday\".\n+     *\n+     * @param context      the context object.\n+     * @param dateInMillis the datetime in milliseconds.\n+     * @return the string day of the week.\n+     */\n+    private static String getDayName(Context context, long dateInMillis) {\n+\n+        long dayNumber = getDayNumber(dateInMillis);\n+        long currentDayNumber = getDayNumber(System.currentTimeMillis());\n+        if (dayNumber == currentDayNumber) {\n+            return context.getString(R.string.generic_today);\n+        } else if (dayNumber == currentDayNumber - 1) {\n+            return context.getString(R.string.generic_yesterday);\n+        } else {\n+            SimpleDateFormat dayFormat = new SimpleDateFormat(\"EEEE\");\n+            return dayFormat.format(dateInMillis);\n+        }\n+    }\n+\n+    /**\n+     * Converts the datetime into something to display to users.\n+     *\n+     * @param context      context object.\n+     * @param dateInMillis datetime in milliseconds.\n+     * @return a string with a friendly user datetime format.\n+     */\n+    public static String getFriendlyDateTimeString(Context context, long dateInMillis) {", "originalCommit": "1099edc19eb5d2b16212fa9d2b29b6da90a22928", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04a70d060a966b5e77aba073e4e3765f57c88882", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/util/StringUtils.java b/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\nindex 30c2d8655..8091a8c9c 100644\n--- a/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\n+++ b/src/main/java/de/dennisguse/opentracks/util/StringUtils.java\n\n@@ -96,77 +91,6 @@ public class StringUtils {\n         }\n     }\n \n-    /**\n-     * Returns a datetime string in a readable user format.\n-     *\n-     * @param context       the context object.\n-     * @param timeInMillis  datetime in milliseconds.\n-     * @return              The formatted datetime string.\n-     */\n-    private static String getReadableDateTimeString(Context context, long timeInMillis) {\n-        int flags = DateUtils.FORMAT_SHOW_DATE\n-                | DateUtils.FORMAT_SHOW_TIME\n-                | DateUtils.FORMAT_SHOW_YEAR\n-                | DateUtils.FORMAT_SHOW_WEEKDAY;\n-\n-        return DateUtils.formatDateTime(context, timeInMillis, flags);\n-    }\n-\n-    /**\n-     * Returns the number of days since the epoch (January 01, 1970, 12:00 Midnight UTC).\n-     *\n-     * @param date date in milliseconds.\n-     * @return the number of days in UTC time from the epoch.\n-     */\n-    public static long getDayNumber(long date) {\n-        TimeZone tz = TimeZone.getDefault();\n-        long gmtOffset = tz.getOffset(date);\n-        return (date + gmtOffset) / DAY_IN_MILLIS;\n-    }\n-\n-    /**\n-     * Given a datetime in milliseconds, returns just the name to use for that day.\n-     * For example: \"today\", \"yesterday\", \"Wednesday\".\n-     *\n-     * @param context      the context object.\n-     * @param dateInMillis the datetime in milliseconds.\n-     * @return the string day of the week.\n-     */\n-    private static String getDayName(Context context, long dateInMillis) {\n-\n-        long dayNumber = getDayNumber(dateInMillis);\n-        long currentDayNumber = getDayNumber(System.currentTimeMillis());\n-        if (dayNumber == currentDayNumber) {\n-            return context.getString(R.string.generic_today);\n-        } else if (dayNumber == currentDayNumber - 1) {\n-            return context.getString(R.string.generic_yesterday);\n-        } else {\n-            SimpleDateFormat dayFormat = new SimpleDateFormat(\"EEEE\");\n-            return dayFormat.format(dateInMillis);\n-        }\n-    }\n-\n-    /**\n-     * Converts the datetime into something to display to users.\n-     *\n-     * @param context      context object.\n-     * @param dateInMillis datetime in milliseconds.\n-     * @return a string with a friendly user datetime format.\n-     */\n-    public static String getFriendlyDateTimeString(Context context, long dateInMillis) {\n-        long dayNumber = getDayNumber(dateInMillis);\n-        long currentDayNumber = getDayNumber(System.currentTimeMillis());\n-        String dayName = getDayName(context, dateInMillis);\n-        String readableDate = getReadableDateTimeString(context, dateInMillis);\n-\n-        if (currentDayNumber - dayNumber < 2) {\n-            String localizedDayName = new SimpleDateFormat(\"EEEE\").format(dateInMillis);\n-            return readableDate.replace(localizedDayName, dayName);\n-        } else {\n-            return readableDate;\n-        }\n-    }\n-\n     /**\n      * Formats the elapsed timed in the form \"MM:SS\" or \"H:MM:SS\".\n      *\n"}}, {"oid": "04a70d060a966b5e77aba073e4e3765f57c88882", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/04a70d060a966b5e77aba073e4e3765f57c88882", "message": "Removed delete track option in recording activity.", "committedDate": "2020-05-15T06:40:39Z", "type": "forcePushed"}, {"oid": "5f425e1753286758317a1049d278d4eb951d6905", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/5f425e1753286758317a1049d278d4eb951d6905", "message": "Animation between recording and recorded activities.", "committedDate": "2020-05-15T21:13:20Z", "type": "forcePushed"}, {"oid": "360d59d3de98ded39bb09229a076df83801b81ee", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/360d59d3de98ded39bb09229a076df83801b81ee", "message": "Split detail and record to simplify the code. Fixes #171.", "committedDate": "2020-05-25T11:06:17Z", "type": "commit"}, {"oid": "d86f42e2e9fd8cff3b11b1a714c1f962cb2b24af", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/d86f42e2e9fd8cff3b11b1a714c1f962cb2b24af", "message": "Animation between recording and recorded activities. Update PlantUML with new changes.", "committedDate": "2020-05-25T11:06:17Z", "type": "commit"}, {"oid": "12e6f03098e07b55e53b3fdd8e881454ab0d97da", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/12e6f03098e07b55e53b3fdd8e881454ab0d97da", "message": "Recorded/Recording nested layouts converted to constraint layout. Fixes #15.", "committedDate": "2020-05-25T11:06:36Z", "type": "commit"}, {"oid": "12e6f03098e07b55e53b3fdd8e881454ab0d97da", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/12e6f03098e07b55e53b3fdd8e881454ab0d97da", "message": "Recorded/Recording nested layouts converted to constraint layout. Fixes #15.", "committedDate": "2020-05-25T11:06:36Z", "type": "forcePushed"}]}