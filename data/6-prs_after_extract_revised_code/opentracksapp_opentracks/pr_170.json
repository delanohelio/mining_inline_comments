{"pr_number": 170, "pr_title": "TrackDetailActivity starts an actual recording and a stopped recording can be resumed. Fixes #103 and #11", "pr_createdAt": "2020-03-27T10:37:44Z", "pr_url": "https://github.com/OpenTracksApp/OpenTracks/pull/170", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1Nzk5NQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399457995", "bodyText": ":)\ntrue &&", "author": "dennisguse", "createdAt": "2020-03-27T18:20:56Z", "path": "src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java", "diffHunk": "@@ -416,9 +453,12 @@ private void updateMenuItems(boolean isPaused) {\n         String title;\n         if (isRecording()) {\n             title = getString(isPaused ? R.string.generic_paused : R.string.generic_recording);\n+            resumeMenuItem.setVisible(false);\n         } else {\n             Track track = contentProviderUtils.getTrack(trackId);\n             title = track != null ? track.getName() : \"\";\n+            // Only visible if there aren't other tracks that is recording.\n+            resumeMenuItem.setVisible(true && recordingTrackId == -1L);", "originalCommit": "c400e8423f8a9596804ee356d5e7dca0d20cc8ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Njk4NA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399646984", "bodyText": "Jajajajajajajaja.\nI don't know what I was thinking about.\nPS/ That's a great anecdote. I'll remember ever :D", "author": "rgmf", "createdAt": "2020-03-28T10:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1Nzk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0f9b9ad225b5402a3c49377de9c1d00f59c43567", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\nindex e65651491..db5a7bdcf 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n\n@@ -458,7 +473,7 @@ public class TrackDetailActivity extends AbstractListActivity implements ChooseA\n             Track track = contentProviderUtils.getTrack(trackId);\n             title = track != null ? track.getName() : \"\";\n             // Only visible if there aren't other tracks that is recording.\n-            resumeMenuItem.setVisible(true && recordingTrackId == -1L);\n+            resumeMenuItem.setVisible(recordingTrackId == -1L);\n         }\n         setTitle(title);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1OTE1NQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399459155", "bodyText": "I am not sure the log message is correct; I guess it is more could not get service.", "author": "dennisguse", "createdAt": "2020-03-27T18:23:00Z", "path": "src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java", "diffHunk": "@@ -89,6 +92,27 @@ public void run() {\n                     trackController.update(isRecording(), recordingTrackPaused);\n                 }\n             });\n+\n+            if (recordingTrackId == -1L) {\n+                TrackRecordingServiceInterface service = trackRecordingServiceConnection.getServiceIfBound();\n+                if (service == null) {\n+                    Log.d(TAG, \"service not available to start gps or a new recording\");", "originalCommit": "c400e8423f8a9596804ee356d5e7dca0d20cc8ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzg0NA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399647844", "bodyText": "Yes, I didn't understand this message. I get it from old TrackListActivity and I mantained it like was. I'm going to change it.\nPS/ I use the same structure: all in lowercase and without period in the end of the sentence.", "author": "rgmf", "createdAt": "2020-03-28T10:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1OTE1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0f9b9ad225b5402a3c49377de9c1d00f59c43567", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\nindex e65651491..db5a7bdcf 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n\n@@ -96,22 +96,36 @@ public class TrackDetailActivity extends AbstractListActivity implements ChooseA\n             if (recordingTrackId == -1L) {\n                 TrackRecordingServiceInterface service = trackRecordingServiceConnection.getServiceIfBound();\n                 if (service == null) {\n-                    Log.d(TAG, \"service not available to start gps or a new recording\");\n+                    Log.d(TAG, \"it could not get service\");\n                     return;\n                 }\n \n+                // Starts or resumes a track.\n                 int msg;\n                 if (trackId == -1L) {\n-                    trackId = recordingTrackId = service.startNewTrack();\n+                    // trackId isn't initialized -> leads a new recording.\n+                    trackId = service.startNewTrack();\n+                    recordingTrackId = trackId;\n                     msg = R.string.track_detail_record_success;\n                 } else {\n+                    // trackId is initialized -> resumes the track.\n                     recordingTrackId = trackId;\n                     service.resumeTrack(trackId);\n+\n+                    // Informs to the fragments that implements {@link OnResumingTrackInterface} that a track is resumed.\n+                    for (Fragment f : getSupportFragmentManager().getFragments()) {\n+                        if (f instanceof OnResumingTrackInterface) {\n+                            ((OnResumingTrackInterface) f).onResumingTrack(trackId);\n+                        }\n+                    }\n                     msg = R.string.track_detail_resume_success;\n                 }\n+\n+                // A recording track is on.\n                 Toast.makeText(TrackDetailActivity.this, msg, Toast.LENGTH_SHORT).show();\n                 trackDataHub.loadTrack(trackId);\n-                trackController.onResume(isRecording(), recordingTrackPaused);\n+                trackController.update(true, false);\n+                trackController.onResume(true, recordingTrackPaused);\n             }\n         }\n     };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MTk1MA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399461950", "bodyText": "I am not a fan of these assignments.\nThey tend to look like boolean comparisions.\nWould you use separate assignments?", "author": "dennisguse", "createdAt": "2020-03-27T18:28:06Z", "path": "src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java", "diffHunk": "@@ -89,6 +92,27 @@ public void run() {\n                     trackController.update(isRecording(), recordingTrackPaused);\n                 }\n             });\n+\n+            if (recordingTrackId == -1L) {\n+                TrackRecordingServiceInterface service = trackRecordingServiceConnection.getServiceIfBound();\n+                if (service == null) {\n+                    Log.d(TAG, \"service not available to start gps or a new recording\");\n+                    return;\n+                }\n+\n+                int msg;\n+                if (trackId == -1L) {\n+                    trackId = recordingTrackId = service.startNewTrack();", "originalCommit": "c400e8423f8a9596804ee356d5e7dca0d20cc8ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0OTAxOQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399649019", "bodyText": "Of course, also I get recordingTrackId = trackId out from if-else.", "author": "rgmf", "createdAt": "2020-03-28T10:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MTk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "0f9b9ad225b5402a3c49377de9c1d00f59c43567", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\nindex e65651491..db5a7bdcf 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n\n@@ -96,22 +96,36 @@ public class TrackDetailActivity extends AbstractListActivity implements ChooseA\n             if (recordingTrackId == -1L) {\n                 TrackRecordingServiceInterface service = trackRecordingServiceConnection.getServiceIfBound();\n                 if (service == null) {\n-                    Log.d(TAG, \"service not available to start gps or a new recording\");\n+                    Log.d(TAG, \"it could not get service\");\n                     return;\n                 }\n \n+                // Starts or resumes a track.\n                 int msg;\n                 if (trackId == -1L) {\n-                    trackId = recordingTrackId = service.startNewTrack();\n+                    // trackId isn't initialized -> leads a new recording.\n+                    trackId = service.startNewTrack();\n+                    recordingTrackId = trackId;\n                     msg = R.string.track_detail_record_success;\n                 } else {\n+                    // trackId is initialized -> resumes the track.\n                     recordingTrackId = trackId;\n                     service.resumeTrack(trackId);\n+\n+                    // Informs to the fragments that implements {@link OnResumingTrackInterface} that a track is resumed.\n+                    for (Fragment f : getSupportFragmentManager().getFragments()) {\n+                        if (f instanceof OnResumingTrackInterface) {\n+                            ((OnResumingTrackInterface) f).onResumingTrack(trackId);\n+                        }\n+                    }\n                     msg = R.string.track_detail_resume_success;\n                 }\n+\n+                // A recording track is on.\n                 Toast.makeText(TrackDetailActivity.this, msg, Toast.LENGTH_SHORT).show();\n                 trackDataHub.loadTrack(trackId);\n-                trackController.onResume(isRecording(), recordingTrackPaused);\n+                trackController.update(true, false);\n+                trackController.onResume(true, recordingTrackPaused);\n             }\n         }\n     };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2Mjc1NQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399462755", "bodyText": "Please document that trackId == -1 leads to a new track.\nThere should be at least a comment on top of the class.", "author": "dennisguse", "createdAt": "2020-03-27T18:29:30Z", "path": "src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java", "diffHunk": "@@ -89,6 +92,27 @@ public void run() {\n                     trackController.update(isRecording(), recordingTrackPaused);\n                 }\n             });\n+\n+            if (recordingTrackId == -1L) {\n+                TrackRecordingServiceInterface service = trackRecordingServiceConnection.getServiceIfBound();\n+                if (service == null) {\n+                    Log.d(TAG, \"service not available to start gps or a new recording\");\n+                    return;\n+                }\n+\n+                int msg;\n+                if (trackId == -1L) {", "originalCommit": "c400e8423f8a9596804ee356d5e7dca0d20cc8ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0OTUyNg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399649526", "bodyText": "Ok. What do you think these comments?\n// Starts or resumes a track.\nint msg;\nif (trackId == -1L) {\n    // trackId isn't initialized -> leads a new recording.\n    trackId = service.startNewTrack();\n    msg = R.string.track_detail_record_success;\n} else {\n    // trackId is initialized -> resumes the track.\n    service.resumeTrack(trackId);\n    msg = R.string.track_detail_resume_success;\n}\n\n// A recording track is on.\nrecordingTrackId = trackId;\nToast.makeText(TrackDetailActivity.this, msg, Toast.LENGTH_SHORT).show();\ntrackDataHub.loadTrack(trackId);\ntrackController.onResume(isRecording(), recordingTrackPaused);\n\n\nThere should be at least a comment on top of the class.\n\nNow the class comment says \"An activity to show the track detail.\"\nBut this class do more things: show track detail and show and handle recording/resumes/stop track. So, what would you comment this class?", "author": "rgmf", "createdAt": "2020-03-28T11:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2Mjc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0f9b9ad225b5402a3c49377de9c1d00f59c43567", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\nindex e65651491..db5a7bdcf 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n\n@@ -96,22 +96,36 @@ public class TrackDetailActivity extends AbstractListActivity implements ChooseA\n             if (recordingTrackId == -1L) {\n                 TrackRecordingServiceInterface service = trackRecordingServiceConnection.getServiceIfBound();\n                 if (service == null) {\n-                    Log.d(TAG, \"service not available to start gps or a new recording\");\n+                    Log.d(TAG, \"it could not get service\");\n                     return;\n                 }\n \n+                // Starts or resumes a track.\n                 int msg;\n                 if (trackId == -1L) {\n-                    trackId = recordingTrackId = service.startNewTrack();\n+                    // trackId isn't initialized -> leads a new recording.\n+                    trackId = service.startNewTrack();\n+                    recordingTrackId = trackId;\n                     msg = R.string.track_detail_record_success;\n                 } else {\n+                    // trackId is initialized -> resumes the track.\n                     recordingTrackId = trackId;\n                     service.resumeTrack(trackId);\n+\n+                    // Informs to the fragments that implements {@link OnResumingTrackInterface} that a track is resumed.\n+                    for (Fragment f : getSupportFragmentManager().getFragments()) {\n+                        if (f instanceof OnResumingTrackInterface) {\n+                            ((OnResumingTrackInterface) f).onResumingTrack(trackId);\n+                        }\n+                    }\n                     msg = R.string.track_detail_resume_success;\n                 }\n+\n+                // A recording track is on.\n                 Toast.makeText(TrackDetailActivity.this, msg, Toast.LENGTH_SHORT).show();\n                 trackDataHub.loadTrack(trackId);\n-                trackController.onResume(isRecording(), recordingTrackPaused);\n+                trackController.update(true, false);\n+                trackController.onResume(true, recordingTrackPaused);\n             }\n         }\n     };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MzQ3MA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399463470", "bodyText": "Could you add a new line before?\nIt looks like the stuff before handles waypoints.", "author": "dennisguse", "createdAt": "2020-03-27T18:30:59Z", "path": "src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java", "diffHunk": "@@ -387,9 +421,12 @@ private void handleIntent(Intent intent) {\n                 return;\n             }\n             trackId = waypoint.getTrackId();\n+            if (trackId == -1L) {\n+                finish();\n+                return;\n+            }\n         }\n         if (trackId == -1L) {", "originalCommit": "c400e8423f8a9596804ee356d5e7dca0d20cc8ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0OTAwNA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399649004", "bodyText": "Of course. It's clearer now.", "author": "rgmf", "createdAt": "2020-03-28T10:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MzQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "0f9b9ad225b5402a3c49377de9c1d00f59c43567", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\nindex e65651491..db5a7bdcf 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n\n@@ -426,6 +440,7 @@ public class TrackDetailActivity extends AbstractListActivity implements ChooseA\n                 return;\n             }\n         }\n+\n         if (trackId == -1L) {\n             return;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2NDg1NA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399464854", "bodyText": "I would go for an Log.e()", "author": "dennisguse", "createdAt": "2020-03-27T18:33:32Z", "path": "src/main/java/de/dennisguse/opentracks/services/TrackRecordingService.java", "diffHunk": "@@ -352,6 +352,26 @@ long startNewTrack() {\n         return trackId;\n     }\n \n+    /**\n+     * Resumes the track identified by trackId.\n+     *\n+     * @param trackId\n+     */\n+    void resumeTrack(long trackId) {\n+        Track track = contentProviderUtils.getTrack(trackId);\n+        if (track == null) {\n+            Log.d(TAG, \"Ignore resumeTrack. Track \" + trackId + \" does not exists.\");", "originalCommit": "c400e8423f8a9596804ee356d5e7dca0d20cc8ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0ODk5OQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399648999", "bodyText": "Yes, it makes more sense.", "author": "rgmf", "createdAt": "2020-03-28T10:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2NDg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "0f9b9ad225b5402a3c49377de9c1d00f59c43567", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/services/TrackRecordingService.java b/src/main/java/de/dennisguse/opentracks/services/TrackRecordingService.java\nindex 12ded1039..f77670f29 100644\n--- a/src/main/java/de/dennisguse/opentracks/services/TrackRecordingService.java\n+++ b/src/main/java/de/dennisguse/opentracks/services/TrackRecordingService.java\n\n@@ -360,10 +360,11 @@ public class TrackRecordingService extends Service {\n     void resumeTrack(long trackId) {\n         Track track = contentProviderUtils.getTrack(trackId);\n         if (track == null) {\n-            Log.d(TAG, \"Ignore resumeTrack. Track \" + trackId + \" does not exists.\");\n+            Log.e(TAG, \"Ignore resumeTrack. Track \" + trackId + \" does not exists.\");\n             return;\n         }\n \n+        track.getTripStatistics().setStopTime(System.currentTimeMillis());\n         trackTripStatisticsUpdater = new TripStatisticsUpdater(track.getTripStatistics());\n \n         // Update shared preferences\n"}}, {"oid": "0f9b9ad225b5402a3c49377de9c1d00f59c43567", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/0f9b9ad225b5402a3c49377de9c1d00f59c43567", "message": "TrackDetailActivity starts an actual recording and a stopped recording can be resumed. Fixes #103 and #11.", "committedDate": "2020-03-29T16:10:46Z", "type": "forcePushed"}, {"oid": "f1a5af9fbc22bdacefed467059f4425f41a246e5", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/f1a5af9fbc22bdacefed467059f4425f41a246e5", "message": "TrackDetailActivity starts an actual recording and a stopped recording can be resumed. Fixes #103 and #11.", "committedDate": "2020-03-29T16:25:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyNTk2MQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399825961", "bodyText": "\"an existing one\"", "author": "dennisguse", "createdAt": "2020-03-29T17:12:27Z", "path": "src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java", "diffHunk": "@@ -43,14 +45,15 @@\n import de.dennisguse.opentracks.fragments.ConfirmDeleteDialogFragment;\n import de.dennisguse.opentracks.fragments.StatsFragment;\n import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceInterface;\n import de.dennisguse.opentracks.settings.SettingsActivity;\n import de.dennisguse.opentracks.util.IntentUtils;\n import de.dennisguse.opentracks.util.PreferencesUtils;\n import de.dennisguse.opentracks.util.TrackIconUtils;\n import de.dennisguse.opentracks.util.TrackUtils;\n \n /**\n- * An activity to show the track detail.\n+ * An activity to show the track detail, record a new track or resumes an existed one.", "originalCommit": "f1a5af9fbc22bdacefed467059f4425f41a246e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b615385cd0905a88cd3cc61d9bcfaa312394a00", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\nindex ee498fd7c..50ffbc9fa 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java\n\n@@ -53,7 +53,7 @@ import de.dennisguse.opentracks.util.TrackIconUtils;\n import de.dennisguse.opentracks.util.TrackUtils;\n \n /**\n- * An activity to show the track detail, record a new track or resumes an existed one.\n+ * An activity to show the track detail, record a new track or resumes an existing one.\n  *\n  * @author Leif Hendrik Wilden\n  * @author Rodrigo Damazio\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyNjMwNA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r399826304", "bodyText": "Unused", "author": "dennisguse", "createdAt": "2020-03-29T17:15:27Z", "path": "src/main/java/de/dennisguse/opentracks/fragments/StatsFragment.java", "diffHunk": "@@ -112,6 +112,7 @@ public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,\n \n     private TextView totalTimeValueView;\n     private final Runnable updateUIeachSecond = new Runnable() {\n+        long i = 0;", "originalCommit": "f1a5af9fbc22bdacefed467059f4425f41a246e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b615385cd0905a88cd3cc61d9bcfaa312394a00", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatsFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatsFragment.java\nindex cb42a96a6..72881e476 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatsFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatsFragment.java\n\n@@ -112,7 +121,6 @@ public class StatsFragment extends Fragment implements TrackDataListener, TrackD\n \n     private TextView totalTimeValueView;\n     private final Runnable updateUIeachSecond = new Runnable() {\n-        long i = 0;\n         public void run() {\n             if (isResumed() && isSelectedTrackRecording()) {\n                 if (!isSelectedTrackPaused() && lastTripStatistics != null) {\n"}}, {"oid": "3b615385cd0905a88cd3cc61d9bcfaa312394a00", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/3b615385cd0905a88cd3cc61d9bcfaa312394a00", "message": "TrackDetailActivity starts an actual recording and a stopped recording can be resumed. Fixes #103 and #11.", "committedDate": "2020-03-29T17:36:45Z", "type": "forcePushed"}, {"oid": "dc7c94f24bfba86eb3f37020f77102704d873f67", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/dc7c94f24bfba86eb3f37020f77102704d873f67", "message": "TrackDetailActivity starts an actual recording and a stopped recording can be resumed. Fixes #103 and #11.", "committedDate": "2020-03-29T17:54:24Z", "type": "forcePushed"}, {"oid": "dc7c94f24bfba86eb3f37020f77102704d873f67", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/dc7c94f24bfba86eb3f37020f77102704d873f67", "message": "TrackDetailActivity starts an actual recording and a stopped recording can be resumed. Fixes #103 and #11.", "committedDate": "2020-03-29T17:54:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzQxNQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r400323415", "bodyText": "Why was finish() removed?\nThe activity should not start if it got an invalid parameter, right?", "author": "dennisguse", "createdAt": "2020-03-30T16:22:22Z", "path": "src/main/java/de/dennisguse/opentracks/TrackDetailActivity.java", "diffHunk": "@@ -387,9 +428,13 @@ private void handleIntent(Intent intent) {\n                 return;\n             }\n             trackId = waypoint.getTrackId();\n+            if (trackId == -1L) {\n+                finish();\n+                return;\n+            }\n         }\n+\n         if (trackId == -1L) {\n-            finish();", "originalCommit": "dc7c94f24bfba86eb3f37020f77102704d873f67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MjIwNg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r400362206", "bodyText": "That finish() was there because TrackDetailActivity needed it to show or to record a Track. Then TrackDetailActivity always needed the trackId.\nNow, if TrackDetailActivity is started without trackId is because is started to record a new Track, so in handleIntent it doesn't finish, because TrackDetailActivity will start the service and will got trackId by its own.\nLook at this (in onResume())\nif (trackId != -1L) {\n    trackDataHub.loadTrack(trackId);\n    trackController.onResume(isRecording(), recordingTrackPaused);\n} else {\n    startRecording();\n}\n\nIf there isn't trackId in EXTRA_TRACK_ID then it calls to startRecording. Otherwise it shows the track.\nSo, we could say that TrackDetailActivity handle three \"modes\":\n\nWith trackId it enters in mode show.\nWithout trackId (trackId == -1) it enters in mode recording.\nWith trackId if user click on record button it enters in mode resuming.", "author": "rgmf", "createdAt": "2020-03-30T17:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NDIxMQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/170#discussion_r400364211", "bodyText": "Thanks for the clarification!\nThen let's merge it ;)", "author": "dennisguse", "createdAt": "2020-03-30T17:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzQxNQ=="}], "type": "inlineReview", "revised_code": null}]}