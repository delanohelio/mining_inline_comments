{"pr_number": 431, "pr_title": "Interval list refactoring", "pr_createdAt": "2020-09-13T17:00:05Z", "pr_url": "https://github.com/OpenTracksApp/OpenTracks/pull/431", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxMzE2Mw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/431#discussion_r487813163", "bodyText": "Split over multiple statements.", "author": "dennisguse", "createdAt": "2020-09-14T10:34:15Z", "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -48,7 +51,7 @@ public View getView(int position, @Nullable View intervalView, @NonNull ViewGrou\n             viewHolder = (ViewHolder) intervalView.getTag();\n         }\n \n-        sumDistance_m += interval.getDistance_m();\n+        sumDistance_m = actualPosition + 1 == getCount() && actualPosition > 0 ? (actualPosition * getItem(actualPosition - 1).getDistance_m()) + interval.getDistance_m() : (actualPosition + 1) * interval.getDistance_m();", "originalCommit": "bb4caff059874ca5e5cc9752f7f1e8c254b8eb54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ab34d8af62b08a8f5e6b7163b6c8b3631bdcd0b", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\nindex 09725e80e..596dbe959 100644\n--- a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n+++ b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n\n@@ -51,7 +49,7 @@ public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.I\n             viewHolder = (ViewHolder) intervalView.getTag();\n         }\n \n-        sumDistance_m = actualPosition + 1 == getCount() && actualPosition > 0 ? (actualPosition * getItem(actualPosition - 1).getDistance_m()) + interval.getDistance_m() : (actualPosition + 1) * interval.getDistance_m();\n+        sumDistance_m = position + 1 == getCount() ? interval.getDistance_m() : (position + 1) * interval.getDistance_m();\n         viewHolder.distance.setText(StringUtils.formatDistance(getContext(), sumDistance_m, metricUnits));\n \n         Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, true);\n"}}, {"oid": "1ab34d8af62b08a8f5e6b7163b6c8b3631bdcd0b", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/1ab34d8af62b08a8f5e6b7163b6c8b3631bdcd0b", "message": "Intervals refactoring: ListView instead of LinearLayout with a list of views.", "committedDate": "2020-09-14T16:14:59Z", "type": "commit"}, {"oid": "97ff76c26ddcf2170baad4f42005cda6941ac4e7", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/97ff76c26ddcf2170baad4f42005cda6941ac4e7", "message": "Intervals refactoring: avoid duplication code: IntervalsRecordingFragment is a version of IntervalsFragment.", "committedDate": "2020-09-14T16:14:59Z", "type": "commit"}, {"oid": "c5eb1d3e3d207a9d6b2b67fde839fde3292d7556", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/c5eb1d3e3d207a9d6b2b67fde839fde3292d7556", "message": "Intervals refactoring: added stack mode to the intervals adapter with two possibilities: stack from top and stack from bottom.\nStack from top for recorded intervals (the first lap in the top).\nStack from bottom for recording intervals (the last lap in the top).", "committedDate": "2020-09-14T16:23:08Z", "type": "forcePushed"}, {"oid": "c5eb1d3e3d207a9d6b2b67fde839fde3292d7556", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/c5eb1d3e3d207a9d6b2b67fde839fde3292d7556", "message": "Intervals refactoring: added stack mode to the intervals adapter with two possibilities: stack from top and stack from bottom.\nStack from top for recorded intervals (the first lap in the top).\nStack from bottom for recording intervals (the last lap in the top).", "committedDate": "2020-09-14T16:23:08Z", "type": "commit"}]}