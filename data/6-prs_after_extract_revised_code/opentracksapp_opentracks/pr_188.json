{"pr_number": 188, "pr_title": "Improve import/export", "pr_createdAt": "2020-04-16T17:20:01Z", "pr_url": "https://github.com/OpenTracksApp/OpenTracks/pull/188", "timeline": [{"oid": "0f1d8500d1feebde73d043d1ceb291afe180fb88", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/0f1d8500d1feebde73d043d1ceb291afe180fb88", "message": "KMZ importing: firstly copies images then parses kml (checks kml's href link to image is correct).", "committedDate": "2020-04-21T17:00:03Z", "type": "commit"}, {"oid": "fa9cb3903c7b04279b3e37354668b2ff7e437e8a", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/fa9cb3903c7b04279b3e37354668b2ff7e437e8a", "message": "KMZ exporting: checks waypoints images exists before parse kml.", "committedDate": "2020-04-21T17:01:30Z", "type": "commit"}, {"oid": "54b9c4370b094b462b746167a466f26c6b2ec147", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/54b9c4370b094b462b746167a466f26c6b2ec147", "message": "KML description: max/min elevation will not show if have invalid values (unknow).", "committedDate": "2020-04-21T17:01:35Z", "type": "commit"}, {"oid": "653eb8320a1c34d7cde897286f2825120ff71dee", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/653eb8320a1c34d7cde897286f2825120ff71dee", "message": "KMZ importing: look for images anywhere in KMZ file and only images referenced remain in external storage.", "committedDate": "2020-04-21T17:01:35Z", "type": "commit"}, {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/ed0dc053663be3e54cfb577ba473c2b58f18168c", "message": "KMZ exporting: marker images use waypoint id as a name.", "committedDate": "2020-04-21T17:01:35Z", "type": "commit"}, {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/ed0dc053663be3e54cfb577ba473c2b58f18168c", "message": "KMZ exporting: marker images use waypoint id as a name.", "committedDate": "2020-04-21T17:01:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3Njk0Nw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412676947", "bodyText": "Waypoint.getLocation() cannot be null as it is required during creation.\nWhy should it here be different?", "author": "dennisguse", "createdAt": "2020-04-22T05:18:55Z", "path": "src/main/java/de/dennisguse/opentracks/io/file/exporter/KmlTrackWriter.java", "diffHunk": "@@ -322,32 +324,29 @@ private void writePlacemark(String name, String category, String description, St\n     }\n \n     /**\n-     * Writes a photo overlay.\n-     *  @param name        the name\n-     * @param category    the category\n-     * @param description the description\n-     * @param location    the location\n-     * @param photoUrl    the photo url\n-     * @param heading     the heading\n+     * Writes a photo overlay from waypoint.\n+     *\n+     * @param waypoint Waypoint object.\n+     * @param heading  the heading.\n      */\n-    private void writePhotoOverlay(String name, String category, String description, Location location, String photoUrl, float heading) {\n-        if (location != null && exportTrackDetail) {\n+    private void writePhotoOverlay(Waypoint waypoint, float heading) {\n+        if (waypoint.getLocation() != null && exportTrackDetail) {", "originalCommit": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74835dcef596f3986816d03056e00a58efcee2c7", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/io/file/exporter/KmlTrackWriter.java b/src/main/java/de/dennisguse/opentracks/io/file/exporter/KmlTrackWriter.java\nindex d3656c1ff..4ed5314f7 100644\n--- a/src/main/java/de/dennisguse/opentracks/io/file/exporter/KmlTrackWriter.java\n+++ b/src/main/java/de/dennisguse/opentracks/io/file/exporter/KmlTrackWriter.java\n\n@@ -330,7 +330,7 @@ public class KmlTrackWriter implements TrackWriter {\n      * @param heading  the heading.\n      */\n     private void writePhotoOverlay(Waypoint waypoint, float heading) {\n-        if (waypoint.getLocation() != null && exportTrackDetail) {\n+        if (exportTrackDetail) {\n             printWriter.println(\"<PhotoOverlay>\");\n             printWriter.println(\"<name>\" + StringUtils.formatCData(waypoint.getName()) + \"</name>\");\n             printWriter.println(\"<description>\" + StringUtils.formatCData(waypoint.getDescription()) + \"</description>\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3ODgzMQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412678831", "bodyText": "Arrays.asList()?", "author": "dennisguse", "createdAt": "2020-04-22T05:24:10Z", "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();", "originalCommit": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74835dcef596f3986816d03056e00a58efcee2c7", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java b/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\nindex 0763446af..beda05523 100644\n--- a/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\n+++ b/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\n\n@@ -46,12 +47,7 @@ public class KmzTrackImporter implements TrackImporter {\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n-    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n-    static {\n-        KMZ_IMAGES_EXT.add(\"jpeg\");\n-        KMZ_IMAGES_EXT.add(\"jpg\");\n-        KMZ_IMAGES_EXT.add(\"png\");\n-    }\n+    public static final List<String> KMZ_IMAGES_EXT = Arrays.asList(\"jpeg\", \"jpg\", \"png\");\n \n     private static final int BUFFER_SIZE = 4096;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3OTIxNg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412679216", "bodyText": "Move into while?", "author": "dennisguse", "createdAt": "2020-04-22T05:25:21Z", "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n+    static {\n+        KMZ_IMAGES_EXT.add(\"jpeg\");\n+        KMZ_IMAGES_EXT.add(\"jpg\");\n+        KMZ_IMAGES_EXT.add(\"png\");\n+    }\n+\n     private static final int BUFFER_SIZE = 4096;\n \n     private final Context context;\n     private final long importTrackId;\n+    private Uri uriKmzFile;\n \n     /**\n      * Constructor.\n      *\n      * @param context       the context\n      * @param importTrackId track id to import to. This should not be -1L so that images in the kmz file can be imported.\n+     * @param uriFile       URI of the kmz file.\n      */\n-    KmzTrackImporter(Context context, long importTrackId) {\n+    KmzTrackImporter(Context context, long importTrackId, Uri uriFile) {\n         this.context = context;\n         this.importTrackId = importTrackId;\n+        this.uriKmzFile = uriFile;\n     }\n \n     @Override\n     public long importFile(InputStream inputStream) {\n-        long trackId = importTrackId;\n+        long trackId;\n+\n+        if (!copyKmzImages()) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        trackId = findAndParseKmlFile(inputStream);\n+        if (trackId == -1L) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        deleteOrphanImages(context, trackId);\n+\n+        return trackId;\n+    }\n+\n+    /**\n+     * Copies all images that are inside KMZ to OpenTracks external storage.\n+     *\n+     * @return false if there are errors or true otherwise.\n+     */\n+    private boolean copyKmzImages() {\n+        try (InputStream inputStream = context.getContentResolver().openInputStream(uriKmzFile);\n+            ZipInputStream zipInputStream = new ZipInputStream(inputStream)) {\n+            ZipEntry zipEntry;", "originalCommit": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwNjQyMQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412706421", "bodyText": "What do you mean to move into?  ZipEntry declaration?", "author": "rgmf", "createdAt": "2020-04-22T06:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3OTIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "74835dcef596f3986816d03056e00a58efcee2c7", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java b/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\nindex 0763446af..beda05523 100644\n--- a/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\n+++ b/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\n\n@@ -46,12 +47,7 @@ public class KmzTrackImporter implements TrackImporter {\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n-    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n-    static {\n-        KMZ_IMAGES_EXT.add(\"jpeg\");\n-        KMZ_IMAGES_EXT.add(\"jpg\");\n-        KMZ_IMAGES_EXT.add(\"png\");\n-    }\n+    public static final List<String> KMZ_IMAGES_EXT = Arrays.asList(\"jpeg\", \"jpg\", \"png\");\n \n     private static final int BUFFER_SIZE = 4096;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3OTc5NQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412679795", "bodyText": "KMZ_IMAGES_EXT.contains(fileExt)", "author": "dennisguse", "createdAt": "2020-04-22T05:26:48Z", "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n+    static {\n+        KMZ_IMAGES_EXT.add(\"jpeg\");\n+        KMZ_IMAGES_EXT.add(\"jpg\");\n+        KMZ_IMAGES_EXT.add(\"png\");\n+    }\n+\n     private static final int BUFFER_SIZE = 4096;\n \n     private final Context context;\n     private final long importTrackId;\n+    private Uri uriKmzFile;\n \n     /**\n      * Constructor.\n      *\n      * @param context       the context\n      * @param importTrackId track id to import to. This should not be -1L so that images in the kmz file can be imported.\n+     * @param uriFile       URI of the kmz file.\n      */\n-    KmzTrackImporter(Context context, long importTrackId) {\n+    KmzTrackImporter(Context context, long importTrackId, Uri uriFile) {\n         this.context = context;\n         this.importTrackId = importTrackId;\n+        this.uriKmzFile = uriFile;\n     }\n \n     @Override\n     public long importFile(InputStream inputStream) {\n-        long trackId = importTrackId;\n+        long trackId;\n+\n+        if (!copyKmzImages()) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        trackId = findAndParseKmlFile(inputStream);\n+        if (trackId == -1L) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        deleteOrphanImages(context, trackId);\n+\n+        return trackId;\n+    }\n+\n+    /**\n+     * Copies all images that are inside KMZ to OpenTracks external storage.\n+     *\n+     * @return false if there are errors or true otherwise.\n+     */\n+    private boolean copyKmzImages() {\n+        try (InputStream inputStream = context.getContentResolver().openInputStream(uriKmzFile);\n+            ZipInputStream zipInputStream = new ZipInputStream(inputStream)) {\n+            ZipEntry zipEntry;\n+\n+            while ((zipEntry = zipInputStream.getNextEntry()) != null) {\n+                if (Thread.interrupted()) {\n+                    Log.d(TAG, \"Thread interrupted\");\n+                    return false;\n+                }\n+\n+                String fileName = zipEntry.getName();\n+                if (hasImageExtension(fileName)) {\n+                    readAndSaveImageFile(zipInputStream, importNameForFilename(fileName));\n+                }\n+\n+                zipInputStream.closeEntry();\n+            }\n+\n+            return true;\n+        } catch (IOException e) {\n+            Log.e(TAG, \"Unable to import file\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * From path fileName generates an import unique name and returns it.\n+     * The name generator is simple: change the path fileName with '-' instead of File.separatorChar.\n+     *\n+     * @param fileName the file name.\n+     */\n+    public static String importNameForFilename(String fileName) {\n+        // TODO this tricky code for maintain backward compatibility must be deleted some day.\n+        /*\n+         * In versions before v3.5.0 photo URL in KML files were wrong.\n+         * For compatibility reasons it checks if fileName begins with \"content://\" or \"file://\".\n+         * All fileName begins with \"content:/\" or \"file://\" are cooked.\n+         * We cannot guess what's the folder name where images are so we use \"images\" that was the folder name expected in versions before v3.5.0.\n+         */\n+        if (fileName.startsWith(\"content://\") || fileName.startsWith(\"file://\")) {\n+            fileName = \"images/\" + fileName.substring(fileName.lastIndexOf(File.separatorChar) + 1);\n+        }\n+\n+        return fileName.replace(File.separatorChar, '-');\n+    }\n+\n+    /**\n+     * Returns true if fileName ends with some of the KMZ_IMAGES_EXT suffixes.\n+     * Otherwise returns false.\n+     */\n+    private boolean hasImageExtension(String fileName)  {\n+        if (fileName == null) {\n+            return false;\n+        }\n+\n+        String fileExt = FileUtils.getExtension(fileName.toLowerCase());\n+        if (fileExt == null) {\n+            return false;\n+        }\n+\n+        for (String ext : KMZ_IMAGES_EXT) {", "originalCommit": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74835dcef596f3986816d03056e00a58efcee2c7", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java b/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\nindex 0763446af..beda05523 100644\n--- a/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\n+++ b/src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java\n\n@@ -46,12 +47,7 @@ public class KmzTrackImporter implements TrackImporter {\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n-    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n-    static {\n-        KMZ_IMAGES_EXT.add(\"jpeg\");\n-        KMZ_IMAGES_EXT.add(\"jpg\");\n-        KMZ_IMAGES_EXT.add(\"png\");\n-    }\n+    public static final List<String> KMZ_IMAGES_EXT = Arrays.asList(\"jpeg\", \"jpg\", \"png\");\n \n     private static final int BUFFER_SIZE = 4096;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MDIxMw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412680213", "bodyText": "@return", "author": "dennisguse", "createdAt": "2020-04-22T05:28:02Z", "path": "src/main/java/de/dennisguse/opentracks/util/FileUtils.java", "diffHunk": "@@ -95,11 +95,15 @@ public static synchronized String buildUniqueFileName(File directory, String fil\n \n     /**\n      * Gets the extension from a file name.\n-     * Returns null if there is no extension.\n+     * Returns null if there is no extension or fileName is null.", "originalCommit": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74835dcef596f3986816d03056e00a58efcee2c7", "chunk": "diff --git a/src/main/java/de/dennisguse/opentracks/util/FileUtils.java b/src/main/java/de/dennisguse/opentracks/util/FileUtils.java\nindex c480a8979..3a609b247 100644\n--- a/src/main/java/de/dennisguse/opentracks/util/FileUtils.java\n+++ b/src/main/java/de/dennisguse/opentracks/util/FileUtils.java\n\n@@ -95,9 +95,9 @@ public class FileUtils {\n \n     /**\n      * Gets the extension from a file name.\n-     * Returns null if there is no extension or fileName is null.\n      *\n      * @param fileName the file name\n+     * @return null if there is no extension or fileName is null.\n      */\n     public static String getExtension(String fileName) {\n         if (fileName == null) {\n"}}, {"oid": "74835dcef596f3986816d03056e00a58efcee2c7", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/74835dcef596f3986816d03056e00a58efcee2c7", "message": "KMZ import/export: code improved.", "committedDate": "2020-04-22T11:19:32Z", "type": "commit"}]}