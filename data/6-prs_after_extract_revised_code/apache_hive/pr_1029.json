{"pr_number": 1029, "pr_title": "HIVE-23526: Beeline may throw the misleading exception.", "pr_createdAt": "2020-05-21T13:48:36Z", "pr_url": "https://github.com/apache/hive/pull/1029", "timeline": [{"oid": "0ec6a1e7b922e496fc42688b7949e72df973fc2b", "url": "https://github.com/apache/hive/commit/0ec6a1e7b922e496fc42688b7949e72df973fc2b", "message": "set driver timeout to 0 to avoid socket read timeout", "committedDate": "2020-05-25T01:37:20Z", "type": "forcePushed"}, {"oid": "b9ddd5a296c9a3257627d90602e09b3231025ff2", "url": "https://github.com/apache/hive/commit/b9ddd5a296c9a3257627d90602e09b3231025ff2", "message": "HIVE-23526: Beeline may throw the misleading exception.", "committedDate": "2020-05-28T02:39:21Z", "type": "forcePushed"}, {"oid": "674abf18fa33d4ecd7659f06be467e377854c369", "url": "https://github.com/apache/hive/commit/674abf18fa33d4ecd7659f06be467e377854c369", "message": "HIVE-23256: Beeline may throw the misleading exception.", "committedDate": "2020-05-31T09:00:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ==", "url": "https://github.com/apache/hive/pull/1029#discussion_r433678995", "bodyText": "removing this line will mean that the resultset will be never closed - even when the issue doesn't happen...\nisn't there a way to fix this w/o removing this close call?", "author": "kgyrtkirk", "createdAt": "2020-06-02T07:38:20Z", "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "diffHunk": "@@ -974,86 +974,79 @@ private boolean executeInternal(String sql, boolean call) {\n \n     ClientHook hook = ClientCommandHookFactory.get().getHook(beeLine, sql);\n \n-    try {\n-      Statement stmnt = null;\n-      boolean hasResults;\n-      Thread logThread = null;\n+    Statement stmnt = null;\n+    boolean hasResults;\n+    Thread logThread = null;\n \n-      try {\n-        long start = System.currentTimeMillis();\n+    try {\n+      long start = System.currentTimeMillis();\n \n-        if (call) {\n-          stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n-          hasResults = ((CallableStatement) stmnt).execute();\n+      if (call) {\n+        stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n+        hasResults = ((CallableStatement) stmnt).execute();\n+      } else {\n+        stmnt = beeLine.createStatement();\n+        // In test mode we want the operation logs regardless of the settings\n+        if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n+          hasResults = stmnt.execute(sql);\n         } else {\n-          stmnt = beeLine.createStatement();\n-          // In test mode we want the operation logs regardless of the settings\n-          if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n-            hasResults = stmnt.execute(sql);\n-          } else {\n-            InPlaceUpdateStream.EventNotifier eventNotifier =\n-                new InPlaceUpdateStream.EventNotifier();\n-            logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n-            logThread.setDaemon(true);\n-            logThread.start();\n-            if (stmnt instanceof HiveStatement) {\n-              HiveStatement hiveStatement = (HiveStatement) stmnt;\n-              hiveStatement.setInPlaceUpdateStream(\n-                  new BeelineInPlaceUpdateStream(\n-                      beeLine.getErrorStream(),\n-                      eventNotifier\n-                  ));\n-            }\n-            hasResults = stmnt.execute(sql);\n-            logThread.interrupt();\n-            logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n+          InPlaceUpdateStream.EventNotifier eventNotifier =\n+              new InPlaceUpdateStream.EventNotifier();\n+          logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n+          logThread.setDaemon(true);\n+          logThread.start();\n+          if (stmnt instanceof HiveStatement) {\n+            HiveStatement hiveStatement = (HiveStatement) stmnt;\n+            hiveStatement.setInPlaceUpdateStream(\n+                new BeelineInPlaceUpdateStream(\n+                    beeLine.getErrorStream(),\n+                    eventNotifier\n+                ));\n           }\n+          hasResults = stmnt.execute(sql);\n+          logThread.interrupt();\n+          logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n         }\n+      }\n \n-        beeLine.showWarnings();\n-\n-        if (hasResults) {\n-          OutputFile outputFile = beeLine.getRecordOutputFile();\n-          if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n-            outputFile.fetchStarted();\n-            if (!sql.trim().toLowerCase().startsWith(\"explain\")) {\n-              outputFile.foundQuery(true);\n-            } else {\n-              outputFile.foundQuery(false);\n-            }\n-          }\n-          do {\n-            ResultSet rs = stmnt.getResultSet();\n-            try {\n-              int count = beeLine.print(rs);\n-              long end = System.currentTimeMillis();\n-\n-              if (showReport()) {\n-                beeLine.output(beeLine.loc(\"rows-selected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n-                    true, beeLine.getErrorStream());\n-              }\n-            } finally {\n-              if (logThread != null) {\n-                logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n-                showRemainingLogsIfAny(stmnt);\n-                logThread = null;\n-              }\n-              rs.close();", "originalCommit": "674abf18fa33d4ecd7659f06be467e377854c369", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwMjMyMg==", "url": "https://github.com/apache/hive/pull/1029#discussion_r433702322", "bodyText": "resultset::close() will close remote operation, this can be also achieved by stmnt::close() in finally block, wondering if this can be removed to make codes more elegant.", "author": "dengzhhu653", "createdAt": "2020-06-02T08:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNDA0MA==", "url": "https://github.com/apache/hive/pull/1029#discussion_r433704040", "bodyText": "in case it should be fixed in some other way ResultSet is AutoCloseable so it is expected to call close on it no matter what - I now think that this fix should either land in the jdbc driver - or should be fixed in thrift", "author": "kgyrtkirk", "createdAt": "2020-06-02T08:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNjgzOQ==", "url": "https://github.com/apache/hive/pull/1029#discussion_r433706839", "bodyText": "I've just looked around...it seems like a thrift upgrade(HIVE-21000) would need an accumulo upgrade(HIVE-22220) which would need a guava upgrade(HIVE-21569) ...", "author": "kgyrtkirk", "createdAt": "2020-06-02T08:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyNjE5NQ==", "url": "https://github.com/apache/hive/pull/1029#discussion_r433726195", "bodyText": "I wondering if this maybe is not a thrift problem, reading out of sequence is just a consequence of the upper request unpredictably interrupts while the connection is still being alive. Fix lands in the jdbc driver maybe is not a best approach,  as user who uses jdbc driver can handle the root cause at their logic as beeline does.", "author": "dengzhhu653", "createdAt": "2020-06-02T09:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3ODk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6", "chunk": "diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java\nindex ff9839b144..338b105a2d 100644\n--- a/beeline/src/java/org/apache/hive/beeline/Commands.java\n+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java\n\n@@ -974,79 +974,86 @@ private boolean executeInternal(String sql, boolean call) {\n \n     ClientHook hook = ClientCommandHookFactory.get().getHook(beeLine, sql);\n \n-    Statement stmnt = null;\n-    boolean hasResults;\n-    Thread logThread = null;\n-\n     try {\n-      long start = System.currentTimeMillis();\n+      Statement stmnt = null;\n+      boolean hasResults;\n+      Thread logThread = null;\n \n-      if (call) {\n-        stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n-        hasResults = ((CallableStatement) stmnt).execute();\n-      } else {\n-        stmnt = beeLine.createStatement();\n-        // In test mode we want the operation logs regardless of the settings\n-        if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n-          hasResults = stmnt.execute(sql);\n+      try {\n+        long start = System.currentTimeMillis();\n+\n+        if (call) {\n+          stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);\n+          hasResults = ((CallableStatement) stmnt).execute();\n         } else {\n-          InPlaceUpdateStream.EventNotifier eventNotifier =\n-              new InPlaceUpdateStream.EventNotifier();\n-          logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n-          logThread.setDaemon(true);\n-          logThread.start();\n-          if (stmnt instanceof HiveStatement) {\n-            HiveStatement hiveStatement = (HiveStatement) stmnt;\n-            hiveStatement.setInPlaceUpdateStream(\n-                new BeelineInPlaceUpdateStream(\n-                    beeLine.getErrorStream(),\n-                    eventNotifier\n-                ));\n+          stmnt = beeLine.createStatement();\n+          // In test mode we want the operation logs regardless of the settings\n+          if (!beeLine.isTestMode() && beeLine.getOpts().isSilent()) {\n+            hasResults = stmnt.execute(sql);\n+          } else {\n+            InPlaceUpdateStream.EventNotifier eventNotifier =\n+                new InPlaceUpdateStream.EventNotifier();\n+            logThread = new Thread(createLogRunnable(stmnt, eventNotifier));\n+            logThread.setDaemon(true);\n+            logThread.start();\n+            if (stmnt instanceof HiveStatement) {\n+              HiveStatement hiveStatement = (HiveStatement) stmnt;\n+              hiveStatement.setInPlaceUpdateStream(\n+                  new BeelineInPlaceUpdateStream(\n+                      beeLine.getErrorStream(),\n+                      eventNotifier\n+                  ));\n+            }\n+            hasResults = stmnt.execute(sql);\n+            logThread.interrupt();\n+            logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n           }\n-          hasResults = stmnt.execute(sql);\n-          logThread.interrupt();\n-          logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n         }\n-      }\n \n-      beeLine.showWarnings();\n-\n-      if (hasResults) {\n-        OutputFile outputFile = beeLine.getRecordOutputFile();\n-        if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n-          outputFile.fetchStarted();\n-          if (!sql.trim().toLowerCase().startsWith(\"explain\")) {\n-            outputFile.foundQuery(true);\n-          } else {\n-            outputFile.foundQuery(false);\n+        beeLine.showWarnings();\n+\n+        if (hasResults) {\n+          OutputFile outputFile = beeLine.getRecordOutputFile();\n+          if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n+            outputFile.fetchStarted();\n+            if (!sql.trim().toLowerCase().startsWith(\"explain\")) {\n+              outputFile.foundQuery(true);\n+            } else {\n+              outputFile.foundQuery(false);\n+            }\n           }\n-        }\n-        do {\n-          ResultSet rs = stmnt.getResultSet();\n-          int count = beeLine.print(rs);\n+          do {\n+            ResultSet rs = stmnt.getResultSet();\n+            try {\n+              int count = beeLine.print(rs);\n+              long end = System.currentTimeMillis();\n+\n+              if (showReport()) {\n+                beeLine.output(beeLine.loc(\"rows-selected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n+                    true, beeLine.getErrorStream());\n+              }\n+            } finally {\n+              if (logThread != null) {\n+                logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n+                showRemainingLogsIfAny(stmnt);\n+                logThread = null;\n+              }\n+              rs.close();\n+            }\n+          } while (BeeLine.getMoreResults(stmnt));\n+          if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n+            outputFile.fetchFinished();\n+          }\n+        } else {\n+          int count = stmnt.getUpdateCount();\n           long end = System.currentTimeMillis();\n \n           if (showReport()) {\n-            beeLine.output(beeLine.loc(\"rows-selected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n+            beeLine.output(beeLine.loc(\"rows-affected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n                 true, beeLine.getErrorStream());\n           }\n-        } while (BeeLine.getMoreResults(stmnt));\n-        if (beeLine.isTestMode() && outputFile != null && outputFile.isActiveConverter()) {\n-          outputFile.fetchFinished();\n-        }\n-      } else {\n-        int count = stmnt.getUpdateCount();\n-        long end = System.currentTimeMillis();\n-\n-        if (showReport()) {\n-          beeLine.output(beeLine.loc(\"rows-affected\", count) + \" \" + beeLine.locElapsedTime(end - start),\n-              true, beeLine.getErrorStream());\n         }\n-      }\n-    } catch (Throwable e) {\n-      return beeLine.error(e);\n-    } finally {\n-      try {\n+      } finally {\n         if (logThread != null) {\n           if (!logThread.isInterrupted()) {\n             logThread.interrupt();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1Mzk3NQ==", "url": "https://github.com/apache/hive/pull/1029#discussion_r434953975", "bodyText": "Closing the result set can throw a SQLException in which case it will skip over the Statement#close() method.", "author": "belugabehr", "createdAt": "2020-06-04T02:15:59Z", "path": "beeline/src/java/org/apache/hive/beeline/Commands.java", "diffHunk": "@@ -1063,13 +1057,17 @@ private boolean executeInternal(String sql, boolean call) {\n             showRemainingLogsIfAny(stmnt);\n           }\n         }\n+        if (rs != null) {\n+          rs.close();", "originalCommit": "22be75bb11ff744c4e6b4450c9c31f928846814a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6", "chunk": "diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java\nindex 23d2a54b99..338b105a2d 100644\n--- a/beeline/src/java/org/apache/hive/beeline/Commands.java\n+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java\n\n@@ -1057,17 +1063,13 @@ private boolean executeInternal(String sql, boolean call) {\n             showRemainingLogsIfAny(stmnt);\n           }\n         }\n-        if (rs != null) {\n-          rs.close();\n-        }\n         if (stmnt != null) {\n           stmnt.close();\n         }\n-      } catch (Exception e) {\n-        return beeLine.error(e);\n       }\n+    } catch (Exception e) {\n+      return beeLine.error(e);\n     }\n-\n     beeLine.showWarnings();\n     if (hook != null) {\n       hook.postHook(beeLine);\n"}}, {"oid": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6", "url": "https://github.com/apache/hive/commit/6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6", "message": "HIVE-23526: Beeline may throw the misleading exception.", "committedDate": "2020-06-04T08:58:42Z", "type": "commit"}, {"oid": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6", "url": "https://github.com/apache/hive/commit/6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6", "message": "HIVE-23526: Beeline may throw the misleading exception.", "committedDate": "2020-06-04T08:58:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0Mzc0NQ==", "url": "https://github.com/apache/hive/pull/1029#discussion_r435243745", "bodyText": "Please do not use instanceof here, just create a new catch block for TApplicationException types.", "author": "belugabehr", "createdAt": "2020-06-04T13:15:50Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -197,6 +198,12 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (Exception e) {\n+      if (e instanceof TApplicationException && ((TApplicationException)e)", "originalCommit": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80bd8af70d3a697d1b80d37f87040962169f895a", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\nindex b3e2b92e4f..ae60c3242c 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\n\n@@ -197,13 +197,15 @@ private void closeStatementIfNeeded() throws SQLException {\n       }\n     } catch (SQLException e) {\n       throw e;\n-    } catch (Exception e) {\n-      if (e instanceof TApplicationException && ((TApplicationException)e)\n-          .getType() == TApplicationException.BAD_SEQUENCE_ID) {\n-        String errorMsg = \"Mismatch thrift sequence id, which usually is caused by an OutOfMemoryError \" +\n-            \"or a SocketTimeoutException, please check the memory status and previous calls.\";\n-        throw new SQLException(errorMsg, \"08S01\", e);\n+    } catch (TApplicationException tae) {\n+      String errorMsg = \"Failed to close statement\";\n+      if (tae.getType() == TApplicationException.BAD_SEQUENCE_ID) {\n+        errorMsg = \"Failed to close statement. Mismatch thrift sequence id. A previous call to the Thrift library\"\n+            + \" failed and now position within the input stream is lost. Please enable verbose error logging and\"\n+            + \" check the status of previous calls.\";\n       }\n+      throw new SQLException(errorMsg, \"08S01\", tae);\n+    } catch (Exception e) {\n       throw new SQLException(\"Failed to close statement\", \"08S01\", e);\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NTQ4NQ==", "url": "https://github.com/apache/hive/pull/1029#discussion_r435245485", "bodyText": "Please do not say 'is usually caused by'.  We do not yet know what \"usual\" is.\nTry something like:\nMismatch thrift sequence id.  A previous call to the Thrift library failed and now position within the input stream is lost.  Please enable verbose error logging and check the status of previous calls.", "author": "belugabehr", "createdAt": "2020-06-04T13:18:17Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -197,6 +198,12 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (Exception e) {\n+      if (e instanceof TApplicationException && ((TApplicationException)e)\n+          .getType() == TApplicationException.BAD_SEQUENCE_ID) {\n+        String errorMsg = \"Mismatch thrift sequence id, which usually is caused by an OutOfMemoryError \" +\n+            \"or a SocketTimeoutException, please check the memory status and previous calls.\";\n+        throw new SQLException(errorMsg, \"08S01\", e);", "originalCommit": "6479d9d13d9a83bb76a8916cc1c4a1beacf4e5d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2ODIyMA==", "url": "https://github.com/apache/hive/pull/1029#discussion_r435268220", "bodyText": "Thanks @belugabehr, updated the error messages.", "author": "dengzhhu653", "createdAt": "2020-06-04T13:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NTQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "80bd8af70d3a697d1b80d37f87040962169f895a", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\nindex b3e2b92e4f..ae60c3242c 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\n\n@@ -197,13 +197,15 @@ private void closeStatementIfNeeded() throws SQLException {\n       }\n     } catch (SQLException e) {\n       throw e;\n-    } catch (Exception e) {\n-      if (e instanceof TApplicationException && ((TApplicationException)e)\n-          .getType() == TApplicationException.BAD_SEQUENCE_ID) {\n-        String errorMsg = \"Mismatch thrift sequence id, which usually is caused by an OutOfMemoryError \" +\n-            \"or a SocketTimeoutException, please check the memory status and previous calls.\";\n-        throw new SQLException(errorMsg, \"08S01\", e);\n+    } catch (TApplicationException tae) {\n+      String errorMsg = \"Failed to close statement\";\n+      if (tae.getType() == TApplicationException.BAD_SEQUENCE_ID) {\n+        errorMsg = \"Failed to close statement. Mismatch thrift sequence id. A previous call to the Thrift library\"\n+            + \" failed and now position within the input stream is lost. Please enable verbose error logging and\"\n+            + \" check the status of previous calls.\";\n       }\n+      throw new SQLException(errorMsg, \"08S01\", tae);\n+    } catch (Exception e) {\n       throw new SQLException(\"Failed to close statement\", \"08S01\", e);\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NzQ4Mw==", "url": "https://github.com/apache/hive/pull/1029#discussion_r435277483", "bodyText": "The default message should still be Failed to close statement.  The message of the TApplicationException will be preserved because the entire Exception is passed into the SQLException.\nWith that said, you can you please append that to the BAD_SEQUENCE_ID error as well?\n\nFailed to close statement.  Mismatch thrift sequence id. A previous ...", "author": "belugabehr", "createdAt": "2020-06-04T13:56:18Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -196,6 +197,14 @@ private void closeStatementIfNeeded() throws SQLException {\n       }\n     } catch (SQLException e) {\n       throw e;\n+    } catch (TApplicationException tae) {\n+      String errorMsg = tae.getMessage();", "originalCommit": "c2f82cf0ef92a66f2128d81a02705660ee79466d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwMzEzMw==", "url": "https://github.com/apache/hive/pull/1029#discussion_r435303133", "bodyText": "Done", "author": "dengzhhu653", "createdAt": "2020-06-04T14:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NzQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "80bd8af70d3a697d1b80d37f87040962169f895a", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\nindex 27de9d4b3e..ae60c3242c 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\n\n@@ -198,11 +198,11 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (TApplicationException tae) {\n-      String errorMsg = tae.getMessage();\n+      String errorMsg = \"Failed to close statement\";\n       if (tae.getType() == TApplicationException.BAD_SEQUENCE_ID) {\n-        errorMsg = \"Mismatch thrift sequence id. A previous call to the Thrift library failed\"\n-            + \" and now position within the input stream is lost. Please enable verbose error\"\n-            + \" logging and check the status of previous calls.\";\n+        errorMsg = \"Failed to close statement. Mismatch thrift sequence id. A previous call to the Thrift library\"\n+            + \" failed and now position within the input stream is lost. Please enable verbose error logging and\"\n+            + \" check the status of previous calls.\";\n       }\n       throw new SQLException(errorMsg, \"08S01\", tae);\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNDExOA==", "url": "https://github.com/apache/hive/pull/1029#discussion_r435304118", "bodyText": "Lol.  I'm so sorry to do this to you, I've been in your seat quite a few times myself, but can you please do one more push?  Please do not do the string concatenation.  This could be ripe for errors if the code changes later.  Just use a single static string which includes the words \"Failed to close statement.\"", "author": "belugabehr", "createdAt": "2020-06-04T14:30:41Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java", "diffHunk": "@@ -198,9 +198,9 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (SQLException e) {\n       throw e;\n     } catch (TApplicationException tae) {\n-      String errorMsg = tae.getMessage();\n+      String errorMsg = \"Failed to close statement\";\n       if (tae.getType() == TApplicationException.BAD_SEQUENCE_ID) {\n-        errorMsg = \"Mismatch thrift sequence id. A previous call to the Thrift library failed\"\n+        errorMsg += \". Mismatch thrift sequence id. A previous call to the Thrift library failed\"", "originalCommit": "6e91c2494020c2e951dc4dc90b7b46ff7a4bb380", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNTIwNQ==", "url": "https://github.com/apache/hive/pull/1029#discussion_r435305205", "bodyText": "errorMsg = \"Failed to close statement. Mismatch thrift sequence id. A previous call to the Thrift library failed...\";", "author": "belugabehr", "createdAt": "2020-06-04T14:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNDExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyMTM0MA==", "url": "https://github.com/apache/hive/pull/1029#discussion_r435321340", "bodyText": "Done. Thank you @belugabehr", "author": "dengzhhu653", "createdAt": "2020-06-04T14:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNDExOA=="}], "type": "inlineReview", "revised_code": {"commit": "80bd8af70d3a697d1b80d37f87040962169f895a", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\nindex c50518b5f2..ae60c3242c 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java\n\n@@ -200,9 +200,9 @@ private void closeStatementIfNeeded() throws SQLException {\n     } catch (TApplicationException tae) {\n       String errorMsg = \"Failed to close statement\";\n       if (tae.getType() == TApplicationException.BAD_SEQUENCE_ID) {\n-        errorMsg += \". Mismatch thrift sequence id. A previous call to the Thrift library failed\"\n-            + \" and now position within the input stream is lost. Please enable verbose error\"\n-            + \" logging and check the status of previous calls.\";\n+        errorMsg = \"Failed to close statement. Mismatch thrift sequence id. A previous call to the Thrift library\"\n+            + \" failed and now position within the input stream is lost. Please enable verbose error logging and\"\n+            + \" check the status of previous calls.\";\n       }\n       throw new SQLException(errorMsg, \"08S01\", tae);\n     } catch (Exception e) {\n"}}, {"oid": "80bd8af70d3a697d1b80d37f87040962169f895a", "url": "https://github.com/apache/hive/commit/80bd8af70d3a697d1b80d37f87040962169f895a", "message": "trigger test", "committedDate": "2020-06-04T22:47:52Z", "type": "forcePushed"}, {"oid": "8da3aa1b41298da9ed38b188607cad58edbbd66f", "url": "https://github.com/apache/hive/commit/8da3aa1b41298da9ed38b188607cad58edbbd66f", "message": "trigger test", "committedDate": "2020-06-05T05:12:27Z", "type": "forcePushed"}, {"oid": "feee7e41ae2e1e7c9e446cd86704ab659dcfd66e", "url": "https://github.com/apache/hive/commit/feee7e41ae2e1e7c9e446cd86704ab659dcfd66e", "message": "fix error message", "committedDate": "2020-06-10T05:16:54Z", "type": "commit"}, {"oid": "feee7e41ae2e1e7c9e446cd86704ab659dcfd66e", "url": "https://github.com/apache/hive/commit/feee7e41ae2e1e7c9e446cd86704ab659dcfd66e", "message": "fix error message", "committedDate": "2020-06-10T05:16:54Z", "type": "forcePushed"}]}