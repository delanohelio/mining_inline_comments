{"pr_number": 1405, "pr_title": "HIVE-24041: Extend semijoin conversion rules", "pr_createdAt": "2020-08-15T03:41:58Z", "pr_url": "https://github.com/apache/hive/pull/1405", "timeline": [{"oid": "280b03ba1da1fd3592a759c307e2e08d99fe64d3", "url": "https://github.com/apache/hive/commit/280b03ba1da1fd3592a759c307e2e08d99fe64d3", "message": "HIVE-24041: Extend semijoin conversion rules", "committedDate": "2020-08-15T03:41:30Z", "type": "commit"}, {"oid": "e2192fb3bbd021c76cd07ea3b5f8fb240f969aa6", "url": "https://github.com/apache/hive/commit/e2192fb3bbd021c76cd07ea3b5f8fb240f969aa6", "message": "fix and q files update", "committedDate": "2020-08-15T04:40:41Z", "type": "commit"}, {"oid": "0ad7d74653a8f351c608567a18c33ff7c5707e6a", "url": "https://github.com/apache/hive/commit/0ad7d74653a8f351c608567a18c33ff7c5707e6a", "message": "update q files", "committedDate": "2020-08-24T19:39:02Z", "type": "commit"}, {"oid": "4abe7aae82b33d877cea7c04e1ea54534ac08844", "url": "https://github.com/apache/hive/commit/4abe7aae82b33d877cea7c04e1ea54534ac08844", "message": "disable SMB conversion for test: Tackled in another JIRA", "committedDate": "2020-08-24T20:18:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2OTIwMQ==", "url": "https://github.com/apache/hive/pull/1405#discussion_r476169201", "bodyText": "nit.: Is the parameter value always HiveRelFactories.HIVE_BUILDER ? It can be moved to the base class as a constant.", "author": "kasakrisz", "createdAt": "2020-08-25T04:45:53Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveSemiJoinRule.java", "diffHunk": "@@ -33,194 +37,263 @@\n import org.apache.calcite.rex.RexBuilder;\n import org.apache.calcite.rex.RexNode;\n import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilder.GroupKey;\n import org.apache.calcite.tools.RelBuilderFactory;\n import org.apache.calcite.util.ImmutableBitSet;\n+import org.apache.calcite.util.ImmutableIntList;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.HiveCalciteUtil;\n import org.apache.hadoop.hive.ql.optimizer.calcite.HiveRelFactories;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Planner rule that creates a {@code SemiJoinRule} from a\n- * {@link org.apache.calcite.rel.core.Join} on top of a\n- * {@link org.apache.calcite.rel.logical.LogicalAggregate}.\n- *\n- * TODO Remove this rule and use Calcite's SemiJoinRule. Not possible currently\n- * since Calcite doesnt use RelBuilder for this rule and we want to generate HiveSemiJoin rel here.\n+ * Class that gathers SemiJoin conversion rules.\n  */\n-public abstract class HiveSemiJoinRule extends RelOptRule {\n+public class HiveSemiJoinRule {\n \n-  protected static final Logger LOG = LoggerFactory.getLogger(HiveSemiJoinRule.class);\n+  public static final HiveProjectJoinToSemiJoinRule INSTANCE_PROJECT =\n+      new HiveProjectJoinToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveProjectToSemiJoinRule INSTANCE_PROJECT =\n-      new HiveProjectToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveAggregateJoinToSemiJoinRule INSTANCE_AGGREGATE =\n+      new HiveAggregateJoinToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveProjectToSemiJoinRuleSwapInputs INSTANCE_PROJECT_SWAPPED =\n-      new HiveProjectToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveProjectJoinToSemiJoinRuleSwapInputs INSTANCE_PROJECT_SWAPPED =\n+      new HiveProjectJoinToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);\n \n-  public static final HiveAggregateToSemiJoinRule INSTANCE_AGGREGATE =\n-      new HiveAggregateToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n+  public static final HiveAggregateJoinToSemiJoinRuleSwapInputs INSTANCE_AGGREGATE_SWAPPED =\n+      new HiveAggregateJoinToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);", "originalCommit": "4abe7aae82b33d877cea7c04e1ea54534ac08844", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MTY0MA==", "url": "https://github.com/apache/hive/pull/1405#discussion_r476491640", "bodyText": "done.", "author": "jcamachor", "createdAt": "2020-08-25T14:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2OTIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "97fcb7158bca7a6c7576f5ee22de61d3ea6e0704", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveSemiJoinRule.java b/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveSemiJoinRule.java\nindex 8591ad3d6f..941546d797 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveSemiJoinRule.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveSemiJoinRule.java\n\n@@ -57,16 +57,16 @@\n public class HiveSemiJoinRule {\n \n   public static final HiveProjectJoinToSemiJoinRule INSTANCE_PROJECT =\n-      new HiveProjectJoinToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n+      new HiveProjectJoinToSemiJoinRule();\n \n   public static final HiveAggregateJoinToSemiJoinRule INSTANCE_AGGREGATE =\n-      new HiveAggregateJoinToSemiJoinRule(HiveRelFactories.HIVE_BUILDER);\n+      new HiveAggregateJoinToSemiJoinRule();\n \n   public static final HiveProjectJoinToSemiJoinRuleSwapInputs INSTANCE_PROJECT_SWAPPED =\n-      new HiveProjectJoinToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);\n+      new HiveProjectJoinToSemiJoinRuleSwapInputs();\n \n   public static final HiveAggregateJoinToSemiJoinRuleSwapInputs INSTANCE_AGGREGATE_SWAPPED =\n-      new HiveAggregateJoinToSemiJoinRuleSwapInputs(HiveRelFactories.HIVE_BUILDER);\n+      new HiveAggregateJoinToSemiJoinRuleSwapInputs();\n \n   private HiveSemiJoinRule() {\n     // Exists only to defeat instantiation.\n"}}, {"oid": "97fcb7158bca7a6c7576f5ee22de61d3ea6e0704", "url": "https://github.com/apache/hive/commit/97fcb7158bca7a6c7576f5ee22de61d3ea6e0704", "message": "moving builder", "committedDate": "2020-08-25T14:26:08Z", "type": "commit"}]}