{"pr_number": 1811, "pr_title": "HIVE-24564: Extend PPD filter transitivity to be able to discover new opportunities", "pr_createdAt": "2020-12-23T17:13:33Z", "pr_url": "https://github.com/apache/hive/pull/1811", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0MjE0Mw==", "url": "https://github.com/apache/hive/pull/1811#discussion_r548342143", "bodyText": "Consider changing method name.", "author": "jcamachor", "createdAt": "2020-12-24T01:28:44Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +769,134 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        result.add((ExprNodeColumnDesc) exprNodeDesc);\n+        return;\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          extractColumnExprNodes(child, result);\n+        }\n+      }\n+    }\n+\n+    private ExprNodeDesc replaceColumnExprNodes(ExprNodeDesc exprNodeDesc, Map<ExprNodeDesc, ExprNodeDesc> replaceMap) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        return replaceMap.getOrDefault(exprNodeDesc, exprNodeDesc);\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        ExprNodeGenericFuncDesc exprNodeGenericFuncDesc = (ExprNodeGenericFuncDesc) exprNodeDesc.clone();\n+        List<ExprNodeDesc> replacedChildren = new ArrayList<>(exprNodeDesc.getChildren().size());\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          replacedChildren.add(replaceColumnExprNodes(child, replaceMap));\n+        }\n+        exprNodeGenericFuncDesc.setChildren(replacedChildren);\n+        return exprNodeGenericFuncDesc;\n+      }\n+\n+      return exprNodeDesc;\n+    }\n+\n+    private Map<ExprNodeDesc, String> walk(Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {", "originalCommit": "34294e822e51c707186a8ad8d07e8dfafd77b9cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5NzUzNg==", "url": "https://github.com/apache/hive/pull/1811#discussion_r564597536", "bodyText": "changed to searchForEqualities", "author": "kasakrisz", "createdAt": "2021-01-26T15:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0MjE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ad7f0439f4c92ca1a99ff60953db2bc02b430ef2", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\nindex bbfbedfa84..e057457ba5 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n\n@@ -770,7 +755,16 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n       }\n     }\n \n-    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+    private Set<ExprNodeColumnDesc> collectColumnsInPredicates(List<ExprNodeDesc> predicates) {\n+      Set<ExprNodeColumnDesc> columnsInPredicates;\n+      columnsInPredicates = new HashSet<>();\n+      for (ExprNodeDesc predicate : predicates) {\n+        extractColumnExprNodes(predicate, columnsInPredicates);\n+      }\n+      return columnsInPredicates;\n+    }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, Set<ExprNodeColumnDesc> result) {\n       if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n         result.add((ExprNodeColumnDesc) exprNodeDesc);\n         return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0NDM4Nw==", "url": "https://github.com/apache/hive/pull/1811#discussion_r548344387", "bodyText": "When would this be null? Can we add a comment?", "author": "jcamachor", "createdAt": "2020-12-24T01:40:24Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +769,134 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        result.add((ExprNodeColumnDesc) exprNodeDesc);\n+        return;\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          extractColumnExprNodes(child, result);\n+        }\n+      }\n+    }\n+\n+    private ExprNodeDesc replaceColumnExprNodes(ExprNodeDesc exprNodeDesc, Map<ExprNodeDesc, ExprNodeDesc> replaceMap) {\n+      if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n+        return replaceMap.getOrDefault(exprNodeDesc, exprNodeDesc);\n+      }\n+      if (exprNodeDesc instanceof ExprNodeGenericFuncDesc) {\n+        ExprNodeGenericFuncDesc exprNodeGenericFuncDesc = (ExprNodeGenericFuncDesc) exprNodeDesc.clone();\n+        List<ExprNodeDesc> replacedChildren = new ArrayList<>(exprNodeDesc.getChildren().size());\n+        for (ExprNodeDesc child : exprNodeDesc.getChildren()) {\n+          replacedChildren.add(replaceColumnExprNodes(child, replaceMap));\n+        }\n+        exprNodeGenericFuncDesc.setChildren(replacedChildren);\n+        return exprNodeGenericFuncDesc;\n+      }\n+\n+      return exprNodeDesc;\n+    }\n+\n+    private Map<ExprNodeDesc, String> walk(Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      Map<ExprNodeDesc, String> equalities;\n+      if (operator instanceof CommonJoinOperator) {\n+        equalities = processJoinEq((CommonJoinOperator<?>)operator, exprNodeDescList);\n+      } else {\n+        equalities = processDefaultEq(operator, exprNodeDescList);\n+      }\n+      return equalities;\n+    }\n+\n+    private Map<ExprNodeDesc, String> processJoinEq(\n+            CommonJoinOperator<?> join, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      if (exprNodeDescList.isEmpty()) {\n+        return Collections.emptyMap();\n+      }\n+      Map<ExprNodeDesc, String> equalities = new HashMap<>();\n+      for (ExprNodeColumnDesc exprNodeDesc : exprNodeDescList) {\n+        ExprNodeDesc mappedColExpr = join.getColumnExprMap().get(exprNodeDesc.getColumn());\n+        if (!(mappedColExpr instanceof ExprNodeColumnDesc)) {\n+          continue;\n+        }\n+        String mappedColName = ((ExprNodeColumnDesc)mappedColExpr).getColumn();\n+        int sideIndex = join.getConf().getReversedExprs().get(exprNodeDesc.getColumn());\n+        Operator<?> parentRSOperator = join.getParentOperators().get(sideIndex);\n+        for (int i = 0; i < join.getConf().getJoinKeys()[sideIndex].length; ++i) {\n+          ExprNodeDesc keyExpr = join.getConf().getJoinKeys()[sideIndex][i];\n+          if (!keyExpr.isSame(parentRSOperator.getColumnExprMap().get(mappedColName))) {\n+            continue;\n+          }\n+\n+          // exprNodeDesc is join key\n+          // find the other key in the join expression\n+          Operator<?> otherParentRSOperator = join.getParentOperators().get(1 - sideIndex);\n+          for (Entry<String, ExprNodeDesc> joinMapEntry : join.getColumnExprMap().entrySet()) {\n+            if (join.getConf().getReversedExprs().get(joinMapEntry.getKey()) != 1 - sideIndex) {\n+              continue;\n+            }\n+\n+            String otherColumnName = ((ExprNodeColumnDesc) joinMapEntry.getValue()).getColumn();\n+            ExprNodeDesc mappedOtherKeyExpr = otherParentRSOperator.getColumnExprMap().get(otherColumnName);\n+            ExprNodeDesc otherKeyExpr = join.getConf().getJoinKeys()[1 - sideIndex][i];\n+            if (mappedOtherKeyExpr != null && otherKeyExpr.isSame(mappedOtherKeyExpr)) {\n+              equalities.put(exprNodeDesc, joinMapEntry.getKey());\n+            }\n+          }\n+        }\n+      }\n+\n+      for (Operator<?> parent : join.getParentOperators()) {\n+        equalities.putAll(walk(parent, exprNodeDescList));\n+      }\n+\n+      return equalities;\n+    }\n+\n+    private Map<ExprNodeDesc, String> processDefaultEq(\n+            Operator<?> operator, List<ExprNodeColumnDesc> exprNodeDescList) {\n+      if (exprNodeDescList.isEmpty()) {\n+        return Collections.emptyMap();\n+      }\n+\n+      Map<String, ExprNodeDesc> columnExprMap = operator.getColumnExprMap();\n+      if (columnExprMap == null) {", "originalCommit": "34294e822e51c707186a8ad8d07e8dfafd77b9cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ad7f0439f4c92ca1a99ff60953db2bc02b430ef2", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\nindex bbfbedfa84..e057457ba5 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n\n@@ -770,7 +755,16 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n       }\n     }\n \n-    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n+    private Set<ExprNodeColumnDesc> collectColumnsInPredicates(List<ExprNodeDesc> predicates) {\n+      Set<ExprNodeColumnDesc> columnsInPredicates;\n+      columnsInPredicates = new HashSet<>();\n+      for (ExprNodeDesc predicate : predicates) {\n+        extractColumnExprNodes(predicate, columnsInPredicates);\n+      }\n+      return columnsInPredicates;\n+    }\n+\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, Set<ExprNodeColumnDesc> result) {\n       if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n         result.add((ExprNodeColumnDesc) exprNodeDesc);\n         return;\n"}}, {"oid": "ad7f0439f4c92ca1a99ff60953db2bc02b430ef2", "url": "https://github.com/apache/hive/commit/ad7f0439f4c92ca1a99ff60953db2bc02b430ef2", "message": "update q test", "committedDate": "2021-01-06T13:11:16Z", "type": "forcePushed"}, {"oid": "61df78781455935ebf692557a64626d983b90100", "url": "https://github.com/apache/hive/commit/61df78781455935ebf692557a64626d983b90100", "message": "add feature switch", "committedDate": "2021-01-18T10:50:05Z", "type": "forcePushed"}, {"oid": "29899642731ddf9c09e082be0728ca0810dad45d", "url": "https://github.com/apache/hive/commit/29899642731ddf9c09e082be0728ca0810dad45d", "message": "rebase", "committedDate": "2021-01-19T17:17:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzMTc3Nw==", "url": "https://github.com/apache/hive/pull/1811#discussion_r563931777", "bodyText": "\"Whether we should traverse the join branches to discover transitive propagation opportunities over equijoin conditions. \\n\" +\n\"Requires hive.ppd.recognizetransivity to be set to true.\"", "author": "jcamachor", "createdAt": "2021-01-25T18:02:53Z", "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -2461,6 +2461,10 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n         \"Whether to enable predicate pushdown through windowing\"),\n     HIVEPPDRECOGNIZETRANSITIVITY(\"hive.ppd.recognizetransivity\", true,\n         \"Whether to transitively replicate predicate filters over equijoin conditions.\"),\n+    HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES(\"hive.ppd.recognize.column.equalities\", true,\n+        \"When hive.ppd.recognizetransivity is true Whether traverse join branches to discover equal columns based\" +\n+                \" on equijoin keys and try to substitute equal columns to predicates \" +\n+                \"and push down to the other branch.\"),\n     HIVEPPDREMOVEDUPLICATEFILTERS(\"hive.ppd.remove.duplicatefilters\", true,", "originalCommit": "02699b101543f17349dd98889018035bc21d7ac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5Nzc4Ng==", "url": "https://github.com/apache/hive/pull/1811#discussion_r564597786", "bodyText": "Replaced", "author": "kasakrisz", "createdAt": "2021-01-26T15:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzMTc3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f9d73d12849a41e6f5ff38e03f34dc9016758785", "chunk": "diff --git a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\nindex bd87ae98dd..a490ae67f4 100644\n--- a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\n+++ b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\n\n@@ -2461,10 +2461,6 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n         \"Whether to enable predicate pushdown through windowing\"),\n     HIVEPPDRECOGNIZETRANSITIVITY(\"hive.ppd.recognizetransivity\", true,\n         \"Whether to transitively replicate predicate filters over equijoin conditions.\"),\n-    HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES(\"hive.ppd.recognize.column.equalities\", true,\n-        \"When hive.ppd.recognizetransivity is true Whether traverse join branches to discover equal columns based\" +\n-                \" on equijoin keys and try to substitute equal columns to predicates \" +\n-                \"and push down to the other branch.\"),\n     HIVEPPDREMOVEDUPLICATEFILTERS(\"hive.ppd.remove.duplicatefilters\", true,\n         \"During query optimization, filters may be pushed down in the operator tree. \\n\" +\n         \"If this config is true only pushed down filters remain in the operator tree, \\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzU1Mg==", "url": "https://github.com/apache/hive/pull/1811#discussion_r563973552", "bodyText": "Extract the property value into a variable before entering in the loop (~L700).", "author": "jcamachor", "createdAt": "2021-01-25T19:07:05Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -712,14 +714,47 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n+\n+          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n+          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),", "originalCommit": "02699b101543f17349dd98889018035bc21d7ac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5ODAxMA==", "url": "https://github.com/apache/hive/pull/1811#discussion_r564598010", "bodyText": "Done", "author": "kasakrisz", "createdAt": "2021-01-26T15:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f9d73d12849a41e6f5ff38e03f34dc9016758785", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\nindex ced9707dd7..bbfbedfa84 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n\n@@ -714,17 +722,6 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n-\n-          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n-          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),\n-                  HiveConf.ConfVars.HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES)) {\n-            columnsInPredicates = owi.getColumnsInPredicates().get(source);\n-            if (columnsInPredicates == null) {\n-              columnsInPredicates = collectColumnsInPredicates(entry.getValue());\n-              owi.getColumnsInPredicates().put(source, columnsInPredicates);\n-            }\n-          }\n-\n           for (ExprNodeDesc predicate : entry.getValue()) {\n             ExprNodeDesc backtrack = ExprNodeDescUtils.backtrack(predicate, join, source);\n             if (backtrack == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzkxNQ==", "url": "https://github.com/apache/hive/pull/1811#discussion_r563973915", "bodyText": "Extract the property value into a variable before entering in the loop (~L700).", "author": "jcamachor", "createdAt": "2021-01-25T19:07:36Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -712,14 +714,47 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n+\n+          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n+          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),\n+                  HiveConf.ConfVars.HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES)) {\n+            columnsInPredicates = owi.getColumnsInPredicates().get(source);\n+            if (columnsInPredicates == null) {\n+              columnsInPredicates = collectColumnsInPredicates(entry.getValue());\n+              owi.getColumnsInPredicates().put(source, columnsInPredicates);\n+            }\n+          }\n+\n           for (ExprNodeDesc predicate : entry.getValue()) {\n             ExprNodeDesc backtrack = ExprNodeDescUtils.backtrack(predicate, join, source);\n             if (backtrack == null) {\n               continue;\n             }\n             ExprNodeDesc replaced = ExprNodeDescUtils.replace(backtrack, sourceKeys, targetKeys);\n             if (replaced == null) {\n-              continue;\n+              if (!HiveConf.getBoolVar(owi.getParseContext().getConf(),", "originalCommit": "02699b101543f17349dd98889018035bc21d7ac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5ODEyOQ==", "url": "https://github.com/apache/hive/pull/1811#discussion_r564598129", "bodyText": "Done", "author": "kasakrisz", "createdAt": "2021-01-26T15:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MzkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f9d73d12849a41e6f5ff38e03f34dc9016758785", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\nindex ced9707dd7..bbfbedfa84 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n\n@@ -714,17 +722,6 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n           if (!sourceAliases.contains(entry.getKey())) {\n             continue;\n           }\n-\n-          Set<ExprNodeColumnDesc> columnsInPredicates = null;\n-          if (HiveConf.getBoolVar(owi.getParseContext().getConf(),\n-                  HiveConf.ConfVars.HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES)) {\n-            columnsInPredicates = owi.getColumnsInPredicates().get(source);\n-            if (columnsInPredicates == null) {\n-              columnsInPredicates = collectColumnsInPredicates(entry.getValue());\n-              owi.getColumnsInPredicates().put(source, columnsInPredicates);\n-            }\n-          }\n-\n           for (ExprNodeDesc predicate : entry.getValue()) {\n             ExprNodeDesc backtrack = ExprNodeDescUtils.backtrack(predicate, join, source);\n             if (backtrack == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4ODQ0Mg==", "url": "https://github.com/apache/hive/pull/1811#discussion_r563988442", "bodyText": "Can we add a few high level comments to these new private methods describing what they do?", "author": "jcamachor", "createdAt": "2021-01-25T19:31:16Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java", "diffHunk": "@@ -728,6 +763,166 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n         }\n       }\n     }\n+\n+    private Set<ExprNodeColumnDesc> collectColumnsInPredicates(List<ExprNodeDesc> predicates) {", "originalCommit": "02699b101543f17349dd98889018035bc21d7ac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5ODcxNw==", "url": "https://github.com/apache/hive/pull/1811#discussion_r564598717", "bodyText": "added javadoc", "author": "kasakrisz", "createdAt": "2021-01-26T15:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4ODQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f9d73d12849a41e6f5ff38e03f34dc9016758785", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\nindex ced9707dd7..bbfbedfa84 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java\n\n@@ -764,16 +770,7 @@ private void applyFilterTransitivity(JoinOperator join, int targetPos, OpWalkerI\n       }\n     }\n \n-    private Set<ExprNodeColumnDesc> collectColumnsInPredicates(List<ExprNodeDesc> predicates) {\n-      Set<ExprNodeColumnDesc> columnsInPredicates;\n-      columnsInPredicates = new HashSet<>();\n-      for (ExprNodeDesc predicate : predicates) {\n-        extractColumnExprNodes(predicate, columnsInPredicates);\n-      }\n-      return columnsInPredicates;\n-    }\n-\n-    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, Set<ExprNodeColumnDesc> result) {\n+    private void extractColumnExprNodes(ExprNodeDesc exprNodeDesc, List<ExprNodeColumnDesc> result) {\n       if (exprNodeDesc instanceof ExprNodeColumnDesc) {\n         result.add((ExprNodeColumnDesc) exprNodeDesc);\n         return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwMDY2Mg==", "url": "https://github.com/apache/hive/pull/1811#discussion_r564000662", "bodyText": "Can we add comments about these data structures and what they will hold?", "author": "jcamachor", "createdAt": "2021-01-25T19:51:13Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java", "diffHunk": "@@ -39,11 +43,15 @@\n     opToPushdownPredMap;\n   private final ParseContext pGraphContext;\n   private final List<FilterOperator> candidateFilterOps;\n+  private final Map<Operator<?>, Set<ExprNodeColumnDesc>> columnsInPredicates;", "originalCommit": "02699b101543f17349dd98889018035bc21d7ac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU5ODQ4MA==", "url": "https://github.com/apache/hive/pull/1811#discussion_r564598480", "bodyText": "Added comments", "author": "kasakrisz", "createdAt": "2021-01-26T15:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwMDY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f9d73d12849a41e6f5ff38e03f34dc9016758785", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java\nindex 2e6881dbb2..e14935d5a8 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpWalkerInfo.java\n\n@@ -43,15 +39,11 @@\n     opToPushdownPredMap;\n   private final ParseContext pGraphContext;\n   private final List<FilterOperator> candidateFilterOps;\n-  private final Map<Operator<?>, Set<ExprNodeColumnDesc>> columnsInPredicates;\n-  private final Map<Operator<?>, Map<ExprNodeDesc, ExprNodeDesc>> equalities;\n \n   public OpWalkerInfo(ParseContext pGraphContext) {\n     this.pGraphContext = pGraphContext;\n     opToPushdownPredMap = new HashMap<Operator<? extends OperatorDesc>, ExprWalkerInfo>();\n     candidateFilterOps = new ArrayList<FilterOperator>();\n-    columnsInPredicates = new HashMap<>();\n-    equalities = new HashMap<>();\n   }\n \n   public ExprWalkerInfo getPrunedPreds(Operator<? extends OperatorDesc> op) {\n"}}, {"oid": "f9d73d12849a41e6f5ff38e03f34dc9016758785", "url": "https://github.com/apache/hive/commit/f9d73d12849a41e6f5ff38e03f34dc9016758785", "message": "HIVE-24564: Extend PPD filter transitivity to be able to discover new opportunities", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "213a5b8f2bc065ade4deba3991e0c82b80d705f6", "url": "https://github.com/apache/hive/commit/213a5b8f2bc065ade4deba3991e0c82b80d705f6", "message": "rename methods", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "77c11682e9174391b1f939beb708ee154e694dff", "url": "https://github.com/apache/hive/commit/77c11682e9174391b1f939beb708ee154e694dff", "message": "add comments", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "af55a1afb54abe4d52455153b778d3cae2e42d9b", "url": "https://github.com/apache/hive/commit/af55a1afb54abe4d52455153b778d3cae2e42d9b", "message": "cache equalities", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "1eadfba6aba3c1d183c226efcba436e35ed61397", "url": "https://github.com/apache/hive/commit/1eadfba6aba3c1d183c226efcba436e35ed61397", "message": "bail out of no equalities found", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "64fe3d620c2152785f94762986d79f81279178ad", "url": "https://github.com/apache/hive/commit/64fe3d620c2152785f94762986d79f81279178ad", "message": "update q test", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "30f571f9fa1af535a2d1f7ad4a348c5b183655fc", "url": "https://github.com/apache/hive/commit/30f571f9fa1af535a2d1f7ad4a348c5b183655fc", "message": "add feature switch", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "b018c33629012dcc138851f275f192547d7cfd5b", "url": "https://github.com/apache/hive/commit/b018c33629012dcc138851f275f192547d7cfd5b", "message": "checkstyle", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "c9d1a153e5e2e63ef466dd48e33d0144fac75223", "url": "https://github.com/apache/hive/commit/c9d1a153e5e2e63ef466dd48e33d0144fac75223", "message": "rebase", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "c574493d526683631e688489d52b951d9338938c", "url": "https://github.com/apache/hive/commit/c574493d526683631e688489d52b951d9338938c", "message": "rewrite description of config HIVEPPD_RECOGNIZE_COLUMN_EQUALITIES", "committedDate": "2021-01-26T07:27:01Z", "type": "commit"}, {"oid": "d8566e8cb1c09587763f530245ae9449943fdc90", "url": "https://github.com/apache/hive/commit/d8566e8cb1c09587763f530245ae9449943fdc90", "message": "Extract config value query to local variable", "committedDate": "2021-01-26T07:35:02Z", "type": "commit"}, {"oid": "b7ee65753b1710c66e0a7ddf1237e821c96fef40", "url": "https://github.com/apache/hive/commit/b7ee65753b1710c66e0a7ddf1237e821c96fef40", "message": "reuse ExprNodeDescUtils.findAllColumnDescs", "committedDate": "2021-01-26T08:06:06Z", "type": "commit"}, {"oid": "adce6736391cdb28dc1f90ce43217efe0e48153b", "url": "https://github.com/apache/hive/commit/adce6736391cdb28dc1f90ce43217efe0e48153b", "message": "add comments", "committedDate": "2021-01-26T10:37:54Z", "type": "commit"}, {"oid": "adce6736391cdb28dc1f90ce43217efe0e48153b", "url": "https://github.com/apache/hive/commit/adce6736391cdb28dc1f90ce43217efe0e48153b", "message": "add comments", "committedDate": "2021-01-26T10:37:54Z", "type": "forcePushed"}]}