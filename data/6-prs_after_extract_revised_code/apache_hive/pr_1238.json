{"pr_number": 1238, "pr_title": "HIVE-23824", "pr_createdAt": "2020-07-10T13:06:13Z", "pr_url": "https://github.com/apache/hive/pull/1238", "timeline": [{"oid": "5c156a2d684a744727f4cade0f73ab999e34073e", "url": "https://github.com/apache/hive/commit/5c156a2d684a744727f4cade0f73ab999e34073e", "message": "HIVE-23824 - Initial commit\n\nChange-Id: Ic17774d763ed00b1fc3cf2abd5337d84435ffe4a", "committedDate": "2020-07-10T13:04:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MjExOA==", "url": "https://github.com/apache/hive/pull/1238#discussion_r453552118", "bodyText": "Missing javadoc for cachetag", "author": "pvary", "createdAt": "2020-07-13T10:27:33Z", "path": "llap-client/src/java/org/apache/hadoop/hive/llap/io/api/LlapIo.java", "diffHunk": "@@ -35,6 +41,15 @@\n    */\n   long purge();\n \n+  /**\n+   * Returns a deserialized OrcTail instance associated with the ORC file on the given path.\n+   *  Raw content is either obtained from cache, or from disk if there is a cache miss.\n+   * @param path Orc file path\n+   * @param conf jobConf", "originalCommit": "5c156a2d684a744727f4cade0f73ab999e34073e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "03f26a45a98248e8a7593ce3f7730cce547407c5", "chunk": "diff --git a/llap-client/src/java/org/apache/hadoop/hive/llap/io/api/LlapIo.java b/llap-client/src/java/org/apache/hadoop/hive/llap/io/api/LlapIo.java\nindex 58a82b5572..d94a586807 100644\n--- a/llap-client/src/java/org/apache/hadoop/hive/llap/io/api/LlapIo.java\n+++ b/llap-client/src/java/org/apache/hadoop/hive/llap/io/api/LlapIo.java\n\n@@ -43,12 +43,14 @@\n \n   /**\n    * Returns a deserialized OrcTail instance associated with the ORC file on the given path.\n-   *  Raw content is either obtained from cache, or from disk if there is a cache miss.\n+   * Raw content is either obtained from cache, or from disk if there is a cache miss.\n    * @param path Orc file path\n    * @param conf jobConf\n+   * @param tag a CacheTag instance must be provided as that's needed for cache insertion\n    * @return\n+   * @throws IOException\n    */\n-  OrcTail getOrcTailFromCache(Path path, Configuration conf, CacheTag t) throws IOException;\n+  OrcTail getOrcTailFromCache(Path path, Configuration conf, CacheTag tag) throws IOException;\n \n   /**\n    * Handles request to evict entities specified in the request object.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1NTQ2Mw==", "url": "https://github.com/apache/hive/pull/1238#discussion_r453555463", "bodyText": "What happens if the tail is evicted from the cache in the meantime (after the check, but before this line). Or it is locked during this code?", "author": "pvary", "createdAt": "2020-07-13T10:33:49Z", "path": "llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java", "diffHunk": "@@ -575,31 +626,8 @@ private OrcFileMetadata getFileFooterFromCacheOrDisk() throws IOException {\n       tailBuffers = metadataCache.getFileMetadata(fileKey);\n       if (tailBuffers != null) {\n         try {\n-          MemoryBuffer tailBuffer = tailBuffers.getSingleBuffer();\n-          ByteBuffer bb = null;\n-          if (tailBuffer != null) {\n-            bb = tailBuffer.getByteBufferDup();\n-            // TODO: remove the copy after ORC-158 and ORC-197\n-            // if (bb.isDirect()) {\n-              ByteBuffer dupBb = tailBuffer.getByteBufferDup(); // Don't mess with the cached object.\n-              bb = ByteBuffer.allocate(dupBb.remaining());\n-              bb.put(dupBb);\n-              bb.flip();\n-            // }\n-          } else {\n-            // TODO: add the ability to extractFileTail to read from multiple buffers?\n-            MemoryBuffer[] tailBufferArray = tailBuffers.getMultipleBuffers();\n-            int totalSize = 0;\n-            for (MemoryBuffer buf : tailBufferArray) {\n-              totalSize += buf.getByteBufferRaw().remaining();\n-            }\n-            bb = ByteBuffer.allocate(totalSize);\n-            for (MemoryBuffer buf : tailBufferArray) {\n-              bb.put(buf.getByteBufferDup());\n-            }\n-            bb.flip();\n-          }\n-          OrcTail orcTail = ReaderImpl.extractFileTail(bb);\n+          OrcTail orcTail = getOrcTailFromLlapBuffers(tailBuffers);", "originalCommit": "5c156a2d684a744727f4cade0f73ab999e34073e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1NjA1NQ==", "url": "https://github.com/apache/hive/pull/1238#discussion_r453556055", "bodyText": "Oh, I see now... it is decRefBuffer...", "author": "pvary", "createdAt": "2020-07-13T10:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1NTQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4ODUwNQ==", "url": "https://github.com/apache/hive/pull/1238#discussion_r453588505", "bodyText": "Yes, it won't be evicted as it is locked. The getFileMetadata invocation will incRef it (if it is found of course)", "author": "szlta", "createdAt": "2020-07-13T11:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1NTQ2Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "03f26a45a98248e8a7593ce3f7730cce547407c5", "url": "https://github.com/apache/hive/commit/03f26a45a98248e8a7593ce3f7730cce547407c5", "message": "Fixing javadoc\n\nChange-Id: I948a306804f6c3a98b33adb226b8d2fdaea3d74e", "committedDate": "2020-07-13T11:35:53Z", "type": "commit"}]}