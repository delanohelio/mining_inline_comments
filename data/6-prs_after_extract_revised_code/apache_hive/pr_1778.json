{"pr_number": 1778, "pr_title": "HIVE-24524: LLAP ShuffleHandler: upgrade to netty4", "pr_createdAt": "2020-12-14T17:40:14Z", "pr_url": "https://github.com/apache/hive/pull/1778", "timeline": [{"oid": "ebd431dda6699868001093b9ce64577ede38a43b", "url": "https://github.com/apache/hive/commit/ebd431dda6699868001093b9ce64577ede38a43b", "message": "HIVE-24524: LLAP ShuffleHandler: upgrade to netty4", "committedDate": "2020-12-15T08:56:57Z", "type": "forcePushed"}, {"oid": "827af5537d62585e913c612817f9a26b4edb6b2f", "url": "https://github.com/apache/hive/commit/827af5537d62585e913c612817f9a26b4edb6b2f", "message": "HIVE-24524: LLAP ShuffleHandler: upgrade to netty4", "committedDate": "2021-01-06T09:43:29Z", "type": "forcePushed"}, {"oid": "e42d37515b1a2e4a1cd622f84200660a11fc3699", "url": "https://github.com/apache/hive/commit/e42d37515b1a2e4a1cd622f84200660a11fc3699", "message": "HIVE-24524: LLAP ShuffleHandler: upgrade to netty4", "committedDate": "2021-04-10T06:49:01Z", "type": "forcePushed"}, {"oid": "d9cb128e349d0d18bfc9ab686d720d611797b1ae", "url": "https://github.com/apache/hive/commit/d9cb128e349d0d18bfc9ab686d720d611797b1ae", "message": "HIVE-24524: LLAP ShuffleHandler: upgrade to netty4", "committedDate": "2021-04-11T11:09:25Z", "type": "forcePushed"}, {"oid": "78ad65f2dd2cea1ee3bb06b0b3d27a2a6cebecd7", "url": "https://github.com/apache/hive/commit/78ad65f2dd2cea1ee3bb06b0b3d27a2a6cebecd7", "message": "HIVE-24524: LLAP ShuffleHandler: upgrade to netty4", "committedDate": "2021-04-13T03:54:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjI4OTc2Mg==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612289762", "bodyText": "Shall we simplify this to:\ntransferred = true;\nif (this.shuffleTransferToAllowed) {\n      return super.transferTo(target, position);\n}\nreturn  customShuffleTransfer(target, position);", "author": "pgaref", "createdAt": "2021-04-13T09:35:18Z", "path": "llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/FadvisedFileRegion.java", "diffHunk": "@@ -71,15 +72,39 @@ public long transferTo(WritableByteChannel target, long position)\n       throws IOException {\n     if (manageOsCache && readaheadPool != null) {\n       readaheadRequest = readaheadPool.readaheadStream(identifier, fd,\n-          getPosition() + position, readaheadLength,\n-          getPosition() + getCount(), readaheadRequest);\n+          position() + position, readaheadLength,\n+          position() + count(), readaheadRequest);\n     }\n-    \n+    long written = 0;", "originalCommit": "78ad65f2dd2cea1ee3bb06b0b3d27a2a6cebecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMyODI4MA==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612328280", "bodyText": "looks better, but I don't think it's correct: in case of an exception during the transfer, we should not have set transferred=true", "author": "abstractdog", "createdAt": "2021-04-13T10:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjI4OTc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMyOTI5OA==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612329298", "bodyText": "Got it", "author": "pgaref", "createdAt": "2021-04-13T10:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjI4OTc2Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjI5MjU4Mw==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612292583", "bodyText": "Shall we keep the original log message for advancing the file descriptor as well here?\nWhy do we need the extra fd.valid check here? (maybe leave a comment?)", "author": "pgaref", "createdAt": "2021-04-13T09:39:14Z", "path": "llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/FadvisedFileRegion.java", "diffHunk": "@@ -124,39 +149,33 @@ long customShuffleTransfer(WritableByteChannel target, long position)\n         position += trans; \n         trans = 0;\n       }\n-      \n+\n       //write data to the target\n       while(byteBuffer.hasRemaining()) {\n         target.write(byteBuffer);\n       }\n       \n       byteBuffer.clear();\n     }\n-    \n+\n     return actualCount - trans;\n   }\n \n-  \n-  @Override\n-  public void releaseExternalResources() {\n-    if (readaheadRequest != null) {\n-      readaheadRequest.cancel();\n-    }\n-    super.releaseExternalResources();\n-  }\n-  \n   /**\n    * Call when the transfer completes successfully so we can advise the OS that\n    * we don't need the region to be cached anymore.\n    */\n   public void transferSuccessful() {\n-    if (manageOsCache && getCount() > 0) {\n+    if (manageOsCache && count() > 0) {\n       try {\n         if (canEvictAfterTransfer) {\n-          LOG.debug(\"shuffleBufferSize: {}, path: {}\", shuffleBufferSize, identifier);\n-          NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(identifier,\n-              fd, getPosition(), getCount(),\n-              NativeIO.POSIX.POSIX_FADV_DONTNEED);\n+          if (fd.valid()) {", "originalCommit": "78ad65f2dd2cea1ee3bb06b0b3d27a2a6cebecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMyNjQ0NQ==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612326445", "bodyText": "hm, thought this over again, fd.valid() change was needed while I haven't been handling deallocate() stuff properly, but now, at this point fd should be valid...initially I left this check here because I thought that an invalid fd is not a problem (which is true, we won't advise to OS cache, and that's it), but as we already have try/catch, we don't need this this check (we'll have the exception in the logs anyway)", "author": "abstractdog", "createdAt": "2021-04-13T10:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjI5MjU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a9eebcbbec26d22d6179f79a53860116ebb1616e", "chunk": "diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/FadvisedFileRegion.java b/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/FadvisedFileRegion.java\nindex 83e184f625..bc34708805 100644\n--- a/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/FadvisedFileRegion.java\n+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/FadvisedFileRegion.java\n\n@@ -169,13 +169,8 @@ public void transferSuccessful() {\n     if (manageOsCache && count() > 0) {\n       try {\n         if (canEvictAfterTransfer) {\n-          if (fd.valid()) {\n-            NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(identifier, fd, position(),\n-                count(), NativeIO.POSIX.POSIX_FADV_DONTNEED);\n-          } else {\n-            LOG.debug(\n-                \"File descriptor is not valid anymore, skipping posix_fadvise: \" + identifier);\n-          }\n+          NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(identifier, fd, position(),\n+              count(), NativeIO.POSIX.POSIX_FADV_DONTNEED);\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Failed to manage OS cache for \" + identifier, t);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMwMDk4MA==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612300980", "bodyText": "I know this is copy pasted from below but do we have a ticket for this?\nIs it still needed?", "author": "pgaref", "createdAt": "2021-04-13T09:51:24Z", "path": "llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java", "diffHunk": "@@ -339,27 +350,60 @@ private ShuffleHandler(Configuration conf) {\n \n \n   public void start() throws Exception {\n-    ServerBootstrap bootstrap = new ServerBootstrap(selector);\n-    // Timer is shared across entire factory and must be released separately\n-    timer = new HashedWheelTimer();\n-    try {\n-      pipelineFact = new HttpPipelineFactory(conf, timer);\n-    } catch (Exception ex) {\n-      throw new RuntimeException(ex);\n-    }\n-    bootstrap.setPipelineFactory(pipelineFact);\n-    bootstrap.setOption(\"backlog\", NetUtil.SOMAXCONN);\n+    ServerBootstrap bootstrap = new ServerBootstrap()\n+        .channel(NioServerSocketChannel.class)\n+        .group(bossGroup, workerGroup)\n+        .localAddress(port)\n+        .option(ChannelOption.SO_BACKLOG, NetUtil.SOMAXCONN)\n+        .childOption(ChannelOption.SO_KEEPALIVE, true);\n+    initPipeline(bootstrap, conf);\n+\n     port = conf.getInt(SHUFFLE_PORT_CONFIG_KEY, DEFAULT_SHUFFLE_PORT);\n-    Channel ch = bootstrap.bind(new InetSocketAddress(port));\n+    Channel ch = bootstrap.bind().sync().channel();\n     accepted.add(ch);\n-    port = ((InetSocketAddress)ch.getLocalAddress()).getPort();\n+    port = ((InetSocketAddress)ch.localAddress()).getPort();\n     conf.set(SHUFFLE_PORT_CONFIG_KEY, Integer.toString(port));\n-    pipelineFact.SHUFFLE.setPort(port);\n+    SHUFFLE.setPort(port);\n     if (dirWatcher != null) {\n       dirWatcher.start();\n     }\n-    LOG.info(\"LlapShuffleHandler\" + \" listening on port \" + port + \" (SOMAXCONN: \" + bootstrap.getOption(\"backlog\")\n-      + \")\");\n+    LOG.info(\"LlapShuffleHandler listening on port {} (SOMAXCONN: {})\", port, NetUtil.SOMAXCONN);\n+  }\n+\n+  private void initPipeline(ServerBootstrap bootstrap, Configuration conf) throws Exception {\n+    SHUFFLE = getShuffle(conf);\n+    // TODO Setup SSL Shuffle", "originalCommit": "78ad65f2dd2cea1ee3bb06b0b3d27a2a6cebecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMyMzY2OQ==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612323669", "bodyText": "I think we don't support SSL shuffle for LLAP at the moment (+ the comment is quite old), e.g. Cloudera's data warehouse, ssl on shuffle is handled transparently by the environment\nI haven't touched this part in this patch, and not even sure what's the plan :) that's why I simply kept this as is", "author": "abstractdog", "createdAt": "2021-04-13T10:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMwMDk4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMwNTY4Ng==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612305686", "bodyText": "Why is this need now? How was connection kept alive before ?", "author": "pgaref", "createdAt": "2021-04-13T09:58:14Z", "path": "llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java", "diffHunk": "@@ -797,16 +803,17 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt)\n \n       Map<String, MapOutputInfo> mapOutputInfoMap =\n           new HashMap<String, MapOutputInfo>();\n-      Channel ch = evt.getChannel();\n-\n+      Channel ch = ctx.channel();\n       // In case of KeepAlive, ensure that timeout handler does not close connection until entire\n       // response is written (i.e, response headers + mapOutput).\n-      ChannelPipeline pipeline = ch.getPipeline();\n+      ChannelPipeline pipeline = ch.pipeline();\n       TimeoutHandler timeoutHandler = (TimeoutHandler)pipeline.get(TIMEOUT_HANDLER);\n       timeoutHandler.setEnabledTimeout(false);\n \n       String user = userRsrc.get(jobId);\n-\n+      if (keepAliveParam || connectionKeepAliveEnabled){", "originalCommit": "78ad65f2dd2cea1ee3bb06b0b3d27a2a6cebecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMzMDU4MQ==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612330581", "bodyText": "good catch :) this is an epic workaround for a problem that I haven't been able to figure out 100%, here are some details:\nhttps://issues.apache.org/jira/browse/TEZ-4157?focusedCommentId=17100835&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17100835\n(btw: with netty3, we didn't need this)\nare you fine with a comment explaining this?", "author": "abstractdog", "createdAt": "2021-04-13T10:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMwNTY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMzNDA3OA==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612334078", "bodyText": "Got it, this is helpful but lets make sure this is expected from nettys' side of things before committing -- this would be helpful for the Tez change as well :)", "author": "pgaref", "createdAt": "2021-04-13T10:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMwNTY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjM0MzU0Mw==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612343543", "bodyText": "okay, in this case I'll have to include some unit tests here (which are part of tez codebase already) + create a simple repro to share with netty community", "author": "abstractdog", "createdAt": "2021-04-13T10:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMwNTY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjM0NzI4Ng==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612347286", "bodyText": "Thanks Laszlo! sounds like a plan!", "author": "pgaref", "createdAt": "2021-04-13T11:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMwNTY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fecb6c67f067e88e76d1d48be7358d9db4a76173", "chunk": "diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java b/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java\nindex 758360f0a5..7202085883 100644\n--- a/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java\n+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java\n\n@@ -811,9 +813,6 @@ private void handleRequest(ChannelHandlerContext ctx, FullHttpRequest request)\n       timeoutHandler.setEnabledTimeout(false);\n \n       String user = userRsrc.get(jobId);\n-      if (keepAliveParam || connectionKeepAliveEnabled){\n-        pipeline.replace(pipeline.get(\"encoder\"), \"encoder\", new HttpResponseEncoder());\n-      }\n       try {\n         populateHeaders(mapIds, jobId, dagId, user, reduceId,\n             response, keepAliveParam, mapOutputInfoMap);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjMwODE2MQ==", "url": "https://github.com/apache/hive/pull/1778#discussion_r612308161", "bodyText": "This looks much cleaner with deallocate() call replacing completion Listeners", "author": "pgaref", "createdAt": "2021-04-13T10:02:00Z", "path": "llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java", "diffHunk": "@@ -1031,25 +1038,14 @@ protected ChannelFuture sendMapOutput(ChannelHandlerContext ctx, Channel ch,\n             info.getStartOffset(), info.getPartLength(), manageOsCache, readaheadLength,\n             readaheadPool, spillfile.getAbsolutePath(), \n             shuffleBufferSize, shuffleTransferToAllowed, canEvictAfterTransfer);\n-        writeFuture = ch.write(partition);\n-        writeFuture.addListener(new ChannelFutureListener() {\n-            // TODO error handling; distinguish IO/connection failures,\n-            //      attribute to appropriate spill output\n-          @Override\n-          public void operationComplete(ChannelFuture future) {\n-            if (future.isSuccess()) {\n-              partition.transferSuccessful();\n-            }\n-            partition.releaseExternalResources();\n-          }\n-        });\n+        writeFuture = ch.writeAndFlush(partition);", "originalCommit": "78ad65f2dd2cea1ee3bb06b0b3d27a2a6cebecd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fecb6c67f067e88e76d1d48be7358d9db4a76173", "chunk": "diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java b/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java\nindex 758360f0a5..7202085883 100644\n--- a/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java\n+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/shufflehandler/ShuffleHandler.java\n\n@@ -1038,14 +1039,14 @@ protected ChannelFuture sendMapOutput(ChannelHandlerContext ctx, Channel ch,\n             info.getStartOffset(), info.getPartLength(), manageOsCache, readaheadLength,\n             readaheadPool, spillfile.getAbsolutePath(), \n             shuffleBufferSize, shuffleTransferToAllowed, canEvictAfterTransfer);\n-        writeFuture = ch.writeAndFlush(partition);\n+        writeFuture = ch.write(partition);\n       } else {\n         // HTTPS cannot be done with zero copy.\n         final FadvisedChunkedFile chunk = new FadvisedChunkedFile(spill,\n             info.getStartOffset(), info.getPartLength(), sslFileBufferSize,\n             manageOsCache, readaheadLength, readaheadPool,\n             spillfile.getAbsolutePath());\n-        writeFuture = ch.writeAndFlush(chunk);\n+        writeFuture = ch.write(chunk);\n       }\n       return writeFuture;\n     }\n"}}, {"oid": "a9eebcbbec26d22d6179f79a53860116ebb1616e", "url": "https://github.com/apache/hive/commit/a9eebcbbec26d22d6179f79a53860116ebb1616e", "message": "cleanup netty3 from pom hieararchy where possible", "committedDate": "2021-04-14T08:14:01Z", "type": "forcePushed"}, {"oid": "d26933d306bf9a18f244be37fbfe78dba406294a", "url": "https://github.com/apache/hive/commit/d26933d306bf9a18f244be37fbfe78dba406294a", "message": "HIVE-24524: LLAP ShuffleHandler: upgrade to netty4", "committedDate": "2021-04-14T13:43:10Z", "type": "commit"}, {"oid": "3e99fa3aae9b4779e8cbc4255eaaa51e05dd5597", "url": "https://github.com/apache/hive/commit/3e99fa3aae9b4779e8cbc4255eaaa51e05dd5597", "message": "cleanup netty3 from pom hieararchy where possible", "committedDate": "2021-04-14T13:43:10Z", "type": "forcePushed"}, {"oid": "fecb6c67f067e88e76d1d48be7358d9db4a76173", "url": "https://github.com/apache/hive/commit/fecb6c67f067e88e76d1d48be7358d9db4a76173", "message": "finished http message", "committedDate": "2021-04-18T20:34:34Z", "type": "forcePushed"}, {"oid": "2d064c8fe61316605a5293a80a2b06a808adf661", "url": "https://github.com/apache/hive/commit/2d064c8fe61316605a5293a80a2b06a808adf661", "message": "cleanup netty3 from pom hieararchy where possible", "committedDate": "2021-04-19T17:06:29Z", "type": "commit"}, {"oid": "17e05075e490aa0d73fd31ddd0c54335d64bb343", "url": "https://github.com/apache/hive/commit/17e05075e490aa0d73fd31ddd0c54335d64bb343", "message": "finished http message", "committedDate": "2021-04-19T17:06:30Z", "type": "forcePushed"}, {"oid": "ea58cd9ba08bf592de7b4753198ece6df4624816", "url": "https://github.com/apache/hive/commit/ea58cd9ba08bf592de7b4753198ece6df4624816", "message": "finished http message", "committedDate": "2021-04-20T09:34:57Z", "type": "commit"}, {"oid": "ea58cd9ba08bf592de7b4753198ece6df4624816", "url": "https://github.com/apache/hive/commit/ea58cd9ba08bf592de7b4753198ece6df4624816", "message": "finished http message", "committedDate": "2021-04-20T09:34:57Z", "type": "forcePushed"}]}