{"pr_number": 1600, "pr_title": "HIVE-24304: Query containing UNION fails with OOM", "pr_createdAt": "2020-10-22T23:20:46Z", "pr_url": "https://github.com/apache/hive/pull/1600", "timeline": [{"oid": "fe26627489196b2318b10b1256716ef5275fe5b1", "url": "https://github.com/apache/hive/commit/fe26627489196b2318b10b1256716ef5275fe5b1", "message": "HIVE-24304: Query containing UNION fails with OOM", "committedDate": "2020-10-22T23:20:09Z", "type": "commit"}, {"oid": "b73053ac24e30f1d743aea793b35732b645e0261", "url": "https://github.com/apache/hive/commit/b73053ac24e30f1d743aea793b35732b645e0261", "message": "q files update", "committedDate": "2020-10-23T16:20:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyNDA2OA==", "url": "https://github.com/apache/hive/pull/1600#discussion_r511024068", "bodyText": "Can we add a comment based on the JIRA discussion on why we are returning null for Union operator (it will help us recall in case we revisit this code in the future)?", "author": "jcamachor", "createdAt": "2020-10-23T17:11:28Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/stats/HiveRelMdExpressionLineage.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.optimizer.calcite.stats;\n+\n+\n+import org.apache.calcite.rel.core.Union;\n+import org.apache.calcite.rel.metadata.BuiltInMetadata;\n+import org.apache.calcite.rel.metadata.MetadataDef;\n+import org.apache.calcite.rel.metadata.MetadataHandler;\n+import org.apache.calcite.rel.metadata.ReflectiveRelMetadataProvider;\n+import org.apache.calcite.rel.metadata.RelMetadataProvider;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.BuiltInMethod;\n+import org.apache.calcite.util.ImmutableBitSet;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.RelOptHiveTable;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveTableScan;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveUnion;\n+\n+import java.util.Set;\n+\n+public final class HiveRelMdExpressionLineage\n+    implements MetadataHandler<BuiltInMetadata.ExpressionLineage> {\n+  public static final RelMetadataProvider SOURCE =\n+      ReflectiveRelMetadataProvider.reflectiveSource(\n+          BuiltInMethod.EXPRESSION_LINEAGE.method, new HiveRelMdExpressionLineage());\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  private HiveRelMdExpressionLineage() {}\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  public MetadataDef<BuiltInMetadata.ExpressionLineage> getDef() {\n+    return BuiltInMetadata.ExpressionLineage.DEF;\n+  }\n+\n+  public Set<RexNode> getExpressionLineage(HiveUnion rel, RelMetadataQuery mq,\n+      RexNode outputExpression) {\n+    return null;", "originalCommit": "b73053ac24e30f1d743aea793b35732b645e0261", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcbdfd9ba02f116d5a85aa2c2faa0eb3e3903b1e", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/stats/HiveRelMdExpressionLineage.java b/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/stats/HiveRelMdExpressionLineage.java\nindex f33e5be862..12a34d2d9e 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/stats/HiveRelMdExpressionLineage.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/stats/HiveRelMdExpressionLineage.java\n\n@@ -50,6 +50,13 @@ private HiveRelMdExpressionLineage() {}\n     return BuiltInMetadata.ExpressionLineage.DEF;\n   }\n \n+  // Union returns NULL instead of actually determining the lineage because\n+  // Union may return multiple lineage expressions - one corresponding to each branch\n+  // this could cause exponential possible combinations of lineage expressions\n+  // as you go up in the operator tree.\n+  // As the possible number of expressions increases it could lead to OOM.\n+  // To prevent this UNION returns NULL.\n+  // sample query could be found in union_lineage.q\n   public Set<RexNode> getExpressionLineage(HiveUnion rel, RelMetadataQuery mq,\n       RexNode outputExpression) {\n     return null;\n"}}, {"oid": "fcbdfd9ba02f116d5a85aa2c2faa0eb3e3903b1e", "url": "https://github.com/apache/hive/commit/fcbdfd9ba02f116d5a85aa2c2faa0eb3e3903b1e", "message": "addressing review comment", "committedDate": "2020-10-23T17:19:15Z", "type": "commit"}]}