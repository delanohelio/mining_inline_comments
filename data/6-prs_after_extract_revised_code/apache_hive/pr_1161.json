{"pr_number": 1161, "pr_title": "HIVE-23638: Spotbugs issues in hive-common", "pr_createdAt": "2020-06-22T15:22:40Z", "pr_url": "https://github.com/apache/hive/pull/1161", "timeline": [{"oid": "e2b8b7be6c05ca64caabe875501c736f374c8b3b", "url": "https://github.com/apache/hive/commit/e2b8b7be6c05ca64caabe875501c736f374c8b3b", "message": "Fixing Connection and Vertex class equality and hashCode methods\n\nChange-Id: Ie991d3207e11e37c31570427ab02ed36873ba516", "committedDate": "2020-06-24T18:57:05Z", "type": "forcePushed"}, {"oid": "b6451d8969ff17aa19b8cc0ddff662bceba52444", "url": "https://github.com/apache/hive/commit/b6451d8969ff17aa19b8cc0ddff662bceba52444", "message": "Add deps on test-compile\n\nChange-Id: I2e34ec7e1c4aac838483bca8e6e711c90277835f", "committedDate": "2020-06-25T13:19:36Z", "type": "forcePushed"}, {"oid": "ac749f8353e80df4a1c5fb1693013c4115038ddd", "url": "https://github.com/apache/hive/commit/ac749f8353e80df4a1c5fb1693013c4115038ddd", "message": "Done with correctness -- nullchecks\n\nChange-Id: I07e2f8ad6845c36df9ca164e50dcc892da66331b", "committedDate": "2020-06-25T21:18:31Z", "type": "commit"}, {"oid": "80306188341da65652cfc518918664bc9e5e8703", "url": "https://github.com/apache/hive/commit/80306188341da65652cfc518918664bc9e5e8703", "message": "Done with bad practice\n\nChange-Id: Ie53014bb5ae2300de53caa5d4cd3e9f3a933d5ef", "committedDate": "2020-06-25T21:18:31Z", "type": "commit"}, {"oid": "42ba9f22ff47fef25cbcd8a72b52c81f9cdbf1c9", "url": "https://github.com/apache/hive/commit/42ba9f22ff47fef25cbcd8a72b52c81f9cdbf1c9", "message": "Done with StandardCharsets.UTF_8\n\nChange-Id: Ibbd533219739d751ada573bb69ff738578a5f4ff", "committedDate": "2020-06-25T21:18:31Z", "type": "commit"}, {"oid": "725cc0f50d30e5e0b1231321b6cee53a2b613bfe", "url": "https://github.com/apache/hive/commit/725cc0f50d30e5e0b1231321b6cee53a2b613bfe", "message": "Done with mutable variables\n\nChange-Id: I65a90586acd61d587c466b5a2a0d6f442f9b15fe", "committedDate": "2020-06-25T21:18:31Z", "type": "commit"}, {"oid": "3c44dd17a6e4aed95e024a5701d95c48a1d96cf4", "url": "https://github.com/apache/hive/commit/3c44dd17a6e4aed95e024a5701d95c48a1d96cf4", "message": "Done with sync\n\nChange-Id: I98fe0b3dafe477c96c8bd7793dec0df0ed45618a", "committedDate": "2020-06-25T21:18:31Z", "type": "commit"}, {"oid": "2db5f71febec42ada87c1e28ece0cad30770c30c", "url": "https://github.com/apache/hive/commit/2db5f71febec42ada87c1e28ece0cad30770c30c", "message": "Done with strings\n\nChange-Id: I6259a538542cf3fa1ebb37ff20d8ebce75e7068e", "committedDate": "2020-06-25T21:18:31Z", "type": "commit"}, {"oid": "173a3c600fa23c9e6dd741be855716c08d6a6947", "url": "https://github.com/apache/hive/commit/173a3c600fa23c9e6dd741be855716c08d6a6947", "message": "Done with dodgy code\n\nChange-Id: I89399b8c050202d4981b5aef442d49d03399b815", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "4b558c98f67b5852cdb5b6a72c8b78bce570b7ee", "url": "https://github.com/apache/hive/commit/4b558c98f67b5852cdb5b6a72c8b78bce570b7ee", "message": "Removing spotbugs-annotation dependency -- using internal interface instead\n\nChange-Id: I6a431565149f92b45c8529ea1121f3f225e3879a", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "898c9c3d716b0e7da97291bb245455a10159adf8", "url": "https://github.com/apache/hive/commit/898c9c3d716b0e7da97291bb245455a10159adf8", "message": "RangerLoadBegin fix import SupressFBWarnings\n\nChange-Id: If4d9807b265adc39d3f775d3ce927dba9cc2b576", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "90476a26a140adbf001eae31c59dd8a6e3564f6d", "url": "https://github.com/apache/hive/commit/90476a26a140adbf001eae31c59dd8a6e3564f6d", "message": "RangerDumpBegin fix import SupressFBWarnings\n\nChange-Id: I61bc91704969e8e377199852142292dad6d658bc", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "d15e65b19fa89b08010abc0f145ae6715b90166a", "url": "https://github.com/apache/hive/commit/d15e65b19fa89b08010abc0f145ae6715b90166a", "message": "More import fixes\n\nChange-Id: Ic391e5485340d989ed6f095c48c66ab98334a7d2", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "99f21bb42d7c1b258f5c34b86e71777978e31919", "url": "https://github.com/apache/hive/commit/99f21bb42d7c1b258f5c34b86e71777978e31919", "message": "Done with spotbug fixes\n\nChange-Id: I9d416fa795763e0c5604a871769ea44d72f836c6", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "8fb518adee2385fd69770805ed417ea60b3e4097", "url": "https://github.com/apache/hive/commit/8fb518adee2385fd69770805ed417ea60b3e4097", "message": "Adding to Jenkinsfile\n\nChange-Id: I154a65399a7195acf5db9d499223434e543e0fe2", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "852612294f7e9573744347db8544847f6619107e", "url": "https://github.com/apache/hive/commit/852612294f7e9573744347db8544847f6619107e", "message": "Do not force dependencies\n\nChange-Id: I75f69f232daa6a6c9882a95d036383d483cf5dc1", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "bf519fb70070e65cd83c64ce04992248e3c04fdd", "url": "https://github.com/apache/hive/commit/bf519fb70070e65cd83c64ce04992248e3c04fdd", "message": "Fixing Connection and Vertex class equality and hashCode methods\n\nChange-Id: Ie991d3207e11e37c31570427ab02ed36873ba516", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "02c206fa41ebd9b9973eedcb185e61cb52713c82", "url": "https://github.com/apache/hive/commit/02c206fa41ebd9b9973eedcb185e61cb52713c82", "message": "Fix missing AL headers\n\nChange-Id: I118629381344863f96f3c8000b53b29b2147a8a3", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "285e08f0979003f897db88e280a3267c5256c316", "url": "https://github.com/apache/hive/commit/285e08f0979003f897db88e280a3267c5256c316", "message": "Add deps on test-compile\n\nChange-Id: I2e34ec7e1c4aac838483bca8e6e711c90277835f", "committedDate": "2020-06-25T21:18:32Z", "type": "commit"}, {"oid": "285e08f0979003f897db88e280a3267c5256c316", "url": "https://github.com/apache/hive/commit/285e08f0979003f897db88e280a3267c5256c316", "message": "Add deps on test-compile\n\nChange-Id: I2e34ec7e1c4aac838483bca8e6e711c90277835f", "committedDate": "2020-06-25T21:18:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MzQ4OQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r446983489", "bodyText": "So, I understand why this would be removed from a find-bugs perspective (this is a no-op), but this is actually an all around bug.  This should be:\n// for dirs user needs execute privileges as well\nFsAction dirActionNeeded = (isDir) ? action.and(FsAction.EXECUTE) : action;", "author": "belugabehr", "createdAt": "2020-06-29T13:46:02Z", "path": "common/src/java/org/apache/hadoop/hive/common/FileUtils.java", "diffHunk": "@@ -483,12 +483,6 @@ public static boolean isActionPermittedForFileHierarchy(FileSystem fs, FileStatu\n       String userName, FsAction action, boolean recurse) throws Exception {\n     boolean isDir = fileStatus.isDir();\n \n-    FsAction dirActionNeeded = action;\n-    if (isDir) {\n-      // for dirs user needs execute privileges as well\n-      dirActionNeeded.and(FsAction.EXECUTE);\n-    }\n-", "originalCommit": "285e08f0979003f897db88e280a3267c5256c316", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "chunk": "diff --git a/common/src/java/org/apache/hadoop/hive/common/FileUtils.java b/common/src/java/org/apache/hadoop/hive/common/FileUtils.java\nindex 778e5986c4..2db5ca094e 100644\n--- a/common/src/java/org/apache/hadoop/hive/common/FileUtils.java\n+++ b/common/src/java/org/apache/hadoop/hive/common/FileUtils.java\n\n@@ -479,9 +480,13 @@ public static boolean isActionPermittedForFileHierarchy(FileSystem fs, FileStatu\n     return isActionPermittedForFileHierarchy(fs,fileStatus,userName, action, true);\n   }\n \n+  @SuppressFBWarnings(value = \"DLS_DEAD_LOCAL_STORE\", justification = \"Intended, dir privilege all-around bug\")\n   public static boolean isActionPermittedForFileHierarchy(FileSystem fs, FileStatus fileStatus,\n       String userName, FsAction action, boolean recurse) throws Exception {\n-    boolean isDir = fileStatus.isDir();\n+    boolean isDir = fileStatus.isDirectory();\n+\n+    // for dirs user needs execute privileges as well\n+    FsAction dirActionNeeded = (isDir) ? action.and(FsAction.EXECUTE) : action;\n \n     List<FileStatus> subDirsToCheck = null;\n     if (isDir && recurse) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NzE2NQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r446987165", "bodyText": "Please change this to just use String#join and more human friendly.\nSet<String> engines = new HashSet<>(ConfVars.HIVE_EXECUTION_ENGINE.getValidStringValues());\nboolean removedMR = engines.remove(\"mr\");\nLOG.debug(\"Found and removed MapReduce engine from list of valid execution engines: {}\", removedMR);\nreturn String.join(\", \", engines);", "author": "belugabehr", "createdAt": "2020-06-29T13:51:02Z", "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -6475,17 +6477,17 @@ private static boolean isAllowed(Configuration conf, ConfVars setting) {\n   }\n \n   public static String getNonMrEngines() {\n-    String result = StringUtils.EMPTY;\n+    StringBuffer result = new StringBuffer();\n     for (String s : ConfVars.HIVE_EXECUTION_ENGINE.getValidStringValues()) {\n       if (\"mr\".equals(s)) {\n         continue;\n       }\n-      if (!result.isEmpty()) {\n-        result += \", \";\n+      if (result.length() != 0) {\n+        result.append(\", \");\n       }\n-      result += s;\n+      result.append(s);\n     }\n-    return result;\n+    return result.toString();", "originalCommit": "285e08f0979003f897db88e280a3267c5256c316", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "chunk": "diff --git a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\nindex 9d8dfc37f6..93bc7f385f 100644\n--- a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\n+++ b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\n\n@@ -6477,17 +6477,11 @@ private static boolean isAllowed(Configuration conf, ConfVars setting) {\n   }\n \n   public static String getNonMrEngines() {\n-    StringBuffer result = new StringBuffer();\n-    for (String s : ConfVars.HIVE_EXECUTION_ENGINE.getValidStringValues()) {\n-      if (\"mr\".equals(s)) {\n-        continue;\n-      }\n-      if (result.length() != 0) {\n-        result.append(\", \");\n-      }\n-      result.append(s);\n-    }\n-    return result.toString();\n+    Set<String> engines = new HashSet<>(ConfVars.HIVE_EXECUTION_ENGINE.getValidStringValues());\n+    engines.remove(\"mr\");\n+    String validNonMrEngines = String.join(\", \", engines);\n+    LOG.debug(\"Valid non-MapReduce execution engines: {}\", validNonMrEngines);\n+    return validNonMrEngines;\n   }\n \n   public static String generateMrDeprecationWarning() {\n"}}, {"oid": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "url": "https://github.com/apache/hive/commit/9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "message": "Addressing PR comments\n\nChange-Id: I5ba408bc1494bb14cf9ed8622af2c16cc3de183d", "committedDate": "2020-07-01T12:38:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MDg1MQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r450290851", "bodyText": "this change will leave the file registered in the shutdownmanager in case the file was already deleted", "author": "kgyrtkirk", "createdAt": "2020-07-06T15:12:05Z", "path": "common/src/java/org/apache/hadoop/hive/common/FileUtils.java", "diffHunk": "@@ -926,8 +925,7 @@ public static File createLocalDirsTempFile(Configuration conf, String prefix, St\n    * delete a temporary file and remove it from delete-on-exit hook.\n    */\n   public static boolean deleteTmpFile(File tempFile) {\n-    if (tempFile != null) {\n-      tempFile.delete();\n+    if (tempFile != null && tempFile.delete()) {", "originalCommit": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4NzcwOQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r451487709", "bodyText": "Good catch, fixed", "author": "pgaref", "createdAt": "2020-07-08T12:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MDg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9de5b6de258c4b8349e07759c3f396a4d31857f6", "chunk": "diff --git a/common/src/java/org/apache/hadoop/hive/common/FileUtils.java b/common/src/java/org/apache/hadoop/hive/common/FileUtils.java\nindex 2db5ca094e..142d779641 100644\n--- a/common/src/java/org/apache/hadoop/hive/common/FileUtils.java\n+++ b/common/src/java/org/apache/hadoop/hive/common/FileUtils.java\n\n@@ -924,8 +925,10 @@ public static File createLocalDirsTempFile(Configuration conf, String prefix, St\n   /**\n    * delete a temporary file and remove it from delete-on-exit hook.\n    */\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", justification = \"Intended\")\n   public static boolean deleteTmpFile(File tempFile) {\n-    if (tempFile != null && tempFile.delete()) {\n+    if (tempFile != null) {\n+      tempFile.delete();\n       ShutdownHookManager.cancelDeleteOnExit(tempFile);\n       return true;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MzI2OQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r450293269", "bodyText": "I know it's probably out of scope in this patch - but in case the value is already \"interned\" - then it will not change; at a cost of a conditional we can skip the hash lookup(put) as well", "author": "kgyrtkirk", "createdAt": "2020-07-06T15:15:40Z", "path": "common/src/java/org/apache/hadoop/hive/common/StringInternUtils.java", "diffHunk": "@@ -135,10 +135,10 @@ public static Path internUriStringsInPath(Path path) {\n \n   public static <K> Map<K, String> internValuesInMap(Map<K, String> map) {\n     if (map != null) {\n-      for (K key : map.keySet()) {\n-        String value = map.get(key);\n+      for (Map.Entry<K, String> entry : map.entrySet()) {\n+        String value = entry.getValue();\n         if (value != null) {\n-          map.put(key, value.intern());\n+          map.put(entry.getKey(), value.intern());", "originalCommit": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4ODc2Nw==", "url": "https://github.com/apache/hive/pull/1161#discussion_r451488767", "bodyText": "Nice idea! I followed similar logic to check if values are already interned in all helper methods in StringInternUtils class", "author": "pgaref", "createdAt": "2020-07-08T12:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MzI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9de5b6de258c4b8349e07759c3f396a4d31857f6", "chunk": "diff --git a/common/src/java/org/apache/hadoop/hive/common/StringInternUtils.java b/common/src/java/org/apache/hadoop/hive/common/StringInternUtils.java\nindex 008e312554..0e6c3850ee 100644\n--- a/common/src/java/org/apache/hadoop/hive/common/StringInternUtils.java\n+++ b/common/src/java/org/apache/hadoop/hive/common/StringInternUtils.java\n\n@@ -137,7 +152,8 @@ public static Path internUriStringsInPath(Path path) {\n     if (map != null) {\n       for (Map.Entry<K, String> entry : map.entrySet()) {\n         String value = entry.getValue();\n-        if (value != null) {\n+        // Intern values only when they are not part of the String pool already\n+        if (value != null && value != value.intern()) {\n           map.put(entry.getKey(), value.intern());\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5NTIwOQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r450295209", "bodyText": "nice catch! :D", "author": "kgyrtkirk", "createdAt": "2020-07-06T15:18:34Z", "path": "common/src/java/org/apache/hadoop/hive/common/type/HiveVarchar.java", "diffHunk": "@@ -62,6 +62,9 @@ public boolean equals(Object rhs) {\n     if (rhs == this) {\n       return true;\n     }\n-    return this.getValue().equals(((HiveVarchar)rhs).getValue());\n+    if (rhs instanceof HiveVarchar) {\n+      return this.getValue().equals(((HiveVarchar) rhs).getValue());", "originalCommit": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5OTI5OQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r450299299", "bodyText": "I think this should be something else than null - did the old behaviour accept null as a valid path? I believe Files.isDirectory(null) returned false....\nlooking from the other end: I don't think null should be accepted as a \"writeabledirectory\"", "author": "kgyrtkirk", "createdAt": "2020-07-06T15:24:36Z", "path": "common/src/java/org/apache/hadoop/hive/conf/Validator.java", "diffHunk": "@@ -357,14 +357,15 @@ public String validate(String value) {\n       final Path path = FileSystems.getDefault().getPath(value);\n       if (path == null && value != null) {\n         return String.format(\"Path '%s' provided could not be located.\", value);\n-      }\n-      final boolean isDir = Files.isDirectory(path);\n-      final boolean isWritable = Files.isWritable(path);\n-      if (!isDir) {\n-        return String.format(\"Path '%s' provided is not a directory.\", value);\n-      }\n-      if (!isWritable) {\n-        return String.format(\"Path '%s' provided is not writable.\", value);\n+      } else if (path != null) {\n+        final boolean isDir = Files.isDirectory(path);\n+        final boolean isWritable = Files.isWritable(path);\n+        if (!isDir) {\n+          return String.format(\"Path '%s' provided is not a directory.\", value);\n+        }\n+        if (!isWritable) {\n+          return String.format(\"Path '%s' provided is not writable.\", value);\n+        }\n       }\n       return null;", "originalCommit": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4OTI1OA==", "url": "https://github.com/apache/hive/pull/1161#discussion_r451489258", "bodyText": "Refactored the code to return early when the argument is actually null, the following logic is now simplified to Null and non null path", "author": "pgaref", "createdAt": "2020-07-08T12:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5OTI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9de5b6de258c4b8349e07759c3f396a4d31857f6", "chunk": "diff --git a/common/src/java/org/apache/hadoop/hive/conf/Validator.java b/common/src/java/org/apache/hadoop/hive/conf/Validator.java\nindex a989d9f77a..3baf832065 100644\n--- a/common/src/java/org/apache/hadoop/hive/conf/Validator.java\n+++ b/common/src/java/org/apache/hadoop/hive/conf/Validator.java\n\n@@ -354,10 +354,11 @@ private String sizeString(long size) {\n \n     @Override\n     public String validate(String value) {\n+      if (value == null) return null;\n       final Path path = FileSystems.getDefault().getPath(value);\n-      if (path == null && value != null) {\n+      if (path == null) {\n         return String.format(\"Path '%s' provided could not be located.\", value);\n-      } else if (path != null) {\n+      } else {\n         final boolean isDir = Files.isDirectory(path);\n         final boolean isWritable = Files.isWritable(path);\n         if (!isDir) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMDE0MQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r450300141", "bodyText": "I think at some point we should probably introduce some rule to ensure that every file ends with a newline...but for now: could you add one here ? :D", "author": "kgyrtkirk", "createdAt": "2020-07-06T15:25:50Z", "path": "common/src/java/org/apache/hive/common/util/SuppressFBWarnings.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.common.util;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+@Retention(RetentionPolicy.CLASS)\n+public @interface SuppressFBWarnings {\n+    /**\n+     * The set of FindBugs warnings that are to be suppressed in\n+     * annotated element. The value can be a bug category, kind or pattern.\n+     *\n+     */\n+    String[] value() default {};\n+\n+    /**\n+     * Optional documentation of the reason why the warning is suppressed\n+     */\n+    String justification() default \"\";\n+}", "originalCommit": "9cbdaaf242f37119a96d68e7d8808b04ac86b5e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4OTM4MA==", "url": "https://github.com/apache/hive/pull/1161#discussion_r451489380", "bodyText": "Sure, done :)", "author": "pgaref", "createdAt": "2020-07-08T12:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMDE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9de5b6de258c4b8349e07759c3f396a4d31857f6", "chunk": "diff --git a/common/src/java/org/apache/hive/common/util/SuppressFBWarnings.java b/common/src/java/org/apache/hive/common/util/SuppressFBWarnings.java\nindex 6cb3965b26..5aef2943f9 100644\n--- a/common/src/java/org/apache/hive/common/util/SuppressFBWarnings.java\n+++ b/common/src/java/org/apache/hive/common/util/SuppressFBWarnings.java\n\n@@ -34,4 +34,4 @@\n      * Optional documentation of the reason why the warning is suppressed\n      */\n     String justification() default \"\";\n-}\n\\ No newline at end of file\n+}\n"}}, {"oid": "9de5b6de258c4b8349e07759c3f396a4d31857f6", "url": "https://github.com/apache/hive/commit/9de5b6de258c4b8349e07759c3f396a4d31857f6", "message": "Addressing more comments and adding String intern optimizations\n\nChange-Id: I3cccbbd8889eef7868931b24462af2b6f188c253", "committedDate": "2020-07-08T11:59:24Z", "type": "commit"}, {"oid": "dbed3ff5e69d81cedae9c1254a90326d26a19d63", "url": "https://github.com/apache/hive/commit/dbed3ff5e69d81cedae9c1254a90326d26a19d63", "message": "Fix internStringsInList\n\nChange-Id: I0474f92f66ee53cca31f1f7d5c4b7520d4da8d94", "committedDate": "2020-07-08T23:14:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyODc5OQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r452028799", "bodyText": "the issue here was:\n\nmissing final\nnaming convention\n\nI don't think we need that static method...but no big deal", "author": "kgyrtkirk", "createdAt": "2020-07-09T07:48:55Z", "path": "common/src/java/org/apache/hadoop/hive/common/jsonexplain/DagJsonParserUtils.java", "diffHunk": "@@ -26,9 +28,13 @@\n \n public class DagJsonParserUtils {\n \n-  public static List<String> OperatorNoStats = Arrays.asList(new String[] { \"File Output Operator\",\n+  private static final List<String> operatorNoStats = Arrays.asList(new String[] { \"File Output Operator\",", "originalCommit": "dbed3ff5e69d81cedae9c1254a90326d26a19d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MzA3Ng==", "url": "https://github.com/apache/hive/pull/1161#discussion_r452193076", "bodyText": "Well, it kinda needs to be static as Op class is using it directly within getNameWithOpIdStats method", "author": "pgaref", "createdAt": "2020-07-09T12:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyODc5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjE0MQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r452032141", "bodyText": "it's not just \"spotbugs\" who don't like these method names :D\nit certainly out of scope of this patch - but I think they should be improved - could you open a jira for it? :)", "author": "kgyrtkirk", "createdAt": "2020-07-09T07:55:01Z", "path": "common/src/java/org/apache/hadoop/hive/ql/log/PerfLogger.java", "diffHunk": "@@ -133,6 +134,7 @@ public static void setPerfLogger(PerfLogger resetPerfLogger) {\n    * @param callerName the logging object to be used.\n    * @param method method or ID that identifies this perf log element.\n    */\n+  @SuppressFBWarnings(value = \"NM_METHOD_NAMING_CONVENTION\", justification = \"Intended\")\n   public void PerfLogBegin(String callerName, String method) {", "originalCommit": "dbed3ff5e69d81cedae9c1254a90326d26a19d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MzE5Mg==", "url": "https://github.com/apache/hive/pull/1161#discussion_r452193192", "bodyText": "Sure, opened HIVE-23823 for tracking this", "author": "pgaref", "createdAt": "2020-07-09T12:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjE0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExMDUzMQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r452110531", "bodyText": "interesting choices were made when this class was created...\nthe most important fields seems to be String name, JSONObject vertexObject, Stage stage\npassing the parser in the constructor is an interesting idea...\nalthough this equals resorts to identity comparision - I don't see that so out of scope for this class...", "author": "kgyrtkirk", "createdAt": "2020-07-09T10:09:28Z", "path": "common/src/java/org/apache/hadoop/hive/common/jsonexplain/Vertex.java", "diffHunk": "@@ -308,6 +309,16 @@ public void setType(String type) {\n     this.edgeType = this.parser.mapEdgeType(type);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    return  super.equals(o);", "originalCommit": "dbed3ff5e69d81cedae9c1254a90326d26a19d63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMDU1OQ==", "url": "https://github.com/apache/hive/pull/1161#discussion_r452200559", "bodyText": "You are right comparison could be implemented as part of the class (added that part).\nRegarding the parser I agree it should not be a field, only given as parameter where needed -- there are more places where we follow this weird logic and should probably be addressed all together: \n  \n    \n      hive/common/src/java/org/apache/hadoop/hive/common/jsonexplain/Stage.java\n    \n    \n         Line 52\n      in\n      ba0217f\n    \n    \n    \n    \n\n        \n          \n           public Stage(String name, DagJsonParser tezJsonParser) { \n        \n    \n  \n\n\nand\n\n  \n    \n      hive/common/src/java/org/apache/hadoop/hive/common/jsonexplain/Op.java\n    \n    \n         Line 58\n      in\n      99f21bb\n    \n    \n    \n    \n\n        \n          \n           Map<String, String> attrs, JSONObject opObject, Vertex vertex, DagJsonParser tezJsonParser)", "author": "pgaref", "createdAt": "2020-07-09T13:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExMDUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2da4ff34d83e64db0847dce9ff51cdee161699d2", "chunk": "diff --git a/common/src/java/org/apache/hadoop/hive/common/jsonexplain/Vertex.java b/common/src/java/org/apache/hadoop/hive/common/jsonexplain/Vertex.java\nindex f30c7d4f79..008726aa45 100644\n--- a/common/src/java/org/apache/hadoop/hive/common/jsonexplain/Vertex.java\n+++ b/common/src/java/org/apache/hadoop/hive/common/jsonexplain/Vertex.java\n\n@@ -311,12 +310,17 @@ public void setType(String type) {\n \n   @Override\n   public boolean equals(Object o) {\n-    return  super.equals(o);\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    Vertex vertex = (Vertex) o;\n+    return Objects.equals(name, vertex.name) &&\n+            Objects.equals(stage, vertex.stage) &&\n+            Objects.equals(vertexObject, vertex.vertexObject);\n   }\n \n   @Override\n   public int hashCode() {\n-    return super.hashCode();\n+    return Objects.hash(name, stage, vertexObject);\n   }\n \n   // The following code should be gone after HIVE-11075 using topological order\n"}}, {"oid": "2da4ff34d83e64db0847dce9ff51cdee161699d2", "url": "https://github.com/apache/hive/commit/2da4ff34d83e64db0847dce9ff51cdee161699d2", "message": "Vertex class comparisons by overriding equals and hashCode methods\n\nChange-Id: I89ff965a95f1cbfb6f1e19dd157f948dc1dd0c68", "committedDate": "2020-07-09T13:01:13Z", "type": "commit"}]}