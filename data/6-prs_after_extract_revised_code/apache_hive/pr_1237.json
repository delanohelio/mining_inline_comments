{"pr_number": 1237, "pr_title": "HIVE-23618: Enable event replication for default/check constraints", "pr_createdAt": "2020-07-10T08:40:04Z", "pr_url": "https://github.com/apache/hive/pull/1237", "timeline": [{"oid": "fa5eddaa7862709a25051330f7420cfabcd50c50", "url": "https://github.com/apache/hive/commit/fa5eddaa7862709a25051330f7420cfabcd50c50", "message": "Fix indentation and add license", "committedDate": "2020-07-12T03:56:54Z", "type": "forcePushed"}, {"oid": "1998c3f3c5579b4e869f35823a530a3f083d61cd", "url": "https://github.com/apache/hive/commit/1998c3f3c5579b4e869f35823a530a3f083d61cd", "message": "Fix indentation and add license", "committedDate": "2020-07-14T18:17:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMjA0OA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r458632048", "bodyText": "checkstyle error. Please fix", "author": "aasha", "createdAt": "2020-07-22T08:40:56Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -31,20 +31,7 @@\n import org.apache.hadoop.hive.metastore.InjectableBehaviourObjectStore.BehaviourInjection;\n import org.apache.hadoop.hive.metastore.MetaStoreTestUtils;\n import org.apache.hadoop.hive.metastore.PersistenceManagerProvider;\n-import org.apache.hadoop.hive.metastore.api.Database;\n-import org.apache.hadoop.hive.metastore.api.ForeignKeysRequest;\n-import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n-import org.apache.hadoop.hive.metastore.api.NotNullConstraintsRequest;\n-import org.apache.hadoop.hive.metastore.api.NotificationEvent;\n-import org.apache.hadoop.hive.metastore.api.NotificationEventResponse;\n-import org.apache.hadoop.hive.metastore.api.Partition;\n-import org.apache.hadoop.hive.metastore.api.PrimaryKeysRequest;\n-import org.apache.hadoop.hive.metastore.api.SQLForeignKey;\n-import org.apache.hadoop.hive.metastore.api.SQLNotNullConstraint;\n-import org.apache.hadoop.hive.metastore.api.SQLPrimaryKey;\n-import org.apache.hadoop.hive.metastore.api.SQLUniqueConstraint;\n-import org.apache.hadoop.hive.metastore.api.Table;\n-import org.apache.hadoop.hive.metastore.api.UniqueConstraintsRequest;\n+import org.apache.hadoop.hive.metastore.api.*;", "originalCommit": "1998c3f3c5579b4e869f35823a530a3f083d61cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyMDQ1OA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r477220458", "bodyText": "done.", "author": "adesh-rao", "createdAt": "2020-08-26T11:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMjA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\nindex 09d68bc6cd..a8b7a5d3c7 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n\n@@ -31,7 +32,24 @@\n import org.apache.hadoop.hive.metastore.InjectableBehaviourObjectStore.BehaviourInjection;\n import org.apache.hadoop.hive.metastore.MetaStoreTestUtils;\n import org.apache.hadoop.hive.metastore.PersistenceManagerProvider;\n-import org.apache.hadoop.hive.metastore.api.*;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.hadoop.hive.metastore.api.CheckConstraintsRequest;\n+import org.apache.hadoop.hive.metastore.api.DefaultConstraintsRequest;\n+import org.apache.hadoop.hive.metastore.api.ForeignKeysRequest;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.hadoop.hive.metastore.api.NotNullConstraintsRequest;\n+import org.apache.hadoop.hive.metastore.api.NotificationEvent;\n+import org.apache.hadoop.hive.metastore.api.NotificationEventResponse;\n+import org.apache.hadoop.hive.metastore.api.Partition;\n+import org.apache.hadoop.hive.metastore.api.PrimaryKeysRequest;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;\n+import org.apache.hadoop.hive.metastore.api.SQLDefaultConstraint;\n+import org.apache.hadoop.hive.metastore.api.SQLForeignKey;\n+import org.apache.hadoop.hive.metastore.api.SQLNotNullConstraint;\n+import org.apache.hadoop.hive.metastore.api.SQLPrimaryKey;\n+import org.apache.hadoop.hive.metastore.api.SQLUniqueConstraint;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.metastore.api.UniqueConstraintsRequest;\n import org.apache.hadoop.hive.metastore.conf.MetastoreConf;\n import org.apache.hadoop.hive.metastore.messaging.MessageBuilder;\n import org.apache.hadoop.hive.metastore.messaging.MessageEncoder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4OTIwOQ==", "url": "https://github.com/apache/hive/pull/1237#discussion_r458689209", "bodyText": "Please add comments and unit tests for these classes", "author": "aasha", "createdAt": "2020-07-22T10:18:55Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.parse.repl.load.message;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.hadoop.hive.common.TableName;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;\n+import org.apache.hadoop.hive.metastore.messaging.AddCheckConstraintMessage;\n+import org.apache.hadoop.hive.ql.ddl.DDLWork;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.Constraints;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.add.AlterTableAddConstraintDesc;\n+import org.apache.hadoop.hive.ql.exec.Task;\n+import org.apache.hadoop.hive.ql.exec.TaskFactory;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+\n+public class AddCheckConstraintHandler extends AbstractMessageHandler {", "originalCommit": "1998c3f3c5579b4e869f35823a530a3f083d61cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxODk2Mg==", "url": "https://github.com/apache/hive/pull/1237#discussion_r477218962", "bodyText": "Added comments.\nI couldn't find any existing unit tests for other *Handler classes, and since TestReplicationScenarios in itests is covering this end-to-end, I skipped unit tests.", "author": "adesh-rao", "createdAt": "2020-08-26T11:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4OTIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java\nindex 96cfbc24c6..32da4aedb1 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java\n\n@@ -31,6 +31,10 @@\n import org.apache.hadoop.hive.ql.exec.TaskFactory;\n import org.apache.hadoop.hive.ql.parse.SemanticException;\n \n+/**\n+ * AddCheckConstraintHandler\n+ * Target(Load) side handler for add check constraint event.\n+ */\n public class AddCheckConstraintHandler extends AbstractMessageHandler {\n   @Override\n   public List<Task<?>> handle(Context context)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMTI0OQ==", "url": "https://github.com/apache/hive/pull/1237#discussion_r467831249", "bodyText": "Add similar tests for external tables.", "author": "aasha", "createdAt": "2020-08-10T11:06:09Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3060,13 +3049,19 @@ public void testConstraints() throws IOException {\n       assertEquals(fks.size(), 2);\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n       assertEquals(nns.size(), 1);\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));", "originalCommit": "1998c3f3c5579b4e869f35823a530a3f083d61cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxODAxNw==", "url": "https://github.com/apache/hive/pull/1237#discussion_r477218017", "bodyText": "External tables don't support default/check constraints yet. So, skipped adding for external table.", "author": "adesh-rao", "createdAt": "2020-08-26T11:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMTI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\nindex 09d68bc6cd..a8b7a5d3c7 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n\n@@ -3050,9 +3202,7 @@ public void testConstraints() throws IOException {\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n       assertEquals(nns.size(), 1);\n       List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));\n-      assertEquals(cks.size(), 1);\n-      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl8\"));\n-      assertEquals(dks.size(), 1);\n+      assertEquals(cks.size(), 2);\n     } catch (TException te) {\n       assertNull(te);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMjA4NA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r467832084", "bodyText": "Add multiple check constraints for the same table and test if all of them are replicated.", "author": "aasha", "createdAt": "2020-08-10T11:08:00Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3060,13 +3049,19 @@ public void testConstraints() throws IOException {\n       assertEquals(fks.size(), 2);\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n       assertEquals(nns.size(), 1);\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));\n+      assertEquals(cks.size(), 1);\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl8\"));\n+      assertEquals(dks.size(), 1);\n     } catch (TException te) {\n       assertNull(te);\n     }\n \n     run(\"CREATE TABLE \" + dbName + \".tbl4(a string, b string, primary key (a, b) disable novalidate rely)\", driver);\n     run(\"CREATE TABLE \" + dbName + \".tbl5(a string, b string, foreign key (a, b) references \" + dbName + \".tbl4(a, b) disable novalidate)\", driver);\n     run(\"CREATE TABLE \" + dbName + \".tbl6(a string, b string not null disable, unique (a) disable)\", driver);\n+    run(\"CREATE TABLE \" + dbName + \".tbl9(a string, price double CHECK (price > 0 AND price <= 1000))\", driver);", "originalCommit": "1998c3f3c5579b4e869f35823a530a3f083d61cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyMDU0MA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r477220540", "bodyText": "done.", "author": "adesh-rao", "createdAt": "2020-08-26T11:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMjA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\nindex 09d68bc6cd..a8b7a5d3c7 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n\n@@ -3050,9 +3202,7 @@ public void testConstraints() throws IOException {\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n       assertEquals(nns.size(), 1);\n       List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));\n-      assertEquals(cks.size(), 1);\n-      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl8\"));\n-      assertEquals(dks.size(), 1);\n+      assertEquals(cks.size(), 2);\n     } catch (TException te) {\n       assertNull(te);\n     }\n"}}, {"oid": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "url": "https://github.com/apache/hive/commit/f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "message": "fix review comments", "committedDate": "2020-08-26T11:05:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MTY3OA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488391678", "bodyText": "Shall use \"cols\" here.", "author": "sankarh", "createdAt": "2020-09-15T05:19:25Z", "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -703,6 +709,49 @@ public void onAddNotNullConstraint(AddNotNullConstraintEvent addNotNullConstrain\n     }\n   }\n \n+  /***\n+   * @param addDefaultConstraintEvent add default constraint event\n+   * @throws MetaException\n+   */\n+  @Override\n+  public void onAddDefaultConstraint(AddDefaultConstraintEvent addDefaultConstraintEvent) throws MetaException {\n+    List<SQLDefaultConstraint> cols = addDefaultConstraintEvent.getDefaultConstraintCols();\n+    if (cols.size() > 0) {\n+      AddDefaultConstraintMessage msg = MessageBuilder.getInstance()\n+        .buildAddDefaultConstraintMessage(addDefaultConstraintEvent.getDefaultConstraintCols());", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MDc4OA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r492640788", "bodyText": "done. Thought changed it to colsInMsg", "author": "adesh-rao", "createdAt": "2020-09-22T10:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAzNDkwOQ==", "url": "https://github.com/apache/hive/pull/1237#discussion_r494034909", "bodyText": "I meant, use cols instead of addDefaultConstraintEvent.getDefaultConstraintCols().", "author": "sankarh", "createdAt": "2020-09-24T04:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MTY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java\nindex 34c5ca377f..6041af741e 100644\n--- a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java\n+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java\n\n@@ -717,11 +717,11 @@ public void onAddNotNullConstraint(AddNotNullConstraintEvent addNotNullConstrain\n   public void onAddDefaultConstraint(AddDefaultConstraintEvent addDefaultConstraintEvent) throws MetaException {\n     List<SQLDefaultConstraint> cols = addDefaultConstraintEvent.getDefaultConstraintCols();\n     if (cols.size() > 0) {\n-      AddDefaultConstraintMessage msg = MessageBuilder.getInstance()\n-        .buildAddDefaultConstraintMessage(addDefaultConstraintEvent.getDefaultConstraintCols());\n+      AddDefaultConstraintMessage colsInMsg = MessageBuilder.getInstance()\n+        .buildAddDefaultConstraintMessage(cols);\n       NotificationEvent event =\n         new NotificationEvent(0, now(), EventType.ADD_DEFAULTCONSTRAINT.toString(),\n-          msgEncoder.getSerializer().serialize(msg)\n+          msgEncoder.getSerializer().serialize(colsInMsg)\n         );\n       event.setCatName(cols.get(0).isSetCatName() ? cols.get(0).getCatName() : DEFAULT_CATALOG_NAME);\n       event.setDbName(cols.get(0).getTable_db());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MjAyMg==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488392022", "bodyText": "Use \"cols\".", "author": "sankarh", "createdAt": "2020-09-15T05:20:29Z", "path": "hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java", "diffHunk": "@@ -703,6 +709,49 @@ public void onAddNotNullConstraint(AddNotNullConstraintEvent addNotNullConstrain\n     }\n   }\n \n+  /***\n+   * @param addDefaultConstraintEvent add default constraint event\n+   * @throws MetaException\n+   */\n+  @Override\n+  public void onAddDefaultConstraint(AddDefaultConstraintEvent addDefaultConstraintEvent) throws MetaException {\n+    List<SQLDefaultConstraint> cols = addDefaultConstraintEvent.getDefaultConstraintCols();\n+    if (cols.size() > 0) {\n+      AddDefaultConstraintMessage msg = MessageBuilder.getInstance()\n+        .buildAddDefaultConstraintMessage(addDefaultConstraintEvent.getDefaultConstraintCols());\n+      NotificationEvent event =\n+        new NotificationEvent(0, now(), EventType.ADD_DEFAULTCONSTRAINT.toString(),\n+          msgEncoder.getSerializer().serialize(msg)\n+        );\n+      event.setCatName(cols.get(0).isSetCatName() ? cols.get(0).getCatName() : DEFAULT_CATALOG_NAME);\n+      event.setDbName(cols.get(0).getTable_db());\n+      event.setTableName(cols.get(0).getTable_name());\n+      process(event, addDefaultConstraintEvent);\n+    }\n+  }\n+\n+  /***\n+   * @param addCheckConstraintEvent add check constraint event\n+   * @throws MetaException\n+   */\n+  @Override\n+  public void onAddCheckConstraint(AddCheckConstraintEvent addCheckConstraintEvent) throws MetaException {\n+    LOG.info(\"Inside DBNotification listener for check constraint.\");\n+    List<SQLCheckConstraint> cols = addCheckConstraintEvent.getCheckConstraintCols();\n+    if (cols.size() > 0) {\n+      AddCheckConstraintMessage msg = MessageBuilder.getInstance()\n+        .buildAddCheckConstraintMessage(addCheckConstraintEvent.getCheckConstraintCols());", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MDkwMQ==", "url": "https://github.com/apache/hive/pull/1237#discussion_r492640901", "bodyText": "done as above.", "author": "adesh-rao", "createdAt": "2020-09-22T10:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MjAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAzNDk2OA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r494034968", "bodyText": "I meant, use cols instead of addCheckConstraintEvent.getCheckConstraintCols().", "author": "sankarh", "createdAt": "2020-09-24T04:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MjAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java\nindex 34c5ca377f..6041af741e 100644\n--- a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java\n+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java\n\n@@ -717,11 +717,11 @@ public void onAddNotNullConstraint(AddNotNullConstraintEvent addNotNullConstrain\n   public void onAddDefaultConstraint(AddDefaultConstraintEvent addDefaultConstraintEvent) throws MetaException {\n     List<SQLDefaultConstraint> cols = addDefaultConstraintEvent.getDefaultConstraintCols();\n     if (cols.size() > 0) {\n-      AddDefaultConstraintMessage msg = MessageBuilder.getInstance()\n-        .buildAddDefaultConstraintMessage(addDefaultConstraintEvent.getDefaultConstraintCols());\n+      AddDefaultConstraintMessage colsInMsg = MessageBuilder.getInstance()\n+        .buildAddDefaultConstraintMessage(cols);\n       NotificationEvent event =\n         new NotificationEvent(0, now(), EventType.ADD_DEFAULTCONSTRAINT.toString(),\n-          msgEncoder.getSerializer().serialize(msg)\n+          msgEncoder.getSerializer().serialize(colsInMsg)\n         );\n       event.setCatName(cols.get(0).isSetCatName() ? cols.get(0).getCatName() : DEFAULT_CATALOG_NAME);\n       event.setDbName(cols.get(0).getTable_db());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5NDYxOQ==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488394619", "bodyText": "nit: Variable name can be uniform nn -> ck", "author": "sankarh", "createdAt": "2020-09-15T05:29:34Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.parse.repl.load.message;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.hadoop.hive.common.TableName;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;\n+import org.apache.hadoop.hive.metastore.messaging.AddCheckConstraintMessage;\n+import org.apache.hadoop.hive.ql.ddl.DDLWork;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.Constraints;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.add.AlterTableAddConstraintDesc;\n+import org.apache.hadoop.hive.ql.exec.Task;\n+import org.apache.hadoop.hive.ql.exec.TaskFactory;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+\n+/**\n+ * AddCheckConstraintHandler\n+ * Target(Load) side handler for add check constraint event.\n+ */\n+public class AddCheckConstraintHandler extends AbstractMessageHandler {\n+  @Override\n+  public List<Task<?>> handle(Context context)\n+    throws SemanticException {\n+    AddCheckConstraintMessage msg = deserializer.getAddCheckConstraintMessage(context.dmd.getPayload());\n+\n+    List<SQLCheckConstraint> ccs;\n+    try {\n+      ccs = msg.getCheckConstraints();\n+    } catch (Exception e) {\n+      if (!(e instanceof SemanticException)){\n+        throw new SemanticException(\"Error reading message members\", e);\n+      } else {\n+        throw (SemanticException)e;\n+      }\n+    }\n+\n+    List<Task<?>> tasks = new ArrayList<Task<?>>();\n+    if (ccs.isEmpty()) {\n+      return tasks;\n+    }\n+\n+    final String actualDbName = context.isDbNameEmpty() ? ccs.get(0).getTable_db() : context.dbName;\n+    final String actualTblName = ccs.get(0).getTable_name();\n+    final TableName tName = TableName.fromString(actualTblName, null, actualDbName);\n+\n+    for (SQLCheckConstraint nn : ccs) {", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java\nindex 32da4aedb1..ce3316917c 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddCheckConstraintHandler.java\n\n@@ -61,9 +61,9 @@\n     final String actualTblName = ccs.get(0).getTable_name();\n     final TableName tName = TableName.fromString(actualTblName, null, actualDbName);\n \n-    for (SQLCheckConstraint nn : ccs) {\n-      nn.setTable_db(actualDbName);\n-      nn.setTable_name(actualTblName);\n+    for (SQLCheckConstraint ck : ccs) {\n+      ck.setTable_db(actualDbName);\n+      ck.setTable_name(actualTblName);\n     }\n \n     Constraints constraints = new Constraints(null, null, null, null, null, ccs);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5NTEwMg==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488395102", "bodyText": "nit: nn -> dc", "author": "sankarh", "createdAt": "2020-09-15T05:31:06Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddDefaultConstraintHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.parse.repl.load.message;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.hadoop.hive.common.TableName;\n+import org.apache.hadoop.hive.metastore.api.SQLDefaultConstraint;\n+import org.apache.hadoop.hive.metastore.messaging.AddDefaultConstraintMessage;\n+import org.apache.hadoop.hive.ql.ddl.DDLWork;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.Constraints;\n+import org.apache.hadoop.hive.ql.ddl.table.constraint.add.AlterTableAddConstraintDesc;\n+import org.apache.hadoop.hive.ql.exec.Task;\n+import org.apache.hadoop.hive.ql.exec.TaskFactory;\n+import org.apache.hadoop.hive.ql.parse.SemanticException;\n+/**\n+ * AddDefaultConstraintHandler\n+ * Target(Load) side handler for add default constraint event.\n+ */\n+public class AddDefaultConstraintHandler extends AbstractMessageHandler {\n+  @Override\n+  public List<Task<?>> handle(Context context)\n+    throws SemanticException {\n+    AddDefaultConstraintMessage msg = deserializer.getAddDefaultConstraintMessage(context.dmd.getPayload());\n+\n+    List<SQLDefaultConstraint> dcs;\n+    try {\n+      dcs = msg.getDefaultConstraints();\n+    } catch (Exception e) {\n+      if (!(e instanceof SemanticException)){\n+        throw new SemanticException(\"Error reading message members\", e);\n+      } else {\n+        throw (SemanticException)e;\n+      }\n+    }\n+\n+    List<Task<?>> tasks = new ArrayList<Task<?>>();\n+    if (dcs.isEmpty()) {\n+      return tasks;\n+    }\n+\n+    final String actualDbName = context.isDbNameEmpty() ? dcs.get(0).getTable_db() : context.dbName;\n+    final String actualTblName = dcs.get(0).getTable_name();\n+    final TableName tName = TableName.fromString(actualTblName, null, actualDbName);\n+\n+    for (SQLDefaultConstraint nn : dcs) {", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddDefaultConstraintHandler.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddDefaultConstraintHandler.java\nindex 7a6e0371af..b17126e9ed 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddDefaultConstraintHandler.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/AddDefaultConstraintHandler.java\n\n@@ -60,9 +60,9 @@\n     final String actualTblName = dcs.get(0).getTable_name();\n     final TableName tName = TableName.fromString(actualTblName, null, actualDbName);\n \n-    for (SQLDefaultConstraint nn : dcs) {\n-      nn.setTable_db(actualDbName);\n-      nn.setTable_name(actualTblName);\n+    for (SQLDefaultConstraint dc : dcs) {\n+      dc.setTable_db(actualDbName);\n+      dc.setTable_name(actualTblName);\n     }\n \n     Constraints constraints = new Constraints(null, null, null, null, dcs, null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMzc3Nw==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488423777", "bodyText": "nit: Use \"cc\" instead of \"ds\"", "author": "sankarh", "createdAt": "2020-09-15T06:44:56Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/events/AddCheckConstraintEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.metastore.events;\n+\n+import org.apache.hadoop.classification.InterfaceAudience;\n+import org.apache.hadoop.classification.InterfaceStability;\n+import org.apache.hadoop.hive.metastore.IHMSHandler;\n+import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;\n+\n+import java.util.List;\n+\n+@InterfaceAudience.Public\n+@InterfaceStability.Stable\n+public class AddCheckConstraintEvent extends ListenerEvent {\n+  private final List<SQLCheckConstraint> ds;", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/events/AddCheckConstraintEvent.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/events/AddCheckConstraintEvent.java\nindex 3088ac0bf3..465865d177 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/events/AddCheckConstraintEvent.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/events/AddCheckConstraintEvent.java\n\n@@ -28,15 +28,15 @@\n @InterfaceAudience.Public\n @InterfaceStability.Stable\n public class AddCheckConstraintEvent extends ListenerEvent {\n-  private final List<SQLCheckConstraint> ds;\n+  private final List<SQLCheckConstraint> cc;\n \n-  public AddCheckConstraintEvent(List<SQLCheckConstraint> ds, boolean status,\n+  public AddCheckConstraintEvent(List<SQLCheckConstraint> cc, boolean status,\n                                    IHMSHandler handler) {\n     super(status, handler);\n-    this.ds = ds;\n+    this.cc = cc;\n   }\n \n   public List<SQLCheckConstraint> getCheckConstraintCols() {\n-    return ds;\n+    return cc;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNDg2NA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488424864", "bodyText": "nit: \"ccs\" instead of \"dcs\".", "author": "sankarh", "createdAt": "2020-09-15T06:47:14Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageBuilder.java", "diffHunk": "@@ -241,6 +247,16 @@ public AddNotNullConstraintMessage buildAddNotNullConstraintMessage(\n     return new JSONAddNotNullConstraintMessage(MS_SERVER_URL, MS_SERVICE_PRINCIPAL, nns, now());\n   }\n \n+  public AddDefaultConstraintMessage buildAddDefaultConstraintMessage(\n+    List<SQLDefaultConstraint> dcs) {\n+    return new JSONAddDefaultConstraintMessage(MS_SERVER_URL, MS_SERVICE_PRINCIPAL, dcs, now());\n+  }\n+\n+  public AddCheckConstraintMessage buildAddCheckConstraintMessage(\n+    List<SQLCheckConstraint> dcs) {", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageBuilder.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageBuilder.java\nindex f09d22a577..d5cd98a476 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageBuilder.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageBuilder.java\n\n@@ -253,8 +253,8 @@ public AddDefaultConstraintMessage buildAddDefaultConstraintMessage(\n   }\n \n   public AddCheckConstraintMessage buildAddCheckConstraintMessage(\n-    List<SQLCheckConstraint> dcs) {\n-    return new JSONAddCheckConstraintMessage(MS_SERVER_URL, MS_SERVICE_PRINCIPAL, dcs, now());\n+    List<SQLCheckConstraint> ccs) {\n+    return new JSONAddCheckConstraintMessage(MS_SERVER_URL, MS_SERVICE_PRINCIPAL, ccs, now());\n   }\n \n   public DropConstraintMessage buildDropConstraintMessage(String dbName, String tableName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNTE3NA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488425174", "bodyText": "nit: Statement alignment.", "author": "sankarh", "createdAt": "2020-09-15T06:47:50Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageDeserializer.java", "diffHunk": "@@ -62,6 +62,10 @@ public EventMessage getEventMessage(String eventTypeString, String messageBody)\n       return getAddUniqueConstraintMessage(messageBody);\n     case ADD_NOTNULLCONSTRAINT:\n       return getAddNotNullConstraintMessage(messageBody);\n+    case ADD_DEFAULTCONSTRAINT:\n+      return getAddDefaultConstraintMessage(messageBody);\n+      case ADD_CHECKCONSTRAINT:", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageDeserializer.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageDeserializer.java\nindex 9433f1bd02..ffbedced66 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageDeserializer.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/messaging/MessageDeserializer.java\n\n@@ -64,7 +64,7 @@ public EventMessage getEventMessage(String eventTypeString, String messageBody)\n       return getAddNotNullConstraintMessage(messageBody);\n     case ADD_DEFAULTCONSTRAINT:\n       return getAddDefaultConstraintMessage(messageBody);\n-      case ADD_CHECKCONSTRAINT:\n+    case ADD_CHECKCONSTRAINT:\n       return getAddCheckConstraintMessage(messageBody);\n     case DROP_CONSTRAINT:\n       return getDropConstraintMessage(messageBody);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODI4Nw==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488428287", "bodyText": "Add ALTER operations to change the constraints and validate it for incremental repl.", "author": "sankarh", "createdAt": "2020-09-15T06:54:12Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3195,13 +3201,17 @@ public void testConstraints() throws IOException {\n       assertEquals(fks.size(), 2);\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n       assertEquals(nns.size(), 1);\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));\n+      assertEquals(cks.size(), 2);\n     } catch (TException te) {\n       assertNull(te);\n     }\n \n     run(\"CREATE TABLE \" + dbName + \".tbl4(a string, b string, primary key (a, b) disable novalidate rely)\", driver);\n     run(\"CREATE TABLE \" + dbName + \".tbl5(a string, b string, foreign key (a, b) references \" + dbName + \".tbl4(a, b) disable novalidate)\", driver);\n     run(\"CREATE TABLE \" + dbName + \".tbl6(a string, b string not null disable, unique (a) disable)\", driver);\n+    run(\"CREATE TABLE \" + dbName + \".tbl9(a string CHECK (a like 'a%'), price double CHECK (price > 0 AND price <= 1000))\", driver);\n+    run(\"CREATE TABLE \" + dbName + \".tbl10(a string, b int DEFAULT 0)\", driver);", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MTQxNw==", "url": "https://github.com/apache/hive/pull/1237#discussion_r492641417", "bodyText": "Alter table can either add or drop the constraints. Since the drop was already there, I have added through alter too.", "author": "adesh-rao", "createdAt": "2020-09-22T10:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MTY1MQ==", "url": "https://github.com/apache/hive/pull/1237#discussion_r492641651", "bodyText": "Alter table constraints hive doc: https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-AlterTableConstraints", "author": "adesh-rao", "createdAt": "2020-09-22T10:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "da73f3b209f21d6156bed4d5992d7115eb256db1", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\nindex a8b7a5d3c7..ca0639665e 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n\n@@ -3193,16 +3432,18 @@ public void testConstraints() throws IOException {\n     String replDumpId = bootstrapDump.lastReplId;\n \n     try {\n-      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName , \"tbl1\"));\n+      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName, \"tbl1\"));\n       assertEquals(pks.size(), 2);\n-      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n+      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl3\"));\n       assertEquals(uks.size(), 1);\n-      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName , \"tbl2\"));\n+      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName, \"tbl2\"));\n       assertEquals(fks.size(), 2);\n-      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl3\"));\n+      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl3\"));\n       assertEquals(nns.size(), 1);\n-      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl7\"));\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl7\"));\n       assertEquals(cks.size(), 2);\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl8\"));\n+      assertEquals(dks.size(), 1);\n     } catch (TException te) {\n       assertNull(te);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODUxMw==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488428513", "bodyText": "nit: Remove extra space before \",\"", "author": "sankarh", "createdAt": "2020-09-15T06:54:43Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3243,6 +3265,15 @@ public void testConstraints() throws IOException {\n       assertTrue(fks.isEmpty());\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n       assertTrue(nns.isEmpty());\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl10\"));\n+      assertTrue(dks.isEmpty());\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl9\"));\n+      assertTrue(cks.isEmpty());\n+      dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\nindex a8b7a5d3c7..5bf0aa2d87 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n\n@@ -3253,25 +3508,29 @@ public void testConstraints() throws IOException {\n     run(\"ALTER TABLE \" + dbName + \".tbl6 DROP CONSTRAINT `\" + nnName + \"`\", driver);\n     run(\"ALTER TABLE \" + dbName + \".tbl9 DROP CONSTRAINT `\" + ckName1 + \"`\", driver);\n     run(\"ALTER TABLE \" + dbName + \".tbl9 DROP CONSTRAINT `\" + ckName2 + \"`\", driver);\n-    run(\"ALTER TABLE \" + dbName + \".tbl10 DROP CONSTRAINT `\" + dkName + \"`\", driver);\n+    run(\"ALTER TABLE \" + dbName + \".tbl10 DROP CONSTRAINT `\" + ckName3 + \"`\", driver);\n+    run(\"ALTER TABLE \" + dbName + \".tbl10 DROP CONSTRAINT `\" + dkName1 + \"`\", driver);\n+    run(\"ALTER TABLE \" + dbName + \".tbl10 DROP CONSTRAINT `\" + dkName2 + \"`\", driver);\n \n     incrementalLoadAndVerify(dbName, replDbName);\n     try {\n-      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName , \"tbl4\"));\n+      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName, \"tbl4\"));\n       assertTrue(pks.isEmpty());\n-      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl4\"));\n+      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl4\"));\n       assertTrue(uks.isEmpty());\n-      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName , \"tbl5\"));\n+      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName, \"tbl5\"));\n       assertTrue(fks.isEmpty());\n-      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n+      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl6\"));\n       assertTrue(nns.isEmpty());\n-      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl10\"));\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl10\"));\n       assertTrue(dks.isEmpty());\n-      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl9\"));\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl9\"));\n+      assertTrue(cks.isEmpty());\n+      cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl10\"));\n       assertTrue(cks.isEmpty());\n-      dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));\n+      dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl12\"));\n       assertTrue(dks.isEmpty());\n-      cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));\n+      cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl12\"));\n       assertTrue(cks.isEmpty());\n \n     } catch (TException te) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODU0Ng==", "url": "https://github.com/apache/hive/pull/1237#discussion_r488428546", "bodyText": "nit: Remove extra space before \",\"", "author": "sankarh", "createdAt": "2020-09-15T06:54:48Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3243,6 +3265,15 @@ public void testConstraints() throws IOException {\n       assertTrue(fks.isEmpty());\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n       assertTrue(nns.isEmpty());\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl10\"));\n+      assertTrue(dks.isEmpty());\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl9\"));\n+      assertTrue(cks.isEmpty());\n+      dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));\n+      assertTrue(dks.isEmpty());\n+      cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));", "originalCommit": "f1da5ae6624b6c0643f9d69f477f8d94ffa9e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\nindex a8b7a5d3c7..5bf0aa2d87 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n\n@@ -3253,25 +3508,29 @@ public void testConstraints() throws IOException {\n     run(\"ALTER TABLE \" + dbName + \".tbl6 DROP CONSTRAINT `\" + nnName + \"`\", driver);\n     run(\"ALTER TABLE \" + dbName + \".tbl9 DROP CONSTRAINT `\" + ckName1 + \"`\", driver);\n     run(\"ALTER TABLE \" + dbName + \".tbl9 DROP CONSTRAINT `\" + ckName2 + \"`\", driver);\n-    run(\"ALTER TABLE \" + dbName + \".tbl10 DROP CONSTRAINT `\" + dkName + \"`\", driver);\n+    run(\"ALTER TABLE \" + dbName + \".tbl10 DROP CONSTRAINT `\" + ckName3 + \"`\", driver);\n+    run(\"ALTER TABLE \" + dbName + \".tbl10 DROP CONSTRAINT `\" + dkName1 + \"`\", driver);\n+    run(\"ALTER TABLE \" + dbName + \".tbl10 DROP CONSTRAINT `\" + dkName2 + \"`\", driver);\n \n     incrementalLoadAndVerify(dbName, replDbName);\n     try {\n-      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName , \"tbl4\"));\n+      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName, \"tbl4\"));\n       assertTrue(pks.isEmpty());\n-      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl4\"));\n+      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl4\"));\n       assertTrue(uks.isEmpty());\n-      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName , \"tbl5\"));\n+      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName, \"tbl5\"));\n       assertTrue(fks.isEmpty());\n-      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n+      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl6\"));\n       assertTrue(nns.isEmpty());\n-      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl10\"));\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl10\"));\n       assertTrue(dks.isEmpty());\n-      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl9\"));\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl9\"));\n+      assertTrue(cks.isEmpty());\n+      cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl10\"));\n       assertTrue(cks.isEmpty());\n-      dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));\n+      dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl12\"));\n       assertTrue(dks.isEmpty());\n-      cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl12\"));\n+      cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl12\"));\n       assertTrue(cks.isEmpty());\n \n     } catch (TException te) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAzNzkzNA==", "url": "https://github.com/apache/hive/pull/1237#discussion_r494037934", "bodyText": "nit: Add space before \"+\" in both lines.", "author": "sankarh", "createdAt": "2020-09-24T04:54:14Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3236,13 +3236,29 @@ public void testConstraints() throws IOException {\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n       assertEquals(nns.size(), 1);\n       nnName = nns.get(0).getNn_name();\n-      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl9\"));\n+      List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl9\"));\n       assertEquals(cks.size(), 2);\n       ckName1 = cks.get(0).getDc_name();\n       ckName2 = cks.get(1).getDc_name();\n-      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl10\"));\n+      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl10\"));\n       assertEquals(dks.size(), 1);\n-      dkName = dks.get(0).getDc_name();\n+      dkName1 = dks.get(0).getDc_name();\n+    } catch (TException te) {\n+      assertNull(te);\n+    }\n+\n+    String dkName2 = \"custom_dk_name\";\n+    String ckName3 = \"customer_ck_name\";\n+    run(\"ALTER TABLE \" + dbName+ \".tbl10 CHANGE COLUMN a a string CONSTRAINT \" + ckName3 + \" CHECK (a like 'a%')\", driver);", "originalCommit": "fb1a7ea13e7dec771b0864f72686a626eded0595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\nindex be63ff7491..5bf0aa2d87 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n\n@@ -3224,16 +3463,16 @@ public void testConstraints() throws IOException {\n     String ckName1 = null;\n     String ckName2 = null;\n     try {\n-      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName , \"tbl4\"));\n+      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName, \"tbl4\"));\n       assertEquals(pks.size(), 2);\n       pkName = pks.get(0).getPk_name();\n-      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n+      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl6\"));\n       assertEquals(uks.size(), 1);\n       ukName = uks.get(0).getUk_name();\n-      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName , \"tbl5\"));\n+      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName, \"tbl5\"));\n       assertEquals(fks.size(), 2);\n       fkName = fks.get(0).getFk_name();\n-      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n+      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl6\"));\n       assertEquals(nns.size(), 1);\n       nnName = nns.get(0).getNn_name();\n       List<SQLCheckConstraint> cks = metaStoreClientMirror.getCheckConstraints(new CheckConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl9\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAzODA0MQ==", "url": "https://github.com/apache/hive/pull/1237#discussion_r494038041", "bodyText": "nit: Remove space before \",\"", "author": "sankarh", "createdAt": "2020-09-24T04:54:43Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java", "diffHunk": "@@ -3265,13 +3283,15 @@ public void testConstraints() throws IOException {\n       assertTrue(fks.isEmpty());\n       List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));", "originalCommit": "fb1a7ea13e7dec771b0864f72686a626eded0595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\nindex be63ff7491..5bf0aa2d87 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java\n\n@@ -3275,13 +3514,13 @@ public void testConstraints() throws IOException {\n \n     incrementalLoadAndVerify(dbName, replDbName);\n     try {\n-      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName , \"tbl4\"));\n+      List<SQLPrimaryKey> pks = metaStoreClientMirror.getPrimaryKeys(new PrimaryKeysRequest(replDbName, \"tbl4\"));\n       assertTrue(pks.isEmpty());\n-      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl4\"));\n+      List<SQLUniqueConstraint> uks = metaStoreClientMirror.getUniqueConstraints(new UniqueConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl4\"));\n       assertTrue(uks.isEmpty());\n-      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName , \"tbl5\"));\n+      List<SQLForeignKey> fks = metaStoreClientMirror.getForeignKeys(new ForeignKeysRequest(null, null, replDbName, \"tbl5\"));\n       assertTrue(fks.isEmpty());\n-      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName , \"tbl6\"));\n+      List<SQLNotNullConstraint> nns = metaStoreClientMirror.getNotNullConstraints(new NotNullConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl6\"));\n       assertTrue(nns.isEmpty());\n       List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, \"tbl10\"));\n       assertTrue(dks.isEmpty());\n"}}, {"oid": "f6a9e5981a406ff4806a8ba6180f3e9209428cca", "url": "https://github.com/apache/hive/commit/f6a9e5981a406ff4806a8ba6180f3e9209428cca", "message": "fix indentions", "committedDate": "2020-09-24T05:08:22Z", "type": "forcePushed"}, {"oid": "da73f3b209f21d6156bed4d5992d7115eb256db1", "url": "https://github.com/apache/hive/commit/da73f3b209f21d6156bed4d5992d7115eb256db1", "message": "fix indentions", "committedDate": "2020-09-24T16:12:21Z", "type": "forcePushed"}, {"oid": "52609b766d5276075f4c0eced10d6c058901f1f3", "url": "https://github.com/apache/hive/commit/52609b766d5276075f4c0eced10d6c058901f1f3", "message": "First cut implementation for default/check constraint events", "committedDate": "2020-09-29T07:08:24Z", "type": "commit"}, {"oid": "8b1e200753b11234c1b856a0832e04038a1b0507", "url": "https://github.com/apache/hive/commit/8b1e200753b11234c1b856a0832e04038a1b0507", "message": "P2", "committedDate": "2020-09-29T07:08:24Z", "type": "commit"}, {"oid": "fb4d0268139ae8d20202b8a46d16dad372d115fb", "url": "https://github.com/apache/hive/commit/fb4d0268139ae8d20202b8a46d16dad372d115fb", "message": "P3", "committedDate": "2020-09-29T07:08:24Z", "type": "commit"}, {"oid": "65c92c544808e2ebd0fcb6d327313b92de04c673", "url": "https://github.com/apache/hive/commit/65c92c544808e2ebd0fcb6d327313b92de04c673", "message": "Added tests", "committedDate": "2020-09-29T07:08:24Z", "type": "commit"}, {"oid": "308b4042936afabed8ad9894d81c34bfec926a4c", "url": "https://github.com/apache/hive/commit/308b4042936afabed8ad9894d81c34bfec926a4c", "message": "add constraints in repldumptask", "committedDate": "2020-09-29T07:16:02Z", "type": "commit"}, {"oid": "e46e0c903b3367da45abe20dd65608d8951bc5c1", "url": "https://github.com/apache/hive/commit/e46e0c903b3367da45abe20dd65608d8951bc5c1", "message": "Fix indentation and add license", "committedDate": "2020-09-29T07:16:04Z", "type": "commit"}, {"oid": "37972619b3016a2bf2c643c82765a643e2f26584", "url": "https://github.com/apache/hive/commit/37972619b3016a2bf2c643c82765a643e2f26584", "message": "fix review comments", "committedDate": "2020-09-29T07:16:04Z", "type": "commit"}, {"oid": "84fb1d41167cd7669f4fbe0249e358cf11267a19", "url": "https://github.com/apache/hive/commit/84fb1d41167cd7669f4fbe0249e358cf11267a19", "message": "address review comments", "committedDate": "2020-09-29T07:16:04Z", "type": "commit"}, {"oid": "03186efc1aed26059a46968ddcb6c781950832de", "url": "https://github.com/apache/hive/commit/03186efc1aed26059a46968ddcb6c781950832de", "message": "fix indentions", "committedDate": "2020-09-29T07:16:04Z", "type": "commit"}, {"oid": "03186efc1aed26059a46968ddcb6c781950832de", "url": "https://github.com/apache/hive/commit/03186efc1aed26059a46968ddcb6c781950832de", "message": "fix indentions", "committedDate": "2020-09-29T07:16:04Z", "type": "forcePushed"}, {"oid": "5d558ee05dfe1a04eb0178b6a35af730da54f789", "url": "https://github.com/apache/hive/commit/5d558ee05dfe1a04eb0178b6a35af730da54f789", "message": "Add check/default constraint call in Hive", "committedDate": "2020-09-29T08:29:21Z", "type": "commit"}, {"oid": "dc48a9665dd164f4f45b81250eb5a39c866b31f3", "url": "https://github.com/apache/hive/commit/dc48a9665dd164f4f45b81250eb5a39c866b31f3", "message": "Add check/default non-empty check in replDumptask", "committedDate": "2020-09-29T17:08:10Z", "type": "commit"}, {"oid": "dc48a9665dd164f4f45b81250eb5a39c866b31f3", "url": "https://github.com/apache/hive/commit/dc48a9665dd164f4f45b81250eb5a39c866b31f3", "message": "Add check/default non-empty check in replDumptask", "committedDate": "2020-09-29T17:08:10Z", "type": "forcePushed"}]}