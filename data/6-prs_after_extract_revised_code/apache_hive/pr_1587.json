{"pr_number": 1587, "pr_title": "HIVE-24258: [CachedStore] Data miss match between cachedstore and rawstore", "pr_createdAt": "2020-10-19T12:01:23Z", "pr_url": "https://github.com/apache/hive/pull/1587", "timeline": [{"oid": "649134e5dae2e1df2840f2159178a19ad4ca0209", "url": "https://github.com/apache/hive/commit/649134e5dae2e1df2840f2159178a19ad4ca0209", "message": "HIVE-24358: [CachedStore] Data miss match between cachedstore and rawstore", "committedDate": "2020-10-20T06:24:39Z", "type": "forcePushed"}, {"oid": "9faac4625d75de73733a83caa05dd7d89fa3be17", "url": "https://github.com/apache/hive/commit/9faac4625d75de73733a83caa05dd7d89fa3be17", "message": "HIVE-24358: [CachedStore] Data miss match between cachedstore and rawstore", "committedDate": "2020-10-21T04:12:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwNjA1OQ==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510806059", "bodyText": "nit: Add space after ,", "author": "sankarh", "createdAt": "2020-10-23T11:02:13Z", "path": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java", "diffHunk": "@@ -419,18 +412,14 @@ public void testConstraintsForUpdateUsingEvents() throws Exception {\n   public void assertRawStoreAndCachedStoreConstraint(String catName, String dbName, String tblName)\n       throws MetaException, NoSuchObjectException {\n     SQLAllTableConstraints rawStoreConstraints = rawStore.getAllTableConstraints(catName, dbName, tblName);\n-    List<SQLPrimaryKey> primaryKeys = sharedCache.listCachedPrimaryKeys(catName, dbName, tblName);\n-    List<SQLNotNullConstraint> notNullConstraints = sharedCache.listCachedNotNullConstraints(catName, dbName, tblName);\n-    List<SQLUniqueConstraint> uniqueConstraints = sharedCache.listCachedUniqueConstraint(catName, dbName, tblName);\n-    List<SQLDefaultConstraint> defaultConstraints = sharedCache.listCachedDefaultConstraint(catName, dbName, tblName);\n-    List<SQLCheckConstraint> checkConstraints = sharedCache.listCachedCheckConstraint(catName, dbName, tblName);\n-    List<SQLForeignKey> foreignKeys = sharedCache.listCachedForeignKeys(catName, dbName, tblName, null, null);\n-    Assert.assertEquals(rawStoreConstraints.getPrimaryKeys(), primaryKeys);\n-    Assert.assertEquals(rawStoreConstraints.getNotNullConstraints(), notNullConstraints);\n-    Assert.assertEquals(rawStoreConstraints.getUniqueConstraints(), uniqueConstraints);\n-    Assert.assertEquals(rawStoreConstraints.getDefaultConstraints(), defaultConstraints);\n-    Assert.assertEquals(rawStoreConstraints.getCheckConstraints(), checkConstraints);\n-    Assert.assertEquals(rawStoreConstraints.getForeignKeys(), foreignKeys);\n+    SQLAllTableConstraints cachedStoreConstraints = new SQLAllTableConstraints();\n+    cachedStoreConstraints.setPrimaryKeys(sharedCache.listCachedPrimaryKeys(catName, dbName, tblName));\n+    cachedStoreConstraints.setForeignKeys(sharedCache.listCachedForeignKeys(catName, dbName, tblName, null, null));\n+    cachedStoreConstraints.setNotNullConstraints(sharedCache.listCachedNotNullConstraints(catName, dbName, tblName));\n+    cachedStoreConstraints.setDefaultConstraints(sharedCache.listCachedDefaultConstraint(catName, dbName, tblName));\n+    cachedStoreConstraints.setCheckConstraints(sharedCache.listCachedCheckConstraint(catName, dbName, tblName));\n+    cachedStoreConstraints.setUniqueConstraints(sharedCache.listCachedUniqueConstraint(catName, dbName, tblName));\n+    Assert.assertEquals(rawStoreConstraints,cachedStoreConstraints);", "originalCommit": "9faac4625d75de73733a83caa05dd7d89fa3be17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjIxNA==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510992214", "bodyText": "Done", "author": "ashish-kumar-sharma", "createdAt": "2020-10-23T16:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwNjA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java\nindex 2508eb2a33..d32dc00402 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java\n\n@@ -419,7 +419,7 @@ public void assertRawStoreAndCachedStoreConstraint(String catName, String dbName\n     cachedStoreConstraints.setDefaultConstraints(sharedCache.listCachedDefaultConstraint(catName, dbName, tblName));\n     cachedStoreConstraints.setCheckConstraints(sharedCache.listCachedCheckConstraint(catName, dbName, tblName));\n     cachedStoreConstraints.setUniqueConstraints(sharedCache.listCachedUniqueConstraint(catName, dbName, tblName));\n-    Assert.assertEquals(rawStoreConstraints,cachedStoreConstraints);\n+    Assert.assertEquals(rawStoreConstraints, cachedStoreConstraints);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwNjk5NQ==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510806995", "bodyText": "nit: Use for () {\n}\neven for single statement.\nOr use this instead: constraints.getPrimaryKeys().forEach(pk -> pk.setCatName(tbl.getCatName()));", "author": "sankarh", "createdAt": "2020-10-23T11:04:01Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -2255,121 +2257,61 @@ private void create_table_core(final RawStore ms, final CreateTableRequest req)\n           tbl.putToParameters(hive_metastoreConstants.DDL_TIME, Long.toString(time));\n         }\n \n-        if (primaryKeys == null && foreignKeys == null\n-                && uniqueConstraints == null && notNullConstraints == null && defaultConstraints == null\n-            && checkConstraints == null) {\n+        if (CollectionUtils.isEmpty(constraints.getPrimaryKeys()) && CollectionUtils.isEmpty(constraints.getForeignKeys())\n+                && CollectionUtils.isEmpty(constraints.getUniqueConstraints())&& CollectionUtils.isEmpty(constraints.getNotNullConstraints())&& CollectionUtils.isEmpty(constraints.getDefaultConstraints())\n+            && CollectionUtils.isEmpty(constraints.getCheckConstraints())) {\n           ms.createTable(tbl);\n         } else {\n           // Check that constraints have catalog name properly set first\n-          if (primaryKeys != null && !primaryKeys.isEmpty() && !primaryKeys.get(0).isSetCatName()) {\n-            for (SQLPrimaryKey pkcol : primaryKeys) pkcol.setCatName(tbl.getCatName());\n+          if (CollectionUtils.isNotEmpty(constraints.getPrimaryKeys()) && !constraints.getPrimaryKeys().get(0).isSetCatName()) {\n+            for (SQLPrimaryKey pkcol : constraints.getPrimaryKeys()) pkcol.setCatName(tbl.getCatName());", "originalCommit": "9faac4625d75de73733a83caa05dd7d89fa3be17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjQwMA==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510992400", "bodyText": "Done", "author": "ashish-kumar-sharma", "createdAt": "2020-10-23T16:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwNjk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\nindex 9fa1329c82..972d3eb11e 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\n\n@@ -2262,24 +2262,25 @@ private void create_table_core(final RawStore ms, final CreateTableRequest req)\n             && CollectionUtils.isEmpty(constraints.getCheckConstraints())) {\n           ms.createTable(tbl);\n         } else {\n+          final String catName = tbl.getCatName();\n           // Check that constraints have catalog name properly set first\n           if (CollectionUtils.isNotEmpty(constraints.getPrimaryKeys()) && !constraints.getPrimaryKeys().get(0).isSetCatName()) {\n-            for (SQLPrimaryKey pkcol : constraints.getPrimaryKeys()) pkcol.setCatName(tbl.getCatName());\n+            constraints.getPrimaryKeys().forEach(constraint -> constraint.setCatName(catName));\n           }\n           if (CollectionUtils.isNotEmpty(constraints.getForeignKeys()) && !constraints.getForeignKeys().get(0).isSetCatName()) {\n-            for (SQLForeignKey fkcol : constraints.getForeignKeys()) fkcol.setCatName(tbl.getCatName());\n+            constraints.getForeignKeys().forEach(constraint -> constraint.setCatName(catName));\n           }\n           if (CollectionUtils.isNotEmpty(constraints.getUniqueConstraints()) && !constraints.getUniqueConstraints().get(0).isSetCatName()) {\n-            for (SQLUniqueConstraint uccol : constraints.getUniqueConstraints()) uccol.setCatName(tbl.getCatName());\n+            constraints.getUniqueConstraints().forEach(constraint -> constraint.setCatName(catName));\n           }\n           if (CollectionUtils.isNotEmpty(constraints.getNotNullConstraints()) && !constraints.getNotNullConstraints().get(0).isSetCatName()) {\n-            for (SQLNotNullConstraint nncol : constraints.getNotNullConstraints()) nncol.setCatName(tbl.getCatName());\n+            constraints.getNotNullConstraints().forEach(constraint -> constraint.setCatName(catName));\n           }\n           if (CollectionUtils.isNotEmpty(constraints.getDefaultConstraints()) && !constraints.getDefaultConstraints().get(0).isSetCatName()) {\n-            for (SQLDefaultConstraint dccol : constraints.getDefaultConstraints()) dccol.setCatName(tbl.getCatName());\n+            constraints.getDefaultConstraints().forEach(constraint -> constraint.setCatName(catName));\n           }\n           if (CollectionUtils.isNotEmpty(constraints.getCheckConstraints()) && !constraints.getCheckConstraints().get(0).isSetCatName()) {\n-            for (SQLCheckConstraint cccol : constraints.getCheckConstraints()) cccol.setCatName(tbl.getCatName());\n+            constraints.getCheckConstraints().forEach(constraint -> constraint.setCatName(catName));\n           }\n           // Set constraint name if null before sending to listener\n           constraints = ms.createTableWithConstraints(tbl, constraints);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxMjU5MQ==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510812591", "bodyText": "nit: Add space before =", "author": "sankarh", "createdAt": "2020-10-23T11:16:33Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -2785,31 +2696,23 @@ public void add_not_null_constraint(AddNotNullConstraintRequest req)\n     @Override\n     public void add_default_constraint(AddDefaultConstraintRequest req)\n         throws MetaException, InvalidObjectException {\n-      List<SQLDefaultConstraint> defaultConstraintCols= req.getDefaultConstraintCols();\n-      String constraintName = (defaultConstraintCols != null && defaultConstraintCols.size() > 0) ?\n-          defaultConstraintCols.get(0).getDc_name() : \"null\";\n+      List<SQLDefaultConstraint> defaultConstraints= req.getDefaultConstraintCols();", "originalCommit": "9faac4625d75de73733a83caa05dd7d89fa3be17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjU5MQ==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510992591", "bodyText": "done", "author": "ashish-kumar-sharma", "createdAt": "2020-10-23T16:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxMjU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\nindex 9fa1329c82..972d3eb11e 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\n\n@@ -2694,11 +2695,10 @@ public void add_not_null_constraint(AddNotNullConstraintRequest req)\n     }\n \n     @Override\n-    public void add_default_constraint(AddDefaultConstraintRequest req)\n-        throws MetaException, InvalidObjectException {\n-      List<SQLDefaultConstraint> defaultConstraints= req.getDefaultConstraintCols();\n-      String constraintName = CollectionUtils.isNotEmpty(defaultConstraints) ?\n-          defaultConstraints.get(0).getDc_name() : \"null\";\n+    public void add_default_constraint(AddDefaultConstraintRequest req) throws MetaException, InvalidObjectException {\n+      List<SQLDefaultConstraint> defaultConstraints = req.getDefaultConstraintCols();\n+      String constraintName =\n+          CollectionUtils.isNotEmpty(defaultConstraints) ? defaultConstraints.get(0).getDc_name() : \"null\";\n       startFunction(\"add_default_constraint\", \": \" + constraintName);\n       boolean success = false;\n       Exception ex = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxNDEzOQ==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510814139", "bodyText": "nit: Update comments for change in return type for all apis.", "author": "sankarh", "createdAt": "2020-10-23T11:20:04Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/RawStore.java", "diffHunk": "@@ -1499,20 +1499,11 @@ SQLAllTableConstraints getAllTableConstraints(String catName, String dbName, Str\n   /**\n    * Create a table with constraints\n    * @param tbl table definition\n-   * @param primaryKeys primary key definition, or null\n-   * @param foreignKeys foreign key definition, or null\n-   * @param uniqueConstraints unique constraints definition, or null\n-   * @param notNullConstraints not null constraints definition, or null\n-   * @param defaultConstraints default values definition, or null\n    * @return list of constraint names", "originalCommit": "9faac4625d75de73733a83caa05dd7d89fa3be17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MzEyMg==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510993122", "bodyText": "Done", "author": "ashish-kumar-sharma", "createdAt": "2020-10-23T16:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxNDEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/RawStore.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/RawStore.java\nindex d1d917020e..c08f6b4a45 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/RawStore.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/RawStore.java\n\n@@ -1499,6 +1499,7 @@ SQLAllTableConstraints getAllTableConstraints(String catName, String dbName, Str\n   /**\n    * Create a table with constraints\n    * @param tbl table definition\n+   * @param constraints wrapper of all table constraints\n    * @return list of constraint names\n    * @throws InvalidObjectException one of the provided objects is malformed.\n    * @throws MetaException error accessing the RDBMS\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxNDc4OA==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510814788", "bodyText": "nit: Space after ,", "author": "sankarh", "createdAt": "2020-10-23T11:21:22Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CacheUtils.java", "diffHunk": "@@ -58,14 +59,11 @@ public static String buildDbKeyWithDelimiterSuffix(String catName, String dbName\n    *\n    */\n   public static String buildPartitionCacheKey(List<String> partVals) {\n-    if (partVals == null || partVals.isEmpty()) {\n-      return \"\";\n-    }\n-    return String.join(delimit, partVals);\n+    return CollectionUtils.isNotEmpty(partVals) ? String.join(delimit, partVals) : \"\";\n   }\n \n   public static String buildTableKey(String catName, String dbName, String tableName) {\n-    return buildKey(catName.toLowerCase(), dbName.toLowerCase(), tableName.toLowerCase());\n+    return buildKey(StringUtils.normalizeIdentifier(catName),StringUtils.normalizeIdentifier(dbName),StringUtils.normalizeIdentifier(tableName));", "originalCommit": "9faac4625d75de73733a83caa05dd7d89fa3be17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjkyMg==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510992922", "bodyText": "Done", "author": "ashish-kumar-sharma", "createdAt": "2020-10-23T16:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxNDc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CacheUtils.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CacheUtils.java\nindex a25eaddeb4..a2f56e44a3 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CacheUtils.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CacheUtils.java\n\n@@ -63,7 +63,8 @@ public static String buildPartitionCacheKey(List<String> partVals) {\n   }\n \n   public static String buildTableKey(String catName, String dbName, String tableName) {\n-    return buildKey(StringUtils.normalizeIdentifier(catName),StringUtils.normalizeIdentifier(dbName),StringUtils.normalizeIdentifier(tableName));\n+    return buildKey(StringUtils.normalizeIdentifier(catName), StringUtils.normalizeIdentifier(dbName),\n+        StringUtils.normalizeIdentifier(tableName));\n   }\n \n   public static String buildTableColKey(String catName, String dbName, String tableName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxNTUyMA==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510815520", "bodyText": "nit: Shall keep annotation and api declaration ins separate lines.", "author": "sankarh", "createdAt": "2020-10-23T11:22:37Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java", "diffHunk": "@@ -2846,31 +2846,28 @@ public SQLAllTableConstraints getAllTableConstraints(String catName, String dbNa\n     return sqlAllTableConstraints;\n   }\n \n-  @Override public List<String> createTableWithConstraints(Table tbl, List<SQLPrimaryKey> primaryKeys,\n-      List<SQLForeignKey> foreignKeys, List<SQLUniqueConstraint> uniqueConstraints,\n-      List<SQLNotNullConstraint> notNullConstraints, List<SQLDefaultConstraint> defaultConstraints,\n-      List<SQLCheckConstraint> checkConstraints) throws InvalidObjectException, MetaException {\n-    List<String> constraintNames = rawStore\n-        .createTableWithConstraints(tbl, primaryKeys, foreignKeys, uniqueConstraints, notNullConstraints,\n-            defaultConstraints, checkConstraints);\n+  @Override public SQLAllTableConstraints createTableWithConstraints(Table tbl, SQLAllTableConstraints constraints) throws InvalidObjectException, MetaException {", "originalCommit": "9faac4625d75de73733a83caa05dd7d89fa3be17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNDEwMQ==", "url": "https://github.com/apache/hive/pull/1587#discussion_r511014101", "bodyText": "done", "author": "ashish-kumar-sharma", "createdAt": "2020-10-23T16:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxNTUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java\nindex 30345a2545..40c89c19c9 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java\n\n@@ -2846,9 +2846,10 @@ public SQLAllTableConstraints getAllTableConstraints(String catName, String dbNa\n     return sqlAllTableConstraints;\n   }\n \n-  @Override public SQLAllTableConstraints createTableWithConstraints(Table tbl, SQLAllTableConstraints constraints) throws InvalidObjectException, MetaException {\n-    constraints = rawStore\n-        .createTableWithConstraints(tbl, constraints);\n+  @Override\n+  public SQLAllTableConstraints createTableWithConstraints(Table tbl, SQLAllTableConstraints constraints)\n+      throws InvalidObjectException, MetaException {\n+    constraints = rawStore.createTableWithConstraints(tbl, constraints);\n     // in case of event based cache update, cache is updated during commit.\n     if (canUseEvents) {\n       return constraints;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxNjM5NQ==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510816395", "bodyText": "nit: Space after ,", "author": "sankarh", "createdAt": "2020-10-23T11:24:32Z", "path": "standalone-metastore/metastore-server/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStore.java", "diffHunk": "@@ -1568,12 +1568,7 @@ public void testPrimaryKeys() {\n     List<SQLPrimaryKey> cachedKeys = sharedCache.listCachedPrimaryKeys(\n             DEFAULT_CATALOG_NAME, tbl.getDbName(), tbl.getTableName());\n \n-    Assert.assertEquals(cachedKeys.size(), 1);\n-    Assert.assertEquals(cachedKeys.get(0).getPk_name(), \"pk1\");\n-    Assert.assertEquals(cachedKeys.get(0).getTable_db(), \"db\");\n-    Assert.assertEquals(cachedKeys.get(0).getTable_name(), tbl.getTableName());\n-    Assert.assertEquals(cachedKeys.get(0).getColumn_name(), \"col1\");\n-    Assert.assertEquals(cachedKeys.get(0).getCatName(), DEFAULT_CATALOG_NAME);\n+    Assert.assertEquals(origKeys,cachedKeys);", "originalCommit": "9faac4625d75de73733a83caa05dd7d89fa3be17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MzAxNQ==", "url": "https://github.com/apache/hive/pull/1587#discussion_r510993015", "bodyText": "Done", "author": "ashish-kumar-sharma", "createdAt": "2020-10-23T16:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxNjM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "chunk": "diff --git a/standalone-metastore/metastore-server/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStore.java b/standalone-metastore/metastore-server/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStore.java\nindex 87ffd0114d..2e1a0ae16d 100644\n--- a/standalone-metastore/metastore-server/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStore.java\n+++ b/standalone-metastore/metastore-server/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStore.java\n\n@@ -1568,7 +1568,7 @@ public void testPrimaryKeys() {\n     List<SQLPrimaryKey> cachedKeys = sharedCache.listCachedPrimaryKeys(\n             DEFAULT_CATALOG_NAME, tbl.getDbName(), tbl.getTableName());\n \n-    Assert.assertEquals(origKeys,cachedKeys);\n+    Assert.assertEquals(origKeys, cachedKeys);\n \n     SQLPrimaryKey modifiedKey = origKeys.get(0).deepCopy();\n     modifiedKey.setColumn_name(\"col2\");\n"}}, {"oid": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "url": "https://github.com/apache/hive/commit/5fa26d75290b4869b516c83c683a79b1eee5c4fd", "message": "HIVE-24358: [CachedStore] Data miss match between cachedstore and rawstore", "committedDate": "2020-10-25T05:39:18Z", "type": "commit"}, {"oid": "5fa26d75290b4869b516c83c683a79b1eee5c4fd", "url": "https://github.com/apache/hive/commit/5fa26d75290b4869b516c83c683a79b1eee5c4fd", "message": "HIVE-24358: [CachedStore] Data miss match between cachedstore and rawstore", "committedDate": "2020-10-25T05:39:18Z", "type": "forcePushed"}]}