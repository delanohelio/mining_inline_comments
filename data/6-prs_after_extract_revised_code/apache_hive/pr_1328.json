{"pr_number": 1328, "pr_title": "HIVE-23873: Querying Hive JDBCStorageHandler table fails with NPE whe\u2026", "pr_createdAt": "2020-07-28T08:27:49Z", "pr_url": "https://github.com/apache/hive/pull/1328", "timeline": [{"oid": "b41e5734638ff48adffca83d7be106c7356dd65c", "url": "https://github.com/apache/hive/commit/b41e5734638ff48adffca83d7be106c7356dd65c", "message": "HIVE-23873: Querying Hive JDBCStorageHandler table fails with NPE when CBO is off", "committedDate": "2020-07-28T08:26:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461646240", "bodyText": "Missing { &  } for this else", "author": "HunterL", "createdAt": "2020-07-28T14:53:43Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else", "originalCommit": "b41e5734638ff48adffca83d7be106c7356dd65c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwMzYzNw==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461803637", "bodyText": "{ & }. are required? I was assuming since we have single statement within conditional block, it should be fine.", "author": "cravani", "createdAt": "2020-07-28T18:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzNDYzMw==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461834633", "bodyText": "This is by convention, we use { & } even for single line statements.", "author": "jcamachor", "createdAt": "2020-07-28T19:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NTEzNg==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461865136", "bodyText": "Ah, Updated the code with  { & }\n:)", "author": "cravani", "createdAt": "2020-07-28T20:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "d2d4256b712a1e6efe1c52602758f73e439c23b1", "chunk": "diff --git a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\nindex cf03ecba8c..bbc4fdc231 100644\n--- a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n+++ b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n\n@@ -62,27 +62,28 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-        try {\n-          if(conf.get(Constants.JDBC_QUERY) == null)    {\n-            ResultSetMetaData metadata = rs.getMetaData();\n-            int numColumns = metadata.getColumnCount();\n-            List<String> columnNames = new ArrayList<String>(numColumns);\n-            for (int i = 0; i < numColumns; i++) {\n-              columnNames.add(metadata.getColumnName(i + 1));\n-            }\n-            fieldNamesProperty = String.join(\",\",columnNames);\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n           }\n-          else\n-            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-        }\n-        catch (Exception e) {\n-          LOGGER.error(\"Error while trying to get column names.\", e);\n-          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+          fieldNamesProperty = String.join(\",\",columnNames);\n         }\n-        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        else\n+          fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+      }\n+      catch (Exception e) {\n+        LOGGER.error(\"Error while trying to get column names.\", e);\n+        throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+      }\n+      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n-    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);\n+    LOGGER.debug(\"Iterator ColumnNames = {}\", fieldNamesProperty);\n     hiveColumnNames = fieldNamesProperty.trim().split(\",\");\n     hiveColumnTypesList = TypeInfoUtils.getTypeInfosFromTypeString(fieldTypesProperty);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQ1OQ==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461647459", "bodyText": "Small white space nitpick here, should be if (conf.get(Constants.JDBC_QUERY) == null) {", "author": "HunterL", "createdAt": "2020-07-28T14:55:09Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {", "originalCommit": "b41e5734638ff48adffca83d7be106c7356dd65c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNTA2MA==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461805060", "bodyText": "Fixed.", "author": "cravani", "createdAt": "2020-07-28T19:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d2d4256b712a1e6efe1c52602758f73e439c23b1", "chunk": "diff --git a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\nindex cf03ecba8c..bbc4fdc231 100644\n--- a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n+++ b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n\n@@ -62,27 +62,28 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-        try {\n-          if(conf.get(Constants.JDBC_QUERY) == null)    {\n-            ResultSetMetaData metadata = rs.getMetaData();\n-            int numColumns = metadata.getColumnCount();\n-            List<String> columnNames = new ArrayList<String>(numColumns);\n-            for (int i = 0; i < numColumns; i++) {\n-              columnNames.add(metadata.getColumnName(i + 1));\n-            }\n-            fieldNamesProperty = String.join(\",\",columnNames);\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n           }\n-          else\n-            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-        }\n-        catch (Exception e) {\n-          LOGGER.error(\"Error while trying to get column names.\", e);\n-          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+          fieldNamesProperty = String.join(\",\",columnNames);\n         }\n-        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        else\n+          fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+      }\n+      catch (Exception e) {\n+        LOGGER.error(\"Error while trying to get column names.\", e);\n+        throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+      }\n+      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n-    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);\n+    LOGGER.debug(\"Iterator ColumnNames = {}\", fieldNamesProperty);\n     hiveColumnNames = fieldNamesProperty.trim().split(\",\");\n     hiveColumnTypesList = TypeInfoUtils.getTypeInfosFromTypeString(fieldTypesProperty);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461654354", "bodyText": "Small whitespace nitpick here LOGGER.debug(\"Iterator ColumnNames = \" + fieldNamesProperty);", "author": "HunterL", "createdAt": "2020-07-28T15:03:37Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {\n+          if(conf.get(Constants.JDBC_QUERY) == null)    {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            int numColumns = metadata.getColumnCount();\n+            List<String> columnNames = new ArrayList<String>(numColumns);\n+            for (int i = 0; i < numColumns; i++) {\n+              columnNames.add(metadata.getColumnName(i + 1));\n+            }\n+            fieldNamesProperty = String.join(\",\",columnNames);\n+          }\n+          else\n+            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+        }\n+        catch (Exception e) {\n+          LOGGER.error(\"Error while trying to get column names.\", e);\n+          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+        }\n+        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n+    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);", "originalCommit": "b41e5734638ff48adffca83d7be106c7356dd65c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjM2NA==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461672364", "bodyText": "LOGGER.debug(\"Iterator ColumnNames = {}\", fieldNamesProperty);", "author": "jcamachor", "createdAt": "2020-07-28T15:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNTIyNA==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461805224", "bodyText": "fixed.", "author": "cravani", "createdAt": "2020-07-28T19:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "d2d4256b712a1e6efe1c52602758f73e439c23b1", "chunk": "diff --git a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\nindex cf03ecba8c..bbc4fdc231 100644\n--- a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n+++ b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n\n@@ -62,27 +62,28 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-        try {\n-          if(conf.get(Constants.JDBC_QUERY) == null)    {\n-            ResultSetMetaData metadata = rs.getMetaData();\n-            int numColumns = metadata.getColumnCount();\n-            List<String> columnNames = new ArrayList<String>(numColumns);\n-            for (int i = 0; i < numColumns; i++) {\n-              columnNames.add(metadata.getColumnName(i + 1));\n-            }\n-            fieldNamesProperty = String.join(\",\",columnNames);\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n           }\n-          else\n-            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-        }\n-        catch (Exception e) {\n-          LOGGER.error(\"Error while trying to get column names.\", e);\n-          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+          fieldNamesProperty = String.join(\",\",columnNames);\n         }\n-        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        else\n+          fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+      }\n+      catch (Exception e) {\n+        LOGGER.error(\"Error while trying to get column names.\", e);\n+        throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+      }\n+      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n-    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);\n+    LOGGER.debug(\"Iterator ColumnNames = {}\", fieldNamesProperty);\n     hiveColumnNames = fieldNamesProperty.trim().split(\",\");\n     hiveColumnTypesList = TypeInfoUtils.getTypeInfosFromTypeString(fieldTypesProperty);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjU2Mw==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461672563", "bodyText": "nit. Indentation seems off.", "author": "jcamachor", "createdAt": "2020-07-28T15:28:39Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +63,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        try {", "originalCommit": "b41e5734638ff48adffca83d7be106c7356dd65c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNjE4Mw==", "url": "https://github.com/apache/hive/pull/1328#discussion_r461806183", "bodyText": "fixed :)", "author": "cravani", "createdAt": "2020-07-28T19:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MjU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d2d4256b712a1e6efe1c52602758f73e439c23b1", "chunk": "diff --git a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\nindex cf03ecba8c..bbc4fdc231 100644\n--- a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n+++ b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n\n@@ -62,27 +62,28 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-        try {\n-          if(conf.get(Constants.JDBC_QUERY) == null)    {\n-            ResultSetMetaData metadata = rs.getMetaData();\n-            int numColumns = metadata.getColumnCount();\n-            List<String> columnNames = new ArrayList<String>(numColumns);\n-            for (int i = 0; i < numColumns; i++) {\n-              columnNames.add(metadata.getColumnName(i + 1));\n-            }\n-            fieldNamesProperty = String.join(\",\",columnNames);\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n           }\n-          else\n-            fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n-        }\n-        catch (Exception e) {\n-          LOGGER.error(\"Error while trying to get column names.\", e);\n-          throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+          fieldNamesProperty = String.join(\",\",columnNames);\n         }\n-        fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n+        else\n+          fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+      }\n+      catch (Exception e) {\n+        LOGGER.error(\"Error while trying to get column names.\", e);\n+        throw new HiveJdbcDatabaseAccessException(\"Error while trying to get column names: \" + e.getMessage(), e);\n+      }\n+      fieldTypesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMN_TYPES));\n     }\n-    LOGGER.debug(\"Iterator ColumnNames = \"+fieldNamesProperty);\n+    LOGGER.debug(\"Iterator ColumnNames = {}\", fieldNamesProperty);\n     hiveColumnNames = fieldNamesProperty.trim().split(\",\");\n     hiveColumnTypesList = TypeInfoUtils.getTypeInfosFromTypeString(fieldTypesProperty);\n   }\n"}}, {"oid": "d2d4256b712a1e6efe1c52602758f73e439c23b1", "url": "https://github.com/apache/hive/commit/d2d4256b712a1e6efe1c52602758f73e439c23b1", "message": "Update JdbcRecordIterator.java", "committedDate": "2020-07-28T19:04:04Z", "type": "commit"}, {"oid": "210e3ee3d3b9e33f02cfadc4d58eab73bbe1ff16", "url": "https://github.com/apache/hive/commit/210e3ee3d3b9e33f02cfadc4d58eab73bbe1ff16", "message": "Update external_jdbc_table4.q.out", "committedDate": "2020-07-28T19:13:58Z", "type": "commit"}, {"oid": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc", "url": "https://github.com/apache/hive/commit/ca31a8f771d6632ae9ba631bd5c8a83826e02dbc", "message": "Update JdbcRecordIterator.java\n\nadded { & } for else block Line 77", "committedDate": "2020-07-28T19:22:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzE2NQ==", "url": "https://github.com/apache/hive/pull/1328#discussion_r462373165", "bodyText": "I don't believe this import is used", "author": "HunterL", "createdAt": "2020-07-29T15:07:45Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -22,15 +22,19 @@\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\n+import org.apache.hive.storage.jdbc.exception.HiveJdbcDatabaseAccessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n import java.sql.SQLDataException;\n import java.sql.SQLException;\n import java.sql.Types;\n+import java.util.Arrays;", "originalCommit": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMzIyMw==", "url": "https://github.com/apache/hive/pull/1328#discussion_r462403223", "bodyText": "fixed.", "author": "cravani", "createdAt": "2020-07-29T15:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "chunk": "diff --git a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\nindex d0497a6144..6ba5a091b5 100644\n--- a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n+++ b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n\n@@ -33,7 +33,6 @@\n import java.sql.SQLDataException;\n import java.sql.SQLException;\n import java.sql.Types;\n-import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzQyMg==", "url": "https://github.com/apache/hive/pull/1328#discussion_r462373422", "bodyText": "Whitespace at the end of this if is still off a bit, should be just one space after )", "author": "HunterL", "createdAt": "2020-07-29T15:08:09Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {", "originalCommit": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "chunk": "diff --git a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\nindex d0497a6144..6ba5a091b5 100644\n--- a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n+++ b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n\n@@ -62,10 +61,9 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    }\n-    else {\n+    } else {\n       try {\n-        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+        if (conf.get(Constants.JDBC_QUERY) == null) {\n           ResultSetMetaData metadata = rs.getMetaData();\n           int numColumns = metadata.getColumnCount();\n           List<String> columnNames = new ArrayList<String>(numColumns);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NjgxOQ==", "url": "https://github.com/apache/hive/pull/1328#discussion_r462376819", "bodyText": "Nitpicking here again sorry, lets move the else a line up } else {\nAlso regarding else without the { ... } being valid, you are correct it is valid java. Stylistically however using the brackets tends to be more readable and seems to be the dominant style in this project. \ud83d\udc4d", "author": "HunterL", "createdAt": "2020-07-29T15:12:39Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {", "originalCommit": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMzM1OQ==", "url": "https://github.com/apache/hive/pull/1328#discussion_r462403359", "bodyText": "fixed.", "author": "cravani", "createdAt": "2020-07-29T15:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NjgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "chunk": "diff --git a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\nindex d0497a6144..6ba5a091b5 100644\n--- a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n+++ b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n\n@@ -62,10 +61,9 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    }\n-    else {\n+    } else {\n       try {\n-        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+        if (conf.get(Constants.JDBC_QUERY) == null) {\n           ResultSetMetaData metadata = rs.getMetaData();\n           int numColumns = metadata.getColumnCount();\n           List<String> columnNames = new ArrayList<String>(numColumns);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NzE4OQ==", "url": "https://github.com/apache/hive/pull/1328#discussion_r462377189", "bodyText": "Here as well lets move the else up to line 76, } else {", "author": "HunterL", "createdAt": "2020-07-29T15:13:11Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -58,10 +62,29 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+    }\n+    else {\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n+          }\n+          fieldNamesProperty = String.join(\",\",columnNames);\n+        }\n+        else {", "originalCommit": "ca31a8f771d6632ae9ba631bd5c8a83826e02dbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "chunk": "diff --git a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\nindex d0497a6144..6ba5a091b5 100644\n--- a/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n+++ b/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java\n\n@@ -62,10 +61,9 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n     if (conf.get(Constants.JDBC_TABLE) != null && conf.get(Constants.JDBC_QUERY) != null) {\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n-    }\n-    else {\n+    } else {\n       try {\n-        if (conf.get(Constants.JDBC_QUERY) == null)    {\n+        if (conf.get(Constants.JDBC_QUERY) == null) {\n           ResultSetMetaData metadata = rs.getMetaData();\n           int numColumns = metadata.getColumnCount();\n           List<String> columnNames = new ArrayList<String>(numColumns);\n"}}, {"oid": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "url": "https://github.com/apache/hive/commit/42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "message": "Update JdbcRecordIterator.java\n\nfixed Nit picks.", "committedDate": "2020-07-29T15:48:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNTQyMg==", "url": "https://github.com/apache/hive/pull/1328#discussion_r464215422", "bodyText": "nit: space missing:  String.join(\",\", columnNames);", "author": "shameersss1", "createdAt": "2020-08-03T06:23:22Z", "path": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/dao/JdbcRecordIterator.java", "diffHunk": "@@ -59,9 +62,26 @@ public JdbcRecordIterator(Connection conn, PreparedStatement ps, ResultSet rs, C\n       fieldNamesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_NAMES));\n       fieldTypesProperty = Preconditions.checkNotNull(conf.get(Constants.JDBC_QUERY_FIELD_TYPES));\n     } else {\n-      fieldNamesProperty = Preconditions.checkNotNull(conf.get(serdeConstants.LIST_COLUMNS));\n+      try {\n+        if (conf.get(Constants.JDBC_QUERY) == null) {\n+          ResultSetMetaData metadata = rs.getMetaData();\n+          int numColumns = metadata.getColumnCount();\n+          List<String> columnNames = new ArrayList<String>(numColumns);\n+          for (int i = 0; i < numColumns; i++) {\n+            columnNames.add(metadata.getColumnName(i + 1));\n+          }\n+          fieldNamesProperty = String.join(\",\",columnNames);", "originalCommit": "42a298ff5bbb4650e7ef06aee52e3160f36a5a25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}