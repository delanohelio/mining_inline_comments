{"pr_number": 1443, "pr_title": "Implement jdbc methods invoked by Calcite", "pr_createdAt": "2020-08-29T20:09:22Z", "pr_url": "https://github.com/apache/hive/pull/1443", "timeline": [{"oid": "90ee1d5530aface7b799e2b187176902bdbca7a3", "url": "https://github.com/apache/hive/commit/90ee1d5530aface7b799e2b187176902bdbca7a3", "message": "implement jdbc methods", "committedDate": "2020-08-29T20:04:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjA3OA==", "url": "https://github.com/apache/hive/pull/1443#discussion_r479722078", "bodyText": "extra space, pls fix indent", "author": "thejasmn", "createdAt": "2020-08-30T04:58:19Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -291,7 +291,7 @@ public HiveConnection(String uri, Properties info) throws SQLException {\n \n     if (isEmbeddedMode) {\n       client = EmbeddedCLIServicePortal.get(connParams.getHiveConfs());\n-      connParams.getHiveConfs().clear();\n+        connParams.getHiveConfs().clear();", "originalCommit": "90ee1d5530aface7b799e2b187176902bdbca7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99ed1252723928768764e59badac714b55c3e431", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 109659a3d6..fd0f569548 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -291,7 +291,7 @@ public HiveConnection(String uri, Properties info) throws SQLException {\n \n     if (isEmbeddedMode) {\n       client = EmbeddedCLIServicePortal.get(connParams.getHiveConfs());\n-        connParams.getHiveConfs().clear();\n+      connParams.getHiveConfs().clear();\n       // open client session\n       openSession();\n       executeInitSql();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjQ1OQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r479722459", "bodyText": "HIVE_DEFAULT_NULLS_LAST could be overridden on the HiveServer2 using hive-site.xml settings. We need to get a value of this from HS2.\nI am not sure if we get the current settings from HS2 (i need to check).", "author": "thejasmn", "createdAt": "2020-08-30T05:04:10Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java", "diffHunk": "@@ -1227,4 +1232,13 @@ private TGetInfoResp getServerInfo(TGetInfoType type) throws SQLException {\n     Utils.verifySuccess(resp.getStatus());\n     return resp;\n   }\n+\n+  private boolean getHiveDefaultNullsLast() {\n+    boolean response = ConfVars.HIVE_DEFAULT_NULLS_LAST.defaultBoolVal;", "originalCommit": "90ee1d5530aface7b799e2b187176902bdbca7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzAyOA==", "url": "https://github.com/apache/hive/pull/1443#discussion_r480433028", "bodyText": "In Beeline we pick the Hive config and prefix it with hiveconf: and put it in the JDBCParameters.hiveConf. So, I have added the prefix, while looking up for the relevant key in the map. Not sure if there is any other place, where we send the hive conf differently.", "author": "kishendas", "createdAt": "2020-08-31T22:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5MTg3Nw==", "url": "https://github.com/apache/hive/pull/1443#discussion_r481291877", "bodyText": "I think @thejasmn concern is valid. If user specifies the property value in the connection parameters, then we will retrieve it here. However, if it is not present, we probably need to establish a connection to HS2 to retrieve the parameter value, since it may not be necessarily the default?", "author": "jcamachor", "createdAt": "2020-09-01T16:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyMjQwOA==", "url": "https://github.com/apache/hive/pull/1443#discussion_r481422408", "bodyText": "@jcamachor @thejasmn Looks like we already open the session with HS2 in HiveConnection, but when I see the OpenSession implementation in ThriftCLIService, looks like we only send one HiveConf configuration :\nresp.setConfiguration(Collections\n.singletonMap(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_RESULTSET_DEFAULT_FETCH_SIZE.varname,\nInteger.toString(fetchSize))); Should I add HIVE_DEFAULT_NULLS_LAST here or we need to expose a new method ?", "author": "kishendas", "createdAt": "2020-09-01T20:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NDkzNg==", "url": "https://github.com/apache/hive/pull/1443#discussion_r481464936", "bodyText": "@kishendas , I think it makes sense to return that property value too when the session is open since the mechanism is already in place and adding an additional property value should not create much overhead.", "author": "jcamachor", "createdAt": "2020-09-01T22:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMzA3NQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r482333075", "bodyText": "@jcamachor @thejasmn Please check if the changes look good.", "author": "kishendas", "createdAt": "2020-09-02T19:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1ODQxOA==", "url": "https://github.com/apache/hive/pull/1443#discussion_r482558418", "bodyText": "New code makes sense to me. @thejasmn could you take a quick look in case I am missing anything?", "author": "jcamachor", "createdAt": "2020-09-02T22:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d50b57e5688b9b2c36536da329cd25150a5a205f", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java b/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\nindex c710957fb6..b3d1f3b95b 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\n\n@@ -1233,10 +1234,15 @@ private TGetInfoResp getServerInfo(TGetInfoType type) throws SQLException {\n     return resp;\n   }\n \n-  private boolean getHiveDefaultNullsLast() {\n+  /**\n+   * This returns Hive configuration for HIVE_DEFAULT_NULLS_LAST.\n+   *\n+   * @param hiveConfs\n+   * @return\n+   */\n+  public static boolean getHiveDefaultNullsLast(Map<String, String> hiveConfs) {\n     boolean response = ConfVars.HIVE_DEFAULT_NULLS_LAST.defaultBoolVal;\n-    Map<String, String> hiveConfs = connection.getConnParams().getHiveConfs();\n-    if ((hiveConfs != null) && (hiveConfs.get(ConfVars.HIVE_DEFAULT_NULLS_LAST) != null)) {\n+    if ((hiveConfs != null) && (hiveConfs.get(Utils.HIVE_CONF_PREFIX + ConfVars.HIVE_DEFAULT_NULLS_LAST) != null)) {\n       response = Boolean.parseBoolean(hiveConfs.get(HiveConf.ConfVars.HIVE_DEFAULT_NULLS_LAST));\n     }\n     return response;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjY0OA==", "url": "https://github.com/apache/hive/pull/1443#discussion_r479722648", "bodyText": "An unit test would be useful for nullsAreSortedHigh and nullsAreSortedLow", "author": "thejasmn", "createdAt": "2020-08-30T05:07:06Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java", "diffHunk": "@@ -855,19 +860,19 @@ public boolean nullPlusNonNullIsNull() throws SQLException {\n   }\n \n   public boolean nullsAreSortedAtEnd() throws SQLException {\n-    throw new SQLFeatureNotSupportedException(\"Method not supported\");\n+    return false;\n   }\n \n   public boolean nullsAreSortedAtStart() throws SQLException {\n-    throw new SQLFeatureNotSupportedException(\"Method not supported\");\n+    return false;\n   }\n \n   public boolean nullsAreSortedHigh() throws SQLException {", "originalCommit": "90ee1d5530aface7b799e2b187176902bdbca7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMTgyNQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r480431825", "bodyText": "Added", "author": "kishendas", "createdAt": "2020-08-31T22:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMjY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "d50b57e5688b9b2c36536da329cd25150a5a205f", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java b/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\nindex c710957fb6..b3d1f3b95b 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\n\n@@ -868,11 +869,11 @@ public boolean nullsAreSortedAtStart() throws SQLException {\n   }\n \n   public boolean nullsAreSortedHigh() throws SQLException {\n-    return !getHiveDefaultNullsLast();\n+    return !getHiveDefaultNullsLast(connection.getConnParams().getHiveConfs());\n   }\n \n   public boolean nullsAreSortedLow() throws SQLException {\n-    return getHiveDefaultNullsLast();\n+    return getHiveDefaultNullsLast(connection.getConnParams().getHiveConfs());\n   }\n \n   public boolean othersDeletesAreVisible(int type) throws SQLException {\n"}}, {"oid": "99ed1252723928768764e59badac714b55c3e431", "url": "https://github.com/apache/hive/commit/99ed1252723928768764e59badac714b55c3e431", "message": "add unit test", "committedDate": "2020-08-31T22:20:09Z", "type": "commit"}, {"oid": "d50b57e5688b9b2c36536da329cd25150a5a205f", "url": "https://github.com/apache/hive/commit/d50b57e5688b9b2c36536da329cd25150a5a205f", "message": "Add unit test", "committedDate": "2020-08-31T22:22:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5NTc5Mg==", "url": "https://github.com/apache/hive/pull/1443#discussion_r481295792", "bodyText": "Can you also please test for value of true ? That way it checks that method return value is changing based on the config param value.", "author": "thejasmn", "createdAt": "2020-09-01T16:58:25Z", "path": "itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestHiveDatabaseMetaData.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.jdbc;\n+\n+import org.apache.hive.jdbc.HiveConnection;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hive.jdbc.Utils;\n+import org.apache.hive.jdbc.Utils.JdbcConnectionParams;\n+\n+\n+import java.util.HashMap;\n+import java.util.Properties;\n+import java.util.Map;\n+import java.sql.SQLException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * TestHiveDatabaseMetaData.\n+ *\n+ */\n+public class TestHiveDatabaseMetaData {\n+\n+  private static final Map<String, String> map = new HashMap<>();\n+  private HiveDatabaseMetaData hiveDatabaseMetaData;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    map.put(Utils.HIVE_CONF_PREFIX + ConfVars.HIVE_DEFAULT_NULLS_LAST, \"false\");", "originalCommit": "d50b57e5688b9b2c36536da329cd25150a5a205f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTE1Nw==", "url": "https://github.com/apache/hive/pull/1443#discussion_r481415157", "bodyText": "Done", "author": "kishendas", "createdAt": "2020-09-01T20:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5NTc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "99e04d3760353f248769ba707fd8db06f6c00472", "chunk": "diff --git a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestHiveDatabaseMetaData.java b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestHiveDatabaseMetaData.java\nindex f1693708ed..5bc23b874c 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestHiveDatabaseMetaData.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestHiveDatabaseMetaData.java\n\n@@ -24,7 +24,7 @@\n import org.apache.hive.jdbc.Utils.JdbcConnectionParams;\n \n \n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Properties;\n import java.util.Map;\n import java.sql.SQLException;\n"}}, {"oid": "99e04d3760353f248769ba707fd8db06f6c00472", "url": "https://github.com/apache/hive/commit/99e04d3760353f248769ba707fd8db06f6c00472", "message": "Add more tests", "committedDate": "2020-09-01T20:27:31Z", "type": "commit"}, {"oid": "c57a1e5e7ac0ef30e2c83b15ff5ea52bfb763e01", "url": "https://github.com/apache/hive/commit/c57a1e5e7ac0ef30e2c83b15ff5ea52bfb763e01", "message": "remove logger", "committedDate": "2020-09-01T20:30:55Z", "type": "commit"}, {"oid": "b2c817ab5bbd6573f3793e43306da2cd26ee1e61", "url": "https://github.com/apache/hive/commit/b2c817ab5bbd6573f3793e43306da2cd26ee1e61", "message": "remove logger", "committedDate": "2020-09-01T20:32:17Z", "type": "commit"}, {"oid": "7184b4f27067abfec9e4c1ecf1b869dc0ea9d8e8", "url": "https://github.com/apache/hive/commit/7184b4f27067abfec9e4c1ecf1b869dc0ea9d8e8", "message": "remove logger", "committedDate": "2020-09-01T20:33:38Z", "type": "commit"}, {"oid": "c2dc34c3a793a735fdd94f76025f9f1402c6c45f", "url": "https://github.com/apache/hive/commit/c2dc34c3a793a735fdd94f76025f9f1402c6c45f", "message": "Pull HiveConf from HS2", "committedDate": "2020-09-02T19:21:01Z", "type": "commit"}, {"oid": "56bd77d27283a511932f53121c11d9988ef2e2ed", "url": "https://github.com/apache/hive/commit/56bd77d27283a511932f53121c11d9988ef2e2ed", "message": "Pull HiveConf from HS2", "committedDate": "2020-09-02T19:22:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyNDMxOQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r482524319", "bodyText": "Shouldn't this be the opposite, i.e., isn't hive.default.nulls.last same as nullsAreSortedHigh?\nWhether to set NULLS LAST as the default null ordering for ASC order.", "author": "jcamachor", "createdAt": "2020-09-02T22:10:30Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java", "diffHunk": "@@ -855,19 +860,19 @@ public boolean nullPlusNonNullIsNull() throws SQLException {\n   }\n \n   public boolean nullsAreSortedAtEnd() throws SQLException {\n-    throw new SQLFeatureNotSupportedException(\"Method not supported\");\n+    return false;\n   }\n \n   public boolean nullsAreSortedAtStart() throws SQLException {\n-    throw new SQLFeatureNotSupportedException(\"Method not supported\");\n+    return false;\n   }\n \n   public boolean nullsAreSortedHigh() throws SQLException {\n-    throw new SQLFeatureNotSupportedException(\"Method not supported\");\n+    return !getHiveDefaultNullsLast(connection.getConnParams().getHiveConfs());", "originalCommit": "56bd77d27283a511932f53121c11d9988ef2e2ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMjE2OQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r482602169", "bodyText": "Right, fixed it.", "author": "kishendas", "createdAt": "2020-09-02T23:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyNDMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c366a2836c087ccc14a18dfadf51bf6f3fe9b414", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java b/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\nindex 8a84b137e7..f8a620f2ff 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\n\n@@ -868,11 +868,11 @@ public boolean nullsAreSortedAtStart() throws SQLException {\n   }\n \n   public boolean nullsAreSortedHigh() throws SQLException {\n-    return !getHiveDefaultNullsLast(connection.getConnParams().getHiveConfs());\n+    return getHiveDefaultNullsLast(connection.getConnParams().getHiveConfs());\n   }\n \n   public boolean nullsAreSortedLow() throws SQLException {\n-    return getHiveDefaultNullsLast(connection.getConnParams().getHiveConfs());\n+    return !getHiveDefaultNullsLast(connection.getConnParams().getHiveConfs());\n   }\n \n   public boolean othersDeletesAreVisible(int type) throws SQLException {\n"}}, {"oid": "c366a2836c087ccc14a18dfadf51bf6f3fe9b414", "url": "https://github.com/apache/hive/commit/c366a2836c087ccc14a18dfadf51bf6f3fe9b414", "message": "Fixed the logic", "committedDate": "2020-09-02T23:40:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MzQ5Mw==", "url": "https://github.com/apache/hive/pull/1443#discussion_r483153493", "bodyText": "The setting in client side should override the server settings. ie, server setting should be used if no such value is set in the client side\nCan we make this generic ? Ie, loop through all the server settings and set it in hiveConfs only if there is no value set currently ?", "author": "thejasmn", "createdAt": "2020-09-03T17:49:40Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -866,6 +874,13 @@ private void openSession() throws SQLException {\n     try {\n       TOpenSessionResp openResp = client.OpenSession(openReq);\n \n+      // Override HS2 server HiveConf in Connection parameter HiveConf", "originalCommit": "c366a2836c087ccc14a18dfadf51bf6f3fe9b414", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2ODU3NQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r483268575", "bodyText": "Done", "author": "kishendas", "createdAt": "2020-09-03T21:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MzQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "950c0e9c980fb7b9f30d133541c19f59e5ee0ebf", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 2a631f533d..10552aff8c 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -874,12 +875,12 @@ private void openSession() throws SQLException {\n     try {\n       TOpenSessionResp openResp = client.OpenSession(openReq);\n \n-      // Override HS2 server HiveConf in Connection parameter HiveConf\n+      // Populate a given configuration from HS2 server HiveConf, only if that configuration\n+      // is not already present in Connection parameter HiveConf i.e., client side configuration\n+      // takes precedence over the server side configuration.\n       Map<String, String> serverHiveConf = openResp.getConfiguration();\n-      if (serverHiveConf.containsKey(ConfVars.HIVE_DEFAULT_NULLS_LAST.varname)) {\n-        connParams.getHiveConfs().put(JdbcConnectionParams.HIVE_DEFAULT_NULLS_LAST_KEY,\n-            serverHiveConf.get(ConfVars.HIVE_DEFAULT_NULLS_LAST.varname));\n-      }\n+\n+      updateServerHiveConf(serverHiveConf);\n \n       // validate connection\n       Utils.verifySuccess(openResp.getStatus());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1ODQ4NQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r483158485", "bodyText": "This if statement should never return false. Something is wrong if it does, we should throw an error in that case (otherwise, we might run into some harder to debug issues).", "author": "thejasmn", "createdAt": "2020-09-03T17:58:37Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java", "diffHunk": "@@ -1227,4 +1232,18 @@ private TGetInfoResp getServerInfo(TGetInfoType type) throws SQLException {\n     Utils.verifySuccess(resp.getStatus());\n     return resp;\n   }\n+\n+  /**\n+   * This returns Hive configuration for HIVE_DEFAULT_NULLS_LAST.\n+   *\n+   * @param hiveConfs\n+   * @return\n+   */\n+  public static boolean getHiveDefaultNullsLast(Map<String, String> hiveConfs) {\n+    boolean response = ConfVars.HIVE_DEFAULT_NULLS_LAST.defaultBoolVal;\n+    if ((hiveConfs != null) && (hiveConfs.get(JdbcConnectionParams.HIVE_DEFAULT_NULLS_LAST_KEY) != null)) {", "originalCommit": "c366a2836c087ccc14a18dfadf51bf6f3fe9b414", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2ODUzMA==", "url": "https://github.com/apache/hive/pull/1443#discussion_r483168530", "bodyText": "I think there can be JDBC tests where hiveConf can come as null. I can change this and see how many tests fail.", "author": "kishendas", "createdAt": "2020-09-03T18:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1ODQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2ODYzOA==", "url": "https://github.com/apache/hive/pull/1443#discussion_r483268638", "bodyText": "Done", "author": "kishendas", "createdAt": "2020-09-03T21:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1ODQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "950c0e9c980fb7b9f30d133541c19f59e5ee0ebf", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java b/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\nindex f8a620f2ff..acb4110edf 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java\n\n@@ -1239,11 +1239,13 @@ private TGetInfoResp getServerInfo(TGetInfoType type) throws SQLException {\n    * @param hiveConfs\n    * @return\n    */\n-  public static boolean getHiveDefaultNullsLast(Map<String, String> hiveConfs) {\n-    boolean response = ConfVars.HIVE_DEFAULT_NULLS_LAST.defaultBoolVal;\n-    if ((hiveConfs != null) && (hiveConfs.get(JdbcConnectionParams.HIVE_DEFAULT_NULLS_LAST_KEY) != null)) {\n-      response = Boolean.parseBoolean(hiveConfs.get(JdbcConnectionParams.HIVE_DEFAULT_NULLS_LAST_KEY));\n+  public static boolean getHiveDefaultNullsLast(Map<String, String> hiveConfs) throws SQLException {\n+    if (hiveConfs == null) {\n+      throw new SQLException(\"hiveConfs is not available\");\n     }\n-    return response;\n+    if (hiveConfs.get(JdbcConnectionParams.HIVE_DEFAULT_NULLS_LAST_KEY) == null) {\n+      throw new SQLException(\"HIVE_DEFAULT_NULLS_LAST is not available\");\n+    }\n+    return Boolean.parseBoolean(hiveConfs.get(JdbcConnectionParams.HIVE_DEFAULT_NULLS_LAST_KEY));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MzQ5OQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r483163499", "bodyText": "Can we add a test to verify we are getting the config value from server ? Either in TestHiveDatabaseMetaData or a different test ?", "author": "thejasmn", "createdAt": "2020-09-03T18:08:20Z", "path": "service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java", "diffHunk": "@@ -326,10 +327,12 @@ public TOpenSessionResp OpenSession(TOpenSessionReq req) throws TException {\n \n       final int fetchSize = hiveConf.getIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_RESULTSET_DEFAULT_FETCH_SIZE);\n \n+      Map<String, String> map = new HashMap<>();", "originalCommit": "c366a2836c087ccc14a18dfadf51bf6f3fe9b414", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2ODg3Nw==", "url": "https://github.com/apache/hive/pull/1443#discussion_r483268877", "bodyText": "Sure, I will look into this.", "author": "kishendas", "createdAt": "2020-09-03T21:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA0Nzc5MQ==", "url": "https://github.com/apache/hive/pull/1443#discussion_r484047791", "bodyText": "Updated the existing test case TestThriftCliServiceWithInfoMessage.java for this. Please take a look, when you get time.", "author": "kishendas", "createdAt": "2020-09-06T09:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MzQ5OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d4ff1e6e5a6506490c1e62bc6ae3220a84037912", "url": "https://github.com/apache/hive/commit/d4ff1e6e5a6506490c1e62bc6ae3220a84037912", "message": "Address Thejas feedback", "committedDate": "2020-09-03T21:32:42Z", "type": "commit"}, {"oid": "950c0e9c980fb7b9f30d133541c19f59e5ee0ebf", "url": "https://github.com/apache/hive/commit/950c0e9c980fb7b9f30d133541c19f59e5ee0ebf", "message": "Address Thejas feedback", "committedDate": "2020-09-03T21:33:26Z", "type": "commit"}, {"oid": "2a5bd456dc7dd2a574648250a993d7b135158e00", "url": "https://github.com/apache/hive/commit/2a5bd456dc7dd2a574648250a993d7b135158e00", "message": "Fix unit test", "committedDate": "2020-09-04T00:41:10Z", "type": "commit"}, {"oid": "89c1d218c9bae53ba2ae60895e37507000de6d67", "url": "https://github.com/apache/hive/commit/89c1d218c9bae53ba2ae60895e37507000de6d67", "message": "Fix unit tests", "committedDate": "2020-09-04T19:22:27Z", "type": "commit"}, {"oid": "a1fafd10741e355ce149f1899d889c6b1c409743", "url": "https://github.com/apache/hive/commit/a1fafd10741e355ce149f1899d889c6b1c409743", "message": "Fix unit test", "committedDate": "2020-09-04T23:30:35Z", "type": "commit"}, {"oid": "85665be559cc3c1a093adf1cd0f825ce6760711c", "url": "https://github.com/apache/hive/commit/85665be559cc3c1a093adf1cd0f825ce6760711c", "message": "Fix unit test", "committedDate": "2020-09-05T09:04:14Z", "type": "commit"}, {"oid": "1a4910769bd42e5a27cd224f48615a2da2b12991", "url": "https://github.com/apache/hive/commit/1a4910769bd42e5a27cd224f48615a2da2b12991", "message": "Fix test", "committedDate": "2020-09-05T09:15:33Z", "type": "commit"}, {"oid": "1511f893559a8a86c7c2de940231b338d27a7236", "url": "https://github.com/apache/hive/commit/1511f893559a8a86c7c2de940231b338d27a7236", "message": "Add more tests", "committedDate": "2020-09-06T09:41:34Z", "type": "commit"}, {"oid": "503aff6caa59d9b64ef10565d8b982b338febdbc", "url": "https://github.com/apache/hive/commit/503aff6caa59d9b64ef10565d8b982b338febdbc", "message": "Add comment", "committedDate": "2020-09-06T16:10:28Z", "type": "commit"}]}