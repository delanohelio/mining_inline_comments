{"pr_number": 1726, "pr_title": "HIVE-24458: Add a method to provide a non-normalized ExpressionTree", "pr_createdAt": "2020-12-01T19:04:24Z", "pr_url": "https://github.com/apache/hive/pull/1726", "timeline": [{"oid": "ed734fa1a36e6af98b926aac8659755d1f29e208", "url": "https://github.com/apache/hive/commit/ed734fa1a36e6af98b926aac8659755d1f29e208", "message": "HIVE-24458: Add a method to provide a non-normalized ExpressionTree from SArgs.", "committedDate": "2020-12-01T20:56:49Z", "type": "forcePushed"}, {"oid": "3003285f336e27ac988183ea144e042aea233198", "url": "https://github.com/apache/hive/commit/3003285f336e27ac988183ea144e042aea233198", "message": "HIVE-24458: Add a method to provide a non-normalized ExpressionTree from SArgs.", "committedDate": "2020-12-02T17:12:11Z", "type": "commit"}, {"oid": "3003285f336e27ac988183ea144e042aea233198", "url": "https://github.com/apache/hive/commit/3003285f336e27ac988183ea144e042aea233198", "message": "HIVE-24458: Add a method to provide a non-normalized ExpressionTree from SArgs.", "committedDate": "2020-12-02T17:12:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTUwMDI4Nw==", "url": "https://github.com/apache/hive/pull/1726#discussion_r565500287", "bodyText": "unfinished sentece", "author": "kgyrtkirk", "createdAt": "2021-01-27T17:33:27Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "diffHunk": "@@ -162,6 +162,11 @@ public boolean isNeeded() {\n    */\n   public ExpressionTree getExpression();\n \n+  /**\n+   * Get the expression tree without the", "originalCommit": "3003285f336e27ac988183ea144e042aea233198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "chunk": "diff --git a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\nindex ad5ed27a1c..2e73ac37b9 100644\n--- a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\n+++ b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\n\n@@ -163,9 +163,11 @@ public boolean isNeeded() {\n   public ExpressionTree getExpression();\n \n   /**\n-   * Get the expression tree without the\n+   * Get the expression tree without the normalization to conjunctive normal\n+   * form. It will still have the negations pushed to the leaves, but it\n+   * won't have the potentially exponential expansion.\n    */\n-  public ExpressionTree getUnexpandedExpression();\n+  public ExpressionTree getCompactExpression();\n \n   /**\n    * Evaluate the entire predicate based on the values for the leaf predicates.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTUwMjMwMQ==", "url": "https://github.com/apache/hive/pull/1726#discussion_r565502301", "bodyText": "I find unexpanded a little strange - a different keyword might fit this thing better (what do you think about compact or  original).", "author": "kgyrtkirk", "createdAt": "2021-01-27T17:36:24Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "diffHunk": "@@ -162,6 +162,11 @@ public boolean isNeeded() {\n    */\n   public ExpressionTree getExpression();\n \n+  /**\n+   * Get the expression tree without the\n+   */\n+  public ExpressionTree getUnexpandedExpression();", "originalCommit": "3003285f336e27ac988183ea144e042aea233198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "chunk": "diff --git a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\nindex ad5ed27a1c..2e73ac37b9 100644\n--- a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\n+++ b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\n\n@@ -163,9 +163,11 @@ public boolean isNeeded() {\n   public ExpressionTree getExpression();\n \n   /**\n-   * Get the expression tree without the\n+   * Get the expression tree without the normalization to conjunctive normal\n+   * form. It will still have the negations pushed to the leaves, but it\n+   * won't have the potentially exponential expansion.\n    */\n-  public ExpressionTree getUnexpandedExpression();\n+  public ExpressionTree getCompactExpression();\n \n   /**\n    * Evaluate the entire predicate based on the values for the leaf predicates.\n"}}, {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "url": "https://github.com/apache/hive/commit/7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "message": "HIVE-24458 fix javadoc for new function", "committedDate": "2021-01-27T21:43:28Z", "type": "commit"}, {"oid": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "url": "https://github.com/apache/hive/commit/7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "message": "HIVE-24458 fix javadoc for new function", "committedDate": "2021-01-27T21:43:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA2MDIxMQ==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566060211", "bodyText": "Unused variable", "author": "pgaref", "createdAt": "2021-01-28T12:34:56Z", "path": "ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java", "diffHunk": "@@ -85,100 +89,101 @@ public static PredicateLeaf createPredicateLeaf(PredicateLeaf.Operator operator,\n   @Test\n   public void testNotPushdown() throws Exception {\n     assertEquals(\"leaf-1\", SearchArgumentImpl.BuilderImpl.pushDownNot(leaf(1))\n-        .toString());\n+        .toOldString());\n     assertEquals(\"(not leaf-1)\",\n-        SearchArgumentImpl.BuilderImpl.pushDownNot(not(leaf(1))).toString());\n+        SearchArgumentImpl.BuilderImpl.pushDownNot(not(leaf(1))).toOldString());\n     assertEquals(\"leaf-1\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(not(not(leaf(1))))\n-            .toString());\n+            .toOldString());\n     assertEquals(\"(not leaf-1)\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(not(not(not(leaf(1))))).\n-            toString());\n+            toOldString());\n     assertEquals(\"(or leaf-1 (not leaf-2))\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(not(and(not(leaf(1)),\n-            leaf(2)))).toString());\n+            leaf(2)))).toOldString());\n     assertEquals(\"(and (not leaf-1) leaf-2)\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(not(or(leaf(1),\n-            not(leaf(2))))).toString());\n+            not(leaf(2))))).toOldString());\n     assertEquals(\"(or (or (not leaf-1) leaf-2) leaf-3)\",\n         SearchArgumentImpl.BuilderImpl.pushDownNot(or(not(and(leaf(1),\n                 not(leaf(2)))),\n-            not(not(leaf(3))))).toString());\n+            not(not(leaf(3))))).toOldString());\n     assertEquals(\"NO\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.YES))).toString());\n+        not(constant(TruthValue.YES))).toOldString());\n     assertEquals(\"YES\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.NO))).toString());\n+        not(constant(TruthValue.NO))).toOldString());\n     assertEquals(\"NULL\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.NULL))).toString());\n+        not(constant(TruthValue.NULL))).toOldString());\n     assertEquals(\"YES_NO\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.YES_NO))).toString());\n+        not(constant(TruthValue.YES_NO))).toOldString());\n     assertEquals(\"YES_NULL\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.NO_NULL))).toString());\n+        not(constant(TruthValue.NO_NULL))).toOldString());\n     assertEquals(\"NO_NULL\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.YES_NULL))).toString());\n+        not(constant(TruthValue.YES_NULL))).toOldString());\n     assertEquals(\"YES_NO_NULL\", SearchArgumentImpl.BuilderImpl.pushDownNot(\n-        not(constant(TruthValue.YES_NO_NULL))).toString());\n+        not(constant(TruthValue.YES_NO_NULL))).toOldString());\n   }\n \n   @Test\n   public void testFlatten() throws Exception {\n-    assertEquals(\"leaf-1\", SearchArgumentImpl.BuilderImpl.flatten(leaf(1)).toString());\n+    PredicateLeafImpl leaf1 = new PredicateLeafImpl();", "originalCommit": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbbc088530f1e80494248266ebe3e06e908403b7", "chunk": "diff --git a/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java b/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java\nindex 4d973b4385..afa9399306 100644\n--- a/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java\n+++ b/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java\n\n@@ -126,7 +126,6 @@ public void testNotPushdown() throws Exception {\n \n   @Test\n   public void testFlatten() throws Exception {\n-    PredicateLeafImpl leaf1 = new PredicateLeafImpl();\n     assertEquals(\"leaf-1\", SearchArgumentImpl.BuilderImpl.flatten(leaf(1)).toOldString());\n     assertEquals(\"NO\",\n         SearchArgumentImpl.BuilderImpl.flatten(constant(TruthValue.NO)).toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA3OTIwMg==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566079202", "bodyText": "This could be changed to PredicateLeaf -- see below", "author": "pgaref", "createdAt": "2021-01-28T13:07:12Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java", "diffHunk": "@@ -31,25 +31,25 @@\n   public enum Operator {OR, AND, NOT, LEAF, CONSTANT}\n   private final Operator operator;\n   private final List<ExpressionTree> children;\n-  private int leaf;\n+  private final SearchArgumentImpl.PredicateLeafImpl leaf;", "originalCommit": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbbc088530f1e80494248266ebe3e06e908403b7", "chunk": "diff --git a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java\nindex bef7a6a25c..2b58e1dcf1 100644\n--- a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java\n+++ b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java\n\n@@ -31,7 +31,7 @@\n   public enum Operator {OR, AND, NOT, LEAF, CONSTANT}\n   private final Operator operator;\n   private final List<ExpressionTree> children;\n-  private final SearchArgumentImpl.PredicateLeafImpl leaf;\n+  private final PredicateLeaf leaf;\n   private final SearchArgument.TruthValue constant;\n \n   ExpressionTree() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA4MDAzNg==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566080036", "bodyText": "Nit: maybe we should also explicitly mention in getExpression doc that it normalizes the expression", "author": "pgaref", "createdAt": "2021-01-28T13:08:32Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java", "diffHunk": "@@ -162,6 +162,13 @@ public boolean isNeeded() {\n    */\n   public ExpressionTree getExpression();\n \n+  /**\n+   * Get the expression tree without the normalization to conjunctive normal", "originalCommit": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbbc088530f1e80494248266ebe3e06e908403b7", "chunk": "diff --git a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\nindex 2e73ac37b9..771da03fb5 100644\n--- a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\n+++ b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgument.java\n\n@@ -157,8 +157,9 @@ public boolean isNeeded() {\n   public List<PredicateLeaf> getLeaves();\n \n   /**\n-   * Get the expression tree. This should only needed for file formats that\n-   * need to translate the expression to an internal form.\n+   * Get the expression tree normalized into conjunctive normal form.\n+   * This should only needed for file formats that need to translate\n+   * the expression to an internal form.\n    */\n   public ExpressionTree getExpression();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA4NDEzNQ==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566084135", "bodyText": "maybe rename vars to compact and normalized ExpressionTree to avoid confusion?", "author": "pgaref", "createdAt": "2021-01-28T13:15:22Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -504,28 +493,18 @@ public SearchArgument build() {\n         throw new IllegalArgumentException(\"Failed to end \" +\n             currentTree.size() + \" operations.\");\n       }\n+      ExpressionTree optimized = optimize(root);", "originalCommit": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA4ODY3Ng==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566088676", "bodyText": "Apache License?", "author": "pgaref", "createdAt": "2021-01-28T13:22:28Z", "path": "storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentFactoryTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.apache.hadoop.hive.ql.io.sarg;", "originalCommit": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbbc088530f1e80494248266ebe3e06e908403b7", "chunk": "diff --git a/storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentFactoryTest.java b/storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentFactory.java\nsimilarity index 86%\nrename from storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentFactoryTest.java\nrename to storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentFactory.java\nindex 464e9d19bf..3c4479e0e6 100644\n--- a/storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentFactoryTest.java\n+++ b/storage-api/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentFactory.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.apache.hadoop.hive.ql.io.sarg;\n \n import org.apache.hadoop.conf.Configuration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA5NjExMA==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566096110", "bodyText": "I believe Id setter and getter could be moved to the PredicateLeaf interface.\nIt would be cleaner and as a result addLeaf would need less modifications.", "author": "pgaref", "createdAt": "2021-01-28T13:33:57Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -132,6 +130,14 @@ public Object getLiteral() {\n       return literalList;\n     }\n \n+    public int getId() {", "originalCommit": "7aa76993cea7e5ab43e803dc026fb6eef7a676f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM0MzEwMA==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566343100", "bodyText": "I made getId more visible, but left setId as private. setId only makes sense in the context of the builder.", "author": "omalley", "createdAt": "2021-01-28T19:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA5NjExMA=="}], "type": "inlineReview", "revised_code": {"commit": "dbbc088530f1e80494248266ebe3e06e908403b7", "chunk": "diff --git a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java\nindex b69e34a43f..7aeef90691 100644\n--- a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java\n+++ b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java\n\n@@ -130,6 +130,7 @@ public Object getLiteral() {\n       return literalList;\n     }\n \n+    @Override\n     public int getId() {\n       return id;\n     }\n"}}, {"oid": "dbbc088530f1e80494248266ebe3e06e908403b7", "url": "https://github.com/apache/hive/commit/dbbc088530f1e80494248266ebe3e06e908403b7", "message": "Addressing Panos' review comments.", "committedDate": "2021-01-28T18:31:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNDQ1NQ==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566324455", "bodyText": "This can now become PredicateLeaf", "author": "pgaref", "createdAt": "2021-01-28T18:41:39Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java", "diffHunk": "@@ -31,25 +31,25 @@\n   public enum Operator {OR, AND, NOT, LEAF, CONSTANT}\n   private final Operator operator;\n   private final List<ExpressionTree> children;\n-  private int leaf;\n+  private final PredicateLeaf leaf;\n   private final SearchArgument.TruthValue constant;\n \n   ExpressionTree() {\n     operator = null;\n     children = null;\n-    leaf = 0;\n+    leaf = null;\n     constant = null;\n   }\n \n   ExpressionTree(Operator op, ExpressionTree... kids) {\n     operator = op;\n-    children = new ArrayList<ExpressionTree>();\n-    leaf = -1;\n+    children = new ArrayList<>();\n+    leaf = null;\n     this.constant = null;\n     Collections.addAll(children, kids);\n   }\n \n-  ExpressionTree(int leaf) {\n+  ExpressionTree(SearchArgumentImpl.PredicateLeafImpl leaf) {", "originalCommit": "dbbc088530f1e80494248266ebe3e06e908403b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cef863acdaaa6b9b46061420d525008294e3bca", "chunk": "diff --git a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java\nindex 2b58e1dcf1..9895c4bfad 100644\n--- a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java\n+++ b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/ExpressionTree.java\n\n@@ -49,7 +49,7 @@\n     Collections.addAll(children, kids);\n   }\n \n-  ExpressionTree(SearchArgumentImpl.PredicateLeafImpl leaf) {\n+  ExpressionTree(PredicateLeaf leaf) {\n     operator = Operator.LEAF;\n     children = null;\n     this.leaf = leaf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNTA5OQ==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566325099", "bodyText": "Argument may change to PredicateLeaf?", "author": "pgaref", "createdAt": "2021-01-28T18:42:44Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -312,12 +338,11 @@ public Builder end() {\n       return this;\n     }\n \n-    private int addLeaf(PredicateLeaf leaf) {\n-      Integer result = leaves.get(leaf);\n+    private PredicateLeafImpl addLeaf(PredicateLeafImpl leaf) {", "originalCommit": "dbbc088530f1e80494248266ebe3e06e908403b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cef863acdaaa6b9b46061420d525008294e3bca", "chunk": "diff --git a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java\nindex 7aeef90691..b7d03fd4c3 100644\n--- a/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java\n+++ b/storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java\n\n@@ -338,8 +338,8 @@ public Builder end() {\n       return this;\n     }\n \n-    private PredicateLeafImpl addLeaf(PredicateLeafImpl leaf) {\n-      PredicateLeafImpl result = leaves.get(leaf);\n+    private PredicateLeaf addLeaf(PredicateLeaf leaf) {\n+      PredicateLeaf result = leaves.get(leaf);\n       if (result == null) {\n         leaves.put(leaf, leaf);\n         return leaf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNTM1NQ==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566325355", "bodyText": "same", "author": "pgaref", "createdAt": "2021-01-28T18:43:11Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -330,7 +355,7 @@ public Builder lessThan(String column, PredicateLeaf.Type type,\n       if (column == null || literal == null) {\n         parent.getChildren().add(new ExpressionTree(TruthValue.YES_NO_NULL));\n       } else {\n-        PredicateLeaf leaf =\n+        PredicateLeafImpl leaf =", "originalCommit": "dbbc088530f1e80494248266ebe3e06e908403b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNTc2Mg==", "url": "https://github.com/apache/hive/pull/1726#discussion_r566325762", "bodyText": "same on all alterations below..", "author": "pgaref", "createdAt": "2021-01-28T18:43:52Z", "path": "storage-api/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java", "diffHunk": "@@ -345,7 +370,7 @@ public Builder lessThanEquals(String column, PredicateLeaf.Type type,\n       if (column == null || literal == null) {\n         parent.getChildren().add(new ExpressionTree(TruthValue.YES_NO_NULL));\n       } else {\n-        PredicateLeaf leaf =\n+        PredicateLeafImpl leaf =", "originalCommit": "dbbc088530f1e80494248266ebe3e06e908403b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8cef863acdaaa6b9b46061420d525008294e3bca", "url": "https://github.com/apache/hive/commit/8cef863acdaaa6b9b46061420d525008294e3bca", "message": "Addressing Panos' comments and fixing two javadoc errors.", "committedDate": "2021-01-28T19:28:48Z", "type": "commit"}]}