{"pr_number": 1544, "pr_title": "HIVE-24221: Use vectorizable expression to combine multiple columns in semijoin bloom filters", "pr_createdAt": "2020-10-01T22:38:32Z", "pr_url": "https://github.com/apache/hive/pull/1544", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MjAxMA==", "url": "https://github.com/apache/hive/pull/1544#discussion_r504482010", "bodyText": "it seems like we have some inconsistency in GenericUDFMurmurHash which is registered as murmur_hash in the FunctionRegistry ; however in the UDF's annotation it only has hash - and here as well we use simply \"hash\".\na change like this will most likely cause a lot of q.out changes - could you file a follow-up ticket?", "author": "kgyrtkirk", "createdAt": "2020-10-14T08:07:15Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeDescUtils.java", "diffHunk": "@@ -233,6 +235,23 @@ public static ExprNodeGenericFuncDesc and(List<ExprNodeDesc> exps) {\n     return new ExprNodeGenericFuncDesc(TypeInfoFactory.booleanTypeInfo, new GenericUDFOPAnd(), \"and\", flatExps);\n   }\n \n+  /**\n+   * Create an expression for computing a hash by recursively hashing given expressions by two:\n+   * <pre>\n+   * Input: HASH(A, B, C, D)\n+   * Output: HASH(HASH(HASH(A,B),C),D)\n+   * </pre>\n+   */\n+  public static ExprNodeGenericFuncDesc hash(List<ExprNodeDesc> exps) {\n+    assert exps.size() >= 2;\n+    ExprNodeDesc hashExp = exps.get(0);\n+    for (int i = 1; i < exps.size(); i++) {\n+      List<ExprNodeDesc> hArgs = Arrays.asList(hashExp, exps.get(i));\n+      hashExp = new ExprNodeGenericFuncDesc(TypeInfoFactory.intTypeInfo, new GenericUDFMurmurHash(), \"hash\", hArgs);", "originalCommit": "5985e250350ed627c93dce1104506a16841010d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzODQ2MA==", "url": "https://github.com/apache/hive/pull/1544#discussion_r504638460", "bodyText": "Good catch @kgyrtkirk ! I've never noticed that we have two different UDFs for hashing. Indeed having the same annotation can create quite some confusion and difficult to debug problems. I guess your suggestion is to change the annotation of GenericUDFMurmurHash to murmur_hash right?", "author": "zabetak", "createdAt": "2020-10-14T12:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MjAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMzE4Mg==", "url": "https://github.com/apache/hive/pull/1544#discussion_r542113182", "bodyText": "yes; excatly", "author": "kgyrtkirk", "createdAt": "2020-12-14T05:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MjAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMzk1OQ==", "url": "https://github.com/apache/hive/pull/1544#discussion_r549513959", "bodyText": "Logged https://issues.apache.org/jira/browse/HIVE-24572 for this purpose.", "author": "zabetak", "createdAt": "2020-12-28T23:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "0a9fecd47f7b2d9bf9d8436884f4c683dc48dabd", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeDescUtils.java b/ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeDescUtils.java\nindex 336b8f06af..7a4ff2d0bf 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeDescUtils.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeDescUtils.java\n\n@@ -236,13 +240,13 @@ public static ExprNodeGenericFuncDesc and(List<ExprNodeDesc> exps) {\n   }\n \n   /**\n-   * Create an expression for computing a hash by recursively hashing given expressions by two:\n+   * Create an expression for computing a murmur hash by recursively hashing given expressions by two:\n    * <pre>\n    * Input: HASH(A, B, C, D)\n    * Output: HASH(HASH(HASH(A,B),C),D)\n    * </pre>\n    */\n-  public static ExprNodeGenericFuncDesc hash(List<ExprNodeDesc> exps) {\n+  public static ExprNodeGenericFuncDesc murmurHash(List<ExprNodeDesc> exps) {\n     assert exps.size() >= 2;\n     ExprNodeDesc hashExp = exps.get(0);\n     for (int i = 1; i < exps.size(); i++) {\n"}}, {"oid": "0a9fecd47f7b2d9bf9d8436884f4c683dc48dabd", "url": "https://github.com/apache/hive/commit/0a9fecd47f7b2d9bf9d8436884f4c683dc48dabd", "message": "HIVE-24221: Use vectorizable expression to combine multiple columns in semijoin bloom filters\n\nUse hash(hash(hash(a,b),c),d) instead of hash(a,b,c,d) when constructing\nthe multi-col semijoin reducer.", "committedDate": "2021-01-26T17:57:59Z", "type": "forcePushed"}, {"oid": "7fdc04fd165039ae64c459756d18a403ff61914f", "url": "https://github.com/apache/hive/commit/7fdc04fd165039ae64c459756d18a403ff61914f", "message": "HIVE-24221: Use vectorizable expression to combine multiple columns in semijoin bloom filters\n\nUse hash(hash(hash(a,b),c),d) instead of hash(a,b,c,d) when constructing\nthe multi-col semijoin reducer.", "committedDate": "2021-01-28T09:14:43Z", "type": "forcePushed"}, {"oid": "3c4af56bcec22b47a3031c151b39599691966d55", "url": "https://github.com/apache/hive/commit/3c4af56bcec22b47a3031c151b39599691966d55", "message": "HIVE-24221: Use vectorizable expression to combine multiple columns in semijoin bloom filters\n\nUse hash(hash(hash(a,b),c),d) instead of hash(a,b,c,d) when constructing\nthe multi-col semijoin reducer.", "committedDate": "2021-02-03T15:56:54Z", "type": "commit"}, {"oid": "3c4af56bcec22b47a3031c151b39599691966d55", "url": "https://github.com/apache/hive/commit/3c4af56bcec22b47a3031c151b39599691966d55", "message": "HIVE-24221: Use vectorizable expression to combine multiple columns in semijoin bloom filters\n\nUse hash(hash(hash(a,b),c),d) instead of hash(a,b,c,d) when constructing\nthe multi-col semijoin reducer.", "committedDate": "2021-02-03T15:56:54Z", "type": "forcePushed"}]}