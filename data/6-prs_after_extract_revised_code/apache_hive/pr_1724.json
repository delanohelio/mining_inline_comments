{"pr_number": 1724, "pr_title": "HIVE-24428: Concurrent add_partitions requests may lead to data loss", "pr_createdAt": "2020-12-01T14:46:36Z", "pr_url": "https://github.com/apache/hive/pull/1724", "timeline": [{"oid": "0e1cd6e620dbe558c5ce5087580ca32fd530af9e", "url": "https://github.com/apache/hive/commit/0e1cd6e620dbe558c5ce5087580ca32fd530af9e", "message": "x", "committedDate": "2020-11-25T13:34:29Z", "type": "commit"}, {"oid": "f4732ce8520682010767e882eed71e0ac04f1683", "url": "https://github.com/apache/hive/commit/f4732ce8520682010767e882eed71e0ac04f1683", "message": "Revert \"x\"\n\nThis reverts commit 0e1cd6e620dbe558c5ce5087580ca32fd530af9e.", "committedDate": "2020-11-25T13:34:31Z", "type": "commit"}, {"oid": "9934af9c399e3688e7e3ce8f57415e94679d7176", "url": "https://github.com/apache/hive/commit/9934af9c399e3688e7e3ce8f57415e94679d7176", "message": "port patch from the ancient one", "committedDate": "2020-12-01T13:32:39Z", "type": "commit"}, {"oid": "0bcc2bc2f7d30a8f295957653cace6b3b3573ac4", "url": "https://github.com/apache/hive/commit/0bcc2bc2f7d30a8f295957653cace6b3b3573ac4", "message": "fix", "committedDate": "2020-12-01T14:09:10Z", "type": "commit"}, {"oid": "4fa7915ada84cf115a98ac448f8d40909674ccbc", "url": "https://github.com/apache/hive/commit/4fa7915ada84cf115a98ac448f8d40909674ccbc", "message": "embed new cases into testmetrcis", "committedDate": "2020-12-01T14:25:58Z", "type": "commit"}, {"oid": "9371081ae205c36082430238aaba12b4e185e476", "url": "https://github.com/apache/hive/commit/9371081ae205c36082430238aaba12b4e185e476", "message": "add to erxisting case instead new testcases", "committedDate": "2020-12-01T14:26:45Z", "type": "commit"}, {"oid": "1bdb4fb8fa91d4eb8f3ee5bc5c0a6414745f3942", "url": "https://github.com/apache/hive/commit/1bdb4fb8fa91d4eb8f3ee5bc5c0a6414745f3942", "message": "rename dpp to dp", "committedDate": "2020-12-02T09:06:39Z", "type": "commit"}, {"oid": "e39cb6452d7cb9b75a80461fce7d4533df574d0b", "url": "https://github.com/apache/hive/commit/e39cb6452d7cb9b75a80461fce7d4533df574d0b", "message": "use java Optional instead spark?", "committedDate": "2020-12-02T09:59:30Z", "type": "commit"}, {"oid": "67bf0ab2f7f9fcab70dfda66fbfb973b4080ced6", "url": "https://github.com/apache/hive/commit/67bf0ab2f7f9fcab70dfda66fbfb973b4080ced6", "message": "dont acquire in case already owns", "committedDate": "2020-12-02T11:09:23Z", "type": "commit"}, {"oid": "fd84410f26cc346f95ac4ec4c1b35f4593f69796", "url": "https://github.com/apache/hive/commit/fd84410f26cc346f95ac4ec4c1b35f4593f69796", "message": "fix", "committedDate": "2020-12-02T11:13:30Z", "type": "commit"}, {"oid": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7", "url": "https://github.com/apache/hive/commit/2f236829e5fa09b6d7cce15d07a6c846ffac84f7", "message": "fix semi/exclusive", "committedDate": "2020-12-02T12:42:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r540222494", "bodyText": "Would it be better to create enum instead of string literals?", "author": "deniskuzZ", "createdAt": "2020-12-10T14:41:42Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -747,6 +753,92 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    // nothing needs to be done\n+    if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+\n+    if (\"none\".equalsIgnoreCase(lockFileMoveMode)) {", "originalCommit": "2f236829e5fa09b6d7cce15d07a6c846ffac84f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxMzkxNQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r540313915", "bodyText": "yes...in that case I would prefer to have the enum inside HiveConf - which is not how the HiveConf was designed...because that's not possible I resorted to string literals...\nI don't have a good idea how to do this in a bulletproof way...\n...or should I just declare an enum in this class - and parse the enum value into it and use that?", "author": "kgyrtkirk", "createdAt": "2020-12-10T16:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIzODc2OA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r542238768", "bodyText": "Yes, I think, having enum in MoveTask should be ok.  Btw, should we allow to modify HIVE_LOCK_FILE_MOVE_MODE in runtime, if not, we can init this enum in constructor or so.", "author": "deniskuzZ", "createdAt": "2020-12-14T09:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzODg5MQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r543338891", "bodyText": "the MoveTask is created in the TaskFactory - and the \"work\" is only set via setWork - I choose not to override that method and parsed the enum value right when its needed", "author": "kgyrtkirk", "createdAt": "2020-12-15T13:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex cb1bf1cb7b..28ef9c7ba6 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -788,17 +815,25 @@ public void close() throws IOException {\n \n   }\n \n-  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n-    // nothing needs to be done\n-    if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n-      return new LocalTableLock(Optional.empty());\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n     }\n-    String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n \n-    if (\"none\".equalsIgnoreCase(lockFileMoveMode)) {\n+    if (mode == LockFileMoveMode.none) {\n       return new LocalTableLock(Optional.empty());\n     }\n-    if (\"dp\".equalsIgnoreCase(lockFileMoveMode)) {\n+    if (mode == LockFileMoveMode.dp) {\n       if (loadTableWork.getDPCtx() == null) {\n         return new LocalTableLock(Optional.empty());\n       }\n"}}, {"oid": "84b04f6129461e200981e92401c7b24c0ec976c5", "url": "https://github.com/apache/hive/commit/84b04f6129461e200981e92401c7b24c0ec976c5", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24428-addpart-dataloss", "committedDate": "2020-12-14T10:35:00Z", "type": "commit"}, {"oid": "adfbc1d197a8ec07b1be706936ad68545cf03710", "url": "https://github.com/apache/hive/commit/adfbc1d197a8ec07b1be706936ad68545cf03710", "message": "test", "committedDate": "2020-12-15T11:33:57Z", "type": "commit"}, {"oid": "c14b35a5285d0c0bbc45beba73b5c42a74b9c77b", "url": "https://github.com/apache/hive/commit/c14b35a5285d0c0bbc45beba73b5c42a74b9c77b", "message": "w", "committedDate": "2020-12-15T12:42:51Z", "type": "commit"}, {"oid": "b77c8a75b477b3b604ea1d5a5ac033d03cddaa40", "url": "https://github.com/apache/hive/commit/b77c8a75b477b3b604ea1d5a5ac033d03cddaa40", "message": "en-back hms  changes", "committedDate": "2020-12-15T12:43:13Z", "type": "commit"}, {"oid": "6370f113dd2f61b99db0371832f13d34936227ca", "url": "https://github.com/apache/hive/commit/6370f113dd2f61b99db0371832f13d34936227ca", "message": "rename/etc", "committedDate": "2020-12-15T13:04:25Z", "type": "commit"}, {"oid": "18517f3f1f58dc81a07bb71e7f413e1085a25467", "url": "https://github.com/apache/hive/commit/18517f3f1f58dc81a07bb71e7f413e1085a25467", "message": "move", "committedDate": "2020-12-15T13:06:30Z", "type": "commit"}, {"oid": "9ba0496e7f7f3308de0d649a9a5d6e14c9fa48a1", "url": "https://github.com/apache/hive/commit/9ba0496e7f7f3308de0d649a9a5d6e14c9fa48a1", "message": "cleanup", "committedDate": "2020-12-15T13:07:01Z", "type": "commit"}, {"oid": "007e4dfd26d63bc898a1da6114a5e1f56a392c78", "url": "https://github.com/apache/hive/commit/007e4dfd26d63bc898a1da6114a5e1f56a392c78", "message": "cleanup", "committedDate": "2020-12-15T13:07:12Z", "type": "commit"}, {"oid": "88fa34764df583d57ccd1ef10bd822ec68c09593", "url": "https://github.com/apache/hive/commit/88fa34764df583d57ccd1ef10bd822ec68c09593", "message": "cleanup", "committedDate": "2020-12-15T13:11:27Z", "type": "commit"}, {"oid": "bc11bb62d3700b227f48b4683282b826b946f8bd", "url": "https://github.com/apache/hive/commit/bc11bb62d3700b227f48b4683282b826b946f8bd", "message": "clenaup", "committedDate": "2020-12-15T13:19:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5MTA2Nw==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553291067", "bodyText": "I think, it would be more cleaner to have 0 and 1 argument constructors. Based on current usages of  LocalTableLock constructor you know for sure if lock if null or not.", "author": "deniskuzZ", "createdAt": "2021-01-07T12:13:27Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5NDMwOQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553294309", "bodyText": "Favor static member classes over non static", "author": "deniskuzZ", "createdAt": "2021-01-07T12:20:19Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQxMzEyNA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r557413124", "bodyText": "its non-static because it needs access to the txnmanager.", "author": "kgyrtkirk", "createdAt": "2021-01-14T13:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5NDMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5NDk3Mw==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553294973", "bodyText": "should we lower log level to debug here to avoid extensive logging.", "author": "deniskuzZ", "createdAt": "2021-01-07T12:21:39Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5OTE1NA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553299154", "bodyText": "should we lower log level to debug here to avoid extensive logging", "author": "deniskuzZ", "createdAt": "2021-01-07T12:30:37Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5OTY4Nw==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553299687", "bodyText": "please use uppercase literals", "author": "deniskuzZ", "createdAt": "2021-01-07T12:31:54Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQxNjA2NA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r557416064", "bodyText": "I kept it lowercase to align with the set values of the hiveconf.\nreplaced it with uppercase ones", "author": "kgyrtkirk", "createdAt": "2021-01-14T14:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5OTY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNDM0NQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553304345", "bodyText": "'+' lock for correlation", "author": "deniskuzZ", "createdAt": "2021-01-07T12:42:10Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNTQzMg==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553305432", "bodyText": "could you please remove unneeded nesting here", "author": "deniskuzZ", "createdAt": "2021-01-07T12:44:35Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwNTk5Mw==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553305993", "bodyText": "nit. space", "author": "deniskuzZ", "createdAt": "2021-01-07T12:45:48Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwODQ3NQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553308475", "bodyText": "I assume we don't have enum for this.", "author": "deniskuzZ", "createdAt": "2021-01-07T12:51:32Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQxOTExMg==", "url": "https://github.com/apache/hive/pull/1724#discussion_r557419112", "bodyText": "no there isn't any - HiveLockObject has 5 string fields", "author": "kgyrtkirk", "createdAt": "2021-01-14T14:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMwODQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxMjU1NA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553312554", "bodyText": "minor: i would prefer stream api here, but you can ignore it..\nif (locks.stream().filter().anyMatch()){..}", "author": "deniskuzZ", "createdAt": "2021-01-07T13:00:14Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",\n+                               queryPlan.getQueryStr(),\n+                               conf);\n+\n+    HiveLockObject lock = new HiveLockObject(baseTable,lockData);\n+\n+    for (HiveLockObj hiveLockObj : lockObjects) {", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMjg5Mw==", "url": "https://github.com/apache/hive/pull/1724#discussion_r557422893", "bodyText": "I tried to use stream api a few times - and I'm a bit against it because:\n\nit's somewhat unreadable\nit's harder to read them when they eventually changed in a patch\nnot really debug friendly\nthey seem to fit \"easy tasks\" nicely; but if someone extends it later - it might become a really hard to read expression...\n\ninstead of 2 complex lines; this is 7 simple - I would rather keep it", "author": "kgyrtkirk", "createdAt": "2021-01-14T14:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxMjU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxMzQ4NQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553313485", "bodyText": "minor: tbd.getLbCtx() != null && tbd.getLbCtx().isSkewedStoredAsDir()", "author": "deniskuzZ", "createdAt": "2021-01-07T13:02:15Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java", "diffHunk": "@@ -774,6 +780,100 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     }\n   }\n \n+  class LocalTableLock  implements Closeable{\n+\n+    private Optional<HiveLockObject> lock;\n+    private HiveLock lockObj;\n+\n+    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n+\n+      this.lock = lock;\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; locking: \" + lock);\n+      HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n+      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      LOG.info(\"LocalTableLock; locked: \" + lock);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      if(!lock.isPresent()) {\n+        return;\n+      }\n+      LOG.info(\"LocalTableLock; unlocking: \"+lock);\n+      HiveLockManager lockMgr;\n+      try {\n+        lockMgr = context.getHiveTxnManager().getLockManager();\n+        lockMgr.unlock(lockObj);\n+      } catch (LockException e1) {\n+        throw new IOException(e1);\n+      }\n+      LOG.info(\"LocalTableLock; unlocked\");\n+    }\n+\n+  }\n+\n+  static enum LockFileMoveMode {\n+    none, dp, all;\n+\n+    public static LockFileMoveMode fromConf(HiveConf conf) {\n+      if (!conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY)) {\n+        return none;\n+      }\n+      String lockFileMoveMode = conf.getVar(HiveConf.ConfVars.HIVE_LOCK_FILE_MOVE_MODE);\n+      return valueOf(lockFileMoveMode);\n+    }\n+  }\n+\n+  private LocalTableLock acquireLockForFileMove(LoadTableDesc loadTableWork) throws HiveException {\n+    LockFileMoveMode mode = LockFileMoveMode.fromConf(conf);\n+\n+    if (mode == LockFileMoveMode.none) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    if (mode == LockFileMoveMode.dp) {\n+      if (loadTableWork.getDPCtx() == null) {\n+        return new LocalTableLock(Optional.empty());\n+      }\n+    }\n+\n+    WriteEntity output = context.getLoadTableOutputMap().get(loadTableWork);\n+    List<HiveLockObj> lockObjects = context.getOutputLockObjects().get(output);\n+    if (lockObjects == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+    TableDesc table = loadTableWork.getTable();\n+    if(table == null) {\n+      return new LocalTableLock(Optional.empty());\n+    }\n+\n+    Hive db = getHive();\n+    Table baseTable = db.getTable(loadTableWork.getTable().getTableName());\n+\n+    HiveLockObject.HiveLockObjectData lockData =\n+        new HiveLockObject.HiveLockObjectData(queryPlan.getQueryId(),\n+                               String.valueOf(System.currentTimeMillis()),\n+                               \"IMPLICIT\",\n+                               queryPlan.getQueryStr(),\n+                               conf);\n+\n+    HiveLockObject lock = new HiveLockObject(baseTable,lockData);\n+\n+    for (HiveLockObj hiveLockObj : lockObjects) {\n+      if (Arrays.equals(hiveLockObj.getObj().getPaths(), lock.getPaths())) {\n+        HiveLockMode l = hiveLockObj.getMode();\n+        if (l == HiveLockMode.EXCLUSIVE || l == HiveLockMode.SEMI_SHARED) {\n+          // no need to lock ; already owns a more powerful one\n+          return new LocalTableLock(Optional.empty());\n+        }\n+      }\n+    }\n+\n+    return new LocalTableLock(Optional.of(lock));\n+  }\n+\n   private boolean isSkewedStoredAsDirs(LoadTableDesc tbd) {\n     return (tbd.getLbCtx() == null) ? false : tbd.getLbCtx()", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\nindex 28ef9c7ba6..07f62cf5b0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java\n\n@@ -785,18 +785,18 @@ private void checkFileFormats(Hive db, LoadTableDesc tbd, Table table)\n     private Optional<HiveLockObject> lock;\n     private HiveLock lockObj;\n \n-    public LocalTableLock(Optional<HiveLockObject> lock) throws LockException {\n-\n-      this.lock = lock;\n-      if(!lock.isPresent()) {\n-        return;\n-      }\n+    public LocalTableLock(HiveLockObject lock) throws LockException {\n+      this.lock = Optional.of(lock);\n       LOG.info(\"LocalTableLock; locking: \" + lock);\n       HiveLockManager lockMgr = context.getHiveTxnManager().getLockManager();\n-      lockObj = lockMgr.lock(lock.get(), HiveLockMode.SEMI_SHARED, true);\n+      lockObj = lockMgr.lock(lock, HiveLockMode.SEMI_SHARED, true);\n       LOG.info(\"LocalTableLock; locked: \" + lock);\n     }\n \n+    public LocalTableLock() {\n+      lock = Optional.empty();\n+    }\n+\n     @Override\n     public void close() throws IOException {\n       if(!lock.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxNTA5MQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553315091", "bodyText": "unnecessary brackets", "author": "deniskuzZ", "createdAt": "2021-01-07T13:05:44Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java", "diffHunk": "@@ -429,9 +430,12 @@ private ZooKeeperHiveLock lockPrimitive(HiveLockObject key,\n       if (child.startsWith(exLock)) {\n         childSeq = getSequenceNumber(child, exLock);\n       }\n-      if ((mode == HiveLockMode.EXCLUSIVE) && child.startsWith(shLock)) {\n+      if ((mode == HiveLockMode.EXCLUSIVE) && (child.startsWith(shLock))) {", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87e1193b22c53364df7ada8675d29ad76fa3e429", "chunk": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java b/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java\nindex a12b8b6dfc..eec9097039 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java\n\n@@ -430,7 +430,7 @@ private ZooKeeperHiveLock lockPrimitive(HiveLockObject key,\n       if (child.startsWith(exLock)) {\n         childSeq = getSequenceNumber(child, exLock);\n       }\n-      if ((mode == HiveLockMode.EXCLUSIVE) && (child.startsWith(shLock))) {\n+      if ((mode == HiveLockMode.EXCLUSIVE) && child.startsWith(shLock)) {\n         childSeq = getSequenceNumber(child, shLock);\n       }\n       if ((mode == HiveLockMode.SEMI_SHARED || mode == HiveLockMode.EXCLUSIVE) && child.startsWith(semiLock)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTE4NQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553321185", "bodyText": "i think, it doesn't have to be static", "author": "deniskuzZ", "createdAt": "2021-01-07T13:18:11Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -281,6 +279,7 @@ public static boolean isRenameAllowed(Database srcDB, Database destDB) {\n     static AtomicInteger databaseCount, tableCount, partCount;\n \n     private Warehouse wh; // hdfs warehouse\n+    private static Striped<Lock> tablelocks;", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyNjMyNQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r557426325", "bodyText": "this field must be static - if it's not; then it could not impose exclusiveness.\nnote that this field is initialized alongside with the threadPool field", "author": "kgyrtkirk", "createdAt": "2021-01-14T14:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ0MTk0MA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r558441940", "bodyText": "oh, sorry, i missed that synchronization is done on class level not instance.\nNote: there is a bug in synchronization, double checked locking should be used here or if check (threadPool == null) should be moved inside the critical section.", "author": "deniskuzZ", "createdAt": "2021-01-15T17:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTE4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTgyMQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553321821", "bodyText": "unnecessary brackets", "author": "deniskuzZ", "createdAt": "2021-01-07T13:19:32Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -3461,7 +3474,7 @@ private Table getTableInternal(String catName, String dbname, String name,\n               LOG.warn(\"Unexpected resultset size:\" + ret.size());\n               throw new MetaException(\"Unexpected result from metadata transformer:return list size is \" + ret.size());\n             }\n-            t = (Table)(ret.keySet().iterator().next());\n+            t = (ret.keySet().iterator().next());", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyNzY3OA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r557427678", "bodyText": "yeah..someone should teach that trick to my save-action :D", "author": "kgyrtkirk", "createdAt": "2021-01-14T14:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e659783b690616a7417e1dc829044435104b34e", "chunk": "diff --git a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\nindex 770342d0d6..6559235eac 100644\n--- a/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\n+++ b/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java\n\n@@ -3474,7 +3474,7 @@ private Table getTableInternal(String catName, String dbname, String name,\n               LOG.warn(\"Unexpected resultset size:\" + ret.size());\n               throw new MetaException(\"Unexpected result from metadata transformer:return list size is \" + ret.size());\n             }\n-            t = (ret.keySet().iterator().next());\n+            t = ret.keySet().iterator().next();\n           }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyNDQyOQ==", "url": "https://github.com/apache/hive/pull/1724#discussion_r553324429", "bodyText": "could we call unlock here, before even propagation?", "author": "deniskuzZ", "createdAt": "2021-01-07T13:24:41Z", "path": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java", "diffHunk": "@@ -4355,17 +4376,20 @@ private int add_partitions_pspec_core(RawStore ms, String catName, String dbName\n         success = ms.commitTransaction();\n         return addedPartitions.size();\n       } finally {\n-        if (!success) {\n-          ms.rollbackTransaction();\n-          cleanupPartitionFolders(addedPartitions, db);\n-        }\n-\n-        if (!listeners.isEmpty()) {\n-          MetaStoreListenerNotifier.notifyEvent(listeners,\n-                                                EventType.ADD_PARTITION,\n-                                                new AddPartitionEvent(tbl, partitionSpecProxy, true, this),\n-                                                null,\n-                                                transactionalListenerResponses, ms);\n+        try {\n+          if (!success) {\n+            ms.rollbackTransaction();\n+            cleanupPartitionFolders(addedPartitions, db);\n+          }\n+          if (!listeners.isEmpty()) {", "originalCommit": "bc11bb62d3700b227f48b4683282b826b946f8bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQzMTUxMA==", "url": "https://github.com/apache/hive/pull/1724#discussion_r557431510", "bodyText": "these locks will only engage in case the same table is touched; I think its safer to also keep this inside the lock", "author": "kgyrtkirk", "createdAt": "2021-01-14T14:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyNDQyOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7cd0ceb89e05d0e57eb47e05a43dc5742ca5201c", "url": "https://github.com/apache/hive/commit/7cd0ceb89e05d0e57eb47e05a43dc5742ca5201c", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24428-addpart-dataloss", "committedDate": "2021-01-14T12:38:44Z", "type": "commit"}, {"oid": "4255c30933191999b7e1f76c90809e8e4e3eee8c", "url": "https://github.com/apache/hive/commit/4255c30933191999b7e1f76c90809e8e4e3eee8c", "message": "address review comment", "committedDate": "2021-01-14T13:56:14Z", "type": "commit"}, {"oid": "cda3803a9edc35630ca4cb28ec6f39fe1358f69a", "url": "https://github.com/apache/hive/commit/cda3803a9edc35630ca4cb28ec6f39fe1358f69a", "message": "address review comments", "committedDate": "2021-01-14T14:01:46Z", "type": "commit"}, {"oid": "072d6124f3ee6572f083204ed91140ad0020fd7c", "url": "https://github.com/apache/hive/commit/072d6124f3ee6572f083204ed91140ad0020fd7c", "message": "address review comments", "committedDate": "2021-01-14T14:05:28Z", "type": "commit"}, {"oid": "87e1193b22c53364df7ada8675d29ad76fa3e429", "url": "https://github.com/apache/hive/commit/87e1193b22c53364df7ada8675d29ad76fa3e429", "message": "review comments", "committedDate": "2021-01-14T14:14:26Z", "type": "commit"}, {"oid": "1e659783b690616a7417e1dc829044435104b34e", "url": "https://github.com/apache/hive/commit/1e659783b690616a7417e1dc829044435104b34e", "message": "move get to a method", "committedDate": "2021-01-14T14:25:47Z", "type": "commit"}, {"oid": "75c9d441d70b2c2b44114faf3ae280a06c1b43f7", "url": "https://github.com/apache/hive/commit/75c9d441d70b2c2b44114faf3ae280a06c1b43f7", "message": "indent", "committedDate": "2021-01-14T14:26:25Z", "type": "commit"}, {"oid": "3ccb63f6dbbe7252d379f944c61507c7a4d1a08c", "url": "https://github.com/apache/hive/commit/3ccb63f6dbbe7252d379f944c61507c7a4d1a08c", "message": "Merge remote-tracking branch 'apache/master' into HIVE-24428-addpart-dataloss", "committedDate": "2021-01-19T15:00:54Z", "type": "commit"}, {"oid": "60386bfc53b93f980d4e02afcad3cba5669b3279", "url": "https://github.com/apache/hive/commit/60386bfc53b93f980d4e02afcad3cba5669b3279", "message": "add extra check", "committedDate": "2021-01-19T15:41:40Z", "type": "commit"}]}