{"pr_number": 1791, "pr_title": "[WIP] HIVE-24543: Support SAML 2.0 as an authentication mechanism", "pr_createdAt": "2020-12-16T22:53:20Z", "pr_url": "https://github.com/apache/hive/pull/1791", "timeline": [{"oid": "8a378458fda0a5fd05993a65aad77f625e72b9ff", "url": "https://github.com/apache/hive/commit/8a378458fda0a5fd05993a65aad77f625e72b9ff", "message": "Added additional configuration. SAML redirect happens when token is not present and port is present", "committedDate": "2020-12-23T18:00:26Z", "type": "forcePushed"}, {"oid": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "url": "https://github.com/apache/hive/commit/2763d7f5e05bad6a15c503d49666db55e33e7f7a", "message": "revert back the surefire plugin version change", "committedDate": "2021-01-04T23:08:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA4ODYyNg==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552088626", "bodyText": "nit: SAML2 should be SAML to match the value in the set", "author": "nrg4878", "createdAt": "2021-01-05T17:41:50Z", "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -3871,15 +3870,16 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n \n     // HiveServer2 auth configuration\n     HIVE_SERVER2_AUTHENTICATION(\"hive.server2.authentication\", \"NONE\",\n-      new StringSet(\"NOSASL\", \"NONE\", \"LDAP\", \"KERBEROS\", \"PAM\", \"CUSTOM\"),\n+      new StringSet(\"NOSASL\", \"NONE\", \"LDAP\", \"KERBEROS\", \"PAM\", \"CUSTOM\", \"SAML\"),\n         \"Client authentication types.\\n\" +\n         \"  NONE: no authentication check\\n\" +\n         \"  LDAP: LDAP/AD based authentication\\n\" +\n         \"  KERBEROS: Kerberos/GSSAPI authentication\\n\" +\n         \"  CUSTOM: Custom authentication provider\\n\" +\n         \"          (Use with property hive.server2.custom.authentication.class)\\n\" +\n         \"  PAM: Pluggable authentication module\\n\" +\n-        \"  NOSASL:  Raw transport\"),\n+        \"  NOSASL:  Raw transport\\n\" +\n+        \"  SAML2: SAML 2.0 compliant authentication. This is only supported in http transport mode.\"),", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIzNTEwOA==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552235108", "bodyText": "Fixed", "author": "vihangk1", "createdAt": "2021-01-05T22:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA4ODYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "56f001cd10a71b77f19b021e208f7df2a8781aca", "chunk": "diff --git a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\nindex d74c544285..cf302af187 100644\n--- a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\n+++ b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java\n\n@@ -3870,7 +3910,7 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n \n     // HiveServer2 auth configuration\n     HIVE_SERVER2_AUTHENTICATION(\"hive.server2.authentication\", \"NONE\",\n-      new StringSet(\"NOSASL\", \"NONE\", \"LDAP\", \"KERBEROS\", \"PAM\", \"CUSTOM\", \"SAML\"),\n+      new StringSet(\"NOSASL\", \"NONE\", \"LDAP\", \"KERBEROS\", \"PAM\", \"CUSTOM\", \"SAML2_0\"),\n         \"Client authentication types.\\n\" +\n         \"  NONE: no authentication check\\n\" +\n         \"  LDAP: LDAP/AD based authentication\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMDUxNA==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552100514", "bodyText": "TODO item", "author": "nrg4878", "createdAt": "2021-01-05T18:02:49Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -301,10 +326,20 @@ public HiveConnection(String uri, Properties info) throws SQLException {\n     supportedProtocols.add(TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V9);\n     supportedProtocols.add(TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V10);\n \n+    if (isBrowserAuthMode()) {\n+      try {\n+        browserClient = browserClientFactory.create(connParams);\n+      } catch (HiveJdbcBrowserException e) {\n+        throw new SQLException(\"\");\n+      }\n+    } else {\n+      browserClient = null;\n+    }\n     if (isEmbeddedMode) {\n       client = EmbeddedCLIServicePortal.get(connParams.getHiveConfs());\n       connParams.getHiveConfs().clear();\n       // open client session\n+      // TODO(Vihang) need to throw here if saml auth?", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NTc0Mg==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552245742", "bodyText": "Done", "author": "vihangk1", "createdAt": "2021-01-05T22:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMDUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 108b115290..854caf08bb 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -339,7 +339,10 @@ protected HiveConnection(String uri, Properties info,\n       client = EmbeddedCLIServicePortal.get(connParams.getHiveConfs());\n       connParams.getHiveConfs().clear();\n       // open client session\n-      // TODO(Vihang) need to throw here if saml auth?\n+      if (isBrowserAuthMode()) {\n+        throw new SQLException(new IllegalArgumentException(\n+            \"Browser mode is not supported in embedded mode\"));\n+      }\n       openSession();\n       executeInitSql();\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMjk2MQ==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552102961", "bodyText": "I understand why this is done but feels odd that this throws a SQLException. Can we throw something else here and then wrap it in a SQLException in the calling method? Even a TTransportException would make sense over SQLException (though it is not thrown from thrift).", "author": "nrg4878", "createdAt": "2021-01-05T18:07:25Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -476,12 +511,18 @@ private String getServerHttpUrl(boolean useSsl) {\n   private TTransport createHttpTransport() throws SQLException, TTransportException {\n     CloseableHttpClient httpClient;\n     boolean useSsl = isSslConnection();\n-    // Create an http client from the configs\n+    validateSslForBrowserMode();\n     httpClient = getHttpClient(useSsl);\n     transport = new THttpClient(getServerHttpUrl(useSsl), httpClient);\n     return transport;\n   }\n \n+  protected void validateSslForBrowserMode() throws SQLException {\n+    if (isBrowserAuthMode() && !isSslConnection()) {\n+      throw new SQLException(\"Browser mode is only supported with SSL is enabled\");", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0Njg5Mw==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552246893", "bodyText": "I updated the code to throw a new SQLException(new IllegalArgumentException()) here. However, I don't see what is the real benefit of doing this way since the constructor of HiveConnection only allows for SQLException to be thrown.", "author": "vihangk1", "createdAt": "2021-01-05T22:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMjk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 108b115290..854caf08bb 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -519,7 +522,8 @@ private TTransport createHttpTransport() throws SQLException, TTransportExceptio\n \n   protected void validateSslForBrowserMode() throws SQLException {\n     if (isBrowserAuthMode() && !isSslConnection()) {\n-      throw new SQLException(\"Browser mode is only supported with SSL is enabled\");\n+      throw new SQLException(new IllegalArgumentException(\n+          \"Browser mode is only supported with SSL is enabled\"));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNDYzMg==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552104632", "bodyText": "wouldn't httpClientBuilder be null if cookieAuth is disabled? We could use http transport with cookieAuth disabled right?", "author": "nrg4878", "createdAt": "2021-01-05T18:10:27Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -592,6 +638,10 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte\n       }\n     });\n \n+    if (isBrowserAuthMode()) {\n+      httpClientBuilder", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0Nzg0MQ==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552247841", "bodyText": "I am not sure if you are reviewing this one commit at a time or by combining all the commits. line 626 on the latest code in this branch creates a httpClientBuilder if the cookieAuth is disabled.", "author": "vihangk1", "createdAt": "2021-01-05T22:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNDYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3NjU4Ng==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552276586", "bodyText": "This is however a good point. Having browser mode without cookie auth doesn't make sense. Since without cookie auth, each http call will open a browser (althought it will be automatically authenticated). I think for the first version may be we should disallow browser auth if cookie-auth is not enabled on the server side. Thoughts?", "author": "vihangk1", "createdAt": "2021-01-06T00:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNDYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "bf899e97a3af471e9ab96a336de4febb8d8d354a", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 108b115290..bc5245f870 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -621,21 +650,99 @@ public long getRetryInterval() {\n     } else {\n       httpClientBuilder = HttpClientBuilder.create();\n     }\n-    // In case the server's idletimeout is set to a lower value, it might close it's side of\n-    // connection. However we retry one more time on NoHttpResponseException\n+\n+    // Beeline <------> LB <------> Reverse Proxy <-----> Hiveserver2\n+    // In case of deployments like above, the LoadBalancer (LB) can be configured with Idle Timeout after which the LB\n+    // will send TCP RST to Client (Beeline) and Backend (Reverse Proxy). If user is connected to beeline, idle for\n+    // sometime and resubmits a query after the idle timeout there is a broken pipe between beeline and LB. When Beeline\n+    // tries to submit the query one of two things happen, it either hangs or times out (if socketTimeout is defined in\n+    // the jdbc param). The hang is because of the default infinite socket timeout for which there is no auto-recovery\n+    // (user have to manually interrupt the query). If the socketTimeout jdbc param was specified, beeline will receive\n+    // SocketTimeoutException (Read Timeout) or NoHttpResponseException both of which can be retried if maxRetries is\n+    // also specified by the user (jdbc param).\n+    // The following retry handler handles the above cases in addition to retries for idempotent and unsent requests.\n     httpClientBuilder.setRetryHandler(new HttpRequestRetryHandler() {\n+      // This handler is mostly a copy of DefaultHttpRequestRetryHandler except it also retries some exceptions\n+      // which could be thrown in certain cases where idle timeout from intermediate proxy triggers a connection reset.\n+      private final List<Class<? extends IOException>> nonRetriableClasses = Arrays.asList(\n+              InterruptedIOException.class,\n+              UnknownHostException.class,\n+              ConnectException.class,\n+              SSLException.class);\n+      // socket exceptions could happen because of timeout, broken pipe or server not responding in which case it is\n+      // better to reopen the connection and retry if user specified maxRetries\n+      private final List<Class<? extends IOException>> retriableClasses = Arrays.asList(\n+              SocketTimeoutException.class,\n+              SocketException.class,\n+              NoHttpResponseException.class\n+      );\n+\n       @Override\n       public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {\n-        if (executionCount > 1) {\n-          LOG.info(\"Retry attempts to connect to server exceeded.\");\n+        Args.notNull(exception, \"Exception parameter\");\n+        Args.notNull(context, \"HTTP context\");\n+        if (executionCount > maxRetries) {\n+          // Do not retry if over max retry count\n+          LOG.error(\"Max retries (\" + maxRetries + \") exhausted.\", exception);\n           return false;\n         }\n-        if (exception instanceof org.apache.http.NoHttpResponseException) {\n-          LOG.info(\"Could not connect to the server. Retrying one more time.\");\n+        if (this.retriableClasses.contains(exception.getClass())) {\n+          LOG.info(\"Retrying \" + exception.getClass() + \" as it is in retriable classes list.\");\n           return true;\n         }\n+        if (this.nonRetriableClasses.contains(exception.getClass())) {\n+          LOG.info(\"Not retrying as the class (\" + exception.getClass() + \") is non-retriable class.\");\n+          return false;\n+        } else {\n+          for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n+            if (rejectException.isInstance(exception)) {\n+              LOG.info(\"Not retrying as the class (\" + exception.getClass() + \") is an instance of is non-retriable class.\");;\n+              return false;\n+            }\n+          }\n+        }\n+        final HttpClientContext clientContext = HttpClientContext.adapt(context);\n+        final HttpRequest request = clientContext.getRequest();\n+\n+        if(requestIsAborted(request)){\n+          LOG.info(\"Not retrying as request is aborted.\");\n+          return false;\n+        }\n+\n+        if (handleAsIdempotent(request)) {\n+          LOG.info(\"Retrying idempotent request. Attempt \" + executionCount + \" of \" + maxRetries);\n+          // Retry if the request is considered idempotent\n+          return true;\n+        }\n+\n+        if (!clientContext.isRequestSent()) {\n+          LOG.info(\"Retrying unsent request. Attempt \" + executionCount + \" of \" + maxRetries);\n+          // Retry if the request has not been sent fully or\n+          // if it's OK to retry methods that have been sent\n+          return true;\n+        }\n+\n+        LOG.info(\"Not retrying as the request is not idempotent or is already sent.\");\n+        // otherwise do not retry\n         return false;\n       }\n+\n+      // requests that handles \"Expect continue\" handshakes. If server received the header and is waiting for body\n+      // then those requests can be retried. Most basic http method methods except DELETE are idempotent as long as they\n+      // are not aborted.\n+      protected boolean handleAsIdempotent(final HttpRequest request) {\n+        return !(request instanceof HttpEntityEnclosingRequest);\n+      }\n+\n+      // checks if the request got aborted\n+      protected boolean requestIsAborted(final HttpRequest request) {\n+        HttpRequest req = request;\n+        if (request instanceof RequestWrapper) { // does not forward request to original\n+          req = ((RequestWrapper) request).getOriginal();\n+        }\n+        return (req instanceof HttpUriRequest && ((HttpUriRequest)req).isAborted());\n+      }\n+\n     });\n \n     if (isBrowserAuthMode()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNTA0Mw==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552105043", "bodyText": "TODO: If nothing to do, should we remove your name from the comment?", "author": "nrg4878", "createdAt": "2021-01-05T18:11:15Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -896,39 +946,103 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n+    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0ODE5Mg==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552248192", "bodyText": "yeah, sorry. I removed my name. I had it to track all the todos.", "author": "vihangk1", "createdAt": "2021-01-05T22:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNTA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 108b115290..854caf08bb 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -946,7 +950,7 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n-    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    //TODO This is a bit hacky. We piggy back on a dummy OpenSession call\n     // to get the redirect response from the server. Instead its probably cleaner to\n     // explicitly do a HTTP post request and get the response.\n     int numRetry = isBrowserAuthMode() ? 2 : 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDM2NA==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552110364", "bodyText": "is this a known error code for failed auth?", "author": "nrg4878", "createdAt": "2021-01-05T18:20:03Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -896,39 +946,103 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n+    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    // to get the redirect response from the server. Instead its probably cleaner to\n+    // explicitly do a HTTP post request and get the response.\n+    int numRetry = isBrowserAuthMode() ? 2 : 1;\n+    for (int i=0; i<numRetry; i++) {\n+      try {\n+        openSession(openReq);\n+      } catch (TException e) {\n+        if (isSamlRedirect(e)) {\n+          boolean success = doBrowserSSO();\n+          if (!success) {\n+            String msg = browserClient.getServerResponse() == null\n+                || browserClient.getServerResponse().getMsg() == null ? \"\"\n+                : browserClient.getServerResponse().getMsg();\n+            throw new SQLException(\n+                \"Could not establish connection to \" + jdbcUriString + \": \"\n+                    + msg, \" 08S01\", e);\n+          }\n+        } else {\n+          throw new SQLException(\n+              \"Could not establish connection to \" + jdbcUriString + \": \" + e\n+                  .getMessage(), \" 08S01\", e);\n+        }\n+      }\n+    }\n+    isClosed = false;\n+  }\n+\n+  private boolean doBrowserSSO() throws SQLException {\n     try {\n-      TOpenSessionResp openResp = client.OpenSession(openReq);\n+      Preconditions.checkNotNull(browserClient);\n+      try (IJdbcBrowserClient bc = browserClient) {\n+        browserClient.doBrowserSSO();\n+        HiveJdbcBrowserServerResponse response = browserClient.getServerResponse();\n+        if (response != null) {\n+          return response.isSuccessful();\n+        }\n+        return false;\n+      }\n+    } catch (Exception ex) {\n+      throw new SQLException(\"Browser based SSO failed: \" + ex.getMessage(),\n+          \" 08S01\",", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NTMyNA==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552255324", "bodyText": "I could find where to look for these standard error codes. The closest hit online was the https://docs.microsoft.com/en-us/sql/odbc/reference/appendixes/appendix-a-odbc-error-codes?view=sql-server-ver15 which lists 08S01 as \"communications like failure\". I didn't see anything which suggests a authentication error. The closest was perhaps 28000 but I am not sure if this is the right place to look for these codes. Do you know where can I find this for JDBC?", "author": "vihangk1", "createdAt": "2021-01-05T23:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 108b115290..854caf08bb 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -946,7 +950,7 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n-    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    //TODO This is a bit hacky. We piggy back on a dummy OpenSession call\n     // to get the redirect response from the server. Instead its probably cleaner to\n     // explicitly do a HTTP post request and get the response.\n     int numRetry = isBrowserAuthMode() ? 2 : 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDg0Ng==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552110846", "bodyText": "is 08S01 a known error code for failed auth with SAML?", "author": "nrg4878", "createdAt": "2021-01-05T18:21:03Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -896,39 +946,103 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n+    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    // to get the redirect response from the server. Instead its probably cleaner to\n+    // explicitly do a HTTP post request and get the response.\n+    int numRetry = isBrowserAuthMode() ? 2 : 1;\n+    for (int i=0; i<numRetry; i++) {\n+      try {\n+        openSession(openReq);\n+      } catch (TException e) {\n+        if (isSamlRedirect(e)) {\n+          boolean success = doBrowserSSO();\n+          if (!success) {\n+            String msg = browserClient.getServerResponse() == null\n+                || browserClient.getServerResponse().getMsg() == null ? \"\"\n+                : browserClient.getServerResponse().getMsg();\n+            throw new SQLException(\n+                \"Could not establish connection to \" + jdbcUriString + \": \"\n+                    + msg, \" 08S01\", e);\n+          }\n+        } else {\n+          throw new SQLException(\n+              \"Could not establish connection to \" + jdbcUriString + \": \" + e\n+                  .getMessage(), \" 08S01\", e);", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3NDM2Ng==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552274366", "bodyText": "08S01 stands for \"communications link failure\" which is not exactly what we want but arguably related to the authentication error. I can interpret it as \"User is not authenticated and hence communications link failed\". I would be happy to update this to a more specific error code if you know of a better one.", "author": "vihangk1", "createdAt": "2021-01-06T00:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 108b115290..854caf08bb 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -946,7 +950,7 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n-    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    //TODO This is a bit hacky. We piggy back on a dummy OpenSession call\n     // to get the redirect response from the server. Instead its probably cleaner to\n     // explicitly do a HTTP post request and get the response.\n     int numRetry = isBrowserAuthMode() ? 2 : 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0MTgyOA==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552141828", "bodyText": "its not clear what the change is here. The proposed code looks similar to the existing code in the OpenSession() method. What has changed?", "author": "nrg4878", "createdAt": "2021-01-05T19:21:21Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -896,39 +946,103 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n+    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    // to get the redirect response from the server. Instead its probably cleaner to\n+    // explicitly do a HTTP post request and get the response.\n+    int numRetry = isBrowserAuthMode() ? 2 : 1;\n+    for (int i=0; i<numRetry; i++) {\n+      try {\n+        openSession(openReq);\n+      } catch (TException e) {\n+        if (isSamlRedirect(e)) {\n+          boolean success = doBrowserSSO();\n+          if (!success) {\n+            String msg = browserClient.getServerResponse() == null\n+                || browserClient.getServerResponse().getMsg() == null ? \"\"\n+                : browserClient.getServerResponse().getMsg();\n+            throw new SQLException(\n+                \"Could not establish connection to \" + jdbcUriString + \": \"\n+                    + msg, \" 08S01\", e);\n+          }\n+        } else {\n+          throw new SQLException(\n+              \"Could not establish connection to \" + jdbcUriString + \": \" + e\n+                  .getMessage(), \" 08S01\", e);\n+        }\n+      }\n+    }\n+    isClosed = false;\n+  }\n+\n+  private boolean doBrowserSSO() throws SQLException {\n     try {\n-      TOpenSessionResp openResp = client.OpenSession(openReq);\n+      Preconditions.checkNotNull(browserClient);\n+      try (IJdbcBrowserClient bc = browserClient) {\n+        browserClient.doBrowserSSO();\n+        HiveJdbcBrowserServerResponse response = browserClient.getServerResponse();\n+        if (response != null) {\n+          return response.isSuccessful();\n+        }\n+        return false;\n+      }\n+    } catch (Exception ex) {\n+      throw new SQLException(\"Browser based SSO failed: \" + ex.getMessage(),\n+          \" 08S01\",\n+          ex);\n+    }\n+  }\n \n-      // Populate a given configuration from HS2 server HiveConf, only if that configuration\n-      // is not already present in Connection parameter HiveConf i.e., client side configuration\n-      // takes precedence over the server side configuration.\n-      Map<String, String> serverHiveConf = openResp.getConfiguration();\n+  @VisibleForTesting\n+  public IJdbcBrowserClient getBrowserClient() {\n+    return browserClient;\n+  }\n \n-      updateServerHiveConf(serverHiveConf, connParams);\n+  private void openSession(TOpenSessionReq openReq) throws TException, SQLException {\n+    TOpenSessionResp openResp = client.OpenSession(openReq);\n \n-      // validate connection\n-      Utils.verifySuccess(openResp.getStatus());\n-      if (!supportedProtocols.contains(openResp.getServerProtocolVersion())) {\n-        throw new TException(\"Unsupported Hive2 protocol\");\n-      }\n-      protocol = openResp.getServerProtocolVersion();\n-      sessHandle = openResp.getSessionHandle();\n-\n-      final String serverFetchSizeString =\n-          openResp.getConfiguration().get(ConfVars.HIVE_SERVER2_THRIFT_RESULTSET_DEFAULT_FETCH_SIZE.varname);\n-      if (serverFetchSizeString == null) {\n-        throw new IllegalStateException(\"Server returned a null default fetch size. Check that \"\n-            + ConfVars.HIVE_SERVER2_THRIFT_RESULTSET_DEFAULT_FETCH_SIZE.varname + \" is configured correctly.\");\n-      }\n+    // Populate a given configuration from HS2 server HiveConf, only if that configuration", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1OTQyNQ==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552259425", "bodyText": "The patch moves these lines (900-926) before the patch into a separate method so that we can have a retry attempt of this code. The first attempt to get the redirect URL and the second one to actually open the session.", "author": "vihangk1", "createdAt": "2021-01-05T23:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0MTgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 108b115290..854caf08bb 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -946,7 +950,7 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n-    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    //TODO This is a bit hacky. We piggy back on a dummy OpenSession call\n     // to get the redirect response from the server. Instead its probably cleaner to\n     // explicitly do a HTTP post request and get the response.\n     int numRetry = isBrowserAuthMode() ? 2 : 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0OTA0MA==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552149040", "bodyText": "@vihangk1 Could you please add some comments to the method as to why we look for 302 and 303 in the error message. This will help remember the logic", "author": "nrg4878", "createdAt": "2021-01-05T19:34:12Z", "path": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java", "diffHunk": "@@ -896,39 +946,103 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n+    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    // to get the redirect response from the server. Instead its probably cleaner to\n+    // explicitly do a HTTP post request and get the response.\n+    int numRetry = isBrowserAuthMode() ? 2 : 1;\n+    for (int i=0; i<numRetry; i++) {\n+      try {\n+        openSession(openReq);\n+      } catch (TException e) {\n+        if (isSamlRedirect(e)) {\n+          boolean success = doBrowserSSO();\n+          if (!success) {\n+            String msg = browserClient.getServerResponse() == null\n+                || browserClient.getServerResponse().getMsg() == null ? \"\"\n+                : browserClient.getServerResponse().getMsg();\n+            throw new SQLException(\n+                \"Could not establish connection to \" + jdbcUriString + \": \"\n+                    + msg, \" 08S01\", e);\n+          }\n+        } else {\n+          throw new SQLException(\n+              \"Could not establish connection to \" + jdbcUriString + \": \" + e\n+                  .getMessage(), \" 08S01\", e);\n+        }\n+      }\n+    }\n+    isClosed = false;\n+  }\n+\n+  private boolean doBrowserSSO() throws SQLException {\n     try {\n-      TOpenSessionResp openResp = client.OpenSession(openReq);\n+      Preconditions.checkNotNull(browserClient);\n+      try (IJdbcBrowserClient bc = browserClient) {\n+        browserClient.doBrowserSSO();\n+        HiveJdbcBrowserServerResponse response = browserClient.getServerResponse();\n+        if (response != null) {\n+          return response.isSuccessful();\n+        }\n+        return false;\n+      }\n+    } catch (Exception ex) {\n+      throw new SQLException(\"Browser based SSO failed: \" + ex.getMessage(),\n+          \" 08S01\",\n+          ex);\n+    }\n+  }\n \n-      // Populate a given configuration from HS2 server HiveConf, only if that configuration\n-      // is not already present in Connection parameter HiveConf i.e., client side configuration\n-      // takes precedence over the server side configuration.\n-      Map<String, String> serverHiveConf = openResp.getConfiguration();\n+  @VisibleForTesting\n+  public IJdbcBrowserClient getBrowserClient() {\n+    return browserClient;\n+  }\n \n-      updateServerHiveConf(serverHiveConf, connParams);\n+  private void openSession(TOpenSessionReq openReq) throws TException, SQLException {\n+    TOpenSessionResp openResp = client.OpenSession(openReq);\n \n-      // validate connection\n-      Utils.verifySuccess(openResp.getStatus());\n-      if (!supportedProtocols.contains(openResp.getServerProtocolVersion())) {\n-        throw new TException(\"Unsupported Hive2 protocol\");\n-      }\n-      protocol = openResp.getServerProtocolVersion();\n-      sessHandle = openResp.getSessionHandle();\n-\n-      final String serverFetchSizeString =\n-          openResp.getConfiguration().get(ConfVars.HIVE_SERVER2_THRIFT_RESULTSET_DEFAULT_FETCH_SIZE.varname);\n-      if (serverFetchSizeString == null) {\n-        throw new IllegalStateException(\"Server returned a null default fetch size. Check that \"\n-            + ConfVars.HIVE_SERVER2_THRIFT_RESULTSET_DEFAULT_FETCH_SIZE.varname + \" is configured correctly.\");\n-      }\n+    // Populate a given configuration from HS2 server HiveConf, only if that configuration\n+    // is not already present in Connection parameter HiveConf i.e., client side configuration\n+    // takes precedence over the server side configuration.\n+    Map<String, String> serverHiveConf = openResp.getConfiguration();\n+\n+    updateServerHiveConf(serverHiveConf, connParams);\n+\n+    // validate connection\n+    Utils.verifySuccess(openResp.getStatus());\n+    if (!supportedProtocols.contains(openResp.getServerProtocolVersion())) {\n+      throw new TException(\"Unsupported Hive2 protocol\");\n+    }\n+    protocol = openResp.getServerProtocolVersion();\n+    sessHandle = openResp.getSessionHandle();\n \n-      this.defaultFetchSize = Integer.parseInt(serverFetchSizeString);\n-      if (this.defaultFetchSize <= 0) {\n-        throw new IllegalStateException(\"Default fetch size must be greater than 0\");\n+    final String serverFetchSizeString =\n+        openResp.getConfiguration().get(ConfVars.HIVE_SERVER2_THRIFT_RESULTSET_DEFAULT_FETCH_SIZE.varname);\n+    if (serverFetchSizeString == null) {\n+      throw new IllegalStateException(\"Server returned a null default fetch size. Check that \"\n+          + ConfVars.HIVE_SERVER2_THRIFT_RESULTSET_DEFAULT_FETCH_SIZE.varname + \" is configured correctly.\");\n+    }\n+\n+    this.defaultFetchSize = Integer.parseInt(serverFetchSizeString);\n+    if (this.defaultFetchSize <= 0) {\n+      throw new IllegalStateException(\"Default fetch size must be greater than 0\");\n+    }\n+  }\n+\n+  private boolean isSamlRedirect(TException e) {", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI2MDIyNQ==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552260225", "bodyText": "makes sense. Done.", "author": "vihangk1", "createdAt": "2021-01-05T23:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0OTA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\nindex 108b115290..854caf08bb 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java\n\n@@ -946,7 +950,7 @@ private void openSession() throws SQLException {\n       openReq.setPassword(sessConfMap.get(JdbcConnectionParams.AUTH_PASSWD));\n     }\n \n-    //TODO(Vihang): This is a bit hacky. We piggy back on a dummy OpenSession call\n+    //TODO This is a bit hacky. We piggy back on a dummy OpenSession call\n     // to get the redirect response from the server. Instead its probably cleaner to\n     // explicitly do a HTTP post request and get the response.\n     int numRetry = isBrowserAuthMode() ? 2 : 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1Mjk1MQ==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552352951", "bodyText": "should this account for serverSocket being null in case of an exception in getServerSocket() ?", "author": "nrg4878", "createdAt": "2021-01-06T03:46:41Z", "path": "jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.jdbc.saml;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.awt.Desktop;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.io.UnsupportedEncodingException;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.hive.jdbc.Utils.JdbcConnectionParams;\n+import org.apache.hive.service.auth.saml.HiveSamlUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class is used to execute a browser based SSO workflow with the authentication mode\n+ * is browser.\n+ */\n+public class HiveJdbcBrowserClient implements IJdbcBrowserClient {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveJdbcBrowserClient.class);\n+  // error message when the socket times out.\n+  @VisibleForTesting\n+  public static final String TIMEOUT_ERROR_MSG = \"Timed out while waiting for server response\";\n+  private final ServerSocket serverSocket;\n+  private HiveJdbcBrowserServerResponse serverResponse;\n+  protected JdbcBrowserClientContext clientContext;\n+  // By default we wait for 2 min unless overridden by a JDBC connection param\n+  // browserResponseTimeout\n+  private static final int DEFAULT_SOCKET_TIMEOUT_SECS = 120;\n+  private final ExecutorService serverResponseThread = Executors.newSingleThreadExecutor(\n+      new ThreadFactoryBuilder().setNameFormat(\"Hive-Jdbc-Browser-Client-%d\")\n+          .setDaemon(true).build());\n+\n+  HiveJdbcBrowserClient(JdbcConnectionParams connectionParams)\n+      throws HiveJdbcBrowserException {\n+    serverSocket = getServerSocket(connectionParams.getSessionVars());\n+  }\n+\n+  private ServerSocket getServerSocket(Map<String, String> sessionConf)\n+      throws HiveJdbcBrowserException {\n+    final ServerSocket serverSocket;\n+    int port = Integer.parseInt(sessionConf\n+        .getOrDefault(JdbcConnectionParams.AUTH_BROWSER_RESPONSE_PORT, \"0\"));\n+    int timeout = Integer.parseInt(\n+        sessionConf.getOrDefault(JdbcConnectionParams.AUTH_BROWSER_RESPONSE_TIMEOUT_SECS,\n+            String.valueOf(DEFAULT_SOCKET_TIMEOUT_SECS)));\n+    try {\n+      serverSocket = new ServerSocket(port, 0,\n+          InetAddress.getByName(HiveSamlUtils.LOOP_BACK_INTERFACE));\n+      LOG.debug(\"Browser response timeout is set to {} seconds\", timeout);\n+      serverSocket.setSoTimeout(timeout * 1000);\n+    } catch (IOException e) {\n+      throw new HiveJdbcBrowserException(\"Unable to bind to the localhost\");\n+    }\n+    return serverSocket;\n+  }\n+\n+  public Integer getPort() {\n+    return serverSocket.getLocalPort();", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2MTQ3NQ==", "url": "https://github.com/apache/hive/pull/1791#discussion_r555361475", "bodyText": "serverSocket is a final field and it will always be not-null. If there is an exception during getServerSocket, the HiveJdbcBrowserClient's constructor will error out.", "author": "vihangk1", "createdAt": "2021-01-11T21:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1Mjk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java b/jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java\nindex 859486470b..389b671ee3 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java\n\n@@ -40,7 +40,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1MzE1Nw==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552353157", "bodyText": "looks like this needs some real validation code?", "author": "nrg4878", "createdAt": "2021-01-06T03:47:37Z", "path": "jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.jdbc.saml;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.awt.Desktop;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.io.UnsupportedEncodingException;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import org.apache.hive.jdbc.Utils.JdbcConnectionParams;\n+import org.apache.hive.service.auth.saml.HiveSamlUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class is used to execute a browser based SSO workflow with the authentication mode\n+ * is browser.\n+ */\n+public class HiveJdbcBrowserClient implements IJdbcBrowserClient {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveJdbcBrowserClient.class);\n+  // error message when the socket times out.\n+  @VisibleForTesting\n+  public static final String TIMEOUT_ERROR_MSG = \"Timed out while waiting for server response\";\n+  private final ServerSocket serverSocket;\n+  private HiveJdbcBrowserServerResponse serverResponse;\n+  protected JdbcBrowserClientContext clientContext;\n+  // By default we wait for 2 min unless overridden by a JDBC connection param\n+  // browserResponseTimeout\n+  private static final int DEFAULT_SOCKET_TIMEOUT_SECS = 120;\n+  private final ExecutorService serverResponseThread = Executors.newSingleThreadExecutor(\n+      new ThreadFactoryBuilder().setNameFormat(\"Hive-Jdbc-Browser-Client-%d\")\n+          .setDaemon(true).build());\n+\n+  HiveJdbcBrowserClient(JdbcConnectionParams connectionParams)\n+      throws HiveJdbcBrowserException {\n+    serverSocket = getServerSocket(connectionParams.getSessionVars());\n+  }\n+\n+  private ServerSocket getServerSocket(Map<String, String> sessionConf)\n+      throws HiveJdbcBrowserException {\n+    final ServerSocket serverSocket;\n+    int port = Integer.parseInt(sessionConf\n+        .getOrDefault(JdbcConnectionParams.AUTH_BROWSER_RESPONSE_PORT, \"0\"));\n+    int timeout = Integer.parseInt(\n+        sessionConf.getOrDefault(JdbcConnectionParams.AUTH_BROWSER_RESPONSE_TIMEOUT_SECS,\n+            String.valueOf(DEFAULT_SOCKET_TIMEOUT_SECS)));\n+    try {\n+      serverSocket = new ServerSocket(port, 0,\n+          InetAddress.getByName(HiveSamlUtils.LOOP_BACK_INTERFACE));\n+      LOG.debug(\"Browser response timeout is set to {} seconds\", timeout);\n+      serverSocket.setSoTimeout(timeout * 1000);\n+    } catch (IOException e) {\n+      throw new HiveJdbcBrowserException(\"Unable to bind to the localhost\");\n+    }\n+    return serverSocket;\n+  }\n+\n+  public Integer getPort() {\n+    return serverSocket.getLocalPort();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    if (serverSocket != null) {\n+      serverSocket.close();\n+    }\n+  }\n+\n+  public void init(JdbcBrowserClientContext clientContext) {\n+    // everytime we set the sso URI we should clean up the previous state if its set.\n+    // this may be from the previous invalid connection attempt or if the token has\n+    // expired\n+    reset();\n+    this.clientContext = clientContext;\n+    LOG.trace(\"Initialized the JDBCBrowser client with URL {}\",\n+        clientContext.getSsoUri());\n+  }\n+\n+  private void reset() {\n+    serverResponse = null;\n+    clientContext = null;\n+  }\n+\n+  private boolean validateSSOUrl(URI ssoUrl) {\n+    //TODO(Vihang) add URL validation code here\n+    return true;", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4OTA0Mg==", "url": "https://github.com/apache/hive/pull/1791#discussion_r555489042", "bodyText": "Initially I thought we can add a validation check to confirm that the SSO URL is from an expected domain. However, I plan to move that to a separate task since it is not critical. I removed this from the patch.", "author": "vihangk1", "createdAt": "2021-01-12T03:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1MzE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java b/jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java\nindex 859486470b..389b671ee3 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/saml/HiveJdbcBrowserClient.java\n\n@@ -40,7 +40,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1OTAwMQ==", "url": "https://github.com/apache/hive/pull/1791#discussion_r552359001", "bodyText": "not sure I understand how this works.\nWhen auth is set to SAML on server, is this provider even called?", "author": "nrg4878", "createdAt": "2021-01-06T04:13:15Z", "path": "service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java", "diffHunk": "@@ -76,6 +77,9 @@ public static PasswdAuthenticationProvider getAuthenticationProvider(AuthMethods\n       return new CustomAuthenticationProviderImpl((conf == null) ? AuthMethods.CUSTOM.getConf() : conf);\n     } else if (authMethod == AuthMethods.NONE) {\n       return new AnonymousAuthenticationProviderImpl();\n+    } else if (authMethod == AuthMethods.SAML) {\n+      //TODO right thing to do?\n+      return new AnonymousAuthenticationProviderImpl();", "originalCommit": "2763d7f5e05bad6a15c503d49666db55e33e7f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4OTI4NA==", "url": "https://github.com/apache/hive/pull/1791#discussion_r555489284", "bodyText": "I don't think it is necessary. I removed this from the PR.", "author": "vihangk1", "createdAt": "2021-01-12T03:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1OTAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed8075658219180ff70b0a301886acbb24e7949d", "chunk": "diff --git a/service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java b/service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java\nindex 89ff1d6d75..c820b1abb5 100644\n--- a/service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java\n+++ b/service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java\n\n@@ -77,9 +77,6 @@ public static PasswdAuthenticationProvider getAuthenticationProvider(AuthMethods\n       return new CustomAuthenticationProviderImpl((conf == null) ? AuthMethods.CUSTOM.getConf() : conf);\n     } else if (authMethod == AuthMethods.NONE) {\n       return new AnonymousAuthenticationProviderImpl();\n-    } else if (authMethod == AuthMethods.SAML) {\n-      //TODO right thing to do?\n-      return new AnonymousAuthenticationProviderImpl();\n     } else {\n       throw new AuthenticationException(\"Unsupported authentication method\");\n     }\n"}}, {"oid": "ed8075658219180ff70b0a301886acbb24e7949d", "url": "https://github.com/apache/hive/commit/ed8075658219180ff70b0a301886acbb24e7949d", "message": "Naveen's comments II", "committedDate": "2021-01-12T17:58:33Z", "type": "forcePushed"}, {"oid": "450b0917f1068b06973a174f9efa7e1cb13e4739", "url": "https://github.com/apache/hive/commit/450b0917f1068b06973a174f9efa7e1cb13e4739", "message": "Add a check for support for Browse action", "committedDate": "2021-02-03T23:40:45Z", "type": "forcePushed"}, {"oid": "bf899e97a3af471e9ab96a336de4febb8d8d354a", "url": "https://github.com/apache/hive/commit/bf899e97a3af471e9ab96a336de4febb8d8d354a", "message": "Fixed compilation issue after rebase", "committedDate": "2021-02-18T19:44:08Z", "type": "forcePushed"}, {"oid": "87e4f3877657254967e720436088f7df59d35946", "url": "https://github.com/apache/hive/commit/87e4f3877657254967e720436088f7df59d35946", "message": "updated TODO", "committedDate": "2021-02-22T23:18:29Z", "type": "forcePushed"}, {"oid": "b358b44038c5d47eeb70db29728e65f50727c7b1", "url": "https://github.com/apache/hive/commit/b358b44038c5d47eeb70db29728e65f50727c7b1", "message": "updated TODO", "committedDate": "2021-02-24T21:13:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDU5OTAzNw==", "url": "https://github.com/apache/hive/pull/1791#discussion_r590599037", "bodyText": "We should not be logging configured user and group filters to the logs regardless of the log levels. User's security configuration might be inadvertently logged to the files that are then distributed. Can you please create a follow up jira to review such statements.", "author": "nrg4878", "createdAt": "2021-03-09T18:02:56Z", "path": "service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.auth.saml;\n+\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.pac4j.saml.credentials.SAML2Credentials.SAMLAttribute;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class HiveSamlGroupNameFilter implements Predicate<SAMLAttribute> {\n+\n+  private static final Logger LOG = LoggerFactory\n+      .getLogger(HiveSamlGroupNameFilter.class);\n+  private final List<String> groupNames;\n+  private static final Splitter COMMA_SPLITTER = Splitter.on(',').trimResults()\n+      .omitEmptyStrings();\n+  private final String attributeName;\n+\n+  public HiveSamlGroupNameFilter(HiveConf conf) {\n+    String groupNameStr = conf.get(ConfVars.HIVE_SERVER2_SAML_GROUP_FILTER.varname);\n+    attributeName = conf.get(ConfVars.HIVE_SERVER2_SAML_GROUP_ATTRIBUTE_NAME.varname, \"\");\n+    ImmutableList.Builder<String> builder = ImmutableList.builder();\n+    if (groupNameStr != null && !groupNameStr.isEmpty()) {\n+      builder\n+          .addAll(COMMA_SPLITTER.split(groupNameStr));\n+    }\n+    groupNames = builder.build();\n+    LOG.debug(\"Initialized allowed group names as {}\", groupNames);", "originalCommit": "b358b44038c5d47eeb70db29728e65f50727c7b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a50b9148a3add789d267dd2a76a8e49cbb972a1a", "chunk": "diff --git a/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java b/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\nindex 971dcb02c5..580db18a2e 100644\n--- a/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\n+++ b/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\n\n@@ -46,7 +46,6 @@ public HiveSamlGroupNameFilter(HiveConf conf) {\n           .addAll(COMMA_SPLITTER.split(groupNameStr));\n     }\n     groupNames = builder.build();\n-    LOG.debug(\"Initialized allowed group names as {}\", groupNames);\n   }\n \n   public boolean apply(List<SAMLAttribute> attributes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDU5OTE5Ng==", "url": "https://github.com/apache/hive/pull/1791#discussion_r590599196", "bodyText": "ditto", "author": "nrg4878", "createdAt": "2021-03-09T18:03:14Z", "path": "service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.auth.saml;\n+\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.pac4j.saml.credentials.SAML2Credentials.SAMLAttribute;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class HiveSamlGroupNameFilter implements Predicate<SAMLAttribute> {\n+\n+  private static final Logger LOG = LoggerFactory\n+      .getLogger(HiveSamlGroupNameFilter.class);\n+  private final List<String> groupNames;\n+  private static final Splitter COMMA_SPLITTER = Splitter.on(',').trimResults()\n+      .omitEmptyStrings();\n+  private final String attributeName;\n+\n+  public HiveSamlGroupNameFilter(HiveConf conf) {\n+    String groupNameStr = conf.get(ConfVars.HIVE_SERVER2_SAML_GROUP_FILTER.varname);\n+    attributeName = conf.get(ConfVars.HIVE_SERVER2_SAML_GROUP_ATTRIBUTE_NAME.varname, \"\");\n+    ImmutableList.Builder<String> builder = ImmutableList.builder();\n+    if (groupNameStr != null && !groupNameStr.isEmpty()) {\n+      builder\n+          .addAll(COMMA_SPLITTER.split(groupNameStr));\n+    }\n+    groupNames = builder.build();\n+    LOG.debug(\"Initialized allowed group names as {}\", groupNames);\n+  }\n+\n+  public boolean apply(List<SAMLAttribute> attributes) {\n+    if (attributeName.isEmpty() && attributes.size() == 0) {\n+      return true;\n+    }\n+    for (SAMLAttribute attribute : attributes) {\n+      if (apply(attribute)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean apply(SAMLAttribute attribute) {\n+    if (attributeName.isEmpty()) {\n+      // if attributeName is not configured, then it means groups based\n+      // filtering is not enabled and we allow any authenticated user.\n+      return true;\n+    }\n+    if (attribute == null || attribute.getName() == null) {\n+      return false;\n+    }\n+    if (!attributeName.equals(attribute.getName())) {\n+      LOG.debug(\"Attribute name {} did not match with {}\", attribute.getName(),", "originalCommit": "b358b44038c5d47eeb70db29728e65f50727c7b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a50b9148a3add789d267dd2a76a8e49cbb972a1a", "chunk": "diff --git a/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java b/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\nindex 971dcb02c5..580db18a2e 100644\n--- a/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\n+++ b/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\n\n@@ -46,7 +46,6 @@ public HiveSamlGroupNameFilter(HiveConf conf) {\n           .addAll(COMMA_SPLITTER.split(groupNameStr));\n     }\n     groupNames = builder.build();\n-    LOG.debug(\"Initialized allowed group names as {}\", groupNames);\n   }\n \n   public boolean apply(List<SAMLAttribute> attributes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDU5OTM3NA==", "url": "https://github.com/apache/hive/pull/1791#discussion_r590599374", "bodyText": "ditto", "author": "nrg4878", "createdAt": "2021-03-09T18:03:28Z", "path": "service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.auth.saml;\n+\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.pac4j.saml.credentials.SAML2Credentials.SAMLAttribute;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class HiveSamlGroupNameFilter implements Predicate<SAMLAttribute> {\n+\n+  private static final Logger LOG = LoggerFactory\n+      .getLogger(HiveSamlGroupNameFilter.class);\n+  private final List<String> groupNames;\n+  private static final Splitter COMMA_SPLITTER = Splitter.on(',').trimResults()\n+      .omitEmptyStrings();\n+  private final String attributeName;\n+\n+  public HiveSamlGroupNameFilter(HiveConf conf) {\n+    String groupNameStr = conf.get(ConfVars.HIVE_SERVER2_SAML_GROUP_FILTER.varname);\n+    attributeName = conf.get(ConfVars.HIVE_SERVER2_SAML_GROUP_ATTRIBUTE_NAME.varname, \"\");\n+    ImmutableList.Builder<String> builder = ImmutableList.builder();\n+    if (groupNameStr != null && !groupNameStr.isEmpty()) {\n+      builder\n+          .addAll(COMMA_SPLITTER.split(groupNameStr));\n+    }\n+    groupNames = builder.build();\n+    LOG.debug(\"Initialized allowed group names as {}\", groupNames);\n+  }\n+\n+  public boolean apply(List<SAMLAttribute> attributes) {\n+    if (attributeName.isEmpty() && attributes.size() == 0) {\n+      return true;\n+    }\n+    for (SAMLAttribute attribute : attributes) {\n+      if (apply(attribute)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean apply(SAMLAttribute attribute) {\n+    if (attributeName.isEmpty()) {\n+      // if attributeName is not configured, then it means groups based\n+      // filtering is not enabled and we allow any authenticated user.\n+      return true;\n+    }\n+    if (attribute == null || attribute.getName() == null) {\n+      return false;\n+    }\n+    if (!attributeName.equals(attribute.getName())) {\n+      LOG.debug(\"Attribute name {} did not match with {}\", attribute.getName(),\n+          attributeName);\n+      return false;\n+    }\n+    for (String attrVal : attribute.getAttributeValues()) {\n+      LOG.debug(\"Evaluating group name {}\", attrVal);", "originalCommit": "b358b44038c5d47eeb70db29728e65f50727c7b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a50b9148a3add789d267dd2a76a8e49cbb972a1a", "chunk": "diff --git a/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java b/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\nindex 971dcb02c5..580db18a2e 100644\n--- a/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\n+++ b/service/src/java/org/apache/hive/service/auth/saml/HiveSamlGroupNameFilter.java\n\n@@ -46,7 +46,6 @@ public HiveSamlGroupNameFilter(HiveConf conf) {\n           .addAll(COMMA_SPLITTER.split(groupNameStr));\n     }\n     groupNames = builder.build();\n-    LOG.debug(\"Initialized allowed group names as {}\", groupNames);\n   }\n \n   public boolean apply(List<SAMLAttribute> attributes) {\n"}}, {"oid": "56f001cd10a71b77f19b021e208f7df2a8781aca", "url": "https://github.com/apache/hive/commit/56f001cd10a71b77f19b021e208f7df2a8781aca", "message": "HIVE-24543: Support SAML 2.0 as an authentication mechanism", "committedDate": "2021-03-09T18:15:06Z", "type": "commit"}, {"oid": "45a8f828105adff42436e45595f136be07e3f1d7", "url": "https://github.com/apache/hive/commit/45a8f828105adff42436e45595f136be07e3f1d7", "message": "fix ptest compile issue", "committedDate": "2021-03-09T18:15:06Z", "type": "commit"}, {"oid": "301f823dc5dba39c9f323a0a1fc4afb5c7012c41", "url": "https://github.com/apache/hive/commit/301f823dc5dba39c9f323a0a1fc4afb5c7012c41", "message": "renamed SAML2_0 to SAML", "committedDate": "2021-03-09T18:15:06Z", "type": "commit"}, {"oid": "7f6c8f3f05ec0045c47c9c261dc06039dc13df83", "url": "https://github.com/apache/hive/commit/7f6c8f3f05ec0045c47c9c261dc06039dc13df83", "message": "self-review", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "230860c4673ab4813f30374ead3210bf20b1a413", "url": "https://github.com/apache/hive/commit/230860c4673ab4813f30374ead3210bf20b1a413", "message": "Added additional configuration. SAML redirect happens when token is not present and port is present", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "51b48da2bfcb765e12ec11a9c9b6f6ee674ea11b", "url": "https://github.com/apache/hive/commit/51b48da2bfcb765e12ec11a9c9b6f6ee674ea11b", "message": "revert back the surefire plugin version change", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "beae94af5981440b0417dc838815dc6b7e995b26", "url": "https://github.com/apache/hive/commit/beae94af5981440b0417dc838815dc6b7e995b26", "message": "updated configuration description", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "18d968b1db0280da101a4eed07ae1a32165cf1ed", "url": "https://github.com/apache/hive/commit/18d968b1db0280da101a4eed07ae1a32165cf1ed", "message": "Naveen's review comments", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "3d979cbc5df955ea8b7f8ebbd66ef4a0d40c2495", "url": "https://github.com/apache/hive/commit/3d979cbc5df955ea8b7f8ebbd66ef4a0d40c2495", "message": "Naveen's comments II", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "45f3913e13c70894fa80db53a6a0bdba16ccdc29", "url": "https://github.com/apache/hive/commit/45f3913e13c70894fa80db53a6a0bdba16ccdc29", "message": "modified preconditions check to allow callback URLs without any port", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "277bd6fa4a0e04933d26da7fb4f25a018cdeb3aa", "url": "https://github.com/apache/hive/commit/277bd6fa4a0e04933d26da7fb4f25a018cdeb3aa", "message": "Added a connection parameter to optionally disable SSL enforcement", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "1da6e7a2d06605b4e970a3e5bf55fd609d19b04f", "url": "https://github.com/apache/hive/commit/1da6e7a2d06605b4e970a3e5bf55fd609d19b04f", "message": "reduced dependencies and fixed redirect code path", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "75b742399c8fce807ab4c85c41d9c9640f69a81e", "url": "https://github.com/apache/hive/commit/75b742399c8fce807ab4c85c41d9c9640f69a81e", "message": "exclude unnecessary dependencies from lib", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "025cf4bf57bd77e87afee198120ab8a03a641061", "url": "https://github.com/apache/hive/commit/025cf4bf57bd77e87afee198120ab8a03a641061", "message": "Add a check for support for Browse action", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "a155fb8fe14e027bec9f03d23b2c8138cb3f7ead", "url": "https://github.com/apache/hive/commit/a155fb8fe14e027bec9f03d23b2c8138cb3f7ead", "message": "Fixed compilation issue after rebase", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "0e56ae4982e9958eef84c98fd15d5963dddd74e1", "url": "https://github.com/apache/hive/commit/0e56ae4982e9958eef84c98fd15d5963dddd74e1", "message": "Fix for download artifact error for shibboleth dependencies", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "df345030655ddf45466f0fbe846afb4703b2df1d", "url": "https://github.com/apache/hive/commit/df345030655ddf45466f0fbe846afb4703b2df1d", "message": "Updated testcontainers library", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "5a10519626dac152d49a9860f8860d88959bccfe", "url": "https://github.com/apache/hive/commit/5a10519626dac152d49a9860f8860d88959bccfe", "message": "updated TODO", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "a50b9148a3add789d267dd2a76a8e49cbb972a1a", "url": "https://github.com/apache/hive/commit/a50b9148a3add789d267dd2a76a8e49cbb972a1a", "message": "Naveen's comments regarding logging sensitive stuff", "committedDate": "2021-03-09T18:15:07Z", "type": "commit"}, {"oid": "a50b9148a3add789d267dd2a76a8e49cbb972a1a", "url": "https://github.com/apache/hive/commit/a50b9148a3add789d267dd2a76a8e49cbb972a1a", "message": "Naveen's comments regarding logging sensitive stuff", "committedDate": "2021-03-09T18:15:07Z", "type": "forcePushed"}]}