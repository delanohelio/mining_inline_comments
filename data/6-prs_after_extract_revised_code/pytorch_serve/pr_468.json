{"pr_number": 468, "pr_title": "Valid Host URL(s) for model registration", "pr_createdAt": "2020-06-19T06:47:26Z", "pr_url": "https://github.com/pytorch/serve/pull/468", "timeline": [{"oid": "ec224592ddc2202a1c48ff27dc685ad6e89db7e8", "url": "https://github.com/pytorch/serve/commit/ec224592ddc2202a1c48ff27dc685ad6e89db7e8", "message": "Added test cases\n-update doc with examples", "committedDate": "2020-06-17T08:13:06Z", "type": "commit"}, {"oid": "3be78b3744a60b31712bf8180743e7c52178bff6", "url": "https://github.com/pytorch/serve/commit/3be78b3744a60b31712bf8180743e7c52178bff6", "message": "updated docs and testcases", "committedDate": "2020-06-17T18:07:18Z", "type": "commit"}, {"oid": "f3e9081d28b36b471673c313626350da1857dddb", "url": "https://github.com/pytorch/serve/commit/f3e9081d28b36b471673c313626350da1857dddb", "message": "Merge branch 'master' of https://github.com/pytorch/serve into issue_47\n\n# Conflicts:\n#\tdocker/README.md\n#\tdocs/configuration.md\n#\tfrontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n#\tfrontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\n#\tfrontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java\n#\tfrontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java\n#\ttest/README.md\n#\ttest/regression_tests.sh", "committedDate": "2020-06-19T06:43:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzYxOA==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446923618", "bodyText": "Can we use consistent naming convention i.e. whiteListedURLs", "author": "dhaniram-kshirsagar", "createdAt": "2020-06-29T12:14:38Z", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -44,7 +45,8 @@ public ModelArchive(Manifest manifest, String url, File modelDir, boolean extrac\n         this.extracted = extracted;\n     }\n \n-    public static ModelArchive downloadModel(String modelStore, String url)\n+    public static ModelArchive downloadModel(\n+            List<String> urlPatternlist, String modelStore, String url)", "originalCommit": "f3e9081d28b36b471673c313626350da1857dddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MTA5MQ==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r448941091", "bodyText": "Done", "author": "shivamshriwas", "createdAt": "2020-07-02T11:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "7f3365807dffa3ba8c28d5199ca5d3cf4f0f36a9", "chunk": "diff --git a/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java b/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\nindex 175742c6..efa2a44f 100644\n--- a/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n+++ b/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n\n@@ -46,7 +46,7 @@ public class ModelArchive {\n     }\n \n     public static ModelArchive downloadModel(\n-            List<String> urlPatternlist, String modelStore, String url)\n+            List<String> whiteListedURLs, String modelStore, String url)\n             throws ModelException, FileAlreadyExistsException, IOException {\n \n         if (modelStore == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTY4MQ==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446925681", "bodyText": "Why you need this?", "author": "dhaniram-kshirsagar", "createdAt": "2020-06-29T12:18:19Z", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -64,6 +66,10 @@ public static ModelArchive downloadModel(String modelStore, String url)\n                 FileUtils.deleteQuietly(modelLocation);\n                 throw new DownloadModelException(\"Failed to download model from: \" + url, e);\n             }\n+        } else if (DEFAULT_URL_PATTERN.matcher(url).matches()) {", "originalCommit": "f3e9081d28b36b471673c313626350da1857dddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f3365807dffa3ba8c28d5199ca5d3cf4f0f36a9", "chunk": "diff --git a/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java b/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\nindex 175742c6..efa2a44f 100644\n--- a/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n+++ b/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n\n@@ -66,10 +66,6 @@ public class ModelArchive {\n                 FileUtils.deleteQuietly(modelLocation);\n                 throw new DownloadModelException(\"Failed to download model from: \" + url, e);\n             }\n-        } else if (DEFAULT_URL_PATTERN.matcher(url).matches()) {\n-            // case when url is valid but not whitelisted\n-            throw new ModelNotFoundException(\n-                    \"Given URL \" + url + \" does not match any whitelisted URL(s)\");\n         }\n \n         if (url.contains(\"..\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTcwMQ==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446925701", "bodyText": "I think you will have to check if the given URL is a valid URL?", "author": "dhaniram-kshirsagar", "createdAt": "2020-06-29T12:18:21Z", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -84,6 +90,17 @@ public static ModelArchive downloadModel(String modelStore, String url)\n         throw new ModelNotFoundException(\"Model not found at: \" + url);\n     }\n \n+    public static boolean checkUrlWhitelisted(List<String> urlPatternList, String url) {\n+        boolean patternMatch = false;\n+        for (String temp : urlPatternList) {\n+            if (Pattern.compile(temp, Pattern.CASE_INSENSITIVE).matcher(url).matches()) {\n+                patternMatch = true;", "originalCommit": "f3e9081d28b36b471673c313626350da1857dddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f3365807dffa3ba8c28d5199ca5d3cf4f0f36a9", "chunk": "diff --git a/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java b/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\nindex 175742c6..efa2a44f 100644\n--- a/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n+++ b/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n\n@@ -90,14 +86,20 @@ public class ModelArchive {\n         throw new ModelNotFoundException(\"Model not found at: \" + url);\n     }\n \n-    public static boolean checkUrlWhitelisted(List<String> urlPatternList, String url) {\n+    public static boolean checkUrlWhitelisted(List<String> whiteListedURLs, String url)\n+            throws ModelNotFoundException {\n         boolean patternMatch = false;\n-        for (String temp : urlPatternList) {\n+        for (String temp : whiteListedURLs) {\n             if (Pattern.compile(temp, Pattern.CASE_INSENSITIVE).matcher(url).matches()) {\n                 patternMatch = true;\n-                break;\n+                return patternMatch;\n             }\n         }\n+        if (VALID_URL_PATTERN.matcher(url).matches()) {\n+            // case when url is valid but not whitelisted\n+            throw new ModelNotFoundException(\n+                    \"Given URL \" + url + \" does not match any whitelisted URL(s)\");\n+        }\n         return patternMatch;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzA5NA==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446927094", "bodyText": "This is pending since long, let's remove the use of squeezenet real model from UT and find some alternate solution for this. Maybe make it part of sanity suite/regression if required.", "author": "dhaniram-kshirsagar", "createdAt": "2020-06-29T12:20:44Z", "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "diffHunk": "@@ -35,14 +39,18 @@ public void test() throws ModelException, IOException {\n         // TODO Change this once we have example models on s3\n         archive =\n                 ModelArchive.downloadModel(\n+                        URL_PATTERN_LIST,\n                         modelStore,\n                         \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n         Assert.assertEquals(archive.getModelName(), null);\n+        ModelArchive.downloadModel(\n+                URL_PATTERN_LIST,\n+                modelStore,\n+                \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");", "originalCommit": "f3e9081d28b36b471673c313626350da1857dddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f3365807dffa3ba8c28d5199ca5d3cf4f0f36a9", "chunk": "diff --git a/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java b/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\nindex f83aa90d..c4cec92e 100644\n--- a/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\n+++ b/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\n\n@@ -25,42 +26,21 @@ public class ModelArchiveTest {\n         FileUtils.deleteQuietly(new File(tmp, \"models\"));\n     }\n \n-    @Test(expectedExceptions = FileAlreadyExistsException.class)\n+    @Test\n     public void test() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-\n-        ModelArchive archive = ModelArchive.downloadModel(URL_PATTERN_LIST, modelStore, \"noop.mar\");\n+        ModelArchive archive =\n+                ModelArchive.downloadModel(WHITELIST_URL_LIST, modelStore, \"noop.mar\");\n         archive.validate();\n         archive.clean();\n         Assert.assertEquals(archive.getModelName(), \"noop\");\n-\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n-        archive =\n-                ModelArchive.downloadModel(\n-                        URL_PATTERN_LIST,\n-                        modelStore,\n-                        \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        Assert.assertEquals(archive.getModelName(), null);\n-        ModelArchive.downloadModel(\n-                URL_PATTERN_LIST,\n-                modelStore,\n-                \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        ModelArchive.removeModel(\n-                modelStore,\n-                \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        Assert.assertTrue(!new File(modelStore, \"squeezenet_v1.1.model\").exists());\n     }\n \n     @Test(expectedExceptions = DownloadModelException.class)\n     public void testInvalidURL() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n-                URL_PATTERN_LIST,\n+                WHITELIST_URL_LIST,\n                 modelStore,\n                 \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzI5NQ==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446927295", "bodyText": "Whitelist?", "author": "dhaniram-kshirsagar", "createdAt": "2020-06-29T12:21:03Z", "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "diffHunk": "@@ -63,6 +72,38 @@ public void testMalformURL() throws ModelException, IOException {\n         // new implementation.\n         // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n-                modelStore, \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n+                URL_PATTERN_LIST,", "originalCommit": "f3e9081d28b36b471673c313626350da1857dddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f3365807dffa3ba8c28d5199ca5d3cf4f0f36a9", "chunk": "diff --git a/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java b/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\nindex f83aa90d..c4cec92e 100644\n--- a/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\n+++ b/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\n\n@@ -68,11 +48,8 @@ public class ModelArchiveTest {\n     @Test(expectedExceptions = DownloadModelException.class)\n     public void testMalformURL() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n-                URL_PATTERN_LIST,\n+                WHITELIST_URL_LIST,\n                 modelStore,\n                 \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n     }\n"}}, {"oid": "e99a13e3b0960afef11cc8136a143035b1471bab", "url": "https://github.com/pytorch/serve/commit/e99a13e3b0960afef11cc8136a143035b1471bab", "message": "Merge branch 'master' of https://github.com/pytorch/serve into issue_47", "committedDate": "2020-06-30T06:42:12Z", "type": "commit"}, {"oid": "7f3365807dffa3ba8c28d5199ca5d3cf4f0f36a9", "url": "https://github.com/pytorch/serve/commit/7f3365807dffa3ba8c28d5199ca5d3cf4f0f36a9", "message": "added test case\n- incorporated review comments", "committedDate": "2020-06-30T13:06:29Z", "type": "commit"}, {"oid": "0232f423573294a64e46ce05b6933cf0f5a1321e", "url": "https://github.com/pytorch/serve/commit/0232f423573294a64e46ce05b6933cf0f5a1321e", "message": "Merge branch 'master' into issue_47", "committedDate": "2020-07-15T12:23:10Z", "type": "commit"}, {"oid": "96ffd2ce0a9129c0e75991feb4b4d78b11b3cfbb", "url": "https://github.com/pytorch/serve/commit/96ffd2ce0a9129c0e75991feb4b4d78b11b3cfbb", "message": "refactored code with allowed urls parameter changed to valid_hosts", "committedDate": "2020-07-22T15:03:47Z", "type": "commit"}, {"oid": "9bbc7e16e585118954397e0e7d089abbc21141e8", "url": "https://github.com/pytorch/serve/commit/9bbc7e16e585118954397e0e7d089abbc21141e8", "message": "Merge branch 'master' of https://github.com/pytorch/serve into issue_47", "committedDate": "2020-07-22T15:04:39Z", "type": "commit"}, {"oid": "41c05e20621fb630a3ab9f57a643454639b71e4f", "url": "https://github.com/pytorch/serve/commit/41c05e20621fb630a3ab9f57a643454639b71e4f", "message": "Merge branch 'issue_47' of https://github.com/pytorch/serve into issue_47", "committedDate": "2020-07-22T15:05:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NjU2Nw==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460196567", "bodyText": "@shivamshriwas In case of s3 urls, is it expected they will be in https://s3.xxxx format and not \"s3://xxx\"?", "author": "chauhang", "createdAt": "2020-07-24T17:40:05Z", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -27,7 +28,7 @@\n \n     public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n \n-    private static final Pattern URL_PATTERN =\n+    private static final Pattern VALID_URL_PATTERN =\n             Pattern.compile(\"http(s)?://.*\", Pattern.CASE_INSENSITIVE);", "originalCommit": "41c05e20621fb630a3ab9f57a643454639b71e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3NjAwOQ==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460876009", "bodyText": "Yes,\nThis pattern is just used to verify whether given URL is a valid http / https  URL.", "author": "shivamshriwas", "createdAt": "2020-07-27T13:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NjU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "276cdced56831a663d4a100fa9e4e754e256f61c", "chunk": "diff --git a/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java b/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\nindex dde34c82..1bf4c0ea 100644\n--- a/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n+++ b/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java\n\n@@ -29,7 +30,7 @@ public class ModelArchive {\n     public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n \n     private static final Pattern VALID_URL_PATTERN =\n-            Pattern.compile(\"http(s)?://.*\", Pattern.CASE_INSENSITIVE);\n+            Pattern.compile(\"file?://.*|http(s)?://.*\", Pattern.CASE_INSENSITIVE);\n \n     private static final String MANIFEST_FILE = \"MANIFEST.json\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NzY0Ng==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460197646", "bodyText": "@shivamshriwas Please add another test for multiple urls test scenario, and failure cases where url is an invalid one", "author": "chauhang", "createdAt": "2020-07-24T17:42:15Z", "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "diffHunk": "@@ -21,48 +25,70 @@ public void beforeTest() {\n         FileUtils.deleteQuietly(new File(tmp, \"models\"));\n     }\n \n-    @Test(expectedExceptions = ModelNotFoundException.class)\n+    @Test\n     public void test() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-\n-        ModelArchive archive = ModelArchive.downloadModel(modelStore, \"noop.mar\");\n+        ModelArchive archive = ModelArchive.downloadModel(VALID_HOSTS_LIST, modelStore, \"noop.mar\");\n         archive.validate();\n         archive.clean();\n         Assert.assertEquals(archive.getModelName(), \"noop\");\n-\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n-        archive =\n-                ModelArchive.downloadModel(\n-                        modelStore,\n-                        \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        Assert.assertEquals(archive.getModelName(), null);\n-        ModelArchive.removeModel(\n-                modelStore,\n-                \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        Assert.assertTrue(!new File(modelStore, \"squeezenet_v1.1.model\").exists());\n-        ModelArchive.downloadModel(modelStore, \"/../noop-v1.0\");\n     }\n \n     @Test(expectedExceptions = DownloadModelException.class)\n     public void testInvalidURL() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n+                VALID_HOSTS_LIST,\n                 modelStore,\n                 \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n     }\n \n     @Test(expectedExceptions = DownloadModelException.class)\n     public void testMalformURL() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n-                modelStore, \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n+                VALID_HOSTS_LIST,\n+                modelStore,\n+                \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n+    }\n+\n+    @Test(expectedExceptions = ModelNotFoundException.class)\n+    public void testValidHostURL() throws ModelException, IOException {", "originalCommit": "41c05e20621fb630a3ab9f57a643454639b71e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3NzIwMQ==", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460877201", "bodyText": "Added multiple urls test scenario\nenhanced existing test cases as well with now exception messages also being compared.", "author": "shivamshriwas", "createdAt": "2020-07-27T13:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NzY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cc3f6f481afd6c9e09438e134bfab205f265391c", "chunk": "diff --git a/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java b/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\nindex c50d96ad..cfba9014 100644\n--- a/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\n+++ b/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\n\n@@ -12,12 +13,12 @@ import org.testng.annotations.Test;\n \n public class ModelArchiveTest {\n \n-    private File output;\n-    private static final List<String> VALID_HOSTS_LIST = Collections.singletonList(\"http(s)?://.*\");\n+    private static final List<String> ALLOWED_URLS_LIST =\n+            Collections.singletonList(\"http(s)?://.*\");\n \n     @BeforeTest\n     public void beforeTest() {\n-        output = new File(\"build/tmp/test/noop.mar\");\n+        File output = new File(\"build/tmp/test/noop.mar\");\n         FileUtils.deleteQuietly(output);\n         FileUtils.deleteQuietly(new File(\"build/tmp/test/noop\"));\n         FileUtils.deleteQuietly(new File(\"build/tmp/test/noop-v1.0.mar\"));\n"}}, {"oid": "f07e5b49ae875af5af227fb969e70a4d6f105ef9", "url": "https://github.com/pytorch/serve/commit/f07e5b49ae875af5af227fb969e70a4d6f105ef9", "message": "Merge branch 'master' of https://github.com/pytorch/serve into issue_47\n\n# Conflicts:\n#\tfrontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java\n#\tfrontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "committedDate": "2020-07-27T06:37:12Z", "type": "commit"}, {"oid": "cc3f6f481afd6c9e09438e134bfab205f265391c", "url": "https://github.com/pytorch/serve/commit/cc3f6f481afd6c9e09438e134bfab205f265391c", "message": "Incorporated review comments\n- change valid_hosts to allowed_urls\n- added test cases", "committedDate": "2020-07-27T12:53:21Z", "type": "commit"}, {"oid": "40da3a728c1be07aa21067f124983faf050a8e56", "url": "https://github.com/pytorch/serve/commit/40da3a728c1be07aa21067f124983faf050a8e56", "message": "Merge branch 'master' into issue_47", "committedDate": "2020-07-29T11:15:09Z", "type": "commit"}, {"oid": "8e006f5d25343adf87ea61ffc15fad6e8d554984", "url": "https://github.com/pytorch/serve/commit/8e006f5d25343adf87ea61ffc15fad6e8d554984", "message": "Merge branch 'master' into issue_47", "committedDate": "2020-07-31T05:47:27Z", "type": "commit"}, {"oid": "276cdced56831a663d4a100fa9e4e754e256f61c", "url": "https://github.com/pytorch/serve/commit/276cdced56831a663d4a100fa9e4e754e256f61c", "message": "Resolved Merge conflicts", "committedDate": "2020-09-14T07:27:09Z", "type": "commit"}, {"oid": "057c7840033bc287ba64021d531eefd6b75d56f4", "url": "https://github.com/pytorch/serve/commit/057c7840033bc287ba64021d531eefd6b75d56f4", "message": "formatted ModelArchiveTest", "committedDate": "2020-09-14T07:42:05Z", "type": "commit"}, {"oid": "01d70ace7dd50c725818ebd7071bcad14eb46941", "url": "https://github.com/pytorch/serve/commit/01d70ace7dd50c725818ebd7071bcad14eb46941", "message": "Merge branch 'issue_47' of https://github.com/pytorch/serve into issue_47", "committedDate": "2020-09-14T07:42:39Z", "type": "commit"}, {"oid": "efac7215b4fd9cd289bbbc937f81ecc13bdde6b5", "url": "https://github.com/pytorch/serve/commit/efac7215b4fd9cd289bbbc937f81ecc13bdde6b5", "message": "Merge branch 'master' into issue_47", "committedDate": "2020-09-23T11:11:53Z", "type": "commit"}]}