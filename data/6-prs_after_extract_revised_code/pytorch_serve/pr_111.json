{"pr_number": 111, "pr_title": "Added snapshot feature", "pr_createdAt": "2020-03-20T14:36:57Z", "pr_url": "https://github.com/pytorch/serve/pull/111", "timeline": [{"oid": "d42c5d30f3f337e51778c947bd377c64d7f72b5e", "url": "https://github.com/pytorch/serve/commit/d42c5d30f3f337e51778c947bd377c64d7f72b5e", "message": "added changes to store models from public url to model store", "committedDate": "2020-03-19T07:30:16Z", "type": "commit"}, {"oid": "2cf0aa6f2775e9ac7e3e3bf6adf7d50b76156202", "url": "https://github.com/pytorch/serve/commit/2cf0aa6f2775e9ac7e3e3bf6adf7d50b76156202", "message": "merged master", "committedDate": "2020-03-19T07:33:03Z", "type": "commit"}, {"oid": "76cc80f0b99ce73b8bb58e5000266194cb4bc889", "url": "https://github.com/pytorch/serve/commit/76cc80f0b99ce73b8bb58e5000266194cb4bc889", "message": "code changes and documentation for torchserve snapshot", "committedDate": "2020-03-20T14:22:06Z", "type": "commit"}, {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039", "url": "https://github.com/pytorch/serve/commit/a2a8d17552664161a31b7fa2a54abc9607215039", "message": "updated java formatting", "committedDate": "2020-03-20T14:35:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzM1NA==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395807354", "bodyText": "In effect, we are using filesystem to provide mutual exclusion at a coarse locking level for namespace collision? Is that right?", "author": "mycpuorg", "createdAt": "2020-03-20T18:04:37Z", "path": "frontend/server/src/main/java/org/pytorch/serve/ModelServer.java", "diffHunk": "@@ -89,6 +89,9 @@ public void startAndWait() throws InterruptedException, IOException, GeneralSecu\n             // Create and schedule metrics manager\n             MetricManager.scheduleMetrics(configManager);\n             System.out.println(\"Model server started.\"); // NOPMD\n+\n+            SnapshotManager.getInstance().saveSnapshot(\"startup\");", "originalCommit": "a2a8d17552664161a31b7fa2a54abc9607215039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxOTk1Ng==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396219956", "bodyText": "As per my understanding, the answer is yes. However, it will be great if you could elaborate a bit more on this.", "author": "harshbafna", "createdAt": "2020-03-23T05:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMjY5NA==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396622694", "bodyText": "Basically, we are using the underlying filesystem (local or remote) for mutually excluding the storage/writes of the snapshots.", "author": "mycpuorg", "createdAt": "2020-03-23T17:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NTgyOA==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396765828", "bodyText": "We should definitely be thinking about how to make this more robust. I have started an issue for discussion: #119", "author": "fbbradheintz", "createdAt": "2020-03-23T21:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NDI2Ng==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396774266", "bodyText": "This is fine for the current release; we have #119 to track discussion for enhancements after the initial release.", "author": "fbbradheintz", "createdAt": "2020-03-23T21:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "ad1b5ae317551dd20db1697670a8964fa4664964", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/ModelServer.java b/frontend/server/src/main/java/org/pytorch/serve/ModelServer.java\nindex 0cdb54d4..a7682766 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/ModelServer.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/ModelServer.java\n\n@@ -90,7 +90,7 @@ public class ModelServer {\n             MetricManager.scheduleMetrics(configManager);\n             System.out.println(\"Model server started.\"); // NOPMD\n \n-            SnapshotManager.getInstance().saveSnapshot(\"startup\");\n+            SnapshotManager.getInstance().saveStartupSnapshot();\n \n             channelFutures.get(0).sync();\n         } catch (InvalidPropertiesFormatException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTAyNw==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395809027", "bodyText": "How is this different from class Model  seems redundant? If it's redundant, we should remove it. If it's not redundant, then why are moving class ModelInfo under snapshot. Since class Snaphot should, in theory, not be concerned about specifics of the model as per the documentation.", "author": "mycpuorg", "createdAt": "2020-03-20T18:07:55Z", "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/ModelInfo.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.pytorch.serve.snapshot;\n+\n+class ModelInfo {", "originalCommit": "a2a8d17552664161a31b7fa2a54abc9607215039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NjQzMg==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395996432", "bodyText": "The existing Model class also consists of ModelArchive reference which in turn has reference to Manifest.\nWe needed a simple representation/data-structutre of all the registered models and their corresponding params like workers, corresponding mar file in model-store, batch size etc., which is used while saving snapshot.", "author": "harshbafna", "createdAt": "2020-03-21T14:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzMDc4NA==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396630784", "bodyText": "This results in duplication of members in memory. This implementation is OK for as long as the number of models is low. The moment we start scaling things the larger memory occupant members will also be duplicated. AFAIK, currently we are not using any data members that occupy large amounts of memory in ModelInfo that may not always be the case.\nInstead, if we can use a friend class that can store references to the members of Model in memory that might be efficient. I think we also need to come up with a better name for this class to clarify that this is related to snapshot.", "author": "mycpuorg", "createdAt": "2020-03-23T17:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NzE3Nw==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r399687177", "bodyText": "Created Issue #130\nWe must run benchmark to understand clearly how much impact this change actually has on the memory footprint of the system.", "author": "mycpuorg", "createdAt": "2020-03-28T17:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "0d30188fd41a463c6086df1979902c3cd01a9609", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/snapshot/ModelInfo.java b/frontend/server/src/main/java/org/pytorch/serve/snapshot/ModelSnapshot.java\nsimilarity index 98%\nrename from frontend/server/src/main/java/org/pytorch/serve/snapshot/ModelInfo.java\nrename to frontend/server/src/main/java/org/pytorch/serve/snapshot/ModelSnapshot.java\nindex 29e53e0b..71901876 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/snapshot/ModelInfo.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/snapshot/ModelSnapshot.java\n\n@@ -1,6 +1,6 @@\n package org.pytorch.serve.snapshot;\n \n-class ModelInfo {\n+class ModelSnapshot {\n     private boolean defaultVersion;\n     private String marName;\n     private int minWorkers;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDkzNw==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395810937", "bodyText": "why?", "author": "mycpuorg", "createdAt": "2020-03-20T18:11:41Z", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -37,11 +37,13 @@\n     private ConcurrentHashMap<String, ModelVersionedRefs> modelsNameMap;\n     private HashSet<String> startupModels;\n     private ScheduledExecutorService scheduler;\n+    private ConcurrentHashMap<String, String> modelUnregisterProgress;\n \n     private ModelManager(ConfigManager configManager, WorkLoadManager wlm) {\n         this.configManager = configManager;\n         this.wlm = wlm;\n         modelsNameMap = new ConcurrentHashMap<>();\n+        modelUnregisterProgress = new ConcurrentHashMap<>();", "originalCommit": "a2a8d17552664161a31b7fa2a54abc9607215039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NjUwNw==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395996507", "bodyText": "This was ported from Checkpoint APIs implementation and created issue while doing soft-restart of server.\nHowever, this is useful to reject multiple unregister calls for same model-version which could lead to potential NullPointer exceptions.", "author": "harshbafna", "createdAt": "2020-03-21T14:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzMjE1MQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396632151", "bodyText": "OK I understand, but it might be worth solving those NullPointer exceptions in the first place and then return error codes for duplicate unregister calls instead of storing the map of ongoing unregister requests.", "author": "mycpuorg", "createdAt": "2020-03-23T17:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NTU5OA==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396775598", "bodyText": "Agreed, we should be giving an HTTP 404 rather than an NPE if someone unregisters an unregistered model version.", "author": "fbbradheintz", "createdAt": "2020-03-23T21:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NjA5NA==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r397056094", "bodyText": "Fixed the null pointer scenario.", "author": "harshbafna", "createdAt": "2020-03-24T10:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDkzNw=="}], "type": "inlineReview", "revised_code": {"commit": "ad1b5ae317551dd20db1697670a8964fa4664964", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java b/frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java\nindex 3c6d1bb8..67bb5001 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java\n\n@@ -37,13 +37,11 @@ public final class ModelManager {\n     private ConcurrentHashMap<String, ModelVersionedRefs> modelsNameMap;\n     private HashSet<String> startupModels;\n     private ScheduledExecutorService scheduler;\n-    private ConcurrentHashMap<String, String> modelUnregisterProgress;\n \n     private ModelManager(ConfigManager configManager, WorkLoadManager wlm) {\n         this.configManager = configManager;\n         this.wlm = wlm;\n         modelsNameMap = new ConcurrentHashMap<>();\n-        modelUnregisterProgress = new ConcurrentHashMap<>();\n         scheduler = Executors.newScheduledThreadPool(2);\n         this.startupModels = new HashSet<>();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMTgwNw==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395811807", "bodyText": "What's the case when the model changed and it is a startup? It's not clear.", "author": "mycpuorg", "createdAt": "2020-03-20T18:13:27Z", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkLoadManager.java", "diffHunk": "@@ -82,7 +83,7 @@ public int getNumRunningWorkers(ModelVersionName modelVersionName) {\n         return numWorking;\n     }\n \n-    public CompletableFuture<HttpResponseStatus> modelChanged(Model model) {\n+    public CompletableFuture<HttpResponseStatus> modelChanged(Model model, boolean isStartup) {", "originalCommit": "a2a8d17552664161a31b7fa2a54abc9607215039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NzA0Ng==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395997046", "bodyText": "Model changed is called in two situations : worker scale or unregister.  On startup this will be called in following cases :\n\n\nWhile starting torchserve with init models, all models will be scaled up with default worker configuration.\n\n\nWhile starting torchserve with a snapshot, all model will be scaled up to their previously saved state.\n\n\nDue to this multiple snapshot files gets generated at the time of startup (one per model register-and-scale process). Also, timestamp-startup.cfg will be generated at the startup which contains all this information.", "author": "harshbafna", "createdAt": "2020-03-21T14:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMTgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "c499317dfb1a5e2edaf6557f5774d3ee40a62a5e", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/wlm/WorkLoadManager.java b/frontend/server/src/main/java/org/pytorch/serve/wlm/WorkLoadManager.java\nindex 600b05d9..499ee6f0 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/wlm/WorkLoadManager.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/wlm/WorkLoadManager.java\n\n@@ -85,6 +85,7 @@ public class WorkLoadManager {\n \n     public CompletableFuture<HttpResponseStatus> modelChanged(Model model, boolean isStartup) {\n         synchronized (model.getModelVersionName()) {\n+            boolean isSnapshotSaved = false;\n             CompletableFuture<HttpResponseStatus> future = new CompletableFuture<>();\n             int minWorker = model.getMinWorkers();\n             int maxWorker = model.getMaxWorkers();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395812459", "bodyText": "It's not clear why this string \"snapshot\" is required?", "author": "mycpuorg", "createdAt": "2020-03-20T18:14:38Z", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -240,6 +241,7 @@ private void handleRegisterModel(\n         final String msg = \"Model \\\"\" + modelName + \"\\\" registered\";\n         if (initialWorkers <= 0) {\n             NettyUtils.sendJsonResponse(ctx, new StatusResponse(msg));\n+            SnapshotManager.getInstance().saveSnapshot(\"snapshot\");", "originalCommit": "a2a8d17552664161a31b7fa2a54abc9607215039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NzM5MQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395997391", "bodyText": "This is just a flag to know which type of snapshot file is to be created : timestamp-snapshot.cfg , timestamp-startup.cfg, timestamp-shutdown.cfg.", "author": "harshbafna", "createdAt": "2020-03-21T14:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNzQ5NQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396637495", "bodyText": "so a wrapper around?", "author": "mycpuorg", "createdAt": "2020-03-23T17:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzY2Ng==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396767666", "bodyText": "If we're going to use this string in more than one place (and I see it below in line 283), could you please make it a constant?", "author": "fbbradheintz", "createdAt": "2020-03-23T21:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2OTYzNg==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396769636", "bodyText": "And likewise with the other related strings.", "author": "fbbradheintz", "createdAt": "2020-03-23T21:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NjQxOQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r397056419", "bodyText": "Added wrapper functions in SnapshotManager to take care of this.", "author": "harshbafna", "createdAt": "2020-03-24T10:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad1b5ae317551dd20db1697670a8964fa4664964", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java b/frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java\nindex bb648047..bc9e6c9a 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java\n\n@@ -241,7 +241,7 @@ public class ManagementRequestHandler extends HttpRequestHandlerChain {\n         final String msg = \"Model \\\"\" + modelName + \"\\\" registered\";\n         if (initialWorkers <= 0) {\n             NettyUtils.sendJsonResponse(ctx, new StatusResponse(msg));\n-            SnapshotManager.getInstance().saveSnapshot(\"snapshot\");\n+            SnapshotManager.getInstance().saveSnapshot();\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMzIyNQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395813225", "bodyText": "Why not a separate location for configs, they are \"special\" in some sense. They are different from simply log locations.", "author": "mycpuorg", "createdAt": "2020-03-20T18:16:06Z", "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pytorch.serve.snapshot;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.io.FileUtils;\n+import org.pytorch.serve.http.ConflictStatusException;\n+import org.pytorch.serve.util.ConfigManager;\n+\n+public class FSSnapshotSerializer implements SnapshotSerializer {\n+\n+    private ConfigManager configManager = ConfigManager.getInstance();\n+    public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n+\n+    public void saveSnapshot(Snapshot snapshot) throws IOException, ConflictStatusException {\n+        File snapshotPath = new File(System.getProperty(\"LOG_LOCATION\") + \"/config\");", "originalCommit": "a2a8d17552664161a31b7fa2a54abc9607215039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NzI5Ng==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395997296", "bodyText": "The thought was that, unless required for restoring to an old state, all snapshots are essentially logs dumps of current state of the server. We currently store the snapshots inside config directory in log_location.\nWe will need to introduce a new mandatory startup flag like --snapshot-dir to store it in a separate directory.", "author": "harshbafna", "createdAt": "2020-03-21T14:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMzIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NjAwMQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r399686001", "bodyText": "@fbbradheintz  created #120", "author": "mycpuorg", "createdAt": "2020-03-28T17:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMzIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "63703708dfef3845a7dac272a13de03f653a4c27", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java b/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\nindex 32b4a9db..95ad45d9 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\n\n@@ -18,6 +18,7 @@ import org.pytorch.serve.util.ConfigManager;\n public class FSSnapshotSerializer implements SnapshotSerializer {\n \n     private ConfigManager configManager = ConfigManager.getInstance();\n+    private static final String TS_MODEL_SNAPSHOT = \"model_snapshot\";\n     public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n \n     public void saveSnapshot(Snapshot snapshot) throws IOException, ConflictStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMzQ5OQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395813499", "bodyText": "Please use global const definitions for property names", "author": "mycpuorg", "createdAt": "2020-03-20T18:16:39Z", "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pytorch.serve.snapshot;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.io.FileUtils;\n+import org.pytorch.serve.http.ConflictStatusException;\n+import org.pytorch.serve.util.ConfigManager;\n+\n+public class FSSnapshotSerializer implements SnapshotSerializer {\n+\n+    private ConfigManager configManager = ConfigManager.getInstance();\n+    public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n+\n+    public void saveSnapshot(Snapshot snapshot) throws IOException, ConflictStatusException {\n+        File snapshotPath = new File(System.getProperty(\"LOG_LOCATION\") + \"/config\");\n+\n+        FileUtils.forceMkdir(snapshotPath);\n+\n+        Properties prop = configManager.getConfiguration();\n+\n+        File snapshotFile = new File(snapshotPath, snapshot.getName());\n+        if (snapshotFile.exists()) {\n+            throw new ConflictStatusException(\n+                    \"Snapshot \" + snapshot.getName() + \" already exists.\");\n+        }\n+\n+        String snapshotJson = GSON.toJson(snapshot, Snapshot.class);\n+        prop.put(\"model_snapshot\", snapshotJson);", "originalCommit": "a2a8d17552664161a31b7fa2a54abc9607215039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwMTA3Nw==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396401077", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-03-23T12:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMzQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "63703708dfef3845a7dac272a13de03f653a4c27", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java b/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\nindex 32b4a9db..95ad45d9 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\n\n@@ -18,6 +18,7 @@ import org.pytorch.serve.util.ConfigManager;\n public class FSSnapshotSerializer implements SnapshotSerializer {\n \n     private ConfigManager configManager = ConfigManager.getInstance();\n+    private static final String TS_MODEL_SNAPSHOT = \"model_snapshot\";\n     public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n \n     public void saveSnapshot(Snapshot snapshot) throws IOException, ConflictStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNTg5MA==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395815890", "bodyText": "looks more and more like Snapshot is assuming the role of ModelVersionedRefs why? This increases the footprint of the whole application dramatically. Until clarified, please consider writing a design doc or adding design under documentation for this feature.", "author": "mycpuorg", "createdAt": "2020-03-20T18:21:18Z", "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/Snapshot.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.pytorch.serve.snapshot;\n+\n+import java.util.Map;\n+\n+public class Snapshot {\n+    private String name;\n+    private int modelCount;\n+    private long created;\n+    private Map<String, Map<String, ModelInfo>> models;", "originalCommit": "a2a8d17552664161a31b7fa2a54abc9607215039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NzY1NQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395997655", "bodyText": "Snapshot is essentially dumping all the current state of all registered models, which is stored using ModelVersionedRefs. While saving snapshot it actually refers the current ModelVersionRefs and generates the snapshot object to dump.\nAs indicated in one of the earlier comment the only difference is between the Model class and the ModelInfo class used for representation.  Also ModelVersionedRefs contains much too detailed information about the current in-memory state of registered models, which is not required in the snapshot.", "author": "harshbafna", "createdAt": "2020-03-21T14:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyMjMwMg==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r397322302", "bodyText": "renamed ModelInfo to ModelSnapshot", "author": "harshbafna", "createdAt": "2020-03-24T17:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNTg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0d30188fd41a463c6086df1979902c3cd01a9609", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/snapshot/Snapshot.java b/frontend/server/src/main/java/org/pytorch/serve/snapshot/Snapshot.java\nindex ff39ec27..02b136bb 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/snapshot/Snapshot.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/snapshot/Snapshot.java\n\n@@ -6,7 +6,7 @@ public class Snapshot {\n     private String name;\n     private int modelCount;\n     private long created;\n-    private Map<String, Map<String, ModelInfo>> models;\n+    private Map<String, Map<String, ModelSnapshot>> models;\n \n     public Snapshot(String snaspshotName, int modelCount) {\n         this.name = snaspshotName;\n"}}, {"oid": "63703708dfef3845a7dac272a13de03f653a4c27", "url": "https://github.com/pytorch/serve/commit/63703708dfef3845a7dac272a13de03f653a4c27", "message": "added global const definitions for model_snapshot property", "committedDate": "2020-03-23T12:01:02Z", "type": "commit"}, {"oid": "3a519bb13b767359e6a30c4d9767cdab7704ea9f", "url": "https://github.com/pytorch/serve/commit/3a519bb13b767359e6a30c4d9767cdab7704ea9f", "message": "removed unused code", "committedDate": "2020-03-23T12:03:42Z", "type": "commit"}, {"oid": "8dfc2b9ea8321f4d7396585d278d2e2a2b36b8ab", "url": "https://github.com/pytorch/serve/commit/8dfc2b9ea8321f4d7396585d278d2e2a2b36b8ab", "message": "Merge branch 'stage_release' into snapshot", "committedDate": "2020-03-23T15:45:49Z", "type": "commit"}, {"oid": "ad1b5ae317551dd20db1697670a8964fa4664964", "url": "https://github.com/pytorch/serve/commit/ad1b5ae317551dd20db1697670a8964fa4664964", "message": "UT fixes and added wrapper to save snapshot function call", "committedDate": "2020-03-24T09:30:30Z", "type": "commit"}, {"oid": "b0db4f7f2b8536eab51bd05c0f16a5c43c31d729", "url": "https://github.com/pytorch/serve/commit/b0db4f7f2b8536eab51bd05c0f16a5c43c31d729", "message": "fixed expected values for related to model download from url related UTs", "committedDate": "2020-03-24T10:00:32Z", "type": "commit"}, {"oid": "cbe800b1f40a6590211990c041ec2731f2cca007", "url": "https://github.com/pytorch/serve/commit/cbe800b1f40a6590211990c041ec2731f2cca007", "message": "PMD fixes", "committedDate": "2020-03-24T10:23:00Z", "type": "commit"}, {"oid": "35b81d485fc1470e0520daa49ed4d1041e48ccf6", "url": "https://github.com/pytorch/serve/commit/35b81d485fc1470e0520daa49ed4d1041e48ccf6", "message": "missed checkin", "committedDate": "2020-03-24T10:32:08Z", "type": "commit"}, {"oid": "0d30188fd41a463c6086df1979902c3cd01a9609", "url": "https://github.com/pytorch/serve/commit/0d30188fd41a463c6086df1979902c3cd01a9609", "message": "renamed ModelInfo as ModelSnapshot", "committedDate": "2020-03-24T17:09:01Z", "type": "commit"}, {"oid": "b03d0540963ed6fa928117c11c1c7d05110f581f", "url": "https://github.com/pytorch/serve/commit/b03d0540963ed6fa928117c11c1c7d05110f581f", "message": "Merge branch 'stage_release' into snapshot", "committedDate": "2020-03-24T19:51:23Z", "type": "commit"}, {"oid": "bc95e8d08c5ee1112cd9f4a6eaf9f16e4a4cdea2", "url": "https://github.com/pytorch/serve/commit/bc95e8d08c5ee1112cd9f4a6eaf9f16e4a4cdea2", "message": "fixed version and model store flag issue", "committedDate": "2020-03-24T20:06:12Z", "type": "commit"}, {"oid": "b55af576f4f206e6bd3321d31bebcb2f386ad045", "url": "https://github.com/pytorch/serve/commit/b55af576f4f206e6bd3321d31bebcb2f386ad045", "message": "UT changes", "committedDate": "2020-03-25T14:06:15Z", "type": "commit"}, {"oid": "992432c8f806e135cb505f1fc01d00ea3ec5c36d", "url": "https://github.com/pytorch/serve/commit/992432c8f806e135cb505f1fc01d00ea3ec5c36d", "message": "java formatting", "committedDate": "2020-03-25T14:09:53Z", "type": "commit"}, {"oid": "0218d89746ee8bf0509cc5b40c0b57662b978206", "url": "https://github.com/pytorch/serve/commit/0218d89746ee8bf0509cc5b40c0b57662b978206", "message": "initial commit for snapshot UTs", "committedDate": "2020-03-25T15:44:14Z", "type": "commit"}, {"oid": "2a2f124c8a8b410e2ff70f4c52105cd82b1e1d3a", "url": "https://github.com/pytorch/serve/commit/2a2f124c8a8b410e2ff70f4c52105cd82b1e1d3a", "message": "Merge branch 'stage_release' into snapshot", "committedDate": "2020-03-25T18:00:32Z", "type": "commit"}, {"oid": "c0877eba6a3be77df710e3d74500f3c4d71ab0e6", "url": "https://github.com/pytorch/serve/commit/c0877eba6a3be77df710e3d74500f3c4d71ab0e6", "message": "updated expected output", "committedDate": "2020-03-25T18:38:16Z", "type": "commit"}, {"oid": "c69d4a1dbb7915834e2a8714e76853dc226a8317", "url": "https://github.com/pytorch/serve/commit/c69d4a1dbb7915834e2a8714e76853dc226a8317", "message": "updated UT", "committedDate": "2020-03-26T10:19:03Z", "type": "commit"}, {"oid": "6c53c7ef19d769d8b0eba7186a5ddff2190be8f1", "url": "https://github.com/pytorch/serve/commit/6c53c7ef19d769d8b0eba7186a5ddff2190be8f1", "message": "updated timestamp format for snapshot file in doc", "committedDate": "2020-03-27T05:25:49Z", "type": "commit"}, {"oid": "cb7ac629c546622a63b20324ee07722d959cd109", "url": "https://github.com/pytorch/serve/commit/cb7ac629c546622a63b20324ee07722d959cd109", "message": "logged error in snapshot name conflict instead of throwing exception", "committedDate": "2020-03-27T07:34:55Z", "type": "commit"}, {"oid": "d0f6f65a0f8e7d33b58da4e999842d8c055e8ef1", "url": "https://github.com/pytorch/serve/commit/d0f6f65a0f8e7d33b58da4e999842d8c055e8ef1", "message": "enhanced CI buildspec", "committedDate": "2020-03-27T10:00:00Z", "type": "commit"}, {"oid": "86dc7d2a44597ed0576dc0473f2f1424dfecc08b", "url": "https://github.com/pytorch/serve/commit/86dc7d2a44597ed0576dc0473f2f1424dfecc08b", "message": "dummy commit", "committedDate": "2020-03-27T10:58:07Z", "type": "commit"}, {"oid": "64aa623ef975a3c0aa31843c47ba209eee7916b5", "url": "https://github.com/pytorch/serve/commit/64aa623ef975a3c0aa31843c47ba209eee7916b5", "message": "removed jdk", "committedDate": "2020-03-27T11:02:51Z", "type": "commit"}, {"oid": "ae31dc5168cb81d7527f566e523f0e00ecbf7a5c", "url": "https://github.com/pytorch/serve/commit/ae31dc5168cb81d7527f566e523f0e00ecbf7a5c", "message": "added psutil", "committedDate": "2020-03-27T11:10:20Z", "type": "commit"}, {"oid": "261c75d494d742b501e8011dbe9e02d95ad4f9f7", "url": "https://github.com/pytorch/serve/commit/261c75d494d742b501e8011dbe9e02d95ad4f9f7", "message": "added jdk11 in install commands", "committedDate": "2020-03-27T11:27:49Z", "type": "commit"}, {"oid": "922678c8934de89c6d81682cdc3b34b635a082bf", "url": "https://github.com/pytorch/serve/commit/922678c8934de89c6d81682cdc3b34b635a082bf", "message": "corrected log messages", "committedDate": "2020-03-27T14:37:04Z", "type": "commit"}, {"oid": "4554e74cf0f3bcefa816427b8e03fc4c249f10f6", "url": "https://github.com/pytorch/serve/commit/4554e74cf0f3bcefa816427b8e03fc4c249f10f6", "message": "updated script based on testing", "committedDate": "2020-03-27T15:23:57Z", "type": "commit"}, {"oid": "11009660a330d126ec989da2e5b97986048dc6c9", "url": "https://github.com/pytorch/serve/commit/11009660a330d126ec989da2e5b97986048dc6c9", "message": "Merge pull request #128 from pytorch/ci_build_enhancement\n\nCi build enhancement merging to snapshot branch", "committedDate": "2020-03-27T19:12:28Z", "type": "commit"}, {"oid": "03c1410d7b3684b5c2c05bf4679acb0d870f1d2c", "url": "https://github.com/pytorch/serve/commit/03c1410d7b3684b5c2c05bf4679acb0d870f1d2c", "message": "added UTs for snapshot feature", "committedDate": "2020-03-29T10:30:03Z", "type": "commit"}, {"oid": "f9d4a6895d76f1082cfeb2be93af3813dfb769b1", "url": "https://github.com/pytorch/serve/commit/f9d4a6895d76f1082cfeb2be93af3813dfb769b1", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot", "committedDate": "2020-03-29T10:30:20Z", "type": "commit"}, {"oid": "f232356b88eb1bef468b24f76038a17d6faa5611", "url": "https://github.com/pytorch/serve/commit/f232356b88eb1bef468b24f76038a17d6faa5611", "message": "updated UTs based on testing different machines", "committedDate": "2020-03-29T11:17:28Z", "type": "commit"}, {"oid": "3ca728b60c2afe480b340320efc12f188c980637", "url": "https://github.com/pytorch/serve/commit/3ca728b60c2afe480b340320efc12f188c980637", "message": "fixed config manager test", "committedDate": "2020-03-29T11:34:49Z", "type": "commit"}, {"oid": "50247b2f46d550d32217af7cc31b9a8937d34a45", "url": "https://github.com/pytorch/serve/commit/50247b2f46d550d32217af7cc31b9a8937d34a45", "message": "formatting fix", "committedDate": "2020-03-29T11:36:16Z", "type": "commit"}, {"oid": "624cf0c2c0b293990987f0968a5bf2e209116db5", "url": "https://github.com/pytorch/serve/commit/624cf0c2c0b293990987f0968a5bf2e209116db5", "message": "fixed bug introduced in config manager and updated UTs accordingly", "committedDate": "2020-03-29T12:55:51Z", "type": "commit"}, {"oid": "132f85e1a50bfd5bb4fde3c30d07ed36cdb164a4", "url": "https://github.com/pytorch/serve/commit/132f85e1a50bfd5bb4fde3c30d07ed36cdb164a4", "message": "updated expected output after config manager fixes", "committedDate": "2020-03-29T13:09:01Z", "type": "commit"}, {"oid": "4d5a86385136bdf4a962230578a1bfd7b7cb6ace", "url": "https://github.com/pytorch/serve/commit/4d5a86385136bdf4a962230578a1bfd7b7cb6ace", "message": "added handling for GPU machines", "committedDate": "2020-03-29T14:02:53Z", "type": "commit"}, {"oid": "10f6b715e2e9a0ce4e9a4001fdc4333abd7f1da8", "url": "https://github.com/pytorch/serve/commit/10f6b715e2e9a0ce4e9a4001fdc4333abd7f1da8", "message": "added wait for snapshot generation", "committedDate": "2020-03-29T17:07:50Z", "type": "commit"}, {"oid": "42357ff33da7fa56bfef00003722ac647b707fcd", "url": "https://github.com/pytorch/serve/commit/42357ff33da7fa56bfef00003722ac647b707fcd", "message": "Merge branch 'stage_release' into snapshot", "committedDate": "2020-03-30T04:39:24Z", "type": "commit"}, {"oid": "a0c178a09b858452adfd2ba73395fa99e588ba36", "url": "https://github.com/pytorch/serve/commit/a0c178a09b858452adfd2ba73395fa99e588ba36", "message": "fixed config read issue", "committedDate": "2020-03-30T08:08:23Z", "type": "commit"}, {"oid": "b37a5025667a291ed85b14a213319bf05c4d04ff", "url": "https://github.com/pytorch/serve/commit/b37a5025667a291ed85b14a213319bf05c4d04ff", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot", "committedDate": "2020-03-30T08:08:37Z", "type": "commit"}, {"oid": "f871019f396fe5c273c42cb6857ba7925c349a09", "url": "https://github.com/pytorch/serve/commit/f871019f396fe5c273c42cb6857ba7925c349a09", "message": "fixed UTs for config validation", "committedDate": "2020-03-30T08:54:21Z", "type": "commit"}, {"oid": "a476a351dd8b8ae423942e1d77982e79f0bc1af9", "url": "https://github.com/pytorch/serve/commit/a476a351dd8b8ae423942e1d77982e79f0bc1af9", "message": "Added shutdown hook to generate shutdown snapshot", "committedDate": "2020-03-30T13:05:47Z", "type": "commit"}, {"oid": "344c9f54775fabfe780412e252b0c901b2f164ac", "url": "https://github.com/pytorch/serve/commit/344c9f54775fabfe780412e252b0c901b2f164ac", "message": "fix for no-config-snapshot flag", "committedDate": "2020-03-30T13:19:17Z", "type": "commit"}, {"oid": "be866375c61bb67df8d8d905bf9ebea7431e1e29", "url": "https://github.com/pytorch/serve/commit/be866375c61bb67df8d8d905bf9ebea7431e1e29", "message": "added override to fix PMD error", "committedDate": "2020-03-30T13:27:17Z", "type": "commit"}, {"oid": "3d2072f369f0667276028147a14906f0b915f99d", "url": "https://github.com/pytorch/serve/commit/3d2072f369f0667276028147a14906f0b915f99d", "message": "added null check for version not found for scale api", "committedDate": "2020-03-30T13:48:20Z", "type": "commit"}, {"oid": "eacdea57c0192be362a78c5660244836788b4728", "url": "https://github.com/pytorch/serve/commit/eacdea57c0192be362a78c5660244836788b4728", "message": "updated doc for no-config-snapshot flag", "committedDate": "2020-03-30T15:04:59Z", "type": "commit"}, {"oid": "03e4c1b70256eba5e8e45857d0e0371a3d78e6b5", "url": "https://github.com/pytorch/serve/commit/03e4c1b70256eba5e8e45857d0e0371a3d78e6b5", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot", "committedDate": "2020-03-30T15:05:28Z", "type": "commit"}, {"oid": "1c5dd9745fcebbb546536d4900b487dc3ae86312", "url": "https://github.com/pytorch/serve/commit/1c5dd9745fcebbb546536d4900b487dc3ae86312", "message": "fixed bug related to no config snapshot and models falg", "committedDate": "2020-03-30T15:36:48Z", "type": "commit"}, {"oid": "c499317dfb1a5e2edaf6557f5774d3ee40a62a5e", "url": "https://github.com/pytorch/serve/commit/c499317dfb1a5e2edaf6557f5774d3ee40a62a5e", "message": "added changes for async calls and multi snapshot generation", "committedDate": "2020-03-31T06:17:00Z", "type": "commit"}, {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "url": "https://github.com/pytorch/serve/commit/fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot", "committedDate": "2020-03-31T06:18:55Z", "type": "commit"}, {"oid": "189f68810d7b6cd4e45e9d749aa32357a7368b39", "url": "https://github.com/pytorch/serve/commit/189f68810d7b6cd4e45e9d749aa32357a7368b39", "message": "refactored UT and created seprate test class for Snapshot", "committedDate": "2020-03-31T17:02:10Z", "type": "commit"}, {"oid": "54de7ec113530fb42cf16e02d2dbcf30738ca4fd", "url": "https://github.com/pytorch/serve/commit/54de7ec113530fb42cf16e02d2dbcf30738ca4fd", "message": "fixed ts-config flag issue in python frontend layer", "committedDate": "2020-03-31T17:59:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NzQ4OQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401167489", "bodyText": "Should this be an assertion, or a warning in the logs? Someone may have moved models out of the model store on purpose. We obviously shouldn't handle this silently, but I don't think crashing the app is the user experience we're after either.\nPlease update this to:\n\nContinue healthy startup without the missing models\nEmit clear & helpful log messages about which model was missing to ts_log.log and stdout/stderr", "author": "fbbradheintz", "createdAt": "2020-03-31T19:40:36Z", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -201,24 +205,40 @@ public HttpResponseStatus setDefaultVersion(String modelName, String newModelVer\n     }\n \n     public CompletableFuture<HttpResponseStatus> updateModel(\n-            String modelName, String versionId, int minWorkers, int maxWorkers) {\n+            String modelName, String versionId, int minWorkers, int maxWorkers, boolean isStartup) {\n         ModelVersionedRefs vmodel = modelsNameMap.get(modelName);\n         if (vmodel == null) {\n             throw new AssertionError(\"Model not found: \" + modelName);\n         }\n \n         Model model = vmodel.getVersionModel(versionId);\n+\n+        if (model == null) {\n+            throw new AssertionError(\"Model version not not found for model : \" + modelName);", "originalCommit": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MDk2Nw==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401170967", "bodyText": "This might be a problem; elsewhere I see a command line arg (-ss/--snapshot-store) defined for the config folder, but this is just adding /config to the log folder. Either we should pull out the CLI option, or we should store the config folder in a property accessible by all modules that need it (as it looks like was done for the log location).", "author": "fbbradheintz", "createdAt": "2020-03-31T19:47:08Z", "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -428,6 +443,31 @@ private PrivateKey loadPrivateKey(String keyFile) throws IOException, GeneralSec\n         }\n     }\n \n+    private String getLastSnapshot() {\n+        if (isSnapshotDisabled()) {\n+            return null;\n+        }\n+\n+        String latestSnapshotPath = null;\n+        Path configPath = Paths.get(System.getProperty(\"LOG_LOCATION\"), \"config\");", "originalCommit": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzODMzOA==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401438338", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-04-01T08:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MDk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "55cc1b773e81836a978244edf41c4d311aeb244d", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java b/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java\nindex 498b2ef1..5dde8a34 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java\n\n@@ -448,24 +456,7 @@ public final class ConfigManager {\n             return null;\n         }\n \n-        String latestSnapshotPath = null;\n-        Path configPath = Paths.get(System.getProperty(\"LOG_LOCATION\"), \"config\");\n-\n-        if (Files.exists(configPath)) {\n-            try {\n-                Optional<Path> lastFilePath =\n-                        Files.list(configPath)\n-                                .filter(f -> !Files.isDirectory(f))\n-                                .max(Comparator.comparingLong(f -> f.toFile().lastModified()));\n-                if (lastFilePath.isPresent()) {\n-                    latestSnapshotPath = lastFilePath.get().toString();\n-                }\n-            } catch (IOException e) {\n-                e.printStackTrace(); // NOPMD\n-            }\n-        }\n-\n-        return latestSnapshotPath;\n+        return SnapshotUtils.getLastSnapshot(getSnapshotStore());\n     }\n \n     public String getProperty(String key, String def) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzAwNg==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401173006", "bodyText": "Do we want last modified time, or the timestamp on the file. If someone brings up a older config file in an editor and changes the last mod date, TorchServe might do unintended things, e.g. start up with the wrong file.\nThe YYYYmmDDHHMMSS format was specifically chosen so that the most recently timestamped file could be found with a simple name sort.", "author": "fbbradheintz", "createdAt": "2020-03-31T19:50:38Z", "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -428,6 +443,31 @@ private PrivateKey loadPrivateKey(String keyFile) throws IOException, GeneralSec\n         }\n     }\n \n+    private String getLastSnapshot() {\n+        if (isSnapshotDisabled()) {\n+            return null;\n+        }\n+\n+        String latestSnapshotPath = null;\n+        Path configPath = Paths.get(System.getProperty(\"LOG_LOCATION\"), \"config\");\n+\n+        if (Files.exists(configPath)) {\n+            try {\n+                Optional<Path> lastFilePath =\n+                        Files.list(configPath)\n+                                .filter(f -> !Files.isDirectory(f))\n+                                .max(Comparator.comparingLong(f -> f.toFile().lastModified()));", "originalCommit": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNzk2MQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401437961", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-04-01T08:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "55cc1b773e81836a978244edf41c4d311aeb244d", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java b/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java\nindex 498b2ef1..5dde8a34 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java\n\n@@ -448,24 +456,7 @@ public final class ConfigManager {\n             return null;\n         }\n \n-        String latestSnapshotPath = null;\n-        Path configPath = Paths.get(System.getProperty(\"LOG_LOCATION\"), \"config\");\n-\n-        if (Files.exists(configPath)) {\n-            try {\n-                Optional<Path> lastFilePath =\n-                        Files.list(configPath)\n-                                .filter(f -> !Files.isDirectory(f))\n-                                .max(Comparator.comparingLong(f -> f.toFile().lastModified()));\n-                if (lastFilePath.isPresent()) {\n-                    latestSnapshotPath = lastFilePath.get().toString();\n-                }\n-            } catch (IOException e) {\n-                e.printStackTrace(); // NOPMD\n-            }\n-        }\n-\n-        return latestSnapshotPath;\n+        return SnapshotUtils.getLastSnapshot(getSnapshotStore());\n     }\n \n     public String getProperty(String key, String def) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTcxMw==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401185713", "bodyText": "I made a note on this elsewhere. Again, we should have a property or other single source of truth for the config folder, as we do for the log folder. The duplicated code that builds a path string from scratch every time invites bugs.", "author": "fbbradheintz", "createdAt": "2020-03-31T20:13:30Z", "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.pytorch.serve.snapshot;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.io.FileUtils;\n+import org.pytorch.serve.util.ConfigManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FSSnapshotSerializer implements SnapshotSerializer {\n+\n+    private Logger logger = LoggerFactory.getLogger(FSSnapshotSerializer.class);\n+    private ConfigManager configManager = ConfigManager.getInstance();\n+    private static final String TS_MODEL_SNAPSHOT = \"model_snapshot\";\n+    public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n+\n+    @Override\n+    public void saveSnapshot(Snapshot snapshot) throws IOException {\n+        File snapshotPath = new File(System.getProperty(\"LOG_LOCATION\"), \"config\");", "originalCommit": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzODA1Mg==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401438052", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-04-01T08:22:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "55cc1b773e81836a978244edf41c4d311aeb244d", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java b/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\nindex df049ec6..d24bd3f4 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\n\n@@ -8,8 +8,15 @@ import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Properties;\n import org.apache.commons.io.FileUtils;\n import org.pytorch.serve.util.ConfigManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjY1NQ==", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401192655", "bodyText": "The output format surprised me here. When the detailed notes on issue #73 suggested using the config files, we had pictured using the config files, in the same manner they're normally used, not embedding some other serialization scheme within the config files.\nIt's probably too late to pull back on this for the initial release, but can someone explain to me whether there's a reason that we're doing it this way instead of just building a normal config file?", "author": "fbbradheintz", "createdAt": "2020-03-31T20:25:10Z", "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.pytorch.serve.snapshot;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.io.FileUtils;\n+import org.pytorch.serve.util.ConfigManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FSSnapshotSerializer implements SnapshotSerializer {\n+\n+    private Logger logger = LoggerFactory.getLogger(FSSnapshotSerializer.class);\n+    private ConfigManager configManager = ConfigManager.getInstance();\n+    private static final String TS_MODEL_SNAPSHOT = \"model_snapshot\";\n+    public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n+\n+    @Override\n+    public void saveSnapshot(Snapshot snapshot) throws IOException {\n+        File snapshotPath = new File(System.getProperty(\"LOG_LOCATION\"), \"config\");\n+\n+        FileUtils.forceMkdir(snapshotPath);\n+\n+        Properties prop = configManager.getConfiguration();\n+\n+        File snapshotFile = new File(snapshotPath, snapshot.getName());\n+        if (snapshotFile.exists()) {\n+            logger.error(\n+                    \"Snapshot \" + snapshot.getName() + \" already exists. Not saving the sanpshot.\");\n+        }\n+\n+        String snapshotJson = GSON.toJson(snapshot, Snapshot.class);\n+        prop.put(TS_MODEL_SNAPSHOT, snapshotJson);\n+        try (OutputStream os = Files.newOutputStream(snapshotFile.toPath())) {", "originalCommit": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55cc1b773e81836a978244edf41c4d311aeb244d", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java b/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\nindex df049ec6..d24bd3f4 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java\n\n@@ -8,8 +8,15 @@ import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Properties;\n import org.apache.commons.io.FileUtils;\n import org.pytorch.serve.util.ConfigManager;\n"}}, {"oid": "55cc1b773e81836a978244edf41c4d311aeb244d", "url": "https://github.com/pytorch/serve/commit/55cc1b773e81836a978244edf41c4d311aeb244d", "message": "made snapshot serializer more robust and updated snapshot validator to stop serve in case of invaid snapshot", "committedDate": "2020-04-01T08:21:51Z", "type": "commit"}, {"oid": "2032f48cdc86084a39744c690a1e7e2e7c49b6bb", "url": "https://github.com/pytorch/serve/commit/2032f48cdc86084a39744c690a1e7e2e7c49b6bb", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot", "committedDate": "2020-04-01T08:22:06Z", "type": "commit"}, {"oid": "e893174015ddb1eb07360ad127b24064e6dcaa92", "url": "https://github.com/pytorch/serve/commit/e893174015ddb1eb07360ad127b24064e6dcaa92", "message": "fixed checkstyle and pmd issues, updated expected output for UTs", "committedDate": "2020-04-01T09:35:12Z", "type": "commit"}, {"oid": "3de145a29580f5cc2fe60782797e61bb1bd3a0a7", "url": "https://github.com/pytorch/serve/commit/3de145a29580f5cc2fe60782797e61bb1bd3a0a7", "message": "Merge branch 'stage_release' into snapshot", "committedDate": "2020-04-01T10:00:45Z", "type": "commit"}, {"oid": "a22050c7913c59e28282f7a13c1e09a3f93e17df", "url": "https://github.com/pytorch/serve/commit/a22050c7913c59e28282f7a13c1e09a3f93e17df", "message": "updated snapshot doc", "committedDate": "2020-04-01T10:38:48Z", "type": "commit"}, {"oid": "f8c866aafb02070d27255bfcb0900cddbfdf32cb", "url": "https://github.com/pytorch/serve/commit/f8c866aafb02070d27255bfcb0900cddbfdf32cb", "message": "cleaned up unused code", "committedDate": "2020-04-01T10:39:44Z", "type": "commit"}, {"oid": "e9310cea3d03aa79ed72b74c1ff7df4f4cd98d64", "url": "https://github.com/pytorch/serve/commit/e9310cea3d03aa79ed72b74c1ff7df4f4cd98d64", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot", "committedDate": "2020-04-01T10:40:24Z", "type": "commit"}, {"oid": "0b87226e6acba10b8532ddd5052c0427962a21c2", "url": "https://github.com/pytorch/serve/commit/0b87226e6acba10b8532ddd5052c0427962a21c2", "message": "updated torchserve_sanity to run basic test for snapshot feature", "committedDate": "2020-04-01T12:40:47Z", "type": "commit"}, {"oid": "a7ed6e21b8045d0d913aa9fde5b3510f050e4ba4", "url": "https://github.com/pytorch/serve/commit/a7ed6e21b8045d0d913aa9fde5b3510f050e4ba4", "message": "fixed typo while creating logger", "committedDate": "2020-04-01T17:21:00Z", "type": "commit"}, {"oid": "94b45bef4b1e1a54c4e5a263934fb8e011b26329", "url": "https://github.com/pytorch/serve/commit/94b45bef4b1e1a54c4e5a263934fb8e011b26329", "message": "run inference only after server restart\n\nTh following steps are run for snapshot sanity:\n* start server without any models registered\n* register resnet-18 model via HTTP API\n* stop server -> generates a snapshot\n* start server (should auto-load the last snapshot)\n* run inference on the resnet-18 model should pass for sanity success", "committedDate": "2020-04-02T23:40:55Z", "type": "commit"}, {"oid": "d747de9d49d30b9155f83f8080eaa0e701a4127e", "url": "https://github.com/pytorch/serve/commit/d747de9d49d30b9155f83f8080eaa0e701a4127e", "message": "refactore UTs for ModelServer and Snapshot feature", "committedDate": "2020-04-03T13:25:34Z", "type": "commit"}, {"oid": "7dba49aab3c56fc46ca7d8dbcefbfffa0a13dd3d", "url": "https://github.com/pytorch/serve/commit/7dba49aab3c56fc46ca7d8dbcefbfffa0a13dd3d", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot", "committedDate": "2020-04-03T13:25:53Z", "type": "commit"}, {"oid": "24b8f81c4cbe4e91a54245077787a203474f1e1b", "url": "https://github.com/pytorch/serve/commit/24b8f81c4cbe4e91a54245077787a203474f1e1b", "message": "updated the channel close logic", "committedDate": "2020-04-03T13:46:23Z", "type": "commit"}, {"oid": "b301fb0f0486199f2fa908f569edfb6374a604a9", "url": "https://github.com/pytorch/serve/commit/b301fb0f0486199f2fa908f569edfb6374a604a9", "message": "reverted UT refactoring", "committedDate": "2020-04-03T15:24:28Z", "type": "commit"}]}