{"pr_number": 687, "pr_title": "gRPC support for TorchServe", "pr_createdAt": "2020-09-17T17:31:51Z", "pr_url": "https://github.com/pytorch/serve/pull/687", "timeline": [{"oid": "21427156af58767dea527e1e15b557c9fc4c6816", "url": "https://github.com/pytorch/serve/commit/21427156af58767dea527e1e15b557c9fc4c6816", "message": "refactored torchserve job", "committedDate": "2020-09-17T17:19:21Z", "type": "commit"}, {"oid": "77b135601e8052efeaf3895766a274129dca874d", "url": "https://github.com/pytorch/serve/commit/77b135601e8052efeaf3895766a274129dca874d", "message": "added grpc server side implementation", "committedDate": "2020-09-17T17:21:11Z", "type": "commit"}, {"oid": "b75b81a07d4879f4e84f7a7ef3e21027f3e69125", "url": "https://github.com/pytorch/serve/commit/b75b81a07d4879f4e84f7a7ef3e21027f3e69125", "message": "added protobuff files", "committedDate": "2020-09-17T17:22:27Z", "type": "commit"}, {"oid": "d46d56a9537c13bf23771292650c550b135ed482", "url": "https://github.com/pytorch/serve/commit/d46d56a9537c13bf23771292650c550b135ed482", "message": "added grpc server startup", "committedDate": "2020-09-17T17:24:39Z", "type": "commit"}, {"oid": "fec11bfef5e9877639a5eb2cf02d17f3a1251072", "url": "https://github.com/pytorch/serve/commit/fec11bfef5e9877639a5eb2cf02d17f3a1251072", "message": "fixed valid port test case", "committedDate": "2020-09-17T17:25:02Z", "type": "commit"}, {"oid": "22734badb2627f8be501225fb6ab748221a9f31e", "url": "https://github.com/pytorch/serve/commit/22734badb2627f8be501225fb6ab748221a9f31e", "message": "automated server stub generation through gradle", "committedDate": "2020-09-17T17:27:13Z", "type": "commit"}, {"oid": "14cb1eb338b14079df737e35dc1e88b057e49de9", "url": "https://github.com/pytorch/serve/commit/14cb1eb338b14079df737e35dc1e88b057e49de9", "message": "enhanced sanity script to validate grpc inference api", "committedDate": "2020-09-17T17:30:30Z", "type": "commit"}, {"oid": "199811c627df6a19584bb324b8c533065c2ab51d", "url": "https://github.com/pytorch/serve/commit/199811c627df6a19584bb324b8c533065c2ab51d", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-09-17T17:32:21Z", "type": "commit"}, {"oid": "151cdcc39f422f64d600b2eaf8b4a2cc9aaa51bd", "url": "https://github.com/pytorch/serve/commit/151cdcc39f422f64d600b2eaf8b4a2cc9aaa51bd", "message": "Added grpcio-tools package", "committedDate": "2020-09-17T18:00:24Z", "type": "commit"}, {"oid": "d1abb5cb2b8575448a4e99c36eb849bf3fb14157", "url": "https://github.com/pytorch/serve/commit/d1abb5cb2b8575448a4e99c36eb849bf3fb14157", "message": "fixed path issue in grpc client", "committedDate": "2020-09-17T18:14:45Z", "type": "commit"}, {"oid": "48b049c3befb3c3c357a1fce92636c1bbb046211", "url": "https://github.com/pytorch/serve/commit/48b049c3befb3c3c357a1fce92636c1bbb046211", "message": "fixed incorrect exit logic in client script", "committedDate": "2020-09-17T18:27:16Z", "type": "commit"}, {"oid": "897d5d7a226f12f9dbda509db620e9d03b0f2f55", "url": "https://github.com/pytorch/serve/commit/897d5d7a226f12f9dbda509db620e9d03b0f2f55", "message": "removed json parse in python gRPC client", "committedDate": "2020-09-18T01:48:44Z", "type": "commit"}, {"oid": "0ffc689c85b2d9af523c4309f0dbb516ed3f437c", "url": "https://github.com/pytorch/serve/commit/0ffc689c85b2d9af523c4309f0dbb516ed3f437c", "message": "removed unnecessary file checkin", "committedDate": "2020-09-18T05:02:03Z", "type": "commit"}, {"oid": "3770272cbc46f99f48d7970e4869cd87a26fde5e", "url": "https://github.com/pytorch/serve/commit/3770272cbc46f99f48d7970e4869cd87a26fde5e", "message": "added regression test cases for gRPC regression APIs", "committedDate": "2020-09-18T07:16:51Z", "type": "commit"}, {"oid": "585c03f75f571f9c40766f249e20ce40082865e0", "url": "https://github.com/pytorch/serve/commit/585c03f75f571f9c40766f249e20ce40082865e0", "message": "added tolerance check", "committedDate": "2020-09-18T07:55:32Z", "type": "commit"}, {"oid": "79dd23b6ce8d1c17e42e7d59b2de3175030c3931", "url": "https://github.com/pytorch/serve/commit/79dd23b6ce8d1c17e42e7d59b2de3175030c3931", "message": "added python client stub cleanup", "committedDate": "2020-09-18T09:41:50Z", "type": "commit"}, {"oid": "7037e6cc2c8a5e0af020983f2f318de57fc4a6b5", "url": "https://github.com/pytorch/serve/commit/7037e6cc2c8a5e0af020983f2f318de57fc4a6b5", "message": "enhanced error handling for inference APIs", "committedDate": "2020-09-22T03:34:17Z", "type": "commit"}, {"oid": "5a4a69a5bbcd5001b65831ad0ded1910cfceec20", "url": "https://github.com/pytorch/serve/commit/5a4a69a5bbcd5001b65831ad0ded1910cfceec20", "message": "removed unused utility file", "committedDate": "2020-09-22T03:42:54Z", "type": "commit"}, {"oid": "438683e9df08f9c800929deef8d03fd37e24b703", "url": "https://github.com/pytorch/serve/commit/438683e9df08f9c800929deef8d03fd37e24b703", "message": "added support for datafile driven management api test collection", "committedDate": "2020-09-24T08:58:22Z", "type": "commit"}, {"oid": "90bfde4c5ea0d60600105933f7d852827182b0f8", "url": "https://github.com/pytorch/serve/commit/90bfde4c5ea0d60600105933f7d852827182b0f8", "message": "added gRPC support for management APIs", "committedDate": "2020-09-28T05:44:58Z", "type": "commit"}, {"oid": "7e3ccaaf17a5d8c9e97870c8d3c3b919f8ade848", "url": "https://github.com/pytorch/serve/commit/7e3ccaaf17a5d8c9e97870c8d3c3b919f8ade848", "message": "added minor fixes found during testing", "committedDate": "2020-09-28T07:22:12Z", "type": "commit"}, {"oid": "ee0f0579f1ddbe1559fd8f0ce59135b137b69a83", "url": "https://github.com/pytorch/serve/commit/ee0f0579f1ddbe1559fd8f0ce59135b137b69a83", "message": "enhanced grpc pytest suite to use grpc client for registering and unregistering model", "committedDate": "2020-09-28T11:44:27Z", "type": "commit"}, {"oid": "78533c249cc89785f00b511ac1a5294ddb5132e4", "url": "https://github.com/pytorch/serve/commit/78533c249cc89785f00b511ac1a5294ddb5132e4", "message": "updated command to generate python client stubs", "committedDate": "2020-09-28T11:45:32Z", "type": "commit"}, {"oid": "dfbffa36c7fddfe400a768b6531b4099639feb74", "url": "https://github.com/pytorch/serve/commit/dfbffa36c7fddfe400a768b6531b4099639feb74", "message": "removed netty http staus dependency from wlm framework", "committedDate": "2020-09-28T11:46:07Z", "type": "commit"}, {"oid": "2a529cdf55ee47a5593b8ab6ce8036ce8843c766", "url": "https://github.com/pytorch/serve/commit/2a529cdf55ee47a5593b8ab6ce8036ce8843c766", "message": "refacroted common code to utility module", "committedDate": "2020-09-28T12:13:17Z", "type": "commit"}, {"oid": "6b70abaf794eba2bc6326d921dedcb4e12a10c67", "url": "https://github.com/pytorch/serve/commit/6b70abaf794eba2bc6326d921dedcb4e12a10c67", "message": "added gRPC management api test cases in regression suite and minor fixes", "committedDate": "2020-09-28T18:23:08Z", "type": "commit"}, {"oid": "747e5068ee7009c1c733673de4c73ce1e3859a7c", "url": "https://github.com/pytorch/serve/commit/747e5068ee7009c1c733673de4c73ce1e3859a7c", "message": "added ping api", "committedDate": "2020-09-29T11:30:26Z", "type": "commit"}, {"oid": "8413651bfa100ccea09528535a4a32ec24764ba0", "url": "https://github.com/pytorch/serve/commit/8413651bfa100ccea09528535a4a32ec24764ba0", "message": "removed grpc metric api", "committedDate": "2020-09-29T11:31:36Z", "type": "commit"}, {"oid": "328bb4e7e022bb22eace1a71218743746a94749c", "url": "https://github.com/pytorch/serve/commit/328bb4e7e022bb22eace1a71218743746a94749c", "message": "added ssl support for gRPC server", "committedDate": "2020-09-29T14:50:46Z", "type": "commit"}, {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb", "url": "https://github.com/pytorch/serve/commit/0c1795dc84065cbc908119e09e8b5a87d9bc3edb", "message": "added documentation", "committedDate": "2020-09-29T15:58:20Z", "type": "commit"}, {"oid": "ff2517544e8346ca602367c4820b27f6c675b3b9", "url": "https://github.com/pytorch/serve/commit/ff2517544e8346ca602367c4820b27f6c675b3b9", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-09-30T05:39:42Z", "type": "commit"}, {"oid": "1822ae336ecc25c70ef6b25a5155cfa09844438b", "url": "https://github.com/pytorch/serve/commit/1822ae336ecc25c70ef6b25a5155cfa09844438b", "message": "fixed issue after conflict resolution", "committedDate": "2020-09-30T06:36:40Z", "type": "commit"}, {"oid": "039f48c411b0758cd2035ba8c7831a9d43441554", "url": "https://github.com/pytorch/serve/commit/039f48c411b0758cd2035ba8c7831a9d43441554", "message": "added reference to python gRPC client, used in regression suite, in grpc doc", "committedDate": "2020-09-30T08:57:45Z", "type": "commit"}, {"oid": "126532e559d26dc4a976748e76290079ed207112", "url": "https://github.com/pytorch/serve/commit/126532e559d26dc4a976748e76290079ed207112", "message": "added validation for register and unregister model in sanity script", "committedDate": "2020-09-30T13:36:22Z", "type": "commit"}, {"oid": "ca76ede3b93380502f765da61aa19769164fd25b", "url": "https://github.com/pytorch/serve/commit/ca76ede3b93380502f765da61aa19769164fd25b", "message": "updated docs", "committedDate": "2020-09-30T13:36:37Z", "type": "commit"}, {"oid": "6eb737f35c9d7281aa9404743210b489a0747700", "url": "https://github.com/pytorch/serve/commit/6eb737f35c9d7281aa9404743210b489a0747700", "message": "minor fixes in grpc doc", "committedDate": "2020-09-30T14:41:49Z", "type": "commit"}, {"oid": "d27495cda48b568da8ecc10c7f907d6b0894791a", "url": "https://github.com/pytorch/serve/commit/d27495cda48b568da8ecc10c7f907d6b0894791a", "message": "updated gRPC server await termination code", "committedDate": "2020-09-30T17:09:42Z", "type": "commit"}, {"oid": "0b7eabfe6274730682707f98c564c6f87687360c", "url": "https://github.com/pytorch/serve/commit/0b7eabfe6274730682707f98c564c6f87687360c", "message": "refactored gRPC server startup code", "committedDate": "2020-09-30T17:24:31Z", "type": "commit"}, {"oid": "15322c6659a98b3f545f0d3339e400e4b163b63c", "url": "https://github.com/pytorch/serve/commit/15322c6659a98b3f545f0d3339e400e4b163b63c", "message": "added null check before terminating gRPC servers", "committedDate": "2020-09-30T18:08:39Z", "type": "commit"}, {"oid": "590fca846bc97fd1d16663ec4584bf57bb49d175", "url": "https://github.com/pytorch/serve/commit/590fca846bc97fd1d16663ec4584bf57bb49d175", "message": "minor refactoring of method name", "committedDate": "2020-10-01T12:44:49Z", "type": "commit"}, {"oid": "5b3a6b5847d6272520af7eae3b49bfba211b41ce", "url": "https://github.com/pytorch/serve/commit/5b3a6b5847d6272520af7eae3b49bfba211b41ce", "message": "skipped grpc package from jacoco verification", "committedDate": "2020-10-01T12:45:24Z", "type": "commit"}, {"oid": "63aa51ab276c76c55fb0ffc91b1aec1542412ee3", "url": "https://github.com/pytorch/serve/commit/63aa51ab276c76c55fb0ffc91b1aec1542412ee3", "message": "Fixed typo in doc", "committedDate": "2020-10-12T13:07:05Z", "type": "commit"}, {"oid": "461395bc1f624ef8f240c14d3e5931608deb83f7", "url": "https://github.com/pytorch/serve/commit/461395bc1f624ef8f240c14d3e5931608deb83f7", "message": "added error logs in gRPC client", "committedDate": "2020-10-12T13:07:37Z", "type": "commit"}, {"oid": "653276e09b8097f58c15c88203362292b61d8030", "url": "https://github.com/pytorch/serve/commit/653276e09b8097f58c15c88203362292b61d8030", "message": "added gRPC server interceptor to log api access data", "committedDate": "2020-10-12T13:09:47Z", "type": "commit"}, {"oid": "f1a62279c9c9d94041aac0150dbe60adfc690df2", "url": "https://github.com/pytorch/serve/commit/f1a62279c9c9d94041aac0150dbe60adfc690df2", "message": "added checkstyle fixes", "committedDate": "2020-10-12T13:44:56Z", "type": "commit"}, {"oid": "e78dbff1edff59a1222fb79e8e6856603ca4ff1d", "url": "https://github.com/pytorch/serve/commit/e78dbff1edff59a1222fb79e8e6856603ca4ff1d", "message": "fixed grpc command in readme", "committedDate": "2020-10-13T09:22:54Z", "type": "commit"}, {"oid": "3bb125a4374fd47552d74e306876ee34fc5956f2", "url": "https://github.com/pytorch/serve/commit/3bb125a4374fd47552d74e306876ee34fc5956f2", "message": "refactored test cases to removed code duplication", "committedDate": "2020-10-14T03:31:33Z", "type": "commit"}, {"oid": "4fa484a21838e7157fe3705b0215d3aa5d2bcdfe", "url": "https://github.com/pytorch/serve/commit/4fa484a21838e7157fe3705b0215d3aa5d2bcdfe", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-10-14T03:32:42Z", "type": "commit"}, {"oid": "2b867a0da6d1896166692e15b12991546cbd6968", "url": "https://github.com/pytorch/serve/commit/2b867a0da6d1896166692e15b12991546cbd6968", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-10-14T09:51:18Z", "type": "commit"}, {"oid": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65", "url": "https://github.com/pytorch/serve/commit/3d7b0b9add224eee1017ca4ba0b13ba583ed5a65", "message": "Fixed typo in link.\n\nCo-authored-by: Amit Agarwal <amtagrwl@gmail.com>", "committedDate": "2020-10-17T02:03:47Z", "type": "commit"}, {"oid": "8dac80c5b3279d323535da0d8694f6ac30e1b9a8", "url": "https://github.com/pytorch/serve/commit/8dac80c5b3279d323535da0d8694f6ac30e1b9a8", "message": "merge master", "committedDate": "2020-10-27T06:06:40Z", "type": "commit"}, {"oid": "700defce59120529158478d0841fbc54dab4c6d8", "url": "https://github.com/pytorch/serve/commit/700defce59120529158478d0841fbc54dab4c6d8", "message": "fixed compilation issues after conflict resolution", "committedDate": "2020-10-27T06:27:24Z", "type": "commit"}, {"oid": "dc8e410e4b1ff891f361a970ea609947324ecc0d", "url": "https://github.com/pytorch/serve/commit/dc8e410e4b1ff891f361a970ea609947324ecc0d", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-10-30T10:49:28Z", "type": "commit"}, {"oid": "01bedc868f5f742416fe241553a140ed254973cf", "url": "https://github.com/pytorch/serve/commit/01bedc868f5f742416fe241553a140ed254973cf", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-11-05T04:45:28Z", "type": "commit"}, {"oid": "22d1b06b1b81f2f66efdf4191f4a26fea215c862", "url": "https://github.com/pytorch/serve/commit/22d1b06b1b81f2f66efdf4191f4a26fea215c862", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-11-06T03:05:32Z", "type": "commit"}, {"oid": "f5818ca248cf25b45134415c59536f6ab4326aef", "url": "https://github.com/pytorch/serve/commit/f5818ca248cf25b45134415c59536f6ab4326aef", "message": "fixed regression suite pytest issue", "committedDate": "2020-11-06T04:27:18Z", "type": "commit"}, {"oid": "410ce11a62f8fbe331298bd4bc62299fb8caab45", "url": "https://github.com/pytorch/serve/commit/410ce11a62f8fbe331298bd4bc62299fb8caab45", "message": "fixed pytest case", "committedDate": "2020-11-06T05:06:40Z", "type": "commit"}, {"oid": "1bd835d7c5e1c3ecc384e7a44e7ef0a71dabf570", "url": "https://github.com/pytorch/serve/commit/1bd835d7c5e1c3ecc384e7a44e7ef0a71dabf570", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-11-09T18:18:07Z", "type": "commit"}, {"oid": "7aa38ddf7363aac9f71138c83fdfb48b05255c07", "url": "https://github.com/pytorch/serve/commit/7aa38ddf7363aac9f71138c83fdfb48b05255c07", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-11-19T00:36:48Z", "type": "commit"}, {"oid": "c6171666dbea4599055760b83ef156cad2ed075a", "url": "https://github.com/pytorch/serve/commit/c6171666dbea4599055760b83ef156cad2ed075a", "message": "merged master and resolved conflicts", "committedDate": "2020-11-23T06:33:29Z", "type": "commit"}, {"oid": "a8f3f7f9cdc53b640ae584a3b589806f6d2a26e8", "url": "https://github.com/pytorch/serve/commit/a8f3f7f9cdc53b640ae584a3b589806f6d2a26e8", "message": "fixed import", "committedDate": "2020-11-23T06:55:08Z", "type": "commit"}, {"oid": "c2c48a0a9239b27c47ea262c0d52038ef35e8c13", "url": "https://github.com/pytorch/serve/commit/c2c48a0a9239b27c47ea262c0d52038ef35e8c13", "message": "fixed sanity suite", "committedDate": "2020-11-23T07:58:08Z", "type": "commit"}, {"oid": "04662907a5e972eb7123436f243169d00a8aca05", "url": "https://github.com/pytorch/serve/commit/04662907a5e972eb7123436f243169d00a8aca05", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-11-24T20:53:57Z", "type": "commit"}, {"oid": "ab7be17b43621435568f1ed349c194ea91d73116", "url": "https://github.com/pytorch/serve/commit/ab7be17b43621435568f1ed349c194ea91d73116", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-11-24T21:37:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0ODgyNQ==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r529948825", "bodyText": "it is better to be configurable: REST/gRPC/both", "author": "lxning", "createdAt": "2020-11-24T22:34:59Z", "path": "frontend/server/src/main/java/org/pytorch/serve/ModelServer.java", "diffHunk": "@@ -104,7 +111,10 @@ public void startAndWait()\n             throws InterruptedException, IOException, GeneralSecurityException,\n                     InvalidSnapshotException {\n         try {\n-            List<ChannelFuture> channelFutures = start();\n+            List<ChannelFuture> channelFutures = startRESTserver();", "originalCommit": "ab7be17b43621435568f1ed349c194ea91d73116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NTMwOA==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r530175308", "bodyText": "@lxning: Logged following enhancement ticket to track this: #799. This is not a blocker item for the 0.3.0 release.", "author": "harshbafna", "createdAt": "2020-11-25T08:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0ODgyNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5cf2af045df267234fadd893acad31cf134c56b5", "url": "https://github.com/pytorch/serve/commit/5cf2af045df267234fadd893acad31cf134c56b5", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-11-25T07:35:52Z", "type": "commit"}, {"oid": "d113274769ed7ea0f3a73eebe21f05e6c4ced7a4", "url": "https://github.com/pytorch/serve/commit/d113274769ed7ea0f3a73eebe21f05e6c4ced7a4", "message": "merged master and resolved conflicts", "committedDate": "2020-11-26T14:10:00Z", "type": "commit"}, {"oid": "c3774d22f316dc7429368787ec3efee6ae3d4b03", "url": "https://github.com/pytorch/serve/commit/c3774d22f316dc7429368787ec3efee6ae3d4b03", "message": "fixed path in grpc client stub generation", "committedDate": "2020-11-26T14:23:44Z", "type": "commit"}, {"oid": "5d62f22db63e9349a93a40c658bdde37b103fc9d", "url": "https://github.com/pytorch/serve/commit/5d62f22db63e9349a93a40c658bdde37b103fc9d", "message": "fixed path for grpc client", "committedDate": "2020-11-26T14:56:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MzgxMA==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r496963810", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    inferencegRPCServer.shutdown();\n          \n          \n            \n                    inferencegRPCServer.shutdown();\n          \n          \n            \n                    try {\n          \n          \n            \n                            inferencegRPCServer.awaitTermination(1, TimeUnit.MINUTES);\n          \n          \n            \n                    } catch (InterruptedException e) {\n          \n          \n            \n                            logger.error(\"Inference gRPC server graceful shutdown failed\", e);\n          \n          \n            \n                    } finally {\n          \n          \n            \n                            inferencegRPCServer.shutdownNow();\n          \n          \n            \n                    }", "author": "maaquib", "createdAt": "2020-09-29T18:51:14Z", "path": "frontend/server/src/main/java/org/pytorch/serve/ModelServer.java", "diffHunk": "@@ -380,8 +403,22 @@ public boolean isRunning() {\n     }\n \n     public void stop() {\n-        if (stopped.get()) {\n-            return;\n+        inferencegRPCServer.shutdown();", "originalCommit": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d27495cda48b568da8ecc10c7f907d6b0894791a", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/ModelServer.java b/frontend/server/src/main/java/org/pytorch/serve/ModelServer.java\nindex 438e0d18..a7290e5c 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/ModelServer.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/ModelServer.java\n\n@@ -404,21 +404,12 @@ public class ModelServer {\n \n     public void stop() {\n         inferencegRPCServer.shutdown();\n-        while (!inferencegRPCServer.isTerminated()) {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-                e.printStackTrace(); // NOPMD\n-            }\n-        }\n-\n         managementgRPCServer.shutdown();\n-        while (!managementgRPCServer.isTerminated()) {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-                e.printStackTrace(); // NOPMD\n-            }\n+        try {\n+            inferencegRPCServer.awaitTermination();\n+            managementgRPCServer.awaitTermination();\n+        } catch (InterruptedException e) {\n+            e.printStackTrace(); // NOPMD\n         }\n \n         stopped.set(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NTgxNw==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r496965817", "bodyText": "Can we refactor these messages to a util class to be re-used by REST and gRPC, so that we don't have to make changes in two place?", "author": "maaquib", "createdAt": "2020-09-29T18:55:00Z", "path": "frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.pytorch.serve.grpcimpl;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Empty;\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.pytorch.serve.archive.ModelNotFoundException;\n+import org.pytorch.serve.archive.ModelVersionNotFoundException;\n+import org.pytorch.serve.grpc.inference.InferenceAPIsServiceGrpc.InferenceAPIsServiceImplBase;\n+import org.pytorch.serve.grpc.inference.PredictionResponse;\n+import org.pytorch.serve.grpc.inference.PredictionsRequest;\n+import org.pytorch.serve.grpc.inference.TorchServeHealthResponse;\n+import org.pytorch.serve.http.BadRequestException;\n+import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.http.StatusResponse;\n+import org.pytorch.serve.job.GRPCJob;\n+import org.pytorch.serve.job.Job;\n+import org.pytorch.serve.metrics.api.MetricAggregator;\n+import org.pytorch.serve.util.ApiUtils;\n+import org.pytorch.serve.util.JsonUtils;\n+import org.pytorch.serve.util.messages.InputParameter;\n+import org.pytorch.serve.util.messages.RequestInput;\n+import org.pytorch.serve.util.messages.WorkerCommands;\n+import org.pytorch.serve.wlm.ModelManager;\n+\n+public class InferenceImpl extends InferenceAPIsServiceImplBase {\n+\n+    @Override\n+    public void ping(Empty request, StreamObserver<TorchServeHealthResponse> responseObserver) {\n+        Runnable r =\n+                () -> {\n+                    String response = ApiUtils.getWorkerStatus();\n+                    TorchServeHealthResponse reply =\n+                            TorchServeHealthResponse.newBuilder()\n+                                    .setHealth(\n+                                            JsonUtils.GSON_PRETTY_EXPOSED.toJson(\n+                                                    new StatusResponse(\n+                                                            response, HttpURLConnection.HTTP_OK)))\n+                                    .build();\n+                    responseObserver.onNext(reply);\n+                    responseObserver.onCompleted();\n+                };\n+        ApiUtils.getTorchServeHealth(r);\n+    }\n+\n+    @Override\n+    public void predictions(\n+            PredictionsRequest request, StreamObserver<PredictionResponse> responseObserver) {\n+        String modelName = request.getModelName();\n+        String modelVersion = request.getModelVersion();\n+\n+        if (modelName == null || (\"\").equals(modelName)) {\n+            BadRequestException e = new BadRequestException(\"Parameter model_name is required.\");\n+            responseObserver.onError(\n+                    Status.INTERNAL\n+                            .withDescription(e.getMessage())\n+                            .augmentDescription(\"BadRequestException.()\")\n+                            .withCause(e)\n+                            .asRuntimeException());\n+            return;\n+        }\n+\n+        if (modelVersion == null || (\"\").equals(modelVersion)) {\n+            modelVersion = null;\n+        }\n+\n+        String requestId = UUID.randomUUID().toString();\n+        RequestInput inputData = new RequestInput(requestId);\n+\n+        for (Map.Entry<String, ByteString> entry : request.getInputMap().entrySet()) {\n+            inputData.addParameter(\n+                    new InputParameter(entry.getKey(), entry.getValue().toByteArray()));\n+        }\n+\n+        MetricAggregator.handleInferenceMetric(modelName, modelVersion);\n+        Job job =\n+                new GRPCJob(\n+                        responseObserver,\n+                        modelName,\n+                        modelVersion,\n+                        WorkerCommands.PREDICT,\n+                        inputData);\n+\n+        try {\n+            if (!ModelManager.getInstance().addJob(job)) {\n+                String responseMessage =", "originalCommit": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDk4NA==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533934984", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-12-02T06:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "8b68184561378807bb8b4b66fed9991915478b6c", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java b/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\nindex 2df45206..236209a2 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\n\n@@ -52,18 +52,13 @@ public class InferenceImpl extends InferenceAPIsServiceImplBase {\n         String modelName = request.getModelName();\n         String modelVersion = request.getModelVersion();\n \n-        if (modelName == null || (\"\").equals(modelName)) {\n+        if (modelName == null || \"\".equals(modelName)) {\n             BadRequestException e = new BadRequestException(\"Parameter model_name is required.\");\n-            responseObserver.onError(\n-                    Status.INTERNAL\n-                            .withDescription(e.getMessage())\n-                            .augmentDescription(\"BadRequestException.()\")\n-                            .withCause(e)\n-                            .asRuntimeException());\n+            sendErrorResponse(responseObserver, Status.INTERNAL, e, \"BadRequestException.()\");\n             return;\n         }\n \n-        if (modelVersion == null || (\"\").equals(modelVersion)) {\n+        if (modelVersion == null || \"\".equals(modelVersion)) {\n             modelVersion = null;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwNjk1OQ==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r497106959", "bodyText": "Shouldn't this be getScheduled? Why are we changing how inferTime is measured?", "author": "maaquib", "createdAt": "2020-09-29T22:46:41Z", "path": "frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java", "diffHunk": "@@ -15,69 +15,30 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class Job {\n+public class RestJob extends Job {\n \n     private static final Logger logger = LoggerFactory.getLogger(Job.class);\n \n     private ChannelHandlerContext ctx;\n \n-    private String modelName;\n-    private String modelVersion;\n-    private WorkerCommands cmd; // Else its data msg or inf requests\n-    private RequestInput input;\n-    private long begin;\n-    private long scheduled;\n-\n-    public Job(\n+    public RestJob(\n             ChannelHandlerContext ctx,\n             String modelName,\n             String version,\n             WorkerCommands cmd,\n             RequestInput input) {\n+        super(modelName, version, cmd, input);\n         this.ctx = ctx;\n-        this.modelName = modelName;\n-        this.cmd = cmd;\n-        this.input = input;\n-        this.modelVersion = version;\n-        begin = System.nanoTime();\n-        scheduled = begin;\n-    }\n-\n-    public String getJobId() {\n-        return input.getRequestId();\n-    }\n-\n-    public String getModelName() {\n-        return modelName;\n-    }\n-\n-    public String getModelVersion() {\n-        return modelVersion;\n-    }\n-\n-    public WorkerCommands getCmd() {\n-        return cmd;\n-    }\n-\n-    public boolean isControlCmd() {\n-        return !WorkerCommands.PREDICT.equals(cmd);\n-    }\n-\n-    public RequestInput getPayload() {\n-        return input;\n-    }\n-\n-    public void setScheduled() {\n-        scheduled = System.nanoTime();\n     }\n \n+    @Override\n     public void response(\n             byte[] body,\n             CharSequence contentType,\n             int statusCode,\n             String statusPhrase,\n             Map<String, String> responseHeaders) {\n-        long inferTime = System.nanoTime() - scheduled;\n+        long inferTime = System.nanoTime() - getBegin();", "originalCommit": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkyODg0Mw==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533928843", "bodyText": "This was changed as part of #666. At the time of job queue both begin and scheduled hold the same value. Also, the scheduled parameter provides a setter that will overwrite the value with System.nanoTime(); whenever called.", "author": "harshbafna", "createdAt": "2020-12-02T06:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwNjk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8dac80c5b3279d323535da0d8694f6ac30e1b9a8", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java b/frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java\nindex 33947d7f..8f3ef0d3 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java\n\n@@ -7,8 +7,12 @@ import io.netty.handler.codec.http.HttpHeaderNames;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.netty.handler.codec.http.HttpVersion;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.metrics.Dimension;\n+import org.pytorch.serve.metrics.Metric;\n import org.pytorch.serve.metrics.api.MetricAggregator;\n+import org.pytorch.serve.util.ConfigManager;\n import org.pytorch.serve.util.NettyUtils;\n import org.pytorch.serve.util.messages.RequestInput;\n import org.pytorch.serve.util.messages.WorkerCommands;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwODk1Mw==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r497108953", "bodyText": "Whats the reason for this remapping? Seems like 413 is appropriate", "author": "maaquib", "createdAt": "2020-09-29T22:49:19Z", "path": "frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java", "diffHunk": "@@ -102,29 +63,33 @@ public void response(\n          */\n         if (ctx != null) {\n             MetricAggregator.handleInferenceMetric(\n-                    modelName, modelVersion, scheduled - begin, inferTime);\n+                    getModelName(), getModelVersion(), getScheduled() - getBegin(), inferTime);\n             NettyUtils.sendHttpResponse(ctx, resp, true);\n         }\n         logger.debug(\n                 \"Waiting time ns: {}, Backend time ns: {}\",\n-                scheduled - begin,\n-                System.nanoTime() - scheduled);\n+                getScheduled() - getBegin(),\n+                System.nanoTime() - getScheduled());\n     }\n \n-    public void sendError(HttpResponseStatus status, String error) {\n+    @Override\n+    public void sendError(int status, String error) {\n         /*\n          * We can load the models based on the configuration file.Since this Job is\n          * not driven by the external connections, we could have a empty context for\n          * this job. We shouldn't try to send a response to ctx if this is not triggered\n          * by external clients.\n          */\n         if (ctx != null) {\n-            NettyUtils.sendError(ctx, status, new InternalServerException(error));\n+            // Mapping HTTPURLConnection's HTTP_ENTITY_TOO_LARGE to Netty's INSUFFICIENT_STORAGE\n+            status = (status == 413) ? 507 : status;", "originalCommit": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMDI0OQ==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533930249", "bodyText": "This was because we refactored all the error codes sent from the WLM package to use HTTP Status code  Java's inbuilt HTTPURLConnection instead of Netty's HTTPResponseStatus. And HTTPURLConnection doesn't have the 507 code available. Hence, we used the 413 code instead and re-mapped it to 507 to keep the error codes backward compatible.", "author": "harshbafna", "createdAt": "2020-12-02T06:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwODk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8dac80c5b3279d323535da0d8694f6ac30e1b9a8", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java b/frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java\nindex 33947d7f..8f3ef0d3 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java\n\n@@ -68,8 +75,18 @@ public class RestJob extends Job {\n         }\n         logger.debug(\n                 \"Waiting time ns: {}, Backend time ns: {}\",\n-                getScheduled() - getBegin(),\n-                System.nanoTime() - getScheduled());\n+                scheduled - begin,\n+                System.nanoTime() - scheduled);\n+        String queueTime =\n+                String.valueOf(\n+                        TimeUnit.MILLISECONDS.convert(scheduled - begin, TimeUnit.NANOSECONDS));\n+        loggerTsMetrics.info(\n+                new Metric(\n+                        \"QueueTime\",\n+                        queueTime,\n+                        \"ms\",\n+                        ConfigManager.getInstance().getHostName(),\n+                        DIMENSION));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwODU3Ng==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r508708576", "bodyText": "NIT:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (modelName == null || (\"\").equals(modelName)) {\n          \n          \n            \n                    if (modelName == null || \"\".equals(modelName)) {", "author": "maaquib", "createdAt": "2020-10-20T17:25:20Z", "path": "frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.pytorch.serve.grpcimpl;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Empty;\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.pytorch.serve.archive.ModelNotFoundException;\n+import org.pytorch.serve.archive.ModelVersionNotFoundException;\n+import org.pytorch.serve.grpc.inference.InferenceAPIsServiceGrpc.InferenceAPIsServiceImplBase;\n+import org.pytorch.serve.grpc.inference.PredictionResponse;\n+import org.pytorch.serve.grpc.inference.PredictionsRequest;\n+import org.pytorch.serve.grpc.inference.TorchServeHealthResponse;\n+import org.pytorch.serve.http.BadRequestException;\n+import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.http.StatusResponse;\n+import org.pytorch.serve.job.GRPCJob;\n+import org.pytorch.serve.job.Job;\n+import org.pytorch.serve.metrics.api.MetricAggregator;\n+import org.pytorch.serve.util.ApiUtils;\n+import org.pytorch.serve.util.JsonUtils;\n+import org.pytorch.serve.util.messages.InputParameter;\n+import org.pytorch.serve.util.messages.RequestInput;\n+import org.pytorch.serve.util.messages.WorkerCommands;\n+import org.pytorch.serve.wlm.ModelManager;\n+\n+public class InferenceImpl extends InferenceAPIsServiceImplBase {\n+\n+    @Override\n+    public void ping(Empty request, StreamObserver<TorchServeHealthResponse> responseObserver) {\n+        Runnable r =\n+                () -> {\n+                    String response = ApiUtils.getWorkerStatus();\n+                    TorchServeHealthResponse reply =\n+                            TorchServeHealthResponse.newBuilder()\n+                                    .setHealth(\n+                                            JsonUtils.GSON_PRETTY_EXPOSED.toJson(\n+                                                    new StatusResponse(\n+                                                            response, HttpURLConnection.HTTP_OK)))\n+                                    .build();\n+                    responseObserver.onNext(reply);\n+                    responseObserver.onCompleted();\n+                };\n+        ApiUtils.getTorchServeHealth(r);\n+    }\n+\n+    @Override\n+    public void predictions(\n+            PredictionsRequest request, StreamObserver<PredictionResponse> responseObserver) {\n+        String modelName = request.getModelName();\n+        String modelVersion = request.getModelVersion();\n+\n+        if (modelName == null || (\"\").equals(modelName)) {", "originalCommit": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNTA4MA==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533935080", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-12-02T06:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwODU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8b68184561378807bb8b4b66fed9991915478b6c", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java b/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\nindex 2df45206..236209a2 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\n\n@@ -52,18 +52,13 @@ public class InferenceImpl extends InferenceAPIsServiceImplBase {\n         String modelName = request.getModelName();\n         String modelVersion = request.getModelVersion();\n \n-        if (modelName == null || (\"\").equals(modelName)) {\n+        if (modelName == null || \"\".equals(modelName)) {\n             BadRequestException e = new BadRequestException(\"Parameter model_name is required.\");\n-            responseObserver.onError(\n-                    Status.INTERNAL\n-                            .withDescription(e.getMessage())\n-                            .augmentDescription(\"BadRequestException.()\")\n-                            .withCause(e)\n-                            .asRuntimeException());\n+            sendErrorResponse(responseObserver, Status.INTERNAL, e, \"BadRequestException.()\");\n             return;\n         }\n \n-        if (modelVersion == null || (\"\").equals(modelVersion)) {\n+        if (modelVersion == null || \"\".equals(modelVersion)) {\n             modelVersion = null;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwOTI4Mw==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r508709283", "bodyText": "NIT:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (modelVersion == null || (\"\").equals(modelVersion)) {\n          \n          \n            \n                    if (modelVersion == null || \"\".equals(modelVersion)) {", "author": "maaquib", "createdAt": "2020-10-20T17:26:27Z", "path": "frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.pytorch.serve.grpcimpl;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Empty;\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.pytorch.serve.archive.ModelNotFoundException;\n+import org.pytorch.serve.archive.ModelVersionNotFoundException;\n+import org.pytorch.serve.grpc.inference.InferenceAPIsServiceGrpc.InferenceAPIsServiceImplBase;\n+import org.pytorch.serve.grpc.inference.PredictionResponse;\n+import org.pytorch.serve.grpc.inference.PredictionsRequest;\n+import org.pytorch.serve.grpc.inference.TorchServeHealthResponse;\n+import org.pytorch.serve.http.BadRequestException;\n+import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.http.StatusResponse;\n+import org.pytorch.serve.job.GRPCJob;\n+import org.pytorch.serve.job.Job;\n+import org.pytorch.serve.metrics.api.MetricAggregator;\n+import org.pytorch.serve.util.ApiUtils;\n+import org.pytorch.serve.util.JsonUtils;\n+import org.pytorch.serve.util.messages.InputParameter;\n+import org.pytorch.serve.util.messages.RequestInput;\n+import org.pytorch.serve.util.messages.WorkerCommands;\n+import org.pytorch.serve.wlm.ModelManager;\n+\n+public class InferenceImpl extends InferenceAPIsServiceImplBase {\n+\n+    @Override\n+    public void ping(Empty request, StreamObserver<TorchServeHealthResponse> responseObserver) {\n+        Runnable r =\n+                () -> {\n+                    String response = ApiUtils.getWorkerStatus();\n+                    TorchServeHealthResponse reply =\n+                            TorchServeHealthResponse.newBuilder()\n+                                    .setHealth(\n+                                            JsonUtils.GSON_PRETTY_EXPOSED.toJson(\n+                                                    new StatusResponse(\n+                                                            response, HttpURLConnection.HTTP_OK)))\n+                                    .build();\n+                    responseObserver.onNext(reply);\n+                    responseObserver.onCompleted();\n+                };\n+        ApiUtils.getTorchServeHealth(r);\n+    }\n+\n+    @Override\n+    public void predictions(\n+            PredictionsRequest request, StreamObserver<PredictionResponse> responseObserver) {\n+        String modelName = request.getModelName();\n+        String modelVersion = request.getModelVersion();\n+\n+        if (modelName == null || (\"\").equals(modelName)) {\n+            BadRequestException e = new BadRequestException(\"Parameter model_name is required.\");\n+            responseObserver.onError(\n+                    Status.INTERNAL\n+                            .withDescription(e.getMessage())\n+                            .augmentDescription(\"BadRequestException.()\")\n+                            .withCause(e)\n+                            .asRuntimeException());\n+            return;\n+        }\n+\n+        if (modelVersion == null || (\"\").equals(modelVersion)) {", "originalCommit": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNTAzOA==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533935038", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-12-02T06:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwOTI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8b68184561378807bb8b4b66fed9991915478b6c", "chunk": "diff --git a/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java b/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\nindex 2df45206..236209a2 100644\n--- a/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\n+++ b/frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java\n\n@@ -52,18 +52,13 @@ public class InferenceImpl extends InferenceAPIsServiceImplBase {\n         String modelName = request.getModelName();\n         String modelVersion = request.getModelVersion();\n \n-        if (modelName == null || (\"\").equals(modelName)) {\n+        if (modelName == null || \"\".equals(modelName)) {\n             BadRequestException e = new BadRequestException(\"Parameter model_name is required.\");\n-            responseObserver.onError(\n-                    Status.INTERNAL\n-                            .withDescription(e.getMessage())\n-                            .augmentDescription(\"BadRequestException.()\")\n-                            .withCause(e)\n-                            .asRuntimeException());\n+            sendErrorResponse(responseObserver, Status.INTERNAL, e, \"BadRequestException.()\");\n             return;\n         }\n \n-        if (modelVersion == null || (\"\").equals(modelVersion)) {\n+        if (modelVersion == null || \"\".equals(modelVersion)) {\n             modelVersion = null;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxMDkwMg==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r508710902", "bodyText": "This and following util methods should be refactored to the base class so that they can be used in the InferenceImpl.java too", "author": "maaquib", "createdAt": "2020-10-20T17:29:18Z", "path": "frontend/server/src/main/java/org/pytorch/serve/grpcimpl/ManagementImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.pytorch.serve.grpcimpl;\n+\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import java.util.concurrent.ExecutionException;\n+import org.pytorch.serve.archive.ModelException;\n+import org.pytorch.serve.archive.ModelNotFoundException;\n+import org.pytorch.serve.archive.ModelVersionNotFoundException;\n+import org.pytorch.serve.grpc.management.DescribeModelRequest;\n+import org.pytorch.serve.grpc.management.ListModelsRequest;\n+import org.pytorch.serve.grpc.management.ManagementAPIsServiceGrpc.ManagementAPIsServiceImplBase;\n+import org.pytorch.serve.grpc.management.ManagementResponse;\n+import org.pytorch.serve.grpc.management.RegisterModelRequest;\n+import org.pytorch.serve.grpc.management.ScaleWorkerRequest;\n+import org.pytorch.serve.grpc.management.SetDefaultRequest;\n+import org.pytorch.serve.grpc.management.UnregisterModelRequest;\n+import org.pytorch.serve.http.BadRequestException;\n+import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.http.StatusResponse;\n+import org.pytorch.serve.util.ApiUtils;\n+import org.pytorch.serve.util.GRPCUtils;\n+import org.pytorch.serve.util.JsonUtils;\n+\n+public class ManagementImpl extends ManagementAPIsServiceImplBase {\n+\n+    @Override\n+    public void describeModel(\n+            DescribeModelRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+\n+        String modelName = request.getModelName();\n+        String modelVersion = request.getModelVersion();\n+\n+        String resp;\n+        try {\n+            resp =\n+                    JsonUtils.GSON_PRETTY.toJson(\n+                            ApiUtils.getModelDescription(modelName, modelVersion));\n+            sendResponse(responseObserver, resp);\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        }\n+    }\n+\n+    @Override\n+    public void listModels(\n+            ListModelsRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        int limit = request.getLimit();\n+        int pageToken = request.getNextPageToken();\n+\n+        String modelList = JsonUtils.GSON_PRETTY.toJson(ApiUtils.getModelList(limit, pageToken));\n+        sendResponse(responseObserver, modelList);\n+    }\n+\n+    @Override\n+    public void registerModel(\n+            RegisterModelRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        org.pytorch.serve.http.messages.RegisterModelRequest registerModelRequest =\n+                new org.pytorch.serve.http.messages.RegisterModelRequest(request);\n+\n+        StatusResponse statusResponse;\n+        try {\n+            statusResponse = ApiUtils.registerModel(registerModelRequest);\n+            sendStatusResponse(responseObserver, statusResponse);\n+        } catch (InternalServerException e) {\n+            sendException(responseObserver, e, null);\n+        } catch (ExecutionException | InterruptedException e) {\n+            sendException(responseObserver, e, \"Error while creating workers\");\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        } catch (ModelException | BadRequestException e) {\n+            sendErrorResponse(responseObserver, Status.INVALID_ARGUMENT, e);\n+        }\n+    }\n+\n+    @Override\n+    public void scaleWorker(\n+            ScaleWorkerRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        int minWorkers = GRPCUtils.getRegisterParam(request.getMinWorker(), 1);\n+        int maxWorkers = GRPCUtils.getRegisterParam(request.getMaxWorker(), minWorkers);\n+        String modelName = GRPCUtils.getRegisterParam(request.getModelName(), null);\n+        String modelVersion = GRPCUtils.getRegisterParam(request.getModelVersion(), null);\n+        boolean synchronous = request.getSynchronous();\n+\n+        StatusResponse statusResponse;\n+        try {\n+            statusResponse =\n+                    ApiUtils.updateModelWorkers(\n+                            modelName,\n+                            modelVersion,\n+                            minWorkers,\n+                            maxWorkers,\n+                            synchronous,\n+                            false,\n+                            null);\n+            sendStatusResponse(responseObserver, statusResponse);\n+        } catch (ExecutionException | InterruptedException e) {\n+            sendException(responseObserver, e, \"Error while creating workers\");\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        } catch (BadRequestException e) {\n+            sendErrorResponse(responseObserver, Status.INVALID_ARGUMENT, e);\n+        }\n+    }\n+\n+    @Override\n+    public void setDefault(\n+            SetDefaultRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        String modelName = request.getModelName();\n+        String newModelVersion = request.getModelVersion();\n+\n+        try {\n+            String msg = ApiUtils.setDefault(modelName, newModelVersion);\n+            sendResponse(responseObserver, msg);\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        }\n+    }\n+\n+    @Override\n+    public void unregisterModel(\n+            UnregisterModelRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        try {\n+            String modelName = request.getModelName();\n+            if (modelName == null || (\"\").equals(modelName)) {\n+                sendErrorResponse(\n+                        responseObserver,\n+                        Status.INVALID_ARGUMENT,\n+                        new BadRequestException(\"Parameter url is required.\"));\n+            }\n+\n+            String modelVersion = request.getModelVersion();\n+\n+            if ((\"\").equals(modelVersion)) {\n+                modelVersion = null;\n+            }\n+            ApiUtils.unregisterModel(modelName, modelVersion);\n+            String msg = \"Model \\\"\" + modelName + \"\\\" unregistered\";\n+            sendResponse(responseObserver, msg);\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        } catch (BadRequestException e) {\n+            sendErrorResponse(responseObserver, Status.INVALID_ARGUMENT, e);\n+        }\n+    }\n+\n+    private void sendResponse(StreamObserver<ManagementResponse> responseObserver, String msg) {\n+        ManagementResponse reply = ManagementResponse.newBuilder().setMsg(msg).build();\n+        responseObserver.onNext(reply);\n+        responseObserver.onCompleted();\n+    }\n+\n+    private void sendErrorResponse(\n+            StreamObserver<ManagementResponse> responseObserver,\n+            Status status,\n+            String description,\n+            String errorClass) {\n+        responseObserver.onError(\n+                status.withDescription(description)\n+                        .augmentDescription(errorClass)\n+                        .asRuntimeException());\n+    }\n+\n+    private void sendErrorResponse(", "originalCommit": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkyNjIyMg==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533926222", "bodyText": "@maaquib: Both Inference APIs and Management APIs use different responseObserver types. Also, the inference API has only one main API (predict). Thus for avoiding one minor code duplication we will need to add a bunch of complicated type castings.\nI have refactored the InferenceImpl.java to avoid code duplication within the file for sending error response.", "author": "harshbafna", "createdAt": "2020-12-02T06:30:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxMDkwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxOTIyNA==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533719224", "bodyText": "Same as above, can you explain whats the reason for change 507 to 513?", "author": "maaquib", "createdAt": "2020-12-01T21:02:18Z", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "diffHunk": "@@ -447,7 +446,12 @@ public void channelRead0(ChannelHandlerContext ctx, ModelWorkerResponse msg) {\n         public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n             logger.error(\"Unknown exception\", cause);\n             if (cause instanceof OutOfMemoryError) {\n-                NettyUtils.sendError(ctx, HttpResponseStatus.INSUFFICIENT_STORAGE, cause);\n+                ModelWorkerResponse msg = new ModelWorkerResponse();\n+                msg.setCode(HttpURLConnection.HTTP_ENTITY_TOO_LARGE);", "originalCommit": "5d62f22db63e9349a93a40c658bdde37b103fc9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDY0MQ==", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533934641", "bodyText": "HttpURLConnection doesn't support 507 code.", "author": "harshbafna", "createdAt": "2020-12-02T06:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxOTIyNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ac33310b1bf6fb9e04a5124bd284135e9d7e7382", "url": "https://github.com/pytorch/serve/commit/ac33310b1bf6fb9e04a5124bd284135e9d7e7382", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-12-01T21:05:11Z", "type": "commit"}, {"oid": "0422f0933489ed42b4c896be042d79b6005dcade", "url": "https://github.com/pytorch/serve/commit/0422f0933489ed42b4c896be042d79b6005dcade", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-12-02T04:08:26Z", "type": "commit"}, {"oid": "8b68184561378807bb8b4b66fed9991915478b6c", "url": "https://github.com/pytorch/serve/commit/8b68184561378807bb8b4b66fed9991915478b6c", "message": "incorporated code review comments", "committedDate": "2020-12-02T06:53:43Z", "type": "commit"}, {"oid": "35af895b693a31d8bb11b7c29333e22f337a3935", "url": "https://github.com/pytorch/serve/commit/35af895b693a31d8bb11b7c29333e22f337a3935", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-12-03T02:54:38Z", "type": "commit"}, {"oid": "591f3ecbc0980b2b5f2da1ce0757c4a658e30b2a", "url": "https://github.com/pytorch/serve/commit/591f3ecbc0980b2b5f2da1ce0757c4a658e30b2a", "message": "merged master and resolved conflicts", "committedDate": "2020-12-09T03:46:10Z", "type": "commit"}, {"oid": "c17eee86df7f9dccfeabbf97d7d963aab367d5ea", "url": "https://github.com/pytorch/serve/commit/c17eee86df7f9dccfeabbf97d7d963aab367d5ea", "message": "Merge branch 'issue_656' of https://github.com/pytorch/serve into issue_656", "committedDate": "2020-12-09T03:46:27Z", "type": "commit"}, {"oid": "26cfa0a859bdce1cead7c39cc2d281e15261c2e5", "url": "https://github.com/pytorch/serve/commit/26cfa0a859bdce1cead7c39cc2d281e15261c2e5", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-12-09T03:56:50Z", "type": "commit"}, {"oid": "ccdd310e704afb8eb0c506f4ac3c554241acf1bf", "url": "https://github.com/pytorch/serve/commit/ccdd310e704afb8eb0c506f4ac3c554241acf1bf", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-12-09T06:53:58Z", "type": "commit"}, {"oid": "557f51e00d1c4fb5f319d6fddeff3abdfa6f875a", "url": "https://github.com/pytorch/serve/commit/557f51e00d1c4fb5f319d6fddeff3abdfa6f875a", "message": "fixed management api newman command", "committedDate": "2020-12-10T04:51:42Z", "type": "commit"}, {"oid": "d9bf3a7988df337b9aab074a09079ea792c88aa3", "url": "https://github.com/pytorch/serve/commit/d9bf3a7988df337b9aab074a09079ea792c88aa3", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-12-10T05:00:10Z", "type": "commit"}, {"oid": "4dfdecc607da0df3e48fa7ed36cd5a2329e5f1da", "url": "https://github.com/pytorch/serve/commit/4dfdecc607da0df3e48fa7ed36cd5a2329e5f1da", "message": "fixed import issues", "committedDate": "2020-12-10T05:24:40Z", "type": "commit"}, {"oid": "b21a174de3fa8971137a763cdc6be02267a851ae", "url": "https://github.com/pytorch/serve/commit/b21a174de3fa8971137a763cdc6be02267a851ae", "message": "fixed regression pytest issues", "committedDate": "2020-12-10T05:24:56Z", "type": "commit"}, {"oid": "5e015f40dd628eacf5a94e2fbbccd8aa96b434d6", "url": "https://github.com/pytorch/serve/commit/5e015f40dd628eacf5a94e2fbbccd8aa96b434d6", "message": "Merge branch 'master' into issue_656", "committedDate": "2020-12-10T16:56:53Z", "type": "commit"}]}