{"pr_number": 14209, "pr_title": "Add nodeSelectionStats to monitor affinity scheduler", "pr_createdAt": "2020-03-04T19:16:50Z", "pr_url": "https://github.com/prestodb/presto/pull/14209", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MTQzMA==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387941430", "bodyText": "remove this empty line", "author": "highker", "createdAt": "2020-03-04T21:21:21Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -70,6 +70,8 @@\n     private final int maxPendingSplitsPerTask;\n     private final int maxTasksPerStage;\n ", "originalCommit": "bcb9d30d85ae7e86348108090eef0ca53e98fadc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c7d100e082c6b5b5c546fd39ad3967118f5989f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 9a156320ca..816bfbde45 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -70,20 +71,19 @@ public class SimpleNodeSelector\n     private final int maxPendingSplitsPerTask;\n     private final int maxTasksPerStage;\n \n-    private final NodeSelectionStats nodeSelectionStats;\n-\n     public SimpleNodeSelector(\n             InternalNodeManager nodeManager,\n+            NodeSelectionStats nodeSelectionStats,\n             NodeTaskMap nodeTaskMap,\n             boolean includeCoordinator,\n             Supplier<NodeMap> nodeMap,\n             int minCandidates,\n             int maxSplitsPerNode,\n             int maxPendingSplitsPerTask,\n-            int maxTasksPerStage,\n-            NodeSelectionStats nodeSelectionStats)\n+            int maxTasksPerStage)\n     {\n         this.nodeManager = requireNonNull(nodeManager, \"nodeManager is null\");\n+        this.nodeSelectionStats = requireNonNull(nodeSelectionStats, \"NodeSelectionStats is null\");\n         this.nodeTaskMap = requireNonNull(nodeTaskMap, \"nodeTaskMap is null\");\n         this.includeCoordinator = includeCoordinator;\n         this.nodeMap = new AtomicReference<>(nodeMap);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MTU3Mw==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387941573", "bodyText": "move this below nodeManager", "author": "highker", "createdAt": "2020-03-04T21:21:41Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -70,6 +70,8 @@\n     private final int maxPendingSplitsPerTask;\n     private final int maxTasksPerStage;\n \n+    private final NodeSelectionStats nodeSelectionStats;", "originalCommit": "bcb9d30d85ae7e86348108090eef0ca53e98fadc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c7d100e082c6b5b5c546fd39ad3967118f5989f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 9a156320ca..816bfbde45 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -70,20 +71,19 @@ public class SimpleNodeSelector\n     private final int maxPendingSplitsPerTask;\n     private final int maxTasksPerStage;\n \n-    private final NodeSelectionStats nodeSelectionStats;\n-\n     public SimpleNodeSelector(\n             InternalNodeManager nodeManager,\n+            NodeSelectionStats nodeSelectionStats,\n             NodeTaskMap nodeTaskMap,\n             boolean includeCoordinator,\n             Supplier<NodeMap> nodeMap,\n             int minCandidates,\n             int maxSplitsPerNode,\n             int maxPendingSplitsPerTask,\n-            int maxTasksPerStage,\n-            NodeSelectionStats nodeSelectionStats)\n+            int maxTasksPerStage)\n     {\n         this.nodeManager = requireNonNull(nodeManager, \"nodeManager is null\");\n+        this.nodeSelectionStats = requireNonNull(nodeSelectionStats, \"NodeSelectionStats is null\");\n         this.nodeTaskMap = requireNonNull(nodeTaskMap, \"nodeTaskMap is null\");\n         this.includeCoordinator = includeCoordinator;\n         this.nodeMap = new AtomicReference<>(nodeMap);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MTYzOQ==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387941639", "bodyText": "move this below nodeManager", "author": "highker", "createdAt": "2020-03-04T21:21:48Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -78,7 +80,8 @@ public SimpleNodeSelector(\n             int minCandidates,\n             int maxSplitsPerNode,\n             int maxPendingSplitsPerTask,\n-            int maxTasksPerStage)\n+            int maxTasksPerStage,\n+            NodeSelectionStats nodeSelectionStats)", "originalCommit": "bcb9d30d85ae7e86348108090eef0ca53e98fadc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c7d100e082c6b5b5c546fd39ad3967118f5989f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 9a156320ca..816bfbde45 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -70,20 +71,19 @@ public class SimpleNodeSelector\n     private final int maxPendingSplitsPerTask;\n     private final int maxTasksPerStage;\n \n-    private final NodeSelectionStats nodeSelectionStats;\n-\n     public SimpleNodeSelector(\n             InternalNodeManager nodeManager,\n+            NodeSelectionStats nodeSelectionStats,\n             NodeTaskMap nodeTaskMap,\n             boolean includeCoordinator,\n             Supplier<NodeMap> nodeMap,\n             int minCandidates,\n             int maxSplitsPerNode,\n             int maxPendingSplitsPerTask,\n-            int maxTasksPerStage,\n-            NodeSelectionStats nodeSelectionStats)\n+            int maxTasksPerStage)\n     {\n         this.nodeManager = requireNonNull(nodeManager, \"nodeManager is null\");\n+        this.nodeSelectionStats = requireNonNull(nodeSelectionStats, \"NodeSelectionStats is null\");\n         this.nodeTaskMap = requireNonNull(nodeTaskMap, \"nodeTaskMap is null\");\n         this.includeCoordinator = includeCoordinator;\n         this.nodeMap = new AtomicReference<>(nodeMap);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MTcwMw==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387941703", "bodyText": "same", "author": "highker", "createdAt": "2020-03-04T21:21:57Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -88,6 +91,7 @@ public SimpleNodeSelector(\n         this.maxSplitsPerNode = maxSplitsPerNode;\n         this.maxPendingSplitsPerTask = maxPendingSplitsPerTask;\n         this.maxTasksPerStage = maxTasksPerStage;\n+        this.nodeSelectionStats = requireNonNull(nodeSelectionStats, \"NodeSelectionStats is null\");", "originalCommit": "bcb9d30d85ae7e86348108090eef0ca53e98fadc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c7d100e082c6b5b5c546fd39ad3967118f5989f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 9a156320ca..816bfbde45 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -70,20 +71,19 @@ public class SimpleNodeSelector\n     private final int maxPendingSplitsPerTask;\n     private final int maxTasksPerStage;\n \n-    private final NodeSelectionStats nodeSelectionStats;\n-\n     public SimpleNodeSelector(\n             InternalNodeManager nodeManager,\n+            NodeSelectionStats nodeSelectionStats,\n             NodeTaskMap nodeTaskMap,\n             boolean includeCoordinator,\n             Supplier<NodeMap> nodeMap,\n             int minCandidates,\n             int maxSplitsPerNode,\n             int maxPendingSplitsPerTask,\n-            int maxTasksPerStage,\n-            NodeSelectionStats nodeSelectionStats)\n+            int maxTasksPerStage)\n     {\n         this.nodeManager = requireNonNull(nodeManager, \"nodeManager is null\");\n+        this.nodeSelectionStats = requireNonNull(nodeSelectionStats, \"NodeSelectionStats is null\");\n         this.nodeTaskMap = requireNonNull(nodeTaskMap, \"nodeTaskMap is null\");\n         this.includeCoordinator = includeCoordinator;\n         this.nodeMap = new AtomicReference<>(nodeMap);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MjI2Mw==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387942263", "bodyText": "same", "author": "highker", "createdAt": "2020-03-04T21:23:03Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeScheduler.java", "diffHunk": "@@ -74,11 +75,12 @@\n     private final NodeTaskMap nodeTaskMap;\n     private final boolean useNetworkTopology;\n     private final Duration nodeMapRefreshInterval;\n+    private final NodeSelectionStats nodeSelectionStats;", "originalCommit": "bcb9d30d85ae7e86348108090eef0ca53e98fadc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c7d100e082c6b5b5c546fd39ad3967118f5989f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeScheduler.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeScheduler.java\nindex 2d609069de..2235bfceb6 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeScheduler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeScheduler.java\n\n@@ -68,6 +68,7 @@ public class NodeScheduler\n     private final List<CounterStat> topologicalSplitCounters;\n     private final List<String> networkLocationSegmentNames;\n     private final InternalNodeManager nodeManager;\n+    private final NodeSelectionStats nodeSelectionStats;\n     private final int minCandidates;\n     private final boolean includeCoordinator;\n     private final int maxSplitsPerNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NDU1OA==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387944558", "bodyText": "We shall give better names to these stats: (I'm not an expert on naming; maybe @shixuan-fan can give suggestions)\nprimaryPreferredNodeSelectedCount\nsecondaryPreferredNodeSelectedCount\nnonPreferredNodeSelectedCount", "author": "highker", "createdAt": "2020-03-04T21:27:48Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import org.weakref.jmx.Managed;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+@ThreadSafe\n+public class NodeSelectionStats\n+{\n+    private final AtomicLong primaryHit = new AtomicLong();", "originalCommit": "bcb9d30d85ae7e86348108090eef0ca53e98fadc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2MTkzMA==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387961930", "bodyText": "@highker I'm even less of an expert on naming than you :D Your suggestions look good to me.", "author": "shixuan-fan", "createdAt": "2020-03-04T22:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NDU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "9c7d100e082c6b5b5c546fd39ad3967118f5989f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java\nindex fc6beed5e9..72c108e02c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java\n\n@@ -22,40 +22,40 @@ import java.util.concurrent.atomic.AtomicLong;\n @ThreadSafe\n public class NodeSelectionStats\n {\n-    private final AtomicLong primaryHit = new AtomicLong();\n-    private final AtomicLong secondaryHit = new AtomicLong();\n-    private final AtomicLong random = new AtomicLong();\n+    private final AtomicLong primaryPreferredNodeSelectedCount = new AtomicLong();\n+    private final AtomicLong nonPrimaryPreferredNodeSelectedCount = new AtomicLong();\n+    private final AtomicLong nonPreferredNodeSelectedCount = new AtomicLong();\n \n-    public void incrementPrimaryHit()\n+    public void incrementPrimaryPreferredNodeSelectedCount()\n     {\n-        primaryHit.getAndIncrement();\n+        primaryPreferredNodeSelectedCount.getAndIncrement();\n     }\n \n-    public void incrementSecondaryHit()\n+    public void incrementNonPrimaryPrederredNodeSelectedCount()\n     {\n-        secondaryHit.getAndIncrement();\n+        nonPrimaryPreferredNodeSelectedCount.getAndIncrement();\n     }\n \n-    public void incrementRandom()\n+    public void incrementNonPreferredNodeSelectedCount()\n     {\n-        random.getAndIncrement();\n+        nonPreferredNodeSelectedCount.getAndIncrement();\n     }\n \n     @Managed\n-    public long getPrimaryHit()\n+    public long getPrimaryPreferredNodeSelectedCount()\n     {\n-        return primaryHit.get();\n+        return primaryPreferredNodeSelectedCount.get();\n     }\n \n     @Managed\n-    public long getSecondaryHit()\n+    public long getNonPrimaryPreferredNodeSelectedCount()\n     {\n-        return secondaryHit.get();\n+        return nonPrimaryPreferredNodeSelectedCount.get();\n     }\n \n     @Managed\n-    public long getRandom()\n+    public long getNonPreferredNodeSelectedCount()\n     {\n-        return random.get();\n+        return nonPreferredNodeSelectedCount.get();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NTA1OQ==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387945059", "bodyText": "This class indicates hard assumption on \"we only have 2 preferred nodes and all other selections are random\". I'm ok with this for now. @shixuan-fan, do you have better suggestions?", "author": "highker", "createdAt": "2020-03-04T21:28:57Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import org.weakref.jmx.Managed;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+@ThreadSafe\n+public class NodeSelectionStats", "originalCommit": "bcb9d30d85ae7e86348108090eef0ca53e98fadc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NjMxMQ==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387966311", "bodyText": "I share the similar concern and it does not seem to fit the angle from engine's perspective, as 2 preferred nodes are something very hive-specific.\nIf weakref could generate different stats for elements in a list, that's great, but I highly doubt that is possible.\nThe other way is we only take primary, non primary, and random (seems to be the easiest fix).\nOne final random thought is: since 2 preferred nodes are hive-specific, I'm curious if this is something that could be done in connector. For example, engine passed the decision back to connector, and let the connector collect the stats? But this is a bit weird because node selection is done in the engine.\nI personally think the most feasible one is to change secondary to non-primary.", "author": "shixuan-fan", "createdAt": "2020-03-04T22:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NTg5MQ==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r387975891", "bodyText": "Agree. Let's change secondary to non-primary", "author": "highker", "createdAt": "2020-03-04T22:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NTA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c7d100e082c6b5b5c546fd39ad3967118f5989f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java\nindex fc6beed5e9..72c108e02c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelectionStats.java\n\n@@ -22,40 +22,40 @@ import java.util.concurrent.atomic.AtomicLong;\n @ThreadSafe\n public class NodeSelectionStats\n {\n-    private final AtomicLong primaryHit = new AtomicLong();\n-    private final AtomicLong secondaryHit = new AtomicLong();\n-    private final AtomicLong random = new AtomicLong();\n+    private final AtomicLong primaryPreferredNodeSelectedCount = new AtomicLong();\n+    private final AtomicLong nonPrimaryPreferredNodeSelectedCount = new AtomicLong();\n+    private final AtomicLong nonPreferredNodeSelectedCount = new AtomicLong();\n \n-    public void incrementPrimaryHit()\n+    public void incrementPrimaryPreferredNodeSelectedCount()\n     {\n-        primaryHit.getAndIncrement();\n+        primaryPreferredNodeSelectedCount.getAndIncrement();\n     }\n \n-    public void incrementSecondaryHit()\n+    public void incrementNonPrimaryPrederredNodeSelectedCount()\n     {\n-        secondaryHit.getAndIncrement();\n+        nonPrimaryPreferredNodeSelectedCount.getAndIncrement();\n     }\n \n-    public void incrementRandom()\n+    public void incrementNonPreferredNodeSelectedCount()\n     {\n-        random.getAndIncrement();\n+        nonPreferredNodeSelectedCount.getAndIncrement();\n     }\n \n     @Managed\n-    public long getPrimaryHit()\n+    public long getPrimaryPreferredNodeSelectedCount()\n     {\n-        return primaryHit.get();\n+        return primaryPreferredNodeSelectedCount.get();\n     }\n \n     @Managed\n-    public long getSecondaryHit()\n+    public long getNonPrimaryPreferredNodeSelectedCount()\n     {\n-        return secondaryHit.get();\n+        return nonPrimaryPreferredNodeSelectedCount.get();\n     }\n \n     @Managed\n-    public long getRandom()\n+    public long getNonPreferredNodeSelectedCount()\n     {\n-        return random.get();\n+        return nonPreferredNodeSelectedCount.get();\n     }\n }\n"}}, {"oid": "9c7d100e082c6b5b5c546fd39ad3967118f5989f", "url": "https://github.com/prestodb/presto/commit/9c7d100e082c6b5b5c546fd39ad3967118f5989f", "message": "Add nodeSelectionStats to monitor affinity scheduler", "committedDate": "2020-03-05T19:59:04Z", "type": "forcePushed"}, {"oid": "c414b6385f6820126fe0dea4aad9d87f1498fd24", "url": "https://github.com/prestodb/presto/commit/c414b6385f6820126fe0dea4aad9d87f1498fd24", "message": "Add nodeSelectionStats to monitor affinity scheduler", "committedDate": "2020-03-06T07:24:58Z", "type": "forcePushed"}, {"oid": "5b3388028711a66a1901ebf618b7a1a743b77296", "url": "https://github.com/prestodb/presto/commit/5b3388028711a66a1901ebf618b7a1a743b77296", "message": "Add nodeSelectionStats to monitor affinity scheduler", "committedDate": "2020-03-06T07:33:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1OTc4Ng==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r389059786", "bodyText": "I'm not entirely sure if we should keep it static and pass stats in, or remove static. @highker: Any suggestion?", "author": "shixuan-fan", "createdAt": "2020-03-06T18:08:09Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -196,7 +199,7 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         return selectDistributionNodes(nodeMap.get().get(), nodeTaskMap, maxSplitsPerNode, maxPendingSplitsPerTask, splits, existingTasks, bucketNodeMap);\n     }\n \n-    private static Optional<InternalNodeInfo> chooseLeastBusyNode(List<InternalNode> candidateNodes, Function<InternalNode, Integer> splitCountProvider, OptionalInt preferredNodeCount, int maxSplitCount)\n+    private Optional<InternalNodeInfo> chooseLeastBusyNode(List<InternalNode> candidateNodes, Function<InternalNode, Integer> splitCountProvider, OptionalInt preferredNodeCount, int maxSplitCount)", "originalCommit": "5b3388028711a66a1901ebf618b7a1a743b77296", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTY4Nw==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r389099687", "bodyText": "I'm fine both ways actually given it's private.", "author": "highker", "createdAt": "2020-03-06T19:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1OTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDg0OQ==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r389100849", "bodyText": "Then let's just keep it as is :)", "author": "shixuan-fan", "createdAt": "2020-03-06T19:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1OTc4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MDc5NA==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r389060794", "bodyText": "Would you need a getter for this class to ensure it could be exposed to jmx?", "author": "shixuan-fan", "createdAt": "2020-03-06T18:10:26Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeScheduler.java", "diffHunk": "@@ -67,6 +68,7 @@\n     private final List<CounterStat> topologicalSplitCounters;\n     private final List<String> networkLocationSegmentNames;\n     private final InternalNodeManager nodeManager;\n+    private final NodeSelectionStats nodeSelectionStats;", "originalCommit": "5b3388028711a66a1901ebf618b7a1a743b77296", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3MzEwMw==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r389073103", "bodyText": "There are getters inside NodeSelectionStats, which would be exposed to JMX. I have tested on our cluster.", "author": "kewang1024", "createdAt": "2020-03-06T18:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MDc5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDI4MA==", "url": "https://github.com/prestodb/presto/pull/14209#discussion_r389100280", "bodyText": "\"nodeSelectionStats is null\"", "author": "highker", "createdAt": "2020-03-06T19:34:04Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -80,6 +82,7 @@ public SimpleNodeSelector(\n             int maxTasksPerStage)\n     {\n         this.nodeManager = requireNonNull(nodeManager, \"nodeManager is null\");\n+        this.nodeSelectionStats = requireNonNull(nodeSelectionStats, \"NodeSelectionStats is null\");", "originalCommit": "5b3388028711a66a1901ebf618b7a1a743b77296", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25f2fbd101afeab243143eee3981f78c2ba99a6f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex d91e441c2d..c94d77a289 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -82,7 +82,7 @@ public class SimpleNodeSelector\n             int maxTasksPerStage)\n     {\n         this.nodeManager = requireNonNull(nodeManager, \"nodeManager is null\");\n-        this.nodeSelectionStats = requireNonNull(nodeSelectionStats, \"NodeSelectionStats is null\");\n+        this.nodeSelectionStats = requireNonNull(nodeSelectionStats, \"nodeSelectionStats is null\");\n         this.nodeTaskMap = requireNonNull(nodeTaskMap, \"nodeTaskMap is null\");\n         this.includeCoordinator = includeCoordinator;\n         this.nodeMap = new AtomicReference<>(nodeMap);\n"}}, {"oid": "25f2fbd101afeab243143eee3981f78c2ba99a6f", "url": "https://github.com/prestodb/presto/commit/25f2fbd101afeab243143eee3981f78c2ba99a6f", "message": "Add nodeSelectionStats to monitor affinity scheduler", "committedDate": "2020-03-06T22:11:12Z", "type": "commit"}, {"oid": "25f2fbd101afeab243143eee3981f78c2ba99a6f", "url": "https://github.com/prestodb/presto/commit/25f2fbd101afeab243143eee3981f78c2ba99a6f", "message": "Add nodeSelectionStats to monitor affinity scheduler", "committedDate": "2020-03-06T22:11:12Z", "type": "forcePushed"}]}