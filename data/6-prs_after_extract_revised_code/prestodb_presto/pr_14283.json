{"pr_number": 14283, "pr_title": "Create ThriftBufferResult and ThriftSerializedPage", "pr_createdAt": "2020-03-24T02:38:40Z", "pr_url": "https://github.com/prestodb/presto/pull/14283", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyODIyMg==", "url": "https://github.com/prestodb/presto/pull/14283#discussion_r397328222", "bodyText": "private", "author": "highker", "createdAt": "2020-03-24T17:19:41Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftSerializedPage.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.buffer;\n+\n+import com.facebook.drift.annotations.ThriftConstructor;\n+import com.facebook.drift.annotations.ThriftField;\n+import com.facebook.drift.annotations.ThriftStruct;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import static com.facebook.presto.execution.buffer.PageCodecMarker.COMPRESSED;\n+import static com.facebook.presto.execution.buffer.PageCodecMarker.ENCRYPTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+@ThriftStruct\n+public class ThriftSerializedPage\n+{\n+    private final Slice slice;\n+    private final int positionCount;\n+    private final int uncompressedSizeInBytes;\n+    private final byte pageCodecMarkers;\n+\n+    public ThriftSerializedPage(SerializedPage serializedPage)\n+    {\n+        this(serializedPage.getSlice(), serializedPage.getPageCodecMarkers(), serializedPage.getPositionCount(), serializedPage.getUncompressedSizeInBytes());\n+    }\n+\n+    public ThriftSerializedPage(Slice slice, byte pageCodecMarkers, int positionCount, int uncompressedSizeInBytes)", "originalCommit": "3e802b5298dd5632754b1c198d8a861550182ef4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d86bab62448097a34b42959e4ee4c2e7f10389", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftSerializedPage.java b/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftSerializedPage.java\nindex 54d291f867..cb430b313b 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftSerializedPage.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftSerializedPage.java\n\n@@ -38,7 +38,7 @@ public class ThriftSerializedPage\n         this(serializedPage.getSlice(), serializedPage.getPageCodecMarkers(), serializedPage.getPositionCount(), serializedPage.getUncompressedSizeInBytes());\n     }\n \n-    public ThriftSerializedPage(Slice slice, byte pageCodecMarkers, int positionCount, int uncompressedSizeInBytes)\n+    private ThriftSerializedPage(Slice slice, byte pageCodecMarkers, int positionCount, int uncompressedSizeInBytes)\n     {\n         this.slice = requireNonNull(slice, \"slice is null\");\n         this.positionCount = positionCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzMzEzNQ==", "url": "https://github.com/prestodb/presto/pull/14283#discussion_r397333135", "bodyText": "Add javadoc to denote there should be no explicit call on this method.", "author": "highker", "createdAt": "2020-03-24T17:26:40Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.buffer;\n+\n+import com.facebook.drift.annotations.ThriftConstructor;\n+import com.facebook.drift.annotations.ThriftField;\n+import com.facebook.drift.annotations.ThriftStruct;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Objects.requireNonNull;\n+\n+@ThriftStruct\n+public class ThriftBufferResult\n+{\n+    private final String taskInstanceId;\n+    private final long token;\n+    private final long nextToken;\n+    private final boolean bufferComplete;\n+    private final List<ThriftSerializedPage> thriftSerializedPages;\n+\n+    public static ThriftBufferResult createThriftBufferResult(BufferResult bufferResult)\n+    {\n+        requireNonNull(bufferResult, \"bufferResult is null\");\n+\n+        List<ThriftSerializedPage> thriftSerializedPages = bufferResult.getSerializedPages().stream()\n+                .map(ThriftSerializedPage::new)\n+                .collect(Collectors.toList());\n+        return new ThriftBufferResult(\n+                bufferResult.getTaskInstanceId(),\n+                bufferResult.getToken(),\n+                bufferResult.getNextToken(),\n+                bufferResult.isBufferComplete(),\n+                thriftSerializedPages);\n+    }\n+\n+    @ThriftConstructor\n+    public ThriftBufferResult(String taskInstanceId, long token, long nextToken, boolean bufferComplete, List<ThriftSerializedPage> thriftSerializedPages)", "originalCommit": "3e802b5298dd5632754b1c198d8a861550182ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NTMyOQ==", "url": "https://github.com/prestodb/presto/pull/14283#discussion_r397455329", "bodyText": "nit: one line per parameter", "author": "wenleix", "createdAt": "2020-03-24T20:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzMzEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "34d86bab62448097a34b42959e4ee4c2e7f10389", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java b/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java\nindex 8e5571abf3..e50edace4c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java\n\n@@ -16,6 +16,7 @@ package com.facebook.presto.execution.buffer;\n import com.facebook.drift.annotations.ThriftConstructor;\n import com.facebook.drift.annotations.ThriftField;\n import com.facebook.drift.annotations.ThriftStruct;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableList;\n \n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NjUxMw==", "url": "https://github.com/prestodb/presto/pull/14283#discussion_r397456513", "bodyText": "nit: what about from or fromBufferResult?  This seems to be the convention for factory method name in Presto, for example, see RowType::from, FieldId::from, etc :)", "author": "wenleix", "createdAt": "2020-03-24T20:58:25Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.buffer;\n+\n+import com.facebook.drift.annotations.ThriftConstructor;\n+import com.facebook.drift.annotations.ThriftField;\n+import com.facebook.drift.annotations.ThriftStruct;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Objects.requireNonNull;\n+\n+@ThriftStruct\n+public class ThriftBufferResult\n+{\n+    private final String taskInstanceId;\n+    private final long token;\n+    private final long nextToken;\n+    private final boolean bufferComplete;\n+    private final List<ThriftSerializedPage> thriftSerializedPages;\n+\n+    public static ThriftBufferResult createThriftBufferResult(BufferResult bufferResult)", "originalCommit": "3e802b5298dd5632754b1c198d8a861550182ef4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d86bab62448097a34b42959e4ee4c2e7f10389", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java b/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java\nindex 8e5571abf3..e50edace4c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java\n\n@@ -16,6 +16,7 @@ package com.facebook.presto.execution.buffer;\n import com.facebook.drift.annotations.ThriftConstructor;\n import com.facebook.drift.annotations.ThriftField;\n import com.facebook.drift.annotations.ThriftStruct;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableList;\n \n import java.util.List;\n"}}, {"oid": "34d86bab62448097a34b42959e4ee4c2e7f10389", "url": "https://github.com/prestodb/presto/commit/34d86bab62448097a34b42959e4ee4c2e7f10389", "message": "Create ThriftBufferResult and ThriftSerializedPage\n\nMake SerializedPage independent of thrift serialization.", "committedDate": "2020-03-24T21:05:40Z", "type": "forcePushed"}, {"oid": "45cdba1ced6a4cc1a085fb9cd5f699476c4dfa62", "url": "https://github.com/prestodb/presto/commit/45cdba1ced6a4cc1a085fb9cd5f699476c4dfa62", "message": "Create ThriftBufferResult and ThriftSerializedPage\n\nMake SerializedPage independent of thrift serialization.", "committedDate": "2020-03-24T21:13:28Z", "type": "commit"}, {"oid": "45cdba1ced6a4cc1a085fb9cd5f699476c4dfa62", "url": "https://github.com/prestodb/presto/commit/45cdba1ced6a4cc1a085fb9cd5f699476c4dfa62", "message": "Create ThriftBufferResult and ThriftSerializedPage\n\nMake SerializedPage independent of thrift serialization.", "committedDate": "2020-03-24T21:13:28Z", "type": "forcePushed"}]}