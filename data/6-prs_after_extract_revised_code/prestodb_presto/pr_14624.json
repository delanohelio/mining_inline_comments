{"pr_number": 14624, "pr_title": "Add SET_AGG as an efficient replacement for ARRAY_AGG(DISTINCT)", "pr_createdAt": "2020-06-08T19:38:20Z", "pr_url": "https://github.com/prestodb/presto/pull/14624", "timeline": [{"oid": "463322cacd5fda4b282bbfe30821acc69a8b03db", "url": "https://github.com/prestodb/presto/commit/463322cacd5fda4b282bbfe30821acc69a8b03db", "message": "Implement SET_AGG as an efficient replacement for ARRAY_AGG(DISTINCT).", "committedDate": "2020-06-08T19:53:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3MTU4Mw==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r436971583", "bodyText": "You probably want to introduce some set_agg test rather than this?", "author": "rongrong", "createdAt": "2020-06-08T20:11:05Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8413,6 +8413,12 @@ public void testAndInFilter()\n                 \"values false\");\n     }\n \n+    @Test\n+    public void testArrayAggDistinct()", "originalCommit": "463322cacd5fda4b282bbfe30821acc69a8b03db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MTM4Ng==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r436991386", "bodyText": "Yeah - this started out as a better implementation for array_agg(distinct) but morphed into this new agg. Will fix it.", "author": "kaikalur", "createdAt": "2020-06-08T20:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3MTU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNjcyNQ==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437536725", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-06-09T15:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3MTU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0438d142320903f22fc20c06e7b4b1b4217bd232", "chunk": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 1ad0e0e38e..3c9928b53a 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n\n@@ -8414,9 +8414,9 @@ public abstract class AbstractTestQueries\n     }\n \n     @Test\n-    public void testArrayAggDistinct()\n+    public void testSetAgg()\n     {\n-        assertQuery(\"select array_agg(distinct x) from (select 1 x, 2 y union all select 1 x, 2 y union all select 2 x, 1 y) group by y\", \"values array[1], array[2]\");\n+        assertQuery(\"select set_agg(x) from (select 1 x, 2 y union all select 1 x, 2 y union all select 2 x, 1 y) group by y\", \"values array[1], array[2]\");\n     }\n \n     protected Session noJoinReordering()\n"}}, {"oid": "0438d142320903f22fc20c06e7b4b1b4217bd232", "url": "https://github.com/prestodb/presto/commit/0438d142320903f22fc20c06e7b4b1b4217bd232", "message": "Implement SET_AGG as an efficient replacement for ARRAY_AGG(DISTINCT).", "committedDate": "2020-06-09T16:44:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTEzNg==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437799136", "bodyText": "Can we also add tests for other types and maybe query based on tpch?", "author": "rongrong", "createdAt": "2020-06-10T00:47:04Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8413,6 +8413,12 @@ public void testAndInFilter()\n                 \"values false\");\n     }\n \n+    @Test\n+    public void testSetAgg()\n+    {\n+        assertQuery(\"select set_agg(x) from (select 1 x, 2 y union all select 1 x, 2 y union all select 2 x, 1 y) group by y\", \"values array[1], array[2]\");", "originalCommit": "0438d142320903f22fc20c06e7b4b1b4217bd232", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE4OTI4Nw==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r438189287", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-06-10T14:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "e247c992aac427b887ef9658bbfdea71aae95e80", "chunk": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 3c9928b53a..9a98a4bea8 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n\n@@ -8416,7 +8416,35 @@ public abstract class AbstractTestQueries\n     @Test\n     public void testSetAgg()\n     {\n-        assertQuery(\"select set_agg(x) from (select 1 x, 2 y union all select 1 x, 2 y union all select 2 x, 1 y) group by y\", \"values array[1], array[2]\");\n+        final String input = \"(select 1 x, 2 y union all select 1 x, 2 y union all select 2 x, 1 y)\";\n+        assertQuery(\n+                \"select count() from (select set_agg(x) = array_distinct(array_agg(x)) equals\" +\n+                        \" from \" + input + \" group by y) where equals\",\n+                \"select count(distinct y) from \" + input);\n+\n+        assertQuery(\n+                \"select count() from \" +\n+                        \"(select set_agg(orderkey) = array_agg(distinct orderkey) eq from orders group by custkey) where eq\",\n+                \"select count(distinct custkey) from orders\");\n+        assertQuery(\n+                \"select cardinality(set_agg(orderkey)) from orders\",\n+                \"select count(distinct orderkey) from orders\");\n+\n+        assertQuery(\n+                \"select count() from \" +\n+                        \"(select set_agg(comment) = array_agg(distinct comment) eq from orders group by orderkey) where eq\",\n+                \"select count(distinct orderkey) from orders\");\n+        assertQuery(\n+                \"select cardinality(set_agg(comment)) from orders\",\n+                \"select count(distinct comment) from orders\");\n+\n+        assertQuery(\n+                \"select count() from \" +\n+                        \"(select set_agg(cast(orderdate as date)) = array_agg(distinct cast(orderdate as date)) eq from orders group by orderkey) where eq\",\n+                \"select count(distinct orderkey) from orders\");\n+        assertQuery(\n+                \"select cardinality(set_agg(cast(orderdate as date))) from orders\",\n+                \"select count(distinct orderdate) from orders\");\n     }\n \n     protected Session noJoinReordering()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTcyMg==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437799722", "bodyText": "Only add this value if we haven't seen it before?", "author": "rongrong", "createdAt": "2020-06-10T00:49:16Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INSUFFICIENT_RESOURCES;\n+import static com.facebook.presto.type.TypeUtils.expectedValueSize;\n+import static com.facebook.presto.type.TypeUtils.hashPosition;\n+import static com.facebook.presto.type.TypeUtils.positionEqualsPosition;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static it.unimi.dsi.fastutil.HashCommon.arraySize;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SetOfValues\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(SetOfValues.class).instanceSize();\n+    private static final int EXPECTED_ENTRIES = 10;\n+    private static final int EXPECTED_ENTRY_SIZE = 16;\n+    private static final float FILL_RATIO = 0.75f;\n+    private static final int EMPTY_SLOT = -1;\n+\n+    private final BlockBuilder valueBlockBuilder;\n+    private final Type valueType;\n+\n+    private int[] valuePositionByHash;\n+    private int hashCapacity;\n+    private int maxFill;\n+    private int hashMask;\n+\n+    public SetOfValues(Type valueType)\n+    {\n+        this.valueType = requireNonNull(valueType, \"valueType is null\");\n+        valueBlockBuilder = this.valueType.createBlockBuilder(null, EXPECTED_ENTRIES, expectedValueSize(valueType, EXPECTED_ENTRY_SIZE));\n+        hashCapacity = arraySize(EXPECTED_ENTRIES, FILL_RATIO);\n+        this.maxFill = calculateMaxFill(hashCapacity);\n+        this.hashMask = hashCapacity - 1;\n+        valuePositionByHash = new int[hashCapacity];\n+        Arrays.fill(valuePositionByHash, EMPTY_SLOT);\n+    }\n+\n+    public SetOfValues(Block serialized, Type elementType)\n+    {\n+        this(elementType);\n+        deserialize(requireNonNull(serialized, \"serialized is null\"));\n+    }\n+\n+    public Block getvalues()\n+    {\n+        return valueBlockBuilder.build();\n+    }\n+\n+    private void deserialize(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            add(block, i);\n+        }\n+    }\n+\n+    public void serialize(BlockBuilder out)\n+    {\n+        BlockBuilder arrayBlockBuilder = out.beginBlockEntry();\n+        for (int i = 0; i < valueBlockBuilder.getPositionCount(); i++) {\n+            valueType.appendTo(valueBlockBuilder, i, arrayBlockBuilder);\n+        }\n+        out.closeEntry();\n+    }\n+\n+    public long estimatedInMemorySize()\n+    {\n+        long size = INSTANCE_SIZE;\n+        size += valueBlockBuilder.getRetainedSizeInBytes();\n+        size += sizeOf(valuePositionByHash);\n+        return size;\n+    }\n+\n+    /**\n+     * Only add this value we haven't seen it before.", "originalCommit": "0438d142320903f22fc20c06e7b4b1b4217bd232", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTg0NQ==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437799845", "bodyText": "I don't think this comment is necessary actually, the code is pretty clear.", "author": "rongrong", "createdAt": "2020-06-10T00:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NDY1OA==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r438194658", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-06-10T15:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "8f587b7e5d77a5fe0afe81473e944a067d8de875", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java\nindex 13983216eb..1e7eaafff0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java\n\n@@ -92,29 +92,11 @@ public final class SetOfValues\n         return size;\n     }\n \n-    /**\n-     * Only add this value we haven't seen it before.\n-     * Otherwise, ignore it.\n-     */\n     public void add(Block value, int valuePosition)\n     {\n-        if (!valueExists(value, valuePosition)) {\n-            addvalue(value, valuePosition);\n-        }\n-    }\n-\n-    private boolean valueExists(Block value, int position)\n-    {\n-        checkArgument(position >= 0, \"position is negative\");\n-        return valuePositionByHash[getHashPositionOfvalue(value, position)] != EMPTY_SLOT;\n-    }\n-\n-    private void addvalue(Block value, int position)\n-    {\n-        checkArgument(position >= 0, \"position is negative\");\n-        valueType.appendTo(value, position, valueBlockBuilder);\n-        int hashPosition = getHashPositionOfvalue(value, position);\n+        int hashPosition = getHashPositionOfvalue(value, valuePosition);\n         if (valuePositionByHash[hashPosition] == EMPTY_SLOT) {\n+            valueType.appendTo(value, valuePosition, valueBlockBuilder);\n             valuePositionByHash[hashPosition] = valueBlockBuilder.getPositionCount() - 1;\n             if (valueBlockBuilder.getPositionCount() >= maxFill) {\n                 rehash();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMjcyMg==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r437802722", "bodyText": "I know you copied the logic from KeyValuePairs. I'm wondering can we simplify this logic? Since this function can only be called when valuePositionByHash[hashPosition] == EMPTY_SLOT (this is guarded by logic in ValueExists) this should be a checkState rather than an if. Or if we want to use if, we can put the appendTo inside the if statement and remove valueExists.", "author": "rongrong", "createdAt": "2020-06-10T01:00:59Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INSUFFICIENT_RESOURCES;\n+import static com.facebook.presto.type.TypeUtils.expectedValueSize;\n+import static com.facebook.presto.type.TypeUtils.hashPosition;\n+import static com.facebook.presto.type.TypeUtils.positionEqualsPosition;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static it.unimi.dsi.fastutil.HashCommon.arraySize;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SetOfValues\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(SetOfValues.class).instanceSize();\n+    private static final int EXPECTED_ENTRIES = 10;\n+    private static final int EXPECTED_ENTRY_SIZE = 16;\n+    private static final float FILL_RATIO = 0.75f;\n+    private static final int EMPTY_SLOT = -1;\n+\n+    private final BlockBuilder valueBlockBuilder;\n+    private final Type valueType;\n+\n+    private int[] valuePositionByHash;\n+    private int hashCapacity;\n+    private int maxFill;\n+    private int hashMask;\n+\n+    public SetOfValues(Type valueType)\n+    {\n+        this.valueType = requireNonNull(valueType, \"valueType is null\");\n+        valueBlockBuilder = this.valueType.createBlockBuilder(null, EXPECTED_ENTRIES, expectedValueSize(valueType, EXPECTED_ENTRY_SIZE));\n+        hashCapacity = arraySize(EXPECTED_ENTRIES, FILL_RATIO);\n+        this.maxFill = calculateMaxFill(hashCapacity);\n+        this.hashMask = hashCapacity - 1;\n+        valuePositionByHash = new int[hashCapacity];\n+        Arrays.fill(valuePositionByHash, EMPTY_SLOT);\n+    }\n+\n+    public SetOfValues(Block serialized, Type elementType)\n+    {\n+        this(elementType);\n+        deserialize(requireNonNull(serialized, \"serialized is null\"));\n+    }\n+\n+    public Block getvalues()\n+    {\n+        return valueBlockBuilder.build();\n+    }\n+\n+    private void deserialize(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            add(block, i);\n+        }\n+    }\n+\n+    public void serialize(BlockBuilder out)\n+    {\n+        BlockBuilder arrayBlockBuilder = out.beginBlockEntry();\n+        for (int i = 0; i < valueBlockBuilder.getPositionCount(); i++) {\n+            valueType.appendTo(valueBlockBuilder, i, arrayBlockBuilder);\n+        }\n+        out.closeEntry();\n+    }\n+\n+    public long estimatedInMemorySize()\n+    {\n+        long size = INSTANCE_SIZE;\n+        size += valueBlockBuilder.getRetainedSizeInBytes();\n+        size += sizeOf(valuePositionByHash);\n+        return size;\n+    }\n+\n+    /**\n+     * Only add this value we haven't seen it before.\n+     * Otherwise, ignore it.\n+     */\n+    public void add(Block value, int valuePosition)\n+    {\n+        if (!valueExists(value, valuePosition)) {\n+            addvalue(value, valuePosition);\n+        }\n+    }\n+\n+    private boolean valueExists(Block value, int position)\n+    {\n+        checkArgument(position >= 0, \"position is negative\");\n+        return valuePositionByHash[getHashPositionOfvalue(value, position)] != EMPTY_SLOT;\n+    }\n+\n+    private void addvalue(Block value, int position)\n+    {\n+        checkArgument(position >= 0, \"position is negative\");\n+        valueType.appendTo(value, position, valueBlockBuilder);\n+        int hashPosition = getHashPositionOfvalue(value, position);\n+        if (valuePositionByHash[hashPosition] == EMPTY_SLOT) {", "originalCommit": "0438d142320903f22fc20c06e7b4b1b4217bd232", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NDUxMQ==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r438194511", "bodyText": "Yeah - I'm going to just inline the whole thing.", "author": "kaikalur", "createdAt": "2020-06-10T15:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMjcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NTE3Mg==", "url": "https://github.com/prestodb/presto/pull/14624#discussion_r438195172", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-06-10T15:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMjcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "8f587b7e5d77a5fe0afe81473e944a067d8de875", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java\nindex 13983216eb..1e7eaafff0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/SetOfValues.java\n\n@@ -92,29 +92,11 @@ public final class SetOfValues\n         return size;\n     }\n \n-    /**\n-     * Only add this value we haven't seen it before.\n-     * Otherwise, ignore it.\n-     */\n     public void add(Block value, int valuePosition)\n     {\n-        if (!valueExists(value, valuePosition)) {\n-            addvalue(value, valuePosition);\n-        }\n-    }\n-\n-    private boolean valueExists(Block value, int position)\n-    {\n-        checkArgument(position >= 0, \"position is negative\");\n-        return valuePositionByHash[getHashPositionOfvalue(value, position)] != EMPTY_SLOT;\n-    }\n-\n-    private void addvalue(Block value, int position)\n-    {\n-        checkArgument(position >= 0, \"position is negative\");\n-        valueType.appendTo(value, position, valueBlockBuilder);\n-        int hashPosition = getHashPositionOfvalue(value, position);\n+        int hashPosition = getHashPositionOfvalue(value, valuePosition);\n         if (valuePositionByHash[hashPosition] == EMPTY_SLOT) {\n+            valueType.appendTo(value, valuePosition, valueBlockBuilder);\n             valuePositionByHash[hashPosition] = valueBlockBuilder.getPositionCount() - 1;\n             if (valueBlockBuilder.getPositionCount() >= maxFill) {\n                 rehash();\n"}}, {"oid": "e247c992aac427b887ef9658bbfdea71aae95e80", "url": "https://github.com/prestodb/presto/commit/e247c992aac427b887ef9658bbfdea71aae95e80", "message": "Implement SET_AGG as an efficient replacement for ARRAY_AGG(DISTINCT).", "committedDate": "2020-06-10T14:56:15Z", "type": "forcePushed"}, {"oid": "8f587b7e5d77a5fe0afe81473e944a067d8de875", "url": "https://github.com/prestodb/presto/commit/8f587b7e5d77a5fe0afe81473e944a067d8de875", "message": "Implement SET_AGG as an efficient replacement for ARRAY_AGG(DISTINCT).", "committedDate": "2020-06-10T15:04:50Z", "type": "commit"}, {"oid": "8f587b7e5d77a5fe0afe81473e944a067d8de875", "url": "https://github.com/prestodb/presto/commit/8f587b7e5d77a5fe0afe81473e944a067d8de875", "message": "Implement SET_AGG as an efficient replacement for ARRAY_AGG(DISTINCT).", "committedDate": "2020-06-10T15:04:50Z", "type": "forcePushed"}]}