{"pr_number": 14557, "pr_title": "Introduce table cache quota to HiveConnector", "pr_createdAt": "2020-05-19T08:11:22Z", "pr_url": "https://github.com/prestodb/presto/pull/14557", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTUzMQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427491531", "bodyText": "Given we have three states here, have we considered using enum as opposed to Optional<Boolean>.", "author": "shixuan-fan", "createdAt": "2020-05-19T17:54:13Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "diffHunk": "@@ -13,22 +13,27 @@\n  */\n package com.facebook.presto.cache;\n \n+import com.facebook.presto.hive.HiveFileContext;\n import io.airlift.slice.Slice;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n+import java.util.Optional;\n+\n @ThreadSafe\n public interface CacheManager\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is not in cache, return false.\n-     * Otherwise, save the data in {@param buffer} starting at {@param offset} and return true.\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return Optional.of(True).\n+     * If it is not in cache:\n+     *      1. If there is still cache quota for this table, return Optional.of(False)\n+     *      2. Otherwise, return Optional.empty()\n      */\n-    boolean get(FileReadRequest request, byte[] buffer, int offset);\n+    Optional<Boolean> get(HiveFileContext hiveFileContext, FileReadRequest request, byte[] buffer, int offset);", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4Mzg4MA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427683880", "bodyText": "I agree, the usage of optional is confusing. Let's use proper states.", "author": "jainxrohit", "createdAt": "2020-05-20T01:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NDMzMw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427684333", "bodyText": "I also think, we should not use hiveFileContext in the cacheManager. Lets keep the cacheManage simple and should not be aware of HiveFileContext", "author": "jainxrohit", "createdAt": "2020-05-20T01:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\nindex ed97a33ae5..f54b8bcfaf 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\n\n@@ -13,27 +13,27 @@\n  */\n package com.facebook.presto.cache;\n \n-import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.cache.filemerge.CacheResult;\n+import com.facebook.presto.hive.CacheQuota;\n import io.airlift.slice.Slice;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n-import java.util.Optional;\n-\n @ThreadSafe\n public interface CacheManager\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return Optional.of(True).\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return IN_CACHE.\n      * If it is not in cache:\n-     *      1. If there is still cache quota for this table, return Optional.of(False)\n-     *      2. Otherwise, return Optional.empty()\n+     *      1. If there is still cache quota for this table, return NOT_IN_CACHE\n+     *      2. Otherwise, return CACHE_QUOTA_EXCEED\n+     * @return CacheResult\n      */\n-    Optional<Boolean> get(HiveFileContext hiveFileContext, FileReadRequest request, byte[] buffer, int offset);\n+    CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset);\n \n     /**\n      * Save data in cache\n      */\n-    void put(String table, FileReadRequest request, Slice data);\n+    void put(long cacheScopeIdentifier, FileReadRequest request, Slice data);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MjE0OA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427492148", "bodyText": "Shouldn't this be a DataSize instead?", "author": "shixuan-fan", "createdAt": "2020-05-19T17:55:06Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -76,6 +79,7 @@\n     private static final String EXTENSION = \".cache\";\n \n     private static final int FILE_MERGE_BUFFER_SIZE = toIntExact(new DataSize(8, MEGABYTE).toBytes());\n+    private static final long perTableCacheQuota = 100;", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex a6e4a9ae15..d1ec21ade0 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -79,7 +79,7 @@ public class FileMergeCacheManager\n     private static final String EXTENSION = \".cache\";\n \n     private static final int FILE_MERGE_BUFFER_SIZE = toIntExact(new DataSize(8, MEGABYTE).toBytes());\n-    private static final long perTableCacheQuota = 100;\n+    private static final DataSize perTableCacheQuota = DataSize.succinctBytes(100);\n \n     private final ThreadLocal<byte[]> buffers = ThreadLocal.withInitial(() -> new byte[FILE_MERGE_BUFFER_SIZE]);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427492878", "bodyText": "Probably extract this to a method so we don't need to add the comment below.", "author": "shixuan-fan", "createdAt": "2020-05-19T17:56:08Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +166,43 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4MzA0NA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427683044", "bodyText": "+1", "author": "jainxrohit", "createdAt": "2020-05-20T00:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NjM4Nw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427686387", "bodyText": "I dont think I understand this logic. Why get method has anything to do with cache quota?\nGet method should just return the data if the data is present in the cache?\nIt is the put method responsibility to put the data in the cache or not. While putting more data to the cache, it should be checked if the new data can be accommodated in the cache or not.", "author": "jainxrohit", "createdAt": "2020-05-20T01:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5MDQ1NA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427790454", "bodyText": "Same, we don't wanna check quota on read. Move the checking and persisting cache logic to write.", "author": "highker", "createdAt": "2020-05-20T07:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NjAxNg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r428366016", "bodyText": "@jainxrohit @highker\nOriginally we use\n// hint the cache no matter what cache.get(request.getPath(), () -> true);\nbecause we need to update the cache so that it can be marked as recently accessed.\nbut if it exceeds the cache quota, we can\u2019t put it in cache any more\nand we rely on read result to decide if we want to read and put to cache, that\u2019s why we have those logic in read path", "author": "kewang1024", "createdAt": "2020-05-20T23:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex a6e4a9ae15..d1ec21ade0 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -166,42 +168,63 @@ public class FileMergeCacheManager\n             stats.incrementCacheMiss();\n         }\n \n-        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {\n-            // it is not cached and we don't have enough cache quota to store\n-            return Optional.empty();\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n         }\n \n         try {\n             // hint the cache\n-            cache.get(request.getPath(), hiveFileContext::getTable);\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n         }\n         catch (ExecutionException e) {\n             // ignore\n         }\n-        return Optional.of(result);\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {\n+            return CacheResult.NOT_IN_CACHE;\n+        }\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n+    {\n+        DataSize cacheSize = DataSize.succinctBytes(getCacheScopeSize(cacheQuota.getIdentifier()) + request.getLength());\n+        Optional<DataSize> quota = cacheQuota.getQuota();\n+        return quota.isPresent() && (cacheSize.compareTo(quota.get()) > 0);\n     }\n \n-    private long getCacheSize(String table)\n+    private long getCacheScopeSize(Long cacheScopeIdentifier)\n     {\n         long sum = 0;\n-        for (Path path : tableFiles.get(table)) {\n-            for (Range<Long> range : persistedRanges.get(path).getRange().asDescendingMapOfRanges().keySet()) {\n-                sum += range.upperEndpoint() - range.lowerEndpoint();\n+        for (Path path : cacheScopreFiles.get(cacheScopeIdentifier)) {\n+            CacheRange cacheRange = persistedRanges.get(path);\n+            Lock readLock = cacheRange.getLock().readLock();\n+            readLock.lock();\n+            try {\n+                for (Range<Long> range : cacheRange.getRange().asDescendingMapOfRanges().keySet()) {\n+                    sum += range.upperEndpoint() - range.lowerEndpoint();\n+                }\n+            }\n+            finally {\n+                readLock.unlock();\n             }\n+\n         }\n         return sum;\n     }\n \n     @Override\n-    public void put(String table, FileReadRequest key, Slice data)\n+    public void put(long cacheScopeIdentifier, FileReadRequest key, Slice data)\n     {\n         if (stats.getInMemoryRetainedBytes() + data.length() >= maxInflightBytes) {\n             // cannot accept more requests\n             return;\n         }\n \n-        tableFiles.putIfAbsent(table, new ConcurrentHashSet<>());\n-        tableFiles.get(table).add(key.getPath());\n+        cacheScopreFiles.putIfAbsent(cacheScopeIdentifier, new ConcurrentHashSet<>());\n+        cacheScopreFiles.get(cacheScopeIdentifier).add(key.getPath());\n \n         // make a copy given the input data could be a reusable buffer\n         stats.addInMemoryRetainedBytes(data.length());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MzgxNQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427493815", "bodyText": "Maybe we should update the current cache usage here given there is an eviction event?", "author": "shixuan-fan", "createdAt": "2020-05-19T17:57:38Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -472,13 +495,14 @@ public ReadWriteLock getLock()\n     }\n \n     private class CacheRemovalListener\n-            implements RemovalListener<Path, Boolean>\n+            implements RemovalListener<Path, String>\n     {\n         @Override\n-        public void onRemoval(RemovalNotification<Path, Boolean> notification)\n+        public void onRemoval(RemovalNotification<Path, String> notification)", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NzQ5NQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r428367495", "bodyText": "I added\ntableFiles.remove(notification.getValue());\ndo you mean this one?", "author": "kewang1024", "createdAt": "2020-05-20T23:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MzgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex a6e4a9ae15..d1ec21ade0 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -495,14 +518,14 @@ public class FileMergeCacheManager\n     }\n \n     private class CacheRemovalListener\n-            implements RemovalListener<Path, String>\n+            implements RemovalListener<Path, Long>\n     {\n         @Override\n-        public void onRemoval(RemovalNotification<Path, String> notification)\n+        public void onRemoval(RemovalNotification<Path, Long> notification)\n         {\n             Path path = notification.getKey();\n             CacheRange cacheRange = persistedRanges.remove(path);\n-            tableFiles.remove(notification.getValue());\n+            cacheScopreFiles.remove(notification.getValue());\n             if (cacheRange == null) {\n                 return;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4ODI3MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427688271", "bodyText": "I think we should not introduce cache quota here, we can leave this as it is. The only part which should worry about cacheQuota is cache writing methods(put).", "author": "jainxrohit", "createdAt": "2020-05-20T01:19:22Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingInputStream.java", "diffHunk": "@@ -51,9 +55,16 @@ public void readFully(long position, byte[] buffer, int offset, int length)\n     {\n         FileReadRequest key = new FileReadRequest(path, position, length);\n ", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5MDE4MA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427790180", "bodyText": "Agree. We should not have cache quota check on any read path. We only check cache quota on put.", "author": "highker", "createdAt": "2020-05-20T07:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4ODI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingInputStream.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingInputStream.java\nindex 23b58337a2..e853271a6e 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingInputStream.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingInputStream.java\n\n@@ -54,18 +55,18 @@ public final class FileMergeCachingInputStream\n             throws IOException\n     {\n         FileReadRequest key = new FileReadRequest(path, position, length);\n+        CacheQuota cacheQuota = hiveFileContext.getCacheQuota();\n \n-        if (!cacheManager.get(hiveFileContext, key, buffer, offset).isPresent()) {\n-            // we don't have cache quota left, don't store in cache\n-            inputStream.readFully(position, buffer, offset, length);\n-            return;\n-        }\n-\n-        if (!cacheManager.get(hiveFileContext, key, buffer, offset).get()) {\n-            // it is not cached and we have cache quota\n-            inputStream.readFully(position, buffer, offset, length);\n-            cacheManager.put(hiveFileContext.getTable(), key, wrappedBuffer(buffer, offset, length));\n-            return;\n+        switch (cacheManager.get(cacheQuota, key, buffer, offset)) {\n+            case IN_CACHE:\n+                break;\n+            case NOT_IN_CACHE:\n+                inputStream.readFully(position, buffer, offset, length);\n+                cacheManager.put(cacheQuota.getIdentifier(), key, wrappedBuffer(buffer, offset, length));\n+                return;\n+            case CACHE_QUOTA_EXCEED:\n+                inputStream.readFully(position, buffer, offset, length);\n+                return;\n         }\n \n         if (cacheValidationEnabled) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4ODg5NQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427688895", "bodyText": "qutoa => tableQuota?", "author": "jainxrohit", "createdAt": "2020-05-20T01:21:45Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "diffHunk": "@@ -14,19 +14,24 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n+import java.util.OptionalLong;\n \n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n \n     private final boolean cacheable;\n+    private final String table;\n+    private final OptionalLong quota;\n     private final Optional<ExtraHiveFileInfo<?>> extraFileInfo;\n \n-    public HiveFileContext(boolean cacheable, Optional<ExtraHiveFileInfo<?>> extraFileInfo)\n+    public HiveFileContext(boolean cacheable, String table, OptionalLong quota, Optional<ExtraHiveFileInfo<?>> extraFileInfo)", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\nindex b9981a649c..097494d2b9 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\n\n@@ -14,24 +14,22 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n-import java.util.OptionalLong;\n \n+import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, new CacheQuota(TABLE, \"test\", Optional.empty()), Optional.empty());\n \n     private final boolean cacheable;\n-    private final String table;\n-    private final OptionalLong quota;\n+    private final CacheQuota cacheQuota;\n     private final Optional<ExtraHiveFileInfo<?>> extraFileInfo;\n \n-    public HiveFileContext(boolean cacheable, String table, OptionalLong quota, Optional<ExtraHiveFileInfo<?>> extraFileInfo)\n+    public HiveFileContext(boolean cacheable, CacheQuota cacheQuota, Optional<ExtraHiveFileInfo<?>> extraFileInfo)\n     {\n         this.cacheable = cacheable;\n-        this.table = requireNonNull(table, \"table is null\");\n-        this.quota = quota;\n+        this.cacheQuota = requireNonNull(cacheQuota, \"cacheQuota is null\");\n         this.extraFileInfo = requireNonNull(extraFileInfo, \"extraFileInfo is null\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4OTU5NA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427689594", "bodyText": "This looks off. Doesn't seem like a correct place.", "author": "jainxrohit", "createdAt": "2020-05-20T01:24:26Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -62,6 +64,7 @@\n     public HiveSplit(\n             @JsonProperty(\"database\") String database,\n             @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"tableCacheQuota\") OptionalLong tableCacheQuota,", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\nindex 1ad58888a7..d6b6b54685 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n\n@@ -64,7 +63,7 @@ public class HiveSplit\n     public HiveSplit(\n             @JsonProperty(\"database\") String database,\n             @JsonProperty(\"table\") String table,\n-            @JsonProperty(\"tableCacheQuota\") OptionalLong tableCacheQuota,\n+            @JsonProperty(\"cacheQuota\") CacheQuota cacheQuota,\n             @JsonProperty(\"partitionName\") String partitionName,\n             @JsonProperty(\"path\") String path,\n             @JsonProperty(\"start\") long start,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwOTcxNA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427709714", "bodyText": "Rather than fixing this to be \"table\", we can generalize this to be schema, catalog, global, partition, etc. This means that we could have per-table, per-schema, per-catalog, per-partition, global quota etc. I'm not good at naming but potentially we could call schema, catalog, global, partition, table as \"CacheScope\" and this to be \"CacheScopeHandle\". Note that a \"Scope\" should have a distinct set of files so we don't over or under count. That means we won't be able to handle more fine-grained quota like per-user quota. But that should be fine for many use cases already.\nenum CacheScope\n{\n    GLOBAL, CATALOG, SCHEMA, TABLE, PARTITION\n}\n\nabstract class CacheScopeHandle<T>\n{\n    private final T identity;\n\n    long getIdentifier();\n}\nWith this approach, you could unify the global quota and per-XXX quota", "author": "highker", "createdAt": "2020-05-20T02:40:12Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "diffHunk": "@@ -14,19 +14,24 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n+import java.util.OptionalLong;\n \n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n \n     private final boolean cacheable;\n+    private final String table;", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\nindex b9981a649c..097494d2b9 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\n\n@@ -14,24 +14,22 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n-import java.util.OptionalLong;\n \n+import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, new CacheQuota(TABLE, \"test\", Optional.empty()), Optional.empty());\n \n     private final boolean cacheable;\n-    private final String table;\n-    private final OptionalLong quota;\n+    private final CacheQuota cacheQuota;\n     private final Optional<ExtraHiveFileInfo<?>> extraFileInfo;\n \n-    public HiveFileContext(boolean cacheable, String table, OptionalLong quota, Optional<ExtraHiveFileInfo<?>> extraFileInfo)\n+    public HiveFileContext(boolean cacheable, CacheQuota cacheQuota, Optional<ExtraHiveFileInfo<?>> extraFileInfo)\n     {\n         this.cacheable = cacheable;\n-        this.table = requireNonNull(table, \"table is null\");\n-        this.quota = quota;\n+        this.cacheQuota = requireNonNull(cacheQuota, \"cacheQuota is null\");\n         this.extraFileInfo = requireNonNull(extraFileInfo, \"extraFileInfo is null\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwOTkxOA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427709918", "bodyText": "Actually, we should always have quota instead of optional. We could potentially set it to be infinite to indicate there is no limit.", "author": "highker", "createdAt": "2020-05-20T02:41:04Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "diffHunk": "@@ -14,19 +14,24 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n+import java.util.OptionalLong;\n \n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n \n     private final boolean cacheable;\n+    private final String table;\n+    private final OptionalLong quota;", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\nindex b9981a649c..097494d2b9 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\n\n@@ -14,24 +14,22 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n-import java.util.OptionalLong;\n \n+import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, new CacheQuota(TABLE, \"test\", Optional.empty()), Optional.empty());\n \n     private final boolean cacheable;\n-    private final String table;\n-    private final OptionalLong quota;\n+    private final CacheQuota cacheQuota;\n     private final Optional<ExtraHiveFileInfo<?>> extraFileInfo;\n \n-    public HiveFileContext(boolean cacheable, String table, OptionalLong quota, Optional<ExtraHiveFileInfo<?>> extraFileInfo)\n+    public HiveFileContext(boolean cacheable, CacheQuota cacheQuota, Optional<ExtraHiveFileInfo<?>> extraFileInfo)\n     {\n         this.cacheable = cacheable;\n-        this.table = requireNonNull(table, \"table is null\");\n-        this.quota = quota;\n+        this.cacheQuota = requireNonNull(cacheQuota, \"cacheQuota is null\");\n         this.extraFileInfo = requireNonNull(extraFileInfo, \"extraFileInfo is null\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4Njg1Ng==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427786856", "bodyText": "private final Map<Long, Set<Path>> scopeFiles = new ConcurrentHashMap<>();, where Long is gotten from CacheScopeHandle.getIdentifier()", "author": "highker", "createdAt": "2020-05-20T07:08:49Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -85,7 +89,8 @@\n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    private final Cache<Path, String> cache;\n+    private final Map<String, Set<Path>> tableFiles = new ConcurrentHashMap<>();", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex a6e4a9ae15..d1ec21ade0 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -89,8 +89,10 @@ public class FileMergeCacheManager\n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, String> cache;\n-    private final Map<String, Set<Path>> tableFiles = new ConcurrentHashMap<>();\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping\n+    private final Map<Long, Set<Path>> cacheScopreFiles = new ConcurrentHashMap<>();\n \n     // stats\n     private final CacheStats stats;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4ODQ2Ng==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427788466", "bodyText": "You need to grab the read lock for range cacheRange.getLock().readLock(). CacheRange is not thread safe without lock.", "author": "highker", "createdAt": "2020-05-20T07:12:27Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +166,43 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {\n+            // it is not cached and we don't have enough cache quota to store\n+            return Optional.empty();\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), hiveFileContext::getTable);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+        return Optional.of(result);\n+    }\n+\n+    private long getCacheSize(String table)\n+    {\n+        long sum = 0;\n+        for (Path path : tableFiles.get(table)) {\n+            for (Range<Long> range : persistedRanges.get(path).getRange().asDescendingMapOfRanges().keySet()) {", "originalCommit": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85833a76850e40e07f298657431118b8bfe22476", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex a6e4a9ae15..d1ec21ade0 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -166,42 +168,63 @@ public class FileMergeCacheManager\n             stats.incrementCacheMiss();\n         }\n \n-        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {\n-            // it is not cached and we don't have enough cache quota to store\n-            return Optional.empty();\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n         }\n \n         try {\n             // hint the cache\n-            cache.get(request.getPath(), hiveFileContext::getTable);\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n         }\n         catch (ExecutionException e) {\n             // ignore\n         }\n-        return Optional.of(result);\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {\n+            return CacheResult.NOT_IN_CACHE;\n+        }\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n+    {\n+        DataSize cacheSize = DataSize.succinctBytes(getCacheScopeSize(cacheQuota.getIdentifier()) + request.getLength());\n+        Optional<DataSize> quota = cacheQuota.getQuota();\n+        return quota.isPresent() && (cacheSize.compareTo(quota.get()) > 0);\n     }\n \n-    private long getCacheSize(String table)\n+    private long getCacheScopeSize(Long cacheScopeIdentifier)\n     {\n         long sum = 0;\n-        for (Path path : tableFiles.get(table)) {\n-            for (Range<Long> range : persistedRanges.get(path).getRange().asDescendingMapOfRanges().keySet()) {\n-                sum += range.upperEndpoint() - range.lowerEndpoint();\n+        for (Path path : cacheScopreFiles.get(cacheScopeIdentifier)) {\n+            CacheRange cacheRange = persistedRanges.get(path);\n+            Lock readLock = cacheRange.getLock().readLock();\n+            readLock.lock();\n+            try {\n+                for (Range<Long> range : cacheRange.getRange().asDescendingMapOfRanges().keySet()) {\n+                    sum += range.upperEndpoint() - range.lowerEndpoint();\n+                }\n+            }\n+            finally {\n+                readLock.unlock();\n             }\n+\n         }\n         return sum;\n     }\n \n     @Override\n-    public void put(String table, FileReadRequest key, Slice data)\n+    public void put(long cacheScopeIdentifier, FileReadRequest key, Slice data)\n     {\n         if (stats.getInMemoryRetainedBytes() + data.length() >= maxInflightBytes) {\n             // cannot accept more requests\n             return;\n         }\n \n-        tableFiles.putIfAbsent(table, new ConcurrentHashSet<>());\n-        tableFiles.get(table).add(key.getPath());\n+        cacheScopreFiles.putIfAbsent(cacheScopeIdentifier, new ConcurrentHashSet<>());\n+        cacheScopreFiles.get(cacheScopeIdentifier).add(key.getPath());\n \n         // make a copy given the input data could be a reusable buffer\n         stats.addInMemoryRetainedBytes(data.length());\n"}}, {"oid": "85833a76850e40e07f298657431118b8bfe22476", "url": "https://github.com/prestodb/presto/commit/85833a76850e40e07f298657431118b8bfe22476", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-23T04:40:55Z", "type": "forcePushed"}, {"oid": "16c7cb54e0bd893744f0c1ee573b2295645bfb78", "url": "https://github.com/prestodb/presto/commit/16c7cb54e0bd893744f0c1ee573b2295645bfb78", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-23T04:42:15Z", "type": "forcePushed"}, {"oid": "f4b73f03f6f01f257aef9b1c92d3f327a49ff22b", "url": "https://github.com/prestodb/presto/commit/f4b73f03f6f01f257aef9b1c92d3f327a49ff22b", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-24T18:13:22Z", "type": "forcePushed"}, {"oid": "2aa1bd77f9f1cc3dc8bfdc48e49437779a2de0af", "url": "https://github.com/prestodb/presto/commit/2aa1bd77f9f1cc3dc8bfdc48e49437779a2de0af", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-24T19:05:16Z", "type": "forcePushed"}, {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "url": "https://github.com/prestodb/presto/commit/146e2a735dda64c3acb8259a56f94a8f2ec2687c", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-24T19:07:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NjU5NQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429756595", "bodyText": "Put javadoc for each entry inline. Check QueryState as an example.", "author": "highker", "createdAt": "2020-05-25T06:42:32Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.filemerge;\n+\n+/**\n+ * IN_CACHE represents the data we're reading is in cache", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java\nindex da826e0a7b..09cc9c33ea 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java\n\n@@ -13,14 +13,18 @@\n  */\n package com.facebook.presto.cache.filemerge;\n \n-/**\n- * IN_CACHE represents the data we're reading is in cache\n- * NOT_IN_CACHE represents the data we're reading is not in cache and we have quota to read them to cache\n- * CACHE_QUOTA_EXCEED represents the data we're reading is not in cache and we don't have quota to read them to cache\n- */\n public enum CacheResult\n {\n+    /**\n+     * The data we're reading is in cache\n+     */\n     IN_CACHE,\n+    /**\n+     * The data we're reading is not in cache and we have quota to read them to cache\n+     */\n     NOT_IN_CACHE,\n+    /**\n+     * The data we're reading is not in cache and we don't have quota to read them to cache\n+     */\n     CACHE_QUOTA_EXCEED\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1Njg3NA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429756874", "bodyText": "Not used?", "author": "highker", "createdAt": "2020-05-25T06:43:23Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -76,6 +79,7 @@\n     private static final String EXTENSION = \".cache\";\n \n     private static final int FILE_MERGE_BUFFER_SIZE = toIntExact(new DataSize(8, MEGABYTE).toBytes());\n+    private static final DataSize perTableCacheQuota = DataSize.succinctBytes(100);", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex d1ec21ade0..8e4334b361 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -79,12 +80,12 @@ public class FileMergeCacheManager\n     private static final String EXTENSION = \".cache\";\n \n     private static final int FILE_MERGE_BUFFER_SIZE = toIntExact(new DataSize(8, MEGABYTE).toBytes());\n-    private static final DataSize perTableCacheQuota = DataSize.succinctBytes(100);\n \n     private final ThreadLocal<byte[]> buffers = ThreadLocal.withInitial(() -> new byte[FILE_MERGE_BUFFER_SIZE]);\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzA0MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429757041", "bodyText": "else { is redundant", "author": "highker", "createdAt": "2020-05-25T06:43:52Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex d1ec21ade0..8e4334b361 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -158,17 +167,12 @@ public class FileMergeCacheManager\n     }\n \n     @Override\n-    public CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n-        if (result) {\n-            stats.incrementCacheHit();\n-        }\n-        else {\n-            stats.incrementCacheMiss();\n-        }\n \n         if (!result && ifExceedQuota(cacheQuota, request)) {\n+            stats.incrementQuotaExceed();\n             return CacheResult.CACHE_QUOTA_EXCEED;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzE2MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429757161", "bodyText": "static", "author": "highker", "createdAt": "2020-05-25T06:44:11Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {\n+            return CacheResult.NOT_IN_CACHE;\n+        }\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1MTMyOA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430051328", "bodyText": "it could make calls to instance variable", "author": "kewang1024", "createdAt": "2020-05-25T19:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex d1ec21ade0..8e4334b361 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -158,17 +167,12 @@ public class FileMergeCacheManager\n     }\n \n     @Override\n-    public CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n-        if (result) {\n-            stats.incrementCacheHit();\n-        }\n-        else {\n-            stats.incrementCacheMiss();\n-        }\n \n         if (!result && ifExceedQuota(cacheQuota, request)) {\n+            stats.incrementQuotaExceed();\n             return CacheResult.CACHE_QUOTA_EXCEED;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzMxMQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429757311", "bodyText": "long\ngetCacheScopeSizeInBytes\nThis is an extremely expensive call that should not be tested for every read that misses a cache. Rather, we should have a single background thread populating the cache size for each scope and save it in Map<Long, Long>.", "author": "highker", "createdAt": "2020-05-25T06:44:37Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {\n+            return CacheResult.NOT_IN_CACHE;\n+        }\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n+    {\n+        DataSize cacheSize = DataSize.succinctBytes(getCacheScopeSize(cacheQuota.getIdentifier()) + request.getLength());\n+        Optional<DataSize> quota = cacheQuota.getQuota();\n+        return quota.isPresent() && (cacheSize.compareTo(quota.get()) > 0);\n+    }\n+\n+    private long getCacheScopeSize(Long cacheScopeIdentifier)", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex d1ec21ade0..8e4334b361 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -158,17 +167,12 @@ public class FileMergeCacheManager\n     }\n \n     @Override\n-    public CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n-        if (result) {\n-            stats.incrementCacheHit();\n-        }\n-        else {\n-            stats.incrementCacheMiss();\n-        }\n \n         if (!result && ifExceedQuota(cacheQuota, request)) {\n+            stats.incrementQuotaExceed();\n             return CacheResult.CACHE_QUOTA_EXCEED;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1ODg2Mw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429758863", "bodyText": "Move it to CacheConfig", "author": "highker", "createdAt": "2020-05-25T06:48:56Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -167,6 +168,7 @@\n     private List<String> fileStatusCacheTables = ImmutableList.of();\n \n     private DataSize pageFileStripeMaxSize = new DataSize(24, MEGABYTE);\n+    private CacheQuotaScope cacheQuotaScope = GLOBAL;", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\nindex 4a2e199e19..f259a63230 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n\n@@ -168,7 +167,6 @@ public class HiveClientConfig\n     private List<String> fileStatusCacheTables = ImmutableList.of();\n \n     private DataSize pageFileStripeMaxSize = new DataSize(24, MEGABYTE);\n-    private CacheQuotaScope cacheQuotaScope = GLOBAL;\n \n     public int getMaxInitialSplits()\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1OTMwMw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429759303", "bodyText": "Remove this session property. Scope is from config directly.", "author": "highker", "createdAt": "2020-05-25T06:50:13Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -100,6 +100,7 @@\n     public static final String OFFLINE_DATA_DEBUG_MODE_ENABLED = \"offline_data_debug_mode_enabled\";\n     public static final String FAIL_FAST_ON_INSERT_INTO_IMMUTABLE_PARTITIONS_ENABLED = \"fail_fast_on_insert_into_immutable_partitions_enabled\";\n     public static final String USE_LIST_DIRECTORY_CACHE = \"use_list_directory_cache\";\n+    public static final String CACHE_QUOTA_SCOPE = \"cache_quota_scope\";", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\nindex c22746e90a..7584536c3d 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n\n@@ -100,7 +100,6 @@ public final class HiveSessionProperties\n     public static final String OFFLINE_DATA_DEBUG_MODE_ENABLED = \"offline_data_debug_mode_enabled\";\n     public static final String FAIL_FAST_ON_INSERT_INTO_IMMUTABLE_PARTITIONS_ENABLED = \"fail_fast_on_insert_into_immutable_partitions_enabled\";\n     public static final String USE_LIST_DIRECTORY_CACHE = \"use_list_directory_cache\";\n-    public static final String CACHE_QUOTA_SCOPE = \"cache_quota_scope\";\n \n     private final List<PropertyMetadata<?>> sessionProperties;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1OTk2MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429759961", "bodyText": "Create a default value in CacheConfig and get the value from there", "author": "highker", "createdAt": "2020-05-25T06:52:05Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +480,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                // todo: read from config\n+                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\nindex dd1f55dd2e..90ed9db6a7 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n\n@@ -481,12 +488,12 @@ class HiveSplitSource\n                 }\n \n                 CacheQuota cacheQuota;\n-                // todo: read from config\n-                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n-                Set<String> cacheQuotaWhiteList = ImmutableSet.of();\n-                switch(cacheQuotaScope) {\n+                switch (cacheQuotaScope) {\n                     case TABLE:\n-                        cacheQuota = new CacheQuota(TABLE, tableName, cacheQuotaWhiteList.contains(tableName) ? Optional.empty() : Optional.of(cacheQuotaSize));\n+                        cacheQuota = new CacheQuota(TABLE, tableName, defaultCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(PARTITION, internalSplit.getPartitionName(), defaultCacheQuota);\n                         break;\n                     default:\n                         // todo: add cache quota support for other scope\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTUwMQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429761501", "bodyText": "We don't have to have this logic in this PR. If we do wanna have it, make it map to denote what special scopes as what quota.", "author": "highker", "createdAt": "2020-05-25T06:56:17Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +480,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                // todo: read from config\n+                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n+                Set<String> cacheQuotaWhiteList = ImmutableSet.of();", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\nindex dd1f55dd2e..90ed9db6a7 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n\n@@ -481,12 +488,12 @@ class HiveSplitSource\n                 }\n \n                 CacheQuota cacheQuota;\n-                // todo: read from config\n-                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n-                Set<String> cacheQuotaWhiteList = ImmutableSet.of();\n-                switch(cacheQuotaScope) {\n+                switch (cacheQuotaScope) {\n                     case TABLE:\n-                        cacheQuota = new CacheQuota(TABLE, tableName, cacheQuotaWhiteList.contains(tableName) ? Optional.empty() : Optional.of(cacheQuotaSize));\n+                        cacheQuota = new CacheQuota(TABLE, tableName, defaultCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(PARTITION, internalSplit.getPartitionName(), defaultCacheQuota);\n                         break;\n                     default:\n                         // todo: add cache quota support for other scope\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTc1Nw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429761757", "bodyText": "We should have logic for other scopes", "author": "highker", "createdAt": "2020-05-25T06:57:04Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +480,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                // todo: read from config\n+                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n+                Set<String> cacheQuotaWhiteList = ImmutableSet.of();\n+                switch(cacheQuotaScope) {\n+                    case TABLE:", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MzU5Nw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430153597", "bodyText": "Currently we can add logic for PARTITION directly, but it requires additional changes to add support for SCHEMA / CATALOG\nI'm thinking having a minimal viable version and adding those support when needed", "author": "kewang1024", "createdAt": "2020-05-26T04:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDE5OA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430184198", "bodyText": "You don't need to do any refactoring to achieve this:\n\nGLOBAL: \".\"\nSCHEMA: databaseName\nTABLE: databaseName + \".\" + tableName \nPARTITION: databaseName + \".\" + tableName + \".\" + internalSplit.getPartitionName()\n\nIt is very important to keep in mind that without fully qualified names, subscopes can have duplication even they are not.", "author": "highker", "createdAt": "2020-05-26T06:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\nindex dd1f55dd2e..90ed9db6a7 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n\n@@ -481,12 +488,12 @@ class HiveSplitSource\n                 }\n \n                 CacheQuota cacheQuota;\n-                // todo: read from config\n-                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n-                Set<String> cacheQuotaWhiteList = ImmutableSet.of();\n-                switch(cacheQuotaScope) {\n+                switch (cacheQuotaScope) {\n                     case TABLE:\n-                        cacheQuota = new CacheQuota(TABLE, tableName, cacheQuotaWhiteList.contains(tableName) ? Optional.empty() : Optional.of(cacheQuotaSize));\n+                        cacheQuota = new CacheQuota(TABLE, tableName, defaultCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(PARTITION, internalSplit.getPartitionName(), defaultCacheQuota);\n                         break;\n                     default:\n                         // todo: add cache quota support for other scope\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2Mjk1OQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429762959", "bodyText": "CacheQuota<?> cacheQuota;", "author": "highker", "createdAt": "2020-05-25T07:00:29Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "diffHunk": "@@ -15,18 +15,21 @@\n \n import java.util.Optional;\n \n+import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, new CacheQuota(TABLE, \"test\", Optional.empty()), Optional.empty());\n \n     private final boolean cacheable;\n+    private final CacheQuota cacheQuota;", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\nindex 097494d2b9..9c4e936a6b 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java\n\n@@ -15,12 +15,12 @@ package com.facebook.presto.hive;\n \n import java.util.Optional;\n \n-import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n+import static com.facebook.presto.hive.CacheQuota.NO_CACHE_CONSTRAINTS;\n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, new CacheQuota(TABLE, \"test\", Optional.empty()), Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, NO_CACHE_CONSTRAINTS, Optional.empty());\n \n     private final boolean cacheable;\n     private final CacheQuota cacheQuota;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MzIyMA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429763220", "bodyText": "This class has to be serializable. I can't quite recall if generic T can be serialized. (Maybe it could; but I can't find a good example). If it's too complicated, just make identity of type String so we don't have to worry about it.", "author": "highker", "createdAt": "2020-05-25T07:01:08Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota<T>", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\nindex 4779c3301e..19f7aee42e 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n\n@@ -22,15 +22,15 @@ import static com.google.common.hash.Hashing.md5;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n \n-public class CacheQuota<T>\n+public class CacheQuota\n {\n     private CacheQuotaScope cacheQuotaScope;\n-    private final T identity;\n+    private final String identity;\n     private final Optional<DataSize> quota;\n \n-    public static final CacheQuota<String> NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n \n-    public CacheQuota(CacheQuotaScope cacheQuotaScope, T identity, Optional<DataSize> quota)\n+    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n     {\n         this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n         this.identity = requireNonNull(identity, \"identity is null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2NjAzNg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429766036", "bodyText": "Remove the first TODO in this class: TODO: Make cache eviction based on cache...", "author": "highker", "createdAt": "2020-05-25T07:08:39Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -13,11 +13,13 @@\n  */\n package com.facebook.presto.cache.filemerge;\n ", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex d1ec21ade0..6c79e215a8 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -17,6 +17,7 @@ import alluxio.collections.ConcurrentHashSet;\n import com.facebook.airlift.log.Logger;\n import com.facebook.presto.cache.CacheConfig;\n import com.facebook.presto.cache.CacheManager;\n+import com.facebook.presto.cache.CacheResult;\n import com.facebook.presto.cache.CacheStats;\n import com.facebook.presto.cache.FileReadRequest;\n import com.facebook.presto.hive.CacheQuota;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MDM1Mw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429770353", "bodyText": "We should use CacheQuota as well to match the one in get\nMove cacheQuota to the last param", "author": "highker", "createdAt": "2020-05-25T07:19:46Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "diffHunk": "@@ -22,13 +24,16 @@\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is not in cache, return false.\n-     * Otherwise, save the data in {@param buffer} starting at {@param offset} and return true.\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return IN_CACHE.\n+     * If it is not in cache:\n+     *      1. If there is still cache quota for this table, return NOT_IN_CACHE\n+     *      2. Otherwise, return CACHE_QUOTA_EXCEED\n+     * @return CacheResult\n      */\n-    boolean get(FileReadRequest request, byte[] buffer, int offset);\n+    CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset);\n \n     /**\n      * Save data in cache\n      */\n-    void put(FileReadRequest request, Slice data);\n+    void put(long cacheScopeIdentifier, FileReadRequest request, Slice data);", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\nindex f54b8bcfaf..096fbaab5f 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\n\n@@ -30,10 +30,10 @@ public interface CacheManager\n      *      2. Otherwise, return CACHE_QUOTA_EXCEED\n      * @return CacheResult\n      */\n-    CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset);\n+    CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota);\n \n     /**\n      * Save data in cache\n      */\n-    void put(long cacheScopeIdentifier, FileReadRequest request, Slice data);\n+    void put(FileReadRequest request, Slice data, CacheQuota cacheQuota);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MDU1Mw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429770553", "bodyText": "Move cacheQuota to the last param", "author": "highker", "createdAt": "2020-05-25T07:20:14Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "diffHunk": "@@ -22,13 +24,16 @@\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is not in cache, return false.\n-     * Otherwise, save the data in {@param buffer} starting at {@param offset} and return true.\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return IN_CACHE.\n+     * If it is not in cache:\n+     *      1. If there is still cache quota for this table, return NOT_IN_CACHE\n+     *      2. Otherwise, return CACHE_QUOTA_EXCEED\n+     * @return CacheResult\n      */\n-    boolean get(FileReadRequest request, byte[] buffer, int offset);\n+    CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset);", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\nindex f54b8bcfaf..096fbaab5f 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java\n\n@@ -30,10 +30,10 @@ public interface CacheManager\n      *      2. Otherwise, return CACHE_QUOTA_EXCEED\n      * @return CacheResult\n      */\n-    CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset);\n+    CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota);\n \n     /**\n      * Save data in cache\n      */\n-    void put(long cacheScopeIdentifier, FileReadRequest request, Slice data);\n+    void put(FileReadRequest request, Slice data, CacheQuota cacheQuota);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MTYzOQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429771639", "bodyText": "We should have stats for this state", "author": "highker", "createdAt": "2020-05-25T07:22:43Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex d1ec21ade0..8e4334b361 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -158,17 +167,12 @@ public class FileMergeCacheManager\n     }\n \n     @Override\n-    public CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n-        if (result) {\n-            stats.incrementCacheHit();\n-        }\n-        else {\n-            stats.incrementCacheMiss();\n-        }\n \n         if (!result && ifExceedQuota(cacheQuota, request)) {\n+            stats.incrementQuotaExceed();\n             return CacheResult.CACHE_QUOTA_EXCEED;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjMxOQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429772319", "bodyText": "typo Scopre", "author": "highker", "createdAt": "2020-05-25T07:24:08Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -85,7 +89,10 @@\n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping\n+    private final Map<Long, Set<Path>> cacheScopreFiles = new ConcurrentHashMap<>();", "originalCommit": "146e2a735dda64c3acb8259a56f94a8f2ec2687c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex d1ec21ade0..8e4334b361 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -79,12 +80,12 @@ public class FileMergeCacheManager\n     private static final String EXTENSION = \".cache\";\n \n     private static final int FILE_MERGE_BUFFER_SIZE = toIntExact(new DataSize(8, MEGABYTE).toBytes());\n-    private static final DataSize perTableCacheQuota = DataSize.succinctBytes(100);\n \n     private final ThreadLocal<byte[]> buffers = ThreadLocal.withInitial(() -> new byte[FILE_MERGE_BUFFER_SIZE]);\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n"}}, {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "url": "https://github.com/prestodb/presto/commit/e23bcf5a043e46f5a7002d8907917375f5c1750e", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-26T05:10:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430178891", "bodyText": "AlluxioCacheConfig.getMaxCacheSize() can be superseded by this call.", "author": "highker", "createdAt": "2020-05-26T06:19:53Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -76,4 +83,26 @@ public CacheType getCacheType()\n     {\n         return cacheType;\n     }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @Config(\"cache.cache-scope\")\n+    public void setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n+    {\n+        this.cacheQuotaScope = cacheQuotaScope;\n+    }\n+\n+    public Optional<DataSize> getDefaultCacheQuota()", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTk1Mg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430749952", "bodyText": "What does DefaultCacheQuota represents? Per table quota? If yes then CacheSize(which is worker level cache size for all tables) and this is different.", "author": "jainxrohit", "createdAt": "2020-05-26T22:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1NDcxMQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430754711", "bodyText": "AlluxioCacheConfig.getMaxCacheSize() is equivalent to getDefaultCacheQuota() with getCacheQuotaScope == GLOBAL", "author": "highker", "createdAt": "2020-05-26T23:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1ODg4OQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430758889", "bodyText": "Can we bring AlluxioCacheConfig.getMaxCacheSize to CacheConfig?  Its not used in the File_Merge but CacheConfig seems like a home for it.", "author": "jainxrohit", "createdAt": "2020-05-26T23:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NzUxMg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432787512", "bodyText": "It seems different to me, because DefaultCacheQuota can mean different thing depending on  CacheQuotaScope", "author": "kewang1024", "createdAt": "2020-05-30T00:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java b/presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java\nindex 731c69fbca..5835a43ab7 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java\n\n@@ -90,9 +90,10 @@ public class CacheConfig\n     }\n \n     @Config(\"cache.cache-scope\")\n-    public void setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n+    public CacheConfig setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n     {\n         this.cacheQuotaScope = cacheQuotaScope;\n+        return this;\n     }\n \n     public Optional<DataSize> getDefaultCacheQuota()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3OTQ5Mg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430179492", "bodyText": "remove this as well", "author": "highker", "createdAt": "2020-05-26T06:21:34Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -65,7 +70,6 @@\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n // 3 major TODOs for this class:", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 8e4334b361..6c79e215a8 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -69,7 +70,6 @@ import static java.util.Objects.requireNonNull;\n import static java.util.UUID.randomUUID;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n-// 3 major TODOs for this class:\n // TODO: Make cache state persistent on disk so we do not need to wipe out cache every time we reboot a server.\n @SuppressWarnings(\"UnstableApiUsage\")\n public class FileMergeCacheManager\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3OTY0OA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430179648", "bodyText": "cacheScopeSizeInBytes", "author": "highker", "createdAt": "2020-05-26T06:21:57Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +85,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping\n+    private final Map<Long, Set<Path>> cacheScopeFiles = new ConcurrentHashMap<>();\n+    private final Map<Long, Long> cacheScopeSize = new ConcurrentHashMap<>();", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 8e4334b361..6c79e215a8 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -94,7 +94,7 @@ public class FileMergeCacheManager\n     private final Cache<Path, Long> cache;\n     // CacheScopeHandle identifier to its cached files mapping\n     private final Map<Long, Set<Path>> cacheScopeFiles = new ConcurrentHashMap<>();\n-    private final Map<Long, Long> cacheScopeSize = new ConcurrentHashMap<>();\n+    private final Map<Long, Long> cacheScopeSizeInBytes = new ConcurrentHashMap<>();\n \n     // stats\n     private final CacheStats stats;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MDMyNA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430180324", "bodyText": "you don't need { }", "author": "highker", "createdAt": "2020-05-26T06:23:42Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -140,6 +151,11 @@ public FileMergeCacheManager(\n                 }\n             }));\n         }\n+\n+        this.cacheSizeCalculateExecutor.schedule(\n+                () -> { cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSize.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier))); },", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 8e4334b361..6c79e215a8 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -153,7 +153,7 @@ public class FileMergeCacheManager\n         }\n \n         this.cacheSizeCalculateExecutor.schedule(\n-                () -> { cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSize.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier))); },\n+                () -> cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier))),\n                 1,\n                 TimeUnit.SECONDS);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MTIxNw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430181217", "bodyText": "toString() is redundant", "author": "highker", "createdAt": "2020-05-26T06:25:57Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private CacheQuotaScope cacheQuotaScope;\n+    private final String identity;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+\n+    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n+    {\n+        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n+        this.identity = requireNonNull(identity, \"identity is null\");\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return md5().hashString(identity.toString(), UTF_8).asLong();", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\nindex 19f7aee42e..cdfe4a6f43 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n\n@@ -13,42 +13,66 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import io.airlift.units.DataSize;\n \n+import java.util.Objects;\n import java.util.Optional;\n \n-import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n import static com.google.common.hash.Hashing.md5;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n \n public class CacheQuota\n {\n-    private CacheQuotaScope cacheQuotaScope;\n-    private final String identity;\n+    private final long identifier;\n     private final Optional<DataSize> quota;\n \n-    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n \n-    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n     {\n-        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n-        this.identity = requireNonNull(identity, \"identity is null\");\n-        this.quota = requireNonNull(quota, \"quota is null\");\n+        this(md5().hashString(identity, UTF_8).asLong(), quota);\n     }\n \n-    public CacheQuotaScope getCacheQuotaScope()\n+    @JsonCreator\n+    public CacheQuota(\n+            @JsonProperty(\"identifier\") long identifier,\n+            @JsonProperty(\"quota\") Optional<DataSize> quota)\n     {\n-        return cacheQuotaScope;\n+        this.identifier = identifier;\n+        this.quota = requireNonNull(quota, \"quota is null\");\n     }\n \n+    @JsonProperty\n     public long getIdentifier()\n     {\n-        return md5().hashString(identity.toString(), UTF_8).asLong();\n+        return identifier;\n     }\n \n+    @JsonProperty\n     public Optional<DataSize> getQuota()\n     {\n         return quota;\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CacheQuota that = (CacheQuota) o;\n+        return identifier == that.identifier && Objects.equals(quota, that.quota);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(identifier, quota);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MjY2MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430182661", "bodyText": "Remove CATALOG given it's only for hive catalog", "author": "highker", "createdAt": "2020-05-26T06:29:40Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaScope.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+public enum CacheQuotaScope\n+{\n+    GLOBAL, CATALOG, SCHEMA, TABLE, PARTITION", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDc1NA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430590754", "bodyText": "I'm not particularly sure because it is possible to have multiple hive connectors under different connector names, and thus multiple catalogs.", "author": "shixuan-fan", "createdAt": "2020-05-26T17:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MjY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaScope.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaScope.java\nindex dcb6fd74c3..2c8dddd3b6 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaScope.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaScope.java\n\n@@ -15,5 +15,5 @@ package com.facebook.presto.hive;\n \n public enum CacheQuotaScope\n {\n-    GLOBAL, CATALOG, SCHEMA, TABLE, PARTITION\n+    GLOBAL, SCHEMA, TABLE, PARTITION\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDUzNw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430184537", "bodyText": "throw exception", "author": "highker", "createdAt": "2020-05-26T06:34:23Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +487,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                switch (cacheQuotaScope) {\n+                    case TABLE:\n+                        cacheQuota = new CacheQuota(TABLE, tableName, defaultCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(PARTITION, internalSplit.getPartitionName(), defaultCacheQuota);\n+                        break;\n+                    default:\n+                        // todo: add cache quota support for other scope\n+                        cacheQuota = NO_CACHE_CONSTRAINS;", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\nindex 90ed9db6a7..c4c868da71 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n\n@@ -489,21 +487,24 @@ class HiveSplitSource\n \n                 CacheQuota cacheQuota;\n                 switch (cacheQuotaScope) {\n+                    case GLOBAL:\n+                        cacheQuota = new CacheQuota(\".\", configuredCacheQuota);\n+                        break;\n+                    case SCHEMA:\n+                        cacheQuota = new CacheQuota(databaseName, configuredCacheQuota);\n+                        break;\n                     case TABLE:\n-                        cacheQuota = new CacheQuota(TABLE, tableName, defaultCacheQuota);\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName, configuredCacheQuota);\n                         break;\n                     case PARTITION:\n-                        cacheQuota = new CacheQuota(PARTITION, internalSplit.getPartitionName(), defaultCacheQuota);\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName + \".\" + internalSplit.getPartitionName(), configuredCacheQuota);\n                         break;\n                     default:\n-                        // todo: add cache quota support for other scope\n-                        cacheQuota = NO_CACHE_CONSTRAINS;\n-                        break;\n+                        throw new PrestoException(CACHE_SCOPE_NOT_SUPPORTED, format(\"%s is not supported\", cacheQuotaScope));\n                 }\n                 resultBuilder.add(new HiveSplit(\n                         databaseName,\n                         tableName,\n-                        cacheQuota,\n                         internalSplit.getPartitionName(),\n                         internalSplit.getPath(),\n                         internalSplit.getStart(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4Njg3OA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430586878", "bodyText": "nit: Did you mean to say \"write them to cache\"?", "author": "shixuan-fan", "createdAt": "2020-05-26T17:33:03Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.filemerge;\n+\n+public enum CacheResult\n+{\n+    /**\n+     * The data we're reading is in cache\n+     */\n+    IN_CACHE,\n+    /**\n+     * The data we're reading is not in cache and we have quota to read them to cache", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1OTM5NQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430759395", "bodyText": "I would prefer these to be standard names, HIT, MISS, etc.", "author": "jainxrohit", "createdAt": "2020-05-26T23:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4Njg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java b/presto-cache/src/main/java/com/facebook/presto/cache/CacheResult.java\nsimilarity index 86%\nrename from presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java\nrename to presto-cache/src/main/java/com/facebook/presto/cache/CacheResult.java\nindex 09cc9c33ea..2d43569ebd 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/CacheResult.java\n\n@@ -11,20 +11,20 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.cache.filemerge;\n+package com.facebook.presto.cache;\n \n public enum CacheResult\n {\n     /**\n      * The data we're reading is in cache\n      */\n-    IN_CACHE,\n+    HIT,\n     /**\n-     * The data we're reading is not in cache and we have quota to read them to cache\n+     * The data we're reading is not in cache and we have quota to write them to cache\n      */\n-    NOT_IN_CACHE,\n+    MISS,\n     /**\n-     * The data we're reading is not in cache and we don't have quota to read them to cache\n+     * The data we're reading is not in cache and we don't have quota to write them to cache\n      */\n     CACHE_QUOTA_EXCEED\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDA2Ng==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430590066", "bodyText": "nit: NO_CACHE_CONSTRAINTS?", "author": "shixuan-fan", "createdAt": "2020-05-26T17:38:34Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private CacheQuotaScope cacheQuotaScope;\n+    private final String identity;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\nindex 19f7aee42e..cdfe4a6f43 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n\n@@ -13,42 +13,66 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import io.airlift.units.DataSize;\n \n+import java.util.Objects;\n import java.util.Optional;\n \n-import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n import static com.google.common.hash.Hashing.md5;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n \n public class CacheQuota\n {\n-    private CacheQuotaScope cacheQuotaScope;\n-    private final String identity;\n+    private final long identifier;\n     private final Optional<DataSize> quota;\n \n-    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n \n-    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n     {\n-        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n-        this.identity = requireNonNull(identity, \"identity is null\");\n-        this.quota = requireNonNull(quota, \"quota is null\");\n+        this(md5().hashString(identity, UTF_8).asLong(), quota);\n     }\n \n-    public CacheQuotaScope getCacheQuotaScope()\n+    @JsonCreator\n+    public CacheQuota(\n+            @JsonProperty(\"identifier\") long identifier,\n+            @JsonProperty(\"quota\") Optional<DataSize> quota)\n     {\n-        return cacheQuotaScope;\n+        this.identifier = identifier;\n+        this.quota = requireNonNull(quota, \"quota is null\");\n     }\n \n+    @JsonProperty\n     public long getIdentifier()\n     {\n-        return md5().hashString(identity.toString(), UTF_8).asLong();\n+        return identifier;\n     }\n \n+    @JsonProperty\n     public Optional<DataSize> getQuota()\n     {\n         return quota;\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CacheQuota that = (CacheQuota) o;\n+        return identifier == that.identifier && Objects.equals(quota, that.quota);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(identifier, quota);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjI3MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430592271", "bodyText": "You probably need jackson annotation given this would be used in HiveSplit to pass from coordinator to worker.", "author": "shixuan-fan", "createdAt": "2020-05-26T17:42:20Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\nindex 19f7aee42e..cdfe4a6f43 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n\n@@ -13,42 +13,66 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import io.airlift.units.DataSize;\n \n+import java.util.Objects;\n import java.util.Optional;\n \n-import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n import static com.google.common.hash.Hashing.md5;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n \n public class CacheQuota\n {\n-    private CacheQuotaScope cacheQuotaScope;\n-    private final String identity;\n+    private final long identifier;\n     private final Optional<DataSize> quota;\n \n-    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n \n-    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n     {\n-        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n-        this.identity = requireNonNull(identity, \"identity is null\");\n-        this.quota = requireNonNull(quota, \"quota is null\");\n+        this(md5().hashString(identity, UTF_8).asLong(), quota);\n     }\n \n-    public CacheQuotaScope getCacheQuotaScope()\n+    @JsonCreator\n+    public CacheQuota(\n+            @JsonProperty(\"identifier\") long identifier,\n+            @JsonProperty(\"quota\") Optional<DataSize> quota)\n     {\n-        return cacheQuotaScope;\n+        this.identifier = identifier;\n+        this.quota = requireNonNull(quota, \"quota is null\");\n     }\n \n+    @JsonProperty\n     public long getIdentifier()\n     {\n-        return md5().hashString(identity.toString(), UTF_8).asLong();\n+        return identifier;\n     }\n \n+    @JsonProperty\n     public Optional<DataSize> getQuota()\n     {\n         return quota;\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CacheQuota that = (CacheQuota) o;\n+        return identifier == that.identifier && Objects.equals(quota, that.quota);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(identifier, quota);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzMzMwNQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r431333305", "bodyText": "Why it is called default? Isn't it the cacheQuota allocated for this config, it could be default or the one configured?", "author": "jainxrohit", "createdAt": "2020-05-27T17:52:44Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -15,15 +15,22 @@\n \n import com.facebook.airlift.configuration.Config;\n import com.facebook.airlift.configuration.ConfigDescription;\n+import com.facebook.presto.hive.CacheQuotaScope;\n+import io.airlift.units.DataSize;\n \n import java.net.URI;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n \n public class CacheConfig\n {\n     private boolean cachingEnabled;\n     private CacheType cacheType;\n     private URI baseDirectory;\n     private boolean validationEnabled;\n+    private CacheQuotaScope cacheQuotaScope = GLOBAL;\n+    private Optional<DataSize> defaultCacheQuota = Optional.empty();", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MjU4OQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432672589", "bodyText": "I just updated the project doc link and explained it there", "author": "kewang1024", "createdAt": "2020-05-29T18:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzMzMwNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NDI0Mw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r431344243", "bodyText": "Do we need this? I thought it was already injected via CachingModule?", "author": "jainxrohit", "createdAt": "2020-05-27T18:08:39Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java", "diffHunk": "@@ -97,6 +98,7 @@ public void configure(Binder binder)\n         binder.bind(HdfsConfigurationInitializer.class).in(Scopes.SINGLETON);\n         newSetBinder(binder, DynamicConfigurationProvider.class);\n         configBinder(binder).bindConfig(HiveClientConfig.class);\n+        configBinder(binder).bindConfig(CacheConfig.class);", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a757b55fb32a06ce674facb113857be6fbac2eab", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java\nindex 7abbb41e4e..6b252fc74f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java\n\n@@ -98,7 +99,6 @@ public class HiveClientModule\n         binder.bind(HdfsConfigurationInitializer.class).in(Scopes.SINGLETON);\n         newSetBinder(binder, DynamicConfigurationProvider.class);\n         configBinder(binder).bindConfig(HiveClientConfig.class);\n-        configBinder(binder).bindConfig(CacheConfig.class);\n \n         binder.bind(HiveSessionProperties.class).in(Scopes.SINGLETON);\n         binder.bind(HiveTableProperties.class).in(Scopes.SINGLETON);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0ODEwMA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r431348100", "bodyText": "I think we should just create hash at the initialization time.", "author": "jainxrohit", "createdAt": "2020-05-27T18:15:15Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private CacheQuotaScope cacheQuotaScope;\n+    private final String identity;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+\n+    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n+    {\n+        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n+        this.identity = requireNonNull(identity, \"identity is null\");\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return md5().hashString(identity.toString(), UTF_8).asLong();", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\nindex 19f7aee42e..cdfe4a6f43 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n\n@@ -13,42 +13,66 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import io.airlift.units.DataSize;\n \n+import java.util.Objects;\n import java.util.Optional;\n \n-import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n import static com.google.common.hash.Hashing.md5;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n \n public class CacheQuota\n {\n-    private CacheQuotaScope cacheQuotaScope;\n-    private final String identity;\n+    private final long identifier;\n     private final Optional<DataSize> quota;\n \n-    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n \n-    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n     {\n-        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n-        this.identity = requireNonNull(identity, \"identity is null\");\n-        this.quota = requireNonNull(quota, \"quota is null\");\n+        this(md5().hashString(identity, UTF_8).asLong(), quota);\n     }\n \n-    public CacheQuotaScope getCacheQuotaScope()\n+    @JsonCreator\n+    public CacheQuota(\n+            @JsonProperty(\"identifier\") long identifier,\n+            @JsonProperty(\"quota\") Optional<DataSize> quota)\n     {\n-        return cacheQuotaScope;\n+        this.identifier = identifier;\n+        this.quota = requireNonNull(quota, \"quota is null\");\n     }\n \n+    @JsonProperty\n     public long getIdentifier()\n     {\n-        return md5().hashString(identity.toString(), UTF_8).asLong();\n+        return identifier;\n     }\n \n+    @JsonProperty\n     public Optional<DataSize> getQuota()\n     {\n         return quota;\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CacheQuota that = (CacheQuota) o;\n+        return identifier == that.identifier && Objects.equals(quota, that.quota);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(identifier, quota);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MDEzMg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r431370132", "bodyText": "I think we discussed this. Didn't we think it would be better if we calculate these during put operation?", "author": "jainxrohit", "createdAt": "2020-05-27T18:54:54Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -151,27 +167,69 @@ public void destroy()\n     }\n \n     @Override\n-    public boolean get(FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n+\n+        if (!result && ifExceedQuota(cacheQuota, request)) {", "originalCommit": "e23bcf5a043e46f5a7002d8907917375f5c1750e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNjUxMA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432026510", "bodyText": "Yes, I thought we had an agreement back then? because in read method, we always hint the guava Cache, which is by the original design of our cache system.\nThat's why we have to check in the read operation if it exceeds quota to decide if we really want to hint the cache\nAnd if we have checked in the read, checking again in put would be excessive", "author": "kewang1024", "createdAt": "2020-05-28T18:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MDEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MDQ0OA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432060448", "bodyText": "Sounds good.", "author": "jainxrohit", "createdAt": "2020-05-28T19:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MDEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 8e4334b361..6c79e215a8 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -186,16 +186,16 @@ public class FileMergeCacheManager\n \n         if (result) {\n             stats.incrementCacheHit();\n-            return CacheResult.IN_CACHE;\n+            return CacheResult.HIT;\n         }\n \n         stats.incrementCacheMiss();\n-        return CacheResult.NOT_IN_CACHE;\n+        return CacheResult.MISS;\n     }\n \n     private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n     {\n-        DataSize cacheSize = DataSize.succinctBytes(cacheScopeSize.getOrDefault(cacheQuota.getIdentifier(), 0L) + request.getLength());\n+        DataSize cacheSize = DataSize.succinctBytes(cacheScopeSizeInBytes.getOrDefault(cacheQuota.getIdentifier(), 0L) + request.getLength());\n         Optional<DataSize> quota = cacheQuota.getQuota();\n         return quota.isPresent() && (cacheSize.compareTo(quota.get()) > 0);\n     }\n"}}, {"oid": "72418eb5ea5c4652582edceb91ffc3c2f04117d7", "url": "https://github.com/prestodb/presto/commit/72418eb5ea5c4652582edceb91ffc3c2f04117d7", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-29T18:44:29Z", "type": "forcePushed"}, {"oid": "a757b55fb32a06ce674facb113857be6fbac2eab", "url": "https://github.com/prestodb/presto/commit/a757b55fb32a06ce674facb113857be6fbac2eab", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-29T23:54:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjM4OQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432792389", "bodyText": "remove this class; check my comment below", "author": "highker", "createdAt": "2020-05-30T00:38:36Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheErrorCode.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache;\n+\n+import com.facebook.presto.spi.ErrorCode;\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.spi.ErrorType;\n+\n+import static com.facebook.presto.spi.ErrorType.INTERNAL_ERROR;\n+\n+public enum CacheErrorCode", "originalCommit": "a757b55fb32a06ce674facb113857be6fbac2eab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a972e429bd017a9c29dfd5601cfbd1e8baa61b8c", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/CacheErrorCode.java b/presto-cache/src/main/java/com/facebook/presto/cache/CacheErrorCode.java\nindex ddee1fdee9..c045c89c32 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/CacheErrorCode.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/CacheErrorCode.java\n\n@@ -17,12 +17,13 @@ import com.facebook.presto.spi.ErrorCode;\n import com.facebook.presto.spi.ErrorCodeSupplier;\n import com.facebook.presto.spi.ErrorType;\n \n+import static com.facebook.presto.spi.ErrorType.EXTERNAL;\n import static com.facebook.presto.spi.ErrorType.INTERNAL_ERROR;\n \n public enum CacheErrorCode\n         implements ErrorCodeSupplier\n {\n-    CACHE_SCOPE_NOT_SUPPORTED(0, INTERNAL_ERROR);\n+    CACHE_SCOPE_NOT_SUPPORTED(0, EXTERNAL);\n \n     private final ErrorCode errorCode;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjQ4Ng==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432792486", "bodyText": "Use HIVE_UNKNOWN_ERROR", "author": "highker", "createdAt": "2020-05-30T00:39:31Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,6 +485,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                switch (cacheQuotaScope) {\n+                    case GLOBAL:\n+                        cacheQuota = new CacheQuota(\".\", configuredCacheQuota);\n+                        break;\n+                    case SCHEMA:\n+                        cacheQuota = new CacheQuota(databaseName, configuredCacheQuota);\n+                        break;\n+                    case TABLE:\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName, configuredCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName + \".\" + internalSplit.getPartitionName(), configuredCacheQuota);\n+                        break;\n+                    default:\n+                        throw new PrestoException(CACHE_SCOPE_NOT_SUPPORTED, format(\"%s is not supported\", cacheQuotaScope));", "originalCommit": "a757b55fb32a06ce674facb113857be6fbac2eab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4MTUzMw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432881533", "bodyText": "I think it's more related to cache config not being supported, HIVE_UNKNOWN_ERROR   seems to be used more often for hive data related issues.\nAlso our next step might be breaking presto-cache and presto-hive, we need to add CACHE_SCOPE_NOT_SUPPORTED  back once that happens\nThus I think we can keep CACHE_SCOPE_NOT_SUPPORTED  but make it EXTERNAL like HIVE_UNKNOWN_ERROR", "author": "kewang1024", "createdAt": "2020-05-30T19:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzMyNA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433077324", "bodyText": "We shouldn't create error codes for utilities. Error codes are meant for main engine or connectors. Check https://github.com/prestodb/presto/wiki/Error-Codes to see how we allocate error code space. If you really need to add a new error code, it should belong to HiveErrorCode", "author": "highker", "createdAt": "2020-06-01T07:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f1726b4d6a4b8e9b1f9ddbb9fd534a1bebf7f492", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\nindex c4c868da71..554ea95618 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java\n\n@@ -485,23 +484,6 @@ class HiveSplitSource\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n-                CacheQuota cacheQuota;\n-                switch (cacheQuotaScope) {\n-                    case GLOBAL:\n-                        cacheQuota = new CacheQuota(\".\", configuredCacheQuota);\n-                        break;\n-                    case SCHEMA:\n-                        cacheQuota = new CacheQuota(databaseName, configuredCacheQuota);\n-                        break;\n-                    case TABLE:\n-                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName, configuredCacheQuota);\n-                        break;\n-                    case PARTITION:\n-                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName + \".\" + internalSplit.getPartitionName(), configuredCacheQuota);\n-                        break;\n-                    default:\n-                        throw new PrestoException(CACHE_SCOPE_NOT_SUPPORTED, format(\"%s is not supported\", cacheQuotaScope));\n-                }\n                 resultBuilder.add(new HiveSplit(\n                         databaseName,\n                         tableName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NDA2OQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432794069", "bodyText": "This will be called on the coordinator. One concern is the complexity of md5(). I'm not sure if md5() is more expensive or shipping the identity is..... To be save, I would just move this part of logic to getIdentifier() call.", "author": "highker", "createdAt": "2020-05-30T00:52:17Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this(md5().hashString(identity, UTF_8).asLong(), quota);", "originalCommit": "a757b55fb32a06ce674facb113857be6fbac2eab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4Nzc2NQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432887765", "bodyText": "Valid point.\nSince HiveSplit already has all the identity information we need, instead of passing Identity(could be expensive) we just pass the Scope info to worker and let worker reuse identity from HiveSplit and calculate the identifier there", "author": "kewang1024", "createdAt": "2020-05-30T21:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NDA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1726b4d6a4b8e9b1f9ddbb9fd534a1bebf7f492", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\nindex cdfe4a6f43..8b0f4b1531 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java\n\n@@ -13,8 +13,6 @@\n  */\n package com.facebook.presto.hive;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n import io.airlift.units.DataSize;\n \n import java.util.Objects;\n"}}, {"oid": "c5f7627423bf250c7f6905846160e3f085b07a1f", "url": "https://github.com/prestodb/presto/commit/c5f7627423bf250c7f6905846160e3f085b07a1f", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-30T19:29:52Z", "type": "forcePushed"}, {"oid": "a972e429bd017a9c29dfd5601cfbd1e8baa61b8c", "url": "https://github.com/prestodb/presto/commit/a972e429bd017a9c29dfd5601cfbd1e8baa61b8c", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-30T19:31:48Z", "type": "forcePushed"}, {"oid": "f1726b4d6a4b8e9b1f9ddbb9fd534a1bebf7f492", "url": "https://github.com/prestodb/presto/commit/f1726b4d6a4b8e9b1f9ddbb9fd534a1bebf7f492", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-30T20:47:51Z", "type": "forcePushed"}, {"oid": "cd2762fca1b9e282f2bfae9fd975536036b9607d", "url": "https://github.com/prestodb/presto/commit/cd2762fca1b9e282f2bfae9fd975536036b9607d", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-30T21:05:58Z", "type": "forcePushed"}, {"oid": "802c11e4bbcc8c95862a62139a88dd132477e8ad", "url": "https://github.com/prestodb/presto/commit/802c11e4bbcc8c95862a62139a88dd132477e8ad", "message": "Add cache quota support for hive connector", "committedDate": "2020-05-30T21:09:22Z", "type": "forcePushed"}, {"oid": "cf2b58acdca0aa35685fe43f850f8673bc750cc6", "url": "https://github.com/prestodb/presto/commit/cf2b58acdca0aa35685fe43f850f8673bc750cc6", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T05:46:02Z", "type": "forcePushed"}, {"oid": "6f2ee432a87cde8aa8bfe089545a24e2b6c929c9", "url": "https://github.com/prestodb/presto/commit/6f2ee432a87cde8aa8bfe089545a24e2b6c929c9", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T05:53:49Z", "type": "forcePushed"}, {"oid": "8da29640dd0ca7fa926b43a7177707901fadad15", "url": "https://github.com/prestodb/presto/commit/8da29640dd0ca7fa926b43a7177707901fadad15", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T05:55:55Z", "type": "forcePushed"}, {"oid": "4350187428a9e110c0af526834e54ad492d17232", "url": "https://github.com/prestodb/presto/commit/4350187428a9e110c0af526834e54ad492d17232", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T17:31:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3Nzg3MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433377871", "bodyText": "nit: cache.cache-quota-scope?", "author": "shixuan-fan", "createdAt": "2020-06-01T17:24:54Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -76,4 +83,30 @@ public CacheType getCacheType()\n     {\n         return cacheType;\n     }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @Config(\"cache.cache-scope\")", "originalCommit": "8da29640dd0ca7fa926b43a7177707901fadad15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "517770a523dd33d40cc1c508919fc59975c037da", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java b/presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java\nindex 5cb32fd049..fd3604bf5f 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java\n\n@@ -89,7 +89,7 @@ public class CacheConfig\n         return cacheQuotaScope;\n     }\n \n-    @Config(\"cache.cache-scope\")\n+    @Config(\"cache.cache-quota-scope\")\n     public CacheConfig setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n     {\n         this.cacheQuotaScope = cacheQuotaScope;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MTI3MA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433381270", "bodyText": "nit: How about return cacheQuota.getQuota().map(quota -> cacheSize.compareTo(quota) > 0).orElse(false)?", "author": "shixuan-fan", "createdAt": "2020-06-01T17:31:13Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -151,27 +167,69 @@ public void destroy()\n     }\n \n     @Override\n-    public boolean get(FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n+\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            stats.incrementQuotaExceed();\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n         if (result) {\n             stats.incrementCacheHit();\n+            return CacheResult.HIT;\n         }\n-        else {\n-            stats.incrementCacheMiss();\n-        }\n \n-        return result;\n+        stats.incrementCacheMiss();\n+        return CacheResult.MISS;\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n+    {\n+        DataSize cacheSize = DataSize.succinctBytes(cacheScopeSizeInBytes.getOrDefault(cacheQuota.getIdentifier(), 0L) + request.getLength());\n+        Optional<DataSize> quota = cacheQuota.getQuota();\n+        return quota.isPresent() && (cacheSize.compareTo(quota.get()) > 0);", "originalCommit": "8da29640dd0ca7fa926b43a7177707901fadad15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "517770a523dd33d40cc1c508919fc59975c037da", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 6c79e215a8..4b6f6f7586 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -196,8 +196,7 @@ public class FileMergeCacheManager\n     private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n     {\n         DataSize cacheSize = DataSize.succinctBytes(cacheScopeSizeInBytes.getOrDefault(cacheQuota.getIdentifier(), 0L) + request.getLength());\n-        Optional<DataSize> quota = cacheQuota.getQuota();\n-        return quota.isPresent() && (cacheSize.compareTo(quota.get()) > 0);\n+        return cacheQuota.getQuota().map(quota -> cacheSize.compareTo(quota) > 0).orElse(false);\n     }\n \n     private long getCacheScopeSizeInBytes(long cacheScopeIdentifier)\n"}}, {"oid": "a00dfdc52eba849039f3604c1c81a28c936e79eb", "url": "https://github.com/prestodb/presto/commit/a00dfdc52eba849039f3604c1c81a28c936e79eb", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T18:15:10Z", "type": "forcePushed"}, {"oid": "517770a523dd33d40cc1c508919fc59975c037da", "url": "https://github.com/prestodb/presto/commit/517770a523dd33d40cc1c508919fc59975c037da", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T18:21:29Z", "type": "forcePushed"}, {"oid": "7c139b58eb917dd5ab0e774af4027abc9bf890c8", "url": "https://github.com/prestodb/presto/commit/7c139b58eb917dd5ab0e774af4027abc9bf890c8", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T18:52:26Z", "type": "forcePushed"}, {"oid": "5289c1829b91b66628756112633f30d0cb738897", "url": "https://github.com/prestodb/presto/commit/5289c1829b91b66628756112633f30d0cb738897", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T19:28:39Z", "type": "forcePushed"}, {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55", "url": "https://github.com/prestodb/presto/commit/0881b9d4454ed07368b8cfa0961fd0a5c2791c55", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-01T22:28:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNzA4NQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433527085", "bodyText": "Nice, we changed it from schedule!\nIn general, do we know how many files exist in the cache directory? It would be worthwhile to know the impact of building this in every few seconds. I would have preferred to do this asynchronously whenever we write any files to cache.", "author": "jainxrohit", "createdAt": "2020-06-01T22:40:41Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -140,6 +150,15 @@ public FileMergeCacheManager(\n                 }\n             }));\n         }\n+\n+        this.cacheSizeCalculateExecutor.scheduleAtFixedRate(", "originalCommit": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDQ1NQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433640455", "bodyText": "Actually we don't and also it should vary from different use case. I can try to see if we can add any indicator for us to tell the impact", "author": "kewang1024", "createdAt": "2020-06-02T06:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNzA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1c63fae405ccffe210e484e165fcd057f998bd05", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 472e6da3a5..5c2e56f006 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -166,6 +166,7 @@ public class FileMergeCacheManager\n     {\n         cacheFlushExecutor.shutdownNow();\n         cacheRemovalExecutor.shutdownNow();\n+        cacheSizeCalculateExecutor.shutdownNow();\n         buffers.remove();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3NDc2Mg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433574762", "bodyText": "what is CacheScopeHandle? is this a typo?", "author": "apc999", "createdAt": "2020-06-02T01:37:14Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +84,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping", "originalCommit": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzOTYxNg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433639616", "bodyText": "It actually means the handle that's extract from CacheScope, but seems a bit confusing then, I can change it", "author": "kewang1024", "createdAt": "2020-06-02T06:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3NDc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 472e6da3a5..9582117272 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -91,7 +91,7 @@ public class FileMergeCacheManager\n     // a local cache only to control the lifecycle of persisted\n     // Path and its corresponding cacheScope identifier\n     private final Cache<Path, Long> cache;\n-    // CacheScopeHandle identifier to its cached files mapping\n+    // CacheScope identifier to its cached files mapping\n     private final Map<Long, Set<Path>> cacheScopeFiles = new ConcurrentHashMap<>();\n     private final Map<Long, Long> cacheScopeSizeInBytes = new ConcurrentHashMap<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3NzYyMA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433577620", "bodyText": "is this intentional to hard-code the cache recalculation rate?", "author": "apc999", "createdAt": "2020-06-02T01:48:26Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -140,6 +150,15 @@ public FileMergeCacheManager(\n                 }\n             }));\n         }\n+\n+        this.cacheSizeCalculateExecutor.scheduleAtFixedRate(\n+                () -> {\n+                    cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n+                    cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                },\n+                0,\n+                15,", "originalCommit": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMzU1MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433623551", "bodyText": "It is not. Because this is more of an experimental feature to foresee all the work we would need from alluxio and also finalize on the communication protocol and configs from our side", "author": "kewang1024", "createdAt": "2020-06-02T05:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3NzYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "1c63fae405ccffe210e484e165fcd057f998bd05", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 472e6da3a5..5c2e56f006 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -166,6 +166,7 @@ public class FileMergeCacheManager\n     {\n         cacheFlushExecutor.shutdownNow();\n         cacheRemovalExecutor.shutdownNow();\n+        cacheSizeCalculateExecutor.shutdownNow();\n         buffers.remove();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3OTE1MA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433579150", "bodyText": "Though cacheScopeFiles and cacheScopeSizeInBytes are threadsafe, the operations on these two data structures are not really atomic to each other.  E.g., the recalculation executor can run concurrently with ifExceedQuota, and leave operations on cacheScopeFiles and cacheScopeSizeInBytes interleaved in multiple threads.\nI don't see an immediate thread-safety risk on this in addition to some calculation that might be a bit \"off\".\nJust make sure we are aware of it --- the cache capacity & quota calculation may not be fully accurate", "author": "apc999", "createdAt": "2020-06-02T01:54:40Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +84,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping\n+    private final Map<Long, Set<Path>> cacheScopeFiles = new ConcurrentHashMap<>();", "originalCommit": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMDYyNA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433630624", "bodyText": "You're right, here, the cache capacity & quota calculation would be an estimation, like I said it would an experimental feature, it would be served more as an evaluation and provide basic protection from bad table data abusing the system", "author": "kewang1024", "createdAt": "2020-06-02T05:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3OTE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 472e6da3a5..9582117272 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -91,7 +91,7 @@ public class FileMergeCacheManager\n     // a local cache only to control the lifecycle of persisted\n     // Path and its corresponding cacheScope identifier\n     private final Cache<Path, Long> cache;\n-    // CacheScopeHandle identifier to its cached files mapping\n+    // CacheScope identifier to its cached files mapping\n     private final Map<Long, Set<Path>> cacheScopeFiles = new ConcurrentHashMap<>();\n     private final Map<Long, Long> cacheScopeSizeInBytes = new ConcurrentHashMap<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3OTQzMA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433579430", "bodyText": "is this change independent?", "author": "apc999", "createdAt": "2020-06-02T01:55:41Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -192,14 +252,6 @@ private boolean read(FileReadRequest request, byte[] buffer, int offset)\n             return true;\n         }\n \n-        try {", "originalCommit": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDAxOQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433640019", "bodyText": "it's related to our change; because we don't want to hint the cache if we already reached our limitation", "author": "kewang1024", "createdAt": "2020-06-02T06:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3OTQzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwMTkyMg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433601922", "bodyText": "do you document anywhere what it means by returning Optiona.empty()? assuming it means no limitation?", "author": "apc999", "createdAt": "2020-06-02T03:35:38Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this.identifier = md5().hashString(identity, UTF_8).asLong();\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return identifier;\n+    }\n+\n+    public Optional<DataSize> getQuota()", "originalCommit": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMjMwOQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433622309", "bodyText": "I plan to add those things to the requirement doc later on, yes, it means no limitation", "author": "kewang1024", "createdAt": "2020-06-02T05:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwMTkyMg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "url": "https://github.com/prestodb/presto/commit/25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-02T06:15:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1OTk0MA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434159940", "bodyText": "This class needs to be JSON serializable.", "author": "highker", "createdAt": "2020-06-02T20:35:26Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota", "originalCommit": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNTgxMw==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434215813", "bodyText": "So I have changed the design to address the issue of calculating identifier in coodirnator. Basically what we're serializing now is CacheQuotaRequirement", "author": "kewang1024", "createdAt": "2020-06-02T22:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1OTk0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDM2NQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434160365", "bodyText": "I thought we gonna move this to getIdentifier() method?", "author": "highker", "createdAt": "2020-06-02T20:36:16Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this.identifier = md5().hashString(identity, UTF_8).asLong();", "originalCommit": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNjEzNA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434216134", "bodyText": "I thought we gonna move this to getIdentifier() method?\n\nI have changed the design, so now this happens on workers now", "author": "kewang1024", "createdAt": "2020-06-02T22:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDM2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDUwNQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434160505", "bodyText": "Just store raw String identity", "author": "highker", "createdAt": "2020-06-02T20:36:34Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;", "originalCommit": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzE0Mg==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434217142", "bodyText": "Just store raw String identity\n\nI already changed the design", "author": "kewang1024", "createdAt": "2020-06-02T22:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDUwNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDY3MA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434160670", "bodyText": "Use Objects.equals", "author": "highker", "createdAt": "2020-06-02T20:36:53Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this.identifier = md5().hashString(identity, UTF_8).asLong();\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return identifier;\n+    }\n+\n+    public Optional<DataSize> getQuota()\n+    {\n+        return quota;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CacheQuota that = (CacheQuota) o;\n+        return identifier == that.identifier && Objects.equals(quota, that.quota);", "originalCommit": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MTM5NA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434161394", "bodyText": "Need to destroy this after shutdown.", "author": "highker", "createdAt": "2020-06-02T20:38:15Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +84,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;", "originalCommit": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MjM0MA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434162340", "bodyText": "bytes", "author": "highker", "createdAt": "2020-06-02T20:40:06Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -151,27 +170,68 @@ public void destroy()\n     }\n \n     @Override\n-    public boolean get(FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n+\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            stats.incrementQuotaExceed();\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n         if (result) {\n             stats.incrementCacheHit();\n+            return CacheResult.HIT;\n         }\n-        else {\n-            stats.incrementCacheMiss();\n-        }\n \n-        return result;\n+        stats.incrementCacheMiss();\n+        return CacheResult.MISS;\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n+    {\n+        DataSize cacheSize = DataSize.succinctBytes(cacheScopeSizeInBytes.getOrDefault(cacheQuota.getIdentifier(), 0L) + request.getLength());\n+        return cacheQuota.getQuota().map(quota -> cacheSize.compareTo(quota) > 0).orElse(false);\n+    }\n+\n+    private long getCacheScopeSizeInBytes(long cacheScopeIdentifier)\n+    {\n+        long sum = 0;", "originalCommit": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c63fae405ccffe210e484e165fcd057f998bd05", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 9582117272..5c2e56f006 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -166,6 +166,7 @@ public class FileMergeCacheManager\n     {\n         cacheFlushExecutor.shutdownNow();\n         cacheRemovalExecutor.shutdownNow();\n+        cacheSizeCalculateExecutor.shutdownNow();\n         buffers.remove();\n     }\n \n"}}, {"oid": "4719d46ec21fc0e341fb4c7400951faf3e0034da", "url": "https://github.com/prestodb/presto/commit/4719d46ec21fc0e341fb4c7400951faf3e0034da", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-02T22:44:34Z", "type": "forcePushed"}, {"oid": "1c63fae405ccffe210e484e165fcd057f998bd05", "url": "https://github.com/prestodb/presto/commit/1c63fae405ccffe210e484e165fcd057f998bd05", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-02T22:49:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NzI0MA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434257240", "bodyText": "use isEmpty()", "author": "highker", "createdAt": "2020-06-03T01:15:46Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -472,13 +525,18 @@ public ReadWriteLock getLock()\n     }\n \n     private class CacheRemovalListener\n-            implements RemovalListener<Path, Boolean>\n+            implements RemovalListener<Path, Long>\n     {\n         @Override\n-        public void onRemoval(RemovalNotification<Path, Boolean> notification)\n+        public void onRemoval(RemovalNotification<Path, Long> notification)\n         {\n             Path path = notification.getKey();\n             CacheRange cacheRange = persistedRanges.remove(path);\n+            cacheScopeFiles.get(notification.getValue()).remove(path);\n+            if (cacheScopeFiles.get(notification.getValue()).size() == 0) {", "originalCommit": "1c63fae405ccffe210e484e165fcd057f998bd05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e3067a60124e480e580580973ddb5b5b2749204", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\nindex 5c2e56f006..62d8624fbf 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java\n\n@@ -533,7 +533,7 @@ public class FileMergeCacheManager\n             Path path = notification.getKey();\n             CacheRange cacheRange = persistedRanges.remove(path);\n             cacheScopeFiles.get(notification.getValue()).remove(path);\n-            if (cacheScopeFiles.get(notification.getValue()).size() == 0) {\n+            if (cacheScopeFiles.get(notification.getValue()).isEmpty()) {\n                 cacheScopeFiles.remove(notification.getValue());\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1ODM4MQ==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434258381", "bodyText": "Use toStringHelper", "author": "highker", "createdAt": "2020-06-03T01:20:50Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuotaRequirement\n+{\n+    public static final CacheQuotaRequirement NO_CACHE_REQUIREMENT = new CacheQuotaRequirement(GLOBAL, Optional.empty());\n+\n+    private final CacheQuotaScope cacheQuotaScope;\n+    private final Optional<DataSize> quota;\n+\n+    @JsonCreator\n+    public CacheQuotaRequirement(\n+            @JsonProperty(\"cacheQuotaScope\") CacheQuotaScope cacheQuotaScope,\n+            @JsonProperty(\"quota\") Optional<DataSize> quota)\n+    {\n+        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheQuotaScope\");\n+        this.quota = quota;\n+    }\n+\n+    @JsonProperty\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @JsonProperty\n+    public Optional<DataSize> getQuota()\n+    {\n+        return quota;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        CacheQuotaRequirement that = (CacheQuotaRequirement) o;\n+        return cacheQuotaScope == that.cacheQuotaScope && Objects.equals(quota, that.quota);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(cacheQuotaScope, quota);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return \"CacheQuotaRequirement{\" +", "originalCommit": "1c63fae405ccffe210e484e165fcd057f998bd05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e3067a60124e480e580580973ddb5b5b2749204", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java\nindex a2b822cc5e..fcc2404926 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java\n\n@@ -21,6 +21,7 @@ import java.util.Objects;\n import java.util.Optional;\n \n import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n public class CacheQuotaRequirement\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1ODUwOA==", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434258508", "bodyText": "Use Objects.equals for cacheQuotaScope", "author": "highker", "createdAt": "2020-06-03T01:21:23Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuotaRequirement\n+{\n+    public static final CacheQuotaRequirement NO_CACHE_REQUIREMENT = new CacheQuotaRequirement(GLOBAL, Optional.empty());\n+\n+    private final CacheQuotaScope cacheQuotaScope;\n+    private final Optional<DataSize> quota;\n+\n+    @JsonCreator\n+    public CacheQuotaRequirement(\n+            @JsonProperty(\"cacheQuotaScope\") CacheQuotaScope cacheQuotaScope,\n+            @JsonProperty(\"quota\") Optional<DataSize> quota)\n+    {\n+        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheQuotaScope\");\n+        this.quota = quota;\n+    }\n+\n+    @JsonProperty\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @JsonProperty\n+    public Optional<DataSize> getQuota()\n+    {\n+        return quota;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        CacheQuotaRequirement that = (CacheQuotaRequirement) o;\n+        return cacheQuotaScope == that.cacheQuotaScope && Objects.equals(quota, that.quota);", "originalCommit": "1c63fae405ccffe210e484e165fcd057f998bd05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e3067a60124e480e580580973ddb5b5b2749204", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java\nindex a2b822cc5e..fcc2404926 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java\n\n@@ -21,6 +21,7 @@ import java.util.Objects;\n import java.util.Optional;\n \n import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n public class CacheQuotaRequirement\n"}}, {"oid": "9e3067a60124e480e580580973ddb5b5b2749204", "url": "https://github.com/prestodb/presto/commit/9e3067a60124e480e580580973ddb5b5b2749204", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-03T05:12:00Z", "type": "forcePushed"}, {"oid": "6dd033b02debdda44ad501a56e8a52606b5292a8", "url": "https://github.com/prestodb/presto/commit/6dd033b02debdda44ad501a56e8a52606b5292a8", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-03T18:16:01Z", "type": "commit"}, {"oid": "6dd033b02debdda44ad501a56e8a52606b5292a8", "url": "https://github.com/prestodb/presto/commit/6dd033b02debdda44ad501a56e8a52606b5292a8", "message": "Add cache quota support for hive connector", "committedDate": "2020-06-03T18:16:01Z", "type": "forcePushed"}]}