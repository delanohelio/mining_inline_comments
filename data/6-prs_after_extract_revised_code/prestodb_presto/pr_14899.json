{"pr_number": 14899, "pr_title": "Add geometry_to_dissolved_bing_tiles and improve geometry_to_bing_tiles", "pr_createdAt": "2020-07-27T13:41:46Z", "pr_url": "https://github.com/prestodb/presto/pull/14899", "timeline": [{"oid": "24715fad67a4493fb8176a78d8e4e7bc82656d77", "url": "https://github.com/prestodb/presto/commit/24715fad67a4493fb8176a78d8e4e7bc82656d77", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op", "committedDate": "2020-07-28T13:45:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NjE3MA==", "url": "https://github.com/prestodb/presto/pull/14899#discussion_r461656170", "bodyText": "nit: What do you think about ImmutableListBuilder + counter?", "author": "arhimondr", "createdAt": "2020-07-28T15:06:06Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java", "diffHunk": "@@ -168,4 +186,163 @@ private static int axisToCoordinates(double axis, long mapSize)\n         int tileAxis = (int) clip(axis * mapSize, 0, mapSize - 1);\n         return tileAxis / TILE_PIXELS;\n     }\n+\n+    private static List<BingTile> findRawTileCovering(OGCGeometry ogcGeometry, int maxZoom)\n+    {\n+        Envelope envelope = getEnvelope(ogcGeometry);\n+        Optional<List<BingTile>> trivialResult = handleTrivialCases(envelope, maxZoom);\n+        if (trivialResult.isPresent()) {\n+            return trivialResult.get();\n+        }\n+\n+        accelerateGeometry(\n+                ogcGeometry, OperatorIntersects.local(), Geometry.GeometryAccelerationDegree.enumMedium);\n+\n+        Deque<TilingEntry> stack = new ArrayDeque<>();\n+        Consumer<BingTile> addIntersecting = tile -> {\n+            TilingEntry tilingEntry = new TilingEntry(tile);\n+            if (satisfiesTileEdgeCondition(envelope, tilingEntry)\n+                    && ogcGeometry.intersects(tilingEntry.polygon)) {\n+                stack.push(tilingEntry);\n+            }\n+        };\n+\n+        // Populate with initial tiles.  Since there aren't many low zoom tiles,\n+        // and throwing away totally disjoint ones is cheap (envelope check),\n+        // we might as well start comprehensively.\n+        ImmutableList.of(\n+                BingTile.fromCoordinates(0, 0, 1),\n+                BingTile.fromCoordinates(0, 1, 1),\n+                BingTile.fromCoordinates(1, 0, 1),\n+                BingTile.fromCoordinates(1, 1, 1)\n+        ).forEach(addIntersecting);\n+\n+        List<BingTile> outputTiles = new ArrayList<>();", "originalCommit": "e9c1114baa65e83fe9816b848d1bba7dfb71f964", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMjI2MA==", "url": "https://github.com/prestodb/presto/pull/14899#discussion_r461922260", "bodyText": "I'd be all for it if the builder kept the counter.  As it is, it involves a separate variable that has to be kept in sync, which can lead to errors.\nIs the advantage that callers of this function won't be able to mutate the List?  (I think I've been corrupted by Rust; now I consider this function to relinquish ownership to the caller, so the caller gets to do what it likes :) ).", "author": "jagill", "createdAt": "2020-07-28T22:14:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NjE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "106db28c8cd5eb74852eb0668bdc25004d654b7e", "chunk": "diff --git a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java\nindex 9f2aee1de5..f151b7840b 100644\n--- a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java\n+++ b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java\n\n@@ -332,6 +332,58 @@ public class BingTileUtils\n         return results;\n     }\n \n+    /**\n+     * Find a minimal set of BingTiles (at zoom), covering the geometry.\n+     */\n+    public static List<BingTile> findMinimalTileCovering(OGCGeometry ogcGeometry, int zoom)\n+    {\n+        List<BingTile> outputTiles = new ArrayList<>();\n+        Deque<BingTile> stack = new ArrayDeque<>(findRawTileCovering(ogcGeometry, zoom));\n+        while (!stack.isEmpty()) {\n+            BingTile thisTile = stack.pop();\n+            outputTiles.addAll(thisTile.findChildren(zoom));\n+            checkCondition(\n+                    outputTiles.size() + stack.size() <= MAX_COVERING_COUNT,\n+                    \"The zoom level is too high or the geometry is too large to compute a set \" +\n+                            \"of covering Bing tiles. Please use a lower zoom level, or tile only a section \" +\n+                            \"of the geometry.\");\n+        }\n+        return outputTiles;\n+    }\n+\n+    public static List<BingTile> findMinimalTileCovering(Envelope envelope, int zoom)\n+    {\n+        Optional<List<BingTile>> maybeResult = handleTrivialCases(envelope, zoom);\n+        if (maybeResult.isPresent()) {\n+            return maybeResult.get();\n+        }\n+\n+        // envelope x,y (longitude,latitude) goes NE as they increase.\n+        // tile x,y goes SE as they increase\n+        BingTile seTile = BingTileUtils.latitudeLongitudeToTile(envelope.getYMin(), envelope.getXMax(), zoom);\n+        BingTile nwTile = BingTileUtils.latitudeLongitudeToTile(envelope.getYMax(), envelope.getXMin(), zoom);\n+        int minY = nwTile.getY();\n+        int minX = nwTile.getX();\n+        int maxY = seTile.getY();\n+        int maxX = seTile.getX();\n+\n+        int numTiles = (maxX - minX + 1) * (maxY - minY + 1);\n+        checkCondition(\n+                numTiles <= MAX_COVERING_COUNT,\n+                \"The zoom level is too high or the geometry is too large to compute a set \" +\n+                        \"of covering Bing tiles. Please use a lower zoom level, or tile only a section \" +\n+                        \"of the geometry.\");\n+\n+        List<BingTile> results = new ArrayList<>(numTiles);\n+        for (int y = minY; y <= maxY; ++y) {\n+            for (int x = minX; x <= maxX; ++x) {\n+                results.add(BingTile.fromCoordinates(x, y, zoom));\n+            }\n+        }\n+\n+        return results;\n+    }\n+\n     private static class TilingEntry\n     {\n         private final BingTile tile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2MTY3Nw==", "url": "https://github.com/prestodb/presto/pull/14899#discussion_r461661677", "bodyText": "nit: please move it before the findRawTileCovering , as findDissolvedTileCovering  uses findDissolvedTileCovering", "author": "arhimondr", "createdAt": "2020-07-28T15:13:44Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java", "diffHunk": "@@ -168,4 +186,163 @@ private static int axisToCoordinates(double axis, long mapSize)\n         int tileAxis = (int) clip(axis * mapSize, 0, mapSize - 1);\n         return tileAxis / TILE_PIXELS;\n     }\n+\n+    private static List<BingTile> findRawTileCovering(OGCGeometry ogcGeometry, int maxZoom)\n+    {\n+        Envelope envelope = getEnvelope(ogcGeometry);\n+        Optional<List<BingTile>> trivialResult = handleTrivialCases(envelope, maxZoom);\n+        if (trivialResult.isPresent()) {\n+            return trivialResult.get();\n+        }\n+\n+        accelerateGeometry(\n+                ogcGeometry, OperatorIntersects.local(), Geometry.GeometryAccelerationDegree.enumMedium);\n+\n+        Deque<TilingEntry> stack = new ArrayDeque<>();\n+        Consumer<BingTile> addIntersecting = tile -> {\n+            TilingEntry tilingEntry = new TilingEntry(tile);\n+            if (satisfiesTileEdgeCondition(envelope, tilingEntry)\n+                    && ogcGeometry.intersects(tilingEntry.polygon)) {\n+                stack.push(tilingEntry);\n+            }\n+        };\n+\n+        // Populate with initial tiles.  Since there aren't many low zoom tiles,\n+        // and throwing away totally disjoint ones is cheap (envelope check),\n+        // we might as well start comprehensively.\n+        ImmutableList.of(\n+                BingTile.fromCoordinates(0, 0, 1),\n+                BingTile.fromCoordinates(0, 1, 1),\n+                BingTile.fromCoordinates(1, 0, 1),\n+                BingTile.fromCoordinates(1, 1, 1)\n+        ).forEach(addIntersecting);\n+\n+        List<BingTile> outputTiles = new ArrayList<>();\n+        while (!stack.isEmpty()) {\n+            TilingEntry entry = stack.pop();\n+            if (entry.tile.getZoomLevel() == maxZoom || ogcGeometry.contains(entry.polygon)) {\n+                outputTiles.add(entry.tile);\n+            }\n+            else {\n+                entry.tile.findChildren().forEach(addIntersecting);\n+                checkCondition(\n+                        outputTiles.size() + stack.size() <= MAX_COVERING_COUNT,\n+                        \"The zoom level is too high or the geometry is too large to compute a set \" +\n+                                \"of covering Bing tiles. Please use a lower zoom level, or tile only a section \" +\n+                                \"of the geometry.\");\n+            }\n+        }\n+        return outputTiles;\n+    }\n+\n+    private static Optional<List<BingTile>> handleTrivialCases(Envelope envelope, int zoom)\n+    {\n+        checkZoomLevel(zoom);\n+\n+        if (envelope.isEmpty()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n+        checkLatitude(envelope.getYMin(), LATITUDE_SPAN_OUT_OF_RANGE);\n+        checkLatitude(envelope.getYMax(), LATITUDE_SPAN_OUT_OF_RANGE);\n+        checkLongitude(envelope.getXMin(), LONGITUDE_SPAN_OUT_OF_RANGE);\n+        checkLongitude(envelope.getXMax(), LONGITUDE_SPAN_OUT_OF_RANGE);\n+\n+        if (zoom == 0) {\n+            return Optional.of(ImmutableList.of(BingTile.fromCoordinates(0, 0, 0)));\n+        }\n+        if (envelope.getXMax() == envelope.getXMin() && envelope.getYMax() == envelope.getYMin()) {\n+            return Optional.of(ImmutableList.of(latitudeLongitudeToTile(envelope.getYMax(), envelope.getXMax(), zoom)));\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    /*\n+     * BingTiles don't contain their eastern/southern edges, so that each point lies\n+     * on a unique tile.  However, the easternmost and southernmost tiles must contain\n+     * their eastern and southern bounds (respectively), because they are the only\n+     * tiles that can.\n+     */\n+    private static boolean satisfiesTileEdgeCondition(Envelope query, TilingEntry entry)\n+    {\n+        BingTile tile = entry.tile;\n+        int maxXY = (1 << tile.getZoomLevel()) - 1;\n+        if (tile.getY() < maxXY && query.getYMax() == entry.envelope.getYMin()) {\n+            return false;\n+        }\n+        if (tile.getX() < maxXY && query.getXMin() == entry.envelope.getXMax()) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Find a minimal set of BingTiles (at different zooms), covering the geometry.\n+     * If a larger tile fits within the geometry, do not split it into smaller\n+     * tiles.  Do not split a tile past maxZoom.\n+     */\n+    public static List<BingTile> findDissolvedTileCovering(OGCGeometry ogcGeometry, int maxZoom)", "originalCommit": "e9c1114baa65e83fe9816b848d1bba7dfb71f964", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "106db28c8cd5eb74852eb0668bdc25004d654b7e", "chunk": "diff --git a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java\nindex 9f2aee1de5..f151b7840b 100644\n--- a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java\n+++ b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileUtils.java\n\n@@ -332,6 +332,58 @@ public class BingTileUtils\n         return results;\n     }\n \n+    /**\n+     * Find a minimal set of BingTiles (at zoom), covering the geometry.\n+     */\n+    public static List<BingTile> findMinimalTileCovering(OGCGeometry ogcGeometry, int zoom)\n+    {\n+        List<BingTile> outputTiles = new ArrayList<>();\n+        Deque<BingTile> stack = new ArrayDeque<>(findRawTileCovering(ogcGeometry, zoom));\n+        while (!stack.isEmpty()) {\n+            BingTile thisTile = stack.pop();\n+            outputTiles.addAll(thisTile.findChildren(zoom));\n+            checkCondition(\n+                    outputTiles.size() + stack.size() <= MAX_COVERING_COUNT,\n+                    \"The zoom level is too high or the geometry is too large to compute a set \" +\n+                            \"of covering Bing tiles. Please use a lower zoom level, or tile only a section \" +\n+                            \"of the geometry.\");\n+        }\n+        return outputTiles;\n+    }\n+\n+    public static List<BingTile> findMinimalTileCovering(Envelope envelope, int zoom)\n+    {\n+        Optional<List<BingTile>> maybeResult = handleTrivialCases(envelope, zoom);\n+        if (maybeResult.isPresent()) {\n+            return maybeResult.get();\n+        }\n+\n+        // envelope x,y (longitude,latitude) goes NE as they increase.\n+        // tile x,y goes SE as they increase\n+        BingTile seTile = BingTileUtils.latitudeLongitudeToTile(envelope.getYMin(), envelope.getXMax(), zoom);\n+        BingTile nwTile = BingTileUtils.latitudeLongitudeToTile(envelope.getYMax(), envelope.getXMin(), zoom);\n+        int minY = nwTile.getY();\n+        int minX = nwTile.getX();\n+        int maxY = seTile.getY();\n+        int maxX = seTile.getX();\n+\n+        int numTiles = (maxX - minX + 1) * (maxY - minY + 1);\n+        checkCondition(\n+                numTiles <= MAX_COVERING_COUNT,\n+                \"The zoom level is too high or the geometry is too large to compute a set \" +\n+                        \"of covering Bing tiles. Please use a lower zoom level, or tile only a section \" +\n+                        \"of the geometry.\");\n+\n+        List<BingTile> results = new ArrayList<>(numTiles);\n+        for (int y = minY; y <= maxY; ++y) {\n+            for (int x = minX; x <= maxX; ++x) {\n+                results.add(BingTile.fromCoordinates(x, y, zoom));\n+            }\n+        }\n+\n+        return results;\n+    }\n+\n     private static class TilingEntry\n     {\n         private final BingTile tile;\n"}}, {"oid": "106db28c8cd5eb74852eb0668bdc25004d654b7e", "url": "https://github.com/prestodb/presto/commit/106db28c8cd5eb74852eb0668bdc25004d654b7e", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op", "committedDate": "2020-07-28T23:35:17Z", "type": "forcePushed"}, {"oid": "3a2d737674ac614cabcd53f2a32b7f8fcd413bbe", "url": "https://github.com/prestodb/presto/commit/3a2d737674ac614cabcd53f2a32b7f8fcd413bbe", "message": "Extract accelerateGeometry into GeometryUtils\n\nAlso add a version that accepts a degree of acceleration.", "committedDate": "2020-07-30T15:38:10Z", "type": "commit"}, {"oid": "09c7374d634c423007e51fdf6d03a2f6bc706975", "url": "https://github.com/prestodb/presto/commit/09c7374d634c423007e51fdf6d03a2f6bc706975", "message": "Add geometry_to_dissolved_bing_tiles\n\nA useful feature (that is requested by users) is to have a tile covering\nof a geometry that recursively dissolves complete sets of children into their\nparents.  This results in a smaller set of tiles with non-uniform zoom\nlevel.  This can be done efficiently, and actually can form the basis\nof the current (uniform zoom level) minimal tile covering function.\n\nThis commit implements geometry_to_dissolved_bing_tiles.  Later commits\nwill refactor geometry_to_bing_tiles to use the intermediate state for a\nsignificant efficiency win.", "committedDate": "2020-07-30T15:38:10Z", "type": "commit"}, {"oid": "ba1019e82c0cd42c779a4356bfa197a23d8fb395", "url": "https://github.com/prestodb/presto/commit/ba1019e82c0cd42c779a4356bfa197a23d8fb395", "message": "Add test cases for geometry_to_bing_tiles\n\nThese test cases at the boundary of tiles, for which we've had problems\nin the past.  In addition, this adds 2 commented out tests, because they\ncurrently fail.  A fix for this bug is in the later commits in this PR.", "committedDate": "2020-07-30T15:38:10Z", "type": "commit"}, {"oid": "79f28e53a6d7bacef2139874b627ac81eff54fb5", "url": "https://github.com/prestodb/presto/commit/79f28e53a6d7bacef2139874b627ac81eff54fb5", "message": "Reformatting some geometry_to_bing_tiles tests\n\nIn addition to general legibility, this will make the changes in the later\ncommits easier to see.", "committedDate": "2020-07-30T15:38:10Z", "type": "commit"}, {"oid": "fe873e9695d46cbceaf32288b634f6abe475d689", "url": "https://github.com/prestodb/presto/commit/fe873e9695d46cbceaf32288b634f6abe475d689", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op", "committedDate": "2020-07-30T15:38:10Z", "type": "commit"}, {"oid": "fe873e9695d46cbceaf32288b634f6abe475d689", "url": "https://github.com/prestodb/presto/commit/fe873e9695d46cbceaf32288b634f6abe475d689", "message": "Refactor geometry_to_bing_tiles to use new algorithm\n\nBy piggy-backing off of the intermediate results from\ngeometry_to_dissolved_bing_tiles, we can improve geometry_to_bing_tiles:\n1. It is about 50x more efficient on complex polygons.\n2. The limit on polygon complexity can be removed.\n3. Correctness bugs involving the south and east borders are fixed.\n\nThere's a small regression on envelopes, but a large win on the\nexpensive cases.\n\nBaseline\nBenchmark                                         Mode  Cnt    Score    Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10    0.013 \u00b1  0.001  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  330.286 \u00b1 18.704  ms/op\n\nNew Algorithm\nBenchmark                                         Mode  Cnt  Score   Error  Units\nBenchmarkGeometryToBingTiles.envelopeToBingTiles  avgt   10  0.044 \u00b1 0.002  ms/op\nBenchmarkGeometryToBingTiles.geometryToBingTiles  avgt   10  7.697 \u00b1 0.635  ms/op", "committedDate": "2020-07-30T15:38:10Z", "type": "forcePushed"}]}