{"pr_number": 14670, "pr_title": "BenchmarkRunner fixes and make it extensible", "pr_createdAt": "2020-06-18T01:47:20Z", "pr_url": "https://github.com/prestodb/presto/pull/14670", "timeline": [{"oid": "c2b99c1ed7f4da3ae7af5b25648054a8cf8d35e1", "url": "https://github.com/prestodb/presto/commit/c2b99c1ed7f4da3ae7af5b25648054a8cf8d35e1", "message": "Make max concurrency optional in ConcurrentExecutionPhase\n\n- Max concurrency can be optional ConcurrentExecutionPhase.\n- Max concurrency can also be specified through configuration property\n  max-concurrency. If specified, it supercedes the value in\n  ConcurrentExecutionPhase.\n- If max concurrency is specified in neither places, a default of\n  70 is applied.", "committedDate": "2020-06-18T03:12:53Z", "type": "forcePushed"}, {"oid": "95eb1a01245c66ffff38e98dbbf1250a78c090de", "url": "https://github.com/prestodb/presto/commit/95eb1a01245c66ffff38e98dbbf1250a78c090de", "message": "Make max concurrency optional in ConcurrentExecutionPhase\n\n- Max concurrency can be optional ConcurrentExecutionPhase.\n- Max concurrency can also be specified through configuration property\n  max-concurrency. If specified, it supercedes the value in\n  ConcurrentExecutionPhase.\n- If max concurrency is specified in neither places, a default of\n  70 is applied.", "committedDate": "2020-06-18T03:13:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4MjkyMA==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r441982920", "bodyText": "nit: start a new line for getBenchmarkSuiteObject(SUITE, QUERY_SET)?", "author": "yingsu00", "createdAt": "2020-06-18T05:51:43Z", "path": "presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/source/TestMySqlBenchmarkSuiteSupplier.java", "diffHunk": "@@ -73,6 +74,8 @@ public void testSupplySuite()\n \n         insertBenchmarkSuite(handle, SUITE, QUERY_SET, PHASE_SPECIFICATION_LIST_CODEC.toJson(getBenchmarkSuitePhases()), MAP_CODEC.toJson(getBenchmarkSuiteSessionProperties()));\n \n-        assertEquals(new DbBenchmarkSuiteSupplier(jdbi, new BenchmarkSuiteConfig().setSuite(SUITE)).get(), getBenchmarkSuiteObject(SUITE, QUERY_SET));\n+        assertEquals(new MySqlBenchmarkSuiteSupplier(\n+                new MySqlBenchmarkSuiteConfig().setDatabaseUrl(mySqlServer.getJdbcUrl(XDB)),\n+                new BenchmarkSuiteConfig().setSuite(SUITE)).get(), getBenchmarkSuiteObject(SUITE, QUERY_SET));", "originalCommit": "b83828f58b1f98567435bd92a5d7a06db4b2c146", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3ad1588dbab9d5f36b323f397d2a1b1d837c549", "chunk": "diff --git a/presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/source/TestMySqlBenchmarkSuiteSupplier.java b/presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/source/TestMySqlBenchmarkSuiteSupplier.java\nindex 4ad25c0a0e..71cb9669bc 100644\n--- a/presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/source/TestMySqlBenchmarkSuiteSupplier.java\n+++ b/presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/source/TestMySqlBenchmarkSuiteSupplier.java\n\n@@ -74,8 +74,10 @@ public class TestMySqlBenchmarkSuiteSupplier\n \n         insertBenchmarkSuite(handle, SUITE, QUERY_SET, PHASE_SPECIFICATION_LIST_CODEC.toJson(getBenchmarkSuitePhases()), MAP_CODEC.toJson(getBenchmarkSuiteSessionProperties()));\n \n-        assertEquals(new MySqlBenchmarkSuiteSupplier(\n-                new MySqlBenchmarkSuiteConfig().setDatabaseUrl(mySqlServer.getJdbcUrl(XDB)),\n-                new BenchmarkSuiteConfig().setSuite(SUITE)).get(), getBenchmarkSuiteObject(SUITE, QUERY_SET));\n+        assertEquals(\n+                new MySqlBenchmarkSuiteSupplier(\n+                        new MySqlBenchmarkSuiteConfig().setDatabaseUrl(mySqlServer.getJdbcUrl(XDB)),\n+                        new BenchmarkSuiteConfig().setSuite(SUITE)).get(),\n+                getBenchmarkSuiteObject(SUITE, QUERY_SET));\n     }\n }\n"}}, {"oid": "a3ad1588dbab9d5f36b323f397d2a1b1d837c549", "url": "https://github.com/prestodb/presto/commit/a3ad1588dbab9d5f36b323f397d2a1b1d837c549", "message": "Make max concurrency optional in ConcurrentExecutionPhase\n\n- Max concurrency can be optional ConcurrentExecutionPhase.\n- Max concurrency can also be specified through configuration property\n  max-concurrency. If specified, it supercedes the value in\n  ConcurrentExecutionPhase.\n- If max concurrency is specified in neither places, a default of\n  70 is applied.", "committedDate": "2020-06-18T19:53:35Z", "type": "forcePushed"}, {"oid": "1914034351b35d5a41e651ad9bdf980aa314572b", "url": "https://github.com/prestodb/presto/commit/1914034351b35d5a41e651ad9bdf980aa314572b", "message": "Fix PhaseSpecification\n\nFix JSON serialization and deserialization for subclasses of\nPhaseSpecification. It is unnecessay to make ExecutionStrategy\na field or JSON field. Instead, ExecutionStrategy is static for\nany subclasses of PhaseExecution.\n\nAlso,\n- Fix equals() and hashCode()\n- Move ExecutionStrategy to top-level", "committedDate": "2020-06-18T03:10:34Z", "type": "forcePushed"}, {"oid": "a462337c1a6aec4b0a4ea3e6e1851ff1f1d7d1ca", "url": "https://github.com/prestodb/presto/commit/a462337c1a6aec4b0a4ea3e6e1851ff1f1d7d1ca", "message": "Allow session properties to be specified with queries", "committedDate": "2020-06-19T04:44:17Z", "type": "forcePushed"}, {"oid": "1de16ce5debaa08862861cc3e5c02a8fbe5d54e3", "url": "https://github.com/prestodb/presto/commit/1de16ce5debaa08862861cc3e5c02a8fbe5d54e3", "message": "Refactor PhaseExecutor\n\n- Redefine interface PhaseExecutor so that a PhaseExecutor is a\n  stateless object and is reused across phases.\n- Move BenchmarQueryRunner into AbstractPhaseExecutor.\n- Shutdown executor in a single place.\n- Post events in single places.", "committedDate": "2020-06-19T05:41:27Z", "type": "forcePushed"}, {"oid": "7103f33d1e542bcbcab11c9e3de816abb33abeac", "url": "https://github.com/prestodb/presto/commit/7103f33d1e542bcbcab11c9e3de816abb33abeac", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-19T06:09:39Z", "type": "forcePushed"}, {"oid": "798149f84dedb468f648530b4e639250f599e96b", "url": "https://github.com/prestodb/presto/commit/798149f84dedb468f648530b4e639250f599e96b", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-19T22:40:40Z", "type": "forcePushed"}, {"oid": "b7d5f38e4cab0f01463bd205e6b93a72a60d05d9", "url": "https://github.com/prestodb/presto/commit/b7d5f38e4cab0f01463bd205e6b93a72a60d05d9", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-19T22:41:54Z", "type": "forcePushed"}, {"oid": "683066561b71c521f7c26316f41e7795f0e1ccb0", "url": "https://github.com/prestodb/presto/commit/683066561b71c521f7c26316f41e7795f0e1ccb0", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-19T22:44:18Z", "type": "forcePushed"}, {"oid": "96294e74084548a42aae8e2866c57469bcfb7279", "url": "https://github.com/prestodb/presto/commit/96294e74084548a42aae8e2866c57469bcfb7279", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-19T22:44:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxNTU4Mg==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r445915582", "bodyText": "Does STREAM mean single stream and CONCURRENT means multiple of streams? Or CONCURRENT means no streams? Could you add some comment?", "author": "yingsu00", "createdAt": "2020-06-26T01:00:10Z", "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/ExecutionStrategy.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.benchmark.framework;\n+\n+public enum ExecutionStrategy\n+{\n+    STREAM,", "originalCommit": "1914034351b35d5a41e651ad9bdf980aa314572b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd91b166c450f34d6c0bd0c4c9d87e5374aef5c4", "chunk": "diff --git a/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/ExecutionStrategy.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/BucketFunctionType.java\nsimilarity index 84%\nrename from presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/ExecutionStrategy.java\nrename to presto-hive-metastore/src/main/java/com/facebook/presto/hive/BucketFunctionType.java\nindex 8ee6ad2abd..7c9a96133d 100644\n--- a/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/ExecutionStrategy.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/BucketFunctionType.java\n\n@@ -11,10 +11,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.benchmark.framework;\n+package com.facebook.presto.hive;\n \n-public enum ExecutionStrategy\n+public enum BucketFunctionType\n {\n-    STREAM,\n-    CONCURRENT\n+    HIVE_COMPATIBLE,\n+    PRESTO_NATIVE\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzQyOQ==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r445953429", "bodyText": "Why is the queries mutable? Everything else is final, why does the queries need to change given a fixed suite and querySet?", "author": "yingsu00", "createdAt": "2020-06-26T03:51:34Z", "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkSuite.java", "diffHunk": "@@ -63,13 +85,54 @@ public boolean equals(Object obj)\n             return false;\n         }\n         BenchmarkSuite o = (BenchmarkSuite) obj;\n-        return Objects.equals(suiteInfo, o.suiteInfo) &&\n+        return Objects.equals(suite, o.suite) &&\n+                Objects.equals(querySet, o.querySet) &&\n+                Objects.equals(phases, o.phases) &&\n+                Objects.equals(sessionProperties, o.sessionProperties) &&\n                 Objects.equals(queries, o.queries);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash(suiteInfo, queries);\n+        return Objects.hash(suite, querySet, phases, sessionProperties, queries);\n+    }\n+\n+    public static class JdbiBuilder\n+    {\n+        private final String suite;\n+        private final String querySet;\n+        private final List<PhaseSpecification> phases;\n+        private final Map<String, String> sessionProperties;\n+        private List<BenchmarkQuery> queries;", "originalCommit": "0f02adae990b674fd83b26729a72689d7dba41af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1MzIxMA==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r447953210", "bodyText": "Answered below.", "author": "caithagoras", "createdAt": "2020-06-30T20:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd91b166c450f34d6c0bd0c4c9d87e5374aef5c4", "chunk": "diff --git a/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkSuite.java b/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkSuite.java\nindex 6d3b0b80c9..5b33a111e8 100644\n--- a/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkSuite.java\n+++ b/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkSuite.java\n\n@@ -85,54 +63,13 @@ public class BenchmarkSuite\n             return false;\n         }\n         BenchmarkSuite o = (BenchmarkSuite) obj;\n-        return Objects.equals(suite, o.suite) &&\n-                Objects.equals(querySet, o.querySet) &&\n-                Objects.equals(phases, o.phases) &&\n-                Objects.equals(sessionProperties, o.sessionProperties) &&\n+        return Objects.equals(suiteInfo, o.suiteInfo) &&\n                 Objects.equals(queries, o.queries);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash(suite, querySet, phases, sessionProperties, queries);\n-    }\n-\n-    public static class JdbiBuilder\n-    {\n-        private final String suite;\n-        private final String querySet;\n-        private final List<PhaseSpecification> phases;\n-        private final Map<String, String> sessionProperties;\n-        private List<BenchmarkQuery> queries;\n-\n-        @JdbiConstructor\n-        public JdbiBuilder(\n-                @ColumnName(\"suite\") String suite,\n-                @ColumnName(\"query_set\") String querySet,\n-                @ColumnName(\"phases\") List<PhaseSpecification> phases,\n-                @ColumnName(\"session_properties\") Optional<Map<String, String>> sessionProperties)\n-        {\n-            this.suite = requireNonNull(suite, \"suite is null\");\n-            this.querySet = requireNonNull(querySet, \"querySet is null\");\n-            this.phases = requireNonNull(phases, \"phases is null\");\n-            this.sessionProperties = sessionProperties.orElse(ImmutableMap.of());\n-        }\n-\n-        public String getQuerySet()\n-        {\n-            return querySet;\n-        }\n-\n-        public JdbiBuilder setQueries(List<BenchmarkQuery> queries)\n-        {\n-            this.queries = ImmutableList.copyOf(queries);\n-            return this;\n-        }\n-\n-        public BenchmarkSuite build()\n-        {\n-            return new BenchmarkSuite(suite, querySet, phases, sessionProperties, queries);\n-        }\n+        return Objects.hash(suiteInfo, queries);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzkwNg==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r445953906", "bodyText": "Same question as above: why do we need to use setQueries instead of make it part of the constructor?", "author": "yingsu00", "createdAt": "2020-06-26T03:53:45Z", "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/source/AbstractJdbiBenchmarkSuiteSupplier.java", "diffHunk": "@@ -40,11 +39,8 @@ public BenchmarkSuite get()\n     {\n         return jdbi.inTransaction(handle -> {\n             BenchmarkSuiteDao dao = handle.attach(BenchmarkSuiteDao.class);\n-            BenchmarkSuiteInfo suiteInfo = dao.getBenchmarkSuiteInfo(suitesTableName, suite);\n-            return new BenchmarkSuite(\n-                    suite,\n-                    suiteInfo,\n-                    dao.getBenchmarkQueries(queriesTableName, suiteInfo.getQuerySet()));\n+            BenchmarkSuite.JdbiBuilder suiteBuilder = dao.getBenchmarkSuite(suitesTableName, suite);\n+            return suiteBuilder.setQueries(dao.getBenchmarkQueries(queriesTableName, suiteBuilder.getQuerySet())).build();", "originalCommit": "0f02adae990b674fd83b26729a72689d7dba41af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1NjUzMQ==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r447956531", "bodyText": "You can find that all fields of BenchmarkSuite are immutable. queries is mutable only in this JdbiBuilder inner-class.\n\nWhy do we need to use setQueries instead of make it part of the constructor?\nThis is because we need to run 2 MySQL queries to fetch all information about a suite.\n\n\ndao.getBenchmarkSuite gets some the suite configuration by reading benchmark_suites.\ndao.getBenchmarkQueries gets the list of queries by reading benchmark_queries.\n\nThe result of 1st query needs to be stored in some intermediate object. Before the refactoring, the result is mapped to BenchmarkSuiteInfo class, and a BenchmarkSuite contains both BenchmarkSuiteInfo and the query lists. With the refactoring, I removed BenchmarkSuiteInfo, and replace it with the builder class instead. The result of the 1st query is mapped to BenchmarkSuite.JdbiBuilder using the constructor, while the result of the 2nd query is added to the build using the setter. And finally JdbiBuilder.build() returns a BenchmarkSuite object.", "author": "caithagoras", "createdAt": "2020-06-30T20:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "bd91b166c450f34d6c0bd0c4c9d87e5374aef5c4", "chunk": "diff --git a/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/source/AbstractJdbiBenchmarkSuiteSupplier.java b/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/source/AbstractJdbiBenchmarkSuiteSupplier.java\nindex 40e5de1195..803db25da5 100644\n--- a/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/source/AbstractJdbiBenchmarkSuiteSupplier.java\n+++ b/presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/source/AbstractJdbiBenchmarkSuiteSupplier.java\n\n@@ -39,8 +40,11 @@ public abstract class AbstractJdbiBenchmarkSuiteSupplier\n     {\n         return jdbi.inTransaction(handle -> {\n             BenchmarkSuiteDao dao = handle.attach(BenchmarkSuiteDao.class);\n-            BenchmarkSuite.JdbiBuilder suiteBuilder = dao.getBenchmarkSuite(suitesTableName, suite);\n-            return suiteBuilder.setQueries(dao.getBenchmarkQueries(queriesTableName, suiteBuilder.getQuerySet())).build();\n+            BenchmarkSuiteInfo suiteInfo = dao.getBenchmarkSuiteInfo(suitesTableName, suite);\n+            return new BenchmarkSuite(\n+                    suite,\n+                    suiteInfo,\n+                    dao.getBenchmarkQueries(queriesTableName, suiteInfo.getQuerySet()));\n         });\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NDcyNw==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r445954727", "bodyText": "Why are all tests with empty session properties? Can we add some test with non-empty session properties?", "author": "yingsu00", "createdAt": "2020-06-26T03:58:04Z", "path": "presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/BenchmarkTestUtil.java", "diffHunk": "@@ -126,9 +127,9 @@ public static void insertBenchmarkSuite(Handle handle, String suite, String quer\n \n     public static BenchmarkSuite getBenchmarkSuiteObject(String suite, String querySet)\n     {\n-        BenchmarkQuery benchmarkQuery1 = new BenchmarkQuery(\"Q1\", \"SELECT 1\", CATALOG, SCHEMA);\n-        BenchmarkQuery benchmarkQuery2 = new BenchmarkQuery(\"Q2\", \"SELECT 2\", CATALOG, SCHEMA);\n-        BenchmarkQuery benchmarkQuery3 = new BenchmarkQuery(\"Q3\", \"SELECT 3\", CATALOG, SCHEMA);\n+        BenchmarkQuery benchmarkQuery1 = new BenchmarkQuery(\"Q1\", \"SELECT 1\", CATALOG, SCHEMA, Optional.empty());", "originalCommit": "a462337c1a6aec4b0a4ea3e6e1851ff1f1d7d1ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2ODc5NA==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r447968794", "bodyText": "Test added.", "author": "caithagoras", "createdAt": "2020-06-30T20:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NDcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "bd91b166c450f34d6c0bd0c4c9d87e5374aef5c4", "chunk": "diff --git a/presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/BenchmarkTestUtil.java b/presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/BenchmarkTestUtil.java\nindex 7cf2784325..f6383cbf69 100644\n--- a/presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/BenchmarkTestUtil.java\n+++ b/presto-benchmark-runner/src/test/java/com/facebook/presto/benchmark/BenchmarkTestUtil.java\n\n@@ -110,32 +112,28 @@ public class BenchmarkTestUtil\n     public static List<PhaseSpecification> getBenchmarkSuitePhases()\n     {\n         List<List<String>> streams = ImmutableList.of(ImmutableList.of(\"Q1\", \"Q2\"), ImmutableList.of(\"Q2\", \"Q3\"));\n-        PhaseSpecification streamExecutionPhase = new StreamExecutionPhase(\"Phase-1\", streams);\n+        PhaseSpecification streamExecutionPhase = new StreamExecutionPhase(\"Phase-1\", STREAM, streams);\n \n         List<String> queries = ImmutableList.of(\"Q1\", \"Q2\", \"Q3\");\n-        PhaseSpecification concurrentExecutionPhase = new ConcurrentExecutionPhase(\"Phase-2\", queries, 50);\n+        PhaseSpecification concurrentExecutionPhase = new ConcurrentExecutionPhase(\"Phase-2\", CONCURRENT, queries, 50);\n \n         return ImmutableList.of(streamExecutionPhase, concurrentExecutionPhase);\n     }\n \n     public static Map<String, String> getBenchmarkSuiteSessionProperties()\n     {\n-        Map<String, String> sessionProperties = new HashMap<>();\n+        Map<String, String> sessionProperties = new HashMap();\n         sessionProperties.put(\"max\", \"5\");\n         return sessionProperties;\n     }\n \n     public static BenchmarkSuite getBenchmarkSuiteObject(String suite, String querySet)\n     {\n-        BenchmarkQuery benchmarkQuery1 = new BenchmarkQuery(\"Q1\", \"SELECT 1\", CATALOG, SCHEMA, Optional.empty());\n-        BenchmarkQuery benchmarkQuery2 = new BenchmarkQuery(\"Q2\", \"SELECT 2\", CATALOG, SCHEMA, Optional.empty());\n-        BenchmarkQuery benchmarkQuery3 = new BenchmarkQuery(\"Q3\", \"SELECT 3\", CATALOG, SCHEMA, Optional.empty());\n+        BenchmarkQuery benchmarkQuery1 = new BenchmarkQuery(\"Q1\", \"SELECT 1\", CATALOG, SCHEMA);\n+        BenchmarkQuery benchmarkQuery2 = new BenchmarkQuery(\"Q2\", \"SELECT 2\", CATALOG, SCHEMA);\n+        BenchmarkQuery benchmarkQuery3 = new BenchmarkQuery(\"Q3\", \"SELECT 3\", CATALOG, SCHEMA);\n \n-        return new BenchmarkSuite(\n-                suite,\n-                querySet,\n-                getBenchmarkSuitePhases(),\n-                getBenchmarkSuiteSessionProperties(),\n+        return new BenchmarkSuite(suite, new BenchmarkSuiteInfo(suite, querySet, getBenchmarkSuitePhases(), getBenchmarkSuiteSessionProperties()),\n                 ImmutableList.of(benchmarkQuery1, benchmarkQuery2, benchmarkQuery3));\n     }\n }\n"}}, {"oid": "bd91b166c450f34d6c0bd0c4c9d87e5374aef5c4", "url": "https://github.com/prestodb/presto/commit/bd91b166c450f34d6c0bd0c4c9d87e5374aef5c4", "message": "Make BenchmarkSuiteSupplier extensible\n\n- Move the logic of DbBenchmarkSuiteSupplier into an abastract\n  base class AbstractJdbiBenchmarkSuiteSupplier.\n- Move MySqlBenchmarkSuiteConfig to the correct package.", "committedDate": "2020-06-30T20:04:11Z", "type": "commit"}, {"oid": "94fad97f0c01e97bb5ddedead6ca327cbb6ca07c", "url": "https://github.com/prestodb/presto/commit/94fad97f0c01e97bb5ddedead6ca327cbb6ca07c", "message": "Make benchmark runner extensible\n\nMove logic from PrestoBenchmarkCommand to an abstract base class.", "committedDate": "2020-06-30T20:04:11Z", "type": "commit"}, {"oid": "6df620b9ee8295481f67feaab921d42eabffed9d", "url": "https://github.com/prestodb/presto/commit/6df620b9ee8295481f67feaab921d42eabffed9d", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-30T20:04:11Z", "type": "forcePushed"}, {"oid": "da84dc5b2a2954af285bf748acede11d6844ca62", "url": "https://github.com/prestodb/presto/commit/da84dc5b2a2954af285bf748acede11d6844ca62", "message": "Fix PhaseSpecification\n\nFix JSON serialization and deserialization for subclasses of\nPhaseSpecification. It is unnecessay to make ExecutionStrategy\na field or JSON field. Instead, ExecutionStrategy is static for\nany subclasses of PhaseExecution.\n\nAlso,\n- Fix equals() and hashCode()\n- Move ExecutionStrategy to top-level", "committedDate": "2020-06-30T20:13:14Z", "type": "commit"}, {"oid": "60147d757fcd77c839e15a1ed2d221f31fa2d560", "url": "https://github.com/prestodb/presto/commit/60147d757fcd77c839e15a1ed2d221f31fa2d560", "message": "Refactor BenchmarkSuite\n\nRemove BenchmarkSuiteInfo and move all its fields into BenchmarkSuite.\nUse a builder object of BenchmarkSuite to hold the intermediate\nsuite information fetched from MySQL.", "committedDate": "2020-06-30T20:13:14Z", "type": "commit"}, {"oid": "a1b8e30a517be92d9ae46fae47d1d8ebe1967e27", "url": "https://github.com/prestodb/presto/commit/a1b8e30a517be92d9ae46fae47d1d8ebe1967e27", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-30T20:13:15Z", "type": "forcePushed"}, {"oid": "03be023c0896264fd9946632244f4f74d1cd8fae", "url": "https://github.com/prestodb/presto/commit/03be023c0896264fd9946632244f4f74d1cd8fae", "message": "Allow session properties to be specified with queries", "committedDate": "2020-06-30T20:45:53Z", "type": "commit"}, {"oid": "29a508bad61b888fb5abc7b030f051b691ce261a", "url": "https://github.com/prestodb/presto/commit/29a508bad61b888fb5abc7b030f051b691ce261a", "message": "Refactor PhaseExecutor\n\n- Re-define interface PhaseExecutor so that a PhaseExecutor is a\n  stateless object and is reused across phases.\n- Move BenchmarQueryRunner into AbstractPhaseExecutor.\n- Shutdown executor in a single place.\n- Post events in single places.\n- Move all classes in executor package to framework package.", "committedDate": "2020-06-30T20:45:53Z", "type": "commit"}, {"oid": "1cf42b06ec8402b069488f46ddd3e44fba38607a", "url": "https://github.com/prestodb/presto/commit/1cf42b06ec8402b069488f46ddd3e44fba38607a", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-30T20:46:44Z", "type": "commit"}, {"oid": "1cf42b06ec8402b069488f46ddd3e44fba38607a", "url": "https://github.com/prestodb/presto/commit/1cf42b06ec8402b069488f46ddd3e44fba38607a", "message": "Make maxConcurrency optional in ConcurrentExecutionPhase\n\nAllow max concurrency for concurrent phases to be specified\nthrough config.\n\n- Use the max concurrency from config if specified.\n- Else, use the max concurrency specified in phase specification.\n- Else, use the default max concurrency 70.", "committedDate": "2020-06-30T20:46:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MjEzOA==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r451842138", "bodyText": "So basically BenchmarkRunner will have as many executors are there are execution strategies?", "author": "rongrong", "createdAt": "2020-07-08T21:43:25Z", "path": "presto-benchmark-runner/src/main/java/com/facebook/presto/benchmark/framework/BenchmarkRunner.java", "diffHunk": "@@ -16,72 +16,78 @@\n import com.facebook.airlift.event.client.EventClient;\n import com.facebook.presto.benchmark.event.BenchmarkPhaseEvent;\n import com.facebook.presto.benchmark.event.BenchmarkSuiteEvent;\n-import com.facebook.presto.benchmark.executor.PhaseExecutor;\n-import com.facebook.presto.benchmark.executor.PhaseExecutorFactory;\n import com.facebook.presto.benchmark.source.BenchmarkSuiteSupplier;\n import com.google.common.collect.ImmutableSet;\n import com.google.inject.Inject;\n \n import javax.annotation.PostConstruct;\n \n-import java.util.List;\n import java.util.Set;\n \n import static com.facebook.presto.benchmark.event.BenchmarkPhaseEvent.Status.FAILED;\n import static com.facebook.presto.benchmark.event.BenchmarkPhaseEvent.Status.SUCCEEDED;\n+import static com.facebook.presto.benchmark.framework.ExecutionStrategy.CONCURRENT;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class BenchmarkRunner\n {\n     private final BenchmarkSuiteSupplier benchmarkSuiteSupplier;\n-    private final PhaseExecutorFactory phaseExecutorFactory;\n+    private final ConcurrentPhaseExecutor concurrentPhaseExecutor;", "originalCommit": "29a508bad61b888fb5abc7b030f051b691ce261a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1NzgxNQ==", "url": "https://github.com/prestodb/presto/pull/14670#discussion_r451857815", "bodyText": "Yes, and there will only be 2 in the foreseeable future. CONCURRENT and STREAM", "author": "caithagoras", "createdAt": "2020-07-08T22:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MjEzOA=="}], "type": "inlineReview", "revised_code": null}]}