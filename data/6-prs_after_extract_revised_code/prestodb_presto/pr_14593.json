{"pr_number": 14593, "pr_title": "Fix NegativeArraySizeException in REPLACE", "pr_createdAt": "2020-05-30T01:56:07Z", "pr_url": "https://github.com/prestodb/presto/pull/14593", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDAwOQ==", "url": "https://github.com/prestodb/presto/pull/14593#discussion_r432800009", "bodyText": "Why \"\\0\"? Shouldn't it be just \"\"?", "author": "kaikalur", "createdAt": "2020-05-30T01:58:37Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -248,6 +248,9 @@ public void testReplace()\n         assertFunction(\"CAST(REPLACE('abc' || utf8(from_hex('CE')) || 'xyz', '', 'X') AS VARBINARY)\",\n                 VARBINARY,\n                 new SqlVarbinary(new byte[] {'X', 'a', 'X', 'b', 'X', 'c', 'X', (byte) 0xCE, 'X', 'x', 'X', 'y', 'X', 'z', 'X'}));\n+\n+        String longString = new String(new char[1_000_000]).replace(\"\\0\", \"a\");", "originalCommit": "3868fc2ca3e3fec813a2fbe24d577ec7cfc1ad59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDA3MQ==", "url": "https://github.com/prestodb/presto/pull/14593#discussion_r432800071", "bodyText": "new String(new char[1_000_000]) makes a string of 1M characters, each is \\0.", "author": "mbasmanova", "createdAt": "2020-05-30T01:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2NTA0Nw==", "url": "https://github.com/prestodb/presto/pull/14593#discussion_r432965047", "bodyText": "Oh - I got mixed up between Java replace and sql replace :) Actually you should not need this replace at all because arrays are initialized to default value. So just leave it as is or may be use nCopies or something", "author": "kaikalur", "createdAt": "2020-05-31T16:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MTgwMw==", "url": "https://github.com/prestodb/presto/pull/14593#discussion_r433271803", "bodyText": "@kaikalur You are right. I don't need this replace. I'll change it to String longString = new String(new char[1_000_000]);", "author": "mbasmanova", "createdAt": "2020-06-01T14:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e509afb17926dd2854922592716fa7abf06e2447", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java\nindex b3ad7b01ab..a0ff9d7c5b 100644\n--- a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java\n+++ b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java\n\n@@ -249,7 +249,7 @@ public class TestStringFunctions\n                 VARBINARY,\n                 new SqlVarbinary(new byte[] {'X', 'a', 'X', 'b', 'X', 'c', 'X', (byte) 0xCE, 'X', 'x', 'X', 'y', 'X', 'z', 'X'}));\n \n-        String longString = new String(new char[1_000_000]).replace(\"\\0\", \"a\");\n+        String longString = new String(new char[1_000_000]);\n         assertInvalidFunction(String.format(\"replace('%s', '', '%s')\", longString, longString), \"inputs to \\\"replace\\\" function are too large: when \\\"search\\\" parameter is empty, length of \\\"string\\\" times length of \\\"replace\\\" must not exceed 2147483647\");\n     }\n \n"}}, {"oid": "e509afb17926dd2854922592716fa7abf06e2447", "url": "https://github.com/prestodb/presto/commit/e509afb17926dd2854922592716fa7abf06e2447", "message": "Fix NegativeArraySizeException in REPLACE", "committedDate": "2020-06-01T14:39:06Z", "type": "commit"}, {"oid": "e509afb17926dd2854922592716fa7abf06e2447", "url": "https://github.com/prestodb/presto/commit/e509afb17926dd2854922592716fa7abf06e2447", "message": "Fix NegativeArraySizeException in REPLACE", "committedDate": "2020-06-01T14:39:06Z", "type": "forcePushed"}]}