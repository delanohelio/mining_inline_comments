{"pr_number": 14449, "pr_title": "Cse filter", "pr_createdAt": "2020-04-28T01:03:38Z", "pr_url": "https://github.com/prestodb/presto/pull/14449", "timeline": [{"oid": "b50b6e94e1ee4c0de34c1f282aeccf1ec8c2eb1d", "url": "https://github.com/prestodb/presto/commit/b50b6e94e1ee4c0de34c1f282aeccf1ec8c2eb1d", "message": "Enable common sub expression optimization in PageFunctionCompiler filter", "committedDate": "2020-04-29T18:29:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODU0Mw==", "url": "https://github.com/prestodb/presto/pull/14449#discussion_r418258543", "bodyText": "Spell out CSE?", "author": "highker", "createdAt": "2020-04-30T20:06:47Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -328,10 +327,7 @@ private ClassDefinition definePageProjectWorkClass(SqlFunctionProperties sqlFunc\n                 .append(thisVariable.setField(nextIndexOrPositionField, selectedPositions.invoke(\"getOffset\", int.class)))\n                 .append(thisVariable.setField(resultField, constantNull(Block.class)));\n \n-        cseFields.values().forEach(fields -> {\n-            body.append(thisVariable.setField(fields.evaluatedField, constantBoolean(false)));\n-            body.append(thisVariable.setField(fields.resultField, constantNull(fields.resultType)));\n-        });\n+        initializeCSEFields(cseFields.values(), thisVariable, body);", "originalCommit": "b50b6e94e1ee4c0de34c1f282aeccf1ec8c2eb1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5718d201988ae6afbfb90b1d83621b48283bd246", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\nindex 248b7f633c..6ea13bd569 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n\n@@ -327,7 +327,7 @@ public class PageFunctionCompiler\n                 .append(thisVariable.setField(nextIndexOrPositionField, selectedPositions.invoke(\"getOffset\", int.class)))\n                 .append(thisVariable.setField(resultField, constantNull(Block.class)));\n \n-        initializeCSEFields(cseFields.values(), thisVariable, body);\n+        initializeCommonSubExpressionFields(cseFields.values(), thisVariable, body);\n \n         cachedInstanceBinder.generateInitializations(thisVariable, body);\n         body.ret();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODY0Mg==", "url": "https://github.com/prestodb/presto/pull/14449#discussion_r418258642", "bodyText": "same", "author": "highker", "createdAt": "2020-04-30T20:07:01Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -580,7 +576,22 @@ private ClassDefinition defineFilterClass(SqlFunctionProperties sqlFunctionPrope\n         CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(classDefinition, callSiteBinder);\n \n         Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, filter, metadata, sqlFunctionProperties);\n-        generateFilterMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, filter);\n+\n+        // cse\n+        Map<VariableReferenceExpression, CommonSubExpressionFields> cseFields = ImmutableMap.of();\n+        if (isOptimizeCommonSubExpression) {\n+            Map<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressionsByLevel = collectCSEByLevel(filter);\n+            if (!commonSubExpressionsByLevel.isEmpty()) {\n+                cseFields = declareCommonSubExpressionFields(classDefinition, commonSubExpressionsByLevel);\n+                generateCSEMethods(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, commonSubExpressionsByLevel, cseFields);", "originalCommit": "b50b6e94e1ee4c0de34c1f282aeccf1ec8c2eb1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5718d201988ae6afbfb90b1d83621b48283bd246", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\nindex 248b7f633c..6ea13bd569 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n\n@@ -583,7 +577,7 @@ public class PageFunctionCompiler\n             Map<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressionsByLevel = collectCSEByLevel(filter);\n             if (!commonSubExpressionsByLevel.isEmpty()) {\n                 cseFields = declareCommonSubExpressionFields(classDefinition, commonSubExpressionsByLevel);\n-                generateCSEMethods(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, commonSubExpressionsByLevel, cseFields);\n+                generateCommonSubExpressionMethods(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, commonSubExpressionsByLevel, cseFields);\n                 Map<RowExpression, VariableReferenceExpression> commonSubExpressions = commonSubExpressionsByLevel.values().stream()\n                         .flatMap(m -> m.entrySet().stream())\n                         .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODc1NA==", "url": "https://github.com/prestodb/presto/pull/14449#discussion_r418258754", "bodyText": "same", "author": "highker", "createdAt": "2020-04-30T20:07:14Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -686,15 +707,17 @@ private MethodDefinition generateFilterMethod(\n \n         Scope scope = method.getScope();\n         BytecodeBlock body = method.getBody();\n+        Variable thisVariable = scope.getThis();\n \n         declareBlockVariables(ImmutableList.of(filter), page, scope, body);\n+        cseFields.values().forEach(fields -> body.append(thisVariable.setField(fields.evaluatedField, constantBoolean(false))));\n \n         Variable wasNullVariable = scope.declareVariable(\"wasNull\", body, constantFalse());\n         RowExpressionCompiler compiler = new RowExpressionCompiler(\n                 classDefinition,\n                 callSiteBinder,\n                 cachedInstanceBinder,\n-                fieldReferenceCompiler(callSiteBinder),\n+                new CSEFieldAndVariableReferenceCompiler(callSiteBinder, cseFields, thisVariable),", "originalCommit": "b50b6e94e1ee4c0de34c1f282aeccf1ec8c2eb1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b042ac77dca5091b4c9cb5558e31ef3d4255087d", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\nindex 248b7f633c..7089a92dbd 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n\n@@ -717,7 +711,7 @@ public class PageFunctionCompiler\n                 classDefinition,\n                 callSiteBinder,\n                 cachedInstanceBinder,\n-                new CSEFieldAndVariableReferenceCompiler(callSiteBinder, cseFields, thisVariable),\n+                new FieldAndVariableReferenceCompiler(callSiteBinder, cseFields, thisVariable),\n                 metadata,\n                 sqlFunctionProperties,\n                 compiledLambdaMap);\n"}}, {"oid": "5718d201988ae6afbfb90b1d83621b48283bd246", "url": "https://github.com/prestodb/presto/commit/5718d201988ae6afbfb90b1d83621b48283bd246", "message": "Enable common sub expression optimization in PageFunctionCompiler filter", "committedDate": "2020-04-30T20:38:09Z", "type": "forcePushed"}, {"oid": "b042ac77dca5091b4c9cb5558e31ef3d4255087d", "url": "https://github.com/prestodb/presto/commit/b042ac77dca5091b4c9cb5558e31ef3d4255087d", "message": "Enable common sub expression optimization in PageFunctionCompiler filter", "committedDate": "2020-04-30T22:24:38Z", "type": "commit"}, {"oid": "b042ac77dca5091b4c9cb5558e31ef3d4255087d", "url": "https://github.com/prestodb/presto/commit/b042ac77dca5091b4c9cb5558e31ef3d4255087d", "message": "Enable common sub expression optimization in PageFunctionCompiler filter", "committedDate": "2020-04-30T22:24:38Z", "type": "forcePushed"}]}