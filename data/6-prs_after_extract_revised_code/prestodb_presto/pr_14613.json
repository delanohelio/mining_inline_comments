{"pr_number": 14613, "pr_title": "Register kryo classes", "pr_createdAt": "2020-06-04T20:56:00Z", "pr_url": "https://github.com/prestodb/presto/pull/14613", "timeline": [{"oid": "8df13b281481a66c94fb033722dc1aac3d023895", "url": "https://github.com/prestodb/presto/commit/8df13b281481a66c94fb033722dc1aac3d023895", "message": "Update spark-core to 2.0.2-6\n\nThe new version contains non relocated kryo classes", "committedDate": "2020-06-04T20:54:06Z", "type": "commit"}, {"oid": "84774806752a84b23b965b12345a702f7f9066cb", "url": "https://github.com/prestodb/presto/commit/84774806752a84b23b965b12345a702f7f9066cb", "message": "Register Kryo classes for more efficient serialization\n\nWhen classes are not registered, Kryo falls back to inlining fully specified\nclass name, similar to standard Java serialization", "committedDate": "2020-06-04T20:56:30Z", "type": "commit"}, {"oid": "84774806752a84b23b965b12345a702f7f9066cb", "url": "https://github.com/prestodb/presto/commit/84774806752a84b23b965b12345a702f7f9066cb", "message": "Register Kryo classes for more efficient serialization\n\nWhen classes are not registered, Kryo falls back to inlining fully specified\nclass name, similar to standard Java serialization", "committedDate": "2020-06-04T20:56:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1MTA3OQ==", "url": "https://github.com/prestodb/presto/pull/14613#discussion_r435751079", "bodyText": "is this the standard trick in SparkConf? (set a marker )", "author": "wenleix", "createdAt": "2020-06-05T07:54:25Z", "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkConfInitializer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.classloader_interface;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+public class PrestoSparkConfInitializer\n+{\n+    private static final String INITIALIZED_MARKER = \"presto.spark.conf.initialized\";\n+\n+    private PrestoSparkConfInitializer() {}\n+\n+    public static void initialize(SparkConf sparkConf)\n+    {\n+        if (sparkConf.get(INITIALIZED_MARKER, null) != null) {", "originalCommit": "84774806752a84b23b965b12345a702f7f9066cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MTA1Nw==", "url": "https://github.com/prestodb/presto/pull/14613#discussion_r435991057", "bodyText": "I don't know.\nLet me elaborate on the problem I'm trying to solve.\nThe SparkConf must be initialized before the SparkContext is created. The PrestoSparkRunner accepts the SparkContext itself. The SparkContext must be pre-initialized. This check is needed to enforce that the SparkConf is properly initialized prior creating the SparkContext", "author": "arhimondr", "createdAt": "2020-06-05T15:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1MTA3OQ=="}], "type": "inlineReview", "revised_code": null}]}