{"pr_number": 15049, "pr_title": "Adds option to read map entries with null keys from orc file", "pr_createdAt": "2020-08-19T00:22:41Z", "pr_url": "https://github.com/prestodb/presto/pull/15049", "timeline": [{"oid": "2a652b5a396c122e6b74251866d61ad2b42b7e85", "url": "https://github.com/prestodb/presto/commit/2a652b5a396c122e6b74251866d61ad2b42b7e85", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-19T00:32:39Z", "type": "forcePushed"}, {"oid": "c021236330250861b08e8a75a83c8539a81791af", "url": "https://github.com/prestodb/presto/commit/c021236330250861b08e8a75a83c8539a81791af", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-19T04:25:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MDgwMQ==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r473280801", "bodyText": "The members of OrcReaderOptions are not all meant for the StreamReaders. The zstdJniDecompressionEnabled is for the decompressor in OrcReader. In line 261-263, the 3 relevant members of the options are passed to the OrcRecordReader and StreamReaders already. Now you pass the whole option again. Can you take a look at how legacyMapSubscript is passed to the SelectiveXXXStreamReader's and use that way?", "author": "yingsu00", "createdAt": "2020-08-19T19:52:08Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java", "diffHunk": "@@ -266,7 +266,8 @@ public OrcBatchRecordReader createBatchRecordReader(\n                 writeValidation,\n                 initialBatchSize,\n                 stripeMetadataSource,\n-                cacheable);\n+                cacheable,\n+                orcReaderOptions);", "originalCommit": "c021236330250861b08e8a75a83c8539a81791af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2MjgzNQ==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r473362835", "bodyText": "@yingsu00 My intention was to avoid passing yet another boolean flag through multiple layers as I usually find it error prone: parameters of the same type may be passed in the wrong order and compiler won't complain. You're right that not all members OrcReaderOptions are required for StreamReaders (interface segregation principle violation) but I thought OrcReaderOptions is small enough to not be a concern for now. To make it a bit more attractive, I removed maxMergeDistance/tinyStripeThreshold/maxBlockSize ctor parameters in favor of OrcReaderOptions :)\nBtw I don't have strong opinion so I'm fine to use boolean flag instead if it's your preference.", "author": "borovsky-d", "createdAt": "2020-08-19T21:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MDgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NTY0MA==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r474845640", "bodyText": "Partially agree with @yingsu00. Class like OrcReader could take orcReaderOptions. But not for OrcStreamReader where most of the flags are not used. If you want, feel free to create a new class OrcStreamReaderOptions", "author": "highker", "createdAt": "2020-08-21T17:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MDgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ced1819883832f027699fd3d23146fa3076b1b95", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\nindex 84c5a34f5c..878a1d5b94 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\n\n@@ -258,9 +258,6 @@ public class OrcReader\n                 requireNonNull(hiveStorageTimeZone, \"hiveStorageTimeZone is null\"),\n                 hiveWriterVersion,\n                 metadataReader,\n-                orcReaderOptions.getMaxMergeDistance(),\n-                orcReaderOptions.getTinyStripeThreshold(),\n-                orcReaderOptions.getMaxBlockSize(),\n                 footer.getUserMetadata(),\n                 systemMemoryUsage.newOrcAggregatedMemoryContext(),\n                 writeValidation,\n"}}, {"oid": "ced1819883832f027699fd3d23146fa3076b1b95", "url": "https://github.com/prestodb/presto/commit/ced1819883832f027699fd3d23146fa3076b1b95", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-19T22:01:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NjEwMg==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r474846102", "bodyText": "Let's put mapNullKeysEnabled right after hiveStorageTimeZone to make sure the flags are gathered together. Or gather them into OrcStreamReaderOptions as suggested above.", "author": "highker", "createdAt": "2020-08-21T17:58:44Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/BatchStreamReaders.java", "diffHunk": "@@ -25,7 +26,7 @@ private BatchStreamReaders()\n     {\n     }\n \n-    public static BatchStreamReader createStreamReader(Type type, StreamDescriptor streamDescriptor, DateTimeZone hiveStorageTimeZone, OrcAggregatedMemoryContext systemMemoryContext)\n+    public static BatchStreamReader createStreamReader(Type type, StreamDescriptor streamDescriptor, DateTimeZone hiveStorageTimeZone, OrcAggregatedMemoryContext systemMemoryContext, OrcReaderOptions options)", "originalCommit": "ced1819883832f027699fd3d23146fa3076b1b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2767bd8a468c2f928a227171803be015b85a1524", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/BatchStreamReaders.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/BatchStreamReaders.java\nindex 57f90ce534..b92d99e59f 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/BatchStreamReaders.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/BatchStreamReaders.java\n\n@@ -26,7 +26,7 @@ public final class BatchStreamReaders\n     {\n     }\n \n-    public static BatchStreamReader createStreamReader(Type type, StreamDescriptor streamDescriptor, DateTimeZone hiveStorageTimeZone, OrcAggregatedMemoryContext systemMemoryContext, OrcReaderOptions options)\n+    public static BatchStreamReader createStreamReader(Type type, StreamDescriptor streamDescriptor, DateTimeZone hiveStorageTimeZone, OrcRecordReaderOptions options, OrcAggregatedMemoryContext systemMemoryContext)\n             throws OrcCorruptionException\n     {\n         switch (streamDescriptor.getOrcTypeKind()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0Nzg3Mw==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r474847873", "bodyText": "move this logic out of this function. Maybe have an if/else on if (mapNullKeysEnabled) on where you create keyValueBlock .", "author": "highker", "createdAt": "2020-08-21T18:02:19Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/MapDirectBatchStreamReader.java", "diffHunk": "@@ -159,21 +166,21 @@ public Block readBlock()\n             values = valueType.createBlockBuilder(null, 1).build();\n         }\n \n-        Block[] keyValueBlock = createKeyValueBlock(nextBatchSize, keys, values, offsetVector);\n+        Block[] keyValueBlock = createKeyValueBlock(nextBatchSize, keys, values, offsetVector, options.mapNullKeysEnabled());\n \n         convertLengthVectorToOffsetVector(offsetVector);\n \n-        Block block = mapType.createBlockFromKeyValue(nextBatchSize, Optional.ofNullable(nullVector), offsetVector, keyValueBlock[0], keyValueBlock[1]);\n+        Block block = type.createBlockFromKeyValue(nextBatchSize, Optional.ofNullable(nullVector), offsetVector, keyValueBlock[0], keyValueBlock[1]);\n \n         readOffset = 0;\n         nextBatchSize = 0;\n \n         return block;\n     }\n \n-    private static Block[] createKeyValueBlock(int positionCount, Block keys, Block values, int[] lengths)\n+    private static Block[] createKeyValueBlock(int positionCount, Block keys, Block values, int[] lengths, boolean mapNullKeysEnabled)\n     {\n-        if (!hasNull(keys)) {\n+        if (mapNullKeysEnabled || !hasNull(keys)) {\n             return new Block[] {keys, values};\n         }", "originalCommit": "ced1819883832f027699fd3d23146fa3076b1b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fa69c9da6eb1062b1006b4c7a0a8d65f346e15", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/MapDirectBatchStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/MapDirectBatchStreamReader.java\nindex c3a8614b24..dc4faa5ba5 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/MapDirectBatchStreamReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/MapDirectBatchStreamReader.java\n\n@@ -166,7 +166,9 @@ public class MapDirectBatchStreamReader\n             values = valueType.createBlockBuilder(null, 1).build();\n         }\n \n-        Block[] keyValueBlock = createKeyValueBlock(nextBatchSize, keys, values, offsetVector, options.mapNullKeysEnabled());\n+        Block[] keyValueBlock = options.mapNullKeysEnabled()\n+                ? new Block[] {keys, values}\n+                : filterOutNullKeys(nextBatchSize, keys, values, offsetVector);\n \n         convertLengthVectorToOffsetVector(offsetVector);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1MDU3NQ==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r474850575", "bodyText": "static. Same for the two functions below", "author": "highker", "createdAt": "2020-08-21T18:08:30Z", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.ColumnarMap;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n+import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n+import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n+import org.apache.hadoop.io.Writable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.util.HashMap;\n+\n+import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n+import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.orc.OrcEncoding.ORC;\n+import static com.facebook.presto.orc.OrcReader.INITIAL_BATCH_SIZE;\n+import static com.facebook.presto.orc.OrcTester.Format.ORC_12;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createOrcRecordWriter;\n+import static com.facebook.presto.orc.OrcTester.createSettableStructObjectInspector;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestOrcMapNullKey\n+{\n+    private static final TypeManager TYPE_MANAGER = new TypeRegistry();\n+\n+    public TestOrcMapNullKey()\n+    {\n+        // Associate TYPE_MANAGER with a function manager.\n+        new FunctionManager(TYPE_MANAGER, new BlockEncodingManager(TYPE_MANAGER), new FeaturesConfig());\n+    }\n+\n+    @DataProvider(name = \"mapNullKeysEnabled\")\n+    public static Object[][] primeNumbers()\n+    {\n+        return new Object[][] {{true}, {false}};\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithBatchReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();\n+\n+        HashMap<Long, Long> expectedToRead = new HashMap<>(map);\n+        if (!mapNullKeysEnabled) {\n+            expectedToRead.remove(null);\n+        }\n+\n+        try (TempFile tempFile = createSingleColumnMapFileWithNullValues(mapType, map)) {\n+            try (OrcBatchRecordReader reader = createCustomOrcRecordReader(tempFile, ORC, OrcPredicate.TRUE, mapType, INITIAL_BATCH_SIZE, false, mapNullKeysEnabled)) {\n+                int batchSize = reader.nextBatch();\n+                assertEquals(batchSize, 1);\n+\n+                assertEquals(readMap(reader.readBlock(0), 0), expectedToRead);\n+\n+                assertEquals(reader.nextBatch(), -1);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithSelectiveReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();\n+\n+        HashMap<Long, Long> expectedToRead = new HashMap<>(map);\n+        if (!mapNullKeysEnabled) {\n+            expectedToRead.remove(null);\n+        }\n+\n+        try (TempFile tempFile = createSingleColumnMapFileWithNullValues(mapType, map)) {\n+            try (OrcSelectiveRecordReader reader = createCustomOrcSelectiveRecordReader(\n+                    tempFile,\n+                    ORC,\n+                    OrcPredicate.TRUE,\n+                    mapType,\n+                    INITIAL_BATCH_SIZE,\n+                    mapNullKeysEnabled)) {\n+                assertEquals(readMap(reader.getNextPage().getBlock(0).getLoadedBlock(), 0), expectedToRead);\n+\n+                assertNull(reader.getNextPage());\n+            }\n+        }\n+    }\n+\n+    private HashMap<Long, Long> generateMap()", "originalCommit": "ced1819883832f027699fd3d23146fa3076b1b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2767bd8a468c2f928a227171803be015b85a1524", "chunk": "diff --git a/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java b/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\nindex 9ae17b98df..038eb17f84 100644\n--- a/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\n+++ b/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\n\n@@ -120,7 +120,7 @@ public class TestOrcMapNullKey\n         }\n     }\n \n-    private HashMap<Long, Long> generateMap()\n+    private static HashMap<Long, Long> generateMap()\n     {\n         HashMap<Long, Long> map = new HashMap<>();\n \n"}}, {"oid": "2767bd8a468c2f928a227171803be015b85a1524", "url": "https://github.com/prestodb/presto/commit/2767bd8a468c2f928a227171803be015b85a1524", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-21T18:47:11Z", "type": "forcePushed"}, {"oid": "23fa69c9da6eb1062b1006b4c7a0a8d65f346e15", "url": "https://github.com/prestodb/presto/commit/23fa69c9da6eb1062b1006b4c7a0a8d65f346e15", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-21T19:18:46Z", "type": "forcePushed"}, {"oid": "e96b277b4b0086683fdece5cf05317eefe933acb", "url": "https://github.com/prestodb/presto/commit/e96b277b4b0086683fdece5cf05317eefe933acb", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-21T19:32:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMzM3Nw==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r476813377", "bodyText": "nit : Map<Long, Long> map = generateMap();", "author": "bhhari", "createdAt": "2020-08-25T22:46:08Z", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.ColumnarMap;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n+import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n+import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n+import org.apache.hadoop.io.Writable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.util.HashMap;\n+\n+import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n+import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.orc.OrcEncoding.ORC;\n+import static com.facebook.presto.orc.OrcReader.INITIAL_BATCH_SIZE;\n+import static com.facebook.presto.orc.OrcTester.Format.ORC_12;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createOrcRecordWriter;\n+import static com.facebook.presto.orc.OrcTester.createSettableStructObjectInspector;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestOrcMapNullKey\n+{\n+    private static final TypeManager TYPE_MANAGER = new TypeRegistry();\n+\n+    public TestOrcMapNullKey()\n+    {\n+        // Associate TYPE_MANAGER with a function manager.\n+        new FunctionManager(TYPE_MANAGER, new BlockEncodingManager(TYPE_MANAGER), new FeaturesConfig());\n+    }\n+\n+    @DataProvider(name = \"mapNullKeysEnabled\")\n+    public static Object[][] primeNumbers()\n+    {\n+        return new Object[][] {{true}, {false}};\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithBatchReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();", "originalCommit": "e96b277b4b0086683fdece5cf05317eefe933acb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c55ddd7fb00bb0904a029738d2dce9df8df4a13d", "chunk": "diff --git a/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java b/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\nindex 038eb17f84..ce876d7c50 100644\n--- a/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\n+++ b/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\n\n@@ -36,6 +36,7 @@ import org.testng.annotations.Test;\n import java.io.IOException;\n import java.lang.invoke.MethodHandle;\n import java.util.HashMap;\n+import java.util.Map;\n \n import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxNTE3OQ==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r476815179", "bodyText": "just use Map", "author": "bhhari", "createdAt": "2020-08-25T22:48:51Z", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.ColumnarMap;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n+import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n+import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n+import org.apache.hadoop.io.Writable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.util.HashMap;\n+\n+import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n+import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.orc.OrcEncoding.ORC;\n+import static com.facebook.presto.orc.OrcReader.INITIAL_BATCH_SIZE;\n+import static com.facebook.presto.orc.OrcTester.Format.ORC_12;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createOrcRecordWriter;\n+import static com.facebook.presto.orc.OrcTester.createSettableStructObjectInspector;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestOrcMapNullKey\n+{\n+    private static final TypeManager TYPE_MANAGER = new TypeRegistry();\n+\n+    public TestOrcMapNullKey()\n+    {\n+        // Associate TYPE_MANAGER with a function manager.\n+        new FunctionManager(TYPE_MANAGER, new BlockEncodingManager(TYPE_MANAGER), new FeaturesConfig());\n+    }\n+\n+    @DataProvider(name = \"mapNullKeysEnabled\")\n+    public static Object[][] primeNumbers()\n+    {\n+        return new Object[][] {{true}, {false}};\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithBatchReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();\n+\n+        HashMap<Long, Long> expectedToRead = new HashMap<>(map);\n+        if (!mapNullKeysEnabled) {\n+            expectedToRead.remove(null);\n+        }\n+\n+        try (TempFile tempFile = createSingleColumnMapFileWithNullValues(mapType, map)) {\n+            try (OrcBatchRecordReader reader = createCustomOrcRecordReader(tempFile, ORC, OrcPredicate.TRUE, mapType, INITIAL_BATCH_SIZE, false, mapNullKeysEnabled)) {\n+                int batchSize = reader.nextBatch();\n+                assertEquals(batchSize, 1);\n+\n+                assertEquals(readMap(reader.readBlock(0), 0), expectedToRead);\n+\n+                assertEquals(reader.nextBatch(), -1);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    public void testMapTypeWithNullsWithSelectiveReader(boolean mapNullKeysEnabled)\n+            throws Exception\n+    {\n+        MapType mapType = createMapType(BIGINT, BIGINT);\n+\n+        HashMap<Long, Long> map = generateMap();\n+\n+        HashMap<Long, Long> expectedToRead = new HashMap<>(map);\n+        if (!mapNullKeysEnabled) {\n+            expectedToRead.remove(null);\n+        }\n+\n+        try (TempFile tempFile = createSingleColumnMapFileWithNullValues(mapType, map)) {\n+            try (OrcSelectiveRecordReader reader = createCustomOrcSelectiveRecordReader(\n+                    tempFile,\n+                    ORC,\n+                    OrcPredicate.TRUE,\n+                    mapType,\n+                    INITIAL_BATCH_SIZE,\n+                    mapNullKeysEnabled)) {\n+                assertEquals(readMap(reader.getNextPage().getBlock(0).getLoadedBlock(), 0), expectedToRead);\n+\n+                assertNull(reader.getNextPage());\n+            }\n+        }\n+    }\n+\n+    private static HashMap<Long, Long> generateMap()\n+    {\n+        HashMap<Long, Long> map = new HashMap<>();\n+\n+        for (long i = 0; i < 10; i++) {\n+            map.put(i, i + 1);\n+            map.put(-i, null);\n+        }\n+        map.put(null, 0L);\n+        return map;\n+    }\n+\n+    private static HashMap<Long, Long> readMap(Block block, int rowId)\n+    {\n+        ColumnarMap columnarMap = ColumnarMap.toColumnarMap(block);\n+        assertFalse(columnarMap.isNull(rowId));\n+\n+        Block keysBlock = columnarMap.getKeysBlock();\n+        Block valuesBlock = columnarMap.getValuesBlock();\n+\n+        HashMap<Long, Long> actual = new HashMap<>();", "originalCommit": "e96b277b4b0086683fdece5cf05317eefe933acb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c55ddd7fb00bb0904a029738d2dce9df8df4a13d", "chunk": "diff --git a/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java b/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\nindex 038eb17f84..ce876d7c50 100644\n--- a/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\n+++ b/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\n\n@@ -36,6 +36,7 @@ import org.testng.annotations.Test;\n import java.io.IOException;\n import java.lang.invoke.MethodHandle;\n import java.util.HashMap;\n+import java.util.Map;\n \n import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n"}}, {"oid": "c55ddd7fb00bb0904a029738d2dce9df8df4a13d", "url": "https://github.com/prestodb/presto/commit/c55ddd7fb00bb0904a029738d2dce9df8df4a13d", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-25T23:09:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNjk3Mg==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r477506972", "bodyText": "legacyMapSubscript goes on a new line", "author": "mbasmanova", "createdAt": "2020-08-26T18:36:37Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java", "diffHunk": "@@ -183,7 +180,7 @@ public OrcSelectiveRecordReader(\n                         orcDataSource,\n                         types,\n                         hiveStorageTimeZone,\n-                        legacyMapSubscript,\n+                        options, legacyMapSubscript,", "originalCommit": "c55ddd7fb00bb0904a029738d2dce9df8df4a13d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7402fbc49b12db66cd4e4b33fad1d4be188d44e", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java\nindex d4d94d6919..221ee87b06 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java\n\n@@ -180,7 +180,8 @@ public class OrcSelectiveRecordReader\n                         orcDataSource,\n                         types,\n                         hiveStorageTimeZone,\n-                        options, legacyMapSubscript,\n+                        options,\n+                        legacyMapSubscript,\n                         includedColumns,\n                         outputColumns,\n                         filters,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzc0NA==", "url": "https://github.com/prestodb/presto/pull/15049#discussion_r477507744", "bodyText": "Why primeNumbers? The content is true and false.", "author": "mbasmanova", "createdAt": "2020-08-26T18:38:04Z", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.block.BlockEncodingManager;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.ColumnarMap;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.orc.metadata.CompressionKind;\n+import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n+import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n+import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n+import org.apache.hadoop.io.Writable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.facebook.presto.common.block.MethodHandleUtil.compose;\n+import static com.facebook.presto.common.block.MethodHandleUtil.nativeValueGetter;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.orc.OrcEncoding.ORC;\n+import static com.facebook.presto.orc.OrcReader.INITIAL_BATCH_SIZE;\n+import static com.facebook.presto.orc.OrcTester.Format.ORC_12;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createCustomOrcSelectiveRecordReader;\n+import static com.facebook.presto.orc.OrcTester.createOrcRecordWriter;\n+import static com.facebook.presto.orc.OrcTester.createSettableStructObjectInspector;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestOrcMapNullKey\n+{\n+    private static final TypeManager TYPE_MANAGER = new TypeRegistry();\n+\n+    public TestOrcMapNullKey()\n+    {\n+        // Associate TYPE_MANAGER with a function manager.\n+        new FunctionManager(TYPE_MANAGER, new BlockEncodingManager(TYPE_MANAGER), new FeaturesConfig());\n+    }\n+\n+    @DataProvider(name = \"mapNullKeysEnabled\")\n+    public static Object[][] primeNumbers()", "originalCommit": "c55ddd7fb00bb0904a029738d2dce9df8df4a13d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7402fbc49b12db66cd4e4b33fad1d4be188d44e", "chunk": "diff --git a/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java b/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\nindex ce876d7c50..419c9517ee 100644\n--- a/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\n+++ b/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcMapNullKey.java\n\n@@ -63,12 +63,12 @@ public class TestOrcMapNullKey\n     }\n \n     @DataProvider(name = \"mapNullKeysEnabled\")\n-    public static Object[][] primeNumbers()\n+    public static Object[][] mapNullKeysEnabledValues()\n     {\n         return new Object[][] {{true}, {false}};\n     }\n \n-    @Test(dataProvider = \"mapNullKeysEnabled\")\n+    @Test(dataProvider = \"mapNullKeysEnabledValues\")\n     public void testMapTypeWithNullsWithBatchReader(boolean mapNullKeysEnabled)\n             throws Exception\n     {\n"}}, {"oid": "e7402fbc49b12db66cd4e4b33fad1d4be188d44e", "url": "https://github.com/prestodb/presto/commit/e7402fbc49b12db66cd4e4b33fad1d4be188d44e", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-26T18:48:39Z", "type": "commit"}, {"oid": "e7402fbc49b12db66cd4e4b33fad1d4be188d44e", "url": "https://github.com/prestodb/presto/commit/e7402fbc49b12db66cd4e4b33fad1d4be188d44e", "message": "Adds option to read null map keys from orc file", "committedDate": "2020-08-26T18:48:39Z", "type": "forcePushed"}]}