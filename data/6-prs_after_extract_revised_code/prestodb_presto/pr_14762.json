{"pr_number": 14762, "pr_title": "Add support for DWRF encryption without compression", "pr_createdAt": "2020-07-01T17:23:37Z", "pr_url": "https://github.com/prestodb/presto/pull/14762", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNzUyNg==", "url": "https://github.com/prestodb/presto/pull/14762#discussion_r448517526", "bodyText": "this should still be true, right?", "author": "zzhao0", "createdAt": "2020-07-01T17:37:27Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java", "diffHunk": "@@ -442,46 +439,46 @@ private void flushBufferToOutputStream()\n \n     private void writeChunkToOutputStream(byte[] chunk, int offset, int length)\n     {\n-        if (compressor == null) {\n+        if (compressor == null && !dwrfEncryptor.isPresent()) {\n             compressedOutputStream.write(chunk, offset, length);\n             return;\n         }\n \n-        checkArgument(length <= buffer.length, \"Write chunk length must be less than compression buffer size\");", "originalCommit": "65de5256245c8022c1295ed841d76ec6fd7cb543", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a80e97256d07653693d145ae53e798885f29184", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\nindex 378e9df4b4..dfe0185b71 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\n\n@@ -444,6 +444,8 @@ public class OrcOutputBuffer\n             return;\n         }\n \n+        checkArgument(length <= buffer.length, \"Write chunk length must be less than compression buffer size\");\n+\n         if (compressor != null) {\n             int minCompressionBufferSize = compressor.maxCompressedLength(length);\n             if (compressionBuffer.length < minCompressionBufferSize) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxOTQ5NQ==", "url": "https://github.com/prestodb/presto/pull/14762#discussion_r448519495", "bodyText": "need to add check that the length after encryption does not exceed what the header can hold, ie 2^23", "author": "zzhao0", "createdAt": "2020-07-01T17:41:19Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java", "diffHunk": "@@ -442,46 +439,46 @@ private void flushBufferToOutputStream()\n \n     private void writeChunkToOutputStream(byte[] chunk, int offset, int length)\n     {\n-        if (compressor == null) {\n+        if (compressor == null && !dwrfEncryptor.isPresent()) {\n             compressedOutputStream.write(chunk, offset, length);\n             return;\n         }\n \n-        checkArgument(length <= buffer.length, \"Write chunk length must be less than compression buffer size\");\n-\n-        int minCompressionBufferSize = compressor.maxCompressedLength(length);\n-        if (compressionBuffer.length < minCompressionBufferSize) {\n-            compressionBuffer = new byte[minCompressionBufferSize];\n-        }\n-\n-        int compressedSize = compressor.compress(chunk, offset, length, compressionBuffer, 0, compressionBuffer.length);\n-        if (compressedSize < length) {\n-            if (dwrfEncryptor.isPresent()) {\n-                compressionBuffer = dwrfEncryptor.get().encrypt(compressionBuffer, 0, compressedSize);\n-                compressedSize = compressionBuffer.length;\n+        if (compressor != null) {\n+            int minCompressionBufferSize = compressor.maxCompressedLength(length);\n+            if (compressionBuffer.length < minCompressionBufferSize) {\n+                compressionBuffer = new byte[minCompressionBufferSize];\n             }\n-            int chunkHeader = (compressedSize << 1);\n-            compressedOutputStream.write(chunkHeader & 0x00_00FF);\n-            compressedOutputStream.write((chunkHeader & 0x00_FF00) >> 8);\n-            compressedOutputStream.write((chunkHeader & 0xFF_0000) >> 16);\n-            compressedOutputStream.writeBytes(compressionBuffer, 0, compressedSize);\n-        }\n-        else {\n-            if (dwrfEncryptor.isPresent()) {\n-                chunk = dwrfEncryptor.get().encrypt(chunk, 0, length);\n-                length = chunk.length;\n+            int compressedSize = compressor.compress(chunk, offset, length, compressionBuffer, 0, compressionBuffer.length);\n+            if (compressedSize < length) {\n+                if (dwrfEncryptor.isPresent()) {\n+                    compressionBuffer = dwrfEncryptor.get().encrypt(compressionBuffer, 0, compressedSize);\n+                    compressedSize = compressionBuffer.length;", "originalCommit": "65de5256245c8022c1295ed841d76ec6fd7cb543", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a80e97256d07653693d145ae53e798885f29184", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\nindex 378e9df4b4..dfe0185b71 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\n\n@@ -444,6 +444,8 @@ public class OrcOutputBuffer\n             return;\n         }\n \n+        checkArgument(length <= buffer.length, \"Write chunk length must be less than compression buffer size\");\n+\n         if (compressor != null) {\n             int minCompressionBufferSize = compressor.maxCompressedLength(length);\n             if (compressionBuffer.length < minCompressionBufferSize) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDE1Nw==", "url": "https://github.com/prestodb/presto/pull/14762#discussion_r448520157", "bodyText": "update the exception message to reflect encryption?", "author": "zzhao0", "createdAt": "2020-07-01T17:42:34Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java", "diffHunk": "@@ -208,7 +207,7 @@ public boolean seekToCheckpoint(long checkpoint)\n         int decompressedOffset = decodeDecompressedOffset(checkpoint);\n         boolean discardedBuffer;\n         if (compressedBlockOffset != currentCompressedBlockOffset) {\n-            if (!decompressor.isPresent()) {\n+            if (!decompressor.isPresent() && !dwrfDecryptor.isPresent()) {\n                 throw new OrcCorruptionException(orcDataSourceId, \"Reset stream has a compressed block offset but stream is not compressed\");", "originalCommit": "65de5256245c8022c1295ed841d76ec6fd7cb543", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a80e97256d07653693d145ae53e798885f29184", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java b/presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java\nindex e4216c34a2..3c1fa2d127 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/stream/OrcInputStream.java\n\n@@ -208,7 +208,7 @@ public final class OrcInputStream\n         boolean discardedBuffer;\n         if (compressedBlockOffset != currentCompressedBlockOffset) {\n             if (!decompressor.isPresent() && !dwrfDecryptor.isPresent()) {\n-                throw new OrcCorruptionException(orcDataSourceId, \"Reset stream has a compressed block offset but stream is not compressed\");\n+                throw new OrcCorruptionException(orcDataSourceId, \"Reset stream has a block offset but stream is not compressed or encrypted\");\n             }\n             compressedSliceInput.setPosition(compressedBlockOffset);\n             buffer = new byte[0];\n"}}, {"oid": "2a80e97256d07653693d145ae53e798885f29184", "url": "https://github.com/prestodb/presto/commit/2a80e97256d07653693d145ae53e798885f29184", "message": "Add support for DWRF encryption without compression", "committedDate": "2020-07-06T18:59:37Z", "type": "commit"}, {"oid": "2a80e97256d07653693d145ae53e798885f29184", "url": "https://github.com/prestodb/presto/commit/2a80e97256d07653693d145ae53e798885f29184", "message": "Add support for DWRF encryption without compression", "committedDate": "2020-07-06T18:59:37Z", "type": "forcePushed"}]}