{"pr_number": 14925, "pr_title": "Dynamic filtering planner", "pr_createdAt": "2020-07-30T00:50:04Z", "pr_url": "https://github.com/prestodb/presto/pull/14925", "timeline": [{"oid": "f0c7f2ad3633291e766a9d8d78207428745e32ba", "url": "https://github.com/prestodb/presto/commit/f0c7f2ad3633291e766a9d8d78207428745e32ba", "message": "Add semi join dynamic filter placeholder\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-07-30T03:59:48Z", "type": "forcePushed"}, {"oid": "bc828179a25ea13211ff62a2e78f944966248d7d", "url": "https://github.com/prestodb/presto/commit/bc828179a25ea13211ff62a2e78f944966248d7d", "message": "Remove unsupported dynamic filters\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-07-30T03:49:16Z", "type": "forcePushed"}, {"oid": "3b584bacf94f484fa926f9951d4e49c11c684dde", "url": "https://github.com/prestodb/presto/commit/3b584bacf94f484fa926f9951d4e49c11c684dde", "message": "Remove unsupported dynamic filters\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-07-30T05:58:09Z", "type": "forcePushed"}, {"oid": "424d3fd2d85d6a6638f3f419b6d33c1c3af5e996", "url": "https://github.com/prestodb/presto/commit/424d3fd2d85d6a6638f3f419b6d33c1c3af5e996", "message": "Remove unsupported dynamic filters\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-07-30T07:32:53Z", "type": "forcePushed"}, {"oid": "3ad7354fa2347321360a91ec378e46c7cfe9ae61", "url": "https://github.com/prestodb/presto/commit/3ad7354fa2347321360a91ec378e46c7cfe9ae61", "message": "Remove unsupported dynamic filters\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-07-30T08:44:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4MDQwMQ==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463380401", "bodyText": "placeholder", "author": "highker", "createdAt": "2020-07-31T02:59:25Z", "path": "presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.expressions;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.VARCHAR;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.extractConjuncts;\n+import static com.facebook.presto.spi.function.SqlFunctionVisibility.HIDDEN;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class DynamicFilters\n+{\n+    private DynamicFilters() {}\n+\n+    public static DynamicFilterExtractResult extractDynamicFilters(RowExpression expression)\n+    {\n+        List<RowExpression> conjuncts = extractConjuncts(expression);\n+\n+        ImmutableList.Builder<RowExpression> staticConjuncts = ImmutableList.builder();\n+        ImmutableList.Builder<DynamicFilterPlaceholder> dynamicConjuncts = ImmutableList.builder();\n+\n+        for (RowExpression conjunct : conjuncts) {\n+            Optional<DynamicFilterPlaceholder> descriptor = getPlaceholder(conjunct);", "originalCommit": "58a7947fea4e168dba17e797683bfe25cd908a36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "940b453b0c633f0d76d4b52e4a5daa80327532dd", "chunk": "diff --git a/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java b/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\nindex 3fdbaae103..b82bce03b9 100644\n--- a/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\n+++ b/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\n\n@@ -48,9 +48,9 @@ public final class DynamicFilters\n         ImmutableList.Builder<DynamicFilterPlaceholder> dynamicConjuncts = ImmutableList.builder();\n \n         for (RowExpression conjunct : conjuncts) {\n-            Optional<DynamicFilterPlaceholder> descriptor = getPlaceholder(conjunct);\n-            if (descriptor.isPresent()) {\n-                dynamicConjuncts.add(descriptor.get());\n+            Optional<DynamicFilterPlaceholder> placeholder = getPlaceholder(conjunct);\n+            if (placeholder.isPresent()) {\n+                dynamicConjuncts.add(placeholder.get());\n             }\n             else {\n                 staticConjuncts.add(conjunct);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMDk1MQ==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463430951", "bodyText": "Remove this", "author": "highker", "createdAt": "2020-07-31T06:36:07Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java", "diffHunk": "@@ -119,6 +122,19 @@ public FilteringPageSource(\n         }\n         else {\n             RowExpression expression = replaceExpression(optimizedRemainingPredicate, variableToInput);\n+\n+            DynamicFilters.DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(expression);\n+\n+            // Extract the static ones\n+            // TODO: james, and() is a short cut hack\n+            expression = and(extractDynamicFilterResult.getStaticConjuncts());\n+\n+            // TODO: Execution must be plugged in here\n+            List<DynamicFilters.DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilterResult.getDynamicConjuncts();\n+            if (!dynamicFilters.isEmpty()) {\n+                // translate filter function\n+            }", "originalCommit": "a53deab5bcd6241699920006d4dcaaecc121a5a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "940b453b0c633f0d76d4b52e4a5daa80327532dd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java\nindex 75e5bc93c9..c00d03ab21 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java\n\n@@ -125,16 +125,9 @@ public class FilteringPageSource\n \n             DynamicFilters.DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(expression);\n \n-            // Extract the static ones\n-            // TODO: james, and() is a short cut hack\n+            // dynamic filter will be added through subfield pushdown\n             expression = and(extractDynamicFilterResult.getStaticConjuncts());\n \n-            // TODO: Execution must be plugged in here\n-            List<DynamicFilters.DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilterResult.getDynamicConjuncts();\n-            if (!dynamicFilters.isEmpty()) {\n-                // translate filter function\n-            }\n-\n             this.filterFunction = new FilterFunction(\n                     session.getSqlFunctionProperties(),\n                     rowExpressionService.getDeterminismEvaluator().isDeterministic(expression),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMTEzOQ==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463431139", "bodyText": "Remove the comment; just leave the following line. Add a comment: \"dynamic filter will be added through subfield pushdown\"", "author": "highker", "createdAt": "2020-07-31T06:36:41Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java", "diffHunk": "@@ -119,6 +122,19 @@ public FilteringPageSource(\n         }\n         else {\n             RowExpression expression = replaceExpression(optimizedRemainingPredicate, variableToInput);\n+\n+            DynamicFilters.DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(expression);\n+\n+            // Extract the static ones\n+            // TODO: james, and() is a short cut hack", "originalCommit": "a53deab5bcd6241699920006d4dcaaecc121a5a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "940b453b0c633f0d76d4b52e4a5daa80327532dd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java\nindex 75e5bc93c9..c00d03ab21 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java\n\n@@ -125,16 +125,9 @@ public class FilteringPageSource\n \n             DynamicFilters.DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(expression);\n \n-            // Extract the static ones\n-            // TODO: james, and() is a short cut hack\n+            // dynamic filter will be added through subfield pushdown\n             expression = and(extractDynamicFilterResult.getStaticConjuncts());\n \n-            // TODO: Execution must be plugged in here\n-            List<DynamicFilters.DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilterResult.getDynamicConjuncts();\n-            if (!dynamicFilters.isEmpty()) {\n-                // translate filter function\n-            }\n-\n             this.filterFunction = new FilterFunction(\n                     session.getSqlFunctionProperties(),\n                     rowExpressionService.getDeterminismEvaluator().isDeterministic(expression),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMTI1MA==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463431250", "bodyText": "Remove", "author": "highker", "createdAt": "2020-07-31T06:36:58Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -625,6 +629,18 @@ private static OrcPredicate toOrcPredicate(TupleDomain<Subfield> domainPredicate\n             return filterFunctions.build();\n         }\n \n+        DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(filter);\n+\n+        // Extract the static ones\n+        // TODO: james, and() is a short cut hack\n+        filter = and(extractDynamicFilterResult.getStaticConjuncts());\n+\n+        // TODO: Execution must be plugged in here\n+        List<DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilterResult.getDynamicConjuncts();\n+        if (!dynamicFilters.isEmpty()) {\n+            // translate filter function\n+        }", "originalCommit": "a53deab5bcd6241699920006d4dcaaecc121a5a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "940b453b0c633f0d76d4b52e4a5daa80327532dd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\nindex b7dd6128a1..e71dec5655 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\n\n@@ -631,16 +631,9 @@ public class OrcSelectivePageSourceFactory\n \n         DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(filter);\n \n-        // Extract the static ones\n-        // TODO: james, and() is a short cut hack\n+        // dynamic filter will be added through subfield pushdown\n         filter = and(extractDynamicFilterResult.getStaticConjuncts());\n \n-        // TODO: Execution must be plugged in here\n-        List<DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilterResult.getDynamicConjuncts();\n-        if (!dynamicFilters.isEmpty()) {\n-            // translate filter function\n-        }\n-\n         if (!isAdaptiveFilterReorderingEnabled(session)) {\n             filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), filter).get()));\n             return filterFunctions.build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMTMwMQ==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463431301", "bodyText": "Remove the comment; just leave the following line. Add a comment: \"dynamic filter will be added through subfield pushdown\"", "author": "highker", "createdAt": "2020-07-31T06:37:08Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -625,6 +629,18 @@ private static OrcPredicate toOrcPredicate(TupleDomain<Subfield> domainPredicate\n             return filterFunctions.build();\n         }\n \n+        DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(filter);\n+\n+        // Extract the static ones\n+        // TODO: james, and() is a short cut hack", "originalCommit": "a53deab5bcd6241699920006d4dcaaecc121a5a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "940b453b0c633f0d76d4b52e4a5daa80327532dd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\nindex b7dd6128a1..e71dec5655 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\n\n@@ -631,16 +631,9 @@ public class OrcSelectivePageSourceFactory\n \n         DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(filter);\n \n-        // Extract the static ones\n-        // TODO: james, and() is a short cut hack\n+        // dynamic filter will be added through subfield pushdown\n         filter = and(extractDynamicFilterResult.getStaticConjuncts());\n \n-        // TODO: Execution must be plugged in here\n-        List<DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilterResult.getDynamicConjuncts();\n-        if (!dynamicFilters.isEmpty()) {\n-            // translate filter function\n-        }\n-\n         if (!isAdaptiveFilterReorderingEnabled(session)) {\n             filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), filter).get()));\n             return filterFunctions.build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMjM4NA==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463432384", "bodyText": "We nee to fix that. We need an extra commit to address RowExpressionVerifier", "author": "highker", "createdAt": "2020-07-31T06:40:30Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/DynamicFilterMatcher.java", "diffHunk": "@@ -63,12 +71,26 @@ public MatchResult match(JoinNode joinNode, SymbolAliases symbolAliases)\n         return new MatchResult(match());\n     }\n \n-    public MatchResult match(FilterNode filterNode, SymbolAliases symbolAliases)\n+    private MatchResult match(FilterNode filterNode, Session session, Metadata metadata, SymbolAliases symbolAliases)\n     {\n         checkState(this.filterNode == null, \"filterNode must be null at this point\");\n         this.filterNode = filterNode;\n         this.symbolAliases = symbolAliases;\n-        return new MatchResult(match());\n+\n+        LogicalRowExpressions logicalRowExpressions = new LogicalRowExpressions(\n+                new RowExpressionDeterminismEvaluator(metadata.getFunctionManager()),\n+                new FunctionResolution(metadata.getFunctionManager()),\n+                metadata.getFunctionManager());\n+        boolean staticFilterMatches = expectedStaticFilter.map(filter -> {\n+            RowExpressionVerifier verifier = new RowExpressionVerifier(symbolAliases, metadata, session);\n+            RowExpression staticFilter = logicalRowExpressions.combineConjuncts(extractDynamicFilters(filterNode.getPredicate()).getStaticConjuncts());\n+\n+            // TODO: figure out translation\n+            // return verifier.process(staticFilter, filter);\n+            return true;", "originalCommit": "3ad7354fa2347321360a91ec378e46c7cfe9ae61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "940b453b0c633f0d76d4b52e4a5daa80327532dd", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/DynamicFilterMatcher.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/DynamicFilterMatcher.java\nindex 7941bef79d..c06387a0a1 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/DynamicFilterMatcher.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/DynamicFilterMatcher.java\n\n@@ -84,10 +84,7 @@ public class DynamicFilterMatcher\n         boolean staticFilterMatches = expectedStaticFilter.map(filter -> {\n             RowExpressionVerifier verifier = new RowExpressionVerifier(symbolAliases, metadata, session);\n             RowExpression staticFilter = logicalRowExpressions.combineConjuncts(extractDynamicFilters(filterNode.getPredicate()).getStaticConjuncts());\n-\n-            // TODO: figure out translation\n-            // return verifier.process(staticFilter, filter);\n-            return true;\n+            return verifier.process(filter, staticFilter);\n         }).orElse(true);\n \n         return new MatchResult(match() && staticFilterMatches);\n"}}, {"oid": "940b453b0c633f0d76d4b52e4a5daa80327532dd", "url": "https://github.com/prestodb/presto/commit/940b453b0c633f0d76d4b52e4a5daa80327532dd", "message": "Remove unsupported dynamic filters\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-02T00:01:44Z", "type": "forcePushed"}, {"oid": "06a40c3150c086a893d43c6ad722b3c5ed8dd13b", "url": "https://github.com/prestodb/presto/commit/06a40c3150c086a893d43c6ad722b3c5ed8dd13b", "message": "Add session properties for dynamic filtering\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-02T00:04:21Z", "type": "commit"}, {"oid": "a2fec0f4131a0d344e6e34dfad0439aff66abedf", "url": "https://github.com/prestodb/presto/commit/a2fec0f4131a0d344e6e34dfad0439aff66abedf", "message": "Introduce DynamicFilter placeholder and its builtin function\n\nIntroduce dynamic filter placeholders  Add placeholders in the query plan for\npreparation of converting them into actual filters during runtime.\nThe placeholders live in the join node, scan filter node, and the pushdown filters\nin Hive ORC reader.\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-02T00:04:21Z", "type": "commit"}, {"oid": "85b0af42a60bd7e5f7aac77a67140fc5806eff71", "url": "https://github.com/prestodb/presto/commit/85b0af42a60bd7e5f7aac77a67140fc5806eff71", "message": "Remove unsupported dynamic filters\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-02T00:04:21Z", "type": "forcePushed"}, {"oid": "9c1428702aebd07ee0a5d4e562afcc55f74cbec3", "url": "https://github.com/prestodb/presto/commit/9c1428702aebd07ee0a5d4e562afcc55f74cbec3", "message": "Extract dynamic filters in Hive ORC reader\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-02T00:06:42Z", "type": "forcePushed"}, {"oid": "77c0cbd285ab0b26c9c8bc88fb77fe867563a513", "url": "https://github.com/prestodb/presto/commit/77c0cbd285ab0b26c9c8bc88fb77fe867563a513", "message": "Introduce dynamicFilters into JoinNode and PlanPrinter\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-02T02:04:46Z", "type": "commit"}, {"oid": "b6352e5cce2e7b39ce075944a346971989a0bef9", "url": "https://github.com/prestodb/presto/commit/b6352e5cce2e7b39ce075944a346971989a0bef9", "message": "Generate DynamicFilter in optimization and cost calculation process\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-02T02:04:46Z", "type": "commit"}, {"oid": "44515ea683a668f21492681e01b5e7fc0cab3626", "url": "https://github.com/prestodb/presto/commit/44515ea683a668f21492681e01b5e7fc0cab3626", "message": "Extract dynamic filters in Hive ORC reader\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-02T02:04:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTU4Ng==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464529586", "bodyText": "missing package statement package com.facebook.presto.sql.planner;", "author": "highker", "createdAt": "2020-08-03T16:39:21Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "originalCommit": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bcb59a49f1d78ffe11ba80fb2cf3bdc77add928", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\nindex dedde99ace..5c6beb956e 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\n\n@@ -11,8 +11,12 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package com.facebook.presto.sql.planner;\n+\n import com.facebook.presto.spi.plan.FilterNode;\n import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.facebook.presto.sql.planner.plan.EnforceSingleRowNode;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDgwOA==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464530808", "bodyText": "one param per line", "author": "highker", "createdAt": "2020-08-03T16:41:39Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyNot;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+\n+public class TestDynamicFilter\n+        extends BasePlanTest\n+{\n+    TestDynamicFilter()\n+    {\n+        // in order to test testUncorrelatedSubqueries with Dynamic Filtering, enable it\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    public void testNonInnerJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o LEFT JOIN lineitem l ON l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(LEFT,\n+                                ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n+                                project(\n+                                        tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),\n+                                exchange(\n+                                        project(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(\"LINEITEM_OK\", \"orderkey\")))))));\n+    }\n+\n+    @Test\n+    public void testEmptyJoinCriteria()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o CROSS JOIN lineitem l\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(),", "originalCommit": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bcb59a49f1d78ffe11ba80fb2cf3bdc77add928", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\nindex dedde99ace..5c6beb956e 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\n\n@@ -11,8 +11,12 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package com.facebook.presto.sql.planner;\n+\n import com.facebook.presto.spi.plan.FilterNode;\n import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.facebook.presto.sql.planner.plan.EnforceSingleRowNode;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDg3NA==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464530874", "bodyText": "one param per line", "author": "highker", "createdAt": "2020-08-03T16:41:45Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyNot;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+\n+public class TestDynamicFilter\n+        extends BasePlanTest\n+{\n+    TestDynamicFilter()\n+    {\n+        // in order to test testUncorrelatedSubqueries with Dynamic Filtering, enable it\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    public void testNonInnerJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o LEFT JOIN lineitem l ON l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(LEFT,\n+                                ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n+                                project(\n+                                        tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),\n+                                exchange(\n+                                        project(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(\"LINEITEM_OK\", \"orderkey\")))))));\n+    }\n+\n+    @Test\n+    public void testEmptyJoinCriteria()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o CROSS JOIN lineitem l\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(),\n+                                tableScan(\"orders\"),\n+                                exchange(\n+                                        tableScan(\"lineitem\")))));\n+    }\n+\n+    @Test\n+    public void testJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o, lineitem l WHERE l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),", "originalCommit": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bcb59a49f1d78ffe11ba80fb2cf3bdc77add928", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\nindex dedde99ace..5c6beb956e 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\n\n@@ -11,8 +11,12 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package com.facebook.presto.sql.planner;\n+\n import com.facebook.presto.spi.plan.FilterNode;\n import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.facebook.presto.sql.planner.plan.EnforceSingleRowNode;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDk5Nw==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464530997", "bodyText": "one param per line; same for the entire class", "author": "highker", "createdAt": "2020-08-03T16:41:58Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyNot;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+\n+public class TestDynamicFilter\n+        extends BasePlanTest\n+{\n+    TestDynamicFilter()\n+    {\n+        // in order to test testUncorrelatedSubqueries with Dynamic Filtering, enable it\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    public void testNonInnerJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o LEFT JOIN lineitem l ON l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(LEFT,\n+                                ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n+                                project(\n+                                        tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),\n+                                exchange(\n+                                        project(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(\"LINEITEM_OK\", \"orderkey\")))))));\n+    }\n+\n+    @Test\n+    public void testEmptyJoinCriteria()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o CROSS JOIN lineitem l\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(),\n+                                tableScan(\"orders\"),\n+                                exchange(\n+                                        tableScan(\"lineitem\")))));\n+    }\n+\n+    @Test\n+    public void testJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o, lineitem l WHERE l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n+                                any(\n+                                        node(FilterNode.class,\n+                                                tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\")))),", "originalCommit": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bcb59a49f1d78ffe11ba80fb2cf3bdc77add928", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\nindex dedde99ace..5c6beb956e 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java\n\n@@ -11,8 +11,12 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package com.facebook.presto.sql.planner;\n+\n import com.facebook.presto.spi.plan.FilterNode;\n import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.facebook.presto.sql.planner.plan.EnforceSingleRowNode;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMTQwNw==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464531407", "bodyText": "why this empty constructor?", "author": "highker", "createdAt": "2020-08-03T16:42:45Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdown.java", "diffHunk": "@@ -53,6 +54,15 @@\n public class TestPredicatePushdown\n         extends BasePlanTest\n {\n+    public TestPredicatePushdown()\n+    {\n+    }", "originalCommit": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwMzMzNw==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464803337", "bodyText": "Its original was the implicit default empty constructor\nAfter adding the constructor with parameter, it will make empty constructor disappear if we don't explicitly define it, which would cause our test unable to run", "author": "kewang1024", "createdAt": "2020-08-04T05:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMTQwNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMTYwMw==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464531603", "bodyText": "one param per line", "author": "highker", "createdAt": "2020-08-03T16:43:09Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdownWithDynamicFilter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.facebook.presto.sql.planner.assertions.PlanMatchPattern;\n+import com.facebook.presto.sql.planner.iterative.rule.test.RuleTester;\n+import com.facebook.presto.sql.planner.optimizations.PlanOptimizer;\n+import com.facebook.presto.sql.planner.optimizations.PredicatePushDown;\n+import com.facebook.presto.sql.planner.plan.ExchangeNode;\n+import com.facebook.presto.sql.planner.plan.JoinNode.EquiJoinClause;\n+import com.facebook.presto.sql.planner.plan.WindowNode;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.assignUniqueId;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.expression;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.output;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.DistributionType.PARTITIONED;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.DistributionType.REPLICATED;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+import static com.facebook.presto.sql.relational.Expressions.constant;\n+\n+public class TestPredicatePushdownWithDynamicFilter\n+        extends TestPredicatePushdown\n+{\n+    TestPredicatePushdownWithDynamicFilter()\n+    {\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    @Override\n+    public void testNonStraddlingJoinExpression()\n+    {\n+        assertPlan(\"SELECT * FROM orders JOIN lineitem ON orders.orderkey = lineitem.orderkey AND cast(lineitem.linenumber AS varchar) = '2'\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),", "originalCommit": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bcb59a49f1d78ffe11ba80fb2cf3bdc77add928", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdownWithDynamicFilter.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdownWithDynamicFilter.java\nindex 3c9aafc51a..fb96da5ca5 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdownWithDynamicFilter.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdownWithDynamicFilter.java\n\n@@ -13,43 +13,17 @@\n  */\n package com.facebook.presto.sql.planner;\n \n-import com.facebook.presto.common.function.OperatorType;\n-import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n-import com.facebook.presto.sql.planner.assertions.PlanMatchPattern;\n-import com.facebook.presto.sql.planner.iterative.rule.test.RuleTester;\n-import com.facebook.presto.sql.planner.optimizations.PlanOptimizer;\n-import com.facebook.presto.sql.planner.optimizations.PredicatePushDown;\n-import com.facebook.presto.sql.planner.plan.ExchangeNode;\n-import com.facebook.presto.sql.planner.plan.JoinNode.EquiJoinClause;\n-import com.facebook.presto.sql.planner.plan.WindowNode;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n \n-import java.util.List;\n-import java.util.Optional;\n-\n import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n-import static com.facebook.presto.common.type.IntegerType.INTEGER;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.assignUniqueId;\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.expression;\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.output;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n-import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n-import static com.facebook.presto.sql.planner.plan.JoinNode.DistributionType.PARTITIONED;\n-import static com.facebook.presto.sql.planner.plan.JoinNode.DistributionType.REPLICATED;\n import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n-import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n-import static com.facebook.presto.sql.relational.Expressions.constant;\n \n public class TestPredicatePushdownWithDynamicFilter\n         extends TestPredicatePushdown\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzOTY2MQ==", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464539661", "bodyText": "one param per line", "author": "highker", "createdAt": "2020-08-03T16:58:03Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.sanity;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.expressions.DynamicFilters.DynamicFilterPlaceholder;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.planner.plan.InternalPlanVisitor;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n+import com.facebook.presto.sql.planner.plan.OutputNode;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static com.facebook.presto.expressions.DynamicFilters.extractDynamicFilters;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.difference;\n+import static com.google.common.collect.Sets.intersection;\n+\n+/**\n+ * When dynamic filter assignments are present on a Join node, they should be consumed by a Filter node on it's probe side\n+ */\n+public class DynamicFiltersChecker\n+        implements PlanChecker.Checker\n+{\n+    @Override\n+    public void validate(PlanNode plan, Session session, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n+    {\n+        plan.accept(new InternalPlanVisitor<Set<String>, Void>()\n+        {\n+            @Override\n+            public Set<String> visitPlan(PlanNode node, Void context)\n+            {\n+                Set<String> consumed = new HashSet<>();\n+                for (PlanNode source : node.getSources()) {\n+                    consumed.addAll(source.accept(this, context));\n+                }\n+                return consumed;\n+            }\n+\n+            @Override\n+            public Set<String> visitOutput(OutputNode node, Void context)\n+            {\n+                Set<String> unmatched = visitPlan(node, context);\n+                verify(unmatched.isEmpty(), \"All consumed dynamic filters could not be matched with a join.\");\n+                return unmatched;\n+            }\n+\n+            @Override\n+            public Set<String> visitJoin(JoinNode node, Void context)\n+            {\n+                Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n+                Set<String> consumedProbeSide = node.getLeft().accept(this, context);\n+                verify(difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),", "originalCommit": "2d0855b69eba23af25ea77682f4c3cb2061668c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c02c7300f3bc9e6dfe02832fd9a13f0ffb3352e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\ndeleted file mode 100644\nindex 763d4585af..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\n+++ /dev/null\n\n@@ -1,97 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.planner.sanity;\n-\n-import com.facebook.presto.Session;\n-import com.facebook.presto.execution.warnings.WarningCollector;\n-import com.facebook.presto.expressions.DynamicFilters.DynamicFilterPlaceholder;\n-import com.facebook.presto.metadata.Metadata;\n-import com.facebook.presto.spi.plan.FilterNode;\n-import com.facebook.presto.spi.plan.PlanNode;\n-import com.facebook.presto.sql.parser.SqlParser;\n-import com.facebook.presto.sql.planner.TypeProvider;\n-import com.facebook.presto.sql.planner.plan.InternalPlanVisitor;\n-import com.facebook.presto.sql.planner.plan.JoinNode;\n-import com.facebook.presto.sql.planner.plan.OutputNode;\n-import com.google.common.collect.ImmutableSet;\n-\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import static com.facebook.presto.expressions.DynamicFilters.extractDynamicFilters;\n-import static com.google.common.base.Verify.verify;\n-import static com.google.common.collect.Sets.difference;\n-import static com.google.common.collect.Sets.intersection;\n-\n-/**\n- * When dynamic filter assignments are present on a Join node, they should be consumed by a Filter node on it's probe side\n- */\n-public class DynamicFiltersChecker\n-        implements PlanChecker.Checker\n-{\n-    @Override\n-    public void validate(PlanNode plan, Session session, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n-    {\n-        plan.accept(new InternalPlanVisitor<Set<String>, Void>()\n-        {\n-            @Override\n-            public Set<String> visitPlan(PlanNode node, Void context)\n-            {\n-                Set<String> consumed = new HashSet<>();\n-                for (PlanNode source : node.getSources()) {\n-                    consumed.addAll(source.accept(this, context));\n-                }\n-                return consumed;\n-            }\n-\n-            @Override\n-            public Set<String> visitOutput(OutputNode node, Void context)\n-            {\n-                Set<String> unmatched = visitPlan(node, context);\n-                verify(unmatched.isEmpty(), \"All consumed dynamic filters could not be matched with a join.\");\n-                return unmatched;\n-            }\n-\n-            @Override\n-            public Set<String> visitJoin(JoinNode node, Void context)\n-            {\n-                Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n-                Set<String> consumedProbeSide = node.getLeft().accept(this, context);\n-                verify(difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),\n-                        \"Dynamic filters present in join were not fully consumed by it's probe side.\");\n-\n-                Set<String> consumedBuildSide = node.getRight().accept(this, context);\n-                verify(intersection(currentJoinDynamicFilters, consumedBuildSide).isEmpty());\n-\n-                Set<String> unmatched = new HashSet<>(consumedBuildSide);\n-                unmatched.addAll(consumedProbeSide);\n-                unmatched.removeAll(currentJoinDynamicFilters);\n-                return ImmutableSet.copyOf(unmatched);\n-            }\n-\n-            @Override\n-            public Set<String> visitFilter(FilterNode node, Void context)\n-            {\n-                ImmutableSet.Builder<String> consumed = ImmutableSet.builder();\n-                List<DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilters(node.getPredicate()).getDynamicConjuncts();\n-                dynamicFilters.stream()\n-                        .map(DynamicFilterPlaceholder::getId)\n-                        .forEach(consumed::add);\n-                consumed.addAll(node.getSource().accept(this, context));\n-                return consumed.build();\n-            }\n-        }, null);\n-    }\n-}\n"}}, {"oid": "8bcb59a49f1d78ffe11ba80fb2cf3bdc77add928", "url": "https://github.com/prestodb/presto/commit/8bcb59a49f1d78ffe11ba80fb2cf3bdc77add928", "message": "Extract dynamic filters in Hive ORC reader\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-04T04:46:07Z", "type": "forcePushed"}, {"oid": "9c02c7300f3bc9e6dfe02832fd9a13f0ffb3352e", "url": "https://github.com/prestodb/presto/commit/9c02c7300f3bc9e6dfe02832fd9a13f0ffb3352e", "message": "Add query plan test for DynamicFilter\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-04T05:08:48Z", "type": "commit"}, {"oid": "8af00a024196641575f88ec057c45d223b89b638", "url": "https://github.com/prestodb/presto/commit/8af00a024196641575f88ec057c45d223b89b638", "message": "Remove unsupported dynamic filters\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-04T05:08:50Z", "type": "commit"}, {"oid": "2be1eddad2639d6f7534ce999db1e8cd14250403", "url": "https://github.com/prestodb/presto/commit/2be1eddad2639d6f7534ce999db1e8cd14250403", "message": "Extract dynamic filters in LocalExecutionPlanner\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-04T05:08:50Z", "type": "commit"}, {"oid": "e0a53a86f48fcfa79b46044e52a6fd37c6158332", "url": "https://github.com/prestodb/presto/commit/e0a53a86f48fcfa79b46044e52a6fd37c6158332", "message": "Extract dynamic filters in Hive ORC reader\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-04T05:08:51Z", "type": "commit"}, {"oid": "e0a53a86f48fcfa79b46044e52a6fd37c6158332", "url": "https://github.com/prestodb/presto/commit/e0a53a86f48fcfa79b46044e52a6fd37c6158332", "message": "Extract dynamic filters in Hive ORC reader\n\nCo-Authored-By: James Sun <jamessun@fb.com>\nCo-Authored-By: Andrii Rosa <andriirosa@fb.com>", "committedDate": "2020-08-04T05:08:51Z", "type": "forcePushed"}]}