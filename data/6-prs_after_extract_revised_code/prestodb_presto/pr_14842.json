{"pr_number": 14842, "pr_title": "Add aggregation function SET_UNION", "pr_createdAt": "2020-07-15T17:48:39Z", "pr_url": "https://github.com/prestodb/presto/pull/14842", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwMjE5OA==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r455302198", "bodyText": "static import", "author": "rongrong", "createdAt": "2020-07-15T19:50:17Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java", "diffHunk": "@@ -649,6 +650,7 @@ public BuiltInFunctionNamespaceManager(\n                 .function(ARRAY_CONCAT_FUNCTION)\n                 .functions(ARRAY_CONSTRUCTOR, ARRAY_SUBSCRIPT, ARRAY_TO_JSON, JSON_TO_ARRAY, JSON_STRING_TO_ARRAY)\n                 .function(SET_AGG)\n+                .function(SetUnionFunction.SET_UNION)", "originalCommit": "8b6d04b79adcdc73006b57c3a6e64c01a77ba3af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84b093e8ac21351e520e80c1bd08740ec74df803", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java b/presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java\nindex 953a780ec9..527aeabebd 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java\n\n@@ -650,7 +650,7 @@ public class BuiltInFunctionNamespaceManager\n                 .function(ARRAY_CONCAT_FUNCTION)\n                 .functions(ARRAY_CONSTRUCTOR, ARRAY_SUBSCRIPT, ARRAY_TO_JSON, JSON_TO_ARRAY, JSON_STRING_TO_ARRAY)\n                 .function(SET_AGG)\n-                .function(SetUnionFunction.SET_UNION)\n+                .function(SET_UNION)\n                 .function(new ArrayAggregationFunction(featuresConfig.isLegacyArrayAgg(), featuresConfig.getArrayAggGroupImplementation()))\n                 .functions(new MapSubscriptOperator(featuresConfig.isLegacyMapSubscript()))\n                 .functions(MAP_CONSTRUCTOR, MAP_TO_JSON, JSON_TO_MAP, JSON_STRING_TO_MAP)\n"}}, {"oid": "84b093e8ac21351e520e80c1bd08740ec74df803", "url": "https://github.com/prestodb/presto/commit/84b093e8ac21351e520e80c1bd08740ec74df803", "message": "[WIP] Add new function set_union", "committedDate": "2020-07-15T22:52:55Z", "type": "forcePushed"}, {"oid": "9996396314207985fbedbec3a33417ad2f6fd2f3", "url": "https://github.com/prestodb/presto/commit/9996396314207985fbedbec3a33417ad2f6fd2f3", "message": "Implement new function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-21T18:13:39Z", "type": "forcePushed"}, {"oid": "a019e3a84235ebb8313ba733ebbc51ce0680bcab", "url": "https://github.com/prestodb/presto/commit/a019e3a84235ebb8313ba733ebbc51ce0680bcab", "message": "Implement new function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-21T21:23:39Z", "type": "forcePushed"}, {"oid": "d8d96e2d0d18540019822c3531171fe5d2ae1865", "url": "https://github.com/prestodb/presto/commit/d8d96e2d0d18540019822c3531171fe5d2ae1865", "message": "Implement new function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-21T21:44:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTcxMg==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459079712", "bodyText": "Add an empty line between public static final and static static final variables.", "author": "rongrong", "createdAt": "2020-07-22T20:59:33Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";", "originalCommit": "d8d96e2d0d18540019822c3531171fe5d2ae1865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDExMQ==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660111", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-07-23T18:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "782e041eba2168195467581b40629d4c0427112f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\nindex 7864e7e94d..dec906e8a0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n\n@@ -48,14 +48,14 @@ import static com.facebook.presto.operator.aggregation.AggregationMetadata.Param\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n import static com.facebook.presto.spi.function.Signature.typeVariable;\n import static com.facebook.presto.util.Reflection.methodHandle;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class SetUnionFunction\n         extends SqlAggregationFunction\n {\n     public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n     private static final String NAME = \"set_union\";\n-    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n     private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n     private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MTU2NA==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459081564", "bodyText": "Can we be a little more specific? This function definitely behaves differently from set_agg so they probably should not have exactly the same description?", "author": "rongrong", "createdAt": "2020-07-22T21:03:07Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";", "originalCommit": "d8d96e2d0d18540019822c3531171fe5d2ae1865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDE3NQ==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660175", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-07-23T18:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MTU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "782e041eba2168195467581b40629d4c0427112f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\nindex 7864e7e94d..dec906e8a0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n\n@@ -48,14 +48,14 @@ import static com.facebook.presto.operator.aggregation.AggregationMetadata.Param\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n import static com.facebook.presto.spi.function.Signature.typeVariable;\n import static com.facebook.presto.util.Reflection.methodHandle;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class SetUnionFunction\n         extends SqlAggregationFunction\n {\n     public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n     private static final String NAME = \"set_union\";\n-    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n     private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n     private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NTI1NQ==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459085255", "bodyText": "While the types are correct, the names are misleading. The function input type is array<T> not T. T is the element type and array<T> is both the input type and output type.", "author": "rongrong", "createdAt": "2020-07-22T21:10:19Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),", "originalCommit": "d8d96e2d0d18540019822c3531171fe5d2ae1865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDM0Mw==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660343", "bodyText": "You are totally right, and I have renamed to \"elementType\" and \"arrayType\".", "author": "prithvip", "createdAt": "2020-07-23T18:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NTI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "782e041eba2168195467581b40629d4c0427112f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\nindex 7864e7e94d..dec906e8a0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n\n@@ -48,14 +48,14 @@ import static com.facebook.presto.operator.aggregation.AggregationMetadata.Param\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n import static com.facebook.presto.spi.function.Signature.typeVariable;\n import static com.facebook.presto.util.Reflection.methodHandle;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class SetUnionFunction\n         extends SqlAggregationFunction\n {\n     public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n     private static final String NAME = \"set_union\";\n-    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n     private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n     private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NjA4OQ==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459086089", "bodyText": "It's probably more efficient to just do ImmutableList.of(type.getTypeSignature()) here rather than creating an ImmutableList of one element and iterate through it.", "author": "rongrong", "createdAt": "2020-07-22T21:12:01Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),", "originalCommit": "d8d96e2d0d18540019822c3531171fe5d2ae1865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDQxNw==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660417", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-07-23T18:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NjA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "782e041eba2168195467581b40629d4c0427112f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\nindex 7864e7e94d..dec906e8a0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n\n@@ -48,14 +48,14 @@ import static com.facebook.presto.operator.aggregation.AggregationMetadata.Param\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n import static com.facebook.presto.spi.function.Signature.typeVariable;\n import static com.facebook.presto.util.Reflection.methodHandle;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class SetUnionFunction\n         extends SqlAggregationFunction\n {\n     public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n     private static final String NAME = \"set_union\";\n-    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n     private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n     private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4Njk4Mw==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459086983", "bodyText": "You can probably inline the function.", "author": "rongrong", "createdAt": "2020-07-22T21:13:51Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),\n+                COMBINE_FUNCTION,\n+                OUTPUT_FUNCTION,\n+                ImmutableList.of(new AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                outputType);\n+\n+        GenericAccumulatorFactoryBinder factory = AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader);\n+        return new InternalAggregationFunction(NAME, inputTypes, ImmutableList.of(intermediateType), outputType, true, true, factory);\n+    }\n+\n+    private static List<ParameterMetadata> createInputParameterMetadata(Type value)", "originalCommit": "d8d96e2d0d18540019822c3531171fe5d2ae1865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDQ4Mw==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660483", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-07-23T18:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4Njk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "782e041eba2168195467581b40629d4c0427112f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\nindex 7864e7e94d..dec906e8a0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n\n@@ -48,14 +48,14 @@ import static com.facebook.presto.operator.aggregation.AggregationMetadata.Param\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n import static com.facebook.presto.spi.function.Signature.typeVariable;\n import static com.facebook.presto.util.Reflection.methodHandle;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class SetUnionFunction\n         extends SqlAggregationFunction\n {\n     public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n     private static final String NAME = \"set_union\";\n-    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n     private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n     private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4ODk3Mg==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459088972", "bodyText": "The type of arrayType should be ArrayType. Make it specific so the cast in line 127 is safe.", "author": "rongrong", "createdAt": "2020-07-22T21:17:40Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"return an array of unique values\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type type = boundVariables.getTypeVariable(\"T\");\n+        ArrayType outputType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(type.getTypeSignature())));\n+        return generateAggregation(type, outputType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type type, ArrayType outputType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(type);\n+        AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(outputType);\n+        AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(type);\n+\n+        Type intermediateType = stateSerializer.getSerializedType();\n+        List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type);\n+        Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                AggregationUtils.generateAggregationName(NAME, outputType.getTypeSignature(), inputTypes.stream().map(Type::getTypeSignature).collect(toImmutableList())),\n+                inputParameterMetadata,\n+                INPUT_FUNCTION.bindTo(type).bindTo(outputType),\n+                COMBINE_FUNCTION,\n+                OUTPUT_FUNCTION,\n+                ImmutableList.of(new AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                outputType);\n+\n+        GenericAccumulatorFactoryBinder factory = AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader);\n+        return new InternalAggregationFunction(NAME, inputTypes, ImmutableList.of(intermediateType), outputType, true, true, factory);\n+    }\n+\n+    private static List<ParameterMetadata> createInputParameterMetadata(Type value)\n+    {\n+        return ImmutableList.of(new ParameterMetadata(STATE), new ParameterMetadata(NULLABLE_BLOCK_INPUT_CHANNEL, value), new ParameterMetadata(BLOCK_INDEX));\n+    }\n+\n+    public static void input(Type type, Type arrayType, SetAggregationState state, Block inputBlock, int position)", "originalCommit": "d8d96e2d0d18540019822c3531171fe5d2ae1865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDUyOQ==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660529", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-07-23T18:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4ODk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "782e041eba2168195467581b40629d4c0427112f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\nindex 7864e7e94d..dec906e8a0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n\n@@ -48,14 +48,14 @@ import static com.facebook.presto.operator.aggregation.AggregationMetadata.Param\n import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n import static com.facebook.presto.spi.function.Signature.typeVariable;\n import static com.facebook.presto.util.Reflection.methodHandle;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class SetUnionFunction\n         extends SqlAggregationFunction\n {\n     public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n     private static final String NAME = \"set_union\";\n-    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, Type.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n     private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n     private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4OTkxMw==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459089913", "bodyText": "Can we add some tests with group bys  as well?", "author": "rongrong", "createdAt": "2020-07-22T21:19:35Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8512,6 +8512,34 @@ public void testComparisonWithLike()\n                 \"ON t1.orderkey=t2.orderkey\");\n     }\n \n+    @Test\n+    public void testSetUnion()\n+    {\n+        // sanity\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2], array[3, 4], array[5, 6]) as t(x)\",\n+                \"select array[1, 2, 3, 4, 5, 6]\");\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2, 3], array[2, 3, 4], array[7, 8]) as t(x)\",\n+                \"select array[1, 2, 3, 4, 7, 8]\");\n+        // all nulls should return empty array to match behavior of array_distinct(flatten(array_agg(x)))\n+        assertQuery(\n+                \"select set_union(x) from (values null, null, null) as t(x)\",\n+                \"select array[]\");\n+        // nulls inside arrays should be captured while pure nulls should be ignored\n+        assertQuery(\n+                \"select set_union(x) from (values null, array[null], null) as t(x)\",\n+                \"select array[null]\");\n+        // null inside arrays should be captured\n+        assertQuery(\n+                \"select set_union(x) from (values array[1, 2, 3], array[null], null) as t(x)\",\n+                \"select array[1, 2, 3, null]\");\n+        // return null for empty rows\n+        assertQuery(", "originalCommit": "d8d96e2d0d18540019822c3531171fe5d2ae1865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDcwOQ==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459660709", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-07-23T18:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4OTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "782e041eba2168195467581b40629d4c0427112f", "chunk": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 3a9c688a25..d2c2962ae8 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n\n@@ -8522,6 +8522,12 @@ public abstract class AbstractTestQueries\n         assertQuery(\n                 \"select set_union(x) from (values array[1, 2, 3], array[2, 3, 4], array[7, 8]) as t(x)\",\n                 \"select array[1, 2, 3, 4, 7, 8]\");\n+        assertQuery(\n+                \"select group_id, set_union(numbers) from (values (1, array[1, 2]), (1, array[2, 3]), (2, array[4, 5]), (2, array[5, 6])) as t(group_id, numbers) group by group_id\",\n+                \"select group_id, numbers from (values (1, array[1, 2, 3]), (2, array[4, 5, 6])) as t(group_id, numbers)\");\n+        assertQuery(\n+                \"select group_id, set_union(numbers) from (values (1, array[1, 2]), (2, array[2, 3]), (3, array[4, 5]), (4, array[5, 6])) as t(group_id, numbers) group by group_id\",\n+                \"select group_id, numbers from (values (1, array[1, 2]), (2, array[2, 3]), (3, array[4, 5]), (4, array[5, 6])) as t(group_id, numbers)\");\n         // all nulls should return empty array to match behavior of array_distinct(flatten(array_agg(x)))\n         assertQuery(\n                 \"select set_union(x) from (values null, null, null) as t(x)\",\n"}}, {"oid": "782e041eba2168195467581b40629d4c0427112f", "url": "https://github.com/prestodb/presto/commit/782e041eba2168195467581b40629d4c0427112f", "message": "Implement new function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-23T18:49:02Z", "type": "forcePushed"}, {"oid": "419d267c59408768e9008d40cff0da33037abc43", "url": "https://github.com/prestodb/presto/commit/419d267c59408768e9008d40cff0da33037abc43", "message": "Implement new function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-23T18:58:48Z", "type": "forcePushed"}, {"oid": "cc4e2922767b3becdbe0c3b36e813a659bc01b38", "url": "https://github.com/prestodb/presto/commit/cc4e2922767b3becdbe0c3b36e813a659bc01b38", "message": "Implement new function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-23T18:59:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjU3NA==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459662574", "bodyText": "I think it's cleaner to move this line to generateAggregation so generateAggregation only takes elementType as input. But I don't have strong opinions.", "author": "rongrong", "createdAt": "2020-07-23T18:58:05Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Given a column of array type, return an array of all the unique values contained in each of the arrays in the column\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type elementType = boundVariables.getTypeVariable(\"T\");\n+        ArrayType arrayType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(", "originalCommit": "782e041eba2168195467581b40629d4c0427112f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Mjk5Mw==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459672993", "bodyText": "If I do that, I would need to add typeManager as a parameter to generateAggregation, right? Or are you suggesting something different?", "author": "prithvip", "createdAt": "2020-07-23T19:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4NDQ2NA==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459684464", "bodyText": "True. It's ok either ways. Currently you could give generateAggregation incompatible elementType and arrayType, which is the thing I don't like. But since it's a private method I don't have strong opinions either ways.", "author": "rongrong", "createdAt": "2020-07-23T19:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5ODE2OQ==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459798169", "bodyText": "I got rid of the generateAggregation method altogether and inlined it into specialize method", "author": "prithvip", "createdAt": "2020-07-24T00:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "aadc907aee4b8e24c2779c5d6c4e19f0863f3a29", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\nindex dec906e8a0..f1cddb11d8 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n\n@@ -87,7 +87,6 @@ public class SetUnionFunction\n     {\n         DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n \n-        List<Type> inputTypes = ImmutableList.of(elementType);\n         AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(arrayType);\n         AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(elementType);\n         Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzUwOA==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459663508", "bodyText": "You can inline this and remove the variable.", "author": "rongrong", "createdAt": "2020-07-23T18:59:54Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation.arrayagg;\n+\n+import com.facebook.presto.bytecode.DynamicClassLoader;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.metadata.BoundVariables;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.SqlAggregationFunction;\n+import com.facebook.presto.operator.aggregation.AccumulatorCompiler;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.AccumulatorStateDescriptor;\n+import com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata;\n+import com.facebook.presto.operator.aggregation.AggregationUtils;\n+import com.facebook.presto.operator.aggregation.GenericAccumulatorFactoryBinder;\n+import com.facebook.presto.operator.aggregation.InternalAggregationFunction;\n+import com.facebook.presto.operator.aggregation.SetOfValues;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationState;\n+import com.facebook.presto.operator.aggregation.state.SetAggregationStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorState;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.AccumulatorStateSerializer;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.List;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.BLOCK_INDEX;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.NULLABLE_BLOCK_INPUT_CHANNEL;\n+import static com.facebook.presto.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static com.facebook.presto.spi.function.Signature.typeVariable;\n+import static com.facebook.presto.util.Reflection.methodHandle;\n+\n+public class SetUnionFunction\n+        extends SqlAggregationFunction\n+{\n+    public static final SetUnionFunction SET_UNION = new SetUnionFunction();\n+\n+    private static final String NAME = \"set_union\";\n+    private static final MethodHandle INPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"input\", Type.class, ArrayType.class, SetAggregationState.class, Block.class, int.class);\n+    private static final MethodHandle COMBINE_FUNCTION = methodHandle(SetUnionFunction.class, \"combine\", SetAggregationState.class, SetAggregationState.class);\n+    private static final MethodHandle OUTPUT_FUNCTION = methodHandle(SetUnionFunction.class, \"output\", SetAggregationState.class, BlockBuilder.class);\n+\n+    public SetUnionFunction()\n+    {\n+        super(NAME,\n+                ImmutableList.of(typeVariable(\"T\")),\n+                ImmutableList.of(),\n+                parseTypeSignature(\"array(T)\"),\n+                ImmutableList.of(parseTypeSignature(\"array(T)\")));\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Given a column of array type, return an array of all the unique values contained in each of the arrays in the column\";\n+    }\n+\n+    @Override\n+    public InternalAggregationFunction specialize(BoundVariables boundVariables, int arity, TypeManager typeManager, FunctionManager functionManager)\n+    {\n+        Type elementType = boundVariables.getTypeVariable(\"T\");\n+        ArrayType arrayType = (ArrayType) typeManager.getParameterizedType(StandardTypes.ARRAY, ImmutableList.of(\n+                TypeSignatureParameter.of(elementType.getTypeSignature())));\n+        return generateAggregation(elementType, arrayType);\n+    }\n+\n+    private static InternalAggregationFunction generateAggregation(Type elementType, ArrayType arrayType)\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n+\n+        List<Type> inputTypes = ImmutableList.of(elementType);", "originalCommit": "cc4e2922767b3becdbe0c3b36e813a659bc01b38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDg2MQ==", "url": "https://github.com/prestodb/presto/pull/14842#discussion_r459674861", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-07-23T19:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "aadc907aee4b8e24c2779c5d6c4e19f0863f3a29", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\nindex dec906e8a0..f1cddb11d8 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/aggregation/arrayagg/SetUnionFunction.java\n\n@@ -87,7 +87,6 @@ public class SetUnionFunction\n     {\n         DynamicClassLoader classLoader = new DynamicClassLoader(SetUnionFunction.class.getClassLoader());\n \n-        List<Type> inputTypes = ImmutableList.of(elementType);\n         AccumulatorStateSerializer<?> stateSerializer = new SetAggregationStateSerializer(arrayType);\n         AccumulatorStateFactory<?> stateFactory = new SetAggregationStateFactory(elementType);\n         Class<? extends AccumulatorState> stateInterface = SetAggregationState.class;\n"}}, {"oid": "aadc907aee4b8e24c2779c5d6c4e19f0863f3a29", "url": "https://github.com/prestodb/presto/commit/aadc907aee4b8e24c2779c5d6c4e19f0863f3a29", "message": "Add aggregation function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-23T19:20:28Z", "type": "forcePushed"}, {"oid": "e9527f9fdcd70444b2dd1a9a2c04762949164b08", "url": "https://github.com/prestodb/presto/commit/e9527f9fdcd70444b2dd1a9a2c04762949164b08", "message": "Add aggregation function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-24T00:13:03Z", "type": "commit"}, {"oid": "e9527f9fdcd70444b2dd1a9a2c04762949164b08", "url": "https://github.com/prestodb/presto/commit/e9527f9fdcd70444b2dd1a9a2c04762949164b08", "message": "Add aggregation function SET_UNION\n\nSET_UNION is a more efficient alternative to the common pattern of\nARRAY_DISTINCT(FLATTEN(ARRAY_AGG(x)))", "committedDate": "2020-07-24T00:13:03Z", "type": "forcePushed"}]}