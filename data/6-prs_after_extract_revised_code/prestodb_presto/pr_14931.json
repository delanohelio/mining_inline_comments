{"pr_number": 14931, "pr_title": "Inline SQL functions at plan time", "pr_createdAt": "2020-07-30T17:16:12Z", "pr_url": "https://github.com/prestodb/presto/pull/14931", "timeline": [{"oid": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6", "url": "https://github.com/prestodb/presto/commit/5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6", "message": "[WIP] Inline SQL functions at plan time", "committedDate": "2020-07-30T18:21:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyODUzOQ==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r463828539", "bodyText": "No need to have else here.", "author": "rongrong", "createdAt": "2020-07-31T20:48:12Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter\n+{\n+    private InlineSqlFunctionsRewriter() {}\n+\n+    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+    {\n+        if (isInlineSqlFunctions(session)) {\n+            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n+        }\n+        else {", "originalCommit": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MDQzOA==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r464540438", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-08-03T16:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyODUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "da6851cc2723958f4de0d82f5d07926c7da441ff", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java\ndeleted file mode 100644\nindex 0e0bcb7cea..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.planner;\n-\n-import com.facebook.presto.Session;\n-import com.facebook.presto.common.type.Type;\n-import com.facebook.presto.metadata.Metadata;\n-import com.facebook.presto.spi.function.FunctionHandle;\n-import com.facebook.presto.spi.function.FunctionImplementationType;\n-import com.facebook.presto.spi.function.FunctionMetadata;\n-import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n-import com.facebook.presto.sql.relational.SqlFunctionUtils;\n-import com.facebook.presto.sql.tree.Expression;\n-import com.facebook.presto.sql.tree.ExpressionRewriter;\n-import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n-import com.facebook.presto.sql.tree.FunctionCall;\n-import com.facebook.presto.sql.tree.NodeRef;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n-import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n-import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n-import static java.util.Objects.requireNonNull;\n-\n-public class InlineSqlFunctionsRewriter\n-{\n-    private InlineSqlFunctionsRewriter() {}\n-\n-    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n-    {\n-        if (isInlineSqlFunctions(session)) {\n-            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n-        }\n-        else {\n-            return expression;\n-        }\n-    }\n-\n-    private static class Visitor\n-            extends ExpressionRewriter<Void>\n-    {\n-        private final Session session;\n-        private final Metadata metadata;\n-        private final Map<NodeRef<Expression>, Type> expressionTypes;\n-\n-        public Visitor(Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n-        {\n-            this.session = requireNonNull(session, \"session is null\");\n-            this.metadata = requireNonNull(metadata, \"metadata is null\");\n-            this.expressionTypes = expressionTypes;\n-        }\n-\n-        @Override\n-        public Expression rewriteFunctionCall(FunctionCall node, Void context, ExpressionTreeRewriter<Void> treeRewriter)\n-        {\n-            List<Type> argumentTypes = new ArrayList<>();\n-            List<Expression> rewrittenArguments = new ArrayList<>();\n-            for (Expression argument : node.getArguments()) {\n-                argumentTypes.add(expressionTypes.get(NodeRef.of(argument)));\n-                rewrittenArguments.add(treeRewriter.rewrite(argument, context));\n-            }\n-\n-            FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n-                    session.getTransactionId(),\n-                    qualifyFunctionName(node.getName()),\n-                    fromTypes(argumentTypes));\n-            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionHandle);\n-\n-            if (functionMetadata.getImplementationType() != FunctionImplementationType.SQL) {\n-                return new FunctionCall(node.getName(), rewrittenArguments);\n-            }\n-            else {\n-                return SqlFunctionUtils.getSqlFunctionExpression(\n-                        functionMetadata,\n-                        (SqlInvokedScalarFunctionImplementation) metadata.getFunctionManager().getScalarFunctionImplementation(functionHandle),\n-                        session.getSqlFunctionProperties(),\n-                        rewrittenArguments);\n-            }\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMDM1Ng==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r463830356", "bodyText": "I think we normally would just put the rewriter as a private class for the rule itself so you can move this to InlineSqlFunctions.java, unless you expect this to be used by other classes.", "author": "rongrong", "createdAt": "2020-07-31T20:50:37Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter", "originalCommit": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MDUwOQ==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r464540509", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-08-03T16:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMDM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "da6851cc2723958f4de0d82f5d07926c7da441ff", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java\ndeleted file mode 100644\nindex 0e0bcb7cea..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.planner;\n-\n-import com.facebook.presto.Session;\n-import com.facebook.presto.common.type.Type;\n-import com.facebook.presto.metadata.Metadata;\n-import com.facebook.presto.spi.function.FunctionHandle;\n-import com.facebook.presto.spi.function.FunctionImplementationType;\n-import com.facebook.presto.spi.function.FunctionMetadata;\n-import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n-import com.facebook.presto.sql.relational.SqlFunctionUtils;\n-import com.facebook.presto.sql.tree.Expression;\n-import com.facebook.presto.sql.tree.ExpressionRewriter;\n-import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n-import com.facebook.presto.sql.tree.FunctionCall;\n-import com.facebook.presto.sql.tree.NodeRef;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n-import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n-import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n-import static java.util.Objects.requireNonNull;\n-\n-public class InlineSqlFunctionsRewriter\n-{\n-    private InlineSqlFunctionsRewriter() {}\n-\n-    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n-    {\n-        if (isInlineSqlFunctions(session)) {\n-            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n-        }\n-        else {\n-            return expression;\n-        }\n-    }\n-\n-    private static class Visitor\n-            extends ExpressionRewriter<Void>\n-    {\n-        private final Session session;\n-        private final Metadata metadata;\n-        private final Map<NodeRef<Expression>, Type> expressionTypes;\n-\n-        public Visitor(Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n-        {\n-            this.session = requireNonNull(session, \"session is null\");\n-            this.metadata = requireNonNull(metadata, \"metadata is null\");\n-            this.expressionTypes = expressionTypes;\n-        }\n-\n-        @Override\n-        public Expression rewriteFunctionCall(FunctionCall node, Void context, ExpressionTreeRewriter<Void> treeRewriter)\n-        {\n-            List<Type> argumentTypes = new ArrayList<>();\n-            List<Expression> rewrittenArguments = new ArrayList<>();\n-            for (Expression argument : node.getArguments()) {\n-                argumentTypes.add(expressionTypes.get(NodeRef.of(argument)));\n-                rewrittenArguments.add(treeRewriter.rewrite(argument, context));\n-            }\n-\n-            FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n-                    session.getTransactionId(),\n-                    qualifyFunctionName(node.getName()),\n-                    fromTypes(argumentTypes));\n-            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionHandle);\n-\n-            if (functionMetadata.getImplementationType() != FunctionImplementationType.SQL) {\n-                return new FunctionCall(node.getName(), rewrittenArguments);\n-            }\n-            else {\n-                return SqlFunctionUtils.getSqlFunctionExpression(\n-                        functionMetadata,\n-                        (SqlInvokedScalarFunctionImplementation) metadata.getFunctionManager().getScalarFunctionImplementation(functionHandle),\n-                        session.getSqlFunctionProperties(),\n-                        rewrittenArguments);\n-            }\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTgyNQ==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r463831825", "bodyText": "No need for else.", "author": "rongrong", "createdAt": "2020-07-31T20:52:37Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter\n+{\n+    private InlineSqlFunctionsRewriter() {}\n+\n+    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+    {\n+        if (isInlineSqlFunctions(session)) {\n+            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n+        }\n+        else {\n+            return expression;\n+        }\n+    }\n+\n+    private static class Visitor\n+            extends ExpressionRewriter<Void>\n+    {\n+        private final Session session;\n+        private final Metadata metadata;\n+        private final Map<NodeRef<Expression>, Type> expressionTypes;\n+\n+        public Visitor(Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+        {\n+            this.session = requireNonNull(session, \"session is null\");\n+            this.metadata = requireNonNull(metadata, \"metadata is null\");\n+            this.expressionTypes = expressionTypes;\n+        }\n+\n+        @Override\n+        public Expression rewriteFunctionCall(FunctionCall node, Void context, ExpressionTreeRewriter<Void> treeRewriter)\n+        {\n+            List<Type> argumentTypes = new ArrayList<>();\n+            List<Expression> rewrittenArguments = new ArrayList<>();\n+            for (Expression argument : node.getArguments()) {\n+                argumentTypes.add(expressionTypes.get(NodeRef.of(argument)));\n+                rewrittenArguments.add(treeRewriter.rewrite(argument, context));\n+            }\n+\n+            FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n+                    session.getTransactionId(),\n+                    qualifyFunctionName(node.getName()),\n+                    fromTypes(argumentTypes));\n+            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionHandle);\n+\n+            if (functionMetadata.getImplementationType() != FunctionImplementationType.SQL) {\n+                return new FunctionCall(node.getName(), rewrittenArguments);\n+            }\n+            else {", "originalCommit": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MDU3OA==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r464540578", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-08-03T16:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "da6851cc2723958f4de0d82f5d07926c7da441ff", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java\ndeleted file mode 100644\nindex 0e0bcb7cea..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.planner;\n-\n-import com.facebook.presto.Session;\n-import com.facebook.presto.common.type.Type;\n-import com.facebook.presto.metadata.Metadata;\n-import com.facebook.presto.spi.function.FunctionHandle;\n-import com.facebook.presto.spi.function.FunctionImplementationType;\n-import com.facebook.presto.spi.function.FunctionMetadata;\n-import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n-import com.facebook.presto.sql.relational.SqlFunctionUtils;\n-import com.facebook.presto.sql.tree.Expression;\n-import com.facebook.presto.sql.tree.ExpressionRewriter;\n-import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n-import com.facebook.presto.sql.tree.FunctionCall;\n-import com.facebook.presto.sql.tree.NodeRef;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n-import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n-import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n-import static java.util.Objects.requireNonNull;\n-\n-public class InlineSqlFunctionsRewriter\n-{\n-    private InlineSqlFunctionsRewriter() {}\n-\n-    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n-    {\n-        if (isInlineSqlFunctions(session)) {\n-            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n-        }\n-        else {\n-            return expression;\n-        }\n-    }\n-\n-    private static class Visitor\n-            extends ExpressionRewriter<Void>\n-    {\n-        private final Session session;\n-        private final Metadata metadata;\n-        private final Map<NodeRef<Expression>, Type> expressionTypes;\n-\n-        public Visitor(Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n-        {\n-            this.session = requireNonNull(session, \"session is null\");\n-            this.metadata = requireNonNull(metadata, \"metadata is null\");\n-            this.expressionTypes = expressionTypes;\n-        }\n-\n-        @Override\n-        public Expression rewriteFunctionCall(FunctionCall node, Void context, ExpressionTreeRewriter<Void> treeRewriter)\n-        {\n-            List<Type> argumentTypes = new ArrayList<>();\n-            List<Expression> rewrittenArguments = new ArrayList<>();\n-            for (Expression argument : node.getArguments()) {\n-                argumentTypes.add(expressionTypes.get(NodeRef.of(argument)));\n-                rewrittenArguments.add(treeRewriter.rewrite(argument, context));\n-            }\n-\n-            FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n-                    session.getTransactionId(),\n-                    qualifyFunctionName(node.getName()),\n-                    fromTypes(argumentTypes));\n-            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionHandle);\n-\n-            if (functionMetadata.getImplementationType() != FunctionImplementationType.SQL) {\n-                return new FunctionCall(node.getName(), rewrittenArguments);\n-            }\n-            else {\n-                return SqlFunctionUtils.getSqlFunctionExpression(\n-                        functionMetadata,\n-                        (SqlInvokedScalarFunctionImplementation) metadata.getFunctionManager().getScalarFunctionImplementation(functionHandle),\n-                        session.getSqlFunctionProperties(),\n-                        rewrittenArguments);\n-            }\n-        }\n-    }\n-}\n"}}, {"oid": "da6851cc2723958f4de0d82f5d07926c7da441ff", "url": "https://github.com/prestodb/presto/commit/da6851cc2723958f4de0d82f5d07926c7da441ff", "message": "[WIP] Inline SQL functions at plan time", "committedDate": "2020-08-03T16:58:52Z", "type": "forcePushed"}, {"oid": "429fc09817520ad0570d9aebcd827c44c50eb63e", "url": "https://github.com/prestodb/presto/commit/429fc09817520ad0570d9aebcd827c44c50eb63e", "message": "[WIP] Inline SQL functions at plan time", "committedDate": "2020-08-03T17:15:58Z", "type": "forcePushed"}, {"oid": "e16c72bb287b10c2026f2d8bfd201dde3f5f22af", "url": "https://github.com/prestodb/presto/commit/e16c72bb287b10c2026f2d8bfd201dde3f5f22af", "message": "[WIP] Inline SQL functions at plan time", "committedDate": "2020-08-04T17:52:58Z", "type": "forcePushed"}, {"oid": "3fb7434befe29b96e58a2f64ed24ad3ed7297c62", "url": "https://github.com/prestodb/presto/commit/3fb7434befe29b96e58a2f64ed24ad3ed7297c62", "message": "[WIP] Inline SQL functions at plan time", "committedDate": "2020-08-04T18:09:31Z", "type": "forcePushed"}, {"oid": "6725caef7a26fcc8a3ee365f122b1dc20e988b16", "url": "https://github.com/prestodb/presto/commit/6725caef7a26fcc8a3ee365f122b1dc20e988b16", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-04T21:15:41Z", "type": "forcePushed"}, {"oid": "e0e4a111e1636bde7e939fcec7562f4721a610af", "url": "https://github.com/prestodb/presto/commit/e0e4a111e1636bde7e939fcec7562f4721a610af", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-04T21:49:49Z", "type": "forcePushed"}, {"oid": "95d51dbbda5ec295f90429f3401ea35abdfb491e", "url": "https://github.com/prestodb/presto/commit/95d51dbbda5ec295f90429f3401ea35abdfb491e", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-05T20:43:03Z", "type": "forcePushed"}, {"oid": "1f91c738ede0d2c46c0456b2742948e37e833ebf", "url": "https://github.com/prestodb/presto/commit/1f91c738ede0d2c46c0456b2742948e37e833ebf", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-05T22:17:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1Mzc1MQ==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r466053751", "bodyText": "You don't have to call setSupportedFunctionLanguages here, the default (SQL only) should work. But if you want to add THRIFT function, might as well add a test to make sure that won't be inlined. \ud83d\ude02  You can also add tests to make sure builtin SQL functions like array_sum is also inlined correctly if you want.", "author": "rongrong", "createdAt": "2020-08-05T23:11:14Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestInlineSqlFunctions.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.plan.AggregationNode;\n+import com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder;\n+import com.facebook.presto.sql.planner.iterative.rule.test.RuleTester;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SymbolReference;\n+import com.facebook.presto.testing.TestingSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes;\n+import static com.facebook.presto.sql.planner.TypeProvider.viewOf;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.aggregation;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.expression;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.functionCall;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+import static com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder.assignment;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestInlineSqlFunctions\n+{\n+    private static final SqlInvokedFunction SQL_FUNCTION_SQUARE = new SqlInvokedFunction(\n+            QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"square\"),\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(INTEGER))),\n+            parseTypeSignature(INTEGER),\n+            \"square\",\n+            RoutineCharacteristics.builder()\n+                    .setDeterminism(DETERMINISTIC)\n+                    .setNullCallClause(RETURNS_NULL_ON_NULL_INPUT)\n+                    .build(),\n+            \"RETURN x * x\",\n+            Optional.empty());\n+\n+    private RuleTester tester;\n+\n+    @BeforeTest\n+    public void setup()\n+    {\n+        RuleTester tester = new RuleTester();\n+        FunctionManager functionManager = tester.getMetadata().getFunctionManager();\n+        InMemoryFunctionNamespaceManager namespaceManager = new InMemoryFunctionNamespaceManager(\n+                \"unittest\",\n+                new SqlInvokedFunctionNamespaceManagerConfig().setSupportedFunctionLanguages(\"{\\\"sql\\\": \\\"SQL\\\",\\\"java\\\": \\\"THRIFT\\\"}\"));", "originalCommit": "1f91c738ede0d2c46c0456b2742948e37e833ebf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3NTAyMw==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r466575023", "bodyText": "Added tests for both cases", "author": "prithvip", "createdAt": "2020-08-06T17:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1Mzc1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "df61ec1a3e5c28671c6b130032aea8ded749ed0e", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestInlineSqlFunctions.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestInlineSqlFunctions.java\nindex ca3ecc3cb9..518faededf 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestInlineSqlFunctions.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestInlineSqlFunctions.java\n\n@@ -16,6 +16,7 @@ package com.facebook.presto.sql.planner.iterative.rule;\n import com.facebook.presto.Session;\n import com.facebook.presto.common.CatalogSchemaName;\n import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.ArrayType;\n import com.facebook.presto.common.type.IntegerType;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.execution.warnings.WarningCollector;\n"}}, {"oid": "df61ec1a3e5c28671c6b130032aea8ded749ed0e", "url": "https://github.com/prestodb/presto/commit/df61ec1a3e5c28671c6b130032aea8ded749ed0e", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-06T17:25:16Z", "type": "forcePushed"}, {"oid": "a870188ba4d51465c0ca1ec11c0e370036c3f491", "url": "https://github.com/prestodb/presto/commit/a870188ba4d51465c0ca1ec11c0e370036c3f491", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-10T23:37:44Z", "type": "forcePushed"}, {"oid": "f661778386dabecc3279f90b191363498ce24991", "url": "https://github.com/prestodb/presto/commit/f661778386dabecc3279f90b191363498ce24991", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-11T02:47:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMDg5MQ==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r468300891", "bodyText": "Should we do this at CREATE FUNCTION execution time?", "author": "rongrong", "createdAt": "2020-08-11T03:09:36Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -61,11 +61,12 @@\n {\n     private SqlFunctionUtils() {}\n \n-    public static Expression getSqlFunctionExpression(FunctionMetadata functionMetadata, SqlInvokedScalarFunctionImplementation implementation, SqlFunctionProperties sqlFunctionProperties, List<Expression> arguments)\n+    public static Expression getSqlFunctionExpression(FunctionMetadata functionMetadata, SqlInvokedScalarFunctionImplementation implementation, Metadata metadata, SqlFunctionProperties sqlFunctionProperties, List<Expression> arguments)\n     {\n         checkArgument(functionMetadata.getImplementationType().equals(SQL), format(\"Expect SQL function, get %s\", functionMetadata.getImplementationType()));\n         checkArgument(functionMetadata.getArgumentNames().isPresent(), \"ArgumentNames is missing\");\n         Expression expression = normalizeParameters(functionMetadata.getArgumentNames().get(), parseSqlFunctionExpression(implementation, sqlFunctionProperties));\n+        expression = coerceIfNecessary(functionMetadata, expression, sqlFunctionProperties, metadata);", "originalCommit": "e3e2aaf45e46f8e6c5dfa8f72cffa5a9976f94a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzNzk2Nw==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469537967", "bodyText": "Yes, that's a good idea, done.", "author": "prithvip", "createdAt": "2020-08-12T20:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMDg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8de0c8fe6902f1a059d1c5e6977e0d6f60c42ed", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java\nindex 05967ad563..0e072fbda7 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java\n\n@@ -61,12 +61,11 @@ public final class SqlFunctionUtils\n {\n     private SqlFunctionUtils() {}\n \n-    public static Expression getSqlFunctionExpression(FunctionMetadata functionMetadata, SqlInvokedScalarFunctionImplementation implementation, Metadata metadata, SqlFunctionProperties sqlFunctionProperties, List<Expression> arguments)\n+    public static Expression getSqlFunctionExpression(FunctionMetadata functionMetadata, SqlInvokedScalarFunctionImplementation implementation, SqlFunctionProperties sqlFunctionProperties, List<Expression> arguments)\n     {\n         checkArgument(functionMetadata.getImplementationType().equals(SQL), format(\"Expect SQL function, get %s\", functionMetadata.getImplementationType()));\n         checkArgument(functionMetadata.getArgumentNames().isPresent(), \"ArgumentNames is missing\");\n         Expression expression = normalizeParameters(functionMetadata.getArgumentNames().get(), parseSqlFunctionExpression(implementation, sqlFunctionProperties));\n-        expression = coerceIfNecessary(functionMetadata, expression, sqlFunctionProperties, metadata);\n         return SqlFunctionArgumentBinder.bindFunctionArguments(expression, functionMetadata.getArgumentNames().get(), arguments);\n     }\n \n"}}, {"oid": "a8de0c8fe6902f1a059d1c5e6977e0d6f60c42ed", "url": "https://github.com/prestodb/presto/commit/a8de0c8fe6902f1a059d1c5e6977e0d6f60c42ed", "message": "Fix improperly scoped argument binding in lambda expressions", "committedDate": "2020-08-12T20:27:40Z", "type": "commit"}, {"oid": "53357b133699f39a1feaaf2082ab7bf540dccf9b", "url": "https://github.com/prestodb/presto/commit/53357b133699f39a1feaaf2082ab7bf540dccf9b", "message": "Coerce SQL function expressions at create time", "committedDate": "2020-08-12T20:30:03Z", "type": "forcePushed"}, {"oid": "f6075d233f85ac8414ada476d9730d7d945d52bd", "url": "https://github.com/prestodb/presto/commit/f6075d233f85ac8414ada476d9730d7d945d52bd", "message": "Coerce SQL function expressions at create time", "committedDate": "2020-08-12T20:54:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NDIzOQ==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469544239", "bodyText": "Let's keep this. We need to check all existing functions and update them before it's safe to remove these. So also add the coercion in getSqlFunctionExpression. We can think about introducing a warning for this and deprecate this in later releases.", "author": "rongrong", "createdAt": "2020-08-12T21:00:58Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -191,30 +187,6 @@ public Expression rewriteIdentifier(Identifier node, Map<Identifier, VariableRef\n         }, sqlFunction, variableMap);\n     }\n \n-    private static Expression coerceIfNecessary(FunctionMetadata functionMetadata, Expression sqlFunction, SqlFunctionProperties sqlFunctionProperties, Metadata metadata)", "originalCommit": "f6075d233f85ac8414ada476d9730d7d945d52bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NDIxMw==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469574213", "bodyText": "Ok sure, done.", "author": "prithvip", "createdAt": "2020-08-12T22:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NDIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f23d48703d7eadd9f30d3c74b7500f3849cb2a5", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java\nindex 3897f78c1d..05967ad563 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java\n\n@@ -187,6 +191,30 @@ public final class SqlFunctionUtils\n         }, sqlFunction, variableMap);\n     }\n \n+    private static Expression coerceIfNecessary(FunctionMetadata functionMetadata, Expression sqlFunction, SqlFunctionProperties sqlFunctionProperties, Metadata metadata)\n+    {\n+        ExpressionAnalysis analysis = analyzeSqlFunctionExpression(metadata, sqlFunctionProperties, sqlFunction, getFunctionArgumentTypes(functionMetadata, metadata));\n+\n+        return ExpressionTreeRewriter.rewriteWith(new ExpressionRewriter<ExpressionAnalysis>()\n+        {\n+            @Override\n+            public Expression rewriteExpression(Expression expression, ExpressionAnalysis context, ExpressionTreeRewriter<ExpressionAnalysis> treeRewriter)\n+            {\n+                Expression rewritten = treeRewriter.defaultRewrite(expression, null);\n+\n+                Type coercion = analysis.getCoercion(expression);\n+                if (coercion != null) {\n+                    return new Cast(\n+                            rewritten,\n+                            coercion.getTypeSignature().toString(),\n+                            false,\n+                            analysis.isTypeOnlyCoercion(expression));\n+                }\n+                return rewritten;\n+            }\n+        }, sqlFunction, analysis);\n+    }\n+\n     private static final class SqlFunctionArgumentBinder\n     {\n         private SqlFunctionArgumentBinder() {}\n"}}, {"oid": "9f23d48703d7eadd9f30d3c74b7500f3849cb2a5", "url": "https://github.com/prestodb/presto/commit/9f23d48703d7eadd9f30d3c74b7500f3849cb2a5", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-12T21:59:00Z", "type": "forcePushed"}, {"oid": "e032df3610b3b2d2445ef48c9fb83fba5ecab2dc", "url": "https://github.com/prestodb/presto/commit/e032df3610b3b2d2445ef48c9fb83fba5ecab2dc", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-12T22:06:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MTU4Mw==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469591583", "bodyText": "Nits: I found it more logical to have this before the return cast rather than after, but I don't have strong opinions.", "author": "rongrong", "createdAt": "2020-08-12T22:54:47Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -101,12 +103,32 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement, Me\n \n         if (statement.getBody() instanceof Return) {\n             Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n-            Type bodyType = analysis.getType(bodyExpression);\n-\n-            if (!bodyType.equals(metadata.getType(returnType))) {\n-                // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n-                body = new Return(new Cast(bodyExpression, statement.getReturnType()));\n+            if (!analysis.getType(bodyExpression).equals(metadata.getType(returnType))) {\n+                // Casting is safe here, since we have verified at analysis time that the actual type of the body is coercible to declared return type.\n+                bodyExpression = new Cast(bodyExpression, statement.getReturnType());\n             }\n+\n+            // Coerce expressions in body if necessary\n+            bodyExpression = ExpressionTreeRewriter.rewriteWith(new ExpressionRewriter<Void>()", "originalCommit": "1efe37c7371d91a3c37d00adb8162f637fe5bb69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5NzQ1Mw==", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469597453", "bodyText": "Ok, done.", "author": "prithvip", "createdAt": "2020-08-12T23:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MTU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cdd798193b24e1f93c2eedae0a7d19caa89bb47c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java b/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java\nindex 8f361b4529..1223725880 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java\n\n@@ -103,10 +103,7 @@ public class CreateFunctionTask\n \n         if (statement.getBody() instanceof Return) {\n             Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n-            if (!analysis.getType(bodyExpression).equals(metadata.getType(returnType))) {\n-                // Casting is safe here, since we have verified at analysis time that the actual type of the body is coercible to declared return type.\n-                bodyExpression = new Cast(bodyExpression, statement.getReturnType());\n-            }\n+            Type bodyType = analysis.getType(bodyExpression);\n \n             // Coerce expressions in body if necessary\n             bodyExpression = ExpressionTreeRewriter.rewriteWith(new ExpressionRewriter<Void>()\n"}}, {"oid": "cdd798193b24e1f93c2eedae0a7d19caa89bb47c", "url": "https://github.com/prestodb/presto/commit/cdd798193b24e1f93c2eedae0a7d19caa89bb47c", "message": "Add casts to expressions in SQL functions if coercible", "committedDate": "2020-08-12T23:11:16Z", "type": "commit"}, {"oid": "1942ea3cc4063e4c40004cb0f9c9b66304dcae13", "url": "https://github.com/prestodb/presto/commit/1942ea3cc4063e4c40004cb0f9c9b66304dcae13", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-12T23:11:26Z", "type": "commit"}, {"oid": "1942ea3cc4063e4c40004cb0f9c9b66304dcae13", "url": "https://github.com/prestodb/presto/commit/1942ea3cc4063e4c40004cb0f9c9b66304dcae13", "message": "Inline SQL functions at plan time", "committedDate": "2020-08-12T23:11:26Z", "type": "forcePushed"}]}