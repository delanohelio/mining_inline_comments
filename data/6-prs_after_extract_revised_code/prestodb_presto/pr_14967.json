{"pr_number": 14967, "pr_title": "Fix druid connector bugs related to pushed down queries", "pr_createdAt": "2020-08-05T13:41:47Z", "pr_url": "https://github.com/prestodb/presto/pull/14967", "timeline": [{"oid": "e3733e888a1a701b5d30940e2a89020c03f7329b", "url": "https://github.com/prestodb/presto/commit/e3733e888a1a701b5d30940e2a89020c03f7329b", "message": "Fix unhandled HTTP response error for druid client", "committedDate": "2020-08-05T13:38:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2NzcyMA==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r465967720", "bodyText": "I think better not through PrestoException here. Could we do:\ncheckState(!hasAggregation && !hasFilter, ...)", "author": "zhenxiao", "createdAt": "2020-08-05T19:56:16Z", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java", "diffHunk": "@@ -104,7 +105,12 @@ private DruidQueryGeneratorContext(\n \n     public DruidQueryGeneratorContext withFilter(String filter)\n     {\n-        checkState(!hasFilter(), \"Druid doesn't support filters at multiple levels\");\n+        if (!hasAggregation()) {\n+            checkState(!hasFilter(), \"Druid doesn't support filters at multiple levels under AggregationNode\");\n+        }\n+        else {\n+            throw new PrestoException(DRUID_PUSHDOWN_UNSUPPORTED_EXPRESSION, \"Druid does not support filter on top of AggregationNode.\");", "originalCommit": "7007046d1413d5f469c27dce2b5ef9ed2d7da7e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMTgyMw==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466121823", "bodyText": "Throw PrestoException here is intended here I think. checkState will make query failed directly. if query are like:\nselect a , sum(b) from druid_table where c = 'xxx' group by 1 having sum(b) > 0;\nThrow PrestoException will help make the filter sum(b) > 0(on top of aggregation node) executed in presto(not in druid). The reason not push down such filter right now is because we could not make sure all filters on top of aggregation node could be pushed down. Following code will catch this exception and make queries work(DruidQueryGenerator.java):\n    public Optional<DruidQueryGeneratorResult> generate(PlanNode plan, ConnectorSession session)\n    {\n        try {\n            DruidQueryGeneratorContext context = requireNonNull(plan.accept(\n                    new DruidQueryPlanVisitor(session),\n                    new DruidQueryGeneratorContext()),\n                    \"Resulting context is null\");\n            return Optional.of(new DruidQueryGeneratorResult(context.toQuery(), context));\n        }\n        catch (PrestoException e) {\n            log.debug(e, \"Possibly benign error when pushing plan into scan node %s\", plan);\n            return Optional.empty();\n        }\n    }", "author": "weidongduan37", "createdAt": "2020-08-06T03:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2NzcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNDk3NQ==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466124975", "bodyText": "After check #14952 changes, I think we are trying to solve different cases. His code focuses on time with timezone. I think our code is compatible.\nBy the way, the 1st and 3rd example he gave could be pushed down by original code. His change may be helpful for the 2nd example.\nFirst:\nselect * from druid.wikipedia where __time > timestamp '2016-06-26 18:00:00.000'\nSecond:\nselect * from druid.wikipedia where __time > timestamp '2016-06-26 19:00:00.000 UTC';\nThird:\nselect * from druid.wikipedia where __time > CAST('2016-06-26 18:00:00.000' as TIMESTAMP);\nAnd the pushed down dql will be as following by original code:\nfirst:\nselect col1,col2,.. from druid.wikipedia where __time >  '2016-06-26 18:00:00.000'\nthird:\nselect col1, col2,.. from druid.wikipedia where __time > '2016-06-26 18:00:00.000'", "author": "weidongduan37", "createdAt": "2020-08-06T03:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2NzcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "28da710f0ac821536dafe84750798a2a75c3a6f2", "chunk": "diff --git a/presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java b/presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java\nindex fbcea37105..bb6fd355fa 100644\n--- a/presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java\n+++ b/presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java\n\n@@ -105,12 +105,10 @@ public class DruidQueryGeneratorContext\n \n     public DruidQueryGeneratorContext withFilter(String filter)\n     {\n-        if (!hasAggregation()) {\n-            checkState(!hasFilter(), \"Druid doesn't support filters at multiple levels under AggregationNode\");\n-        }\n-        else {\n+        if (hasAggregation()) {\n             throw new PrestoException(DRUID_PUSHDOWN_UNSUPPORTED_EXPRESSION, \"Druid does not support filter on top of AggregationNode.\");\n         }\n+        checkState(!hasFilter(), \"Druid doesn't support filters at multiple levels under AggregationNode\");\n         return new DruidQueryGeneratorContext(\n                 selections,\n                 from,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTAwMw==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466769003", "bodyText": "Can I have the query you are using for test?   For the query below I ran, this 'if' statement is not reachable.\nselect * from druid.wikipedia where __time > timestamp '2016-06-26 19:00:00.000';\nBecause for the call 'greater_than(__time, timestamp)', it will go through line 177.  And the second argument of this call is a constant which will go to the 'visitConstant' method and then call the getLiteralAsString", "author": "beinan", "createdAt": "2020-08-07T01:21:20Z", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java", "diffHunk": "@@ -185,7 +185,7 @@ public DruidExpression visitCall(CallExpression call, Function<VariableReference\n                 throw new PrestoException(DRUID_PUSHDOWN_UNSUPPORTED_EXPRESSION, \"Invalid Timestamp literal in Druid filter: \" + argument.toString());\n             }\n             SqlTimestamp value = new SqlTimestamp((long) ((ConstantExpression) argument).getValue());\n-            return new DruidExpression(\"'\" + value.toString() + \"'\", Origin.LITERAL);\n+            return derived(\" TIMESTAMP '\" + value.toString() + \"'\");", "originalCommit": "48c530fa238ac9dce29e3c47e011c8dd1da35556", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5NjgxMg==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466796812", "bodyText": "Hi,\nI use the following test case for original code before I change:\nSELECT * FROM druid.druid.wikipedia where __time > timestamp '2015-09-12 00:00:00.000' limit 1;\nYou could check following plan:\n\nAnd will not go to line 177 as following,\n\nAfter the code I change:\nSELECT * FROM druid.druid.wikipedia where __time > timestamp '2015-09-12 00:00:00.000' limit 1; \n\nSELECT * FROM druid.druid.wikipedia where __time = timestamp '2015-09-12 00:00:00.000' limit 1; \n\nHopefully It's helpful.", "author": "weidongduan37", "createdAt": "2020-08-07T03:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxMDA2MQ==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466810061", "bodyText": "Got it with many thanks!\nLooks like the difference is on the RowExpression.  The timestamp I got is a constant expression, but you got is a call of '$literal$timestamp' .  I will look into it. Thanks!", "author": "beinan", "createdAt": "2020-08-07T04:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2NzkzMA==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466867930", "bodyText": "have you rebased onto the most recent master?  I think some of the behavior might changed, just guessing, it could explain why we are seeing different RowExpression type.  Thanks!", "author": "beinan", "createdAt": "2020-08-07T07:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5MDI4MQ==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466990281", "bodyText": "Yes, you are right. I try on recent release 0.238.2, the logic is still same as what I say. But on recent master, the behavior is just as what you said. I think there may be some changes in presto-main or presto-spi that does not take druid connector into consideration. I am worried that there may be other potential affects besides this one we find.  (I doubt that the recent change in planOptimizers result in this incompatibility)", "author": "weidongduan37", "createdAt": "2020-08-07T11:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5NjAxNg==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r467096016", "bodyText": "hi, @zhenxiao, I could revert my code related to time pushed down, And hope the PR from beinan will fix it due to the change out of druid connector. Is it ok from your opinion? Or is it better to involve others to find out which commit result in this unexpected problem to avoid potential affects?", "author": "weidongduan37", "createdAt": "2020-08-07T15:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3NDAwMg==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r467174002", "bodyText": "thanks for the discussion @weidongduan37 @beinan\nsure. go ahead. Let's rebased on most recent master, and revert time pushdown changes in this PR.\nI will follow up with optimizer changes. My guess is RowExpression is replacing Expression recently.", "author": "zhenxiao", "createdAt": "2020-08-07T17:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "28da710f0ac821536dafe84750798a2a75c3a6f2", "chunk": "diff --git a/presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java b/presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java\nindex 132eb2fdac..a45b7c5938 100644\n--- a/presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java\n+++ b/presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java\n\n@@ -184,8 +184,8 @@ public class DruidFilterExpressionConverter\n             if (!(argument instanceof ConstantExpression)) {\n                 throw new PrestoException(DRUID_PUSHDOWN_UNSUPPORTED_EXPRESSION, \"Invalid Timestamp literal in Druid filter: \" + argument.toString());\n             }\n-            SqlTimestamp value = new SqlTimestamp((long) ((ConstantExpression) argument).getValue());\n-            return derived(\" TIMESTAMP '\" + value.toString() + \"'\");\n+            SqlTimestamp value = new SqlTimestamp((long) ((ConstantExpression) argument).getValue(), session.getSqlFunctionProperties().getTimeZoneKey());\n+            return new DruidExpression(\"'\" + value.toString() + \"'\", Origin.LITERAL);\n         }\n \n         throw new PrestoException(DRUID_PUSHDOWN_UNSUPPORTED_EXPRESSION, \"Function \" + call + \" not supported in Druid filter\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxNTczNA==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466815734", "bodyText": "I don't think we can ignore the timezone here.  The session here is the ConnectorSession,  we cannot assume the connection to druid is always using UTC (though now it's just using UTC).\n\nBy default, time operations use the UTC time zone. You can change the time zone by setting the connection context parameter \"sqlTimeZone\" to the name of another time zone, like \"America/Los_Angeles\", or to an offset like \"-08:00\". If you need to mix multiple time zones in the same query, or if you need to use a time zone other than the connection time zone, some functions also accept time zones as parameters. These parameters always take precedence over the connection time zone.\nfrom Druid https://druid.apache.org/docs/latest/querying/sql.html#time-functions", "author": "beinan", "createdAt": "2020-08-07T04:36:03Z", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java", "diffHunk": "@@ -184,7 +184,7 @@ public DruidExpression visitCall(CallExpression call, Function<VariableReference\n             if (!(argument instanceof ConstantExpression)) {\n                 throw new PrestoException(DRUID_PUSHDOWN_UNSUPPORTED_EXPRESSION, \"Invalid Timestamp literal in Druid filter: \" + argument.toString());\n             }\n-            SqlTimestamp value = new SqlTimestamp((long) ((ConstantExpression) argument).getValue(), session.getSqlFunctionProperties().getTimeZoneKey());\n+            SqlTimestamp value = new SqlTimestamp((long) ((ConstantExpression) argument).getValue());", "originalCommit": "4cf91f1c7e6327512343f482a398342e5fd67872", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyNTQ3Mw==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466825473", "bodyText": "Hi,\nThe original code is definitely a bug here and the result is not consistent with other connector like Hive. For example, the client is in Asia/Shanghai. If I do not change the code:\npresto> select now();\n                 _col0                 \n---------------------------------------\n 2020-08-07 13:11:15.704 Asia/Shanghai \n(1 row)\n\npresto> SELECT __time FROM druid.druid.wikipedia where __time > timestamp '2015-09-12 00:00:00.000' and __time < timestamp '2015-09-12 01:00:00.000' limit 10;\n         __time          \n-------------------------\n 2015-09-12 08:46:58.771 \n 2015-09-12 08:47:00.496 \n 2015-09-12 08:47:05.474 \n 2015-09-12 08:47:08.770 \n 2015-09-12 08:47:11.862 \n 2015-09-12 08:47:13.987 \n 2015-09-12 08:47:17.009 \n 2015-09-12 08:47:19.591 \n 2015-09-12 08:47:21.578 \n 2015-09-12 08:47:25.821 \n(10 rows)\n\nQuery 20200807_040053_00004_xsw2e, FINISHED, 1 node\nSplits: 17 total, 17 done (100.00%)\n0:02 [10 rows, 90B] [4 rows/s, 43B/s]\n\nIs it reasonable?\nThe result is out of my constraint:\n__time > timestamp '2015-09-12 00:00:00.000' and __time < timestamp '2015-09-12 01:00:00.000'\nThis behavior is not consistent with other connectors, like hive.\nThe key point here is: ((ConstantExpression) argument).getValue() is already in UTC before go into druid connector. The client will convert the result time to  Asia/Shanghai again.\nYou could try to query other connector like hive.", "author": "weidongduan37", "createdAt": "2020-08-07T05:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxNTczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2NjE3NQ==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r466866175", "bodyText": "I agree with you, it's definitely a bug,  but I think the root cause is we are not passing the timezone into druid by the context parameter \"sqlTimeZone\".\nAccording to the doc, the default timezone in Druid is UTC, so we can just use the millisecond value in UTC as you said ((ConstantExpression) argument).getValue() is already in UTC.  For sure, your change could fix the issue, but we might lost the flexibility of setting the sqlTimeZone on client side.\nJust for now, I'm fine with either way, your call.", "author": "beinan", "createdAt": "2020-08-07T07:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxNTczNA=="}], "type": "inlineReview", "revised_code": {"commit": "28da710f0ac821536dafe84750798a2a75c3a6f2", "chunk": "diff --git a/presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java b/presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java\nindex 69c202a1a6..a45b7c5938 100644\n--- a/presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java\n+++ b/presto-druid/src/main/java/com/facebook/presto/druid/DruidFilterExpressionConverter.java\n\n@@ -184,7 +184,7 @@ public class DruidFilterExpressionConverter\n             if (!(argument instanceof ConstantExpression)) {\n                 throw new PrestoException(DRUID_PUSHDOWN_UNSUPPORTED_EXPRESSION, \"Invalid Timestamp literal in Druid filter: \" + argument.toString());\n             }\n-            SqlTimestamp value = new SqlTimestamp((long) ((ConstantExpression) argument).getValue());\n+            SqlTimestamp value = new SqlTimestamp((long) ((ConstantExpression) argument).getValue(), session.getSqlFunctionProperties().getTimeZoneKey());\n             return new DruidExpression(\"'\" + value.toString() + \"'\", Origin.LITERAL);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3NTY1OA==", "url": "https://github.com/prestodb/presto/pull/14967#discussion_r467175658", "bodyText": "To simplify the logic, could we use:\nif (hasAggregation) {\nthrow new PrestoException...\n}\ncheckState(...)", "author": "zhenxiao", "createdAt": "2020-08-07T17:31:48Z", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java", "diffHunk": "@@ -104,7 +105,12 @@ private DruidQueryGeneratorContext(\n \n     public DruidQueryGeneratorContext withFilter(String filter)\n     {\n-        checkState(!hasFilter(), \"Druid doesn't support filters at multiple levels\");\n+        if (!hasAggregation()) {", "originalCommit": "7007046d1413d5f469c27dce2b5ef9ed2d7da7e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28da710f0ac821536dafe84750798a2a75c3a6f2", "chunk": "diff --git a/presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java b/presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java\nindex fbcea37105..bb6fd355fa 100644\n--- a/presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java\n+++ b/presto-druid/src/main/java/com/facebook/presto/druid/DruidQueryGeneratorContext.java\n\n@@ -105,12 +105,10 @@ public class DruidQueryGeneratorContext\n \n     public DruidQueryGeneratorContext withFilter(String filter)\n     {\n-        if (!hasAggregation()) {\n-            checkState(!hasFilter(), \"Druid doesn't support filters at multiple levels under AggregationNode\");\n-        }\n-        else {\n+        if (hasAggregation()) {\n             throw new PrestoException(DRUID_PUSHDOWN_UNSUPPORTED_EXPRESSION, \"Druid does not support filter on top of AggregationNode.\");\n         }\n+        checkState(!hasFilter(), \"Druid doesn't support filters at multiple levels under AggregationNode\");\n         return new DruidQueryGeneratorContext(\n                 selections,\n                 from,\n"}}, {"oid": "28da710f0ac821536dafe84750798a2a75c3a6f2", "url": "https://github.com/prestodb/presto/commit/28da710f0ac821536dafe84750798a2a75c3a6f2", "message": "Support FilterNode on top of AggregationNode\n\n\"having\" condition for sql involves \"group by\" is common case, and it\nwill generate a FilterNode on top of AggregationNode. Previously,\nThe SQL will fail directly, and now it allows such case. However, such\nfilter is not pushed down to Druid, just filter at presto side because\nwe could not confirm all filters on top of AggregationNode have\ncorresponding 'dql' pattern to describe it.", "committedDate": "2020-08-07T21:02:23Z", "type": "commit"}, {"oid": "28da710f0ac821536dafe84750798a2a75c3a6f2", "url": "https://github.com/prestodb/presto/commit/28da710f0ac821536dafe84750798a2a75c3a6f2", "message": "Support FilterNode on top of AggregationNode\n\n\"having\" condition for sql involves \"group by\" is common case, and it\nwill generate a FilterNode on top of AggregationNode. Previously,\nThe SQL will fail directly, and now it allows such case. However, such\nfilter is not pushed down to Druid, just filter at presto side because\nwe could not confirm all filters on top of AggregationNode have\ncorresponding 'dql' pattern to describe it.", "committedDate": "2020-08-07T21:02:23Z", "type": "forcePushed"}]}