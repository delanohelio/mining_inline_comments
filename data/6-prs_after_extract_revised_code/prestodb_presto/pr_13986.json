{"pr_number": 13986, "pr_title": "Add Alluxio Hive metastore", "pr_createdAt": "2020-01-19T04:52:43Z", "pr_url": "https://github.com/prestodb/presto/pull/13986", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MTY3Ng==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369671676", "bodyText": "final", "author": "highker", "createdAt": "2020-01-22T16:39:09Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MTgzMw==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369671833", "bodyText": "requireNonNull", "author": "highker", "createdAt": "2020-01-22T16:39:24Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MjQ5Nw==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369672497", "bodyText": "nit: getSupportedColumnStatistics is not supported in AlluxioHiveMetastore.", "author": "highker", "createdAt": "2020-01-22T16:40:29Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3Mjc5NQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369672795", "bodyText": "nit: put with the previous line", "author": "highker", "createdAt": "2020-01-22T16:40:58Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzIzOA==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673238", "bodyText": "nit\nTable table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n        HIVE_METASTORE_ERROR,\n        String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));", "author": "highker", "createdAt": "2020-01-22T16:41:44Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzUxMg==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673512", "bodyText": "nit: put with the previous line", "author": "highker", "createdAt": "2020-01-22T16:42:12Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzY1MA==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673650", "bodyText": "nit: one param per line; keep the first line empty", "author": "highker", "createdAt": "2020-01-22T16:42:26Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzcwNQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673705", "bodyText": "same", "author": "highker", "createdAt": "2020-01-22T16:42:31Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,\n+            Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName,", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzczNg==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673736", "bodyText": "same", "author": "highker", "createdAt": "2020-01-22T16:42:33Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,\n+            Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics\");", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3Mzc5Ng==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673796", "bodyText": "same", "author": "highker", "createdAt": "2020-01-22T16:42:38Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,\n+            Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName,\n+            String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics\");", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3Mzk3Mw==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369673973", "bodyText": "same", "author": "highker", "createdAt": "2020-01-22T16:42:55Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName)\n+                    .orElseThrow(() -> new PrestoException(HIVE_METASTORE_ERROR,\n+                            String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats =\n+                    ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName,\n+            String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(\n+                partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName,\n+            Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName,\n+            String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,", "originalCommit": "b9fb690fa35690b733283c4b97171f9834152887", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "667075b68e64a34218dcb4ffd124dd90b409941a", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8feb131f3..0db9a74f05 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -50,6 +50,7 @@ import java.util.stream.Collectors;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n /**\n"}}, {"oid": "667075b68e64a34218dcb4ffd124dd90b409941a", "url": "https://github.com/prestodb/presto/commit/667075b68e64a34218dcb4ffd124dd90b409941a", "message": "This change introduces the Alluxio metastore which connects to the Alluxio catalog service. See: https://docs.alluxio.io/os/user/2.1/en/core-services/Catalog.html for more information on the catalog service. In this PR we introduce the bare minimum to configure and use the Alluxio catalog. Reads are the only supported operation at the moment.", "committedDate": "2020-01-22T18:03:57Z", "type": "forcePushed"}, {"oid": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "url": "https://github.com/prestodb/presto/commit/41079e213f6be84d4a9e8bfbae220bdb5c730a23", "message": "This change introduces the Alluxio metastore which connects to the Alluxio catalog service. See: https://docs.alluxio.io/os/user/2.1/en/core-services/Catalog.html for more information on the catalog service. In this PR we introduce the bare minimum to configure and use the Alluxio catalog. Reads are the only supported operation at the moment.", "committedDate": "2020-01-22T19:01:51Z", "type": "forcePushed"}, {"oid": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "url": "https://github.com/prestodb/presto/commit/40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "message": "Add Alluxio Hive metastore\n\nThis change introduces the Alluxio metastore which connects to the Alluxio catalog service. See: https://docs.alluxio.io/os/user/2.1/en/core-services/Catalog.html for more information on the catalog service. In this PR we introduce the bare minimum to configure and use the Alluxio catalog. Reads are the only supported operation at the moment.", "committedDate": "2020-01-22T21:47:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTQxMg==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369821412", "bodyText": "nit\nthis.client = requireNonNull(client, \"client is null\");", "author": "highker", "createdAt": "2020-01-22T21:46:50Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTkzNQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369821935", "bodyText": "We usually use ImmutableMap.of", "author": "highker", "createdAt": "2020-01-22T21:47:58Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTk4Nw==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369821987", "bodyText": "same", "author": "highker", "createdAt": "2020-01-22T21:48:05Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    .collect(Collectors.toList());\n+            Map<String, Optional<Partition>> result = partitionInfos.stream()\n+                    .filter(p -> partitionNames.stream().anyMatch(p.getPartitionName()::equals))\n+                    .collect(Collectors.toMap(\n+                            PartitionInfo::getPartitionName,\n+                            pi -> Optional.of(ProtoUtils.fromProto(pi))));\n+            return Collections.unmodifiableMap(result);", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjM0OA==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369822348", "bodyText": "put this with the previous line", "author": "highker", "createdAt": "2020-01-22T21:48:56Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjQwOQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369822409", "bodyText": "put an empty line before this commt", "author": "highker", "createdAt": "2020-01-22T21:49:04Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjc0OQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369822749", "bodyText": "We usually use toImmutableList; same for all other places", "author": "highker", "createdAt": "2020-01-22T21:49:47Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjkwNg==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369822906", "bodyText": "ImmutableMap.of", "author": "highker", "createdAt": "2020-01-22T21:50:05Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzAwMg==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823002", "bodyText": "put this with the previous line", "author": "highker", "createdAt": "2020-01-22T21:50:17Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzEwOA==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823108", "bodyText": "put an empty line before this commt", "author": "highker", "createdAt": "2020-01-22T21:50:28Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct", "originalCommit": "41079e213f6be84d4a9e8bfbae220bdb5c730a23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzM2NQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823365", "bodyText": "put this with the previous line", "author": "highker", "createdAt": "2020-01-22T21:51:02Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    .collect(Collectors.toList());", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzUyOQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823529", "bodyText": "nit: pi -> info", "author": "highker", "createdAt": "2020-01-22T21:51:21Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    .collect(Collectors.toList());\n+            Map<String, Optional<Partition>> result = partitionInfos.stream()\n+                    .filter(p -> partitionNames.stream().anyMatch(p.getPartitionName()::equals))\n+                    .collect(Collectors.toMap(\n+                            PartitionInfo::getPartitionName,\n+                            pi -> Optional.of(ProtoUtils.fromProto(pi))));", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMzU5Mw==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369823593", "bodyText": "immutablemap", "author": "highker", "createdAt": "2020-01-22T21:51:30Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        requireNonNull(client, \"client is null\");\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(ProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, Collections.emptyMap());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return Collections.unmodifiableMap(partitionNames.stream().collect(Collectors.toMap(identity(), (p) -> PartitionStatistics.empty())));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName,\n+            List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(Collectors.toList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(Collectors.toList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = ProtoUtils.toPartitionInfoList(\n+                    client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+            // Check that table name is correct\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    .collect(Collectors.toList());\n+            Map<String, Optional<Partition>> result = partitionInfos.stream()\n+                    .filter(p -> partitionNames.stream().anyMatch(p.getPartitionName()::equals))\n+                    .collect(Collectors.toMap(", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex f8851f30d9..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -38,6 +38,7 @@ import com.facebook.presto.spi.security.RoleGrant;\n import com.facebook.presto.spi.statistics.ColumnStatisticType;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.inject.Inject;\n \n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDA2NQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369824065", "bodyText": "Add a test for this config", "author": "highker", "createdAt": "2020-01-22T21:52:30Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastoreConfig.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+\n+/**\n+ * Configuration for the Alluxio compatible hive metastore interface.\n+ */\n+public class AlluxioHiveMetastoreConfig", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDMwMA==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369824300", "bodyText": "spell out db", "author": "highker", "createdAt": "2020-01-22T21:52:58Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nsimilarity index 76%\nrename from presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\nrename to presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nindex 094e8d80a6..4f05fccc00 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n\n@@ -16,7 +16,6 @@ package com.facebook.presto.hive.metastore.alluxio;\n import alluxio.grpc.table.FieldSchema;\n import alluxio.grpc.table.Layout;\n import alluxio.grpc.table.layout.hive.PartitionInfo;\n-import alluxio.grpc.table.layout.hive.Storage;\n import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n import com.facebook.presto.hive.HiveBucketProperty;\n import com.facebook.presto.hive.HiveType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDUyNg==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369824526", "bodyText": "put an empty line after this.", "author": "highker", "createdAt": "2020-01-22T21:53:25Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(db.getDbName())\n+                .setLocation(db.hasLocation() ? Optional.of(db.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nsimilarity index 76%\nrename from presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\nrename to presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nindex 094e8d80a6..4f05fccc00 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n\n@@ -16,7 +16,6 @@ package com.facebook.presto.hive.metastore.alluxio;\n import alluxio.grpc.table.FieldSchema;\n import alluxio.grpc.table.Layout;\n import alluxio.grpc.table.layout.hive.PartitionInfo;\n-import alluxio.grpc.table.layout.hive.Storage;\n import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n import com.facebook.presto.hive.HiveBucketProperty;\n import com.facebook.presto.hive.HiveType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTAwMA==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369825000", "bodyText": "(f) -> field", "author": "highker", "createdAt": "2020-01-22T21:54:28Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(db.getDbName())\n+                .setLocation(db.hasLocation() ? Optional.of(db.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }\n+        try {\n+            PartitionInfo partitionInfo = alluxio.table.ProtoUtils.toHiveLayout(layout);\n+\n+            // compute the data columns\n+            Set<String> partitionColumns = table.getPartitionColsList().stream().map(FieldSchema::getName).collect(Collectors.toSet());\n+            List<FieldSchema> dataColumns = table.getSchema().getColsList().stream().filter((f) -> !partitionColumns.contains(f.getName())).collect(Collectors.toList());", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nsimilarity index 76%\nrename from presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\nrename to presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nindex 094e8d80a6..4f05fccc00 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n\n@@ -16,7 +16,6 @@ package com.facebook.presto.hive.metastore.alluxio;\n import alluxio.grpc.table.FieldSchema;\n import alluxio.grpc.table.Layout;\n import alluxio.grpc.table.layout.hive.PartitionInfo;\n-import alluxio.grpc.table.layout.hive.Storage;\n import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n import com.facebook.presto.hive.HiveBucketProperty;\n import com.facebook.presto.hive.HiveType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTIxMg==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369825212", "bodyText": "spell out sd", "author": "highker", "createdAt": "2020-01-22T21:55:04Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(db.getDbName())\n+                .setLocation(db.hasLocation() ? Optional.of(db.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }\n+        try {\n+            PartitionInfo partitionInfo = alluxio.table.ProtoUtils.toHiveLayout(layout);\n+\n+            // compute the data columns\n+            Set<String> partitionColumns = table.getPartitionColsList().stream().map(FieldSchema::getName).collect(Collectors.toSet());\n+            List<FieldSchema> dataColumns = table.getSchema().getColsList().stream().filter((f) -> !partitionColumns.contains(f.getName())).collect(Collectors.toList());\n+\n+            Table.Builder builder = Table.builder()\n+                    .setDatabaseName(table.getDbName())\n+                    .setTableName(table.getTableName())\n+                    .setOwner(table.getOwner())\n+                    // TODO - Alluxio should return the actual table type\n+                    .setTableType(PrestoTableType.OTHER)\n+                    .setDataColumns(dataColumns.stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setPartitionColumns(table.getPartitionColsList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setParameters(table.getParametersMap())\n+                    .setViewOriginalText(Optional.empty())\n+                    .setViewExpandedText(Optional.empty());\n+            alluxio.grpc.table.layout.hive.Storage storage = partitionInfo.getStorage();\n+            builder.getStorageBuilder()\n+                    .setSkewed(storage.getSkewed())\n+                    .setStorageFormat(fromProto(storage.getStorageFormat()))\n+                    .setLocation(storage.getLocation())\n+                    .setBucketProperty(storage.hasBucketProperty() ? fromProto(storage.getBucketProperty()) : Optional.empty())\n+                    .setSerdeParameters(storage.getStorageFormat().getSerdelibParametersMap());\n+            return builder.build();\n+        }\n+        catch (InvalidProtocolBufferException e) {\n+            throw new IllegalArgumentException(\"Failed to extract PartitionInfo from TableInfo\", e);\n+        }\n+    }\n+\n+    private static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingColumn column)\n+    {\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.ASCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.ASCENDING);\n+        }\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.DESCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.DESCENDING);\n+        }\n+        throw new IllegalArgumentException(\"Invalid sort order: \" + column.getOrder());\n+    }\n+\n+    private static Optional<HiveBucketProperty> fromProto(alluxio.grpc.table.layout.hive.HiveBucketProperty property)\n+    {\n+        // must return empty if buckets <= 0\n+        if (!property.hasBucketCount() || property.getBucketCount() <= 0) {\n+            return Optional.empty();\n+        }\n+        List<SortingColumn> sortedBy = property.getSortedByList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList());\n+        return Optional.of(new HiveBucketProperty(property.getBucketedByList(), (int) property.getBucketCount(), sortedBy));\n+    }\n+\n+    private static Column fromProto(alluxio.grpc.table.FieldSchema column)\n+    {\n+        Optional<String> comment = column.hasComment() ? Optional.of(column.getComment()) : Optional.empty();\n+        return new Column(column.getName(), HiveType.valueOf(column.getType()), comment);\n+    }\n+\n+    public static Partition fromProto(alluxio.grpc.table.layout.hive.PartitionInfo info)\n+    {\n+        Partition.Builder builder = Partition.builder()\n+                .setColumns(info.getDataColsList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                .setDatabaseName(info.getDbName())\n+                .setParameters(info.getParametersMap())\n+                .setValues(Lists.newArrayList(info.getValuesList()))\n+                .setTableName(info.getTableName());\n+\n+        builder.getStorageBuilder()\n+                .setSkewed(info.getStorage().getSkewed())\n+                .setStorageFormat(fromProto(info.getStorage().getStorageFormat()))\n+                .setLocation(info.getStorage().getLocation())\n+                .setBucketProperty(info.getStorage().hasBucketProperty()\n+                        ? fromProto(info.getStorage().getBucketProperty()) : Optional.empty())\n+                .setSerdeParameters(info.getStorage().getStorageFormat().getSerdelibParametersMap());\n+\n+        return builder.build();\n+    }\n+\n+    static StorageFormat fromProto(alluxio.grpc.table.layout.hive.StorageFormat format)\n+    {\n+        return StorageFormat.create(format.getSerde(), format.getInputFormat(), format.getOutputFormat());\n+    }\n+\n+    public static StorageDescriptor fromProto(Storage storage)\n+    {\n+        StorageDescriptor sd = new StorageDescriptor();", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nsimilarity index 76%\nrename from presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\nrename to presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nindex 094e8d80a6..4f05fccc00 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n\n@@ -16,7 +16,6 @@ package com.facebook.presto.hive.metastore.alluxio;\n import alluxio.grpc.table.FieldSchema;\n import alluxio.grpc.table.Layout;\n import alluxio.grpc.table.layout.hive.PartitionInfo;\n-import alluxio.grpc.table.layout.hive.Storage;\n import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n import com.facebook.presto.hive.HiveBucketProperty;\n import com.facebook.presto.hive.HiveType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTI2Ng==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r369825266", "bodyText": "this method is not used?", "author": "highker", "createdAt": "2020-01-22T21:55:10Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n+import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ProtoUtils\n+{\n+    private ProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database db)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(db.getDbName())\n+                .setLocation(db.hasLocation() ? Optional.of(db.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }\n+        try {\n+            PartitionInfo partitionInfo = alluxio.table.ProtoUtils.toHiveLayout(layout);\n+\n+            // compute the data columns\n+            Set<String> partitionColumns = table.getPartitionColsList().stream().map(FieldSchema::getName).collect(Collectors.toSet());\n+            List<FieldSchema> dataColumns = table.getSchema().getColsList().stream().filter((f) -> !partitionColumns.contains(f.getName())).collect(Collectors.toList());\n+\n+            Table.Builder builder = Table.builder()\n+                    .setDatabaseName(table.getDbName())\n+                    .setTableName(table.getTableName())\n+                    .setOwner(table.getOwner())\n+                    // TODO - Alluxio should return the actual table type\n+                    .setTableType(PrestoTableType.OTHER)\n+                    .setDataColumns(dataColumns.stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setPartitionColumns(table.getPartitionColsList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setParameters(table.getParametersMap())\n+                    .setViewOriginalText(Optional.empty())\n+                    .setViewExpandedText(Optional.empty());\n+            alluxio.grpc.table.layout.hive.Storage storage = partitionInfo.getStorage();\n+            builder.getStorageBuilder()\n+                    .setSkewed(storage.getSkewed())\n+                    .setStorageFormat(fromProto(storage.getStorageFormat()))\n+                    .setLocation(storage.getLocation())\n+                    .setBucketProperty(storage.hasBucketProperty() ? fromProto(storage.getBucketProperty()) : Optional.empty())\n+                    .setSerdeParameters(storage.getStorageFormat().getSerdelibParametersMap());\n+            return builder.build();\n+        }\n+        catch (InvalidProtocolBufferException e) {\n+            throw new IllegalArgumentException(\"Failed to extract PartitionInfo from TableInfo\", e);\n+        }\n+    }\n+\n+    private static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingColumn column)\n+    {\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.ASCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.ASCENDING);\n+        }\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.DESCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.DESCENDING);\n+        }\n+        throw new IllegalArgumentException(\"Invalid sort order: \" + column.getOrder());\n+    }\n+\n+    private static Optional<HiveBucketProperty> fromProto(alluxio.grpc.table.layout.hive.HiveBucketProperty property)\n+    {\n+        // must return empty if buckets <= 0\n+        if (!property.hasBucketCount() || property.getBucketCount() <= 0) {\n+            return Optional.empty();\n+        }\n+        List<SortingColumn> sortedBy = property.getSortedByList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList());\n+        return Optional.of(new HiveBucketProperty(property.getBucketedByList(), (int) property.getBucketCount(), sortedBy));\n+    }\n+\n+    private static Column fromProto(alluxio.grpc.table.FieldSchema column)\n+    {\n+        Optional<String> comment = column.hasComment() ? Optional.of(column.getComment()) : Optional.empty();\n+        return new Column(column.getName(), HiveType.valueOf(column.getType()), comment);\n+    }\n+\n+    public static Partition fromProto(alluxio.grpc.table.layout.hive.PartitionInfo info)\n+    {\n+        Partition.Builder builder = Partition.builder()\n+                .setColumns(info.getDataColsList().stream().map(ProtoUtils::fromProto).collect(Collectors.toList()))\n+                .setDatabaseName(info.getDbName())\n+                .setParameters(info.getParametersMap())\n+                .setValues(Lists.newArrayList(info.getValuesList()))\n+                .setTableName(info.getTableName());\n+\n+        builder.getStorageBuilder()\n+                .setSkewed(info.getStorage().getSkewed())\n+                .setStorageFormat(fromProto(info.getStorage().getStorageFormat()))\n+                .setLocation(info.getStorage().getLocation())\n+                .setBucketProperty(info.getStorage().hasBucketProperty()\n+                        ? fromProto(info.getStorage().getBucketProperty()) : Optional.empty())\n+                .setSerdeParameters(info.getStorage().getStorageFormat().getSerdelibParametersMap());\n+\n+        return builder.build();\n+    }\n+\n+    static StorageFormat fromProto(alluxio.grpc.table.layout.hive.StorageFormat format)\n+    {\n+        return StorageFormat.create(format.getSerde(), format.getInputFormat(), format.getOutputFormat());\n+    }\n+\n+    public static StorageDescriptor fromProto(Storage storage)", "originalCommit": "40ab2c9bb14931075adc6e0a59b9b8d5228aa0ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nsimilarity index 76%\nrename from presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\nrename to presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nindex 094e8d80a6..4f05fccc00 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/ProtoUtils.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n\n@@ -16,7 +16,6 @@ package com.facebook.presto.hive.metastore.alluxio;\n import alluxio.grpc.table.FieldSchema;\n import alluxio.grpc.table.Layout;\n import alluxio.grpc.table.layout.hive.PartitionInfo;\n-import alluxio.grpc.table.layout.hive.Storage;\n import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n import com.facebook.presto.hive.HiveBucketProperty;\n import com.facebook.presto.hive.HiveType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODQwMQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438401", "bodyText": "address", "author": "highker", "createdAt": "2020-01-24T01:27:45Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.ClientContext;\n+import alluxio.client.table.RetryHandlingTableMasterClient;\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.master.MasterClientContext;\n+import alluxio.util.ConfigurationUtils;\n+import com.facebook.airlift.configuration.AbstractConfigurationAwareModule;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.google.inject.Binder;\n+import com.google.inject.Inject;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+import static java.util.Objects.requireNonNull;\n+import static org.weakref.jmx.ObjectNames.generatedNameOf;\n+import static org.weakref.jmx.guice.ExportBinder.newExporter;\n+\n+/**\n+ * Module for an Alluxio metastore implementation of the {@link HiveMetastore} interface.\n+ */\n+public class AlluxioMetastoreModule\n+         extends AbstractConfigurationAwareModule\n+{\n+    private final String connectorId;\n+\n+    public AlluxioMetastoreModule(String connectorId)\n+    {\n+        this.connectorId = requireNonNull(connectorId);\n+    }\n+\n+    @Override\n+    protected void setup(Binder binder)\n+    {\n+        configBinder(binder).bindConfig(AlluxioHiveMetastoreConfig.class);\n+\n+        binder.bind(ExtendedHiveMetastore.class).to(AlluxioHiveMetastore.class).in(Scopes.SINGLETON);\n+        newExporter(binder).export(ExtendedHiveMetastore.class).as(generatedNameOf(AlluxioHiveMetastore.class));\n+    }\n+\n+    @Provides\n+    @Inject\n+    TableMasterClient provideCatalogMasterClient(AlluxioHiveMetastoreConfig config)\n+    {\n+        InstancedConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+        String addr = config.getMasterAddress();", "originalCommit": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\nindex 0849d7b7fb..81c826d2e9 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\n\n@@ -39,11 +39,8 @@ import static org.weakref.jmx.guice.ExportBinder.newExporter;\n public class AlluxioMetastoreModule\n          extends AbstractConfigurationAwareModule\n {\n-    private final String connectorId;\n-\n-    public AlluxioMetastoreModule(String connectorId)\n+    public AlluxioMetastoreModule()\n     {\n-        this.connectorId = requireNonNull(connectorId);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODQxNA==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438414", "bodyText": "not used; so is the one in the constructor", "author": "highker", "createdAt": "2020-01-24T01:27:49Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.ClientContext;\n+import alluxio.client.table.RetryHandlingTableMasterClient;\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.master.MasterClientContext;\n+import alluxio.util.ConfigurationUtils;\n+import com.facebook.airlift.configuration.AbstractConfigurationAwareModule;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.google.inject.Binder;\n+import com.google.inject.Inject;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+import static java.util.Objects.requireNonNull;\n+import static org.weakref.jmx.ObjectNames.generatedNameOf;\n+import static org.weakref.jmx.guice.ExportBinder.newExporter;\n+\n+/**\n+ * Module for an Alluxio metastore implementation of the {@link HiveMetastore} interface.\n+ */\n+public class AlluxioMetastoreModule\n+         extends AbstractConfigurationAwareModule\n+{\n+    private final String connectorId;", "originalCommit": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\nindex 0849d7b7fb..81c826d2e9 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\n\n@@ -39,11 +39,8 @@ import static org.weakref.jmx.guice.ExportBinder.newExporter;\n public class AlluxioMetastoreModule\n          extends AbstractConfigurationAwareModule\n {\n-    private final String connectorId;\n-\n-    public AlluxioMetastoreModule(String connectorId)\n+    public AlluxioMetastoreModule()\n     {\n-        this.connectorId = requireNonNull(connectorId);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODU1OA==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438558", "bodyText": "merge with the pervious line", "author": "highker", "createdAt": "2020-01-24T01:28:28Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.ClientContext;\n+import alluxio.client.table.RetryHandlingTableMasterClient;\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.master.MasterClientContext;\n+import alluxio.util.ConfigurationUtils;\n+import com.facebook.airlift.configuration.AbstractConfigurationAwareModule;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.google.inject.Binder;\n+import com.google.inject.Inject;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+import static java.util.Objects.requireNonNull;\n+import static org.weakref.jmx.ObjectNames.generatedNameOf;\n+import static org.weakref.jmx.guice.ExportBinder.newExporter;\n+\n+/**\n+ * Module for an Alluxio metastore implementation of the {@link HiveMetastore} interface.\n+ */\n+public class AlluxioMetastoreModule\n+         extends AbstractConfigurationAwareModule\n+{\n+    private final String connectorId;\n+\n+    public AlluxioMetastoreModule(String connectorId)\n+    {\n+        this.connectorId = requireNonNull(connectorId);\n+    }\n+\n+    @Override\n+    protected void setup(Binder binder)\n+    {\n+        configBinder(binder).bindConfig(AlluxioHiveMetastoreConfig.class);\n+\n+        binder.bind(ExtendedHiveMetastore.class).to(AlluxioHiveMetastore.class).in(Scopes.SINGLETON);\n+        newExporter(binder).export(ExtendedHiveMetastore.class).as(generatedNameOf(AlluxioHiveMetastore.class));\n+    }\n+\n+    @Provides\n+    @Inject\n+    TableMasterClient provideCatalogMasterClient(AlluxioHiveMetastoreConfig config)\n+    {\n+        InstancedConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+        String addr = config.getMasterAddress();\n+        String[] parts = addr.split(\":\", 2);\n+        conf.set(PropertyKey.MASTER_HOSTNAME, parts[0]);\n+        if (parts.length > 1) {\n+            conf.set(PropertyKey.MASTER_RPC_PORT, parts[1]);\n+        }\n+        MasterClientContext context = MasterClientContext\n+                .newBuilder(ClientContext.create(new InstancedConfiguration(ConfigurationUtils.defaults()))).build();", "originalCommit": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\nindex 0849d7b7fb..81c826d2e9 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioMetastoreModule.java\n\n@@ -39,11 +39,8 @@ import static org.weakref.jmx.guice.ExportBinder.newExporter;\n public class AlluxioMetastoreModule\n          extends AbstractConfigurationAwareModule\n {\n-    private final String connectorId;\n-\n-    public AlluxioMetastoreModule(String connectorId)\n+    public AlluxioMetastoreModule()\n     {\n-        this.connectorId = requireNonNull(connectorId);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODc0NQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438745", "bodyText": "replace with Guava's stuff.", "author": "highker", "createdAt": "2020-01-24T01:29:15Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;", "originalCommit": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nindex 710268dbee..4f05fccc00 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n\n@@ -32,7 +32,9 @@ import com.google.common.collect.Lists;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n \n public class AlluxioProtoUtils\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzODk4MQ==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370438981", "bodyText": "merge into oneline", "author": "highker", "createdAt": "2020-01-24T01:30:12Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.shaded.client.com.google.protobuf.InvalidProtocolBufferException;\n+import com.facebook.presto.hive.HiveBucketProperty;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PrestoTableType;\n+import com.facebook.presto.hive.metastore.SortingColumn;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.spi.security.PrincipalType;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class AlluxioProtoUtils\n+{\n+    private AlluxioProtoUtils() {}\n+\n+    public static com.facebook.presto.hive.metastore.Database fromProto(alluxio.grpc.table.Database database)\n+    {\n+        return Database.builder()\n+                .setDatabaseName(database.getDbName())\n+                .setLocation(database.hasLocation() ? Optional.of(database.getLocation()) : Optional.empty())\n+                .setOwnerName(\"\") // owner name not yet supported by alluxio\n+                .setOwnerType(PrincipalType.USER) // owner type not yet supported by alluxio\n+                .build();\n+    }\n+\n+    public static Table fromProto(alluxio.grpc.table.TableInfo table)\n+    {\n+        if (!table.hasLayout()) {\n+            throw new UnsupportedOperationException(\"Unsupported table metadata. missing layout.\");\n+        }\n+        Layout layout = table.getLayout();\n+        if (!alluxio.table.ProtoUtils.isHiveLayout(layout)) {\n+            throw new UnsupportedOperationException(\"Unsupported table layout: \" + layout);\n+        }\n+\n+        try {\n+            PartitionInfo partitionInfo = alluxio.table.ProtoUtils.toHiveLayout(layout);\n+\n+            // compute the data columns\n+            Set<String> partitionColumns = table.getPartitionColsList().stream().map(FieldSchema::getName).collect(Collectors.toSet());\n+            List<FieldSchema> dataColumns = table.getSchema().getColsList().stream().filter((field) -> !partitionColumns.contains(field.getName())).collect(Collectors.toList());\n+\n+            Table.Builder builder = Table.builder()\n+                    .setDatabaseName(table.getDbName())\n+                    .setTableName(table.getTableName())\n+                    .setOwner(table.getOwner())\n+                    // TODO - Alluxio should return the actual table type\n+                    .setTableType(PrestoTableType.OTHER)\n+                    .setDataColumns(dataColumns.stream().map(AlluxioProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setPartitionColumns(table.getPartitionColsList().stream().map(AlluxioProtoUtils::fromProto).collect(Collectors.toList()))\n+                    .setParameters(table.getParametersMap())\n+                    .setViewOriginalText(Optional.empty())\n+                    .setViewExpandedText(Optional.empty());\n+            alluxio.grpc.table.layout.hive.Storage storage = partitionInfo.getStorage();\n+            builder.getStorageBuilder()\n+                    .setSkewed(storage.getSkewed())\n+                    .setStorageFormat(fromProto(storage.getStorageFormat()))\n+                    .setLocation(storage.getLocation())\n+                    .setBucketProperty(storage.hasBucketProperty() ? fromProto(storage.getBucketProperty()) : Optional.empty())\n+                    .setSerdeParameters(storage.getStorageFormat().getSerdelibParametersMap());\n+            return builder.build();\n+        }\n+        catch (InvalidProtocolBufferException e) {\n+            throw new IllegalArgumentException(\"Failed to extract PartitionInfo from TableInfo\", e);\n+        }\n+    }\n+\n+    private static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingColumn column)\n+    {\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.ASCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.ASCENDING);\n+        }\n+        if (column.getOrder().equals(alluxio.grpc.table.layout.hive.SortingColumn.SortingOrder.DESCENDING)) {\n+            return new SortingColumn(column.getColumnName(), SortingColumn.Order.DESCENDING);\n+        }\n+        throw new IllegalArgumentException(\"Invalid sort order: \" + column.getOrder());\n+    }\n+\n+    private static Optional<HiveBucketProperty> fromProto(alluxio.grpc.table.layout.hive.HiveBucketProperty property)\n+    {\n+        // must return empty if buckets <= 0\n+        if (!property.hasBucketCount() || property.getBucketCount() <= 0) {\n+            return Optional.empty();\n+        }\n+        List<SortingColumn> sortedBy = property.getSortedByList().stream().map(AlluxioProtoUtils::fromProto).collect(Collectors.toList());\n+        return Optional.of(new HiveBucketProperty(property.getBucketedByList(), (int) property.getBucketCount(), sortedBy));\n+    }\n+\n+    private static Column fromProto(alluxio.grpc.table.FieldSchema column)\n+    {\n+        Optional<String> comment = column.hasComment() ? Optional.of(column.getComment()) : Optional.empty();\n+        return new Column(column.getName(), HiveType.valueOf(column.getType()), comment);\n+    }\n+\n+    public static Partition fromProto(alluxio.grpc.table.layout.hive.PartitionInfo info)\n+    {\n+        Partition.Builder builder = Partition.builder()\n+                .setColumns(info.getDataColsList().stream().map(AlluxioProtoUtils::fromProto).collect(Collectors.toList()))\n+                .setDatabaseName(info.getDbName())\n+                .setParameters(info.getParametersMap())\n+                .setValues(Lists.newArrayList(info.getValuesList()))\n+                .setTableName(info.getTableName());\n+\n+        builder.getStorageBuilder()\n+                .setSkewed(info.getStorage().getSkewed())\n+                .setStorageFormat(fromProto(info.getStorage().getStorageFormat()))\n+                .setLocation(info.getStorage().getLocation())\n+                .setBucketProperty(info.getStorage().hasBucketProperty()\n+                        ? fromProto(info.getStorage().getBucketProperty()) : Optional.empty())", "originalCommit": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\nindex 710268dbee..4f05fccc00 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java\n\n@@ -32,7 +32,9 @@ import com.google.common.collect.Lists;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n \n public class AlluxioProtoUtils\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzOTQxMw==", "url": "https://github.com/prestodb/presto/pull/13986#discussion_r370439413", "bodyText": "nit\nreturn partitionInfos.stream().\n...", "author": "highker", "createdAt": "2020-01-24T01:31:41Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore.alluxio;\n+\n+import alluxio.client.table.TableMasterClient;\n+import alluxio.exception.status.AlluxioStatusException;\n+import alluxio.grpc.table.Constraint;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import com.facebook.presto.hive.HiveBasicStatistics;\n+import com.facebook.presto.hive.HiveType;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Database;\n+import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.HivePrivilegeInfo;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.PrincipalPrivileges;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.metastore.thrift.HiveMetastore;\n+import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.security.PrestoPrincipal;\n+import com.facebook.presto.spi.security.RoleGrant;\n+import com.facebook.presto.spi.statistics.ColumnStatisticType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+/**\n+ * Implementation of the {@link HiveMetastore} interface through Alluxio.\n+ */\n+public class AlluxioHiveMetastore\n+        implements ExtendedHiveMetastore\n+{\n+    private final TableMasterClient client;\n+\n+    @Inject\n+    public AlluxioHiveMetastore(TableMasterClient client)\n+    {\n+        this.client = requireNonNull(client, \"client is null\");\n+    }\n+\n+    @Override\n+    public Optional<Database> getDatabase(String databaseName)\n+    {\n+        try {\n+            return Optional.of(AlluxioProtoUtils.fromProto(client.getDatabase(databaseName)));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getAllDatabases()\n+    {\n+        try {\n+            return client.getAllDatabases();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Table> getTable(String databaseName, String tableName)\n+    {\n+        try {\n+            return Optional.of(AlluxioProtoUtils.fromProto(client.getTable(databaseName, tableName)));\n+        }\n+        catch (NotFoundException e) {\n+            return Optional.empty();\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n+    {\n+        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n+    {\n+        try {\n+            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n+                    HIVE_METASTORE_ERROR,\n+                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n+            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n+            return new PartitionStatistics(basicStats, ImmutableMap.of());\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n+    {\n+        // TODO implement partition statistics\n+        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n+        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+    }\n+\n+    @Override\n+    public void updateTableStatistics(String databaseName, String tableName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updateTableStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void updatePartitionStatistics(String databaseName, String tableName, String partitionName, Function<PartitionStatistics, PartitionStatistics> update)\n+    {\n+        throw new UnsupportedOperationException(\"updatePartitionStatistics is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllTables(String databaseName)\n+    {\n+        try {\n+            return Optional.of(client.getAllTables(databaseName));\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getAllViews(String databaseName)\n+    {\n+        // TODO: Add views on the server side\n+        return Optional.of(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public void createDatabase(Database database)\n+    {\n+        throw new UnsupportedOperationException(\"createDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropDatabase(String databaseName)\n+    {\n+        throw new UnsupportedOperationException(\"dropDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameDatabase(String databaseName, String newDatabaseName)\n+    {\n+        throw new UnsupportedOperationException(\"renameDatabase is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void createTable(Table table, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"createTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropTable(String databaseName, String tableName, boolean deleteData)\n+    {\n+        throw new UnsupportedOperationException(\"dropTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void replaceTable(String databaseName, String tableName, Table newTable, PrincipalPrivileges principalPrivileges)\n+    {\n+        throw new UnsupportedOperationException(\"replaceTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameTable(String databaseName, String tableName, String newDatabaseName, String newTableName)\n+    {\n+        throw new UnsupportedOperationException(\"renameTable is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void addColumn(String databaseName, String tableName, String columnName, HiveType columnType, String columnComment)\n+    {\n+        throw new UnsupportedOperationException(\"addColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void renameColumn(String databaseName, String tableName, String oldColumnName, String newColumnName)\n+    {\n+        throw new UnsupportedOperationException(\"renameColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public void dropColumn(String databaseName, String tableName, String columnName)\n+    {\n+        throw new UnsupportedOperationException(\"dropColumn is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<Partition> getPartition(String databaseName, String tableName, List<String> partitionValues)\n+    {\n+        throw new UnsupportedOperationException(\"getPartition is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public Optional<List<String>> getPartitionNames(String databaseName, String tableName)\n+    {\n+        throw new UnsupportedOperationException(\"getPartitionNames is not supported in AlluxioHiveMetastore\");\n+    }\n+\n+    @Override\n+    public List<String> getPartitionNamesByFilter(String databaseName, String tableName, Map<Column, Domain> partitionPredicates)\n+    {\n+        List<String> parts = convertPredicateToParts(partitionPredicates);\n+        return getPartitionNamesByParts(databaseName, tableName, parts).orElse(ImmutableList.of());\n+    }\n+\n+    /**\n+     * return a list of partition names by which the values of each partition is at least\n+     * contained which the {@code parts} argument\n+     *\n+     * @param databaseName database name\n+     * @param tableName    table name\n+     * @param parts        list of values which returned partitions should contain\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     */\n+    public Optional<List<String>> getPartitionNamesByParts(String databaseName, String tableName, List<String> parts)\n+    {\n+        try {\n+            List<PartitionInfo> partitionInfos = AlluxioProtoUtils.toPartitionInfoList(client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName))\n+                    // Filter out any partitions which have values that don't match\n+                    .filter(partition -> {\n+                        List<String> values = partition.getValuesList();\n+                        if (values.size() != parts.size()) {\n+                            return false;\n+                        }\n+                        for (int i = 0; i < values.size(); i++) {\n+                            String constraintPart = parts.get(i);\n+                            if (!constraintPart.isEmpty() && !values.get(i).equals(constraintPart)) {\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    })\n+                    .collect(toImmutableList());\n+            List<String> partitionNames = partitionInfos.stream().map(PartitionInfo::getPartitionName).collect(toImmutableList());\n+            return Optional.of(partitionNames);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        if (partitionNames.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        try {\n+            // Get all partitions\n+            List<PartitionInfo> partitionInfos = AlluxioProtoUtils.toPartitionInfoList(client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));\n+\n+            // TODO also check for database name equality\n+            partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName)).collect(toImmutableList());\n+            Map<String, Optional<Partition>> result = partitionInfos.stream()", "originalCommit": "9c67d17ddbf123c0a0aed03afa8642bb0a6d7d27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\nindex 09f68e5b50..5b26561495 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java\n\n@@ -296,10 +296,9 @@ public class AlluxioHiveMetastore\n \n             // TODO also check for database name equality\n             partitionInfos = partitionInfos.stream().filter(p -> p.getTableName().equals(tableName)).collect(toImmutableList());\n-            Map<String, Optional<Partition>> result = partitionInfos.stream()\n+            return partitionInfos.stream()\n                     .filter(p -> partitionNames.stream().anyMatch(p.getPartitionName()::equals))\n                     .collect(toImmutableMap(PartitionInfo::getPartitionName, partitionInfo -> Optional.of(AlluxioProtoUtils.fromProto(partitionInfo))));\n-            return result;\n         }\n         catch (AlluxioStatusException e) {\n             throw new PrestoException(HIVE_METASTORE_ERROR, e);\n"}}, {"oid": "a6743cb4150eadba003d45451932bd0edc1a0ab6", "url": "https://github.com/prestodb/presto/commit/a6743cb4150eadba003d45451932bd0edc1a0ab6", "message": "Add Alluxio Hive metastore\n\nThis change introduces the Alluxio metastore which connects to the Alluxio catalog service. See: https://docs.alluxio.io/os/user/2.1/en/core-services/Catalog.html for more information on the catalog service. In this PR we introduce the bare minimum to configure and use the Alluxio catalog. Reads are the only supported operation at the moment.\n\nCo-authored-by: David Zhu <david@alluxio.com>\nCo-authored-by: Zac Blanco <zac@alluxio.com>", "committedDate": "2020-01-24T02:08:43Z", "type": "forcePushed"}, {"oid": "f6f08bbf2863c4fec7d88bdb23dbf566aee84499", "url": "https://github.com/prestodb/presto/commit/f6f08bbf2863c4fec7d88bdb23dbf566aee84499", "message": "Add Alluxio Hive metastore\n\nThis change introduces the Alluxio metastore which connects to the Alluxio catalog service. See: https://docs.alluxio.io/os/user/2.1/en/core-services/Catalog.html for more information on the catalog service. In this PR we introduce the bare minimum to configure and use the Alluxio catalog. Reads are the only supported operation at the moment.\n\nCo-authored-by: David Zhu <david@alluxio.com>\nCo-authored-by: Zac Blanco <zac@alluxio.com>", "committedDate": "2020-01-24T03:16:00Z", "type": "forcePushed"}, {"oid": "acb25d1d4f90046f796679b0f3d66016dea226f8", "url": "https://github.com/prestodb/presto/commit/acb25d1d4f90046f796679b0f3d66016dea226f8", "message": "Add Alluxio Hive metastore\n\nThis change introduces the Alluxio metastore which connects to the Alluxio catalog service. See: https://docs.alluxio.io/os/user/2.1/en/core-services/Catalog.html for more information on the catalog service. In this PR we introduce the bare minimum to configure and use the Alluxio catalog. Reads are the only supported operation at the moment.\n\nCo-authored-by: David Zhu <david@alluxio.com>\nCo-authored-by: Zac Blanco <zac@alluxio.com>", "committedDate": "2020-01-24T03:45:20Z", "type": "commit"}, {"oid": "acb25d1d4f90046f796679b0f3d66016dea226f8", "url": "https://github.com/prestodb/presto/commit/acb25d1d4f90046f796679b0f3d66016dea226f8", "message": "Add Alluxio Hive metastore\n\nThis change introduces the Alluxio metastore which connects to the Alluxio catalog service. See: https://docs.alluxio.io/os/user/2.1/en/core-services/Catalog.html for more information on the catalog service. In this PR we introduce the bare minimum to configure and use the Alluxio catalog. Reads are the only supported operation at the moment.\n\nCo-authored-by: David Zhu <david@alluxio.com>\nCo-authored-by: Zac Blanco <zac@alluxio.com>", "committedDate": "2020-01-24T03:45:20Z", "type": "forcePushed"}]}