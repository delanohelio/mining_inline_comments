{"pr_number": 13982, "pr_title": "Cache builtin function resolution result", "pr_createdAt": "2020-01-17T22:47:52Z", "pr_url": "https://github.com/prestodb/presto/pull/13982", "timeline": [{"oid": "7e731caadd350375bc748be35bfd4c7c5fe1db85", "url": "https://github.com/prestodb/presto/commit/7e731caadd350375bc748be35bfd4c7c5fe1db85", "message": "Cache builtin function resolution result", "committedDate": "2020-01-17T22:58:46Z", "type": "commit"}, {"oid": "7e731caadd350375bc748be35bfd4c7c5fe1db85", "url": "https://github.com/prestodb/presto/commit/7e731caadd350375bc748be35bfd4c7c5fe1db85", "message": "Cache builtin function resolution result", "committedDate": "2020-01-17T22:58:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MDM2Mw==", "url": "https://github.com/prestodb/presto/pull/13982#discussion_r369190363", "bodyText": "We have 500+ functions, with high chances of different parameterTypes resolving to the same function, the cache could easily exceeds 1k entries after a reasonable amount of queries are executable. What about giving it a more generous size, like 10k? Or even better, make else it configurable?", "author": "caithagoras", "createdAt": "2020-01-21T19:12:04Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -122,6 +132,11 @@ public FunctionManager(\n         }\n         // TODO: Provide a more encapsulated way for TransactionManager to register FunctionNamespaceManager\n         transactionManager.registerFunctionNamespaceManager(BuiltInFunctionNamespaceManager.ID, builtInFunctionNamespaceManager);\n+        this.functionCache = CacheBuilder.newBuilder()\n+                .recordStats()\n+                .maximumSize(1000)", "originalCommit": "7e731caadd350375bc748be35bfd4c7c5fe1db85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyMTQ1OQ==", "url": "https://github.com/prestodb/presto/pull/13982#discussion_r369221459", "bodyText": "The goal is not to cache everything. Caching the top use cases is enough. The major target is the operators that's used over and over again in query planning (e.g., operator$equal(varchar, varchar) is used for every partition in PickTableLayout. Shadow testing showed that depending on the workload, No.1 hit can be 1 to 3 orders of magnitude higher than No.5. The overhead of resolving one function that's actually used in query is not that much. It's not clear to me that the processing time saved would worth the memory spent for the majority of the functions.", "author": "rongrong", "createdAt": "2020-01-21T20:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MDM2Mw=="}], "type": "inlineReview", "revised_code": null}]}