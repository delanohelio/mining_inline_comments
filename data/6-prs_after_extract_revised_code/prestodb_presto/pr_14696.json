{"pr_number": 14696, "pr_title": "Support common sub-expression optimization in CursorProcessorCompiler", "pr_createdAt": "2020-06-22T18:36:54Z", "pr_url": "https://github.com/prestodb/presto/pull/14696", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NjQ5OA==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r443756498", "bodyText": "Is this needed?", "author": "rongrong", "createdAt": "2020-06-22T18:44:29Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -423,7 +424,8 @@ private static MethodDefinition generateProcessMethod(\n         return method;\n     }\n \n-    private List<MethodDefinition> generateCommonSubExpressionMethods(\n+    private static List<MethodDefinition> generateCommonSubExpressionMethods(\n+            Metadata metadata,", "originalCommit": "f7c7a40c28bb0175586284da156b6f11ba809fa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxOTU2NQ==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447919565", "bodyText": "I think this change can be removed, right?", "author": "rongrong", "createdAt": "2020-06-30T19:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NjQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MTAwMg==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447941002", "bodyText": "@rongrong it is removed already", "author": "frankobe", "createdAt": "2020-06-30T19:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NjQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\nindex 48f38dcb72..b17938e957 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n\n@@ -424,8 +426,7 @@ public class PageFunctionCompiler\n         return method;\n     }\n \n-    private static List<MethodDefinition> generateCommonSubExpressionMethods(\n-            Metadata metadata,\n+    private List<MethodDefinition> generateCommonSubExpressionMethods(\n             SqlFunctionProperties sqlFunctionProperties,\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODMyNw==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r443758327", "bodyText": "Why is this needed (handle lambda differently from before)? Ideally we'd want to reuse lambda bytecode if they are the same cross different projections. If there's any issue preventing us from doing so, we should try to fix that first.", "author": "rongrong", "createdAt": "2020-06-22T18:48:20Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java", "diffHunk": "@@ -75,13 +94,30 @@ public void generateMethods(SqlFunctionProperties sqlFunctionProperties, ClassDe\n \n         generateProcessMethod(classDefinition, projections.size());\n \n-        Map<LambdaDefinitionExpression, CompiledLambda> filterCompiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, filter, metadata, sqlFunctionProperties, \"filter\");\n-        generateFilterMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, filterCompiledLambdaMap, filter);\n+        ImmutableMap.Builder<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMapBuilder = ImmutableMap.builder();\n+        compiledLambdaMapBuilder.putAll(generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, filter, metadata, sqlFunctionProperties, \"filter\"));\n+\n+        for (int i = 0; i < projections.size(); i++) {\n+            String methodName = \"project_\" + i;\n+            compiledLambdaMapBuilder.putAll(generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projections.get(i), metadata, sqlFunctionProperties, methodName));", "originalCommit": "f7c7a40c28bb0175586284da156b6f11ba809fa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MDA0OA==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r445750048", "bodyText": "@rongrong This is actually the original implementation. It is changed to generate Lambda methods from projections and filter at once with methodName=\"\"", "author": "frankobe", "createdAt": "2020-06-25T18:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NDQ4NQ==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r445874485", "bodyText": "This is not necessary. LambdaBytecodeGenerator has an API to take List<RowExpression>. In fact the API that takes a single RowExpression internally calls the other API. So we might as well change this logic to directly generate lambdas for all projections in one go. I don't think distinguishing project name is necessary. This actually might cause some missed opportunities to reuse generated lambda functions. (If two project has the same lambda, this would generate two different methods with exactly the same implementation.) So give it a try and see whether it works.", "author": "rongrong", "createdAt": "2020-06-25T22:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NTcwMg==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r445875702", "bodyText": "@rongrong Exactly, current implementation generates lambda from filter and projections in one pass. The comment is based on an outdated commit", "author": "frankobe", "createdAt": "2020-06-25T22:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\nindex 6983c7711a..8d7ac11eef 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\n\n@@ -92,26 +93,30 @@ public class CursorProcessorCompiler\n     {\n         CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(classDefinition, callSiteBinder);\n \n-        generateProcessMethod(classDefinition, projections.size());\n+        List<RowExpression> rowExpressions = ImmutableList.<RowExpression>builder()\n+                .addAll(projections)\n+                .add(filter)\n+                .build();\n \n-        ImmutableMap.Builder<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMapBuilder = ImmutableMap.builder();\n-        compiledLambdaMapBuilder.putAll(generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, filter, metadata, sqlFunctionProperties, \"filter\"));\n+        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, rowExpressions, metadata, sqlFunctionProperties, \"\");\n+        Map<VariableReferenceExpression, CommonSubExpressionFields> cseFields = ImmutableMap.of();\n+        if (isOptimizeCommonSubExpressions) {\n+            Map<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressionsByLevel = collectCSEByLevel(rowExpressions);\n \n-        for (int i = 0; i < projections.size(); i++) {\n-            String methodName = \"project_\" + i;\n-            compiledLambdaMapBuilder.putAll(generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projections.get(i), metadata, sqlFunctionProperties, methodName));\n-        }\n-        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = compiledLambdaMapBuilder.build();\n+            if (!commonSubExpressionsByLevel.isEmpty()) {\n+                cseFields = declareCommonSubExpressionFields(classDefinition, commonSubExpressionsByLevel);\n+                generateCommonSubExpressionMethods(metadata, sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, commonSubExpressionsByLevel, cseFields);\n \n-        ImmutableMap.Builder<VariableReferenceExpression, CommonSubExpressionFields> cseFieldBuilder = ImmutableMap.builder();\n-        if (isOptimizeCommonSubExpressions) {\n-            Parameter properties = arg(\"properties\", SqlFunctionProperties.class);\n-            Parameter cursor = arg(\"cursor\", RecordCursor.class);\n-            Parameter output = arg(\"output\", BlockBuilder.class);\n-            projections = rewriteRowExpressionsWithCSE(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projections, cseFieldBuilder, properties, cursor, output);\n-            filter = rewriteRowExpressionsWithCSE(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, ImmutableList.of(filter), cseFieldBuilder, properties, cursor).get(0);\n+                Map<RowExpression, VariableReferenceExpression> commonSubExpressions = commonSubExpressionsByLevel.values().stream()\n+                        .flatMap(m -> m.entrySet().stream())\n+                        .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+                projections = rewriteRowExpressionsWithCSE(projections, commonSubExpressions);\n+                filter = rewriteRowExpressionsWithCSE(ImmutableList.of(filter), commonSubExpressions).get(0);\n+            }\n         }\n-        ImmutableMap<VariableReferenceExpression, CommonSubExpressionFields> cseFields = cseFieldBuilder.build();\n+\n+        generateProcessMethod(classDefinition, projections.size(), cseFields);\n \n         generateFilterMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, filter, cseFields);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NTc4OA==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r445875788", "bodyText": "You can just do\n        List<RowExpression> rowExpressions = ImmutableList.<RowExpression>builder()\n                .addAll(projections)\n                .add(filter)\n                .build();", "author": "rongrong", "createdAt": "2020-06-25T22:35:52Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java", "diffHunk": "@@ -40,48 +41,87 @@\n import com.facebook.presto.spi.relation.SpecialFormExpression;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n import com.facebook.presto.sql.gen.LambdaBytecodeGenerator.CompiledLambda;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.Primitives;\n import io.airlift.slice.Slice;\n \n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n \n+import static com.facebook.presto.bytecode.Access.PRIVATE;\n import static com.facebook.presto.bytecode.Access.PUBLIC;\n import static com.facebook.presto.bytecode.Access.a;\n import static com.facebook.presto.bytecode.Parameter.arg;\n import static com.facebook.presto.bytecode.ParameterizedType.type;\n+import static com.facebook.presto.bytecode.expression.BytecodeExpressions.constantBoolean;\n+import static com.facebook.presto.bytecode.expression.BytecodeExpressions.constantFalse;\n import static com.facebook.presto.bytecode.expression.BytecodeExpressions.constantTrue;\n import static com.facebook.presto.bytecode.expression.BytecodeExpressions.newInstance;\n import static com.facebook.presto.bytecode.expression.BytecodeExpressions.or;\n import static com.facebook.presto.bytecode.instruction.JumpInstruction.jump;\n+import static com.facebook.presto.sql.gen.BytecodeUtils.boxPrimitiveIfNecessary;\n+import static com.facebook.presto.sql.gen.BytecodeUtils.unboxPrimitiveIfNecessary;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionFields.declareCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionFields.initializeCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.collectCSEByLevel;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.rewriteExpressionWithCSE;\n import static com.facebook.presto.sql.gen.LambdaBytecodeGenerator.generateMethodsForLambda;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n import static java.lang.String.format;\n \n public class CursorProcessorCompiler\n         implements BodyCompiler\n {\n+    private static Logger log = Logger.get(CursorProcessorCompiler.class);\n+\n     private final Metadata metadata;\n+    private final boolean isOptimizeCommonSubExpressions;\n \n-    public CursorProcessorCompiler(Metadata metadata)\n+    public CursorProcessorCompiler(Metadata metadata, boolean isOptimizeCommonSubExpressions)\n     {\n         this.metadata = metadata;\n+        this.isOptimizeCommonSubExpressions = isOptimizeCommonSubExpressions;\n     }\n \n     @Override\n     public void generateMethods(SqlFunctionProperties sqlFunctionProperties, ClassDefinition classDefinition, CallSiteBinder callSiteBinder, RowExpression filter, List<RowExpression> projections)\n     {\n         CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(classDefinition, callSiteBinder);\n \n-        generateProcessMethod(classDefinition, projections.size());\n+        ImmutableList.Builder<RowExpression> rowExpressionsBuilder = ImmutableList.builder();", "originalCommit": "92c09f2d19f4d50694242a5f0cce21b12166d405", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\nindex 53a70fb2ba..8d7ac11eef 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\n\n@@ -64,8 +64,9 @@ import static com.facebook.presto.bytecode.expression.BytecodeExpressions.or;\n import static com.facebook.presto.bytecode.instruction.JumpInstruction.jump;\n import static com.facebook.presto.sql.gen.BytecodeUtils.boxPrimitiveIfNecessary;\n import static com.facebook.presto.sql.gen.BytecodeUtils.unboxPrimitiveIfNecessary;\n-import static com.facebook.presto.sql.gen.CommonSubExpressionFields.declareCommonSubExpressionFields;\n-import static com.facebook.presto.sql.gen.CommonSubExpressionFields.initializeCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.CommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.CommonSubExpressionFields.declareCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.CommonSubExpressionFields.initializeCommonSubExpressionFields;\n import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.collectCSEByLevel;\n import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.rewriteExpressionWithCSE;\n import static com.facebook.presto.sql.gen.LambdaBytecodeGenerator.generateMethodsForLambda;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MzU3OQ==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r446353579", "bodyText": "What is this output? Is this supposed to be the result of the whole expression that will be written to the output page? If that's the case, I don't think the cse functions need it.", "author": "rongrong", "createdAt": "2020-06-26T18:49:25Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java", "diffHunk": "@@ -265,7 +336,79 @@ private void generateProjectMethod(\n                 .ret();\n     }\n \n-    private static RowExpressionVisitor<BytecodeNode, Scope> fieldReferenceCompiler(Variable cursorVariable)\n+    private List<MethodDefinition> generateCommonSubExpressionMethods(\n+            Metadata metadata,\n+            SqlFunctionProperties sqlFunctionProperties,\n+            ClassDefinition classDefinition,\n+            CallSiteBinder callSiteBinder,\n+            CachedInstanceBinder cachedInstanceBinder,\n+            Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap,\n+            Map<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressionsByLevel,\n+            Map<VariableReferenceExpression, CommonSubExpressionFields> commonSubExpressionFieldsMap)\n+    {\n+        Parameter properties = arg(\"properties\", SqlFunctionProperties.class);\n+        Parameter cursor = arg(\"cursor\", RecordCursor.class);\n+        Parameter output = arg(\"output\", BlockBuilder.class);", "originalCommit": "92c09f2d19f4d50694242a5f0cce21b12166d405", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\nindex 53a70fb2ba..8d7ac11eef 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java\n\n@@ -348,7 +346,6 @@ public class CursorProcessorCompiler\n     {\n         Parameter properties = arg(\"properties\", SqlFunctionProperties.class);\n         Parameter cursor = arg(\"cursor\", RecordCursor.class);\n-        Parameter output = arg(\"output\", BlockBuilder.class);\n \n         ImmutableList.Builder<MethodDefinition> methods = ImmutableList.builder();\n         Map<VariableReferenceExpression, CommonSubExpressionFields> cseMap = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NDU1OQ==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r446354559", "bodyText": "Maybe put this as a static class inside CommonSubExpressionRewritter. The class doesn't make a lot of sense standalone, especially the functions are specific to generating certain part of expression evaluation classes.", "author": "rongrong", "createdAt": "2020-06-26T18:51:38Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CommonSubExpressionFields.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.bytecode.BytecodeBlock;\n+import com.facebook.presto.bytecode.ClassDefinition;\n+import com.facebook.presto.bytecode.FieldDefinition;\n+import com.facebook.presto.bytecode.Variable;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.primitives.Primitives;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import static com.facebook.presto.bytecode.Access.PRIVATE;\n+import static com.facebook.presto.bytecode.Access.a;\n+import static com.facebook.presto.bytecode.expression.BytecodeExpressions.constantBoolean;\n+import static com.facebook.presto.bytecode.expression.BytecodeExpressions.constantNull;\n+\n+public class CommonSubExpressionFields", "originalCommit": "92c09f2d19f4d50694242a5f0cce21b12166d405", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/CommonSubExpressionFields.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/CommonSubExpressionFields.java\ndeleted file mode 100644\nindex 3f477a13b4..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/CommonSubExpressionFields.java\n+++ /dev/null\n\n@@ -1,89 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.gen;\n-\n-import com.facebook.presto.bytecode.BytecodeBlock;\n-import com.facebook.presto.bytecode.ClassDefinition;\n-import com.facebook.presto.bytecode.FieldDefinition;\n-import com.facebook.presto.bytecode.Variable;\n-import com.facebook.presto.spi.relation.RowExpression;\n-import com.facebook.presto.spi.relation.VariableReferenceExpression;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.primitives.Primitives;\n-\n-import java.util.Collection;\n-import java.util.Map;\n-\n-import static com.facebook.presto.bytecode.Access.PRIVATE;\n-import static com.facebook.presto.bytecode.Access.a;\n-import static com.facebook.presto.bytecode.expression.BytecodeExpressions.constantBoolean;\n-import static com.facebook.presto.bytecode.expression.BytecodeExpressions.constantNull;\n-\n-public class CommonSubExpressionFields\n-{\n-    private final FieldDefinition evaluatedField;\n-    private final FieldDefinition resultField;\n-    private final Class<?> resultType;\n-    private final String methodName;\n-\n-    public CommonSubExpressionFields(FieldDefinition evaluatedField, FieldDefinition resultField, Class<?> resultType, String methodName)\n-    {\n-        this.evaluatedField = evaluatedField;\n-        this.resultField = resultField;\n-        this.resultType = resultType;\n-        this.methodName = methodName;\n-    }\n-\n-    public FieldDefinition getEvaluatedField()\n-    {\n-        return evaluatedField;\n-    }\n-\n-    public FieldDefinition getResultField()\n-    {\n-        return resultField;\n-    }\n-\n-    public String getMethodName()\n-    {\n-        return methodName;\n-    }\n-\n-    public Class<?> getResultType()\n-    {\n-        return resultType;\n-    }\n-\n-    public static Map<VariableReferenceExpression, CommonSubExpressionFields> declareCommonSubExpressionFields(ClassDefinition classDefinition, Map<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressionsByLevel)\n-    {\n-        ImmutableMap.Builder<VariableReferenceExpression, CommonSubExpressionFields> fields = ImmutableMap.builder();\n-        commonSubExpressionsByLevel.values().stream().map(Map::values).flatMap(Collection::stream).forEach(variable -> {\n-            Class<?> type = Primitives.wrap(variable.getType().getJavaType());\n-            fields.put(variable, new CommonSubExpressionFields(\n-                    classDefinition.declareField(a(PRIVATE), variable.getName() + \"Evaluated\", boolean.class),\n-                    classDefinition.declareField(a(PRIVATE), variable.getName() + \"Result\", type),\n-                    type,\n-                    \"get\" + variable.getName()));\n-        });\n-        return fields.build();\n-    }\n-\n-    public static void initializeCommonSubExpressionFields(Collection<CommonSubExpressionFields> cseFields, Variable thisVariable, BytecodeBlock body)\n-    {\n-        cseFields.forEach(fields -> {\n-            body.append(thisVariable.setField(fields.getEvaluatedField(), constantBoolean(false)));\n-            body.append(thisVariable.setField(fields.getResultField(), constantNull(fields.getResultType())));\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxODg1OA==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447918858", "bodyText": "This change is unnecessary right?", "author": "rongrong", "createdAt": "2020-06-30T19:11:06Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -813,23 +795,7 @@ private static void declareBlockVariables(List<RowExpression> expressions, Param\n         return array;\n     }\n \n-    private static class CommonSubExpressionFields\n-    {\n-        private final FieldDefinition evaluatedField;\n-        private final FieldDefinition resultField;\n-        private final Class<?> resultType;\n-        private final String methodName;\n-\n-        public CommonSubExpressionFields(FieldDefinition evaluatedField, FieldDefinition resultField, Class<?> resultType, String methodName)\n-        {\n-            this.evaluatedField = evaluatedField;\n-            this.resultField = resultField;\n-            this.resultType = resultType;\n-            this.methodName = methodName;\n-        }\n-    }\n-\n-    private static class FieldAndVariableReferenceCompiler\n+    static class FieldAndVariableReferenceCompiler", "originalCommit": "f3ba01cccdf683eb729ceec0fa97c924c28a46ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\nindex b870789158..b17938e957 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n\n@@ -795,7 +794,7 @@ public class PageFunctionCompiler\n         return array;\n     }\n \n-    static class FieldAndVariableReferenceCompiler\n+    private static class FieldAndVariableReferenceCompiler\n             implements RowExpressionVisitor<BytecodeNode, Scope>\n     {\n         private final InputReferenceCompiler inputReferenceCompiler;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMTM4OQ==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447921389", "bodyText": "rewriteRowExpressionsWithCSE(rowExpressions, commonSubExpressions)? You might want to rename rowExpressions to projections to be clear.", "author": "rongrong", "createdAt": "2020-06-30T19:15:57Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.bytecode.ClassDefinition;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.function.SqlFunctionProperties;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.operator.DriverYieldSignal;\n+import com.facebook.presto.operator.index.PageRecordSet;\n+import com.facebook.presto.operator.project.CursorProcessor;\n+import com.facebook.presto.spi.RecordSet;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.bytecode.Access.FINAL;\n+import static com.facebook.presto.bytecode.Access.PUBLIC;\n+import static com.facebook.presto.bytecode.Access.a;\n+import static com.facebook.presto.bytecode.ParameterizedType.type;\n+import static com.facebook.presto.common.function.OperatorType.ADD;\n+import static com.facebook.presto.common.function.OperatorType.GREATER_THAN;\n+import static com.facebook.presto.common.function.OperatorType.LESS_THAN;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.metadata.MetadataManager.createTestMetadataManager;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.AND;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.IF;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.CommonSubExpressionFields.declareCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.collectCSEByLevel;\n+import static com.facebook.presto.sql.gen.LambdaBytecodeGenerator.generateMethodsForLambda;\n+import static com.facebook.presto.sql.relational.Expressions.call;\n+import static com.facebook.presto.sql.relational.Expressions.constant;\n+import static com.facebook.presto.sql.relational.Expressions.field;\n+import static com.facebook.presto.testing.TestingConnectorSession.SESSION;\n+import static com.facebook.presto.util.CompilerUtils.makeClassName;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.stream.Collectors.toList;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestCursorProcessorCompiler\n+{\n+    private static final Metadata meta = createTestMetadataManager();\n+    private static final FunctionManager FUNCTION_MANAGER = meta.getFunctionManager();\n+    private static final CursorProcessorCompiler cseCursorCompiler = new CursorProcessorCompiler(meta, true);\n+\n+    private static final ClassDefinition cursorProcessorClassDefinition = new ClassDefinition(\n+            a(PUBLIC, FINAL),\n+            makeClassName(CursorProcessor.class.getSimpleName()),\n+            type(Object.class),\n+            type(CursorProcessor.class));\n+\n+    private static final CallSiteBinder callSiteBinder = new CallSiteBinder();\n+\n+    private static final CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(cursorProcessorClassDefinition, callSiteBinder);\n+    private static final SqlFunctionProperties sqlFunctionProperties = SESSION.getSqlFunctionProperties();\n+\n+    private static final CallExpression ADD_X_Y = call(\n+            ADD.name(),\n+            FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+            BIGINT,\n+            field(0, BIGINT),\n+            field(1, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_GREATER_THAN_2 = call(\n+            GREATER_THAN.name(),\n+            FUNCTION_MANAGER.resolveOperator(GREATER_THAN, fromTypes(BIGINT, BIGINT)),\n+            BOOLEAN,\n+            ADD_X_Y,\n+            constant(2L, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_LESS_THAN_10 = call(\n+            LESS_THAN.name(),\n+            FUNCTION_MANAGER.resolveOperator(LESS_THAN, fromTypes(BIGINT, BIGINT)),\n+            BOOLEAN,\n+            ADD_X_Y,\n+            constant(10L, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_Z = call(\n+            ADD.name(),\n+            FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+            BIGINT,\n+            call(\n+                    ADD.name(),\n+                    FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+                    BIGINT,\n+                    field(0, BIGINT),\n+                    field(1, BIGINT)),\n+            field(2, BIGINT));\n+\n+    @Test\n+    public void testRewriteRowExpressionWithCSE()\n+    {\n+        RowExpression filter = new SpecialFormExpression(AND, BIGINT, ADD_X_Y_GREATER_THAN_2);\n+        ImmutableList<RowExpression> rowExpressions = ImmutableList.of(ADD_X_Y_Z, filter);\n+        Map<LambdaDefinitionExpression, LambdaBytecodeGenerator.CompiledLambda> compiledLambdaMap = generateMethodsForLambda(cursorProcessorClassDefinition, callSiteBinder, cachedInstanceBinder, rowExpressions, meta, sqlFunctionProperties, \"\");\n+\n+        Map<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressionsByLevel = collectCSEByLevel(rowExpressions);\n+\n+        Map<VariableReferenceExpression, CommonSubExpressionRewriter.CommonSubExpressionFields> cseFields = declareCommonSubExpressionFields(cursorProcessorClassDefinition, commonSubExpressionsByLevel);\n+        Map<RowExpression, VariableReferenceExpression> commonSubExpressions = commonSubExpressionsByLevel.values().stream()\n+                .flatMap(m -> m.entrySet().stream())\n+                .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n+        // X+Y as CSE\n+        assertEquals(1, cseFields.size());\n+        VariableReferenceExpression cseVariable = cseFields.keySet().iterator().next();\n+\n+        RowExpression rewrittenFilter = cseCursorCompiler.rewriteRowExpressionsWithCSE(ImmutableList.of(filter), commonSubExpressions).get(0);\n+\n+        List<RowExpression> rewrittenProjections = cseCursorCompiler.rewriteRowExpressionsWithCSE(ImmutableList.of(ADD_X_Y_Z), commonSubExpressions);", "originalCommit": "f3ba01cccdf683eb729ceec0fa97c924c28a46ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\nindex 02a1a82f40..aba6cf8cfa 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n\n@@ -18,7 +18,6 @@ import com.facebook.presto.common.Page;\n import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.Block;\n import com.facebook.presto.common.block.BlockBuilder;\n-import com.facebook.presto.common.function.SqlFunctionProperties;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.metadata.FunctionManager;\n import com.facebook.presto.metadata.Metadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMTQ4MQ==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447921481", "bodyText": "Lambda is not needed here right?", "author": "rongrong", "createdAt": "2020-06-30T19:16:07Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.bytecode.ClassDefinition;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.function.SqlFunctionProperties;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.operator.DriverYieldSignal;\n+import com.facebook.presto.operator.index.PageRecordSet;\n+import com.facebook.presto.operator.project.CursorProcessor;\n+import com.facebook.presto.spi.RecordSet;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.bytecode.Access.FINAL;\n+import static com.facebook.presto.bytecode.Access.PUBLIC;\n+import static com.facebook.presto.bytecode.Access.a;\n+import static com.facebook.presto.bytecode.ParameterizedType.type;\n+import static com.facebook.presto.common.function.OperatorType.ADD;\n+import static com.facebook.presto.common.function.OperatorType.GREATER_THAN;\n+import static com.facebook.presto.common.function.OperatorType.LESS_THAN;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.metadata.MetadataManager.createTestMetadataManager;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.AND;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.IF;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.CommonSubExpressionFields.declareCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.collectCSEByLevel;\n+import static com.facebook.presto.sql.gen.LambdaBytecodeGenerator.generateMethodsForLambda;\n+import static com.facebook.presto.sql.relational.Expressions.call;\n+import static com.facebook.presto.sql.relational.Expressions.constant;\n+import static com.facebook.presto.sql.relational.Expressions.field;\n+import static com.facebook.presto.testing.TestingConnectorSession.SESSION;\n+import static com.facebook.presto.util.CompilerUtils.makeClassName;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.stream.Collectors.toList;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestCursorProcessorCompiler\n+{\n+    private static final Metadata meta = createTestMetadataManager();\n+    private static final FunctionManager FUNCTION_MANAGER = meta.getFunctionManager();\n+    private static final CursorProcessorCompiler cseCursorCompiler = new CursorProcessorCompiler(meta, true);\n+\n+    private static final ClassDefinition cursorProcessorClassDefinition = new ClassDefinition(\n+            a(PUBLIC, FINAL),\n+            makeClassName(CursorProcessor.class.getSimpleName()),\n+            type(Object.class),\n+            type(CursorProcessor.class));\n+\n+    private static final CallSiteBinder callSiteBinder = new CallSiteBinder();\n+\n+    private static final CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(cursorProcessorClassDefinition, callSiteBinder);\n+    private static final SqlFunctionProperties sqlFunctionProperties = SESSION.getSqlFunctionProperties();\n+\n+    private static final CallExpression ADD_X_Y = call(\n+            ADD.name(),\n+            FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+            BIGINT,\n+            field(0, BIGINT),\n+            field(1, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_GREATER_THAN_2 = call(\n+            GREATER_THAN.name(),\n+            FUNCTION_MANAGER.resolveOperator(GREATER_THAN, fromTypes(BIGINT, BIGINT)),\n+            BOOLEAN,\n+            ADD_X_Y,\n+            constant(2L, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_LESS_THAN_10 = call(\n+            LESS_THAN.name(),\n+            FUNCTION_MANAGER.resolveOperator(LESS_THAN, fromTypes(BIGINT, BIGINT)),\n+            BOOLEAN,\n+            ADD_X_Y,\n+            constant(10L, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_Z = call(\n+            ADD.name(),\n+            FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+            BIGINT,\n+            call(\n+                    ADD.name(),\n+                    FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+                    BIGINT,\n+                    field(0, BIGINT),\n+                    field(1, BIGINT)),\n+            field(2, BIGINT));\n+\n+    @Test\n+    public void testRewriteRowExpressionWithCSE()\n+    {\n+        RowExpression filter = new SpecialFormExpression(AND, BIGINT, ADD_X_Y_GREATER_THAN_2);\n+        ImmutableList<RowExpression> rowExpressions = ImmutableList.of(ADD_X_Y_Z, filter);\n+        Map<LambdaDefinitionExpression, LambdaBytecodeGenerator.CompiledLambda> compiledLambdaMap = generateMethodsForLambda(cursorProcessorClassDefinition, callSiteBinder, cachedInstanceBinder, rowExpressions, meta, sqlFunctionProperties, \"\");", "originalCommit": "f3ba01cccdf683eb729ceec0fa97c924c28a46ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\nindex 02a1a82f40..aba6cf8cfa 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n\n@@ -18,7 +18,6 @@ import com.facebook.presto.common.Page;\n import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.Block;\n import com.facebook.presto.common.block.BlockBuilder;\n-import com.facebook.presto.common.function.SqlFunctionProperties;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.metadata.FunctionManager;\n import com.facebook.presto.metadata.Metadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMTk4OA==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447921988", "bodyText": "Let's call the variable METADATA to be consistent with the codebase.", "author": "rongrong", "createdAt": "2020-06-30T19:17:12Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.bytecode.ClassDefinition;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.function.SqlFunctionProperties;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.operator.DriverYieldSignal;\n+import com.facebook.presto.operator.index.PageRecordSet;\n+import com.facebook.presto.operator.project.CursorProcessor;\n+import com.facebook.presto.spi.RecordSet;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.bytecode.Access.FINAL;\n+import static com.facebook.presto.bytecode.Access.PUBLIC;\n+import static com.facebook.presto.bytecode.Access.a;\n+import static com.facebook.presto.bytecode.ParameterizedType.type;\n+import static com.facebook.presto.common.function.OperatorType.ADD;\n+import static com.facebook.presto.common.function.OperatorType.GREATER_THAN;\n+import static com.facebook.presto.common.function.OperatorType.LESS_THAN;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.metadata.MetadataManager.createTestMetadataManager;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.AND;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.IF;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.CommonSubExpressionFields.declareCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.collectCSEByLevel;\n+import static com.facebook.presto.sql.gen.LambdaBytecodeGenerator.generateMethodsForLambda;\n+import static com.facebook.presto.sql.relational.Expressions.call;\n+import static com.facebook.presto.sql.relational.Expressions.constant;\n+import static com.facebook.presto.sql.relational.Expressions.field;\n+import static com.facebook.presto.testing.TestingConnectorSession.SESSION;\n+import static com.facebook.presto.util.CompilerUtils.makeClassName;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.stream.Collectors.toList;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestCursorProcessorCompiler\n+{\n+    private static final Metadata meta = createTestMetadataManager();", "originalCommit": "f3ba01cccdf683eb729ceec0fa97c924c28a46ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\nindex 02a1a82f40..aba6cf8cfa 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n\n@@ -18,7 +18,6 @@ import com.facebook.presto.common.Page;\n import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.Block;\n import com.facebook.presto.common.block.BlockBuilder;\n-import com.facebook.presto.common.function.SqlFunctionProperties;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.metadata.FunctionManager;\n import com.facebook.presto.metadata.Metadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjQyOA==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447922428", "bodyText": "All static final variables should be UPPER_CASE.", "author": "rongrong", "createdAt": "2020-06-30T19:18:01Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.bytecode.ClassDefinition;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.function.SqlFunctionProperties;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.operator.DriverYieldSignal;\n+import com.facebook.presto.operator.index.PageRecordSet;\n+import com.facebook.presto.operator.project.CursorProcessor;\n+import com.facebook.presto.spi.RecordSet;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.bytecode.Access.FINAL;\n+import static com.facebook.presto.bytecode.Access.PUBLIC;\n+import static com.facebook.presto.bytecode.Access.a;\n+import static com.facebook.presto.bytecode.ParameterizedType.type;\n+import static com.facebook.presto.common.function.OperatorType.ADD;\n+import static com.facebook.presto.common.function.OperatorType.GREATER_THAN;\n+import static com.facebook.presto.common.function.OperatorType.LESS_THAN;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.metadata.MetadataManager.createTestMetadataManager;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.AND;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.IF;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.CommonSubExpressionFields.declareCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.collectCSEByLevel;\n+import static com.facebook.presto.sql.gen.LambdaBytecodeGenerator.generateMethodsForLambda;\n+import static com.facebook.presto.sql.relational.Expressions.call;\n+import static com.facebook.presto.sql.relational.Expressions.constant;\n+import static com.facebook.presto.sql.relational.Expressions.field;\n+import static com.facebook.presto.testing.TestingConnectorSession.SESSION;\n+import static com.facebook.presto.util.CompilerUtils.makeClassName;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.stream.Collectors.toList;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestCursorProcessorCompiler\n+{\n+    private static final Metadata meta = createTestMetadataManager();\n+    private static final FunctionManager FUNCTION_MANAGER = meta.getFunctionManager();\n+    private static final CursorProcessorCompiler cseCursorCompiler = new CursorProcessorCompiler(meta, true);\n+\n+    private static final ClassDefinition cursorProcessorClassDefinition = new ClassDefinition(", "originalCommit": "f3ba01cccdf683eb729ceec0fa97c924c28a46ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjgzNQ==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447922835", "bodyText": "I think these variables can be defined within testRewriteRowExpressionWithCSE though.", "author": "rongrong", "createdAt": "2020-06-30T19:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\nindex 02a1a82f40..aba6cf8cfa 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n\n@@ -18,7 +18,6 @@ import com.facebook.presto.common.Page;\n import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.Block;\n import com.facebook.presto.common.block.BlockBuilder;\n-import com.facebook.presto.common.function.SqlFunctionProperties;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.metadata.FunctionManager;\n import com.facebook.presto.metadata.Metadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNDY4Mg==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447924682", "bodyText": "Would be interesting to make the filter and projection share some cse.", "author": "rongrong", "createdAt": "2020-06-30T19:22:18Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.bytecode.ClassDefinition;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.function.SqlFunctionProperties;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.operator.DriverYieldSignal;\n+import com.facebook.presto.operator.index.PageRecordSet;\n+import com.facebook.presto.operator.project.CursorProcessor;\n+import com.facebook.presto.spi.RecordSet;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.bytecode.Access.FINAL;\n+import static com.facebook.presto.bytecode.Access.PUBLIC;\n+import static com.facebook.presto.bytecode.Access.a;\n+import static com.facebook.presto.bytecode.ParameterizedType.type;\n+import static com.facebook.presto.common.function.OperatorType.ADD;\n+import static com.facebook.presto.common.function.OperatorType.GREATER_THAN;\n+import static com.facebook.presto.common.function.OperatorType.LESS_THAN;\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.metadata.MetadataManager.createTestMetadataManager;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.AND;\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.IF;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.CommonSubExpressionFields.declareCommonSubExpressionFields;\n+import static com.facebook.presto.sql.gen.CommonSubExpressionRewriter.collectCSEByLevel;\n+import static com.facebook.presto.sql.gen.LambdaBytecodeGenerator.generateMethodsForLambda;\n+import static com.facebook.presto.sql.relational.Expressions.call;\n+import static com.facebook.presto.sql.relational.Expressions.constant;\n+import static com.facebook.presto.sql.relational.Expressions.field;\n+import static com.facebook.presto.testing.TestingConnectorSession.SESSION;\n+import static com.facebook.presto.util.CompilerUtils.makeClassName;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.stream.Collectors.toList;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestCursorProcessorCompiler\n+{\n+    private static final Metadata meta = createTestMetadataManager();\n+    private static final FunctionManager FUNCTION_MANAGER = meta.getFunctionManager();\n+    private static final CursorProcessorCompiler cseCursorCompiler = new CursorProcessorCompiler(meta, true);\n+\n+    private static final ClassDefinition cursorProcessorClassDefinition = new ClassDefinition(\n+            a(PUBLIC, FINAL),\n+            makeClassName(CursorProcessor.class.getSimpleName()),\n+            type(Object.class),\n+            type(CursorProcessor.class));\n+\n+    private static final CallSiteBinder callSiteBinder = new CallSiteBinder();\n+\n+    private static final CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(cursorProcessorClassDefinition, callSiteBinder);\n+    private static final SqlFunctionProperties sqlFunctionProperties = SESSION.getSqlFunctionProperties();\n+\n+    private static final CallExpression ADD_X_Y = call(\n+            ADD.name(),\n+            FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+            BIGINT,\n+            field(0, BIGINT),\n+            field(1, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_GREATER_THAN_2 = call(\n+            GREATER_THAN.name(),\n+            FUNCTION_MANAGER.resolveOperator(GREATER_THAN, fromTypes(BIGINT, BIGINT)),\n+            BOOLEAN,\n+            ADD_X_Y,\n+            constant(2L, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_LESS_THAN_10 = call(\n+            LESS_THAN.name(),\n+            FUNCTION_MANAGER.resolveOperator(LESS_THAN, fromTypes(BIGINT, BIGINT)),\n+            BOOLEAN,\n+            ADD_X_Y,\n+            constant(10L, BIGINT));\n+\n+    private static final CallExpression ADD_X_Y_Z = call(\n+            ADD.name(),\n+            FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+            BIGINT,\n+            call(\n+                    ADD.name(),\n+                    FUNCTION_MANAGER.resolveOperator(ADD, fromTypes(BIGINT, BIGINT)),\n+                    BIGINT,\n+                    field(0, BIGINT),\n+                    field(1, BIGINT)),\n+            field(2, BIGINT));\n+\n+    @Test\n+    public void testRewriteRowExpressionWithCSE()\n+    {\n+        RowExpression filter = new SpecialFormExpression(AND, BIGINT, ADD_X_Y_GREATER_THAN_2);\n+        ImmutableList<RowExpression> rowExpressions = ImmutableList.of(ADD_X_Y_Z, filter);\n+        Map<LambdaDefinitionExpression, LambdaBytecodeGenerator.CompiledLambda> compiledLambdaMap = generateMethodsForLambda(cursorProcessorClassDefinition, callSiteBinder, cachedInstanceBinder, rowExpressions, meta, sqlFunctionProperties, \"\");\n+\n+        Map<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressionsByLevel = collectCSEByLevel(rowExpressions);\n+\n+        Map<VariableReferenceExpression, CommonSubExpressionRewriter.CommonSubExpressionFields> cseFields = declareCommonSubExpressionFields(cursorProcessorClassDefinition, commonSubExpressionsByLevel);\n+        Map<RowExpression, VariableReferenceExpression> commonSubExpressions = commonSubExpressionsByLevel.values().stream()\n+                .flatMap(m -> m.entrySet().stream())\n+                .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n+        // X+Y as CSE\n+        assertEquals(1, cseFields.size());\n+        VariableReferenceExpression cseVariable = cseFields.keySet().iterator().next();\n+\n+        RowExpression rewrittenFilter = cseCursorCompiler.rewriteRowExpressionsWithCSE(ImmutableList.of(filter), commonSubExpressions).get(0);\n+\n+        List<RowExpression> rewrittenProjections = cseCursorCompiler.rewriteRowExpressionsWithCSE(ImmutableList.of(ADD_X_Y_Z), commonSubExpressions);\n+\n+        // X+Y+Z contains CSE X+Y\n+        assertTrue(((CallExpression) rewrittenProjections.get(0)).getArguments().contains(cseVariable));\n+\n+        // X+Y > 2 consists CSE X+Y\n+        assertTrue(((CallExpression) ((SpecialFormExpression) rewrittenFilter).getArguments().get(0)).getArguments().contains(cseVariable));\n+    }\n+\n+    @Test\n+    public void testCompilerWithCSE()\n+    {\n+        PageFunctionCompiler functionCompiler = new PageFunctionCompiler(meta, 0);\n+        ExpressionCompiler expressionCompiler = new ExpressionCompiler(meta, functionCompiler);\n+\n+        RowExpression filter = new SpecialFormExpression(AND, BIGINT, ADD_X_Y_GREATER_THAN_2, ADD_X_Y_LESS_THAN_10);\n+        List<? extends RowExpression> projections = createIfProjectionList(5);", "originalCommit": "f3ba01cccdf683eb729ceec0fa97c924c28a46ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NjgzOA==", "url": "https://github.com/prestodb/presto/pull/14696#discussion_r447966838", "bodyText": "@rongrong mk sense. add ADD_X_Y to the projections so \"X+Y\" is shared between projections & filter", "author": "frankobe", "createdAt": "2020-06-30T20:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNDY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\nindex 02a1a82f40..aba6cf8cfa 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/gen/TestCursorProcessorCompiler.java\n\n@@ -18,7 +18,6 @@ import com.facebook.presto.common.Page;\n import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.Block;\n import com.facebook.presto.common.block.BlockBuilder;\n-import com.facebook.presto.common.function.SqlFunctionProperties;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.metadata.FunctionManager;\n import com.facebook.presto.metadata.Metadata;\n"}}, {"oid": "4e804218f1c7610500d4acf29b6598d8e0d01e5c", "url": "https://github.com/prestodb/presto/commit/4e804218f1c7610500d4acf29b6598d8e0d01e5c", "message": "Support common sub-expression optimization in CursorProcessorCompiler\n\nSigned-off-by: frank.hu <mua08p@gmail.com>", "committedDate": "2020-06-30T21:24:07Z", "type": "commit"}]}