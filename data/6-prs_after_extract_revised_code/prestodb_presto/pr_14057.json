{"pr_number": 14057, "pr_title": "Pinot bugs and making it work with the latest trunk pinot", "pr_createdAt": "2020-02-04T07:44:50Z", "pr_url": "https://github.com/prestodb/presto/pull/14057", "timeline": [{"oid": "47ba557ed7054679776c7113b08fe8a195851330", "url": "https://github.com/prestodb/presto/commit/47ba557ed7054679776c7113b08fe8a195851330", "message": "Don't pass Content-Type header when there is no body to avoid a pinot 415", "committedDate": "2020-02-04T18:13:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNTY4Nw==", "url": "https://github.com/prestodb/presto/pull/14057#discussion_r375535687", "bodyText": "nit: LinkedHashMap -> Map", "author": "highker", "createdAt": "2020-02-05T22:07:56Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -338,11 +338,11 @@ else if (!groupByColumns.isEmpty()) {\n             query += \" \" + limitKeyWord + \" \" + queryLimit;\n         }\n \n-        List<PinotColumnHandle> columnHandles = ImmutableList.copyOf(getAssignments().values());\n-        return new PinotQueryGenerator.GeneratedPql(tableName, query, getIndicesMappingFromPinotSchemaToPrestoSchema(query, columnHandles), groupByColumns.size(), filter.isPresent(), isQueryShort);\n+        List<Integer> indices = getIndicesMappingFromPinotSchemaToPrestoSchema(query, getAssignments());\n+        return new PinotQueryGenerator.GeneratedPql(tableName, query, indices, groupByColumns.size(), filter.isPresent(), isQueryShort);\n     }\n \n-    private List<Integer> getIndicesMappingFromPinotSchemaToPrestoSchema(String query, List<PinotColumnHandle> handles)\n+    private List<Integer> getIndicesMappingFromPinotSchemaToPrestoSchema(String query, LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> assignments)", "originalCommit": "0a41f5a2b306507b4f06236a05cabea2c9df0c8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eed8482ea6c471d228c0852f5aa7e2e9bc28b736", "chunk": "diff --git a/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java b/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\nindex 80383e274a..79953e69c2 100644\n--- a/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\n+++ b/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\n\n@@ -342,7 +342,7 @@ public class PinotQueryGeneratorContext\n         return new PinotQueryGenerator.GeneratedPql(tableName, query, indices, groupByColumns.size(), filter.isPresent(), isQueryShort);\n     }\n \n-    private List<Integer> getIndicesMappingFromPinotSchemaToPrestoSchema(String query, LinkedHashMap<VariableReferenceExpression, PinotColumnHandle> assignments)\n+    private List<Integer> getIndicesMappingFromPinotSchemaToPrestoSchema(String query, Map<VariableReferenceExpression, PinotColumnHandle> assignments)\n     {\n         LinkedHashMap<VariableReferenceExpression, Selection> expressionsInPinotOrder = new LinkedHashMap<>();\n         for (VariableReferenceExpression groupByColumn : groupByColumns) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNjQxNA==", "url": "https://github.com/prestodb/presto/pull/14057#discussion_r375536414", "bodyText": "move plan.accept(new PinotQueryPlanVisitor(session) to its own line", "author": "highker", "createdAt": "2020-02-05T22:09:44Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -130,10 +130,10 @@ public PinotQueryGeneratorContext getContext()\n     public Optional<PinotQueryGeneratorResult> generate(PlanNode plan, ConnectorSession session)\n     {\n         try {\n-            boolean preferBrokerQueries = PinotSessionProperties.isPreferBrokerQueries(session);\n-            PinotQueryGeneratorContext context = requireNonNull(plan.accept(new PinotQueryPlanVisitor(session, preferBrokerQueries), new PinotQueryGeneratorContext()), \"Resulting context is null\");\n-            boolean isQueryShort = context.isQueryShort(PinotSessionProperties.getNonAggregateLimitForBrokerQueries(session));\n-            return Optional.of(new PinotQueryGeneratorResult(context.toQuery(pinotConfig, preferBrokerQueries, isQueryShort), context));\n+            PinotQueryGeneratorContext context = requireNonNull(plan.accept(new PinotQueryPlanVisitor(session),", "originalCommit": "fea79de0b89422c78eeba369a92e975bd17b8bee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eed8482ea6c471d228c0852f5aa7e2e9bc28b736", "chunk": "diff --git a/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java b/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java\nindex 5dcffe658d..c98e409c32 100644\n--- a/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java\n+++ b/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java\n\n@@ -130,10 +130,10 @@ public class PinotQueryGenerator\n     public Optional<PinotQueryGeneratorResult> generate(PlanNode plan, ConnectorSession session)\n     {\n         try {\n-            PinotQueryGeneratorContext context = requireNonNull(plan.accept(new PinotQueryPlanVisitor(session),\n-                    new PinotQueryGeneratorContext()),\n-                    \"Resulting context is null\");\n-            return Optional.of(new PinotQueryGeneratorResult(context.toQuery(pinotConfig, session), context));\n+            boolean preferBrokerQueries = PinotSessionProperties.isPreferBrokerQueries(session);\n+            PinotQueryGeneratorContext context = requireNonNull(plan.accept(new PinotQueryPlanVisitor(session, preferBrokerQueries), new PinotQueryGeneratorContext()), \"Resulting context is null\");\n+            boolean isQueryShort = context.isQueryShort(PinotSessionProperties.getNonAggregateLimitForBrokerQueries(session));\n+            return Optional.of(new PinotQueryGeneratorResult(context.toQuery(pinotConfig, preferBrokerQueries, isQueryShort), context));\n         }\n         catch (PinotException e) {\n             log.debug(e, \"Possibly benign error when pushing plan into scan node %s\", plan);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzODIyMA==", "url": "https://github.com/prestodb/presto/pull/14057#discussion_r375538220", "bodyText": "break an empty line after this", "author": "highker", "createdAt": "2020-02-05T22:14:10Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -275,7 +277,9 @@ private boolean hasOrderBy()\n                 .filter(s -> !groupByColumns.contains(s.getKey())) // remove the group by columns from the query as Pinot barfs if the group by column is an expression\n                 .map(s -> s.getValue().getDefinition())\n                 .collect(Collectors.joining(\", \"));\n-\n+        if (expressions.isEmpty()) {\n+            throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"No valid expressions in \" + this);\n+        }", "originalCommit": "50812fb788d5c00b41659e23fc5759b5eb4caf1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eed8482ea6c471d228c0852f5aa7e2e9bc28b736", "chunk": "diff --git a/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java b/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\nindex 1c9963438e..79953e69c2 100644\n--- a/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\n+++ b/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\n\n@@ -277,9 +276,7 @@ public class PinotQueryGeneratorContext\n                 .filter(s -> !groupByColumns.contains(s.getKey())) // remove the group by columns from the query as Pinot barfs if the group by column is an expression\n                 .map(s -> s.getValue().getDefinition())\n                 .collect(Collectors.joining(\", \"));\n-        if (expressions.isEmpty()) {\n-            throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"No valid expressions in \" + this);\n-        }\n+\n         String tableName = from.orElseThrow(() -> new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"Table name not encountered yet\"));\n         String query = \"SELECT \" + expressions + \" FROM \" + tableName + (forBroker ? \"\" : TABLE_NAME_SUFFIX_TEMPLATE);\n         if (filter.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzODk2Ng==", "url": "https://github.com/prestodb/presto/pull/14057#discussion_r375538966", "bodyText": "this will provide the memory address (which is not necessary for an error message). What is needed is PinotQueryGeneratorContext.class.getName() I guess.", "author": "highker", "createdAt": "2020-02-05T22:16:04Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -275,7 +277,9 @@ private boolean hasOrderBy()\n                 .filter(s -> !groupByColumns.contains(s.getKey())) // remove the group by columns from the query as Pinot barfs if the group by column is an expression\n                 .map(s -> s.getValue().getDefinition())\n                 .collect(Collectors.joining(\", \"));\n-\n+        if (expressions.isEmpty()) {\n+            throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"No valid expressions in \" + this);", "originalCommit": "50812fb788d5c00b41659e23fc5759b5eb4caf1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eed8482ea6c471d228c0852f5aa7e2e9bc28b736", "chunk": "diff --git a/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java b/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\nindex 1c9963438e..79953e69c2 100644\n--- a/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\n+++ b/presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java\n\n@@ -277,9 +276,7 @@ public class PinotQueryGeneratorContext\n                 .filter(s -> !groupByColumns.contains(s.getKey())) // remove the group by columns from the query as Pinot barfs if the group by column is an expression\n                 .map(s -> s.getValue().getDefinition())\n                 .collect(Collectors.joining(\", \"));\n-        if (expressions.isEmpty()) {\n-            throw new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"No valid expressions in \" + this);\n-        }\n+\n         String tableName = from.orElseThrow(() -> new PinotException(PINOT_QUERY_GENERATOR_FAILURE, Optional.empty(), \"Table name not encountered yet\"));\n         String query = \"SELECT \" + expressions + \" FROM \" + tableName + (forBroker ? \"\" : TABLE_NAME_SUFFIX_TEMPLATE);\n         if (filter.isPresent()) {\n"}}, {"oid": "eed8482ea6c471d228c0852f5aa7e2e9bc28b736", "url": "https://github.com/prestodb/presto/commit/eed8482ea6c471d228c0852f5aa7e2e9bc28b736", "message": "Fix bug with pinot column scan index generation", "committedDate": "2020-02-06T08:40:19Z", "type": "commit"}, {"oid": "2051c60f0489d7d81270288e09eca72f2896ec4e", "url": "https://github.com/prestodb/presto/commit/2051c60f0489d7d81270288e09eca72f2896ec4e", "message": "Rename preferBrokerQueries to its negate format forbidBrokerQueries", "committedDate": "2020-02-06T08:41:17Z", "type": "commit"}, {"oid": "77ba57bc3e39c851dc8e55c709be0abd70c31492", "url": "https://github.com/prestodb/presto/commit/77ba57bc3e39c851dc8e55c709be0abd70c31492", "message": "Avoid passing Content-Type header when Pinot request body is empty", "committedDate": "2020-02-06T08:41:48Z", "type": "commit"}, {"oid": "3e14a4487d7773b57e62b2cdccb57ec2d807c835", "url": "https://github.com/prestodb/presto/commit/3e14a4487d7773b57e62b2cdccb57ec2d807c835", "message": "Fail with informative error message if no Pinot expression is selected", "committedDate": "2020-02-06T08:43:55Z", "type": "commit"}, {"oid": "3e14a4487d7773b57e62b2cdccb57ec2d807c835", "url": "https://github.com/prestodb/presto/commit/3e14a4487d7773b57e62b2cdccb57ec2d807c835", "message": "Fail with informative error message if no Pinot expression is selected", "committedDate": "2020-02-06T08:43:55Z", "type": "forcePushed"}]}