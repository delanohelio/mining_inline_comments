{"pr_number": 14881, "pr_title": "Simplify integration with Alluxio local cache", "pr_createdAt": "2020-07-23T23:32:45Z", "pr_url": "https://github.com/prestodb/presto/pull/14881", "timeline": [{"oid": "913cb0ce68f68cf5135c1572d781995cab24fb72", "url": "https://github.com/prestodb/presto/commit/913cb0ce68f68cf5135c1572d781995cab24fb72", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-25T18:36:15Z", "type": "forcePushed"}, {"oid": "bae4b624b3915806745ea40b976a689b98e040ad", "url": "https://github.com/prestodb/presto/commit/bae4b624b3915806745ea40b976a689b98e040ad", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-28T00:16:28Z", "type": "forcePushed"}, {"oid": "b82f86b1129b0d95423686efb719017029992105", "url": "https://github.com/prestodb/presto/commit/b82f86b1129b0d95423686efb719017029992105", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-28T00:45:08Z", "type": "forcePushed"}, {"oid": "90cefdef06ceb35928a6f91f7bd0c562ec1322bf", "url": "https://github.com/prestodb/presto/commit/90cefdef06ceb35928a6f91f7bd0c562ec1322bf", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-28T00:46:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMwOTkyMg==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r461309922", "bodyText": "Why is hdfs not a supported filesystem?", "author": "jainxrohit", "createdAt": "2020-07-28T04:26:25Z", "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -199,14 +252,13 @@ private void checkMetrics(MetricKey metricsKey, long expected)\n         assertEquals(MetricsSystem.meter(metricsKey.getName()).getCount() - baseline.getOrDefault(metricsKey.getName(), 0L), expected);\n     }\n \n-    private AlluxioCachingFileSystem cachingFileSystem(CacheConfig cacheConfig, AlluxioCacheConfig alluxioCacheConfig)\n+    private AlluxioCachingFileSystem cachingFileSystem(Configuration configuration)\n             throws URISyntaxException, IOException\n     {\n         Map<Path, byte[]> files = new HashMap<>();\n         files.put(new Path(testFilePath), data);\n-        Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n         ExtendedFileSystem testingFileSystem = new TestingFileSystem(files, configuration);\n-        URI uri = new URI(\"hdfs://test:8020/\");\n+        URI uri = new URI(\"alluxio://test:8020/\");", "originalCommit": "90cefdef06ceb35928a6f91f7bd0c562ec1322bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMjE0Mw==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r461312143", "bodyText": "Can we rename this to localCacheFileSystem?", "author": "jainxrohit", "createdAt": "2020-07-28T04:35:03Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java", "diffHunk": "@@ -13,41 +13,23 @@\n  */\n package com.facebook.presto.cache.alluxio;\n \n-import alluxio.AlluxioURI;\n-import alluxio.client.file.FileInStream;\n-import alluxio.client.file.URIStatus;\n-import alluxio.client.file.cache.LocalCacheFileSystem;\n-import alluxio.conf.AlluxioProperties;\n-import alluxio.conf.InstancedConfiguration;\n-import alluxio.conf.PropertyKey;\n-import alluxio.conf.Source;\n-import alluxio.grpc.OpenFilePOptions;\n-import alluxio.hadoop.AbstractFileSystem;\n-import alluxio.hadoop.HadoopConfigurationUtils;\n-import alluxio.metrics.MetricsConfig;\n-import alluxio.metrics.MetricsSystem;\n-import alluxio.util.ConfigurationUtils;\n+import alluxio.hadoop.LocalCacheFileSystem;\n import com.facebook.presto.cache.CachingFileSystem;\n import com.facebook.presto.hive.HiveFileContext;\n import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n-import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.Path;\n \n import java.io.IOException;\n import java.net.URI;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Properties;\n-\n-import static java.util.Objects.requireNonNull;\n \n public class AlluxioCachingFileSystem\n         extends CachingFileSystem\n {\n     private final boolean cacheValidationEnabled;\n-    private AlluxioCachingFileSystemInternal cachingFileSystem;\n+    private LocalCacheFileSystem cachingFileSystem;", "originalCommit": "90cefdef06ceb35928a6f91f7bd0c562ec1322bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg1NDIzMQ==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r461854231", "bodyText": "done", "author": "apc999", "createdAt": "2020-07-28T20:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMjE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7ecfdefff8ffa9fef7bd74fb0644c962ec53a4be", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java b/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java\nindex ae433ab3b8..ec34f36cd0 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java\n\n@@ -29,7 +29,7 @@ public class AlluxioCachingFileSystem\n         extends CachingFileSystem\n {\n     private final boolean cacheValidationEnabled;\n-    private LocalCacheFileSystem cachingFileSystem;\n+    private LocalCacheFileSystem localCacheFileSystem;\n \n     public AlluxioCachingFileSystem(ExtendedFileSystem dataTier, URI uri)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMzUxMg==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r461313512", "bodyText": "Can we check for AccessDeniedException rather printing whole stack trace?", "author": "jainxrohit", "createdAt": "2020-07-28T04:40:27Z", "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -182,6 +186,55 @@ public void testStress()\n         });\n     }\n \n+    @Test(timeOut = 30_000)\n+    public void testCreationFailure()\n+            throws Exception\n+    {\n+        File cacheDir = new File(cacheDirectory.getPath());\n+        cacheDir.setWritable(false);\n+        CacheConfig cacheConfig = new CacheConfig()\n+                .setCacheType(ALLUXIO)\n+                .setCachingEnabled(true)\n+                .setBaseDirectory(cacheDirectory);\n+        AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig()\n+                .setMaxCacheSize(new DataSize(10, KILOBYTE));\n+        Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        try {\n+            cachingFileSystem(configuration);\n+        }\n+        catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "90cefdef06ceb35928a6f91f7bd0c562ec1322bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MjQ3NA==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r461882474", "bodyText": "updated to expect AccessDeniedException", "author": "apc999", "createdAt": "2020-07-28T21:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMzUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "7ecfdefff8ffa9fef7bd74fb0644c962ec53a4be", "chunk": "diff --git a/presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java b/presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java\nindex 3d06428f6c..83e73f9810 100644\n--- a/presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java\n+++ b/presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java\n\n@@ -186,7 +187,7 @@ public class TestAlluxioCachingFileSystem\n         });\n     }\n \n-    @Test(timeOut = 30_000)\n+    @Test(timeOut = 30_000, expectedExceptions = {AccessDeniedException.class})\n     public void testCreationFailure()\n             throws Exception\n     {\n"}}, {"oid": "7ecfdefff8ffa9fef7bd74fb0644c962ec53a4be", "url": "https://github.com/prestodb/presto/commit/7ecfdefff8ffa9fef7bd74fb0644c962ec53a4be", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-28T21:14:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMzc4MA==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r461913780", "bodyText": "Just curious where this 65536 came from \ud83e\udd14. Maybe we could make it 0 since it's not used anyway?", "author": "shixuan-fan", "createdAt": "2020-07-28T22:02:44Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java", "diffHunk": "@@ -64,115 +46,25 @@ public AlluxioCachingFileSystem(ExtendedFileSystem dataTier, URI uri, boolean ca\n     public synchronized void initialize(URI uri, Configuration configuration)\n             throws IOException\n     {\n-        this.cachingFileSystem = new AlluxioCachingFileSystemInternal(uri, dataTier, cacheValidationEnabled);\n-        cachingFileSystem.initialize(uri, configuration);\n+        this.localCacheFileSystem = new LocalCacheFileSystem(dataTier);\n+        localCacheFileSystem.initialize(uri, configuration);\n     }\n \n     @Override\n     public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n             throws Exception\n     {\n         if (hiveFileContext.isCacheable()) {\n-            return cachingFileSystem.openFile(path, hiveFileContext);\n-        }\n-        return dataTier.openFile(path, hiveFileContext);\n-    }\n-\n-    private static class AlluxioCachingFileSystemInternal\n-            extends AbstractFileSystem\n-    {\n-        // The filesystem to query on cache miss\n-        private final URI uri;\n-        private final ExtendedFileSystem fileSystem;\n-        private final boolean cacheValidationEnabled;\n-\n-        AlluxioCachingFileSystemInternal(URI uri, ExtendedFileSystem fileSystem, boolean cacheValidationEnabled)\n-        {\n-            this.uri = requireNonNull(uri, \"uri is null\");\n-            this.fileSystem = requireNonNull(fileSystem, \"filesystem is null\");\n-            this.cacheValidationEnabled = cacheValidationEnabled;\n-        }\n-\n-        @Override\n-        public synchronized void initialize(URI uri, Configuration configuration)\n-                throws IOException\n-        {\n-            // Set statistics\n-            setConf(configuration);\n-            statistics = getStatistics(uri.getScheme(), getClass());\n-\n-            // Take the URI properties, hadoop configuration, and given Alluxio configuration and merge\n-            // all three into a single object.\n-            Map<String, Object> configurationFromUri = getConfigurationFromUri(uri);\n-            AlluxioProperties alluxioProperties = ConfigurationUtils.defaults();\n-            InstancedConfiguration newConfiguration = HadoopConfigurationUtils.mergeHadoopConfiguration(configuration, alluxioProperties);\n-            // Connection details in the URI has the highest priority\n-            newConfiguration.merge(configurationFromUri, Source.RUNTIME);\n-            mAlluxioConf = newConfiguration;\n-\n-            // Handle metrics\n-            Properties metricsProperties = new Properties();\n-            for (Map.Entry<String, String> entry : configuration) {\n-                metricsProperties.setProperty(entry.getKey(), entry.getValue());\n-            }\n-            MetricsSystem.startSinksFromConfig(new MetricsConfig(metricsProperties));\n-            mFileSystem = new LocalCacheFileSystem(new AlluxioCachingClientFileSystem(fileSystem, mAlluxioConf), mAlluxioConf);\n-            super.initialize(uri, configuration);\n-        }\n-\n-        public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n-                throws Exception\n-        {\n+            FileStatus fileStatus = dataTier.getFileStatus(path);\n             // URIStatus is the mechanism to pass the hiveFileContext to the source filesystem\n-            URIStatus uriStatus = mFileSystem.getStatus(getAlluxioPath(path));\n-            AlluxioURIStatus alluxioURIStatus = new AlluxioURIStatus(uriStatus.getFileInfo(), hiveFileContext);\n-            FileInStream fileInStream = mFileSystem.openFile(alluxioURIStatus, OpenFilePOptions.getDefaultInstance());\n-            return new FSDataInputStream(new AlluxioCachingHdfsFileInputStream(\n-                    fileInStream,\n-                    (cacheValidationEnabled ? Optional.of(fileSystem.openFile(path, hiveFileContext)) : Optional.empty()),\n-                    cacheValidationEnabled));\n-        }\n-\n-        @Override\n-        public String getScheme()\n-        {\n-            return uri.getScheme();\n-        }\n-\n-        @Override\n-        protected boolean isZookeeperMode()\n-        {\n-            return mFileSystem.getConf().getBoolean(PropertyKey.ZOOKEEPER_ENABLED);\n-        }\n-\n-        @Override\n-        protected Map<String, Object> getConfigurationFromUri(URI uri)\n-        {\n-            // local cache doesn't use URI authority for connection.\n-            return ImmutableMap.of();\n-        }\n-\n-        @Override\n-        protected void validateFsUri(URI uri)\n-        {\n-        }\n-\n-        @Override\n-        protected String getFsScheme(URI uri)\n-        {\n-            return getScheme();\n-        }\n-\n-        @Override\n-        protected AlluxioURI getAlluxioPath(Path path)\n-        {\n-            return new AlluxioURI(path.toString());\n-        }\n-\n-        @Override\n-        protected Path getFsPath(String uriHeader, URIStatus fileStatus)\n-        {\n-            return new Path(uriHeader + fileStatus.getPath());\n+            AlluxioURIStatus alluxioURIStatus = new AlluxioURIStatus(fileStatus, hiveFileContext);\n+            FSDataInputStream cachingInputStream = localCacheFileSystem.open(alluxioURIStatus, 65536 /* not used */);", "originalCommit": "7ecfdefff8ffa9fef7bd74fb0644c962ec53a4be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNTY0OA==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r463225648", "bodyText": "this is a buffer size internal in the input stream. I double checked the src and it is actually used in certain corner cases. Updated", "author": "apc999", "createdAt": "2020-07-30T19:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMzc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNzM0OA==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r463227348", "bodyText": "I will remove this method with no bufferSize as arg in next version", "author": "apc999", "createdAt": "2020-07-30T19:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMzc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTQxOA==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r463325418", "bodyText": "Since this is going to be removed soon, I'm would not be too picky on this. Ideally it should be a static constant variable or at least have some comment about the magic number :)", "author": "shixuan-fan", "createdAt": "2020-07-30T23:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMzc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "65f5403736564b95444eeedecb8268ee5dfb2c23", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java b/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java\nindex ec34f36cd0..663d704083 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java\n\n@@ -58,7 +58,7 @@ public class AlluxioCachingFileSystem\n             FileStatus fileStatus = dataTier.getFileStatus(path);\n             // URIStatus is the mechanism to pass the hiveFileContext to the source filesystem\n             AlluxioURIStatus alluxioURIStatus = new AlluxioURIStatus(fileStatus, hiveFileContext);\n-            FSDataInputStream cachingInputStream = localCacheFileSystem.open(alluxioURIStatus, 65536 /* not used */);\n+            FSDataInputStream cachingInputStream = localCacheFileSystem.open(alluxioURIStatus, 65536);\n             if (cacheValidationEnabled) {\n                 return new CacheValidatingInputStream(\n                         cachingInputStream, dataTier.openFile(path, hiveFileContext));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNDQzMA==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r461914430", "bodyText": "nit: line break before .setPath", "author": "shixuan-fan", "createdAt": "2020-07-28T22:03:35Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java", "diffHunk": "@@ -16,17 +16,36 @@\n import alluxio.client.file.URIStatus;\n import alluxio.wire.FileInfo;\n import com.facebook.presto.hive.HiveFileContext;\n+import org.apache.hadoop.fs.FileStatus;\n \n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n \n public class AlluxioURIStatus\n         extends URIStatus\n {\n     private final HiveFileContext hiveFileContext;\n \n-    public AlluxioURIStatus(FileInfo fileInfo, HiveFileContext hiveFileContext)\n+    private static FileInfo toAlluxioFileInfo(FileStatus status)\n     {\n-        super(fileInfo);\n+        // FilePath is a unique identifier for a file, however it can be a long string\n+        // hence using md5 hash of the file path as the identifier in the cache.\n+        // We don't set fileId because fileId is Alluxio specific\n+        FileInfo info = new FileInfo();\n+        info.setFileIdentifier(md5().hashString(status.getPath().toString(), UTF_8).toString())\n+                .setLength(status.getLen()).setPath(status.getPath().toString())", "originalCommit": "7ecfdefff8ffa9fef7bd74fb0644c962ec53a4be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNTkzNw==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r463225937", "bodyText": "updated", "author": "apc999", "createdAt": "2020-07-30T19:36:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "65f5403736564b95444eeedecb8268ee5dfb2c23", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java b/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java\nindex 54f7f60c00..17c474a23f 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java\n\n@@ -34,12 +34,14 @@ public class AlluxioURIStatus\n         // We don't set fileId because fileId is Alluxio specific\n         FileInfo info = new FileInfo();\n         info.setFileIdentifier(md5().hashString(status.getPath().toString(), UTF_8).toString())\n-                .setLength(status.getLen()).setPath(status.getPath().toString())\n+                .setLength(status.getLen())\n+                .setPath(status.getPath().toString())\n                 .setFolder(status.isDirectory())\n                 .setBlockSizeBytes(status.getBlockSize())\n                 .setLastModificationTimeMs(status.getModificationTime())\n                 .setLastAccessTimeMs(status.getAccessTime())\n-                .setOwner(status.getOwner()).setGroup(status.getGroup());\n+                .setOwner(status.getOwner())\n+                .setGroup(status.getGroup());\n         return info;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNTg3Ng==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r461915876", "bodyText": "nit: line break before .setGroup", "author": "shixuan-fan", "createdAt": "2020-07-28T22:05:26Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java", "diffHunk": "@@ -16,17 +16,36 @@\n import alluxio.client.file.URIStatus;\n import alluxio.wire.FileInfo;\n import com.facebook.presto.hive.HiveFileContext;\n+import org.apache.hadoop.fs.FileStatus;\n \n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n \n public class AlluxioURIStatus\n         extends URIStatus\n {\n     private final HiveFileContext hiveFileContext;\n \n-    public AlluxioURIStatus(FileInfo fileInfo, HiveFileContext hiveFileContext)\n+    private static FileInfo toAlluxioFileInfo(FileStatus status)\n     {\n-        super(fileInfo);\n+        // FilePath is a unique identifier for a file, however it can be a long string\n+        // hence using md5 hash of the file path as the identifier in the cache.\n+        // We don't set fileId because fileId is Alluxio specific\n+        FileInfo info = new FileInfo();\n+        info.setFileIdentifier(md5().hashString(status.getPath().toString(), UTF_8).toString())\n+                .setLength(status.getLen()).setPath(status.getPath().toString())\n+                .setFolder(status.isDirectory())\n+                .setBlockSizeBytes(status.getBlockSize())\n+                .setLastModificationTimeMs(status.getModificationTime())\n+                .setLastAccessTimeMs(status.getAccessTime())\n+                .setOwner(status.getOwner()).setGroup(status.getGroup());", "originalCommit": "7ecfdefff8ffa9fef7bd74fb0644c962ec53a4be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNjE5Mg==", "url": "https://github.com/prestodb/presto/pull/14881#discussion_r463226192", "bodyText": "updated", "author": "apc999", "createdAt": "2020-07-30T19:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNTg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "65f5403736564b95444eeedecb8268ee5dfb2c23", "chunk": "diff --git a/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java b/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java\nindex 54f7f60c00..17c474a23f 100644\n--- a/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java\n+++ b/presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java\n\n@@ -34,12 +34,14 @@ public class AlluxioURIStatus\n         // We don't set fileId because fileId is Alluxio specific\n         FileInfo info = new FileInfo();\n         info.setFileIdentifier(md5().hashString(status.getPath().toString(), UTF_8).toString())\n-                .setLength(status.getLen()).setPath(status.getPath().toString())\n+                .setLength(status.getLen())\n+                .setPath(status.getPath().toString())\n                 .setFolder(status.isDirectory())\n                 .setBlockSizeBytes(status.getBlockSize())\n                 .setLastModificationTimeMs(status.getModificationTime())\n                 .setLastAccessTimeMs(status.getAccessTime())\n-                .setOwner(status.getOwner()).setGroup(status.getGroup());\n+                .setOwner(status.getOwner())\n+                .setGroup(status.getGroup());\n         return info;\n     }\n \n"}}, {"oid": "65f5403736564b95444eeedecb8268ee5dfb2c23", "url": "https://github.com/prestodb/presto/commit/65f5403736564b95444eeedecb8268ee5dfb2c23", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-30T19:39:36Z", "type": "forcePushed"}, {"oid": "94f442910fa3797e1806686c0c6c4b446f6fbe39", "url": "https://github.com/prestodb/presto/commit/94f442910fa3797e1806686c0c6c4b446f6fbe39", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-31T04:36:09Z", "type": "forcePushed"}, {"oid": "4e1f05264c4f49f5e5e19f5229e5f1bc558596f2", "url": "https://github.com/prestodb/presto/commit/4e1f05264c4f49f5e5e19f5229e5f1bc558596f2", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-31T05:56:26Z", "type": "commit"}, {"oid": "4e1f05264c4f49f5e5e19f5229e5f1bc558596f2", "url": "https://github.com/prestodb/presto/commit/4e1f05264c4f49f5e5e19f5229e5f1bc558596f2", "message": "Simplify integration with Alluxio local cache\n\nCo-authored-by: Haoyuan Li <haoyuan@alluxio.com>", "committedDate": "2020-07-31T05:56:26Z", "type": "forcePushed"}]}