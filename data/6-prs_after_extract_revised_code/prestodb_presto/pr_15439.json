{"pr_number": 15439, "pr_title": "Improve SliceDirectSelectiveStreamReader", "pr_createdAt": "2020-11-13T20:37:50Z", "pr_url": "https://github.com/prestodb/presto/pull/15439", "timeline": [{"oid": "5571d89b24f2d60b3e5c882a90614aaa5bfb6806", "url": "https://github.com/prestodb/presto/commit/5571d89b24f2d60b3e5c882a90614aaa5bfb6806", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-13T20:56:31Z", "type": "forcePushed"}, {"oid": "c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6", "url": "https://github.com/prestodb/presto/commit/c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-14T04:30:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYxNjczNg==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r524616736", "bodyText": "Is this an intentional change?", "author": "sdruzkin", "createdAt": "2020-11-16T21:39:13Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2062,7 +2062,6 @@ public void testMaps()\n         assertQuery(\"SELECT col['puppies'] FROM tmp_map6\", \"SELECT 'kittens'\");\n \n         assertUpdate(\"CREATE TABLE tmp_map7 AS SELECT MAP(ARRAY[TRUE], ARRAY[FALSE]) AS col\", 1);\n-        assertQuery(\"SELECT col[TRUE] FROM tmp_map7\", \"SELECT FALSE\");", "originalCommit": "c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDcxNw==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525580717", "bodyText": "No, thanks for the catch.", "author": "yingsu00", "createdAt": "2020-11-17T22:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYxNjczNg=="}], "type": "inlineReview", "revised_code": {"commit": "fbd657affad13876a992781910842934f1443a45", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java\nindex 71c852a611..6734717f73 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java\n\n@@ -2062,6 +2062,7 @@ public class TestHiveIntegrationSmokeTest\n         assertQuery(\"SELECT col['puppies'] FROM tmp_map6\", \"SELECT 'kittens'\");\n \n         assertUpdate(\"CREATE TABLE tmp_map7 AS SELECT MAP(ARRAY[TRUE], ARRAY[FALSE]) AS col\", 1);\n+        assertQuery(\"SELECT col[TRUE] FROM tmp_map7\", \"SELECT FALSE\");\n \n         assertUpdate(\"CREATE TABLE tmp_map8 AS SELECT MAP(ARRAY[DATE '2014-09-30'], ARRAY[DATE '2014-09-29']) AS col\", 1);\n         assertOneNotNullResult(\"SELECT col[DATE '2014-09-30'] FROM tmp_map8\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyMjk0NQ==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r524622945", "bodyText": "lengthVectorIndex can be replaced with i", "author": "sdruzkin", "createdAt": "2020-11-16T21:44:40Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java", "diffHunk": "@@ -138,4 +164,39 @@ public static void convertLengthVectorToOffsetVector(int[] vector)\n             currentLength = nextLength;\n         }\n     }\n+\n+    public static void convertLengthVectorToOffsetVector(int[] lengthVector, boolean[] isNullVector, int positionCount, int[] offsetVector)\n+    {\n+        offsetVector[0] = 0;\n+        int lengthVectorIndex = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            if (isNullVector[i]) {\n+                offsetVector[i + 1] = offsetVector[i];\n+            }\n+            else {\n+                offsetVector[i + 1] = offsetVector[i] + lengthVector[lengthVectorIndex++];\n+            }\n+        }\n+    }\n+\n+    public static void convertLengthVectorToOffsetVector(int[] lengthVector, int positionCount, int[] offsetVector)\n+    {\n+        offsetVector[0] = 0;\n+        int lengthVectorIndex = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            offsetVector[i + 1] = offsetVector[i] + lengthVector[lengthVectorIndex++];", "originalCommit": "c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fbd657affad13876a992781910842934f1443a45", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java\nindex 198205fcce..5dd0f91691 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java\n\n@@ -182,9 +182,8 @@ final class ReaderUtils\n     public static void convertLengthVectorToOffsetVector(int[] lengthVector, int positionCount, int[] offsetVector)\n     {\n         offsetVector[0] = 0;\n-        int lengthVectorIndex = 0;\n         for (int i = 0; i < positionCount; i++) {\n-            offsetVector[i + 1] = offsetVector[i] + lengthVector[lengthVectorIndex++];\n+            offsetVector[i + 1] = offsetVector[i] + lengthVector[i];\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MjAxMA==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r524672010", "bodyText": "would be nice to wrap this comment", "author": "sdruzkin", "createdAt": "2020-11-16T22:20:31Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -535,13 +686,46 @@ else if (isNotNull) {\n             if (presentStream != null && nullsAllowed) {\n                 nulls = ensureCapacity(nulls, positionCount);\n             }\n+            dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n             offsets = ensureCapacity(offsets, totalPositions + 1);\n         }\n         else {\n+            dataLength = maxLength;\n             data = ensureCapacity(data, maxLength);\n+            if (useBatchMode(positionCount, totalPositions) && filter != null) {\n+                offsets = ensureCapacity(offsets, totalPositions + 1);\n+            }\n         }\n \n         dataAsSlice = Slices.wrappedBuffer(data);\n+        return dataLength;\n+    }\n+\n+    private boolean useBatchMode(int positionCount, int totalPositionCount)\n+    {\n+        // maxCodePointCount < 0 means it's unbounded varchar\n+        if (lengthStream == null || maxCodePointCount >= 0) {\n+            return false;\n+        }\n+\n+        double inputFilterRate = (double) (totalPositionCount - positionCount) / totalPositionCount;\n+        if (filter == null) {  // readNoFilter\n+            // When there is no filter, batch mode performs better for almost all inputFilterRate. But to limit data buffer size, we enable it for the range of [0.0f, 0.5f]", "originalCommit": "c6593fe87db6d9c3cb22af8ac2fb924d48dfdae6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fbd657affad13876a992781910842934f1443a45", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\nindex eb038c9eea..0b87b4316d 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n\n@@ -711,7 +711,8 @@ public class SliceDirectSelectiveStreamReader\n \n         double inputFilterRate = (double) (totalPositionCount - positionCount) / totalPositionCount;\n         if (filter == null) {  // readNoFilter\n-            // When there is no filter, batch mode performs better for almost all inputFilterRate. But to limit data buffer size, we enable it for the range of [0.0f, 0.5f]\n+            // When there is no filter, batch mode performs better for almost all inputFilterRate.\n+            // But to limit data buffer size, we enable it for the range of [0.0f, 0.5f]\n             if (inputFilterRate >= 0.0f && inputFilterRate <= 0.5f) {\n                 return true;\n             }\n"}}, {"oid": "fbd657affad13876a992781910842934f1443a45", "url": "https://github.com/prestodb/presto/commit/fbd657affad13876a992781910842934f1443a45", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-17T23:04:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MDYwMA==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525840600", "bodyText": "offsets[0] is not initialized to 0 ? Though this may be safe, as java initializes the array values to 0.", "author": "arunthirupathi", "createdAt": "2020-11-18T06:24:23Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java", "diffHunk": "@@ -72,6 +72,32 @@ public static void unpackByteNulls(byte[] values, boolean[] isNull, int position\n         }\n     }\n \n+    public static void packByteArrayOffsetsAndNulls(byte[] values, int[] offsets, boolean[] nulls, int[] positions, int positionCount)\n+    {\n+        int valuesIndex = 0;", "originalCommit": "fbd657affad13876a992781910842934f1443a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg5NTY0Nw==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525895647", "bodyText": "offset[0] is always 0 in the reader as the position starts from 0.", "author": "yingsu00", "createdAt": "2020-11-18T08:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MDYwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MTkwMQ==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525841901", "bodyText": "can the positionCount be 0 ?", "author": "arunthirupathi", "createdAt": "2020-11-18T06:28:14Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -129,27 +132,59 @@ public int read(int offset, int[] positions, int positionCount)\n             skip(offset - readOffset);\n         }\n \n-        prepareForNextRead(positionCount, positions);\n+        int dataLength = prepareForNextRead(positionCount, positions);\n \n         int streamPosition;\n \n         if (lengthStream == null) {\n             streamPosition = readAllNulls(positions, positionCount);\n         }\n         else if (filter == null) {\n-            streamPosition = readNoFilter(positions, positionCount);\n+            streamPosition = readNoFilter(positions, positionCount, dataLength);\n         }\n         else {\n-            streamPosition = readWithFilter(positions, positionCount);\n+            streamPosition = readWithFilter(positions, positionCount, dataLength);\n         }\n \n         readOffset = offset + streamPosition;\n         return outputPositionCount;\n     }\n \n-    private int readNoFilter(int[] positions, int positionCount)\n+    private int readNoFilter(int[] positions, int positionCount, int dataLength)\n             throws IOException\n     {\n+        // filter == null implies outputRequired == true\n+\n+        int totalPositionCount = positions[positionCount - 1] + 1;", "originalCommit": "fbd657affad13876a992781910842934f1443a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNTI3OQ==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525905279", "bodyText": "No. The positionCount comes from the batchSize in OrcSelectiveRecordReader and it starts with 1 and onwards. After each read, if output positionCount is 0, it will cause early termination of the StreamReader read loop in OrcSelectiveRecordReader.getNextPage()", "author": "yingsu00", "createdAt": "2020-11-18T08:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MTkwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0NDMxNA==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525844314", "bodyText": "Reading the comment and this line is little confusing. Can you please add comment on Why this is enabled only for unboundedVarchar ?", "author": "arunthirupathi", "createdAt": "2020-11-18T06:34:59Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -535,13 +686,47 @@ else if (isNotNull) {\n             if (presentStream != null && nullsAllowed) {\n                 nulls = ensureCapacity(nulls, positionCount);\n             }\n+            dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n             offsets = ensureCapacity(offsets, totalPositions + 1);\n         }\n         else {\n+            dataLength = maxLength;\n             data = ensureCapacity(data, maxLength);\n+            if (useBatchMode(positionCount, totalPositions) && filter != null) {\n+                offsets = ensureCapacity(offsets, totalPositions + 1);\n+            }\n         }\n \n         dataAsSlice = Slices.wrappedBuffer(data);\n+        return dataLength;\n+    }\n+\n+    private boolean useBatchMode(int positionCount, int totalPositionCount)\n+    {\n+        // maxCodePointCount < 0 means it's unbounded varchar\n+        if (lengthStream == null || maxCodePointCount >= 0) {", "originalCommit": "fbd657affad13876a992781910842934f1443a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMTcwMA==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525911700", "bodyText": "If the types are VARCHAR(N) or CHAR(N), the length of the string need to be calculated and truncated. Please see line 290 where length truncation happens.\nint truncatedLength = computeTruncatedLength(dataAsSlice, dataOffset, length, maxCodePointCount, isCharType);\noffsets[outputPositionCount + 1] = offset + truncatedLength;\n\nI added the following comments. Does that help?\n// maxCodePointCount < 0 means it's unbounded varchar VARCHAR.\n // If the types are VARCHAR(N) or CHAR(N), the length of the string need to be calculated and truncated.", "author": "yingsu00", "createdAt": "2020-11-18T08:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0NDMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "da7560c4520cf90f1b5f45450d9bc19e308355b3", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\nindex 0b87b4316d..32667e5ca5 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n\n@@ -704,7 +704,8 @@ public class SliceDirectSelectiveStreamReader\n \n     private boolean useBatchMode(int positionCount, int totalPositionCount)\n     {\n-        // maxCodePointCount < 0 means it's unbounded varchar\n+        // maxCodePointCount < 0 means it's unbounded varchar VARCHAR.\n+        // If the types are VARCHAR(N) or CHAR(N), the length of the string need to be calculated and truncated.\n         if (lengthStream == null || maxCodePointCount >= 0) {\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0NjMxNw==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525846317", "bodyText": "nit: you can mark this final and defer initialization. Java compiler will throw error, when it is not set in all paths.", "author": "arunthirupathi", "createdAt": "2020-11-18T06:40:48Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -184,9 +219,43 @@ private int readNoFilter(int[] positions, int positionCount)\n         return streamPosition;\n     }\n \n-    private int readWithFilter(int[] positions, int positionCount)\n+    private int readWithFilter(int[] positions, int positionCount, int dataLength)\n             throws IOException\n     {\n+        int totalPositionCount = positions[positionCount - 1] + 1;\n+        if (useBatchMode(positionCount, totalPositionCount)) {\n+            if (dataStream != null) {\n+                dataStream.next(data, 0, dataLength);\n+            }\n+\n+            int filteredPositionCount;", "originalCommit": "fbd657affad13876a992781910842934f1443a45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da7560c4520cf90f1b5f45450d9bc19e308355b3", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\nindex 0b87b4316d..32667e5ca5 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n\n@@ -228,7 +228,7 @@ public class SliceDirectSelectiveStreamReader\n                 dataStream.next(data, 0, dataLength);\n             }\n \n-            int filteredPositionCount;\n+            final int filteredPositionCount;\n             if (presentStream == null) {\n                 filteredPositionCount = evaluateFilter(positions, positionCount);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0ODQwMA==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525848400", "bodyText": "The other code path sets nulls array unconditionally, why is the nullsAllowed condition added here ?", "author": "arunthirupathi", "createdAt": "2020-11-18T06:46:27Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -129,27 +132,59 @@ public int read(int offset, int[] positions, int positionCount)\n             skip(offset - readOffset);\n         }\n \n-        prepareForNextRead(positionCount, positions);\n+        int dataLength = prepareForNextRead(positionCount, positions);\n \n         int streamPosition;\n \n         if (lengthStream == null) {\n             streamPosition = readAllNulls(positions, positionCount);\n         }\n         else if (filter == null) {\n-            streamPosition = readNoFilter(positions, positionCount);\n+            streamPosition = readNoFilter(positions, positionCount, dataLength);\n         }\n         else {\n-            streamPosition = readWithFilter(positions, positionCount);\n+            streamPosition = readWithFilter(positions, positionCount, dataLength);\n         }\n \n         readOffset = offset + streamPosition;\n         return outputPositionCount;\n     }\n \n-    private int readNoFilter(int[] positions, int positionCount)\n+    private int readNoFilter(int[] positions, int positionCount, int dataLength)\n             throws IOException\n     {\n+        // filter == null implies outputRequired == true\n+\n+        int totalPositionCount = positions[positionCount - 1] + 1;\n+        if (useBatchMode(positionCount, totalPositionCount)) {\n+            if (presentStream == null) {\n+                if (dataStream != null) {\n+                    dataStream.next(data, 0, dataLength);\n+                    convertLengthVectorToOffsetVector(lengthVector, totalPositionCount, offsets);\n+\n+                    if (totalPositionCount > positionCount) {\n+                        packByteArrayAndOffsets(data, offsets, positions, positionCount);\n+                    }\n+                }\n+            }\n+            else {\n+                if (dataStream != null) {\n+                    dataStream.next(data, 0, dataLength);\n+                    convertLengthVectorToOffsetVector(lengthVector, isNullVector, totalPositionCount, offsets);\n+                }\n+\n+                if (totalPositionCount > positionCount) {\n+                    packByteArrayOffsetsAndNulls(data, offsets, isNullVector, positions, positionCount);\n+                }\n+\n+                if (nullsAllowed) {", "originalCommit": "fbd657affad13876a992781910842934f1443a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxNjM2Nw==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525916367", "bodyText": "Both readNoFilter and readWithFilter had this check. This is because the nulls vector was created when presentStream != null && nullsAllowed.", "author": "yingsu00", "createdAt": "2020-11-18T08:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0ODQwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MDc3MA==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525850770", "bodyText": "positionCount must be greater than 0 here as the first line in the method calls\nint totalPositionCount = positions[positionCount - 1] + 1;", "author": "arunthirupathi", "createdAt": "2020-11-18T06:52:42Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -331,6 +400,79 @@ private void skipData(int start, int items)\n         }\n     }\n \n+    // No nulls\n+    private int evaluateFilter(int[] positions, int positionCount)\n+    {\n+        int positionsIndex = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            int position = positions[i];\n+            if (filter.testLength(lengthVector[position])) {\n+                outputPositions[positionsIndex++] = position;  // compact positions on the fly\n+            }\n+        }\n+\n+        int filteredPositionCount = 0;\n+        if (positionsIndex > 0) {\n+            if (dataStream == null) {\n+                // The length check has passed and there is no need to run testBytes because there is no data\n+                filteredPositionCount = positionsIndex;\n+            }\n+            else {\n+                int totalPositionCount = outputPositions[positionsIndex - 1] + 1;\n+                convertLengthVectorToOffsetVector(lengthVector, totalPositionCount, offsets);\n+                filteredPositionCount = testBytes(outputPositions, positionsIndex);\n+            }\n+        }\n+\n+        return filteredPositionCount;\n+    }\n+\n+    private int evaluateFilterWithNull(int[] positions, int positionCount)\n+    {\n+        if (positionCount > 0 && dataStream != null) {", "originalCommit": "fbd657affad13876a992781910842934f1443a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyNDU4NA==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525924584", "bodyText": "Yes, you are right. I removed the positionCount > 0 check.", "author": "yingsu00", "createdAt": "2020-11-18T09:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MDc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "da7560c4520cf90f1b5f45450d9bc19e308355b3", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\nindex 0b87b4316d..32667e5ca5 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n\n@@ -429,7 +429,7 @@ public class SliceDirectSelectiveStreamReader\n \n     private int evaluateFilterWithNull(int[] positions, int positionCount)\n     {\n-        if (positionCount > 0 && dataStream != null) {\n+        if (dataStream != null) {\n             int totalPositionCount = positions[positionCount - 1] + 1;\n             convertLengthVectorToOffsetVector(lengthVector, isNullVector, totalPositionCount, offsets);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1NDEzMQ==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525854131", "bodyText": "Isn't this case has maxLength as 0 ?", "author": "arunthirupathi", "createdAt": "2020-11-18T07:01:51Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java", "diffHunk": "@@ -535,13 +686,47 @@ else if (isNotNull) {\n             if (presentStream != null && nullsAllowed) {\n                 nulls = ensureCapacity(nulls, positionCount);\n             }\n+            dataLength = totalLength;\n             data = ensureCapacity(data, totalLength);\n             offsets = ensureCapacity(offsets, totalPositions + 1);\n         }\n         else {\n+            dataLength = maxLength;", "originalCommit": "fbd657affad13876a992781910842934f1443a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyNjUyMw==", "url": "https://github.com/prestodb/presto/pull/15439#discussion_r525926523", "bodyText": "@arunthirupathi outputRequired == false doesn't mean the maxLength is 0. outputRequired means this column is one of the output columns. Some columns may not be output columns but still need to read because it has filters.", "author": "yingsu00", "createdAt": "2020-11-18T09:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1NDEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "da7560c4520cf90f1b5f45450d9bc19e308355b3", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\nindex 0b87b4316d..32667e5ca5 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java\n\n@@ -704,7 +704,8 @@ public class SliceDirectSelectiveStreamReader\n \n     private boolean useBatchMode(int positionCount, int totalPositionCount)\n     {\n-        // maxCodePointCount < 0 means it's unbounded varchar\n+        // maxCodePointCount < 0 means it's unbounded varchar VARCHAR.\n+        // If the types are VARCHAR(N) or CHAR(N), the length of the string need to be calculated and truncated.\n         if (lengthStream == null || maxCodePointCount >= 0) {\n             return false;\n         }\n"}}, {"oid": "da7560c4520cf90f1b5f45450d9bc19e308355b3", "url": "https://github.com/prestodb/presto/commit/da7560c4520cf90f1b5f45450d9bc19e308355b3", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-18T09:16:55Z", "type": "forcePushed"}, {"oid": "daa76ac947d4b61261bf301afedad50e2cd62041", "url": "https://github.com/prestodb/presto/commit/daa76ac947d4b61261bf301afedad50e2cd62041", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-18T16:35:07Z", "type": "forcePushed"}, {"oid": "d0c6abaadcf45c8fa0af58997248704c3aeae873", "url": "https://github.com/prestodb/presto/commit/d0c6abaadcf45c8fa0af58997248704c3aeae873", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-21T06:59:42Z", "type": "forcePushed"}, {"oid": "eb2d0a634f740ae3188d225fe5c8bfc51fcd1078", "url": "https://github.com/prestodb/presto/commit/eb2d0a634f740ae3188d225fe5c8bfc51fcd1078", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-21T23:39:45Z", "type": "forcePushed"}, {"oid": "b740af63bc2b7934950c5a66af1701087835fc91", "url": "https://github.com/prestodb/presto/commit/b740af63bc2b7934950c5a66af1701087835fc91", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-22T01:30:02Z", "type": "forcePushed"}, {"oid": "82e0943ec1755bd15d453697f9eacdfddf45203f", "url": "https://github.com/prestodb/presto/commit/82e0943ec1755bd15d453697f9eacdfddf45203f", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-22T01:41:14Z", "type": "forcePushed"}, {"oid": "169a9b3f69a46cef5b7f09d763c8a2529148379e", "url": "https://github.com/prestodb/presto/commit/169a9b3f69a46cef5b7f09d763c8a2529148379e", "message": "Improve reading unbounded varchar with batch read mode\n\nWhen the varchar column is unbounded, there's no need to truncate it.\nThis commit read the data in one shot then pack it for the selected\npositions for suitable cases.\n\nBenchmarkSelectiveStreamReaders shows improvements for almost all input\nfilter rates for both readNoFilter and readWithFilter except only one\ncase, where filter rate = 0.1 for readWithFilter. The\nimprovement ratio is up to 3.8x for readNoFilter, and 2.36x for\nreadWithFilter. In the following test results, filter rate means the\npercentage of rows being filtered out when the readXXX() functions were\ncalled. E.g. 0.1|-1 means the first column being read is with filter\nand will eliminate 10% of rows, and when the second column is being\nread, the positionCount will be 90% of totalPositionCount, and there is\nno filter on the second column.\n\nNo nulls\n\nAfter\n\nBenchmark                                      (filterRateSignature)  Mode  Cnt   Score   Error  Units\nBenchmarkSelectiveStreamReaders.readAllBlocks                     -1  avgt   20   9.752 \u00b1 0.388  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                      0  avgt   20  15.680 \u00b1 0.705  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.1  avgt   20  24.409 \u00b1 1.161  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.2  avgt   20  24.372 \u00b1 0.775  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.3  avgt   20  23.881 \u00b1 0.601  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.4  avgt   20  26.147 \u00b1 1.512  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.5  avgt   20  26.420 \u00b1 1.727  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.6  avgt   20  23.698 \u00b1 0.746  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.7  avgt   20  22.054 \u00b1 0.558  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.8  avgt   20  21.560 \u00b1 1.233  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.9  avgt   20  19.633 \u00b1 1.048  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                      1  avgt   20  14.883 \u00b1 2.613  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.0|-1  avgt   20  25.483 \u00b1 3.868  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.1|-1  avgt   20  38.814 \u00b1 1.435  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.2|-1  avgt   20  38.583 \u00b1 2.965  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.3|-1  avgt   20  39.016 \u00b1 3.236  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.4|-1  avgt   20  38.108 \u00b1 1.903  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.5|-1  avgt   20  36.631 \u00b1 1.410  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.6|-1  avgt   20  41.767 \u00b1 3.710  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.7|-1  avgt   20  38.952 \u00b1 1.621  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.8|-1  avgt   20  34.112 \u00b1 1.894  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.9|-1  avgt   20  27.964 \u00b1 1.261  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                   1|-1  avgt   20  17.843 \u00b1 0.798  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                  0|0.5  avgt   20  444.125 \u00b1 23.720  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.1|0.5  avgt   20  690.097 \u00b1 57.405  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.2|0.5  avgt   20  548.955 \u00b1 21.099  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.3|0.5  avgt   20  553.920 \u00b1 19.777  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.4|0.5  avgt   20  591.865 \u00b1 13.756  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.5|0.5  avgt   20  495.278 \u00b1 21.021  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.6|0.5  avgt   20  507.849 \u00b1 66.618  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.7|0.5  avgt   20  376.488 \u00b1  7.407  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.8|0.5  avgt   20  341.839 \u00b1  6.597  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.9|0.5  avgt   20  325.458 \u00b1 22.838  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                  1|0.5  avgt   20  171.221 \u00b1  5.908  ms/op\n\nBefore\n\nBenchmark                                      (filterRateSignature)  Mode  Cnt    Score     Error  Units\nBenchmarkSelectiveStreamReaders.readAllBlocks                     -1  avgt   20   22.025 \u00b1   1.007  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                      0  avgt   20   36.981 \u00b1   3.076  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.1  avgt   20   31.728 \u00b1   1.538  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.2  avgt   20   35.204 \u00b1   3.274  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.3  avgt   20   33.790 \u00b1   1.326  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.4  avgt   20   33.295 \u00b1   2.753  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.5  avgt   20   32.045 \u00b1   1.783  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.6  avgt   20   32.306 \u00b1   1.624  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.7  avgt   20   30.402 \u00b1   1.494  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.8  avgt   20   28.942 \u00b1   2.074  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.9  avgt   20   27.347 \u00b1   1.581  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                      1  avgt   20   24.007 \u00b1   1.248  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.0|-1  avgt   20   46.897 \u00b1   2.386  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.1|-1  avgt   20   53.245 \u00b1   3.715  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.2|-1  avgt   20   56.786 \u00b1   2.730  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.3|-1  avgt   20   58.937 \u00b1   1.827  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.4|-1  avgt   20   55.905 \u00b1   2.240  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.5|-1  avgt   20  55.528 \u00b1 1.952  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.6|-1  avgt   20   55.732 \u00b1   3.277  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.7|-1  avgt   20   55.544 \u00b1   2.537  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.8|-1  avgt   20   46.980 \u00b1   2.241  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.9|-1  avgt   20   59.743 \u00b1  12.117  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                   1|-1  avgt   20   35.767 \u00b1   4.104  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                  0|0.5  avgt   20  655.030 \u00b1 29.001  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.1|0.5  avgt   20  673.906 \u00b1 31.148  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.2|0.5  avgt   20  645.672 \u00b1 17.592  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.3|0.5  avgt   20  692.628 \u00b1 79.792  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.4|0.5  avgt   20  705.662 \u00b1 41.074  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.5|0.5  avgt   20  813.694 \u00b1 52.935  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.6|0.5  avgt   20   739.729 \u00b1  35.021  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.7|0.5  avgt   20   642.246 \u00b1  15.137  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.8|0.5  avgt   20   596.675 \u00b1  34.308  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.9|0.5  avgt   20   511.711 \u00b1  11.544  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                  1|0.5  avgt   20   312.278 \u00b1  40.066  ms/op\n\nPartial nulls\n\nAfter\n\nBenchmark                                      (filterRateSignature)  Mode  Cnt   Score   Error  Units\nBenchmarkSelectiveStreamReaders.readAllBlocks                     -1  avgt   20  11.421 \u00b1 0.437  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                      0  avgt   20  19.405 \u00b1 1.819  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.1  avgt   20  33.724 \u00b1 4.001  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.2  avgt   20  31.475 \u00b1 2.850  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.3  avgt   20  29.714 \u00b1 2.429  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.4  avgt   20  29.973 \u00b1 1.081  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.5  avgt   20  29.005 \u00b1 1.821  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.6  avgt   20  26.367 \u00b1 1.671  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.7  avgt   20  24.471 \u00b1 1.732  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.8  avgt   20  24.131 \u00b1 1.488  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.9  avgt   20  21.177 \u00b1 1.256  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                      1  avgt   20  13.579 \u00b1 0.746  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.0|-1  avgt   20  28.190 \u00b1 1.583  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.1|-1  avgt   20  51.459 \u00b1 4.918  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.2|-1  avgt   20  49.907 \u00b1 4.347  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.3|-1  avgt   20  44.640 \u00b1 3.458  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.4|-1  avgt   20  45.701 \u00b1 2.659  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.5|-1  avgt   20  43.484 \u00b1 3.379  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.6|-1  avgt   20  41.486 \u00b1 2.132  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.7|-1  avgt   20  37.478 \u00b1 1.266  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.8|-1  avgt   20  34.269 \u00b1 0.994  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.9|-1  avgt   20  34.315 \u00b1 3.042  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                   1|-1  avgt   20  16.151 \u00b1 0.867  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                  0|0.5  avgt   10  584.304 \u00b1 14.659  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.1|0.5  avgt   10  692.979 \u00b1  59.233  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.2|0.5  avgt   10  646.817 \u00b1  31.541  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.3|0.5  avgt   10  683.848 \u00b1 69.272  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.4|0.5  avgt   20  575.779 \u00b1 29.202  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.5|0.5  avgt   20  598.416 \u00b1 38.332  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.6|0.5  avgt   20  488.681 \u00b1 24.693  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.7|0.5  avgt   20  488.031 \u00b1 47.226  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.8|0.5  avgt   20  425.345 \u00b1 15.786  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.9|0.5  avgt   20  365.772 \u00b1 25.845  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                  1|0.5  avgt   20  166.913 \u00b1  9.100  ms/op\n\nBefore\n\nBenchmark                                      (filterRateSignature)  Mode  Cnt   Score   Error  Units\nBenchmarkSelectiveStreamReaders.readAllBlocks                     -1  avgt   20  26.544 \u00b1 1.372  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                      0  avgt   20  29.329 \u00b1 1.568  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.1  avgt   20  32.997 \u00b1 3.253  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.2  avgt   20  35.667 \u00b1 2.720  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.3  avgt   20  36.946 \u00b1 2.110  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.4  avgt   20  42.800 \u00b1 2.647  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.5  avgt   20  43.037 \u00b1 1.578  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.6  avgt   20  47.748 \u00b1 2.355  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.7  avgt   20  43.506 \u00b1 3.194  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.8  avgt   20  33.884 \u00b1 1.770  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                    0.9  avgt   20  32.021 \u00b1 2.132  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                      1  avgt   20  24.403 \u00b1 1.274  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.0|-1  avgt   20  52.797 \u00b1 3.013  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.1|-1  avgt   20  56.090 \u00b1 2.774  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.2|-1  avgt   20  59.948 \u00b1 3.515  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.3|-1  avgt   20  63.631 \u00b1 4.357  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.4|-1  avgt   20  64.358 \u00b1 3.712  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.5|-1  avgt   20  62.669 \u00b1 2.977  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.6|-1  avgt   20  58.881 \u00b1 2.197  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.7|-1  avgt   20  60.658 \u00b1 3.758  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.8|-1  avgt   20  55.298 \u00b1 3.645  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                 0.9|-1  avgt   20  49.973 \u00b1 2.409  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                   1|-1  avgt   20  26.994 \u00b1 0.736  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                  0|0.5  avgt   20  709.402 \u00b1 32.689  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.1|0.5  avgt   20  718.802 \u00b1 26.890  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.2|0.5  avgt   20  744.266 \u00b1 38.641  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.3|0.5  avgt   20  703.002 \u00b1 16.535  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.4|0.5  avgt   20  676.480 \u00b1 15.866  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.5|0.5  avgt   20  741.690 \u00b1 49.127  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.6|0.5  avgt   20  737.533 \u00b1  68.898  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.7|0.5  avgt   20  606.616 \u00b1  33.164  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.8|0.5  avgt   20  579.814 \u00b1  38.495  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                0.9|0.5  avgt   20  531.798 \u00b1  62.070  ms/op\nBenchmarkSelectiveStreamReaders.readAllBlocks                  1|0.5  avgt   20  246.566 \u00b1  13.326  ms/op", "committedDate": "2020-11-22T22:04:05Z", "type": "commit"}, {"oid": "eb1b796233b6b50dd04528a3c3abab6d383b9b95", "url": "https://github.com/prestodb/presto/commit/eb1b796233b6b50dd04528a3c3abab6d383b9b95", "message": "Improve reading the lengthVector in SliceDirectSelectiveStreamReader\n\nThis commit uses a more CPU friendly API next() to read all lengths.\n\nJMH benchmark when reading unbounded varchar for all rows:\n\nBaseline\nBenchmark                                      (withNulls)  Mode  Cnt  Score   Error  Units\nBenchmarkSelectiveStreamReaders.readAllBlocks      PARTIAL  avgt    5  0.109 \u00b1 0.018   s/op\nBenchmarkSelectiveStreamReaders.readAllBlocks         NONE  avgt    5  0.102 \u00b1 0.008   s/op\n\nAfter\nBenchmark                                      (withNulls)  Mode  Cnt  Score   Error  Units\nBenchmarkSelectiveStreamReaders.readAllBlocks      PARTIAL  avgt    5  0.107 \u00b1 0.015   s/op\nBenchmarkSelectiveStreamReaders.readAllBlocks         NONE  avgt    5  0.084 \u00b1 0.005   s/op", "committedDate": "2020-11-22T22:04:05Z", "type": "commit"}, {"oid": "e5381756f5973ee339f4491bbdadc4fc5daea942", "url": "https://github.com/prestodb/presto/commit/e5381756f5973ee339f4491bbdadc4fc5daea942", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-22T22:04:05Z", "type": "commit"}, {"oid": "e5381756f5973ee339f4491bbdadc4fc5daea942", "url": "https://github.com/prestodb/presto/commit/e5381756f5973ee339f4491bbdadc4fc5daea942", "message": "Add more filter rates to BenchmarkSelectiveStreamReaders\n\nThis commit adds more filter rates to BenchmarkSelectiveStreamReader\nin order to test SliceDirectSelectiveStreamReader.readWithFilter().\nIt also changes the reporting unit from second to millisecond since\nlots of operations only takes 1x ms per op now.", "committedDate": "2020-11-22T22:04:05Z", "type": "forcePushed"}]}